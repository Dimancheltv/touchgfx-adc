
doctor0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020e3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000036e0  08020fec  08020fec  00030fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000129c  080246cc  080246cc  000346cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 00070800  08025968  08025968  00035968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000014  08096168  08096168  000a6168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0809617c  0809617c  000b0170  2**0
                  CONTENTS
  7 .ARM          00000008  0809617c  0809617c  000a617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08096184  08096184  000b0170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08096184  08096184  000a6184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08096198  08096198  000a6198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000170  20000000  080961a0  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a394  20000170  08096310  000b0170  2**2
                  ALLOC
 13 ._user_heap_stack 00001404  2000a504  08096310  000ba504  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000b0170  2**0
                  CONTENTS, READONLY
 15 TouchGFX_Framebuffer 0004b000  d0000000  d0000000  000c0000  2**2
                  ALLOC
 16 .debug_info   0004aa35  00000000  00000000  000b01a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000c077  00000000  00000000  000fabd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 00003410  00000000  00000000  00106c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002fc8  00000000  00000000  0010a060  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00031866  00000000  00000000  0010d028  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   00030edf  00000000  00000000  0013e88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    00100625  00000000  00000000  0016f76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  0026fd92  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000e360  00000000  00000000  0026fe8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08020fd4 	.word	0x08020fd4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	08020fd4 	.word	0x08020fd4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b972 	b.w	8000dc8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9e08      	ldr	r6, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	4688      	mov	r8, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14b      	bne.n	8000ba2 <__udivmoddi4+0xa6>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4615      	mov	r5, r2
 8000b0e:	d967      	bls.n	8000be0 <__udivmoddi4+0xe4>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0720 	rsb	r7, r2, #32
 8000b1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b22:	4095      	lsls	r5, r2
 8000b24:	ea47 0803 	orr.w	r8, r7, r3
 8000b28:	4094      	lsls	r4, r2
 8000b2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b2e:	0c23      	lsrs	r3, r4, #16
 8000b30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b34:	fa1f fc85 	uxth.w	ip, r5
 8000b38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b40:	fb07 f10c 	mul.w	r1, r7, ip
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x60>
 8000b48:	18eb      	adds	r3, r5, r3
 8000b4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b4e:	f080 811b 	bcs.w	8000d88 <__udivmoddi4+0x28c>
 8000b52:	4299      	cmp	r1, r3
 8000b54:	f240 8118 	bls.w	8000d88 <__udivmoddi4+0x28c>
 8000b58:	3f02      	subs	r7, #2
 8000b5a:	442b      	add	r3, r5
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	b2a4      	uxth	r4, r4
 8000b60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x8c>
 8000b74:	192c      	adds	r4, r5, r4
 8000b76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b7a:	f080 8107 	bcs.w	8000d8c <__udivmoddi4+0x290>
 8000b7e:	45a4      	cmp	ip, r4
 8000b80:	f240 8104 	bls.w	8000d8c <__udivmoddi4+0x290>
 8000b84:	3802      	subs	r0, #2
 8000b86:	442c      	add	r4, r5
 8000b88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b8c:	eba4 040c 	sub.w	r4, r4, ip
 8000b90:	2700      	movs	r7, #0
 8000b92:	b11e      	cbz	r6, 8000b9c <__udivmoddi4+0xa0>
 8000b94:	40d4      	lsrs	r4, r2
 8000b96:	2300      	movs	r3, #0
 8000b98:	e9c6 4300 	strd	r4, r3, [r6]
 8000b9c:	4639      	mov	r1, r7
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0xbe>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	f000 80eb 	beq.w	8000d82 <__udivmoddi4+0x286>
 8000bac:	2700      	movs	r7, #0
 8000bae:	e9c6 0100 	strd	r0, r1, [r6]
 8000bb2:	4638      	mov	r0, r7
 8000bb4:	4639      	mov	r1, r7
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f783 	clz	r7, r3
 8000bbe:	2f00      	cmp	r7, #0
 8000bc0:	d147      	bne.n	8000c52 <__udivmoddi4+0x156>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0xd0>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80fa 	bhi.w	8000dc0 <__udivmoddi4+0x2c4>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	d0e0      	beq.n	8000b9c <__udivmoddi4+0xa0>
 8000bda:	e9c6 4800 	strd	r4, r8, [r6]
 8000bde:	e7dd      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000be0:	b902      	cbnz	r2, 8000be4 <__udivmoddi4+0xe8>
 8000be2:	deff      	udf	#255	; 0xff
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	f040 808f 	bne.w	8000d0c <__udivmoddi4+0x210>
 8000bee:	1b49      	subs	r1, r1, r5
 8000bf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bf4:	fa1f f885 	uxth.w	r8, r5
 8000bf8:	2701      	movs	r7, #1
 8000bfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bfe:	0c23      	lsrs	r3, r4, #16
 8000c00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb08 f10c 	mul.w	r1, r8, ip
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	d907      	bls.n	8000c20 <__udivmoddi4+0x124>
 8000c10:	18eb      	adds	r3, r5, r3
 8000c12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x122>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	f200 80cd 	bhi.w	8000db8 <__udivmoddi4+0x2bc>
 8000c1e:	4684      	mov	ip, r0
 8000c20:	1a59      	subs	r1, r3, r1
 8000c22:	b2a3      	uxth	r3, r4
 8000c24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c30:	fb08 f800 	mul.w	r8, r8, r0
 8000c34:	45a0      	cmp	r8, r4
 8000c36:	d907      	bls.n	8000c48 <__udivmoddi4+0x14c>
 8000c38:	192c      	adds	r4, r5, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x14a>
 8000c40:	45a0      	cmp	r8, r4
 8000c42:	f200 80b6 	bhi.w	8000db2 <__udivmoddi4+0x2b6>
 8000c46:	4618      	mov	r0, r3
 8000c48:	eba4 0408 	sub.w	r4, r4, r8
 8000c4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c50:	e79f      	b.n	8000b92 <__udivmoddi4+0x96>
 8000c52:	f1c7 0c20 	rsb	ip, r7, #32
 8000c56:	40bb      	lsls	r3, r7
 8000c58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c60:	fa01 f407 	lsl.w	r4, r1, r7
 8000c64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c70:	4325      	orrs	r5, r4
 8000c72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c76:	0c2c      	lsrs	r4, r5, #16
 8000c78:	fb08 3319 	mls	r3, r8, r9, r3
 8000c7c:	fa1f fa8e 	uxth.w	sl, lr
 8000c80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c84:	fb09 f40a 	mul.w	r4, r9, sl
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b0>
 8000c94:	eb1e 0303 	adds.w	r3, lr, r3
 8000c98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c9c:	f080 8087 	bcs.w	8000dae <__udivmoddi4+0x2b2>
 8000ca0:	429c      	cmp	r4, r3
 8000ca2:	f240 8084 	bls.w	8000dae <__udivmoddi4+0x2b2>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4473      	add	r3, lr
 8000cac:	1b1b      	subs	r3, r3, r4
 8000cae:	b2ad      	uxth	r5, r5
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cc0:	45a2      	cmp	sl, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1da>
 8000cc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ccc:	d26b      	bcs.n	8000da6 <__udivmoddi4+0x2aa>
 8000cce:	45a2      	cmp	sl, r4
 8000cd0:	d969      	bls.n	8000da6 <__udivmoddi4+0x2aa>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4474      	add	r4, lr
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	fba0 8902 	umull	r8, r9, r0, r2
 8000cde:	eba4 040a 	sub.w	r4, r4, sl
 8000ce2:	454c      	cmp	r4, r9
 8000ce4:	46c2      	mov	sl, r8
 8000ce6:	464b      	mov	r3, r9
 8000ce8:	d354      	bcc.n	8000d94 <__udivmoddi4+0x298>
 8000cea:	d051      	beq.n	8000d90 <__udivmoddi4+0x294>
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d069      	beq.n	8000dc4 <__udivmoddi4+0x2c8>
 8000cf0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cf4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cf8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cfc:	40fd      	lsrs	r5, r7
 8000cfe:	40fc      	lsrs	r4, r7
 8000d00:	ea4c 0505 	orr.w	r5, ip, r5
 8000d04:	e9c6 5400 	strd	r5, r4, [r6]
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e747      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d0c:	f1c2 0320 	rsb	r3, r2, #32
 8000d10:	fa20 f703 	lsr.w	r7, r0, r3
 8000d14:	4095      	lsls	r5, r2
 8000d16:	fa01 f002 	lsl.w	r0, r1, r2
 8000d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d22:	4338      	orrs	r0, r7
 8000d24:	0c01      	lsrs	r1, r0, #16
 8000d26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d2a:	fa1f f885 	uxth.w	r8, r5
 8000d2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d36:	fb07 f308 	mul.w	r3, r7, r8
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x256>
 8000d42:	1869      	adds	r1, r5, r1
 8000d44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d48:	d22f      	bcs.n	8000daa <__udivmoddi4+0x2ae>
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	d92d      	bls.n	8000daa <__udivmoddi4+0x2ae>
 8000d4e:	3f02      	subs	r7, #2
 8000d50:	4429      	add	r1, r5
 8000d52:	1acb      	subs	r3, r1, r3
 8000d54:	b281      	uxth	r1, r0
 8000d56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d62:	fb00 f308 	mul.w	r3, r0, r8
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d907      	bls.n	8000d7a <__udivmoddi4+0x27e>
 8000d6a:	1869      	adds	r1, r5, r1
 8000d6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d70:	d217      	bcs.n	8000da2 <__udivmoddi4+0x2a6>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d915      	bls.n	8000da2 <__udivmoddi4+0x2a6>
 8000d76:	3802      	subs	r0, #2
 8000d78:	4429      	add	r1, r5
 8000d7a:	1ac9      	subs	r1, r1, r3
 8000d7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d80:	e73b      	b.n	8000bfa <__udivmoddi4+0xfe>
 8000d82:	4637      	mov	r7, r6
 8000d84:	4630      	mov	r0, r6
 8000d86:	e709      	b.n	8000b9c <__udivmoddi4+0xa0>
 8000d88:	4607      	mov	r7, r0
 8000d8a:	e6e7      	b.n	8000b5c <__udivmoddi4+0x60>
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	e6fb      	b.n	8000b88 <__udivmoddi4+0x8c>
 8000d90:	4541      	cmp	r1, r8
 8000d92:	d2ab      	bcs.n	8000cec <__udivmoddi4+0x1f0>
 8000d94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d98:	eb69 020e 	sbc.w	r2, r9, lr
 8000d9c:	3801      	subs	r0, #1
 8000d9e:	4613      	mov	r3, r2
 8000da0:	e7a4      	b.n	8000cec <__udivmoddi4+0x1f0>
 8000da2:	4660      	mov	r0, ip
 8000da4:	e7e9      	b.n	8000d7a <__udivmoddi4+0x27e>
 8000da6:	4618      	mov	r0, r3
 8000da8:	e795      	b.n	8000cd6 <__udivmoddi4+0x1da>
 8000daa:	4667      	mov	r7, ip
 8000dac:	e7d1      	b.n	8000d52 <__udivmoddi4+0x256>
 8000dae:	4681      	mov	r9, r0
 8000db0:	e77c      	b.n	8000cac <__udivmoddi4+0x1b0>
 8000db2:	3802      	subs	r0, #2
 8000db4:	442c      	add	r4, r5
 8000db6:	e747      	b.n	8000c48 <__udivmoddi4+0x14c>
 8000db8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dbc:	442b      	add	r3, r5
 8000dbe:	e72f      	b.n	8000c20 <__udivmoddi4+0x124>
 8000dc0:	4638      	mov	r0, r7
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xda>
 8000dc4:	4637      	mov	r7, r6
 8000dc6:	e6e9      	b.n	8000b9c <__udivmoddi4+0xa0>

08000dc8 <__aeabi_idiv0>:
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop

08000dcc <PollingInit>:
extern osSemaphoreId_t binarySemAnalogHandle;

uint16_t uhADCxConvertedValue[10] = {0};

void PollingInit()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, &uhADCxConvertedValue, 10);
 8000dd0:	220a      	movs	r2, #10
 8000dd2:	4904      	ldr	r1, [pc, #16]	; (8000de4 <PollingInit+0x18>)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <PollingInit+0x1c>)
 8000dd6:	f002 f81b 	bl	8002e10 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8000dda:	4804      	ldr	r0, [pc, #16]	; (8000dec <PollingInit+0x20>)
 8000ddc:	f006 fe2d 	bl	8007a3a <HAL_TIM_Base_Start_IT>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	2000018c 	.word	0x2000018c
 8000de8:	2000a318 	.word	0x2000a318
 8000dec:	2000a408 	.word	0x2000a408

08000df0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(binarySemAnalogHandle);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fe65 	bl	8008acc <osSemaphoreRelease>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000a360 	.word	0x2000a360

08000e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e14:	f001 ff54 	bl	8002cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e18:	f000 f844 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1c:	f000 fb30 	bl	8001480 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e20:	f000 fab6 	bl	8001390 <MX_DMA_Init>
  MX_CRC_Init();
 8000e24:	f000 f914 	bl	8001050 <MX_CRC_Init>
  MX_I2C3_Init();
 8000e28:	f000 f958 	bl	80010dc <MX_I2C3_Init>
  MX_SPI5_Init();
 8000e2c:	f000 fa24 	bl	8001278 <MX_SPI5_Init>
  MX_FMC_Init();
 8000e30:	f000 face 	bl	80013d0 <MX_FMC_Init>
  MX_LTDC_Init();
 8000e34:	f000 f992 	bl	800115c <MX_LTDC_Init>
  MX_DMA2D_Init();
 8000e38:	f000 f91e 	bl	8001078 <MX_DMA2D_Init>
  MX_ADC1_Init();
 8000e3c:	f000 f8b6 	bl	8000fac <MX_ADC1_Init>
  MX_TIM2_Init();
 8000e40:	f000 fa50 	bl	80012e4 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 8000e44:	f00b f81a 	bl	800be7c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e48:	f007 fbfe 	bl	8008648 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySemAnalog */
  binarySemAnalogHandle = osSemaphoreNew(1, 1, &binarySemAnalog_attributes);
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <main+0x74>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2001      	movs	r0, #1
 8000e52:	f007 fd37 	bl	80088c4 <osSemaphoreNew>
 8000e56:	4602      	mov	r2, r0
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <main+0x78>)
 8000e5a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 8000e5c:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <main+0x7c>)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <main+0x80>)
 8000e62:	f007 fc5b 	bl	800871c <osThreadNew>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <main+0x84>)
 8000e6a:	601a      	str	r2, [r3, #0]

  /* creation of taskAnalogInput */
  taskAnalogInputHandle = osThreadNew(StartTaskAnalogInput, NULL, &taskAnalogInput_attributes);
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <main+0x88>)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	480a      	ldr	r0, [pc, #40]	; (8000e9c <main+0x8c>)
 8000e72:	f007 fc53 	bl	800871c <osThreadNew>
 8000e76:	4602      	mov	r2, r0
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <main+0x90>)
 8000e7a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e7c:	f007 fc18 	bl	80086b0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <main+0x70>
 8000e82:	bf00      	nop
 8000e84:	08021708 	.word	0x08021708
 8000e88:	2000a360 	.word	0x2000a360
 8000e8c:	080216c0 	.word	0x080216c0
 8000e90:	0800be89 	.word	0x0800be89
 8000e94:	2000a3c4 	.word	0x2000a3c4
 8000e98:	080216e4 	.word	0x080216e4
 8000e9c:	080019e3 	.word	0x080019e3
 8000ea0:	2000a26c 	.word	0x2000a26c

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0a0      	sub	sp, #128	; 0x80
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f01f f911 	bl	80200da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2230      	movs	r2, #48	; 0x30
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f01f f902 	bl	80200da <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <SystemClock_Config+0x100>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <SystemClock_Config+0x100>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <SystemClock_Config+0x100>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b2c      	ldr	r3, [pc, #176]	; (8000fa8 <SystemClock_Config+0x104>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <SystemClock_Config+0x104>)
 8000efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b29      	ldr	r3, [pc, #164]	; (8000fa8 <SystemClock_Config+0x104>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f22:	2308      	movs	r3, #8
 8000f24:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f26:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f2a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f30:	2304      	movs	r3, #4
 8000f32:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 f937 	bl	80061ac <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f44:	f000 fd6a 	bl	8001a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f64:	2105      	movs	r1, #5
 8000f66:	4618      	mov	r0, r3
 8000f68:	f005 fb90 	bl	800668c <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f72:	f000 fd53 	bl	8001a1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f76:	2308      	movs	r3, #8
 8000f78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000f7a:	23c0      	movs	r3, #192	; 0xc0
 8000f7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000f82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f005 fd8d 	bl	8006aac <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000f98:	f000 fd40 	bl	8001a1c <Error_Handler>
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3780      	adds	r7, #128	; 0x80
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40007000 	.word	0x40007000

08000fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <MX_ADC1_Init+0xa0>)
 8000fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000ff0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_ADC1_Init+0x9c>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_ADC1_Init+0x9c>)
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_ADC1_Init+0x9c>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_ADC1_Init+0x9c>)
 8001012:	f001 feb9 	bl	8002d88 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800101c:	f000 fcfe 	bl	8001a1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001020:	2300      	movs	r3, #0
 8001022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001024:	2301      	movs	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_ADC1_Init+0x9c>)
 8001032:	f001 fff3 	bl	800301c <HAL_ADC_ConfigChannel>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800103c:	f000 fcee 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	2000a318 	.word	0x2000a318
 800104c:	40012000 	.word	0x40012000

08001050 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_CRC_Init+0x20>)
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <MX_CRC_Init+0x24>)
 8001058:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_CRC_Init+0x20>)
 800105c:	f002 fba0 	bl	80037a0 <HAL_CRC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001066:	f000 fcd9 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000a264 	.word	0x2000a264
 8001074:	40023000 	.word	0x40023000

08001078 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_DMA2D_Init+0x60>)
 8001080:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 800108a:	2202      	movs	r2, #2
 800108c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 800109c:	2202      	movs	r2, #2
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 80010ae:	f002 ff01 	bl	8003eb4 <HAL_DMA2D_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80010b8:	f000 fcb0 	bl	8001a1c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010bc:	2101      	movs	r1, #1
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_DMA2D_Init+0x5c>)
 80010c0:	f003 f9c2 	bl	8004448 <HAL_DMA2D_ConfigLayer>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010ca:	f000 fca7 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000a3c8 	.word	0x2000a3c8
 80010d8:	4002b000 	.word	0x4002b000

080010dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_I2C3_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_I2C3_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_I2C3_Init+0x74>)
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <MX_I2C3_Init+0x7c>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_I2C3_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_I2C3_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_I2C3_Init+0x74>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_I2C3_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_I2C3_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_I2C3_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <MX_I2C3_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_I2C3_Init+0x74>)
 800111a:	f003 fc87 	bl	8004a2c <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fc7a 	bl	8001a1c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8001128:	2110      	movs	r1, #16
 800112a:	4809      	ldr	r0, [pc, #36]	; (8001150 <MX_I2C3_Init+0x74>)
 800112c:	f004 fc2d 	bl	800598a <HAL_I2CEx_ConfigAnalogFilter>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001136:	f000 fc71 	bl	8001a1c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800113a:	2100      	movs	r1, #0
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <MX_I2C3_Init+0x74>)
 800113e:	f004 fc60 	bl	8005a02 <HAL_I2CEx_ConfigDigitalFilter>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001148:	f000 fc68 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000a1b8 	.word	0x2000a1b8
 8001154:	40005c00 	.word	0x40005c00
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08e      	sub	sp, #56	; 0x38
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2234      	movs	r2, #52	; 0x34
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f01e ffb6 	bl	80200da <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800116e:	4b3e      	ldr	r3, [pc, #248]	; (8001268 <MX_LTDC_Init+0x10c>)
 8001170:	4a3e      	ldr	r2, [pc, #248]	; (800126c <MX_LTDC_Init+0x110>)
 8001172:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001174:	4b3c      	ldr	r3, [pc, #240]	; (8001268 <MX_LTDC_Init+0x10c>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800117a:	4b3b      	ldr	r3, [pc, #236]	; (8001268 <MX_LTDC_Init+0x10c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <MX_LTDC_Init+0x10c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001186:	4b38      	ldr	r3, [pc, #224]	; (8001268 <MX_LTDC_Init+0x10c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <MX_LTDC_Init+0x10c>)
 800118e:	2209      	movs	r2, #9
 8001190:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <MX_LTDC_Init+0x10c>)
 8001194:	2201      	movs	r2, #1
 8001196:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <MX_LTDC_Init+0x10c>)
 800119a:	221d      	movs	r2, #29
 800119c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800119e:	4b32      	ldr	r3, [pc, #200]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011a0:	2203      	movs	r2, #3
 80011a2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011a6:	f240 120d 	movw	r2, #269	; 0x10d
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011ae:	f240 1243 	movw	r2, #323	; 0x143
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011b6:	f240 1217 	movw	r2, #279	; 0x117
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011be:	f240 1247 	movw	r2, #327	; 0x147
 80011c2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011dc:	4822      	ldr	r0, [pc, #136]	; (8001268 <MX_LTDC_Init+0x10c>)
 80011de:	f004 fc4f 	bl	8005a80 <HAL_LTDC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80011e8:	f000 fc18 	bl	8001a1c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80011f0:	23f0      	movs	r3, #240	; 0xf0
 80011f2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80011f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80011fc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011fe:	2302      	movs	r3, #2
 8001200:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001210:	2305      	movs	r3, #5
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001218:	23f0      	movs	r3, #240	; 0xf0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800121c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001220:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2200      	movs	r2, #0
 8001238:	4619      	mov	r1, r3
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <MX_LTDC_Init+0x10c>)
 800123c:	f004 fda8 	bl	8005d90 <HAL_LTDC_ConfigLayer>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8001246:	f000 fbe9 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
    /*Select the device */
  LcdDrv = &ili9341_drv;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_LTDC_Init+0x114>)
 800124c:	4a09      	ldr	r2, [pc, #36]	; (8001274 <MX_LTDC_Init+0x118>)
 800124e:	601a      	str	r2, [r3, #0]
  /* LCD Init */
  LcdDrv->Init();
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_LTDC_Init+0x114>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4798      	blx	r3
  
  LcdDrv->DisplayOff();
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <MX_LTDC_Init+0x114>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	4798      	blx	r3
  /* USER CODE END LTDC_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	3738      	adds	r7, #56	; 0x38
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	2000a270 	.word	0x2000a270
 800126c:	40016800 	.word	0x40016800
 8001270:	200001a0 	.word	0x200001a0
 8001274:	20000010 	.word	0x20000010

08001278 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_SPI5_Init+0x64>)
 800127e:	4a18      	ldr	r2, [pc, #96]	; (80012e0 <MX_SPI5_Init+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI5_Init+0x64>)
 8001284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001288:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI5_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SPI5_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI5_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI5_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI5_Init+0x64>)
 80012a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI5_Init+0x64>)
 80012ac:	2218      	movs	r2, #24
 80012ae:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <MX_SPI5_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI5_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	; (80012dc <MX_SPI5_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI5_Init+0x64>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <MX_SPI5_Init+0x64>)
 80012ca:	f005 fe2c 	bl	8006f26 <HAL_SPI_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80012d4:	f000 fba2 	bl	8001a1c <Error_Handler>
  
  

  /* USER CODE END SPI5_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000a20c 	.word	0x2000a20c
 80012e0:	40015000 	.word	0x40015000

080012e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_TIM2_Init+0xa8>)
 8001308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800130c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000-1;
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_TIM2_Init+0xa8>)
 8001310:	f242 720f 	movw	r2, #9999	; 0x270f
 8001314:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_TIM2_Init+0xa8>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_TIM2_Init+0xa8>)
 800131e:	2263      	movs	r2, #99	; 0x63
 8001320:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_TIM2_Init+0xa8>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_TIM2_Init+0xa8>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800132e:	4817      	ldr	r0, [pc, #92]	; (800138c <MX_TIM2_Init+0xa8>)
 8001330:	f006 fba7 	bl	8007a82 <HAL_TIM_OC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800133a:	f000 fb6f 	bl	8001a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800133e:	2320      	movs	r3, #32
 8001340:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4619      	mov	r1, r3
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <MX_TIM2_Init+0xa8>)
 800134e:	f006 ffa3 	bl	8008298 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001358:	f000 fb60 	bl	8001a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_TIM2_Init+0xa8>)
 8001374:	f006 fcb8 	bl	8007ce8 <HAL_TIM_OC_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800137e:	f000 fb4d 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000a408 	.word	0x2000a408

08001390 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_DMA_Init+0x3c>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <MX_DMA_Init+0x3c>)
 80013a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_DMA_Init+0x3c>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2105      	movs	r1, #5
 80013b6:	2038      	movs	r0, #56	; 0x38
 80013b8:	f002 f9ba 	bl	8003730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013bc:	2038      	movs	r0, #56	; 0x38
 80013be:	f002 f9d3 	bl	8003768 <HAL_NVIC_EnableIRQ>

}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	; 0x30
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <MX_FMC_Init+0xa8>)
 80013ec:	4a23      	ldr	r2, [pc, #140]	; (800147c <MX_FMC_Init+0xac>)
 80013ee:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <MX_FMC_Init+0xa8>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013f6:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_FMC_Init+0xa8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_FMC_Init+0xa8>)
 80013fe:	2204      	movs	r2, #4
 8001400:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_FMC_Init+0xa8>)
 8001404:	2210      	movs	r2, #16
 8001406:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_FMC_Init+0xa8>)
 800140a:	2240      	movs	r2, #64	; 0x40
 800140c:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <MX_FMC_Init+0xa8>)
 8001410:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001414:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_FMC_Init+0xa8>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <MX_FMC_Init+0xa8>)
 800141e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001422:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_FMC_Init+0xa8>)
 8001426:	2200      	movs	r2, #0
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <MX_FMC_Init+0xa8>)
 800142c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001436:	2307      	movs	r3, #7
 8001438:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 800143a:	2304      	movs	r3, #4
 800143c:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 800143e:	2307      	movs	r3, #7
 8001440:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8001442:	2303      	movs	r3, #3
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4808      	ldr	r0, [pc, #32]	; (8001478 <MX_FMC_Init+0xa8>)
 8001456:	f005 fce7 	bl	8006e28 <HAL_SDRAM_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8001460:	f000 fadc 	bl	8001a1c <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */
  
  FMC_SDRAM_CommandTypeDef command;
  
  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <MX_FMC_Init+0xa8>)
 800146a:	f000 f8b7 	bl	80015dc <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	; 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000a448 	.word	0x2000a448
 800147c:	a0000140 	.word	0xa0000140

08001480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08e      	sub	sp, #56	; 0x38
 8001484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
 800149a:	4b4d      	ldr	r3, [pc, #308]	; (80015d0 <MX_GPIO_Init+0x150>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a4c      	ldr	r2, [pc, #304]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	623b      	str	r3, [r7, #32]
 80014b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a45      	ldr	r2, [pc, #276]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	4b3f      	ldr	r3, [pc, #252]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a3e      	ldr	r2, [pc, #248]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <MX_GPIO_Init+0x150>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_GPIO_Init+0x150>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x150>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b27      	ldr	r3, [pc, #156]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001548:	f043 0310 	orr.w	r3, r3, #16
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <MX_GPIO_Init+0x150>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_GPIO_Init+0x150>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_GPIO_Init+0x154>)
 800157c:	f003 fa3c 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <MX_GPIO_Init+0x158>)
 8001588:	f003 fa36 	bl	80049f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800158c:	2304      	movs	r3, #4
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2302      	movs	r3, #2
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_GPIO_Init+0x154>)
 80015a4:	f003 f87e 	bl	80046a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015a8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015b6:	2302      	movs	r3, #2
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_GPIO_Init+0x158>)
 80015c2:	f003 f86f 	bl	80046a4 <HAL_GPIO_Init>

}
 80015c6:	bf00      	nop
 80015c8:	3738      	adds	r7, #56	; 0x38
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020800 	.word	0x40020800
 80015d8:	40020c00 	.word	0x40020c00

080015dc <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd =0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	2208      	movs	r2, #8
 80015f4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001606:	6839      	ldr	r1, [r7, #0]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f005 fc41 	bl	8006e90 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800160e:	2001      	movs	r0, #1
 8001610:	f001 fb98 	bl	8002d44 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_PALL;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2202      	movs	r2, #2
 8001618:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  
 800162c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f005 fc2c 	bl	8006e90 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2203      	movs	r2, #3
 800163c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 4;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	2204      	movs	r2, #4
 8001648:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001650:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f005 fc1a 	bl	8006e90 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800165c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001660:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	2204      	movs	r2, #4
 8001666:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2208      	movs	r2, #8
 800166c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = tmpmrd;
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800167a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f005 fc05 	bl	8006e90 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 8001686:	f240 516a 	movw	r1, #1386	; 0x56a
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f005 fc2b 	bl	8006ee6 <HAL_SDRAM_ProgramRefreshRate>
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup the i2c.
  //This is done with cubmx and is therfore not done here.
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup interupt for the i2c.
  //The interupt is not used in our case, therefore nothing is done here.
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
 80016be:	460b      	mov	r3, r1
 80016c0:	71bb      	strb	r3, [r7, #6]
 80016c2:	4613      	mov	r3, r2
 80016c4:	717b      	strb	r3, [r7, #5]
  I2C3_WriteData(Addr, Reg, Value);
 80016c6:	797a      	ldrb	r2, [r7, #5]
 80016c8:	79b9      	ldrb	r1, [r7, #6]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f839 	bl	8001744 <I2C3_WriteData>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	460a      	mov	r2, r1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	4613      	mov	r3, r2
 80016e8:	71bb      	strb	r3, [r7, #6]
  return I2C3_ReadData(Addr, Reg);
 80016ea:	79ba      	ldrb	r2, [r7, #6]
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f84b 	bl	800178c <I2C3_ReadData>
 80016f6:	4603      	mov	r3, r0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	603a      	str	r2, [r7, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
 800170e:	460b      	mov	r3, r1
 8001710:	71bb      	strb	r3, [r7, #6]
 8001712:	4613      	mov	r3, r2
 8001714:	80bb      	strh	r3, [r7, #4]
 return I2C3_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001716:	88bb      	ldrh	r3, [r7, #4]
 8001718:	79b9      	ldrb	r1, [r7, #6]
 800171a:	79f8      	ldrb	r0, [r7, #7]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	f000 f85d 	bl	80017dc <I2C3_ReadBuffer>
 8001722:	4603      	mov	r3, r0
 8001724:	b29b      	uxth	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f001 fb04 	bl	8002d44 <HAL_Delay>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <I2C3_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2C3_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af04      	add	r7, sp, #16
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	460b      	mov	r3, r1
 8001750:	71bb      	strb	r3, [r7, #6]
 8001752:	4613      	mov	r3, r2
 8001754:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout); 
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	b299      	uxth	r1, r3
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	b29a      	uxth	r2, r3
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <I2C3_WriteData+0x40>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	2301      	movs	r3, #1
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	1d7b      	adds	r3, r7, #5
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2301      	movs	r3, #1
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <I2C3_WriteData+0x44>)
 8001774:	f003 fa92 	bl	8004c9c <HAL_I2C_Mem_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  }        
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000004 	.word	0x20000004
 8001788:	2000a1b8 	.word	0x2000a1b8

0800178c <I2C3_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2C3_ReadData(uint8_t Addr, uint8_t Reg)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af04      	add	r7, sp, #16
 8001792:	4603      	mov	r3, r0
 8001794:	460a      	mov	r2, r1
 8001796:	71fb      	strb	r3, [r7, #7]
 8001798:	4613      	mov	r3, r2
 800179a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	b299      	uxth	r1, r3
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <I2C3_ReadData+0x48>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	2301      	movs	r3, #1
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f107 030e 	add.w	r3, r7, #14
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <I2C3_ReadData+0x4c>)
 80017c0:	f003 fb66 	bl	8004e90 <HAL_I2C_Mem_Read>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  
  }
  return value;
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000004 	.word	0x20000004
 80017d8:	2000a1b8 	.word	0x2000a1b8

080017dc <I2C3_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2C3_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	603a      	str	r2, [r7, #0]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	460b      	mov	r3, r1
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	b299      	uxth	r1, r3
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <I2C3_ReadBuffer+0x50>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <I2C3_ReadBuffer+0x54>)
 8001810:	f003 fb3e 	bl	8004e90 <HAL_I2C_Mem_Read>
 8001814:	4603      	mov	r3, r0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <I2C3_ReadBuffer+0x46>
  {
    return 0;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <I2C3_ReadBuffer+0x48>
  else
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

    return 1;
 8001822:	2301      	movs	r3, #1
  }
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000004 	.word	0x20000004
 8001830:	2000a1b8 	.word	0x2000a1b8

08001834 <SPI5_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPI5_Read(uint8_t ReadSize)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <SPI5_Read+0x38>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f107 0108 	add.w	r1, r7, #8
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <SPI5_Read+0x3c>)
 8001850:	f005 fd01 	bl	8007256 <HAL_SPI_Receive>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SPI5_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800185e:	f000 f827 	bl	80018b0 <SPI5_Error>
  }
  
  return readvalue;
 8001862:	68bb      	ldr	r3, [r7, #8]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000008 	.word	0x20000008
 8001870:	2000a20c 	.word	0x2000a20c

08001874 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <SPI5_Write+0x34>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	1db9      	adds	r1, r7, #6
 8001888:	2201      	movs	r2, #1
 800188a:	4808      	ldr	r0, [pc, #32]	; (80018ac <SPI5_Write+0x38>)
 800188c:	f005 fbaf 	bl	8006fee <HAL_SPI_Transmit>
 8001890:	4603      	mov	r3, r0
 8001892:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <SPI5_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 800189a:	f000 f809 	bl	80018b0 <SPI5_Error>
  }
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000008 	.word	0x20000008
 80018ac:	2000a20c 	.word	0x2000a20c

080018b0 <SPI5_Error>:

/**
  * @brief  SPI5 error treatment function.
  */
static void SPI5_Error(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  //HAL_SPI_DeInit(&SpiHandle);
  
  /* Re- Initialize the SPI communication BUS */
  //SPIx_Init();
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <LCD_IO_Init>:

void LCD_IO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Set or Reset the control line */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2104      	movs	r1, #4
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <LCD_IO_Init+0x1c>)
 80018ca:	f003 f895 	bl	80049f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2104      	movs	r1, #4
 80018d2:	4802      	ldr	r0, [pc, #8]	; (80018dc <LCD_IO_Init+0x1c>)
 80018d4:	f003 f890 	bl	80049f8 <HAL_GPIO_WritePin>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	40020800 	.word	0x40020800

080018e0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f0:	480a      	ldr	r0, [pc, #40]	; (800191c <LCD_IO_WriteData+0x3c>)
 80018f2:	f003 f881 	bl	80049f8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2104      	movs	r1, #4
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <LCD_IO_WriteData+0x40>)
 80018fc:	f003 f87c 	bl	80049f8 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ffb6 	bl	8001874 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2104      	movs	r1, #4
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <LCD_IO_WriteData+0x40>)
 800190e:	f003 f873 	bl	80049f8 <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40020800 	.word	0x40020800

08001924 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <LCD_IO_WriteReg+0x3c>)
 8001936:	f003 f85f 	bl	80049f8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2104      	movs	r1, #4
 800193e:	4809      	ldr	r0, [pc, #36]	; (8001964 <LCD_IO_WriteReg+0x40>)
 8001940:	f003 f85a 	bl	80049f8 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff93 	bl	8001874 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800194e:	2201      	movs	r2, #1
 8001950:	2104      	movs	r1, #4
 8001952:	4804      	ldr	r0, [pc, #16]	; (8001964 <LCD_IO_WriteReg+0x40>)
 8001954:	f003 f850 	bl	80049f8 <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40020800 	.word	0x40020800

08001968 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	2104      	movs	r1, #4
 8001980:	4810      	ldr	r0, [pc, #64]	; (80019c4 <LCD_IO_ReadData+0x5c>)
 8001982:	f003 f839 	bl	80049f8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	480e      	ldr	r0, [pc, #56]	; (80019c8 <LCD_IO_ReadData+0x60>)
 800198e:	f003 f833 	bl	80049f8 <HAL_GPIO_WritePin>
  
  SPI5_Write(RegValue);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff6d 	bl	8001874 <SPI5_Write>
  
  readvalue = SPI5_Read(ReadSize);
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff49 	bl	8001834 <SPI5_Read>
 80019a2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019aa:	4807      	ldr	r0, [pc, #28]	; (80019c8 <LCD_IO_ReadData+0x60>)
 80019ac:	f003 f824 	bl	80049f8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2104      	movs	r1, #4
 80019b4:	4803      	ldr	r0, [pc, #12]	; (80019c4 <LCD_IO_ReadData+0x5c>)
 80019b6:	f003 f81f 	bl	80049f8 <HAL_GPIO_WritePin>
  
  return readvalue;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00

080019cc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f001 f9b5 	bl	8002d44 <HAL_Delay>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <StartTaskAnalogInput>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAnalogInput */
void StartTaskAnalogInput(void *argument)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAnalogInput */
	PollingInit();
 80019ea:	f7ff f9ef 	bl	8000dcc <PollingInit>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f006 ff3a 	bl	8008868 <osDelay>
 80019f4:	e7fb      	b.n	80019ee <StartTaskAnalogInput+0xc>
	...

080019f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a0a:	f001 f97b 	bl	8002d04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40001000 	.word	0x40001000

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	607b      	str	r3, [r7, #4]
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_MspInit+0x54>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_MspInit+0x54>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_MspInit+0x54>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <HAL_MspInit+0x54>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_MspInit+0x54>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_MspInit+0x54>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	f06f 0001 	mvn.w	r0, #1
 8001a72:	f001 fe5d 	bl	8003730 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800

08001a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a2f      	ldr	r2, [pc, #188]	; (8001b60 <HAL_ADC_MspInit+0xdc>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d157      	bne.n	8001b56 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <HAL_ADC_MspInit+0xe0>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <HAL_ADC_MspInit+0xe0>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_ADC_MspInit+0xe0>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <HAL_ADC_MspInit+0xe0>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a26      	ldr	r2, [pc, #152]	; (8001b64 <HAL_ADC_MspInit+0xe0>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_ADC_MspInit+0xe0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	481d      	ldr	r0, [pc, #116]	; (8001b68 <HAL_ADC_MspInit+0xe4>)
 8001af2:	f002 fdd7 	bl	80046a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_ADC_MspInit+0xec>)
 8001afa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b3c:	f001 fe4c 	bl	80037d8 <HAL_DMA_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b46:	f7ff ff69 	bl	8001a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_ADC_MspInit+0xe8>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3728      	adds	r7, #40	; 0x28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40012000 	.word	0x40012000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	2000a364 	.word	0x2000a364
 8001b70:	40026410 	.word	0x40026410

08001b74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_CRC_MspInit+0x3c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d10d      	bne.n	8001ba2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_CRC_MspInit+0x40>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_CRC_MspInit+0x40>)
 8001b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_CRC_MspInit+0x40>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023000 	.word	0x40023000
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_DMA2D_MspInit+0x48>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d115      	bne.n	8001bf6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_DMA2D_MspInit+0x4c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_DMA2D_MspInit+0x4c>)
 8001bd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <HAL_DMA2D_MspInit+0x4c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2105      	movs	r1, #5
 8001bea:	205a      	movs	r0, #90	; 0x5a
 8001bec:	f001 fda0 	bl	8003730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bf0:	205a      	movs	r0, #90	; 0x5a
 8001bf2:	f001 fdb9 	bl	8003768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	4002b000 	.word	0x4002b000
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_DMA2D_MspDeInit+0x2c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d108      	bne.n	8001c2c <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <HAL_DMA2D_MspDeInit+0x30>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <HAL_DMA2D_MspDeInit+0x30>)
 8001c20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8001c26:	205a      	movs	r0, #90	; 0x5a
 8001c28:	f001 fdac 	bl	8003784 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	4002b000 	.word	0x4002b000
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_I2C_MspInit+0xc4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d14b      	bne.n	8001cf6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4815      	ldr	r0, [pc, #84]	; (8001d08 <HAL_I2C_MspInit+0xcc>)
 8001cb4:	f002 fcf6 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <HAL_I2C_MspInit+0xd0>)
 8001cd6:	f002 fce5 	bl	80046a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005c00 	.word	0x40005c00
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a7b      	ldr	r2, [pc, #492]	; (8001f1c <HAL_LTDC_MspInit+0x20c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	f040 80ef 	bne.w	8001f12 <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	4b79      	ldr	r3, [pc, #484]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	4a78      	ldr	r2, [pc, #480]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d42:	6453      	str	r3, [r2, #68]	; 0x44
 8001d44:	4b76      	ldr	r3, [pc, #472]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
 8001d54:	4b72      	ldr	r3, [pc, #456]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a71      	ldr	r2, [pc, #452]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d5a:	f043 0320 	orr.w	r3, r3, #32
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	4b6b      	ldr	r3, [pc, #428]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a6a      	ldr	r2, [pc, #424]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b68      	ldr	r3, [pc, #416]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	4a63      	ldr	r2, [pc, #396]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d92:	f043 0302 	orr.w	r3, r3, #2
 8001d96:	6313      	str	r3, [r2, #48]	; 0x30
 8001d98:	4b61      	ldr	r3, [pc, #388]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	4a5c      	ldr	r2, [pc, #368]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db2:	6313      	str	r3, [r2, #48]	; 0x30
 8001db4:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b56      	ldr	r3, [pc, #344]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001dca:	f043 0304 	orr.w	r3, r3, #4
 8001dce:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd0:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <HAL_LTDC_MspInit+0x210>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2302      	movs	r3, #2
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e0a:	230e      	movs	r3, #14
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e12:	4619      	mov	r1, r3
 8001e14:	4843      	ldr	r0, [pc, #268]	; (8001f24 <HAL_LTDC_MspInit+0x214>)
 8001e16:	f002 fc45 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8001e1a:	f641 0358 	movw	r3, #6232	; 0x1858
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e2c:	230e      	movs	r3, #14
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	483c      	ldr	r0, [pc, #240]	; (8001f28 <HAL_LTDC_MspInit+0x218>)
 8001e38:	f002 fc34 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e4c:	2309      	movs	r3, #9
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4835      	ldr	r0, [pc, #212]	; (8001f2c <HAL_LTDC_MspInit+0x21c>)
 8001e58:	f002 fc24 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001e5c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e6e:	230e      	movs	r3, #14
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	482c      	ldr	r0, [pc, #176]	; (8001f2c <HAL_LTDC_MspInit+0x21c>)
 8001e7a:	f002 fc13 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001e7e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e90:	230e      	movs	r3, #14
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4825      	ldr	r0, [pc, #148]	; (8001f30 <HAL_LTDC_MspInit+0x220>)
 8001e9c:	f002 fc02 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ea0:	23c0      	movs	r3, #192	; 0xc0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eac:	2302      	movs	r3, #2
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb0:	230e      	movs	r3, #14
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <HAL_LTDC_MspInit+0x224>)
 8001ebc:	f002 fbf2 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed0:	230e      	movs	r3, #14
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4817      	ldr	r0, [pc, #92]	; (8001f38 <HAL_LTDC_MspInit+0x228>)
 8001edc:	f002 fbe2 	bl	80046a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001ee0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ef2:	2309      	movs	r3, #9
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <HAL_LTDC_MspInit+0x220>)
 8001efe:	f002 fbd1 	bl	80046a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2105      	movs	r1, #5
 8001f06:	2058      	movs	r0, #88	; 0x58
 8001f08:	f001 fc12 	bl	8003730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001f0c:	2058      	movs	r0, #88	; 0x58
 8001f0e:	f001 fc2b 	bl	8003768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3738      	adds	r7, #56	; 0x38
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40016800 	.word	0x40016800
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40021400 	.word	0x40021400
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00

08001f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_SPI_MspInit+0x84>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d12c      	bne.n	8001fb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_SPI_MspInit+0x88>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a17      	ldr	r2, [pc, #92]	; (8001fc4 <HAL_SPI_MspInit+0x88>)
 8001f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_SPI_MspInit+0x88>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_SPI_MspInit+0x88>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_SPI_MspInit+0x88>)
 8001f84:	f043 0320 	orr.w	r3, r3, #32
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_SPI_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f96:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fa8:	2305      	movs	r3, #5
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <HAL_SPI_MspInit+0x8c>)
 8001fb4:	f002 fb76 	bl	80046a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001fb8:	bf00      	nop
 8001fba:	3728      	adds	r7, #40	; 0x28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40015000 	.word	0x40015000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40021400 	.word	0x40021400

08001fcc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d10d      	bne.n	8001ffa <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <HAL_TIM_OC_MspInit+0x3c>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <HAL_TIM_OC_MspInit+0x3c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_TIM_OC_MspInit+0x3c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_FMC_MspInit+0x104>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d16f      	bne.n	8002108 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_FMC_MspInit+0x104>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_FMC_MspInit+0x108>)
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	4a37      	ldr	r2, [pc, #220]	; (8002114 <HAL_FMC_MspInit+0x108>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6393      	str	r3, [r2, #56]	; 0x38
 800203e:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_FMC_MspInit+0x108>)
 8002040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800204a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800204e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800205c:	230c      	movs	r3, #12
 800205e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	4619      	mov	r1, r3
 8002064:	482c      	ldr	r0, [pc, #176]	; (8002118 <HAL_FMC_MspInit+0x10c>)
 8002066:	f002 fb1d 	bl	80046a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206a:	2301      	movs	r3, #1
 800206c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800207a:	230c      	movs	r3, #12
 800207c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	4619      	mov	r1, r3
 8002082:	4826      	ldr	r0, [pc, #152]	; (800211c <HAL_FMC_MspInit+0x110>)
 8002084:	f002 fb0e 	bl	80046a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 8002088:	f248 1333 	movw	r3, #33075	; 0x8133
 800208c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800209a:	230c      	movs	r3, #12
 800209c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	481f      	ldr	r0, [pc, #124]	; (8002120 <HAL_FMC_MspInit+0x114>)
 80020a4:	f002 fafe 	bl	80046a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 80020a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020ac:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020ba:	230c      	movs	r3, #12
 80020bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4818      	ldr	r0, [pc, #96]	; (8002124 <HAL_FMC_MspInit+0x118>)
 80020c4:	f002 faee 	bl	80046a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 80020c8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80020cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020da:	230c      	movs	r3, #12
 80020dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	4619      	mov	r1, r3
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <HAL_FMC_MspInit+0x11c>)
 80020e4:	f002 fade 	bl	80046a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80020e8:	2360      	movs	r3, #96	; 0x60
 80020ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f4:	2303      	movs	r3, #3
 80020f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020f8:	230c      	movs	r3, #12
 80020fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	4619      	mov	r1, r3
 8002100:	480a      	ldr	r0, [pc, #40]	; (800212c <HAL_FMC_MspInit+0x120>)
 8002102:	f002 facf 	bl	80046a4 <HAL_GPIO_Init>
 8002106:	e000      	b.n	800210a <HAL_FMC_MspInit+0xfe>
    return;
 8002108:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200001a4 	.word	0x200001a4
 8002114:	40023800 	.word	0x40023800
 8002118:	40021400 	.word	0x40021400
 800211c:	40020800 	.word	0x40020800
 8002120:	40021800 	.word	0x40021800
 8002124:	40021000 	.word	0x40021000
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40020400 	.word	0x40020400

08002130 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002138:	f7ff ff68 	bl	800200c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	2036      	movs	r0, #54	; 0x36
 800215a:	f001 fae9 	bl	8003730 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800215e:	2036      	movs	r0, #54	; 0x36
 8002160:	f001 fb02 	bl	8003768 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <HAL_InitTick+0xa4>)
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_InitTick+0xa4>)
 800216e:	f043 0310 	orr.w	r3, r3, #16
 8002172:	6413      	str	r3, [r2, #64]	; 0x40
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_InitTick+0xa4>)
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f003 0310 	and.w	r3, r3, #16
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002180:	f107 0210 	add.w	r2, r7, #16
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f004 fc5c 	bl	8006a48 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002190:	f004 fc46 	bl	8006a20 <HAL_RCC_GetPCLK1Freq>
 8002194:	4603      	mov	r3, r0
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800219a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219c:	4a13      	ldr	r2, [pc, #76]	; (80021ec <HAL_InitTick+0xa8>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9b      	lsrs	r3, r3, #18
 80021a4:	3b01      	subs	r3, #1
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_InitTick+0xac>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_InitTick+0xb0>)
 80021ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_InitTick+0xac>)
 80021b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021b6:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_InitTick+0xac>)
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_InitTick+0xac>)
 80021be:	2200      	movs	r2, #0
 80021c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_InitTick+0xac>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <HAL_InitTick+0xac>)
 80021ca:	f005 fc01 	bl	80079d0 <HAL_TIM_Base_Init>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d104      	bne.n	80021de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80021d4:	4806      	ldr	r0, [pc, #24]	; (80021f0 <HAL_InitTick+0xac>)
 80021d6:	f005 fc30 	bl	8007a3a <HAL_TIM_Base_Start_IT>
 80021da:	4603      	mov	r3, r0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3730      	adds	r7, #48	; 0x30
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40023800 	.word	0x40023800
 80021ec:	431bde83 	.word	0x431bde83
 80021f0:	2000a47c 	.word	0x2000a47c
 80021f4:	40001000 	.word	0x40001000

080021f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <HardFault_Handler+0x4>

0800220c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002210:	e7fe      	b.n	8002210 <MemManage_Handler+0x4>

08002212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002212:	b480      	push	{r7}
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002216:	e7fe      	b.n	8002216 <BusFault_Handler+0x4>

08002218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800221c:	e7fe      	b.n	800221c <UsageFault_Handler+0x4>

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <TIM6_DAC_IRQHandler+0x10>)
 8002232:	f005 fc51 	bl	8007ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	2000a47c 	.word	0x2000a47c

08002240 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002244:	4802      	ldr	r0, [pc, #8]	; (8002250 <DMA2_Stream0_IRQHandler+0x10>)
 8002246:	f001 fbcd 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000a364 	.word	0x2000a364

08002254 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <LTDC_IRQHandler+0x10>)
 800225a:	f003 fce1 	bl	8005c20 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000a270 	.word	0x2000a270

08002268 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800226c:	4802      	ldr	r0, [pc, #8]	; (8002278 <DMA2D_IRQHandler+0x10>)
 800226e:	f001 ffda 	bl	8004226 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000a3c8 	.word	0x2000a3c8

0800227c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
	return 1;
 8002280:	2301      	movs	r3, #1
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_kill>:

int _kill(int pid, int sig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002296:	f01d fec9 	bl	802002c <__errno>
 800229a:	4602      	mov	r2, r0
 800229c:	2316      	movs	r3, #22
 800229e:	6013      	str	r3, [r2, #0]
	return -1;
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_exit>:

void _exit (int status)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ffe7 	bl	800228c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022be:	e7fe      	b.n	80022be <_exit+0x12>

080022c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	e00a      	b.n	80022e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022d2:	f3af 8000 	nop.w
 80022d6:	4601      	mov	r1, r0
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	60ba      	str	r2, [r7, #8]
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	dbf0      	blt.n	80022d2 <_read+0x12>
	}

return len;
 80022f0:	687b      	ldr	r3, [r7, #4]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e009      	b.n	8002320 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	3301      	adds	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	429a      	cmp	r2, r3
 8002326:	dbf1      	blt.n	800230c <_write+0x12>
	}
	return len;
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <_close>:

int _close(int file)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
	return -1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800235a:	605a      	str	r2, [r3, #4]
	return 0;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_isatty>:

int _isatty(int file)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
	return 1;
 8002372:	2301      	movs	r3, #1
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <_sbrk+0x50>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d102      	bne.n	80023b2 <_sbrk+0x16>
		heap_end = &end;
 80023ac:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <_sbrk+0x50>)
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <_sbrk+0x54>)
 80023b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <_sbrk+0x50>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <_sbrk+0x50>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	466a      	mov	r2, sp
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d907      	bls.n	80023d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023c6:	f01d fe31 	bl	802002c <__errno>
 80023ca:	4602      	mov	r2, r0
 80023cc:	230c      	movs	r3, #12
 80023ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023d0:	f04f 33ff 	mov.w	r3, #4294967295
 80023d4:	e006      	b.n	80023e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80023d6:	4b05      	ldr	r3, [pc, #20]	; (80023ec <_sbrk+0x50>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	4a03      	ldr	r2, [pc, #12]	; (80023ec <_sbrk+0x50>)
 80023e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80023e2:	68fb      	ldr	r3, [r7, #12]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	200001a8 	.word	0x200001a8
 80023f0:	2000a508 	.word	0x2000a508

080023f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <SystemInit+0x28>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fe:	4a07      	ldr	r2, [pc, #28]	; (800241c <SystemInit+0x28>)
 8002400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002408:	4b04      	ldr	r3, [pc, #16]	; (800241c <SystemInit+0x28>)
 800240a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240e:	609a      	str	r2, [r3, #8]
#endif
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002458 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002424:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002426:	e003      	b.n	8002430 <LoopCopyDataInit>

08002428 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800242a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800242c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800242e:	3104      	adds	r1, #4

08002430 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002430:	480b      	ldr	r0, [pc, #44]	; (8002460 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002434:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002436:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002438:	d3f6      	bcc.n	8002428 <CopyDataInit>
  ldr  r2, =_sbss
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800243c:	e002      	b.n	8002444 <LoopFillZerobss>

0800243e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800243e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002440:	f842 3b04 	str.w	r3, [r2], #4

08002444 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002446:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002448:	d3f9      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800244a:	f7ff ffd3 	bl	80023f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244e:	f01d fe05 	bl	802005c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002452:	f7fe fcdd 	bl	8000e10 <main>
  bx  lr    
 8002456:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002458:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800245c:	080961a0 	.word	0x080961a0
  ldr  r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002464:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 8002468:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 800246c:	2000a504 	.word	0x2000a504

08002470 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002470:	e7fe      	b.n	8002470 <ADC_IRQHandler>

08002472 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002476:	f7ff fa23 	bl	80018c0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800247a:	20ca      	movs	r0, #202	; 0xca
 800247c:	f000 f95d 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002480:	20c3      	movs	r0, #195	; 0xc3
 8002482:	f000 f967 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002486:	2008      	movs	r0, #8
 8002488:	f000 f964 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800248c:	2050      	movs	r0, #80	; 0x50
 800248e:	f000 f961 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002492:	20cf      	movs	r0, #207	; 0xcf
 8002494:	f000 f951 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002498:	2000      	movs	r0, #0
 800249a:	f000 f95b 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800249e:	20c1      	movs	r0, #193	; 0xc1
 80024a0:	f000 f958 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80024a4:	2030      	movs	r0, #48	; 0x30
 80024a6:	f000 f955 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80024aa:	20ed      	movs	r0, #237	; 0xed
 80024ac:	f000 f945 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80024b0:	2064      	movs	r0, #100	; 0x64
 80024b2:	f000 f94f 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80024b6:	2003      	movs	r0, #3
 80024b8:	f000 f94c 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80024bc:	2012      	movs	r0, #18
 80024be:	f000 f949 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80024c2:	2081      	movs	r0, #129	; 0x81
 80024c4:	f000 f946 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80024c8:	20e8      	movs	r0, #232	; 0xe8
 80024ca:	f000 f936 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80024ce:	2085      	movs	r0, #133	; 0x85
 80024d0:	f000 f940 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f000 f93d 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80024da:	2078      	movs	r0, #120	; 0x78
 80024dc:	f000 f93a 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80024e0:	20cb      	movs	r0, #203	; 0xcb
 80024e2:	f000 f92a 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80024e6:	2039      	movs	r0, #57	; 0x39
 80024e8:	f000 f934 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80024ec:	202c      	movs	r0, #44	; 0x2c
 80024ee:	f000 f931 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 f92e 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80024f8:	2034      	movs	r0, #52	; 0x34
 80024fa:	f000 f92b 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80024fe:	2002      	movs	r0, #2
 8002500:	f000 f928 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002504:	20f7      	movs	r0, #247	; 0xf7
 8002506:	f000 f918 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800250a:	2020      	movs	r0, #32
 800250c:	f000 f922 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002510:	20ea      	movs	r0, #234	; 0xea
 8002512:	f000 f912 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f91c 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800251c:	2000      	movs	r0, #0
 800251e:	f000 f919 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002522:	20b1      	movs	r0, #177	; 0xb1
 8002524:	f000 f909 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f000 f913 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800252e:	201b      	movs	r0, #27
 8002530:	f000 f910 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002534:	20b6      	movs	r0, #182	; 0xb6
 8002536:	f000 f900 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800253a:	200a      	movs	r0, #10
 800253c:	f000 f90a 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002540:	20a2      	movs	r0, #162	; 0xa2
 8002542:	f000 f907 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002546:	20c0      	movs	r0, #192	; 0xc0
 8002548:	f000 f8f7 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800254c:	2010      	movs	r0, #16
 800254e:	f000 f901 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002552:	20c1      	movs	r0, #193	; 0xc1
 8002554:	f000 f8f1 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002558:	2010      	movs	r0, #16
 800255a:	f000 f8fb 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800255e:	20c5      	movs	r0, #197	; 0xc5
 8002560:	f000 f8eb 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002564:	2045      	movs	r0, #69	; 0x45
 8002566:	f000 f8f5 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800256a:	2015      	movs	r0, #21
 800256c:	f000 f8f2 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002570:	20c7      	movs	r0, #199	; 0xc7
 8002572:	f000 f8e2 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002576:	2090      	movs	r0, #144	; 0x90
 8002578:	f000 f8ec 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800257c:	2036      	movs	r0, #54	; 0x36
 800257e:	f000 f8dc 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002582:	20c8      	movs	r0, #200	; 0xc8
 8002584:	f000 f8e6 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002588:	20f2      	movs	r0, #242	; 0xf2
 800258a:	f000 f8d6 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f000 f8e0 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002594:	20b0      	movs	r0, #176	; 0xb0
 8002596:	f000 f8d0 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800259a:	20c2      	movs	r0, #194	; 0xc2
 800259c:	f000 f8da 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80025a0:	20b6      	movs	r0, #182	; 0xb6
 80025a2:	f000 f8ca 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80025a6:	200a      	movs	r0, #10
 80025a8:	f000 f8d4 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80025ac:	20a7      	movs	r0, #167	; 0xa7
 80025ae:	f000 f8d1 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80025b2:	2027      	movs	r0, #39	; 0x27
 80025b4:	f000 f8ce 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80025b8:	2004      	movs	r0, #4
 80025ba:	f000 f8cb 	bl	8002754 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80025be:	202a      	movs	r0, #42	; 0x2a
 80025c0:	f000 f8bb 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f000 f8c5 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f000 f8c2 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f000 f8bf 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80025d6:	20ef      	movs	r0, #239	; 0xef
 80025d8:	f000 f8bc 	bl	8002754 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80025dc:	202b      	movs	r0, #43	; 0x2b
 80025de:	f000 f8ac 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 f8b6 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f000 f8b3 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f000 f8b0 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80025f4:	203f      	movs	r0, #63	; 0x3f
 80025f6:	f000 f8ad 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80025fa:	20f6      	movs	r0, #246	; 0xf6
 80025fc:	f000 f89d 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002600:	2001      	movs	r0, #1
 8002602:	f000 f8a7 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f000 f8a4 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800260c:	2006      	movs	r0, #6
 800260e:	f000 f8a1 	bl	8002754 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002612:	202c      	movs	r0, #44	; 0x2c
 8002614:	f000 f891 	bl	800273a <ili9341_WriteReg>
  LCD_Delay(200);
 8002618:	20c8      	movs	r0, #200	; 0xc8
 800261a:	f7ff f9d7 	bl	80019cc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800261e:	2026      	movs	r0, #38	; 0x26
 8002620:	f000 f88b 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002624:	2001      	movs	r0, #1
 8002626:	f000 f895 	bl	8002754 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800262a:	20e0      	movs	r0, #224	; 0xe0
 800262c:	f000 f885 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002630:	200f      	movs	r0, #15
 8002632:	f000 f88f 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002636:	2029      	movs	r0, #41	; 0x29
 8002638:	f000 f88c 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800263c:	2024      	movs	r0, #36	; 0x24
 800263e:	f000 f889 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002642:	200c      	movs	r0, #12
 8002644:	f000 f886 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002648:	200e      	movs	r0, #14
 800264a:	f000 f883 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800264e:	2009      	movs	r0, #9
 8002650:	f000 f880 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002654:	204e      	movs	r0, #78	; 0x4e
 8002656:	f000 f87d 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800265a:	2078      	movs	r0, #120	; 0x78
 800265c:	f000 f87a 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002660:	203c      	movs	r0, #60	; 0x3c
 8002662:	f000 f877 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002666:	2009      	movs	r0, #9
 8002668:	f000 f874 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800266c:	2013      	movs	r0, #19
 800266e:	f000 f871 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002672:	2005      	movs	r0, #5
 8002674:	f000 f86e 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002678:	2017      	movs	r0, #23
 800267a:	f000 f86b 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800267e:	2011      	movs	r0, #17
 8002680:	f000 f868 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f000 f865 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800268a:	20e1      	movs	r0, #225	; 0xe1
 800268c:	f000 f855 	bl	800273a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f000 f85f 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002696:	2016      	movs	r0, #22
 8002698:	f000 f85c 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800269c:	201b      	movs	r0, #27
 800269e:	f000 f859 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80026a2:	2004      	movs	r0, #4
 80026a4:	f000 f856 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80026a8:	2011      	movs	r0, #17
 80026aa:	f000 f853 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80026ae:	2007      	movs	r0, #7
 80026b0:	f000 f850 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80026b4:	2031      	movs	r0, #49	; 0x31
 80026b6:	f000 f84d 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80026ba:	2033      	movs	r0, #51	; 0x33
 80026bc:	f000 f84a 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80026c0:	2042      	movs	r0, #66	; 0x42
 80026c2:	f000 f847 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80026c6:	2005      	movs	r0, #5
 80026c8:	f000 f844 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80026cc:	200c      	movs	r0, #12
 80026ce:	f000 f841 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80026d2:	200a      	movs	r0, #10
 80026d4:	f000 f83e 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80026d8:	2028      	movs	r0, #40	; 0x28
 80026da:	f000 f83b 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80026de:	202f      	movs	r0, #47	; 0x2f
 80026e0:	f000 f838 	bl	8002754 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80026e4:	200f      	movs	r0, #15
 80026e6:	f000 f835 	bl	8002754 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80026ea:	2011      	movs	r0, #17
 80026ec:	f000 f825 	bl	800273a <ili9341_WriteReg>
  LCD_Delay(200);
 80026f0:	20c8      	movs	r0, #200	; 0xc8
 80026f2:	f7ff f96b 	bl	80019cc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80026f6:	2029      	movs	r0, #41	; 0x29
 80026f8:	f000 f81f 	bl	800273a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80026fc:	202c      	movs	r0, #44	; 0x2c
 80026fe:	f000 f81c 	bl	800273a <ili9341_WriteReg>
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}

08002706 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800270a:	f7ff f8d9 	bl	80018c0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800270e:	2103      	movs	r1, #3
 8002710:	20d3      	movs	r0, #211	; 0xd3
 8002712:	f000 f82c 	bl	800276e <ili9341_ReadData>
 8002716:	4603      	mov	r3, r0
 8002718:	b29b      	uxth	r3, r3
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}

0800271e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002722:	2029      	movs	r0, #41	; 0x29
 8002724:	f000 f809 	bl	800273a <ili9341_WriteReg>
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002730:	2028      	movs	r0, #40	; 0x28
 8002732:	f000 f802 	bl	800273a <ili9341_WriteReg>
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f8ec 	bl	8001924 <LCD_IO_WriteReg>
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f8bd 	bl	80018e0 <LCD_IO_WriteData>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	460a      	mov	r2, r1
 8002778:	80fb      	strh	r3, [r7, #6]
 800277a:	4613      	mov	r3, r2
 800277c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800277e:	797a      	ldrb	r2, [r7, #5]
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff f8ef 	bl	8001968 <LCD_IO_ReadData>
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002798:	23f0      	movs	r3, #240	; 0xf0
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80027a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fa59 	bl	8002c7c <stmpe811_GetInstance>
 80027ca:	4603      	mov	r3, r0
 80027cc:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2bff      	cmp	r3, #255	; 0xff
 80027d2:	d112      	bne.n	80027fa <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80027d4:	2000      	movs	r0, #0
 80027d6:	f000 fa51 	bl	8002c7c <stmpe811_GetInstance>
 80027da:	4603      	mov	r3, r0
 80027dc:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80027de:	7bbb      	ldrb	r3, [r7, #14]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d80a      	bhi.n	80027fa <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80027e4:	7bbb      	ldrb	r3, [r7, #14]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	b2d1      	uxtb	r1, r2
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <stmpe811_Init+0x4c>)
 80027ec:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80027ee:	f7fe ff53 	bl	8001698 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f807 	bl	8002808 <stmpe811_Reset>
    }
  }
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200001ac 	.word	0x200001ac

08002808 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2202      	movs	r2, #2
 8002818:	2103      	movs	r1, #3
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe ff4a 	bl	80016b4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002820:	200a      	movs	r0, #10
 8002822:	f7fe ff84 	bl	800172e <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2200      	movs	r2, #0
 800282c:	2103      	movs	r1, #3
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe ff40 	bl	80016b4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002834:	2002      	movs	r0, #2
 8002836:	f7fe ff7a 	bl	800172e <IOE_Delay>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002842:	b590      	push	{r4, r7, lr}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	4603      	mov	r3, r0
 800284a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800284c:	f7fe ff24 	bl	8001698 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe ff3f 	bl	80016da <IOE_Read>
 800285c:	4603      	mov	r3, r0
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ff36 	bl	80016da <IOE_Read>
 800286e:	4603      	mov	r3, r0
 8002870:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002872:	4323      	orrs	r3, r4
 8002874:	b21b      	sxth	r3, r3
 8002876:	b29b      	uxth	r3, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}

08002880 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800288e:	88fb      	ldrh	r3, [r7, #6]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2109      	movs	r1, #9
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe ff20 	bl	80016da <IOE_Read>
 800289a:	4603      	mov	r3, r0
 800289c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	2109      	movs	r1, #9
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe ff00 	bl	80016b4 <IOE_Write>
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2109      	movs	r1, #9
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fe ff02 	bl	80016da <IOE_Read>
 80028d6:	4603      	mov	r3, r0
 80028d8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	2109      	movs	r1, #9
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fee2 	bl	80016b4 <IOE_Write>
    
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	460a      	mov	r2, r1
 8002902:	80fb      	strh	r3, [r7, #6]
 8002904:	4613      	mov	r3, r2
 8002906:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	210a      	movs	r1, #10
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fee1 	bl	80016da <IOE_Read>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	797b      	ldrb	r3, [r7, #5]
 8002920:	4313      	orrs	r3, r2
 8002922:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	210a      	movs	r1, #10
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fec1 	bl	80016b4 <IOE_Write>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	460a      	mov	r2, r1
 8002944:	80fb      	strh	r3, [r7, #6]
 8002946:	4613      	mov	r3, r2
 8002948:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	210a      	movs	r1, #10
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fec0 	bl	80016da <IOE_Read>
 800295a:	4603      	mov	r3, r0
 800295c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 800295e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002962:	43db      	mvns	r3, r3
 8002964:	b25a      	sxtb	r2, r3
 8002966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296a:	4013      	ands	r3, r2
 800296c:	b25b      	sxtb	r3, r3
 800296e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002970:	88fb      	ldrh	r3, [r7, #6]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	210a      	movs	r1, #10
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fe9b 	bl	80016b4 <IOE_Write>
}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	460a      	mov	r2, r1
 8002990:	80fb      	strh	r3, [r7, #6]
 8002992:	4613      	mov	r3, r2
 8002994:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	210b      	movs	r1, #11
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe fe9c 	bl	80016da <IOE_Read>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	797b      	ldrb	r3, [r7, #5]
 80029a8:	4013      	ands	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	460a      	mov	r2, r1
 80029be:	80fb      	strh	r3, [r7, #6]
 80029c0:	4613      	mov	r3, r2
 80029c2:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	797a      	ldrb	r2, [r7, #5]
 80029ca:	210b      	movs	r1, #11
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fe71 	bl	80016b4 <IOE_Write>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	6039      	str	r1, [r7, #0]
 80029e4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2117      	movs	r1, #23
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fe fe72 	bl	80016da <IOE_Read>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b25b      	sxtb	r3, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	b25a      	sxtb	r2, r3
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4013      	ands	r3, r2
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	2117      	movs	r1, #23
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe fe4d 	bl	80016b4 <IOE_Write>
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2104      	movs	r1, #4
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fe51 	bl	80016da <IOE_Read>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	2104      	movs	r1, #4
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fe fe31 	bl	80016b4 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	21f0      	movs	r1, #240	; 0xf0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffbf 	bl	80029da <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fe21 	bl	80016b4 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2249      	movs	r2, #73	; 0x49
 8002a78:	2120      	movs	r1, #32
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fe1a 	bl	80016b4 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002a80:	2002      	movs	r0, #2
 8002a82:	f7fe fe54 	bl	800172e <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2121      	movs	r1, #33	; 0x21
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fe10 	bl	80016b4 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	229a      	movs	r2, #154	; 0x9a
 8002a9a:	2141      	movs	r1, #65	; 0x41
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fe09 	bl	80016b4 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002aa2:	88fb      	ldrh	r3, [r7, #6]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	214a      	movs	r1, #74	; 0x4a
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fe02 	bl	80016b4 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	214b      	movs	r1, #75	; 0x4b
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe fdfb 	bl	80016b4 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	214b      	movs	r1, #75	; 0x4b
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe fdf4 	bl	80016b4 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2156      	movs	r1, #86	; 0x56
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fded 	bl	80016b4 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2158      	movs	r1, #88	; 0x58
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7fe fde6 	bl	80016b4 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe fddf 	bl	80016b4 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	22ff      	movs	r2, #255	; 0xff
 8002afc:	210b      	movs	r1, #11
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe fdd8 	bl	80016b4 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002b04:	2002      	movs	r0, #2
 8002b06:	f7fe fe12 	bl	800172e <IOE_Delay>
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2140      	movs	r1, #64	; 0x40
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fdd7 	bl	80016da <IOE_Read>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002b3e:	7bbb      	ldrb	r3, [r7, #14]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00b      	beq.n	8002b5c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	214c      	movs	r1, #76	; 0x4c
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe fdc5 	bl	80016da <IOE_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d010      	beq.n	8002b78 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e00d      	b.n	8002b78 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2201      	movs	r2, #1
 8002b62:	214b      	movs	r1, #75	; 0x4b
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fda5 	bl	80016b4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2200      	movs	r2, #0
 8002b70:	214b      	movs	r1, #75	; 0x4b
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fd9e 	bl	80016b4 <IOE_Write>
  }
  
  return ret;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
 8002b8e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002b90:	89fb      	ldrh	r3, [r7, #14]
 8002b92:	b2d8      	uxtb	r0, r3
 8002b94:	f107 0210 	add.w	r2, r7, #16
 8002b98:	2304      	movs	r3, #4
 8002b9a:	21d7      	movs	r1, #215	; 0xd7
 8002b9c:	f7fe fdb0 	bl	8001700 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002ba0:	7c3b      	ldrb	r3, [r7, #16]
 8002ba2:	061a      	lsls	r2, r3, #24
 8002ba4:	7c7b      	ldrb	r3, [r7, #17]
 8002ba6:	041b      	lsls	r3, r3, #16
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	7cbb      	ldrb	r3, [r7, #18]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	7cfa      	ldrb	r2, [r7, #19]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	0d1b      	lsrs	r3, r3, #20
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002bd0:	89fb      	ldrh	r3, [r7, #14]
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	214b      	movs	r1, #75	; 0x4b
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fd6b 	bl	80016b4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002bde:	89fb      	ldrh	r3, [r7, #14]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2200      	movs	r2, #0
 8002be4:	214b      	movs	r1, #75	; 0x4b
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fd64 	bl	80016b4 <IOE_Write>
}
 8002bec:	bf00      	nop
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002bfe:	f7fe fd52 	bl	80016a6 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	211f      	movs	r1, #31
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff fe76 	bl	80028f8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff fe36 	bl	8002880 <stmpe811_EnableGlobalIT>
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fe47 	bl	80028bc <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	211f      	movs	r1, #31
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fe81 	bl	800293a <stmpe811_DisableITSource>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	211f      	movs	r1, #31
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fe99 	bl	8002986 <stmpe811_ReadGITStatus>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002c68:	88fb      	ldrh	r3, [r7, #6]
 8002c6a:	211f      	movs	r1, #31
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fea1 	bl	80029b4 <stmpe811_ClearGlobalIT>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e00b      	b.n	8002ca8 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <stmpe811_GetInstance+0x40>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d101      	bne.n	8002ca2 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	e006      	b.n	8002cb0 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d9f0      	bls.n	8002c90 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002cae:	23ff      	movs	r3, #255	; 0xff
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	200001ac 	.word	0x200001ac

08002cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <HAL_Init+0x40>)
 8002cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_Init+0x40>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a0a      	ldr	r2, [pc, #40]	; (8002d00 <HAL_Init+0x40>)
 8002cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <HAL_Init+0x40>)
 8002ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce8:	2003      	movs	r0, #3
 8002cea:	f000 fd16 	bl	800371a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f7ff fa28 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf4:	f7fe fe9a 	bl	8001a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40023c00 	.word	0x40023c00

08002d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <HAL_IncTick+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_IncTick+0x24>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <HAL_IncTick+0x24>)
 8002d16:	6013      	str	r3, [r2, #0]
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000074 	.word	0x20000074
 8002d28:	2000a4bc 	.word	0x2000a4bc

08002d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_GetTick+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	2000a4bc 	.word	0x2000a4bc

08002d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff ffee 	bl	8002d2c <HAL_GetTick>
 8002d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d005      	beq.n	8002d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_Delay+0x40>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4413      	add	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d6a:	bf00      	nop
 8002d6c:	f7ff ffde 	bl	8002d2c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d8f7      	bhi.n	8002d6c <HAL_Delay+0x28>
  {
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000074 	.word	0x20000074

08002d88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e033      	b.n	8002e06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fe fe6c 	bl	8001a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d118      	bne.n	8002df8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dce:	f023 0302 	bic.w	r3, r3, #2
 8002dd2:	f043 0202 	orr.w	r2, r3, #2
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fa50 	bl	8003280 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f023 0303 	bic.w	r3, r3, #3
 8002dee:	f043 0201 	orr.w	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
 8002df6:	e001      	b.n	8002dfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Start_DMA+0x1e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0cc      	b.n	8002fc8 <HAL_ADC_Start_DMA+0x1b8>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d018      	beq.n	8002e76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e54:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <HAL_ADC_Start_DMA+0x1c0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5e      	ldr	r2, [pc, #376]	; (8002fd4 <HAL_ADC_Start_DMA+0x1c4>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0c9a      	lsrs	r2, r3, #18
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e68:	e002      	b.n	8002e70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f9      	bne.n	8002e6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	f040 80a0 	bne.w	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002e8e:	f023 0301 	bic.w	r3, r3, #1
 8002e92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002eb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f023 0206 	bic.w	r2, r3, #6
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ed2:	e002      	b.n	8002eda <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	; (8002fd8 <HAL_ADC_Start_DMA+0x1c8>)
 8002ee4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	4a3c      	ldr	r2, [pc, #240]	; (8002fdc <HAL_ADC_Start_DMA+0x1cc>)
 8002eec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	4a3b      	ldr	r2, [pc, #236]	; (8002fe0 <HAL_ADC_Start_DMA+0x1d0>)
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	4a3a      	ldr	r2, [pc, #232]	; (8002fe4 <HAL_ADC_Start_DMA+0x1d4>)
 8002efc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f06:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f16:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f26:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	334c      	adds	r3, #76	; 0x4c
 8002f32:	4619      	mov	r1, r3
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f000 fcfc 	bl	8003934 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d12a      	bne.n	8002f9e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_ADC_Start_DMA+0x1d8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d015      	beq.n	8002f7e <HAL_ADC_Start_DMA+0x16e>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a25      	ldr	r2, [pc, #148]	; (8002fec <HAL_ADC_Start_DMA+0x1dc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d105      	bne.n	8002f68 <HAL_ADC_Start_DMA+0x158>
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_ADC_Start_DMA+0x1c8>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00a      	beq.n	8002f7e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <HAL_ADC_Start_DMA+0x1e0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d129      	bne.n	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_ADC_Start_DMA+0x1c8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	d823      	bhi.n	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11c      	bne.n	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	e013      	b.n	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_ADC_Start_DMA+0x1d8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fc4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	2000000c 	.word	0x2000000c
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	40012300 	.word	0x40012300
 8002fdc:	08003479 	.word	0x08003479
 8002fe0:	08003533 	.word	0x08003533
 8002fe4:	0800354f 	.word	0x0800354f
 8002fe8:	40012000 	.word	0x40012000
 8002fec:	40012100 	.word	0x40012100
 8002ff0:	40012200 	.word	0x40012200

08002ff4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x1c>
 8003034:	2302      	movs	r3, #2
 8003036:	e113      	b.n	8003260 <HAL_ADC_ConfigChannel+0x244>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b09      	cmp	r3, #9
 8003046:	d925      	bls.n	8003094 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68d9      	ldr	r1, [r3, #12]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	3b1e      	subs	r3, #30
 800305e:	2207      	movs	r2, #7
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43da      	mvns	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	400a      	ands	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68d9      	ldr	r1, [r3, #12]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	4618      	mov	r0, r3
 8003080:	4603      	mov	r3, r0
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4403      	add	r3, r0
 8003086:	3b1e      	subs	r3, #30
 8003088:	409a      	lsls	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	e022      	b.n	80030da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	2207      	movs	r2, #7
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	400a      	ands	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6919      	ldr	r1, [r3, #16]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4403      	add	r3, r0
 80030d0:	409a      	lsls	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b06      	cmp	r3, #6
 80030e0:	d824      	bhi.n	800312c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	3b05      	subs	r3, #5
 80030f4:	221f      	movs	r2, #31
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	400a      	ands	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	b29b      	uxth	r3, r3
 8003110:	4618      	mov	r0, r3
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	3b05      	subs	r3, #5
 800311e:	fa00 f203 	lsl.w	r2, r0, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34
 800312a:	e04c      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d824      	bhi.n	800317e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3b23      	subs	r3, #35	; 0x23
 8003146:	221f      	movs	r2, #31
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	43da      	mvns	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	400a      	ands	r2, r1
 8003154:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	4618      	mov	r0, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	3b23      	subs	r3, #35	; 0x23
 8003170:	fa00 f203 	lsl.w	r2, r0, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
 800317c:	e023      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	3b41      	subs	r3, #65	; 0x41
 8003190:	221f      	movs	r2, #31
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	400a      	ands	r2, r1
 800319e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4618      	mov	r0, r3
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	3b41      	subs	r3, #65	; 0x41
 80031ba:	fa00 f203 	lsl.w	r2, r0, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_ADC_ConfigChannel+0x250>)
 80031c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_ADC_ConfigChannel+0x254>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d10f      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d8>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b12      	cmp	r3, #18
 80031da:	d10b      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_ADC_ConfigChannel+0x254>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12b      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_ADC_ConfigChannel+0x258>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x1f4>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b11      	cmp	r3, #17
 800320e:	d122      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a11      	ldr	r2, [pc, #68]	; (8003274 <HAL_ADC_ConfigChannel+0x258>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_ADC_ConfigChannel+0x25c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_ADC_ConfigChannel+0x260>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9a      	lsrs	r2, r3, #18
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003248:	e002      	b.n	8003250 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40012300 	.word	0x40012300
 8003270:	40012000 	.word	0x40012000
 8003274:	10000012 	.word	0x10000012
 8003278:	2000000c 	.word	0x2000000c
 800327c:	431bde83 	.word	0x431bde83

08003280 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003288:	4b79      	ldr	r3, [pc, #484]	; (8003470 <ADC_Init+0x1f0>)
 800328a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	021a      	lsls	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	4a58      	ldr	r2, [pc, #352]	; (8003474 <ADC_Init+0x1f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d022      	beq.n	800335e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003326:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6899      	ldr	r1, [r3, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	e00f      	b.n	800337e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800336c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800337c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0202 	bic.w	r2, r2, #2
 800338c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	005a      	lsls	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	3b01      	subs	r3, #1
 80033d8:	035a      	lsls	r2, r3, #13
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
 80033e2:	e007      	b.n	80033f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	3b01      	subs	r3, #1
 8003410:	051a      	lsls	r2, r3, #20
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003436:	025a      	lsls	r2, r3, #9
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	029a      	lsls	r2, r3, #10
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012300 	.word	0x40012300
 8003474:	0f000001 	.word	0x0f000001

08003478 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800348e:	2b00      	cmp	r3, #0
 8003490:	d13c      	bne.n	800350c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d12b      	bne.n	8003504 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d127      	bne.n	8003504 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d006      	beq.n	80034d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d119      	bne.n	8003504 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0220 	bic.w	r2, r2, #32
 80034de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7fd fc73 	bl	8000df0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800350a:	e00e      	b.n	800352a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fd75 	bl	8003008 <HAL_ADC_ErrorCallback>
}
 800351e:	e004      	b.n	800352a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	4798      	blx	r3
}
 800352a:	bf00      	nop
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fd57 	bl	8002ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0204 	orr.w	r2, r3, #4
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f7ff fd4a 	bl	8003008 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003574:	bf00      	nop
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003598:	4013      	ands	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ae:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <__NVIC_SetPriorityGrouping+0x44>)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	60d3      	str	r3, [r2, #12]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	e000ed00 	.word	0xe000ed00

080035c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c8:	4b04      	ldr	r3, [pc, #16]	; (80035dc <__NVIC_GetPriorityGrouping+0x18>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	f003 0307 	and.w	r3, r3, #7
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	db0b      	blt.n	800360a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4907      	ldr	r1, [pc, #28]	; (8003618 <__NVIC_EnableIRQ+0x38>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2001      	movs	r0, #1
 8003602:	fa00 f202 	lsl.w	r2, r0, r2
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100

0800361c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362a:	2b00      	cmp	r3, #0
 800362c:	db10      	blt.n	8003650 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4909      	ldr	r1, [pc, #36]	; (800365c <__NVIC_DisableIRQ+0x40>)
 8003636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2001      	movs	r0, #1
 800363e:	fa00 f202 	lsl.w	r2, r0, r2
 8003642:	3320      	adds	r3, #32
 8003644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003648:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800364c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000e100 	.word	0xe000e100

08003660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	6039      	str	r1, [r7, #0]
 800366a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	2b00      	cmp	r3, #0
 8003672:	db0a      	blt.n	800368a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	490c      	ldr	r1, [pc, #48]	; (80036ac <__NVIC_SetPriority+0x4c>)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	440b      	add	r3, r1
 8003684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003688:	e00a      	b.n	80036a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4908      	ldr	r1, [pc, #32]	; (80036b0 <__NVIC_SetPriority+0x50>)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	3b04      	subs	r3, #4
 8003698:	0112      	lsls	r2, r2, #4
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	440b      	add	r3, r1
 800369e:	761a      	strb	r2, [r3, #24]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000e100 	.word	0xe000e100
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f1c3 0307 	rsb	r3, r3, #7
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	bf28      	it	cs
 80036d2:	2304      	movcs	r3, #4
 80036d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3304      	adds	r3, #4
 80036da:	2b06      	cmp	r3, #6
 80036dc:	d902      	bls.n	80036e4 <NVIC_EncodePriority+0x30>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	3b03      	subs	r3, #3
 80036e2:	e000      	b.n	80036e6 <NVIC_EncodePriority+0x32>
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	401a      	ands	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	fa01 f303 	lsl.w	r3, r1, r3
 8003706:	43d9      	mvns	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	4313      	orrs	r3, r2
         );
}
 800370e:	4618      	mov	r0, r3
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ff2a 	bl	800357c <__NVIC_SetPriorityGrouping>
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003742:	f7ff ff3f 	bl	80035c4 <__NVIC_GetPriorityGrouping>
 8003746:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	6978      	ldr	r0, [r7, #20]
 800374e:	f7ff ffb1 	bl	80036b4 <NVIC_EncodePriority>
 8003752:	4602      	mov	r2, r0
 8003754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff80 	bl	8003660 <__NVIC_SetPriority>
}
 8003760:	bf00      	nop
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff32 	bl	80035e0 <__NVIC_EnableIRQ>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ff42 	bl	800361c <__NVIC_DisableIRQ>
}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00e      	b.n	80037d0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	795b      	ldrb	r3, [r3, #5]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d105      	bne.n	80037c8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fe f9d6 	bl	8001b74 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037e4:	f7ff faa2 	bl	8002d2c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e099      	b.n	8003928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003814:	e00f      	b.n	8003836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003816:	f7ff fa89 	bl	8002d2c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b05      	cmp	r3, #5
 8003822:	d908      	bls.n	8003836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e078      	b.n	8003928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e8      	bne.n	8003816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4b38      	ldr	r3, [pc, #224]	; (8003930 <HAL_DMA_Init+0x158>)
 8003850:	4013      	ands	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800386e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800387a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	2b04      	cmp	r3, #4
 800388e:	d107      	bne.n	80038a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4313      	orrs	r3, r2
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f023 0307 	bic.w	r3, r3, #7
 80038b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d117      	bne.n	80038fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00e      	beq.n	80038fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fa6f 	bl	8003dc0 <DMA_CheckFifoParam>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d008      	beq.n	80038fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038f6:	2301      	movs	r3, #1
 80038f8:	e016      	b.n	8003928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fa26 	bl	8003d54 <DMA_CalcBaseAndBitshift>
 8003908:	4603      	mov	r3, r0
 800390a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003910:	223f      	movs	r2, #63	; 0x3f
 8003912:	409a      	lsls	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	f010803f 	.word	0xf010803f

08003934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800394a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_DMA_Start_IT+0x26>
 8003956:	2302      	movs	r3, #2
 8003958:	e040      	b.n	80039dc <HAL_DMA_Start_IT+0xa8>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d12f      	bne.n	80039ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f9b8 	bl	8003cf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	409a      	lsls	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0216 	orr.w	r2, r2, #22
 80039a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d007      	beq.n	80039bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e005      	b.n	80039da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039d6:	2302      	movs	r3, #2
 80039d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3718      	adds	r7, #24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f0:	4b92      	ldr	r3, [pc, #584]	; (8003c3c <HAL_DMA_IRQHandler+0x258>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a92      	ldr	r2, [pc, #584]	; (8003c40 <HAL_DMA_IRQHandler+0x25c>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	0a9b      	lsrs	r3, r3, #10
 80039fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0e:	2208      	movs	r2, #8
 8003a10:	409a      	lsls	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0204 	bic.w	r2, r2, #4
 8003a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d012      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00b      	beq.n	8003a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2201      	movs	r2, #1
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f043 0202 	orr.w	r2, r3, #2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	409a      	lsls	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d012      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab4:	f043 0204 	orr.w	r2, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d043      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d03c      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ade:	2210      	movs	r2, #16
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d108      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d024      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	4798      	blx	r3
 8003b12:	e01f      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01b      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	4798      	blx	r3
 8003b24:	e016      	b.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b58:	2220      	movs	r2, #32
 8003b5a:	409a      	lsls	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 808e 	beq.w	8003c82 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8086 	beq.w	8003c82 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b05      	cmp	r3, #5
 8003b8c:	d136      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_IRQHandler+0x1da>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	223f      	movs	r2, #63	; 0x3f
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d07d      	beq.n	8003cee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
        }
        return;
 8003bfa:	e078      	b.n	8003cee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d01c      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d108      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d030      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e02b      	b.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d027      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
 8003c3a:	e022      	b.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
 8003c3c:	2000000c 	.word	0x2000000c
 8003c40:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0210 	bic.w	r2, r2, #16
 8003c60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d032      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2205      	movs	r2, #5
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d307      	bcc.n	8003cca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f2      	bne.n	8003cae <HAL_DMA_IRQHandler+0x2ca>
 8003cc8:	e000      	b.n	8003ccc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003cca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
 8003cec:	e000      	b.n	8003cf0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003cee:	bf00      	nop
    }
  }
}
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop

08003cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d108      	bne.n	8003d38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d36:	e007      	b.n	8003d48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	3b10      	subs	r3, #16
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <DMA_CalcBaseAndBitshift+0x64>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d6e:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <DMA_CalcBaseAndBitshift+0x68>)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d909      	bls.n	8003d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d8a:	f023 0303 	bic.w	r3, r3, #3
 8003d8e:	1d1a      	adds	r2, r3, #4
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	659a      	str	r2, [r3, #88]	; 0x58
 8003d94:	e007      	b.n	8003da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	aaaaaaab 	.word	0xaaaaaaab
 8003dbc:	08021730 	.word	0x08021730

08003dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11f      	bne.n	8003e1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d855      	bhi.n	8003e8c <DMA_CheckFifoParam+0xcc>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <DMA_CheckFifoParam+0x28>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003e0b 	.word	0x08003e0b
 8003df0:	08003df9 	.word	0x08003df9
 8003df4:	08003e8d 	.word	0x08003e8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d045      	beq.n	8003e90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e08:	e042      	b.n	8003e90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e12:	d13f      	bne.n	8003e94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e18:	e03c      	b.n	8003e94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e22:	d121      	bne.n	8003e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d836      	bhi.n	8003e98 <DMA_CheckFifoParam+0xd8>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <DMA_CheckFifoParam+0x70>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e41 	.word	0x08003e41
 8003e34:	08003e47 	.word	0x08003e47
 8003e38:	08003e41 	.word	0x08003e41
 8003e3c:	08003e59 	.word	0x08003e59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e02f      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d024      	beq.n	8003e9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e56:	e021      	b.n	8003e9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e60:	d11e      	bne.n	8003ea0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e66:	e01b      	b.n	8003ea0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d902      	bls.n	8003e74 <DMA_CheckFifoParam+0xb4>
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d003      	beq.n	8003e7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e72:	e018      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e015      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8a:	e00b      	b.n	8003ea4 <DMA_CheckFifoParam+0xe4>
      break;
 8003e8c:	bf00      	nop
 8003e8e:	e00a      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e90:	bf00      	nop
 8003e92:	e008      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e94:	bf00      	nop
 8003e96:	e006      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e004      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;   
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8003ea4:	bf00      	nop
    }
  } 
  
  return status; 
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03b      	b.n	8003f3e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fe6c 	bl	8001bb8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	f023 0107 	bic.w	r1, r3, #7
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68d1      	ldr	r1, [r2, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e05f      	b.n	800401a <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003f5a:	4b32      	ldr	r3, [pc, #200]	; (8004024 <HAL_DMA2D_DeInit+0xdc>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02e      	beq.n	8003fc4 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d107      	bne.n	8003f84 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8c1 	bl	80040fc <HAL_DMA2D_Abort>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d021      	beq.n	8003fc4 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e04a      	b.n	800401a <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d108      	bne.n	8003fa4 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8003f92:	2100      	movs	r1, #0
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f8f7 	bl	8004188 <HAL_DMA2D_CLUTLoading_Abort>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e03a      	b.n	800401a <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d108      	bne.n	8003fc4 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8e7 	bl	8004188 <HAL_DMA2D_CLUTLoading_Abort>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e02a      	b.n	800401a <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fd fe03 	bl	8001c08 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_DMA2D_Start_IT+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e020      	b.n	8004086 <HAL_DMA2D_Start_IT+0x5e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fa84 	bl	800456c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8004072:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b086      	sub	sp, #24
 8004092:	af02      	add	r7, sp, #8
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_DMA2D_BlendingStart_IT+0x1c>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e024      	b.n	80040f4 <HAL_DMA2D_BlendingStart_IT+0x66>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fa4d 	bl	800456c <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80040e0:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f042 0201 	orr.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 0205 	bic.w	r2, r3, #5
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0204 	orr.w	r2, r2, #4
 8004116:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004118:	f7fe fe08 	bl	8002d2c <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800411e:	e017      	b.n	8004150 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8004120:	f7fe fe04 	bl	8002d2c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800412e:	d90f      	bls.n	8004150 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004134:	f043 0220 	orr.w	r2, r3, #32
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2203      	movs	r2, #3
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e017      	b.n	8004180 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e0      	bne.n	8004120 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 800416c:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3324      	adds	r3, #36	; 0x24
 8004198:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f042 0204 	orr.w	r2, r2, #4
 80041a8:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d103      	bne.n	80041b8 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	331c      	adds	r3, #28
 80041b6:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 80041b8:	f7fe fdb8 	bl	8002d2c <HAL_GetTick>
 80041bc:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80041be:	e017      	b.n	80041f0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80041c0:	f7fe fdb4 	bl	8002d2c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ce:	d90f      	bls.n	80041f0 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2203      	movs	r2, #3
 80041e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e016      	b.n	800421e <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e1      	bne.n	80041c0 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 800420a:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d026      	beq.n	8004296 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	2b00      	cmp	r3, #0
 8004250:	d021      	beq.n	8004296 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004260:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	f043 0201 	orr.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b00      	cmp	r3, #0
 800429e:	d026      	beq.n	80042ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2220      	movs	r2, #32
 80042c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d026      	beq.n	8004346 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d021      	beq.n	8004346 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004310:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2208      	movs	r2, #8
 8004318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2204      	movs	r2, #4
 800432a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00e      	beq.n	8004378 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004368:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2204      	movs	r2, #4
 8004370:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f853 	bl	800441e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01f      	beq.n	80043cc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2202      	movs	r2, #2
 80043a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0310 	and.w	r3, r3, #16
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d01f      	beq.n	8004416 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01a      	beq.n	8004416 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2210      	movs	r2, #16
 80043f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f80e 	bl	8004432 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004416:	bf00      	nop
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_DMA2D_ConfigLayer+0x20>
 8004464:	2302      	movs	r3, #2
 8004466:	e079      	b.n	800455c <HAL_DMA2D_ConfigLayer+0x114>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	3318      	adds	r3, #24
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004492:	4b35      	ldr	r3, [pc, #212]	; (8004568 <HAL_DMA2D_ConfigLayer+0x120>)
 8004494:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b0a      	cmp	r3, #10
 800449c:	d003      	beq.n	80044a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b09      	cmp	r3, #9
 80044a4:	d107      	bne.n	80044b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e005      	b.n	80044c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d120      	bne.n	800450a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	43db      	mvns	r3, r3
 80044d2:	ea02 0103 	and.w	r1, r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	430a      	orrs	r2, r1
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b0a      	cmp	r3, #10
 80044f0:	d003      	beq.n	80044fa <HAL_DMA2D_ConfigLayer+0xb2>
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b09      	cmp	r3, #9
 80044f8:	d127      	bne.n	800454a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004506:	629a      	str	r2, [r3, #40]	; 0x28
 8004508:	e01f      	b.n	800454a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	43db      	mvns	r3, r3
 8004514:	ea02 0103 	and.w	r1, r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b0a      	cmp	r3, #10
 8004532:	d003      	beq.n	800453c <HAL_DMA2D_ConfigLayer+0xf4>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b09      	cmp	r3, #9
 800453a:	d106      	bne.n	800454a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004548:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	ff03000f 	.word	0xff03000f

0800456c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800456c:	b480      	push	{r7}
 800456e:	b08b      	sub	sp, #44	; 0x2c
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004580:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	041a      	lsls	r2, r3, #16
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045a4:	d174      	bne.n	8004690 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
 80045dc:	e053      	b.n	8004686 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d106      	bne.n	80045f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24
 80045f2:	e048      	b.n	8004686 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d111      	bne.n	8004620 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	0cdb      	lsrs	r3, r3, #19
 8004600:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	0a9b      	lsrs	r3, r3, #10
 8004606:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	08db      	lsrs	r3, r3, #3
 800460c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	02db      	lsls	r3, r3, #11
 8004616:	4313      	orrs	r3, r2
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	e032      	b.n	8004686 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d117      	bne.n	8004658 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	0fdb      	lsrs	r3, r3, #31
 800462c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	0cdb      	lsrs	r3, r3, #19
 8004632:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	0adb      	lsrs	r3, r3, #11
 8004638:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	029b      	lsls	r3, r3, #10
 8004648:	431a      	orrs	r2, r3
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	03db      	lsls	r3, r3, #15
 800464e:	4313      	orrs	r3, r2
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	e016      	b.n	8004686 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	0f1b      	lsrs	r3, r3, #28
 800465c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	0d1b      	lsrs	r3, r3, #20
 8004662:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	0b1b      	lsrs	r3, r3, #12
 8004668:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	011a      	lsls	r2, r3, #4
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	431a      	orrs	r2, r3
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	031b      	lsls	r3, r3, #12
 800467e:	4313      	orrs	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800468e:	e003      	b.n	8004698 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	60da      	str	r2, [r3, #12]
}
 8004698:	bf00      	nop
 800469a:	372c      	adds	r7, #44	; 0x2c
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	; 0x24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ba:	2300      	movs	r3, #0
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e177      	b.n	80049b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c0:	2201      	movs	r2, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4013      	ands	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	429a      	cmp	r2, r3
 80046da:	f040 8166 	bne.w	80049aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d00b      	beq.n	80046fe <HAL_GPIO_Init+0x5a>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d007      	beq.n	80046fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046f2:	2b11      	cmp	r3, #17
 80046f4:	d003      	beq.n	80046fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	2203      	movs	r2, #3
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	4013      	ands	r3, r2
 8004776:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0xfc>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b12      	cmp	r3, #18
 800479e:	d123      	bne.n	80047e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	08da      	lsrs	r2, r3, #3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3208      	adds	r2, #8
 80047a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	220f      	movs	r2, #15
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	08da      	lsrs	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3208      	adds	r2, #8
 80047e2:	69b9      	ldr	r1, [r7, #24]
 80047e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4013      	ands	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0203 	and.w	r2, r3, #3
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80c0 	beq.w	80049aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	4b65      	ldr	r3, [pc, #404]	; (80049c4 <HAL_GPIO_Init+0x320>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	4a64      	ldr	r2, [pc, #400]	; (80049c4 <HAL_GPIO_Init+0x320>)
 8004834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004838:	6453      	str	r3, [r2, #68]	; 0x44
 800483a:	4b62      	ldr	r3, [pc, #392]	; (80049c4 <HAL_GPIO_Init+0x320>)
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004846:	4a60      	ldr	r2, [pc, #384]	; (80049c8 <HAL_GPIO_Init+0x324>)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	3302      	adds	r3, #2
 800484e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	220f      	movs	r2, #15
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a57      	ldr	r2, [pc, #348]	; (80049cc <HAL_GPIO_Init+0x328>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d037      	beq.n	80048e2 <HAL_GPIO_Init+0x23e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a56      	ldr	r2, [pc, #344]	; (80049d0 <HAL_GPIO_Init+0x32c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d031      	beq.n	80048de <HAL_GPIO_Init+0x23a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a55      	ldr	r2, [pc, #340]	; (80049d4 <HAL_GPIO_Init+0x330>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d02b      	beq.n	80048da <HAL_GPIO_Init+0x236>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a54      	ldr	r2, [pc, #336]	; (80049d8 <HAL_GPIO_Init+0x334>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d025      	beq.n	80048d6 <HAL_GPIO_Init+0x232>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a53      	ldr	r2, [pc, #332]	; (80049dc <HAL_GPIO_Init+0x338>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01f      	beq.n	80048d2 <HAL_GPIO_Init+0x22e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_GPIO_Init+0x33c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d019      	beq.n	80048ce <HAL_GPIO_Init+0x22a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a51      	ldr	r2, [pc, #324]	; (80049e4 <HAL_GPIO_Init+0x340>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_GPIO_Init+0x226>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a50      	ldr	r2, [pc, #320]	; (80049e8 <HAL_GPIO_Init+0x344>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00d      	beq.n	80048c6 <HAL_GPIO_Init+0x222>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4f      	ldr	r2, [pc, #316]	; (80049ec <HAL_GPIO_Init+0x348>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <HAL_GPIO_Init+0x21e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4e      	ldr	r2, [pc, #312]	; (80049f0 <HAL_GPIO_Init+0x34c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_GPIO_Init+0x21a>
 80048ba:	2309      	movs	r3, #9
 80048bc:	e012      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048be:	230a      	movs	r3, #10
 80048c0:	e010      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048c2:	2308      	movs	r3, #8
 80048c4:	e00e      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048c6:	2307      	movs	r3, #7
 80048c8:	e00c      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048ca:	2306      	movs	r3, #6
 80048cc:	e00a      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048ce:	2305      	movs	r3, #5
 80048d0:	e008      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048d2:	2304      	movs	r3, #4
 80048d4:	e006      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048d6:	2303      	movs	r3, #3
 80048d8:	e004      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048da:	2302      	movs	r3, #2
 80048dc:	e002      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_GPIO_Init+0x240>
 80048e2:	2300      	movs	r3, #0
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	f002 0203 	and.w	r2, r2, #3
 80048ea:	0092      	lsls	r2, r2, #2
 80048ec:	4093      	lsls	r3, r2
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048f4:	4934      	ldr	r1, [pc, #208]	; (80049c8 <HAL_GPIO_Init+0x324>)
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	3302      	adds	r3, #2
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004902:	4b3c      	ldr	r3, [pc, #240]	; (80049f4 <HAL_GPIO_Init+0x350>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004926:	4a33      	ldr	r2, [pc, #204]	; (80049f4 <HAL_GPIO_Init+0x350>)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800492c:	4b31      	ldr	r3, [pc, #196]	; (80049f4 <HAL_GPIO_Init+0x350>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004950:	4a28      	ldr	r2, [pc, #160]	; (80049f4 <HAL_GPIO_Init+0x350>)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004956:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <HAL_GPIO_Init+0x350>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800497a:	4a1e      	ldr	r2, [pc, #120]	; (80049f4 <HAL_GPIO_Init+0x350>)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004980:	4b1c      	ldr	r3, [pc, #112]	; (80049f4 <HAL_GPIO_Init+0x350>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <HAL_GPIO_Init+0x350>)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	3301      	adds	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	f67f ae84 	bls.w	80046c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049b8:	bf00      	nop
 80049ba:	3724      	adds	r7, #36	; 0x24
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40013800 	.word	0x40013800
 80049cc:	40020000 	.word	0x40020000
 80049d0:	40020400 	.word	0x40020400
 80049d4:	40020800 	.word	0x40020800
 80049d8:	40020c00 	.word	0x40020c00
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40021400 	.word	0x40021400
 80049e4:	40021800 	.word	0x40021800
 80049e8:	40021c00 	.word	0x40021c00
 80049ec:	40022000 	.word	0x40022000
 80049f0:	40022400 	.word	0x40022400
 80049f4:	40013c00 	.word	0x40013c00

080049f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a08:	787b      	ldrb	r3, [r7, #1]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a14:	e003      	b.n	8004a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a16:	887b      	ldrh	r3, [r7, #2]
 8004a18:	041a      	lsls	r2, r3, #16
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	619a      	str	r2, [r3, #24]
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e11f      	b.n	8004c7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd f8f2 	bl	8001c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2224      	movs	r2, #36	; 0x24
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0201 	bic.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a90:	f001 ffc6 	bl	8006a20 <HAL_RCC_GetPCLK1Freq>
 8004a94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4a7b      	ldr	r2, [pc, #492]	; (8004c88 <HAL_I2C_Init+0x25c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d807      	bhi.n	8004ab0 <HAL_I2C_Init+0x84>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a7a      	ldr	r2, [pc, #488]	; (8004c8c <HAL_I2C_Init+0x260>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	bf94      	ite	ls
 8004aa8:	2301      	movls	r3, #1
 8004aaa:	2300      	movhi	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e006      	b.n	8004abe <HAL_I2C_Init+0x92>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4a77      	ldr	r2, [pc, #476]	; (8004c90 <HAL_I2C_Init+0x264>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	bf94      	ite	ls
 8004ab8:	2301      	movls	r3, #1
 8004aba:	2300      	movhi	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0db      	b.n	8004c7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4a72      	ldr	r2, [pc, #456]	; (8004c94 <HAL_I2C_Init+0x268>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	0c9b      	lsrs	r3, r3, #18
 8004ad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4a64      	ldr	r2, [pc, #400]	; (8004c88 <HAL_I2C_Init+0x25c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d802      	bhi.n	8004b00 <HAL_I2C_Init+0xd4>
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	3301      	adds	r3, #1
 8004afe:	e009      	b.n	8004b14 <HAL_I2C_Init+0xe8>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	4a63      	ldr	r2, [pc, #396]	; (8004c98 <HAL_I2C_Init+0x26c>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	099b      	lsrs	r3, r3, #6
 8004b12:	3301      	adds	r3, #1
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4956      	ldr	r1, [pc, #344]	; (8004c88 <HAL_I2C_Init+0x25c>)
 8004b30:	428b      	cmp	r3, r1
 8004b32:	d80d      	bhi.n	8004b50 <HAL_I2C_Init+0x124>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e59      	subs	r1, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	bf38      	it	cc
 8004b4c:	2304      	movcc	r3, #4
 8004b4e:	e04f      	b.n	8004bf0 <HAL_I2C_Init+0x1c4>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d111      	bne.n	8004b7c <HAL_I2C_Init+0x150>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	440b      	add	r3, r1
 8004b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf0c      	ite	eq
 8004b74:	2301      	moveq	r3, #1
 8004b76:	2300      	movne	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e012      	b.n	8004ba2 <HAL_I2C_Init+0x176>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1e58      	subs	r0, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	0099      	lsls	r1, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf0c      	ite	eq
 8004b9c:	2301      	moveq	r3, #1
 8004b9e:	2300      	movne	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Init+0x17e>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e022      	b.n	8004bf0 <HAL_I2C_Init+0x1c4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10e      	bne.n	8004bd0 <HAL_I2C_Init+0x1a4>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e58      	subs	r0, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	440b      	add	r3, r1
 8004bc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bce:	e00f      	b.n	8004bf0 <HAL_I2C_Init+0x1c4>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1e58      	subs	r0, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6859      	ldr	r1, [r3, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	0099      	lsls	r1, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	6809      	ldr	r1, [r1, #0]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6911      	ldr	r1, [r2, #16]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68d2      	ldr	r2, [r2, #12]
 8004c2a:	4311      	orrs	r1, r2
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	430b      	orrs	r3, r1
 8004c32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	000186a0 	.word	0x000186a0
 8004c8c:	001e847f 	.word	0x001e847f
 8004c90:	003d08ff 	.word	0x003d08ff
 8004c94:	431bde83 	.word	0x431bde83
 8004c98:	10624dd3 	.word	0x10624dd3

08004c9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	4608      	mov	r0, r1
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4603      	mov	r3, r0
 8004cac:	817b      	strh	r3, [r7, #10]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	813b      	strh	r3, [r7, #8]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb6:	f7fe f839 	bl	8002d2c <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	f040 80d9 	bne.w	8004e7c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	2319      	movs	r3, #25
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	496d      	ldr	r1, [pc, #436]	; (8004e88 <HAL_I2C_Mem_Write+0x1ec>)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fc7b 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e0cc      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Mem_Write+0x56>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e0c5      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d007      	beq.n	8004d18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	; 0x40
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a4d      	ldr	r2, [pc, #308]	; (8004e8c <HAL_I2C_Mem_Write+0x1f0>)
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d5a:	88f8      	ldrh	r0, [r7, #6]
 8004d5c:	893a      	ldrh	r2, [r7, #8]
 8004d5e:	8979      	ldrh	r1, [r7, #10]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	4603      	mov	r3, r0
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fab6 	bl	80052dc <I2C_RequestMemoryWrite>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d052      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e081      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fcfc 	bl	800577c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d107      	bne.n	8004da2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06b      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d11b      	bne.n	8004e1c <HAL_I2C_Mem_Write+0x180>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d017      	beq.n	8004e1c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1aa      	bne.n	8004d7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 fce8 	bl	80057fe <I2C_WaitOnBTFFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d107      	bne.n	8004e4c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e016      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	00100002 	.word	0x00100002
 8004e8c:	ffff0000 	.word	0xffff0000

08004e90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	; 0x30
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	817b      	strh	r3, [r7, #10]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	813b      	strh	r3, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eaa:	f7fd ff3f 	bl	8002d2c <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	f040 8208 	bne.w	80052ce <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	2319      	movs	r3, #25
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	497b      	ldr	r1, [pc, #492]	; (80050b4 <HAL_I2C_Mem_Read+0x224>)
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fb81 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e1fb      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_I2C_Mem_Read+0x56>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e1f4      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d007      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2222      	movs	r2, #34	; 0x22
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2240      	movs	r2, #64	; 0x40
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a5b      	ldr	r2, [pc, #364]	; (80050b8 <HAL_I2C_Mem_Read+0x228>)
 8004f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f4e:	88f8      	ldrh	r0, [r7, #6]
 8004f50:	893a      	ldrh	r2, [r7, #8]
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa50 	bl	8005404 <I2C_RequestMemoryRead>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e1b0      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d113      	bne.n	8004f9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f76:	2300      	movs	r3, #0
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]
 8004f9c:	e184      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d11b      	bne.n	8004fde <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e164      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	e144      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005034:	e138      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	2b03      	cmp	r3, #3
 800503c:	f200 80f1 	bhi.w	8005222 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	2b01      	cmp	r3, #1
 8005046:	d123      	bne.n	8005090 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fc17 	bl	8005880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e139      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800508e:	e10b      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	2b02      	cmp	r3, #2
 8005096:	d14e      	bne.n	8005136 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509e:	2200      	movs	r2, #0
 80050a0:	4906      	ldr	r1, [pc, #24]	; (80050bc <HAL_I2C_Mem_Read+0x22c>)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fa94 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e10e      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
 80050b2:	bf00      	nop
 80050b4:	00100002 	.word	0x00100002
 80050b8:	ffff0000 	.word	0xffff0000
 80050bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005134:	e0b8      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2200      	movs	r2, #0
 800513e:	4966      	ldr	r1, [pc, #408]	; (80052d8 <HAL_I2C_Mem_Read+0x448>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fa45 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0bf      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	2200      	movs	r2, #0
 800519a:	494f      	ldr	r1, [pc, #316]	; (80052d8 <HAL_I2C_Mem_Read+0x448>)
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fa17 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e091      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005220:	e042      	b.n	80052a8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb2a 	bl	8005880 <I2C_WaitOnRXNEFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e04c      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d118      	bne.n	80052a8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f aec2 	bne.w	8005036 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	00010004 	.word	0x00010004

080052dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	4608      	mov	r0, r1
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	4603      	mov	r3, r0
 80052ec:	817b      	strh	r3, [r7, #10]
 80052ee:	460b      	mov	r3, r1
 80052f0:	813b      	strh	r3, [r7, #8]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2200      	movs	r2, #0
 800530e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f95c 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e05f      	b.n	80053f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005338:	897b      	ldrh	r3, [r7, #10]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	461a      	mov	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005346:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	6a3a      	ldr	r2, [r7, #32]
 800534c:	492c      	ldr	r1, [pc, #176]	; (8005400 <I2C_RequestMemoryWrite+0x124>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f995 	bl	800567e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e04c      	b.n	80053f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	617b      	str	r3, [r7, #20]
 8005372:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005376:	6a39      	ldr	r1, [r7, #32]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f9ff 	bl	800577c <I2C_WaitOnTXEFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00d      	beq.n	80053a0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	2b04      	cmp	r3, #4
 800538a:	d107      	bne.n	800539c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800539a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e02b      	b.n	80053f8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a6:	893b      	ldrh	r3, [r7, #8]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]
 80053b0:	e021      	b.n	80053f6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053b2:	893b      	ldrh	r3, [r7, #8]
 80053b4:	0a1b      	lsrs	r3, r3, #8
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	6a39      	ldr	r1, [r7, #32]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f9d9 	bl	800577c <I2C_WaitOnTXEFlagUntilTimeout>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00d      	beq.n	80053ec <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	d107      	bne.n	80053e8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e005      	b.n	80053f8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053ec:	893b      	ldrh	r3, [r7, #8]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	00010002 	.word	0x00010002

08005404 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	461a      	mov	r2, r3
 8005412:	4603      	mov	r3, r0
 8005414:	817b      	strh	r3, [r7, #10]
 8005416:	460b      	mov	r3, r1
 8005418:	813b      	strh	r3, [r7, #8]
 800541a:	4613      	mov	r3, r2
 800541c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800542c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2200      	movs	r2, #0
 8005446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f8c0 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00c      	beq.n	8005470 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0a9      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005470:	897b      	ldrh	r3, [r7, #10]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800547e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	4951      	ldr	r1, [pc, #324]	; (80055cc <I2C_RequestMemoryRead+0x1c8>)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f8f9 	bl	800567e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e096      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	617b      	str	r3, [r7, #20]
 80054aa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ae:	6a39      	ldr	r1, [r7, #32]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f963 	bl	800577c <I2C_WaitOnTXEFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d107      	bne.n	80054d4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e075      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d105      	bne.n	80054ea <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054de:	893b      	ldrh	r3, [r7, #8]
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]
 80054e8:	e021      	b.n	800552e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054ea:	893b      	ldrh	r3, [r7, #8]
 80054ec:	0a1b      	lsrs	r3, r3, #8
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	6a39      	ldr	r1, [r7, #32]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f93d 	bl	800577c <I2C_WaitOnTXEFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00d      	beq.n	8005524 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	2b04      	cmp	r3, #4
 800550e:	d107      	bne.n	8005520 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e04f      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	6a39      	ldr	r1, [r7, #32]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f922 	bl	800577c <I2C_WaitOnTXEFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b04      	cmp	r3, #4
 8005544:	d107      	bne.n	8005556 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e034      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	2200      	movs	r2, #0
 8005572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 f82a 	bl	80055d0 <I2C_WaitOnFlagUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00c      	beq.n	800559c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e013      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	4906      	ldr	r1, [pc, #24]	; (80055cc <I2C_RequestMemoryRead+0x1c8>)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f863 	bl	800567e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00010002 	.word	0x00010002

080055d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4613      	mov	r3, r2
 80055de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e0:	e025      	b.n	800562e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d021      	beq.n	800562e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ea:	f7fd fb9f 	bl	8002d2c <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d302      	bcc.n	8005600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d116      	bne.n	800562e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	f043 0220 	orr.w	r2, r3, #32
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e023      	b.n	8005676 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10d      	bne.n	8005654 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	43da      	mvns	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4013      	ands	r3, r2
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	461a      	mov	r2, r3
 8005652:	e00c      	b.n	800566e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	43da      	mvns	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4013      	ands	r3, r2
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf0c      	ite	eq
 8005666:	2301      	moveq	r3, #1
 8005668:	2300      	movne	r3, #0
 800566a:	b2db      	uxtb	r3, r3
 800566c:	461a      	mov	r2, r3
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	429a      	cmp	r2, r3
 8005672:	d0b6      	beq.n	80055e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800568c:	e051      	b.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800569c:	d123      	bne.n	80056e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f043 0204 	orr.w	r2, r3, #4
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e046      	b.n	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d021      	beq.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fd fb1d 	bl	8002d2c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d116      	bne.n	8005732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f043 0220 	orr.w	r2, r3, #32
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e020      	b.n	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d10c      	bne.n	8005756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	43da      	mvns	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	e00b      	b.n	800576e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	43da      	mvns	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4013      	ands	r3, r2
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d18d      	bne.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005788:	e02d      	b.n	80057e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f8ce 	bl	800592c <I2C_IsAcknowledgeFailed>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e02d      	b.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d021      	beq.n	80057e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057a2:	f7fd fac3 	bl	8002d2c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d116      	bne.n	80057e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f043 0220 	orr.w	r2, r3, #32
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e007      	b.n	80057f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f0:	2b80      	cmp	r3, #128	; 0x80
 80057f2:	d1ca      	bne.n	800578a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800580a:	e02d      	b.n	8005868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f88d 	bl	800592c <I2C_IsAcknowledgeFailed>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e02d      	b.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d021      	beq.n	8005868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fd fa82 	bl	8002d2c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d116      	bne.n	8005868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0220 	orr.w	r2, r3, #32
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e007      	b.n	8005878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b04      	cmp	r3, #4
 8005874:	d1ca      	bne.n	800580c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800588c:	e042      	b.n	8005914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b10      	cmp	r3, #16
 800589a:	d119      	bne.n	80058d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0210 	mvn.w	r2, #16
 80058a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e029      	b.n	8005924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058d0:	f7fd fa2c 	bl	8002d2c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d116      	bne.n	8005914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	f043 0220 	orr.w	r2, r3, #32
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e007      	b.n	8005924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d1b5      	bne.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800593e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005942:	d11b      	bne.n	800597c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800594c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2220      	movs	r2, #32
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f043 0204 	orr.w	r2, r3, #4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b20      	cmp	r3, #32
 800599e:	d129      	bne.n	80059f4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	; 0x24
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0201 	bic.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0210 	bic.w	r2, r2, #16
 80059c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d12a      	bne.n	8005a72 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2224      	movs	r2, #36	; 0x24
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0201 	bic.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005a3c:	89fb      	ldrh	r3, [r7, #14]
 8005a3e:	f023 030f 	bic.w	r3, r3, #15
 8005a42:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	89fb      	ldrh	r3, [r7, #14]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	89fa      	ldrh	r2, [r7, #14]
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e000      	b.n	8005a74 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
  }
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e0bf      	b.n	8005c12 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fc f932 	bl	8001d10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005ac2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6999      	ldr	r1, [r3, #24]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ad8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6899      	ldr	r1, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4b4a      	ldr	r3, [pc, #296]	; (8005c1c <HAL_LTDC_Init+0x19c>)
 8005af4:	400b      	ands	r3, r1
 8005af6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	041b      	lsls	r3, r3, #16
 8005afe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6899      	ldr	r1, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68d9      	ldr	r1, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	4b3e      	ldr	r3, [pc, #248]	; (8005c1c <HAL_LTDC_Init+0x19c>)
 8005b22:	400b      	ands	r3, r1
 8005b24:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68d9      	ldr	r1, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6919      	ldr	r1, [r3, #16]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b33      	ldr	r3, [pc, #204]	; (8005c1c <HAL_LTDC_Init+0x19c>)
 8005b50:	400b      	ands	r3, r1
 8005b52:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6919      	ldr	r1, [r3, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	431a      	orrs	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6959      	ldr	r1, [r3, #20]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <HAL_LTDC_Init+0x19c>)
 8005b7e:	400b      	ands	r3, r1
 8005b80:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6959      	ldr	r1, [r3, #20]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0206 	orr.w	r2, r2, #6
 8005bee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699a      	ldr	r2, [r3, #24]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0201 	orr.w	r2, r2, #1
 8005bfe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	f000f800 	.word	0xf000f800

08005c20 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d023      	beq.n	8005c8a <HAL_LTDC_IRQHandler+0x6a>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01e      	beq.n	8005c8a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0204 	bic.w	r2, r2, #4
 8005c5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2204      	movs	r2, #4
 8005c62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2204      	movs	r2, #4
 8005c78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f86f 	bl	8005d68 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d023      	beq.n	8005cdc <HAL_LTDC_IRQHandler+0xbc>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01e      	beq.n	8005cdc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0202 	bic.w	r2, r2, #2
 8005cac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cbc:	f043 0202 	orr.w	r2, r3, #2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f846 	bl	8005d68 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01b      	beq.n	8005d1e <HAL_LTDC_IRQHandler+0xfe>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	f003 0301 	and.w	r3, r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d016      	beq.n	8005d1e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2201      	movs	r2, #1
 8005d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f00a f879 	bl	800fe10 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d01b      	beq.n	8005d60 <HAL_LTDC_IRQHandler+0x140>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d016      	beq.n	8005d60 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0208 	bic.w	r2, r2, #8
 8005d40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2208      	movs	r2, #8
 8005d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f80e 	bl	8005d7c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d90:	b5b0      	push	{r4, r5, r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_LTDC_ConfigLayer+0x1a>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e02c      	b.n	8005e04 <HAL_LTDC_ConfigLayer+0x74>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2202      	movs	r2, #2
 8005db6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2134      	movs	r1, #52	; 0x34
 8005dc0:	fb01 f303 	mul.w	r3, r1, r3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4614      	mov	r4, r2
 8005dce:	461d      	mov	r5, r3
 8005dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f849 	bl	8005e7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2201      	movs	r2, #1
 8005df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bdb0      	pop	{r4, r5, r7, pc}

08005e0c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_LTDC_ProgramLineEvent+0x18>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e023      	b.n	8005e6c <HAL_LTDC_ProgramLineEvent+0x60>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005e44:	4a0c      	ldr	r2, [pc, #48]	; (8005e78 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40016800 	.word	0x40016800

08005e7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b089      	sub	sp, #36	; 0x24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	0c1b      	lsrs	r3, r3, #16
 8005e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e98:	4413      	add	r3, r2
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	01db      	lsls	r3, r3, #7
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3384      	adds	r3, #132	; 0x84
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	01d2      	lsls	r2, r2, #7
 8005eb8:	440a      	add	r2, r1
 8005eba:	3284      	adds	r2, #132	; 0x84
 8005ebc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005ec0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	0c1b      	lsrs	r3, r3, #16
 8005ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed2:	4413      	add	r3, r2
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	01db      	lsls	r3, r3, #7
 8005ee0:	440b      	add	r3, r1
 8005ee2:	3384      	adds	r3, #132	; 0x84
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005efa:	4413      	add	r3, r2
 8005efc:	041b      	lsls	r3, r3, #16
 8005efe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	01db      	lsls	r3, r3, #7
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3384      	adds	r3, #132	; 0x84
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	4611      	mov	r1, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	01d2      	lsls	r2, r2, #7
 8005f1a:	440a      	add	r2, r1
 8005f1c:	3284      	adds	r2, #132	; 0x84
 8005f1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f32:	4413      	add	r3, r2
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	01db      	lsls	r3, r3, #7
 8005f40:	440b      	add	r3, r1
 8005f42:	3384      	adds	r3, #132	; 0x84
 8005f44:	4619      	mov	r1, r3
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	01db      	lsls	r3, r3, #7
 8005f56:	4413      	add	r3, r2
 8005f58:	3384      	adds	r3, #132	; 0x84
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	4611      	mov	r1, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	01d2      	lsls	r2, r2, #7
 8005f66:	440a      	add	r2, r1
 8005f68:	3284      	adds	r2, #132	; 0x84
 8005f6a:	f023 0307 	bic.w	r3, r3, #7
 8005f6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	01db      	lsls	r3, r3, #7
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3384      	adds	r3, #132	; 0x84
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	061b      	lsls	r3, r3, #24
 8005fa0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	01db      	lsls	r3, r3, #7
 8005fac:	4413      	add	r3, r2
 8005fae:	3384      	adds	r3, #132	; 0x84
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	01db      	lsls	r3, r3, #7
 8005fbc:	4413      	add	r3, r2
 8005fbe:	3384      	adds	r3, #132	; 0x84
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fcc:	461a      	mov	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	440b      	add	r3, r1
 8005fe2:	3384      	adds	r3, #132	; 0x84
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	01db      	lsls	r3, r3, #7
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3384      	adds	r3, #132	; 0x84
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	4611      	mov	r1, r2
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	01d2      	lsls	r2, r2, #7
 8006006:	440a      	add	r2, r1
 8006008:	3284      	adds	r2, #132	; 0x84
 800600a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800600e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	01db      	lsls	r3, r3, #7
 800601a:	4413      	add	r3, r2
 800601c:	3384      	adds	r3, #132	; 0x84
 800601e:	461a      	mov	r2, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	01db      	lsls	r3, r3, #7
 8006030:	4413      	add	r3, r2
 8006032:	3384      	adds	r3, #132	; 0x84
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	4611      	mov	r1, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	01d2      	lsls	r2, r2, #7
 8006040:	440a      	add	r2, r1
 8006042:	3284      	adds	r2, #132	; 0x84
 8006044:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006048:	f023 0307 	bic.w	r3, r3, #7
 800604c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	68f9      	ldr	r1, [r7, #12]
 8006058:	6809      	ldr	r1, [r1, #0]
 800605a:	4608      	mov	r0, r1
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	01c9      	lsls	r1, r1, #7
 8006060:	4401      	add	r1, r0
 8006062:	3184      	adds	r1, #132	; 0x84
 8006064:	4313      	orrs	r3, r2
 8006066:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	01db      	lsls	r3, r3, #7
 8006072:	4413      	add	r3, r2
 8006074:	3384      	adds	r3, #132	; 0x84
 8006076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	01db      	lsls	r3, r3, #7
 8006082:	4413      	add	r3, r2
 8006084:	3384      	adds	r3, #132	; 0x84
 8006086:	461a      	mov	r2, r3
 8006088:	2300      	movs	r3, #0
 800608a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	01db      	lsls	r3, r3, #7
 8006096:	4413      	add	r3, r2
 8006098:	3384      	adds	r3, #132	; 0x84
 800609a:	461a      	mov	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d102      	bne.n	80060b0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80060aa:	2304      	movs	r3, #4
 80060ac:	61fb      	str	r3, [r7, #28]
 80060ae:	e01b      	b.n	80060e8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d102      	bne.n	80060be <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80060b8:	2303      	movs	r3, #3
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	e014      	b.n	80060e8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d00b      	beq.n	80060de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d007      	beq.n	80060de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d003      	beq.n	80060de <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80060da:	2b07      	cmp	r3, #7
 80060dc:	d102      	bne.n	80060e4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80060de:	2302      	movs	r3, #2
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e001      	b.n	80060e8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80060e4:	2301      	movs	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	01db      	lsls	r3, r3, #7
 80060f2:	4413      	add	r3, r2
 80060f4:	3384      	adds	r3, #132	; 0x84
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	4611      	mov	r1, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	01d2      	lsls	r2, r2, #7
 8006102:	440a      	add	r2, r1
 8006104:	3284      	adds	r2, #132	; 0x84
 8006106:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800610a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	041a      	lsls	r2, r3, #16
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6859      	ldr	r1, [r3, #4]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	1acb      	subs	r3, r1, r3
 8006122:	69f9      	ldr	r1, [r7, #28]
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	3303      	adds	r3, #3
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	6809      	ldr	r1, [r1, #0]
 800612e:	4608      	mov	r0, r1
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	01c9      	lsls	r1, r1, #7
 8006134:	4401      	add	r1, r0
 8006136:	3184      	adds	r1, #132	; 0x84
 8006138:	4313      	orrs	r3, r2
 800613a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	01db      	lsls	r3, r3, #7
 8006146:	4413      	add	r3, r2
 8006148:	3384      	adds	r3, #132	; 0x84
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	4611      	mov	r1, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	01d2      	lsls	r2, r2, #7
 8006156:	440a      	add	r2, r1
 8006158:	3284      	adds	r2, #132	; 0x84
 800615a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800615e:	f023 0307 	bic.w	r3, r3, #7
 8006162:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	01db      	lsls	r3, r3, #7
 800616e:	4413      	add	r3, r2
 8006170:	3384      	adds	r3, #132	; 0x84
 8006172:	461a      	mov	r2, r3
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	01db      	lsls	r3, r3, #7
 8006184:	4413      	add	r3, r2
 8006186:	3384      	adds	r3, #132	; 0x84
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	4611      	mov	r1, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	01d2      	lsls	r2, r2, #7
 8006194:	440a      	add	r2, r1
 8006196:	3284      	adds	r2, #132	; 0x84
 8006198:	f043 0301 	orr.w	r3, r3, #1
 800619c:	6013      	str	r3, [r2, #0]
}
 800619e:	bf00      	nop
 80061a0:	3724      	adds	r7, #36	; 0x24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e25b      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d075      	beq.n	80062b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ca:	4ba3      	ldr	r3, [pc, #652]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d00c      	beq.n	80061f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d6:	4ba0      	ldr	r3, [pc, #640]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061de:	2b08      	cmp	r3, #8
 80061e0:	d112      	bne.n	8006208 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061e2:	4b9d      	ldr	r3, [pc, #628]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ee:	d10b      	bne.n	8006208 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f0:	4b99      	ldr	r3, [pc, #612]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05b      	beq.n	80062b4 <HAL_RCC_OscConfig+0x108>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d157      	bne.n	80062b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e236      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d106      	bne.n	8006220 <HAL_RCC_OscConfig+0x74>
 8006212:	4b91      	ldr	r3, [pc, #580]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a90      	ldr	r2, [pc, #576]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	e01d      	b.n	800625c <HAL_RCC_OscConfig+0xb0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006228:	d10c      	bne.n	8006244 <HAL_RCC_OscConfig+0x98>
 800622a:	4b8b      	ldr	r3, [pc, #556]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a8a      	ldr	r2, [pc, #552]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	4b88      	ldr	r3, [pc, #544]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a87      	ldr	r2, [pc, #540]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	e00b      	b.n	800625c <HAL_RCC_OscConfig+0xb0>
 8006244:	4b84      	ldr	r3, [pc, #528]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a83      	ldr	r2, [pc, #524]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	4b81      	ldr	r3, [pc, #516]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a80      	ldr	r2, [pc, #512]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800625a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006264:	f7fc fd62 	bl	8002d2c <HAL_GetTick>
 8006268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800626c:	f7fc fd5e 	bl	8002d2c <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e1fb      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627e:	4b76      	ldr	r3, [pc, #472]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCC_OscConfig+0xc0>
 800628a:	e014      	b.n	80062b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628c:	f7fc fd4e 	bl	8002d2c <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006294:	f7fc fd4a 	bl	8002d2c <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	; 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e1e7      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a6:	4b6c      	ldr	r3, [pc, #432]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0xe8>
 80062b2:	e000      	b.n	80062b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d063      	beq.n	800638a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062c2:	4b65      	ldr	r3, [pc, #404]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ce:	4b62      	ldr	r3, [pc, #392]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d11c      	bne.n	8006314 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062da:	4b5f      	ldr	r3, [pc, #380]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d116      	bne.n	8006314 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e6:	4b5c      	ldr	r3, [pc, #368]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d005      	beq.n	80062fe <HAL_RCC_OscConfig+0x152>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d001      	beq.n	80062fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e1bb      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fe:	4b56      	ldr	r3, [pc, #344]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	4952      	ldr	r1, [pc, #328]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006312:	e03a      	b.n	800638a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d020      	beq.n	800635e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800631c:	4b4f      	ldr	r3, [pc, #316]	; (800645c <HAL_RCC_OscConfig+0x2b0>)
 800631e:	2201      	movs	r2, #1
 8006320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fc fd03 	bl	8002d2c <HAL_GetTick>
 8006326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006328:	e008      	b.n	800633c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800632a:	f7fc fcff 	bl	8002d2c <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d901      	bls.n	800633c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e19c      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633c:	4b46      	ldr	r3, [pc, #280]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f0      	beq.n	800632a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006348:	4b43      	ldr	r3, [pc, #268]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4940      	ldr	r1, [pc, #256]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006358:	4313      	orrs	r3, r2
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	e015      	b.n	800638a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800635e:	4b3f      	ldr	r3, [pc, #252]	; (800645c <HAL_RCC_OscConfig+0x2b0>)
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fc fce2 	bl	8002d2c <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800636c:	f7fc fcde 	bl	8002d2c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e17b      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800637e:	4b36      	ldr	r3, [pc, #216]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d030      	beq.n	80063f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d016      	beq.n	80063cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800639e:	4b30      	ldr	r3, [pc, #192]	; (8006460 <HAL_RCC_OscConfig+0x2b4>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fc fcc2 	bl	8002d2c <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ac:	f7fc fcbe 	bl	8002d2c <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e15b      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	4b26      	ldr	r3, [pc, #152]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x200>
 80063ca:	e015      	b.n	80063f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063cc:	4b24      	ldr	r3, [pc, #144]	; (8006460 <HAL_RCC_OscConfig+0x2b4>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063d2:	f7fc fcab 	bl	8002d2c <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063da:	f7fc fca7 	bl	8002d2c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e144      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ec:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 80063ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1f0      	bne.n	80063da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80a0 	beq.w	8006546 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10f      	bne.n	8006436 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a0e      	ldr	r2, [pc, #56]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <HAL_RCC_OscConfig+0x2ac>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <HAL_RCC_OscConfig+0x2b8>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d121      	bne.n	8006486 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006442:	4b08      	ldr	r3, [pc, #32]	; (8006464 <HAL_RCC_OscConfig+0x2b8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a07      	ldr	r2, [pc, #28]	; (8006464 <HAL_RCC_OscConfig+0x2b8>)
 8006448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644e:	f7fc fc6d 	bl	8002d2c <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006454:	e011      	b.n	800647a <HAL_RCC_OscConfig+0x2ce>
 8006456:	bf00      	nop
 8006458:	40023800 	.word	0x40023800
 800645c:	42470000 	.word	0x42470000
 8006460:	42470e80 	.word	0x42470e80
 8006464:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006468:	f7fc fc60 	bl	8002d2c <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e0fd      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647a:	4b81      	ldr	r3, [pc, #516]	; (8006680 <HAL_RCC_OscConfig+0x4d4>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d106      	bne.n	800649c <HAL_RCC_OscConfig+0x2f0>
 800648e:	4b7d      	ldr	r3, [pc, #500]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	4a7c      	ldr	r2, [pc, #496]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	6713      	str	r3, [r2, #112]	; 0x70
 800649a:	e01c      	b.n	80064d6 <HAL_RCC_OscConfig+0x32a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	2b05      	cmp	r3, #5
 80064a2:	d10c      	bne.n	80064be <HAL_RCC_OscConfig+0x312>
 80064a4:	4b77      	ldr	r3, [pc, #476]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a8:	4a76      	ldr	r2, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064aa:	f043 0304 	orr.w	r3, r3, #4
 80064ae:	6713      	str	r3, [r2, #112]	; 0x70
 80064b0:	4b74      	ldr	r3, [pc, #464]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	4a73      	ldr	r2, [pc, #460]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6713      	str	r3, [r2, #112]	; 0x70
 80064bc:	e00b      	b.n	80064d6 <HAL_RCC_OscConfig+0x32a>
 80064be:	4b71      	ldr	r3, [pc, #452]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c2:	4a70      	ldr	r2, [pc, #448]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	6713      	str	r3, [r2, #112]	; 0x70
 80064ca:	4b6e      	ldr	r3, [pc, #440]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	4a6d      	ldr	r2, [pc, #436]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064d0:	f023 0304 	bic.w	r3, r3, #4
 80064d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d015      	beq.n	800650a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fc fc25 	bl	8002d2c <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e4:	e00a      	b.n	80064fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e6:	f7fc fc21 	bl	8002d2c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e0bc      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	4b61      	ldr	r3, [pc, #388]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ee      	beq.n	80064e6 <HAL_RCC_OscConfig+0x33a>
 8006508:	e014      	b.n	8006534 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650a:	f7fc fc0f 	bl	8002d2c <HAL_GetTick>
 800650e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006510:	e00a      	b.n	8006528 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006512:	f7fc fc0b 	bl	8002d2c <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006520:	4293      	cmp	r3, r2
 8006522:	d901      	bls.n	8006528 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e0a6      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006528:	4b56      	ldr	r3, [pc, #344]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1ee      	bne.n	8006512 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d105      	bne.n	8006546 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800653a:	4b52      	ldr	r3, [pc, #328]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	4a51      	ldr	r2, [pc, #324]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 8006540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006544:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8092 	beq.w	8006674 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006550:	4b4c      	ldr	r3, [pc, #304]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	f003 030c 	and.w	r3, r3, #12
 8006558:	2b08      	cmp	r3, #8
 800655a:	d05c      	beq.n	8006616 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d141      	bne.n	80065e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006564:	4b48      	ldr	r3, [pc, #288]	; (8006688 <HAL_RCC_OscConfig+0x4dc>)
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656a:	f7fc fbdf 	bl	8002d2c <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006572:	f7fc fbdb 	bl	8002d2c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e078      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006584:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f0      	bne.n	8006572 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	019b      	lsls	r3, r3, #6
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	3b01      	subs	r3, #1
 80065aa:	041b      	lsls	r3, r3, #16
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	061b      	lsls	r3, r3, #24
 80065b4:	4933      	ldr	r1, [pc, #204]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ba:	4b33      	ldr	r3, [pc, #204]	; (8006688 <HAL_RCC_OscConfig+0x4dc>)
 80065bc:	2201      	movs	r2, #1
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c0:	f7fc fbb4 	bl	8002d2c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c8:	f7fc fbb0 	bl	8002d2c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e04d      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065da:	4b2a      	ldr	r3, [pc, #168]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d0f0      	beq.n	80065c8 <HAL_RCC_OscConfig+0x41c>
 80065e6:	e045      	b.n	8006674 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065e8:	4b27      	ldr	r3, [pc, #156]	; (8006688 <HAL_RCC_OscConfig+0x4dc>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ee:	f7fc fb9d 	bl	8002d2c <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f6:	f7fc fb99 	bl	8002d2c <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e036      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCC_OscConfig+0x44a>
 8006614:	e02e      	b.n	8006674 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e029      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006622:	4b18      	ldr	r3, [pc, #96]	; (8006684 <HAL_RCC_OscConfig+0x4d8>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	429a      	cmp	r2, r3
 8006634:	d11c      	bne.n	8006670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006640:	429a      	cmp	r2, r3
 8006642:	d115      	bne.n	8006670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800664a:	4013      	ands	r3, r2
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006650:	4293      	cmp	r3, r2
 8006652:	d10d      	bne.n	8006670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800665e:	429a      	cmp	r2, r3
 8006660:	d106      	bne.n	8006670 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800666c:	429a      	cmp	r2, r3
 800666e:	d001      	beq.n	8006674 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	40007000 	.word	0x40007000
 8006684:	40023800 	.word	0x40023800
 8006688:	42470060 	.word	0x42470060

0800668c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0cc      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066a0:	4b68      	ldr	r3, [pc, #416]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d90c      	bls.n	80066c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ae:	4b65      	ldr	r3, [pc, #404]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b6:	4b63      	ldr	r3, [pc, #396]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d001      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0b8      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d020      	beq.n	8006716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e0:	4b59      	ldr	r3, [pc, #356]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a58      	ldr	r2, [pc, #352]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066f8:	4b53      	ldr	r3, [pc, #332]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	4a52      	ldr	r2, [pc, #328]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006704:	4b50      	ldr	r3, [pc, #320]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	494d      	ldr	r1, [pc, #308]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d044      	beq.n	80067ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d107      	bne.n	800673a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	4b47      	ldr	r3, [pc, #284]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006732:	2b00      	cmp	r3, #0
 8006734:	d119      	bne.n	800676a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e07f      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d003      	beq.n	800674a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006746:	2b03      	cmp	r3, #3
 8006748:	d107      	bne.n	800675a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674a:	4b3f      	ldr	r3, [pc, #252]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e06f      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675a:	4b3b      	ldr	r3, [pc, #236]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e067      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676a:	4b37      	ldr	r3, [pc, #220]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f023 0203 	bic.w	r2, r3, #3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	4934      	ldr	r1, [pc, #208]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006778:	4313      	orrs	r3, r2
 800677a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800677c:	f7fc fad6 	bl	8002d2c <HAL_GetTick>
 8006780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006782:	e00a      	b.n	800679a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006784:	f7fc fad2 	bl	8002d2c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e04f      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679a:	4b2b      	ldr	r3, [pc, #172]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 020c 	and.w	r2, r3, #12
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d1eb      	bne.n	8006784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067ac:	4b25      	ldr	r3, [pc, #148]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d20c      	bcs.n	80067d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ba:	4b22      	ldr	r3, [pc, #136]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	4b20      	ldr	r3, [pc, #128]	; (8006844 <HAL_RCC_ClockConfig+0x1b8>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 030f 	and.w	r3, r3, #15
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d001      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e032      	b.n	800683a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e0:	4b19      	ldr	r3, [pc, #100]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	4916      	ldr	r1, [pc, #88]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067fe:	4b12      	ldr	r3, [pc, #72]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	00db      	lsls	r3, r3, #3
 800680c:	490e      	ldr	r1, [pc, #56]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006812:	f000 f821 	bl	8006858 <HAL_RCC_GetSysClockFreq>
 8006816:	4601      	mov	r1, r0
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <HAL_RCC_ClockConfig+0x1bc>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	091b      	lsrs	r3, r3, #4
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	4a0a      	ldr	r2, [pc, #40]	; (800684c <HAL_RCC_ClockConfig+0x1c0>)
 8006824:	5cd3      	ldrb	r3, [r2, r3]
 8006826:	fa21 f303 	lsr.w	r3, r1, r3
 800682a:	4a09      	ldr	r2, [pc, #36]	; (8006850 <HAL_RCC_ClockConfig+0x1c4>)
 800682c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCC_ClockConfig+0x1c8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7fb fc86 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40023c00 	.word	0x40023c00
 8006848:	40023800 	.word	0x40023800
 800684c:	08021718 	.word	0x08021718
 8006850:	2000000c 	.word	0x2000000c
 8006854:	20000070 	.word	0x20000070

08006858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	607b      	str	r3, [r7, #4]
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	2300      	movs	r3, #0
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800686e:	4b63      	ldr	r3, [pc, #396]	; (80069fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 030c 	and.w	r3, r3, #12
 8006876:	2b04      	cmp	r3, #4
 8006878:	d007      	beq.n	800688a <HAL_RCC_GetSysClockFreq+0x32>
 800687a:	2b08      	cmp	r3, #8
 800687c:	d008      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x38>
 800687e:	2b00      	cmp	r3, #0
 8006880:	f040 80b4 	bne.w	80069ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006884:	4b5e      	ldr	r3, [pc, #376]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006886:	60bb      	str	r3, [r7, #8]
       break;
 8006888:	e0b3      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800688a:	4b5e      	ldr	r3, [pc, #376]	; (8006a04 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800688c:	60bb      	str	r3, [r7, #8]
      break;
 800688e:	e0b0      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006890:	4b5a      	ldr	r3, [pc, #360]	; (80069fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006898:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800689a:	4b58      	ldr	r3, [pc, #352]	; (80069fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d04a      	beq.n	800693c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068a6:	4b55      	ldr	r3, [pc, #340]	; (80069fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	099b      	lsrs	r3, r3, #6
 80068ac:	f04f 0400 	mov.w	r4, #0
 80068b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068b4:	f04f 0200 	mov.w	r2, #0
 80068b8:	ea03 0501 	and.w	r5, r3, r1
 80068bc:	ea04 0602 	and.w	r6, r4, r2
 80068c0:	4629      	mov	r1, r5
 80068c2:	4632      	mov	r2, r6
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	f04f 0400 	mov.w	r4, #0
 80068cc:	0154      	lsls	r4, r2, #5
 80068ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068d2:	014b      	lsls	r3, r1, #5
 80068d4:	4619      	mov	r1, r3
 80068d6:	4622      	mov	r2, r4
 80068d8:	1b49      	subs	r1, r1, r5
 80068da:	eb62 0206 	sbc.w	r2, r2, r6
 80068de:	f04f 0300 	mov.w	r3, #0
 80068e2:	f04f 0400 	mov.w	r4, #0
 80068e6:	0194      	lsls	r4, r2, #6
 80068e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80068ec:	018b      	lsls	r3, r1, #6
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	eb64 0402 	sbc.w	r4, r4, r2
 80068f4:	f04f 0100 	mov.w	r1, #0
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	00e2      	lsls	r2, r4, #3
 80068fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006902:	00d9      	lsls	r1, r3, #3
 8006904:	460b      	mov	r3, r1
 8006906:	4614      	mov	r4, r2
 8006908:	195b      	adds	r3, r3, r5
 800690a:	eb44 0406 	adc.w	r4, r4, r6
 800690e:	f04f 0100 	mov.w	r1, #0
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	0262      	lsls	r2, r4, #9
 8006918:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800691c:	0259      	lsls	r1, r3, #9
 800691e:	460b      	mov	r3, r1
 8006920:	4614      	mov	r4, r2
 8006922:	4618      	mov	r0, r3
 8006924:	4621      	mov	r1, r4
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f04f 0400 	mov.w	r4, #0
 800692c:	461a      	mov	r2, r3
 800692e:	4623      	mov	r3, r4
 8006930:	f7fa f8cc 	bl	8000acc <__aeabi_uldivmod>
 8006934:	4603      	mov	r3, r0
 8006936:	460c      	mov	r4, r1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	e049      	b.n	80069d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800693c:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	099b      	lsrs	r3, r3, #6
 8006942:	f04f 0400 	mov.w	r4, #0
 8006946:	f240 11ff 	movw	r1, #511	; 0x1ff
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	ea03 0501 	and.w	r5, r3, r1
 8006952:	ea04 0602 	and.w	r6, r4, r2
 8006956:	4629      	mov	r1, r5
 8006958:	4632      	mov	r2, r6
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	f04f 0400 	mov.w	r4, #0
 8006962:	0154      	lsls	r4, r2, #5
 8006964:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006968:	014b      	lsls	r3, r1, #5
 800696a:	4619      	mov	r1, r3
 800696c:	4622      	mov	r2, r4
 800696e:	1b49      	subs	r1, r1, r5
 8006970:	eb62 0206 	sbc.w	r2, r2, r6
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	f04f 0400 	mov.w	r4, #0
 800697c:	0194      	lsls	r4, r2, #6
 800697e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006982:	018b      	lsls	r3, r1, #6
 8006984:	1a5b      	subs	r3, r3, r1
 8006986:	eb64 0402 	sbc.w	r4, r4, r2
 800698a:	f04f 0100 	mov.w	r1, #0
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	00e2      	lsls	r2, r4, #3
 8006994:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006998:	00d9      	lsls	r1, r3, #3
 800699a:	460b      	mov	r3, r1
 800699c:	4614      	mov	r4, r2
 800699e:	195b      	adds	r3, r3, r5
 80069a0:	eb44 0406 	adc.w	r4, r4, r6
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	02a2      	lsls	r2, r4, #10
 80069ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069b2:	0299      	lsls	r1, r3, #10
 80069b4:	460b      	mov	r3, r1
 80069b6:	4614      	mov	r4, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	4621      	mov	r1, r4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f04f 0400 	mov.w	r4, #0
 80069c2:	461a      	mov	r2, r3
 80069c4:	4623      	mov	r3, r4
 80069c6:	f7fa f881 	bl	8000acc <__aeabi_uldivmod>
 80069ca:	4603      	mov	r3, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	3301      	adds	r3, #1
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e8:	60bb      	str	r3, [r7, #8]
      break;
 80069ea:	e002      	b.n	80069f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80069ee:	60bb      	str	r3, [r7, #8]
      break;
 80069f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069f2:	68bb      	ldr	r3, [r7, #8]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069fc:	40023800 	.word	0x40023800
 8006a00:	00f42400 	.word	0x00f42400
 8006a04:	007a1200 	.word	0x007a1200

08006a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a0c:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	2000000c 	.word	0x2000000c

08006a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a24:	f7ff fff0 	bl	8006a08 <HAL_RCC_GetHCLKFreq>
 8006a28:	4601      	mov	r1, r0
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	0a9b      	lsrs	r3, r3, #10
 8006a30:	f003 0307 	and.w	r3, r3, #7
 8006a34:	4a03      	ldr	r2, [pc, #12]	; (8006a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a36:	5cd3      	ldrb	r3, [r2, r3]
 8006a38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40023800 	.word	0x40023800
 8006a44:	08021728 	.word	0x08021728

08006a48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	220f      	movs	r2, #15
 8006a56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a58:	4b12      	ldr	r3, [pc, #72]	; (8006aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 0203 	and.w	r2, r3, #3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a64:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a70:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a7c:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <HAL_RCC_GetClockConfig+0x5c>)
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	08db      	lsrs	r3, r3, #3
 8006a82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a8a:	4b07      	ldr	r3, [pc, #28]	; (8006aa8 <HAL_RCC_GetClockConfig+0x60>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	601a      	str	r2, [r3, #0]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	40023c00 	.word	0x40023c00

08006aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10b      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d105      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d075      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ae0:	4bad      	ldr	r3, [pc, #692]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ae6:	f7fc f921 	bl	8002d2c <HAL_GetTick>
 8006aea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006aee:	f7fc f91d 	bl	8002d2c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e18b      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b00:	4ba6      	ldr	r3, [pc, #664]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f0      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	019a      	lsls	r2, r3, #6
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	071b      	lsls	r3, r3, #28
 8006b24:	499d      	ldr	r1, [pc, #628]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01f      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b38:	4b98      	ldr	r3, [pc, #608]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b3e:	0f1b      	lsrs	r3, r3, #28
 8006b40:	f003 0307 	and.w	r3, r3, #7
 8006b44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	019a      	lsls	r2, r3, #6
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	061b      	lsls	r3, r3, #24
 8006b52:	431a      	orrs	r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	071b      	lsls	r3, r3, #28
 8006b58:	4990      	ldr	r1, [pc, #576]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b60:	4b8e      	ldr	r3, [pc, #568]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b66:	f023 021f 	bic.w	r2, r3, #31
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	498a      	ldr	r1, [pc, #552]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	019a      	lsls	r2, r3, #6
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	061b      	lsls	r3, r3, #24
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	071b      	lsls	r3, r3, #28
 8006b98:	4980      	ldr	r1, [pc, #512]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ba0:	4b7d      	ldr	r3, [pc, #500]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba6:	f7fc f8c1 	bl	8002d2c <HAL_GetTick>
 8006baa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006bae:	f7fc f8bd 	bl	8002d2c <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e12b      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bc0:	4b76      	ldr	r3, [pc, #472]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d079      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006be4:	4b6e      	ldr	r3, [pc, #440]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bea:	f7fc f89f 	bl	8002d2c <HAL_GetTick>
 8006bee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006bf2:	f7fc f89b 	bl	8002d2c <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e109      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c04:	4b65      	ldr	r3, [pc, #404]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c10:	d0ef      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d020      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c1e:	4b5f      	ldr	r3, [pc, #380]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c24:	0f1b      	lsrs	r3, r3, #28
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	019a      	lsls	r2, r3, #6
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	061b      	lsls	r3, r3, #24
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	071b      	lsls	r3, r3, #28
 8006c3e:	4957      	ldr	r1, [pc, #348]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c40:	4313      	orrs	r3, r2
 8006c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c46:	4b55      	ldr	r3, [pc, #340]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	4950      	ldr	r1, [pc, #320]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01e      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c6c:	4b4b      	ldr	r3, [pc, #300]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	0e1b      	lsrs	r3, r3, #24
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	019a      	lsls	r2, r3, #6
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	061b      	lsls	r3, r3, #24
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	071b      	lsls	r3, r3, #28
 8006c8c:	4943      	ldr	r1, [pc, #268]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c94:	4b41      	ldr	r3, [pc, #260]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	493e      	ldr	r1, [pc, #248]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006caa:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cb0:	f7fc f83c 	bl	8002d2c <HAL_GetTick>
 8006cb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cb8:	f7fc f838 	bl	8002d2c <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e0a6      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cca:	4b34      	ldr	r3, [pc, #208]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd6:	d1ef      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0320 	and.w	r3, r3, #32
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 808d 	beq.w	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	4b2c      	ldr	r3, [pc, #176]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	4a2b      	ldr	r2, [pc, #172]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf6:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d02:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d0e:	f7fc f80d 	bl	8002d2c <HAL_GetTick>
 8006d12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d14:	e008      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d16:	f7fc f809 	bl	8002d2c <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e077      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006d28:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d34:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d039      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d032      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d5c:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d62:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d68:	4a0c      	ldr	r2, [pc, #48]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d6e:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d11e      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d7a:	f7fb ffd7 	bl	8002d2c <HAL_GetTick>
 8006d7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d80:	e014      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fb ffd3 	bl	8002d2c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d90b      	bls.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e03f      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006d98:	42470068 	.word	0x42470068
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	42470070 	.word	0x42470070
 8006da4:	40007000 	.word	0x40007000
 8006da8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dac:	4b1c      	ldr	r3, [pc, #112]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0e4      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc4:	d10d      	bne.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006dc6:	4b16      	ldr	r3, [pc, #88]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dda:	4911      	ldr	r1, [pc, #68]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	608b      	str	r3, [r1, #8]
 8006de0:	e005      	b.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	4a0e      	ldr	r2, [pc, #56]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006de8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006dec:	6093      	str	r3, [r2, #8]
 8006dee:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006df0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dfa:	4909      	ldr	r1, [pc, #36]	; (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0310 	and.w	r3, r3, #16
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e14:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40023800 	.word	0x40023800
 8006e24:	424711e0 	.word	0x424711e0

08006e28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e025      	b.n	8006e88 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d106      	bne.n	8006e56 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fb f96d 	bl	8002130 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	3304      	adds	r3, #4
 8006e66:	4619      	mov	r1, r3
 8006e68:	4610      	mov	r0, r2
 8006e6a:	f001 faa5 	bl	80083b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	f001 fb10 	bl	800849e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d101      	bne.n	8006eac <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e018      	b.n	8006ede <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f001 fb6d 	bl	800859c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d104      	bne.n	8006ed4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2205      	movs	r2, #5
 8006ece:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006ed2:	e003      	b.n	8006edc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d101      	bne.n	8006f00 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
 8006efe:	e00e      	b.n	8006f1e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fb80 	bl	8008614 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e056      	b.n	8006fe6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fa fff2 	bl	8001f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	ea42 0103 	orr.w	r1, r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	0c1b      	lsrs	r3, r3, #16
 8006fb6:	f003 0104 	and.w	r1, r3, #4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69da      	ldr	r2, [r3, #28]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b088      	sub	sp, #32
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	603b      	str	r3, [r7, #0]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <HAL_SPI_Transmit+0x22>
 800700c:	2302      	movs	r3, #2
 800700e:	e11e      	b.n	800724e <HAL_SPI_Transmit+0x260>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007018:	f7fb fe88 	bl	8002d2c <HAL_GetTick>
 800701c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b01      	cmp	r3, #1
 800702c:	d002      	beq.n	8007034 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800702e:	2302      	movs	r3, #2
 8007030:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007032:	e103      	b.n	800723c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Transmit+0x52>
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007044:	e0fa      	b.n	800723c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2203      	movs	r2, #3
 800704a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	88fa      	ldrh	r2, [r7, #6]
 8007064:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708c:	d107      	bne.n	800709e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800709c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a8:	2b40      	cmp	r3, #64	; 0x40
 80070aa:	d007      	beq.n	80070bc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c4:	d14b      	bne.n	800715e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_SPI_Transmit+0xe6>
 80070ce:	8afb      	ldrh	r3, [r7, #22]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d13e      	bne.n	8007152 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	881a      	ldrh	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e4:	1c9a      	adds	r2, r3, #2
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	3b01      	subs	r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070f8:	e02b      	b.n	8007152 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d112      	bne.n	800712e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	881a      	ldrh	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	1c9a      	adds	r2, r3, #2
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007122:	b29b      	uxth	r3, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	b29a      	uxth	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	86da      	strh	r2, [r3, #54]	; 0x36
 800712c:	e011      	b.n	8007152 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800712e:	f7fb fdfd 	bl	8002d2c <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	683a      	ldr	r2, [r7, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d803      	bhi.n	8007146 <HAL_SPI_Transmit+0x158>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d102      	bne.n	800714c <HAL_SPI_Transmit+0x15e>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007150:	e074      	b.n	800723c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ce      	bne.n	80070fa <HAL_SPI_Transmit+0x10c>
 800715c:	e04c      	b.n	80071f8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <HAL_SPI_Transmit+0x17e>
 8007166:	8afb      	ldrh	r3, [r7, #22]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d140      	bne.n	80071ee <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	330c      	adds	r3, #12
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007188:	b29b      	uxth	r3, r3
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007192:	e02c      	b.n	80071ee <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d113      	bne.n	80071ca <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	7812      	ldrb	r2, [r2, #0]
 80071ae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80071c8:	e011      	b.n	80071ee <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ca:	f7fb fdaf 	bl	8002d2c <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d803      	bhi.n	80071e2 <HAL_SPI_Transmit+0x1f4>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e0:	d102      	bne.n	80071e8 <HAL_SPI_Transmit+0x1fa>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80071ec:	e026      	b.n	800723c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1cd      	bne.n	8007194 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 fba5 	bl	800794c <SPI_EndRxTxTransaction>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007216:	2300      	movs	r3, #0
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77fb      	strb	r3, [r7, #31]
 8007238:	e000      	b.n	800723c <HAL_SPI_Transmit+0x24e>
  }

error:
 800723a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800724c:	7ffb      	ldrb	r3, [r7, #31]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3720      	adds	r7, #32
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b088      	sub	sp, #32
 800725a:	af02      	add	r7, sp, #8
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007272:	d112      	bne.n	800729a <HAL_SPI_Receive+0x44>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10e      	bne.n	800729a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2204      	movs	r2, #4
 8007280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007284:	88fa      	ldrh	r2, [r7, #6]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4613      	mov	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	68b9      	ldr	r1, [r7, #8]
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f8e9 	bl	8007468 <HAL_SPI_TransmitReceive>
 8007296:	4603      	mov	r3, r0
 8007298:	e0e2      	b.n	8007460 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_SPI_Receive+0x52>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e0db      	b.n	8007460 <HAL_SPI_Receive+0x20a>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072b0:	f7fb fd3c 	bl	8002d2c <HAL_GetTick>
 80072b4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d002      	beq.n	80072c8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
 80072c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072c6:	e0c2      	b.n	800744e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_SPI_Receive+0x7e>
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072d8:	e0b9      	b.n	800744e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2204      	movs	r2, #4
 80072de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007320:	d107      	bne.n	8007332 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007330:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d007      	beq.n	8007350 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800734e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d162      	bne.n	800741e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007358:	e02e      	b.n	80073b8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	2b01      	cmp	r3, #1
 8007366:	d115      	bne.n	8007394 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f103 020c 	add.w	r2, r3, #12
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	7812      	ldrb	r2, [r2, #0]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737e:	1c5a      	adds	r2, r3, #1
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	b29a      	uxth	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007392:	e011      	b.n	80073b8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007394:	f7fb fcca 	bl	8002d2c <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d803      	bhi.n	80073ac <HAL_SPI_Receive+0x156>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d102      	bne.n	80073b2 <HAL_SPI_Receive+0x15c>
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073b6:	e04a      	b.n	800744e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1cb      	bne.n	800735a <HAL_SPI_Receive+0x104>
 80073c2:	e031      	b.n	8007428 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0301 	and.w	r3, r3, #1
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d113      	bne.n	80073fa <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	b292      	uxth	r2, r2
 80073de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e4:	1c9a      	adds	r2, r3, #2
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073f8:	e011      	b.n	800741e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073fa:	f7fb fc97 	bl	8002d2c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d803      	bhi.n	8007412 <HAL_SPI_Receive+0x1bc>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007410:	d102      	bne.n	8007418 <HAL_SPI_Receive+0x1c2>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d102      	bne.n	800741e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800741c:	e017      	b.n	800744e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1cd      	bne.n	80073c4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 fa27 	bl	8007880 <SPI_EndRxTransaction>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]
 800744a:	e000      	b.n	800744e <HAL_SPI_Receive+0x1f8>
  }

error :
 800744c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800745e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08c      	sub	sp, #48	; 0x30
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007476:	2301      	movs	r3, #1
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_SPI_TransmitReceive+0x26>
 800748a:	2302      	movs	r3, #2
 800748c:	e18a      	b.n	80077a4 <HAL_SPI_TransmitReceive+0x33c>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007496:	f7fb fc49 	bl	8002d2c <HAL_GetTick>
 800749a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074ac:	887b      	ldrh	r3, [r7, #2]
 80074ae:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d00f      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0x70>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074be:	d107      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <HAL_SPI_TransmitReceive+0x68>
 80074c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d003      	beq.n	80074d8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80074d0:	2302      	movs	r3, #2
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074d6:	e15b      	b.n	8007790 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x82>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_TransmitReceive+0x82>
 80074e4:	887b      	ldrh	r3, [r7, #2]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074f0:	e14e      	b.n	8007790 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d003      	beq.n	8007506 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2205      	movs	r2, #5
 8007502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	887a      	ldrh	r2, [r7, #2]
 8007516:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	887a      	ldrh	r2, [r7, #2]
 800751c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	887a      	ldrh	r2, [r7, #2]
 8007528:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	887a      	ldrh	r2, [r7, #2]
 800752e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b40      	cmp	r3, #64	; 0x40
 8007548:	d007      	beq.n	800755a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007558:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007562:	d178      	bne.n	8007656 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <HAL_SPI_TransmitReceive+0x10a>
 800756c:	8b7b      	ldrh	r3, [r7, #26]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d166      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	881a      	ldrh	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	1c9a      	adds	r2, r3, #2
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007596:	e053      	b.n	8007640 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d11b      	bne.n	80075de <HAL_SPI_TransmitReceive+0x176>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d016      	beq.n	80075de <HAL_SPI_TransmitReceive+0x176>
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d113      	bne.n	80075de <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	881a      	ldrh	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	1c9a      	adds	r2, r3, #2
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d119      	bne.n	8007620 <HAL_SPI_TransmitReceive+0x1b8>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d014      	beq.n	8007620 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007600:	b292      	uxth	r2, r2
 8007602:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	1c9a      	adds	r2, r3, #2
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800761c:	2301      	movs	r3, #1
 800761e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007620:	f7fb fb84 	bl	8002d2c <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800762c:	429a      	cmp	r2, r3
 800762e:	d807      	bhi.n	8007640 <HAL_SPI_TransmitReceive+0x1d8>
 8007630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d003      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800763e:	e0a7      	b.n	8007790 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1a6      	bne.n	8007598 <HAL_SPI_TransmitReceive+0x130>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1a1      	bne.n	8007598 <HAL_SPI_TransmitReceive+0x130>
 8007654:	e07c      	b.n	8007750 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_SPI_TransmitReceive+0x1fc>
 800765e:	8b7b      	ldrh	r3, [r7, #26]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d16b      	bne.n	800773c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	1c5a      	adds	r2, r3, #1
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b29a      	uxth	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800768a:	e057      	b.n	800773c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b02      	cmp	r3, #2
 8007698:	d11c      	bne.n	80076d4 <HAL_SPI_TransmitReceive+0x26c>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d017      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x26c>
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d114      	bne.n	80076d4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	330c      	adds	r3, #12
 80076b4:	7812      	ldrb	r2, [r2, #0]
 80076b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d119      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x2ae>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d014      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007712:	2301      	movs	r3, #1
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007716:	f7fb fb09 	bl	8002d2c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007722:	429a      	cmp	r2, r3
 8007724:	d803      	bhi.n	800772e <HAL_SPI_TransmitReceive+0x2c6>
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d102      	bne.n	8007734 <HAL_SPI_TransmitReceive+0x2cc>
 800772e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007730:	2b00      	cmp	r3, #0
 8007732:	d103      	bne.n	800773c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800773a:	e029      	b.n	8007790 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1a2      	bne.n	800768c <HAL_SPI_TransmitReceive+0x224>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d19d      	bne.n	800768c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f8f9 	bl	800794c <SPI_EndRxTxTransaction>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d006      	beq.n	800776e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2220      	movs	r2, #32
 800776a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800776c:	e010      	b.n	8007790 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	617b      	str	r3, [r7, #20]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	e000      	b.n	8007790 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800778e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3730      	adds	r7, #48	; 0x30
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	4613      	mov	r3, r2
 80077ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077bc:	e04c      	b.n	8007858 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d048      	beq.n	8007858 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077c6:	f7fb fab1 	bl	8002d2c <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d902      	bls.n	80077dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d13d      	bne.n	8007858 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f4:	d111      	bne.n	800781a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077fe:	d004      	beq.n	800780a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007808:	d107      	bne.n	800781a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007822:	d10f      	bne.n	8007844 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007842:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e00f      	b.n	8007878 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	429a      	cmp	r2, r3
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	429a      	cmp	r2, r3
 8007874:	d1a3      	bne.n	80077be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af02      	add	r7, sp, #8
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007894:	d111      	bne.n	80078ba <SPI_EndRxTransaction+0x3a>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800789e:	d004      	beq.n	80078aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078a8:	d107      	bne.n	80078ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078c2:	d12a      	bne.n	800791a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078cc:	d012      	beq.n	80078f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	2180      	movs	r1, #128	; 0x80
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff ff67 	bl	80077ac <SPI_WaitFlagStateUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d02d      	beq.n	8007940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e026      	b.n	8007942 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2200      	movs	r2, #0
 80078fc:	2101      	movs	r1, #1
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f7ff ff54 	bl	80077ac <SPI_WaitFlagStateUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01a      	beq.n	8007940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e013      	b.n	8007942 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2200      	movs	r2, #0
 8007922:	2101      	movs	r1, #1
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff ff41 	bl	80077ac <SPI_WaitFlagStateUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d007      	beq.n	8007940 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e000      	b.n	8007942 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
	...

0800794c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b088      	sub	sp, #32
 8007950:	af02      	add	r7, sp, #8
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007958:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <SPI_EndRxTxTransaction+0x7c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1b      	ldr	r2, [pc, #108]	; (80079cc <SPI_EndRxTxTransaction+0x80>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	0d5b      	lsrs	r3, r3, #21
 8007964:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007968:	fb02 f303 	mul.w	r3, r2, r3
 800796c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007976:	d112      	bne.n	800799e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2200      	movs	r2, #0
 8007980:	2180      	movs	r1, #128	; 0x80
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff ff12 	bl	80077ac <SPI_WaitFlagStateUntilTimeout>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d016      	beq.n	80079bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e00f      	b.n	80079be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b4:	2b80      	cmp	r3, #128	; 0x80
 80079b6:	d0f2      	beq.n	800799e <SPI_EndRxTxTransaction+0x52>
 80079b8:	e000      	b.n	80079bc <SPI_EndRxTxTransaction+0x70>
        break;
 80079ba:	bf00      	nop
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	2000000c 	.word	0x2000000c
 80079cc:	165e9f81 	.word	0x165e9f81

080079d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e01d      	b.n	8007a1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d106      	bne.n	80079fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f815 	bl	8007a26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2202      	movs	r2, #2
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4610      	mov	r0, r2
 8007a10:	f000 f9f2 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b083      	sub	sp, #12
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68da      	ldr	r2, [r3, #12]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 0307 	and.w	r3, r3, #7
 8007a5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d007      	beq.n	8007a74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f042 0201 	orr.w	r2, r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d101      	bne.n	8007a94 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e01d      	b.n	8007ad0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fa fa8f 	bl	8001fcc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f000 f999 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3708      	adds	r7, #8
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d122      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d11b      	bne.n	8007b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0202 	mvn.w	r2, #2
 8007b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f94e 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 8007b20:	e005      	b.n	8007b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f940 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f951 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d122      	bne.n	8007b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d11b      	bne.n	8007b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f06f 0204 	mvn.w	r2, #4
 8007b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f924 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 8007b74:	e005      	b.n	8007b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f916 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f927 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	f003 0308 	and.w	r3, r3, #8
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d122      	bne.n	8007bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d11b      	bne.n	8007bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f06f 0208 	mvn.w	r2, #8
 8007bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2204      	movs	r2, #4
 8007bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8fa 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 8007bc8:	e005      	b.n	8007bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8ec 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8fd 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	f003 0310 	and.w	r3, r3, #16
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	d122      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f003 0310 	and.w	r3, r3, #16
 8007bf4:	2b10      	cmp	r3, #16
 8007bf6:	d11b      	bne.n	8007c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f06f 0210 	mvn.w	r2, #16
 8007c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2208      	movs	r2, #8
 8007c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8d0 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 8007c1c:	e005      	b.n	8007c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f8c2 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f8d3 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d10e      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d107      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f06f 0201 	mvn.w	r2, #1
 8007c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7f9 fece 	bl	80019f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d10e      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c74:	2b80      	cmp	r3, #128	; 0x80
 8007c76:	d107      	bne.n	8007c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fb8e 	bl	80083a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c92:	2b40      	cmp	r3, #64	; 0x40
 8007c94:	d10e      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca0:	2b40      	cmp	r3, #64	; 0x40
 8007ca2:	d107      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f898 	bl	8007de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	d10e      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	d107      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0220 	mvn.w	r2, #32
 8007cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb58 	bl	8008390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d101      	bne.n	8007d02 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007cfe:	2302      	movs	r3, #2
 8007d00:	e04e      	b.n	8007da0 <HAL_TIM_OC_ConfigChannel+0xb8>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b0c      	cmp	r3, #12
 8007d16:	d839      	bhi.n	8007d8c <HAL_TIM_OC_ConfigChannel+0xa4>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d55 	.word	0x08007d55
 8007d24:	08007d8d 	.word	0x08007d8d
 8007d28:	08007d8d 	.word	0x08007d8d
 8007d2c:	08007d8d 	.word	0x08007d8d
 8007d30:	08007d63 	.word	0x08007d63
 8007d34:	08007d8d 	.word	0x08007d8d
 8007d38:	08007d8d 	.word	0x08007d8d
 8007d3c:	08007d8d 	.word	0x08007d8d
 8007d40:	08007d71 	.word	0x08007d71
 8007d44:	08007d8d 	.word	0x08007d8d
 8007d48:	08007d8d 	.word	0x08007d8d
 8007d4c:	08007d8d 	.word	0x08007d8d
 8007d50:	08007d7f 	.word	0x08007d7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 f8ec 	bl	8007f38 <TIM_OC1_SetConfig>
      break;
 8007d60:	e015      	b.n	8007d8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68b9      	ldr	r1, [r7, #8]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 f955 	bl	8008018 <TIM_OC2_SetConfig>
      break;
 8007d6e:	e00e      	b.n	8007d8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68b9      	ldr	r1, [r7, #8]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 f9c4 	bl	8008104 <TIM_OC3_SetConfig>
      break;
 8007d7c:	e007      	b.n	8007d8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fa31 	bl	80081ec <TIM_OC4_SetConfig>
      break;
 8007d8a:	e000      	b.n	8007d8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007d8c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a40      	ldr	r2, [pc, #256]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e16:	d00f      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <TIM_Base_SetConfig+0x118>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00b      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3c      	ldr	r2, [pc, #240]	; (8007f14 <TIM_Base_SetConfig+0x11c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d007      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3b      	ldr	r2, [pc, #236]	; (8007f18 <TIM_Base_SetConfig+0x120>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3a      	ldr	r2, [pc, #232]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d108      	bne.n	8007e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e58:	d027      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2c      	ldr	r2, [pc, #176]	; (8007f10 <TIM_Base_SetConfig+0x118>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d023      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2b      	ldr	r2, [pc, #172]	; (8007f14 <TIM_Base_SetConfig+0x11c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <TIM_Base_SetConfig+0x120>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a29      	ldr	r2, [pc, #164]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d017      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <TIM_Base_SetConfig+0x128>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a27      	ldr	r2, [pc, #156]	; (8007f24 <TIM_Base_SetConfig+0x12c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00f      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <TIM_Base_SetConfig+0x130>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <TIM_Base_SetConfig+0x134>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <TIM_Base_SetConfig+0x138>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <TIM_Base_SetConfig+0x13c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0xf8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d103      	bne.n	8007ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	615a      	str	r2, [r3, #20]
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800
 8007f18:	40000c00 	.word	0x40000c00
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40014400 	.word	0x40014400
 8007f28:	40014800 	.word	0x40014800
 8007f2c:	40001800 	.word	0x40001800
 8007f30:	40001c00 	.word	0x40001c00
 8007f34:	40002000 	.word	0x40002000

08007f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f023 0302 	bic.w	r3, r3, #2
 8007f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <TIM_OC1_SetConfig+0xd8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_OC1_SetConfig+0x64>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a1f      	ldr	r2, [pc, #124]	; (8008014 <TIM_OC1_SetConfig+0xdc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d10c      	bne.n	8007fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0308 	bic.w	r3, r3, #8
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 0304 	bic.w	r3, r3, #4
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a15      	ldr	r2, [pc, #84]	; (8008010 <TIM_OC1_SetConfig+0xd8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_OC1_SetConfig+0x8e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a14      	ldr	r2, [pc, #80]	; (8008014 <TIM_OC1_SetConfig+0xdc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d111      	bne.n	8007fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40010000 	.word	0x40010000
 8008014:	40010400 	.word	0x40010400

08008018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f023 0210 	bic.w	r2, r3, #16
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800804e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0320 	bic.w	r3, r3, #32
 8008062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <TIM_OC2_SetConfig+0xe4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC2_SetConfig+0x68>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a21      	ldr	r2, [pc, #132]	; (8008100 <TIM_OC2_SetConfig+0xe8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10d      	bne.n	800809c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC2_SetConfig+0xe4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC2_SetConfig+0x94>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a16      	ldr	r2, [pc, #88]	; (8008100 <TIM_OC2_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d113      	bne.n	80080d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40010000 	.word	0x40010000
 8008100:	40010400 	.word	0x40010400

08008104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800814c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <TIM_OC3_SetConfig+0xe0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_OC3_SetConfig+0x66>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a20      	ldr	r2, [pc, #128]	; (80081e8 <TIM_OC3_SetConfig+0xe4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d10d      	bne.n	8008186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <TIM_OC3_SetConfig+0xe0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d003      	beq.n	8008196 <TIM_OC3_SetConfig+0x92>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <TIM_OC3_SetConfig+0xe4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d113      	bne.n	80081be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800819c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	621a      	str	r2, [r3, #32]
}
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a12      	ldr	r2, [pc, #72]	; (8008290 <TIM_OC4_SetConfig+0xa4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC4_SetConfig+0x68>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a11      	ldr	r2, [pc, #68]	; (8008294 <TIM_OC4_SetConfig+0xa8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d109      	bne.n	8008268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800825a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40010000 	.word	0x40010000
 8008294:	40010400 	.word	0x40010400

08008298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e05a      	b.n	8008366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a21      	ldr	r2, [pc, #132]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d022      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082fc:	d01d      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1d      	ldr	r2, [pc, #116]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d018      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1b      	ldr	r2, [pc, #108]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1a      	ldr	r2, [pc, #104]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00e      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a18      	ldr	r2, [pc, #96]	; (8008384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d009      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a17      	ldr	r2, [pc, #92]	; (8008388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d004      	beq.n	800833a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a15      	ldr	r2, [pc, #84]	; (800838c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10c      	bne.n	8008354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	4313      	orrs	r3, r2
 800834a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40010000 	.word	0x40010000
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40000c00 	.word	0x40000c00
 8008384:	40010400 	.word	0x40010400
 8008388:	40014000 	.word	0x40014000
 800838c:	40001800 	.word	0x40001800

08008390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083ac:	bf00      	nop
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d029      	beq.n	8008426 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80083de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083e2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80083ec:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80083f2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80083f8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80083fe:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008404:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800840a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008410:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008416:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	e034      	b.n	8008490 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008432:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800843c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008442:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008456:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800845a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008464:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800846a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008470:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008476:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800847c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	4313      	orrs	r3, r2
 8008482:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800849e:	b480      	push	{r7}
 80084a0:	b087      	sub	sp, #28
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	60f8      	str	r0, [r7, #12]
 80084a6:	60b9      	str	r1, [r7, #8]
 80084a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d02e      	beq.n	8008516 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80084c4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80084d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	3b01      	subs	r3, #1
 80084dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80084de:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80084e8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80084f2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	695b      	ldr	r3, [r3, #20]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80084fc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	3b01      	subs	r3, #1
 8008504:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008506:	4313      	orrs	r3, r2
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	e03b      	b.n	800858e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008526:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	3b01      	subs	r3, #1
 800852e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	3b01      	subs	r3, #1
 8008536:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008538:	4313      	orrs	r3, r2
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800854c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	3b01      	subs	r3, #1
 800855a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800855c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	3b01      	subs	r3, #1
 8008564:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008566:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	3b01      	subs	r3, #1
 800856e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008570:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	3b01      	subs	r3, #1
 8008578:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800857a:	4313      	orrs	r3, r2
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	4313      	orrs	r3, r2
 8008580:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80085b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	3b01      	subs	r3, #1
 80085c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80085c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80085d4:	f7fa fbaa 	bl	8002d2c <HAL_GetTick>
 80085d8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80085da:	e010      	b.n	80085fe <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e2:	d00c      	beq.n	80085fe <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <FMC_SDRAM_SendCommand+0x5e>
 80085ea:	f7fa fb9f 	bl	8002d2c <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d201      	bcs.n	80085fe <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e006      	b.n	800860c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b20      	cmp	r3, #32
 8008608:	d0e8      	beq.n	80085dc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	695a      	ldr	r2, [r3, #20]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800863a:	b480      	push	{r7}
 800863c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800863e:	bf00      	nop
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800864e:	f3ef 8305 	mrs	r3, IPSR
 8008652:	60bb      	str	r3, [r7, #8]
  return(result);
 8008654:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008656:	2b00      	cmp	r3, #0
 8008658:	d10f      	bne.n	800867a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865a:	f3ef 8310 	mrs	r3, PRIMASK
 800865e:	607b      	str	r3, [r7, #4]
  return(result);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d105      	bne.n	8008672 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008666:	f3ef 8311 	mrs	r3, BASEPRI
 800866a:	603b      	str	r3, [r7, #0]
  return(result);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d007      	beq.n	8008682 <osKernelInitialize+0x3a>
 8008672:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <osKernelInitialize+0x64>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2b02      	cmp	r3, #2
 8008678:	d103      	bne.n	8008682 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800867a:	f06f 0305 	mvn.w	r3, #5
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e00c      	b.n	800869c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008682:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <osKernelInitialize+0x64>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800868a:	4b08      	ldr	r3, [pc, #32]	; (80086ac <osKernelInitialize+0x64>)
 800868c:	2201      	movs	r2, #1
 800868e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008690:	2300      	movs	r3, #0
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e002      	b.n	800869c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008696:	f04f 33ff 	mov.w	r3, #4294967295
 800869a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800869c:	68fb      	ldr	r3, [r7, #12]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3714      	adds	r7, #20
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	200001b0 	.word	0x200001b0

080086b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086b6:	f3ef 8305 	mrs	r3, IPSR
 80086ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80086bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10f      	bne.n	80086e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c2:	f3ef 8310 	mrs	r3, PRIMASK
 80086c6:	607b      	str	r3, [r7, #4]
  return(result);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80086ce:	f3ef 8311 	mrs	r3, BASEPRI
 80086d2:	603b      	str	r3, [r7, #0]
  return(result);
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d007      	beq.n	80086ea <osKernelStart+0x3a>
 80086da:	4b0f      	ldr	r3, [pc, #60]	; (8008718 <osKernelStart+0x68>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d103      	bne.n	80086ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80086e2:	f06f 0305 	mvn.w	r3, #5
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	e010      	b.n	800870c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086ea:	4b0b      	ldr	r3, [pc, #44]	; (8008718 <osKernelStart+0x68>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d109      	bne.n	8008706 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086f2:	f7ff ffa2 	bl	800863a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086f6:	4b08      	ldr	r3, [pc, #32]	; (8008718 <osKernelStart+0x68>)
 80086f8:	2202      	movs	r2, #2
 80086fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086fc:	f001 fe54 	bl	800a3a8 <vTaskStartScheduler>
      stat = osOK;
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e002      	b.n	800870c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008706:	f04f 33ff 	mov.w	r3, #4294967295
 800870a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800870c:	68fb      	ldr	r3, [r7, #12]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200001b0 	.word	0x200001b0

0800871c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800871c:	b580      	push	{r7, lr}
 800871e:	b090      	sub	sp, #64	; 0x40
 8008720:	af04      	add	r7, sp, #16
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008728:	2300      	movs	r3, #0
 800872a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800872c:	f3ef 8305 	mrs	r3, IPSR
 8008730:	61fb      	str	r3, [r7, #28]
  return(result);
 8008732:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008734:	2b00      	cmp	r3, #0
 8008736:	f040 808f 	bne.w	8008858 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800873a:	f3ef 8310 	mrs	r3, PRIMASK
 800873e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008746:	f3ef 8311 	mrs	r3, BASEPRI
 800874a:	617b      	str	r3, [r7, #20]
  return(result);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <osThreadNew+0x3e>
 8008752:	4b44      	ldr	r3, [pc, #272]	; (8008864 <osThreadNew+0x148>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b02      	cmp	r3, #2
 8008758:	d07e      	beq.n	8008858 <osThreadNew+0x13c>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d07b      	beq.n	8008858 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008760:	2380      	movs	r3, #128	; 0x80
 8008762:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008764:	2318      	movs	r3, #24
 8008766:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008768:	2300      	movs	r3, #0
 800876a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800876c:	f04f 33ff 	mov.w	r3, #4294967295
 8008770:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d045      	beq.n	8008804 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <osThreadNew+0x6a>
        name = attr->name;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	2b00      	cmp	r3, #0
 8008798:	d008      	beq.n	80087ac <osThreadNew+0x90>
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	2b38      	cmp	r3, #56	; 0x38
 800879e:	d805      	bhi.n	80087ac <osThreadNew+0x90>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <osThreadNew+0x94>
        return (NULL);
 80087ac:	2300      	movs	r3, #0
 80087ae:	e054      	b.n	800885a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	089b      	lsrs	r3, r3, #2
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00e      	beq.n	80087e6 <osThreadNew+0xca>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	2b5f      	cmp	r3, #95	; 0x5f
 80087ce:	d90a      	bls.n	80087e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d006      	beq.n	80087e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <osThreadNew+0xca>
        mem = 1;
 80087e0:	2301      	movs	r3, #1
 80087e2:	623b      	str	r3, [r7, #32]
 80087e4:	e010      	b.n	8008808 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d10c      	bne.n	8008808 <osThreadNew+0xec>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d108      	bne.n	8008808 <osThreadNew+0xec>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <osThreadNew+0xec>
          mem = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	623b      	str	r3, [r7, #32]
 8008802:	e001      	b.n	8008808 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d110      	bne.n	8008830 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008816:	9202      	str	r2, [sp, #8]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f001 fbeb 	bl	800a000 <xTaskCreateStatic>
 800882a:	4603      	mov	r3, r0
 800882c:	613b      	str	r3, [r7, #16]
 800882e:	e013      	b.n	8008858 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d110      	bne.n	8008858 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008838:	b29a      	uxth	r2, r3
 800883a:	f107 0310 	add.w	r3, r7, #16
 800883e:	9301      	str	r3, [sp, #4]
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f001 fc33 	bl	800a0b4 <xTaskCreate>
 800884e:	4603      	mov	r3, r0
 8008850:	2b01      	cmp	r3, #1
 8008852:	d001      	beq.n	8008858 <osThreadNew+0x13c>
          hTask = NULL;
 8008854:	2300      	movs	r3, #0
 8008856:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008858:	693b      	ldr	r3, [r7, #16]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3730      	adds	r7, #48	; 0x30
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200001b0 	.word	0x200001b0

08008868 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008870:	f3ef 8305 	mrs	r3, IPSR
 8008874:	613b      	str	r3, [r7, #16]
  return(result);
 8008876:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10f      	bne.n	800889c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800887c:	f3ef 8310 	mrs	r3, PRIMASK
 8008880:	60fb      	str	r3, [r7, #12]
  return(result);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d105      	bne.n	8008894 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008888:	f3ef 8311 	mrs	r3, BASEPRI
 800888c:	60bb      	str	r3, [r7, #8]
  return(result);
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <osDelay+0x3c>
 8008894:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <osDelay+0x58>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d103      	bne.n	80088a4 <osDelay+0x3c>
    stat = osErrorISR;
 800889c:	f06f 0305 	mvn.w	r3, #5
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	e007      	b.n	80088b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fd46 	bl	800a340 <vTaskDelay>
    }
  }

  return (stat);
 80088b4:	697b      	ldr	r3, [r7, #20]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	200001b0 	.word	0x200001b0

080088c4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80088d0:	2300      	movs	r3, #0
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088d4:	f3ef 8305 	mrs	r3, IPSR
 80088d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80088da:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8087 	bne.w	80089f0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e2:	f3ef 8310 	mrs	r3, PRIMASK
 80088e6:	617b      	str	r3, [r7, #20]
  return(result);
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d105      	bne.n	80088fa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088ee:	f3ef 8311 	mrs	r3, BASEPRI
 80088f2:	613b      	str	r3, [r7, #16]
  return(result);
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <osSemaphoreNew+0x3e>
 80088fa:	4b40      	ldr	r3, [pc, #256]	; (80089fc <osSemaphoreNew+0x138>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d076      	beq.n	80089f0 <osSemaphoreNew+0x12c>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d073      	beq.n	80089f0 <osSemaphoreNew+0x12c>
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d86f      	bhi.n	80089f0 <osSemaphoreNew+0x12c>
    mem = -1;
 8008910:	f04f 33ff 	mov.w	r3, #4294967295
 8008914:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d015      	beq.n	8008948 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d006      	beq.n	8008932 <osSemaphoreNew+0x6e>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	2b4f      	cmp	r3, #79	; 0x4f
 800892a:	d902      	bls.n	8008932 <osSemaphoreNew+0x6e>
        mem = 1;
 800892c:	2301      	movs	r3, #1
 800892e:	623b      	str	r3, [r7, #32]
 8008930:	e00c      	b.n	800894c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d108      	bne.n	800894c <osSemaphoreNew+0x88>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <osSemaphoreNew+0x88>
          mem = 0;
 8008942:	2300      	movs	r3, #0
 8008944:	623b      	str	r3, [r7, #32]
 8008946:	e001      	b.n	800894c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d04d      	beq.n	80089f0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d129      	bne.n	80089ae <osSemaphoreNew+0xea>
        if (mem == 1) {
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d10b      	bne.n	8008978 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	2303      	movs	r3, #3
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	2001      	movs	r0, #1
 8008970:	f000 fbc0 	bl	80090f4 <xQueueGenericCreateStatic>
 8008974:	6278      	str	r0, [r7, #36]	; 0x24
 8008976:	e005      	b.n	8008984 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008978:	2203      	movs	r2, #3
 800897a:	2100      	movs	r1, #0
 800897c:	2001      	movs	r0, #1
 800897e:	f000 fc2c 	bl	80091da <xQueueGenericCreate>
 8008982:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	d022      	beq.n	80089d0 <osSemaphoreNew+0x10c>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d01f      	beq.n	80089d0 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008998:	f000 fce8 	bl	800936c <xQueueGenericSend>
 800899c:	4603      	mov	r3, r0
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d016      	beq.n	80089d0 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80089a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089a4:	f001 f95b 	bl	8009c5e <vQueueDelete>
            hSemaphore = NULL;
 80089a8:	2300      	movs	r3, #0
 80089aa:	627b      	str	r3, [r7, #36]	; 0x24
 80089ac:	e010      	b.n	80089d0 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d108      	bne.n	80089c6 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	461a      	mov	r2, r3
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f000 fc6e 	bl	800929e <xQueueCreateCountingSemaphoreStatic>
 80089c2:	6278      	str	r0, [r7, #36]	; 0x24
 80089c4:	e004      	b.n	80089d0 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fc9d 	bl	8009308 <xQueueCreateCountingSemaphore>
 80089ce:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00c      	beq.n	80089f0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <osSemaphoreNew+0x120>
          name = attr->name;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	e001      	b.n	80089e8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80089e4:	2300      	movs	r3, #0
 80089e6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ec:	f001 fa82 	bl	8009ef4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3728      	adds	r7, #40	; 0x28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200001b0 	.word	0x200001b0

08008a00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d103      	bne.n	8008a20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008a18:	f06f 0303 	mvn.w	r3, #3
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	e04b      	b.n	8008ab8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a20:	f3ef 8305 	mrs	r3, IPSR
 8008a24:	617b      	str	r3, [r7, #20]
  return(result);
 8008a26:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10f      	bne.n	8008a4c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a30:	613b      	str	r3, [r7, #16]
  return(result);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a38:	f3ef 8311 	mrs	r3, BASEPRI
 8008a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d026      	beq.n	8008a92 <osSemaphoreAcquire+0x92>
 8008a44:	4b1f      	ldr	r3, [pc, #124]	; (8008ac4 <osSemaphoreAcquire+0xc4>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d122      	bne.n	8008a92 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008a52:	f06f 0303 	mvn.w	r3, #3
 8008a56:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a58:	e02d      	b.n	8008ab6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008a5e:	f107 0308 	add.w	r3, r7, #8
 8008a62:	461a      	mov	r2, r3
 8008a64:	2100      	movs	r1, #0
 8008a66:	69b8      	ldr	r0, [r7, #24]
 8008a68:	f001 f87c 	bl	8009b64 <xQueueReceiveFromISR>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d003      	beq.n	8008a7a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008a72:	f06f 0302 	mvn.w	r3, #2
 8008a76:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a78:	e01d      	b.n	8008ab6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01a      	beq.n	8008ab6 <osSemaphoreAcquire+0xb6>
 8008a80:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <osSemaphoreAcquire+0xc8>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008a90:	e011      	b.n	8008ab6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	69b8      	ldr	r0, [r7, #24]
 8008a96:	f000 ff5d 	bl	8009954 <xQueueSemaphoreTake>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d00b      	beq.n	8008ab8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008aa6:	f06f 0301 	mvn.w	r3, #1
 8008aaa:	61fb      	str	r3, [r7, #28]
 8008aac:	e004      	b.n	8008ab8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008aae:	f06f 0302 	mvn.w	r3, #2
 8008ab2:	61fb      	str	r3, [r7, #28]
 8008ab4:	e000      	b.n	8008ab8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008ab6:	bf00      	nop
      }
    }
  }

  return (stat);
 8008ab8:	69fb      	ldr	r3, [r7, #28]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3720      	adds	r7, #32
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200001b0 	.word	0x200001b0
 8008ac8:	e000ed04 	.word	0xe000ed04

08008acc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d103      	bne.n	8008aea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008ae2:	f06f 0303 	mvn.w	r3, #3
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	e03e      	b.n	8008b68 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aea:	f3ef 8305 	mrs	r3, IPSR
 8008aee:	617b      	str	r3, [r7, #20]
  return(result);
 8008af0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10f      	bne.n	8008b16 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af6:	f3ef 8310 	mrs	r3, PRIMASK
 8008afa:	613b      	str	r3, [r7, #16]
  return(result);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d105      	bne.n	8008b0e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b02:	f3ef 8311 	mrs	r3, BASEPRI
 8008b06:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d01e      	beq.n	8008b4c <osSemaphoreRelease+0x80>
 8008b0e:	4b19      	ldr	r3, [pc, #100]	; (8008b74 <osSemaphoreRelease+0xa8>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d11a      	bne.n	8008b4c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b1a:	f107 0308 	add.w	r3, r7, #8
 8008b1e:	4619      	mov	r1, r3
 8008b20:	69b8      	ldr	r0, [r7, #24]
 8008b22:	f000 fdb1 	bl	8009688 <xQueueGiveFromISR>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d003      	beq.n	8008b34 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008b2c:	f06f 0302 	mvn.w	r3, #2
 8008b30:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b32:	e018      	b.n	8008b66 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d015      	beq.n	8008b66 <osSemaphoreRelease+0x9a>
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <osSemaphoreRelease+0xac>)
 8008b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b40:	601a      	str	r2, [r3, #0]
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b4a:	e00c      	b.n	8008b66 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2100      	movs	r1, #0
 8008b52:	69b8      	ldr	r0, [r7, #24]
 8008b54:	f000 fc0a 	bl	800936c <xQueueGenericSend>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d004      	beq.n	8008b68 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008b5e:	f06f 0302 	mvn.w	r3, #2
 8008b62:	61fb      	str	r3, [r7, #28]
 8008b64:	e000      	b.n	8008b68 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b66:	bf00      	nop
    }
  }

  return (stat);
 8008b68:	69fb      	ldr	r3, [r7, #28]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3720      	adds	r7, #32
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	200001b0 	.word	0x200001b0
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b08c      	sub	sp, #48	; 0x30
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b8c:	f3ef 8305 	mrs	r3, IPSR
 8008b90:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d170      	bne.n	8008c7a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b98:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d105      	bne.n	8008bb0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <osMessageQueueNew+0x3c>
 8008bb0:	4b34      	ldr	r3, [pc, #208]	; (8008c84 <osMessageQueueNew+0x108>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d060      	beq.n	8008c7a <osMessageQueueNew+0xfe>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d05d      	beq.n	8008c7a <osMessageQueueNew+0xfe>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d05a      	beq.n	8008c7a <osMessageQueueNew+0xfe>
    mem = -1;
 8008bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d029      	beq.n	8008c24 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d012      	beq.n	8008bfe <osMessageQueueNew+0x82>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b4f      	cmp	r3, #79	; 0x4f
 8008bde:	d90e      	bls.n	8008bfe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	695a      	ldr	r2, [r3, #20]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	fb01 f303 	mul.w	r3, r1, r3
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d302      	bcc.n	8008bfe <osMessageQueueNew+0x82>
        mem = 1;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	623b      	str	r3, [r7, #32]
 8008bfc:	e014      	b.n	8008c28 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d110      	bne.n	8008c28 <osMessageQueueNew+0xac>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10c      	bne.n	8008c28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d108      	bne.n	8008c28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d104      	bne.n	8008c28 <osMessageQueueNew+0xac>
          mem = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	623b      	str	r3, [r7, #32]
 8008c22:	e001      	b.n	8008c28 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008c28:	6a3b      	ldr	r3, [r7, #32]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d10c      	bne.n	8008c48 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	691a      	ldr	r2, [r3, #16]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6899      	ldr	r1, [r3, #8]
 8008c36:	2300      	movs	r3, #0
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fa58 	bl	80090f4 <xQueueGenericCreateStatic>
 8008c44:	6278      	str	r0, [r7, #36]	; 0x24
 8008c46:	e008      	b.n	8008c5a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008c4e:	2200      	movs	r2, #0
 8008c50:	68b9      	ldr	r1, [r7, #8]
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f000 fac1 	bl	80091da <xQueueGenericCreate>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00c      	beq.n	8008c7a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d003      	beq.n	8008c6e <osMessageQueueNew+0xf2>
        name = attr->name;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	61fb      	str	r3, [r7, #28]
 8008c6c:	e001      	b.n	8008c72 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c72:	69f9      	ldr	r1, [r7, #28]
 8008c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c76:	f001 f93d 	bl	8009ef4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3728      	adds	r7, #40	; 0x28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	200001b0 	.word	0x200001b0

08008c88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08a      	sub	sp, #40	; 0x28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca0:	f3ef 8305 	mrs	r3, IPSR
 8008ca4:	61fb      	str	r3, [r7, #28]
  return(result);
 8008ca6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10f      	bne.n	8008ccc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cac:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8008cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d02c      	beq.n	8008d1e <osMessageQueuePut+0x96>
 8008cc4:	4b28      	ldr	r3, [pc, #160]	; (8008d68 <osMessageQueuePut+0xe0>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d128      	bne.n	8008d1e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <osMessageQueuePut+0x56>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <osMessageQueuePut+0x56>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008cde:	f06f 0303 	mvn.w	r3, #3
 8008ce2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ce4:	e039      	b.n	8008d5a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008cea:	f107 0210 	add.w	r2, r7, #16
 8008cee:	2300      	movs	r3, #0
 8008cf0:	68b9      	ldr	r1, [r7, #8]
 8008cf2:	6a38      	ldr	r0, [r7, #32]
 8008cf4:	f000 fc34 	bl	8009560 <xQueueGenericSendFromISR>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d003      	beq.n	8008d06 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008cfe:	f06f 0302 	mvn.w	r3, #2
 8008d02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d04:	e029      	b.n	8008d5a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d026      	beq.n	8008d5a <osMessageQueuePut+0xd2>
 8008d0c:	4b17      	ldr	r3, [pc, #92]	; (8008d6c <osMessageQueuePut+0xe4>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	f3bf 8f4f 	dsb	sy
 8008d18:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d1c:	e01d      	b.n	8008d5a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <osMessageQueuePut+0xa2>
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d103      	bne.n	8008d32 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008d2a:	f06f 0303 	mvn.w	r3, #3
 8008d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d30:	e014      	b.n	8008d5c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d32:	2300      	movs	r3, #0
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	6a38      	ldr	r0, [r7, #32]
 8008d3a:	f000 fb17 	bl	800936c <xQueueGenericSend>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d00b      	beq.n	8008d5c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008d4a:	f06f 0301 	mvn.w	r3, #1
 8008d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d50:	e004      	b.n	8008d5c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008d52:	f06f 0302 	mvn.w	r3, #2
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
 8008d58:	e000      	b.n	8008d5c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3728      	adds	r7, #40	; 0x28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	200001b0 	.word	0x200001b0
 8008d6c:	e000ed04 	.word	0xe000ed04

08008d70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b08a      	sub	sp, #40	; 0x28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
 8008d7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d86:	f3ef 8305 	mrs	r3, IPSR
 8008d8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d8c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10f      	bne.n	8008db2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d92:	f3ef 8310 	mrs	r3, PRIMASK
 8008d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d105      	bne.n	8008daa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8008da2:	617b      	str	r3, [r7, #20]
  return(result);
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d02c      	beq.n	8008e04 <osMessageQueueGet+0x94>
 8008daa:	4b28      	ldr	r3, [pc, #160]	; (8008e4c <osMessageQueueGet+0xdc>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d128      	bne.n	8008e04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <osMessageQueueGet+0x54>
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <osMessageQueueGet+0x54>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008dc4:	f06f 0303 	mvn.w	r3, #3
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dca:	e038      	b.n	8008e3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008dd0:	f107 0310 	add.w	r3, r7, #16
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	68b9      	ldr	r1, [r7, #8]
 8008dd8:	6a38      	ldr	r0, [r7, #32]
 8008dda:	f000 fec3 	bl	8009b64 <xQueueReceiveFromISR>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d003      	beq.n	8008dec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008de4:	f06f 0302 	mvn.w	r3, #2
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dea:	e028      	b.n	8008e3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d025      	beq.n	8008e3e <osMessageQueueGet+0xce>
 8008df2:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <osMessageQueueGet+0xe0>)
 8008df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e02:	e01c      	b.n	8008e3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <osMessageQueueGet+0xa0>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008e10:	f06f 0303 	mvn.w	r3, #3
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
 8008e16:	e013      	b.n	8008e40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	6a38      	ldr	r0, [r7, #32]
 8008e1e:	f000 fcbd 	bl	800979c <xQueueReceive>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d00b      	beq.n	8008e40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008e2e:	f06f 0301 	mvn.w	r3, #1
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
 8008e34:	e004      	b.n	8008e40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008e36:	f06f 0302 	mvn.w	r3, #2
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3c:	e000      	b.n	8008e40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3728      	adds	r7, #40	; 0x28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200001b0 	.word	0x200001b0
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	4a06      	ldr	r2, [pc, #24]	; (8008e84 <vApplicationGetIdleTaskMemory+0x30>)
 8008e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2280      	movs	r2, #128	; 0x80
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	200001b4 	.word	0x200001b4
 8008e84:	20000214 	.word	0x20000214

08008e88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e88:	b480      	push	{r7}
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4a07      	ldr	r2, [pc, #28]	; (8008eb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	4a06      	ldr	r2, [pc, #24]	; (8008eb8 <vApplicationGetTimerTaskMemory+0x30>)
 8008e9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ea6:	601a      	str	r2, [r3, #0]
}
 8008ea8:	bf00      	nop
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	20000414 	.word	0x20000414
 8008eb8:	20000474 	.word	0x20000474

08008ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f103 0208 	add.w	r2, r3, #8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f103 0208 	add.w	r2, r3, #8
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f103 0208 	add.w	r2, r3, #8
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f16:	b480      	push	{r7}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68fa      	ldr	r2, [r7, #12]
 8008f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	689a      	ldr	r2, [r3, #8]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	683a      	ldr	r2, [r7, #0]
 8008f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	1c5a      	adds	r2, r3, #1
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	601a      	str	r2, [r3, #0]
}
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr

08008f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b085      	sub	sp, #20
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d103      	bne.n	8008f7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	e00c      	b.n	8008f98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3308      	adds	r3, #8
 8008f82:	60fb      	str	r3, [r7, #12]
 8008f84:	e002      	b.n	8008f8c <vListInsert+0x2e>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d2f6      	bcs.n	8008f86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	601a      	str	r2, [r3, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6892      	ldr	r2, [r2, #8]
 8008fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6852      	ldr	r2, [r2, #4]
 8008ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d103      	bne.n	8009004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689a      	ldr	r2, [r3, #8]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	1e5a      	subs	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d109      	bne.n	800904c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	e7fe      	b.n	800904a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800904c:	f002 fc26 	bl	800b89c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009058:	68f9      	ldr	r1, [r7, #12]
 800905a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800905c:	fb01 f303 	mul.w	r3, r1, r3
 8009060:	441a      	add	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	3b01      	subs	r3, #1
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009082:	fb01 f303 	mul.w	r3, r1, r3
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	22ff      	movs	r2, #255	; 0xff
 8009090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	22ff      	movs	r2, #255	; 0xff
 8009098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d114      	bne.n	80090cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01a      	beq.n	80090e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3310      	adds	r3, #16
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fbfa 	bl	800a8a8 <xTaskRemoveFromEventList>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d012      	beq.n	80090e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090ba:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <xQueueGenericReset+0xcc>)
 80090bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	e009      	b.n	80090e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3310      	adds	r3, #16
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7ff fef3 	bl	8008ebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	3324      	adds	r3, #36	; 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff feee 	bl	8008ebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090e0:	f002 fc0a 	bl	800b8f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090e4:	2301      	movs	r3, #1
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08e      	sub	sp, #56	; 0x38
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	60b9      	str	r1, [r7, #8]
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <xQueueGenericCreateStatic+0x28>
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	62bb      	str	r3, [r7, #40]	; 0x28
 800911a:	e7fe      	b.n	800911a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <xQueueGenericCreateStatic+0x42>
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
 8009134:	e7fe      	b.n	8009134 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <xQueueGenericCreateStatic+0x4e>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <xQueueGenericCreateStatic+0x52>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <xQueueGenericCreateStatic+0x54>
 8009146:	2300      	movs	r3, #0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <xQueueGenericCreateStatic+0x6c>
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	623b      	str	r3, [r7, #32]
 800915e:	e7fe      	b.n	800915e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d102      	bne.n	800916c <xQueueGenericCreateStatic+0x78>
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <xQueueGenericCreateStatic+0x7c>
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <xQueueGenericCreateStatic+0x7e>
 8009170:	2300      	movs	r3, #0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d109      	bne.n	800918a <xQueueGenericCreateStatic+0x96>
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	61fb      	str	r3, [r7, #28]
 8009188:	e7fe      	b.n	8009188 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800918a:	2350      	movs	r3, #80	; 0x50
 800918c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	2b50      	cmp	r3, #80	; 0x50
 8009192:	d009      	beq.n	80091a8 <xQueueGenericCreateStatic+0xb4>
 8009194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009198:	f383 8811 	msr	BASEPRI, r3
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	e7fe      	b.n	80091a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00d      	beq.n	80091d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4613      	mov	r3, r2
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	68b9      	ldr	r1, [r7, #8]
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f844 	bl	8009258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3730      	adds	r7, #48	; 0x30
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b08a      	sub	sp, #40	; 0x28
 80091de:	af02      	add	r7, sp, #8
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	4613      	mov	r3, r2
 80091e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d109      	bne.n	8009202 <xQueueGenericCreate+0x28>
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	e7fe      	b.n	8009200 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d102      	bne.n	800920e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009208:	2300      	movs	r3, #0
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	e004      	b.n	8009218 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	fb02 f303 	mul.w	r3, r2, r3
 8009216:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	3350      	adds	r3, #80	; 0x50
 800921c:	4618      	mov	r0, r3
 800921e:	f002 fc57 	bl	800bad0 <pvPortMalloc>
 8009222:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d011      	beq.n	800924e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	3350      	adds	r3, #80	; 0x50
 8009232:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800923c:	79fa      	ldrb	r2, [r7, #7]
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	4613      	mov	r3, r2
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	68b9      	ldr	r1, [r7, #8]
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 f805 	bl	8009258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800924e:	69bb      	ldr	r3, [r7, #24]
	}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
 8009264:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e002      	b.n	800927a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009286:	2101      	movs	r1, #1
 8009288:	69b8      	ldr	r0, [r7, #24]
 800928a:	f7ff fecb 	bl	8009024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009296:	bf00      	nop
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b08a      	sub	sp, #40	; 0x28
 80092a2:	af02      	add	r7, sp, #8
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d109      	bne.n	80092c4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	61bb      	str	r3, [r7, #24]
 80092c2:	e7fe      	b.n	80092c2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80092c4:	68ba      	ldr	r2, [r7, #8]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d909      	bls.n	80092e0 <xQueueCreateCountingSemaphoreStatic+0x42>
 80092cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d0:	f383 8811 	msr	BASEPRI, r3
 80092d4:	f3bf 8f6f 	isb	sy
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	617b      	str	r3, [r7, #20]
 80092de:	e7fe      	b.n	80092de <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80092e0:	2302      	movs	r3, #2
 80092e2:	9300      	str	r3, [sp, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	2100      	movs	r1, #0
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f7ff ff02 	bl	80090f4 <xQueueGenericCreateStatic>
 80092f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80092fe:	69fb      	ldr	r3, [r7, #28]
	}
 8009300:	4618      	mov	r0, r3
 8009302:	3720      	adds	r7, #32
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d109      	bne.n	800932c <xQueueCreateCountingSemaphore+0x24>
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	613b      	str	r3, [r7, #16]
 800932a:	e7fe      	b.n	800932a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	429a      	cmp	r2, r3
 8009332:	d909      	bls.n	8009348 <xQueueCreateCountingSemaphore+0x40>
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	e7fe      	b.n	8009346 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009348:	2202      	movs	r2, #2
 800934a:	2100      	movs	r1, #0
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7ff ff44 	bl	80091da <xQueueGenericCreate>
 8009352:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d002      	beq.n	8009360 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009360:	697b      	ldr	r3, [r7, #20]
	}
 8009362:	4618      	mov	r0, r3
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b08e      	sub	sp, #56	; 0x38
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800937a:	2300      	movs	r3, #0
 800937c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <xQueueGenericSend+0x30>
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28
 800939a:	e7fe      	b.n	800939a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d103      	bne.n	80093aa <xQueueGenericSend+0x3e>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <xQueueGenericSend+0x42>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <xQueueGenericSend+0x44>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d109      	bne.n	80093c8 <xQueueGenericSend+0x5c>
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
 80093c6:	e7fe      	b.n	80093c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d103      	bne.n	80093d6 <xQueueGenericSend+0x6a>
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d101      	bne.n	80093da <xQueueGenericSend+0x6e>
 80093d6:	2301      	movs	r3, #1
 80093d8:	e000      	b.n	80093dc <xQueueGenericSend+0x70>
 80093da:	2300      	movs	r3, #0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <xQueueGenericSend+0x88>
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	623b      	str	r3, [r7, #32]
 80093f2:	e7fe      	b.n	80093f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093f4:	f001 fc0e 	bl	800ac14 <xTaskGetSchedulerState>
 80093f8:	4603      	mov	r3, r0
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d102      	bne.n	8009404 <xQueueGenericSend+0x98>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d101      	bne.n	8009408 <xQueueGenericSend+0x9c>
 8009404:	2301      	movs	r3, #1
 8009406:	e000      	b.n	800940a <xQueueGenericSend+0x9e>
 8009408:	2300      	movs	r3, #0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <xQueueGenericSend+0xb6>
 800940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	61fb      	str	r3, [r7, #28]
 8009420:	e7fe      	b.n	8009420 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009422:	f002 fa3b 	bl	800b89c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942e:	429a      	cmp	r2, r3
 8009430:	d302      	bcc.n	8009438 <xQueueGenericSend+0xcc>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d129      	bne.n	800948c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800943e:	f000 fc48 	bl	8009cd2 <prvCopyDataToQueue>
 8009442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	3324      	adds	r3, #36	; 0x24
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fa29 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d013      	beq.n	8009484 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800945c:	4b3f      	ldr	r3, [pc, #252]	; (800955c <xQueueGenericSend+0x1f0>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	e00a      	b.n	8009484 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009474:	4b39      	ldr	r3, [pc, #228]	; (800955c <xQueueGenericSend+0x1f0>)
 8009476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009484:	f002 fa38 	bl	800b8f8 <vPortExitCritical>
				return pdPASS;
 8009488:	2301      	movs	r3, #1
 800948a:	e063      	b.n	8009554 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d103      	bne.n	800949a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009492:	f002 fa31 	bl	800b8f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009496:	2300      	movs	r3, #0
 8009498:	e05c      	b.n	8009554 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 fa61 	bl	800a96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094aa:	2301      	movs	r3, #1
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094ae:	f002 fa23 	bl	800b8f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094b2:	f000 ffdd 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094b6:	f002 f9f1 	bl	800b89c <vPortEnterCritical>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c0:	b25b      	sxtb	r3, r3
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c6:	d103      	bne.n	80094d0 <xQueueGenericSend+0x164>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d103      	bne.n	80094e6 <xQueueGenericSend+0x17a>
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094e6:	f002 fa07 	bl	800b8f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ea:	1d3a      	adds	r2, r7, #4
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fa50 	bl	800a998 <xTaskCheckForTimeOut>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d124      	bne.n	8009548 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009500:	f000 fcdf 	bl	8009ec2 <prvIsQueueFull>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d018      	beq.n	800953c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	3310      	adds	r3, #16
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f001 f97a 	bl	800a80c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800951a:	f000 fc6a 	bl	8009df2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800951e:	f000 ffb5 	bl	800a48c <xTaskResumeAll>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	f47f af7c 	bne.w	8009422 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <xQueueGenericSend+0x1f0>)
 800952c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	e772      	b.n	8009422 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800953c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800953e:	f000 fc58 	bl	8009df2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009542:	f000 ffa3 	bl	800a48c <xTaskResumeAll>
 8009546:	e76c      	b.n	8009422 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954a:	f000 fc52 	bl	8009df2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800954e:	f000 ff9d 	bl	800a48c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009554:	4618      	mov	r0, r3
 8009556:	3738      	adds	r7, #56	; 0x38
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	e000ed04 	.word	0xe000ed04

08009560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b08e      	sub	sp, #56	; 0x38
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009574:	2b00      	cmp	r3, #0
 8009576:	d109      	bne.n	800958c <xQueueGenericSendFromISR+0x2c>
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
 800958a:	e7fe      	b.n	800958a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d103      	bne.n	800959a <xQueueGenericSendFromISR+0x3a>
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <xQueueGenericSendFromISR+0x3e>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <xQueueGenericSendFromISR+0x40>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d109      	bne.n	80095b8 <xQueueGenericSendFromISR+0x58>
 80095a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	623b      	str	r3, [r7, #32]
 80095b6:	e7fe      	b.n	80095b6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d103      	bne.n	80095c6 <xQueueGenericSendFromISR+0x66>
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d101      	bne.n	80095ca <xQueueGenericSendFromISR+0x6a>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <xQueueGenericSendFromISR+0x6c>
 80095ca:	2300      	movs	r3, #0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d109      	bne.n	80095e4 <xQueueGenericSendFromISR+0x84>
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	e7fe      	b.n	80095e2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095e4:	f002 fa36 	bl	800ba54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095e8:	f3ef 8211 	mrs	r2, BASEPRI
 80095ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	61ba      	str	r2, [r7, #24]
 80095fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009600:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800960c:	429a      	cmp	r2, r3
 800960e:	d302      	bcc.n	8009616 <xQueueGenericSendFromISR+0xb6>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	2b02      	cmp	r3, #2
 8009614:	d12c      	bne.n	8009670 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800961c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	68b9      	ldr	r1, [r7, #8]
 8009624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009626:	f000 fb54 	bl	8009cd2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800962a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009632:	d112      	bne.n	800965a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d016      	beq.n	800966a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	3324      	adds	r3, #36	; 0x24
 8009640:	4618      	mov	r0, r3
 8009642:	f001 f931 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00b      	beq.n	800966a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e007      	b.n	800966a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800965a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800965e:	3301      	adds	r3, #1
 8009660:	b2db      	uxtb	r3, r3
 8009662:	b25a      	sxtb	r2, r3
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800966a:	2301      	movs	r3, #1
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800966e:	e001      	b.n	8009674 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009670:	2300      	movs	r3, #0
 8009672:	637b      	str	r3, [r7, #52]	; 0x34
 8009674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009676:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009680:	4618      	mov	r0, r3
 8009682:	3738      	adds	r7, #56	; 0x38
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08e      	sub	sp, #56	; 0x38
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	623b      	str	r3, [r7, #32]
 80096ae:	e7fe      	b.n	80096ae <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d009      	beq.n	80096cc <xQueueGiveFromISR+0x44>
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e7fe      	b.n	80096ca <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d103      	bne.n	80096dc <xQueueGiveFromISR+0x54>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <xQueueGiveFromISR+0x58>
 80096dc:	2301      	movs	r3, #1
 80096de:	e000      	b.n	80096e2 <xQueueGiveFromISR+0x5a>
 80096e0:	2300      	movs	r3, #0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <xQueueGiveFromISR+0x72>
 80096e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	61bb      	str	r3, [r7, #24]
 80096f8:	e7fe      	b.n	80096f8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096fa:	f002 f9ab 	bl	800ba54 <vPortValidateInterruptPriority>
	__asm volatile
 80096fe:	f3ef 8211 	mrs	r2, BASEPRI
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	617a      	str	r2, [r7, #20]
 8009714:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009716:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009718:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009726:	429a      	cmp	r2, r3
 8009728:	d22b      	bcs.n	8009782 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	1c5a      	adds	r2, r3, #1
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800973c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009744:	d112      	bne.n	800976c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d016      	beq.n	800977c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	3324      	adds	r3, #36	; 0x24
 8009752:	4618      	mov	r0, r3
 8009754:	f001 f8a8 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00e      	beq.n	800977c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2201      	movs	r2, #1
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	e007      	b.n	800977c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009770:	3301      	adds	r3, #1
 8009772:	b2db      	uxtb	r3, r3
 8009774:	b25a      	sxtb	r2, r3
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800977c:	2301      	movs	r3, #1
 800977e:	637b      	str	r3, [r7, #52]	; 0x34
 8009780:	e001      	b.n	8009786 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009782:	2300      	movs	r3, #0
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009792:	4618      	mov	r0, r3
 8009794:	3738      	adds	r7, #56	; 0x38
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08c      	sub	sp, #48	; 0x30
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097a8:	2300      	movs	r3, #0
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <xQueueReceive+0x2e>
	__asm volatile
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	623b      	str	r3, [r7, #32]
 80097c8:	e7fe      	b.n	80097c8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <xQueueReceive+0x3c>
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d101      	bne.n	80097dc <xQueueReceive+0x40>
 80097d8:	2301      	movs	r3, #1
 80097da:	e000      	b.n	80097de <xQueueReceive+0x42>
 80097dc:	2300      	movs	r3, #0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d109      	bne.n	80097f6 <xQueueReceive+0x5a>
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	61fb      	str	r3, [r7, #28]
 80097f4:	e7fe      	b.n	80097f4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097f6:	f001 fa0d 	bl	800ac14 <xTaskGetSchedulerState>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <xQueueReceive+0x6a>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <xQueueReceive+0x6e>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <xQueueReceive+0x70>
 800980a:	2300      	movs	r3, #0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d109      	bne.n	8009824 <xQueueReceive+0x88>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	61bb      	str	r3, [r7, #24]
 8009822:	e7fe      	b.n	8009822 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009824:	f002 f83a 	bl	800b89c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	2b00      	cmp	r3, #0
 8009832:	d01f      	beq.n	8009874 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009838:	f000 fab5 	bl	8009da6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	1e5a      	subs	r2, r3, #1
 8009840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009842:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00f      	beq.n	800986c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	3310      	adds	r3, #16
 8009850:	4618      	mov	r0, r3
 8009852:	f001 f829 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d007      	beq.n	800986c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800985c:	4b3c      	ldr	r3, [pc, #240]	; (8009950 <xQueueReceive+0x1b4>)
 800985e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800986c:	f002 f844 	bl	800b8f8 <vPortExitCritical>
				return pdPASS;
 8009870:	2301      	movs	r3, #1
 8009872:	e069      	b.n	8009948 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d103      	bne.n	8009882 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800987a:	f002 f83d 	bl	800b8f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800987e:	2300      	movs	r3, #0
 8009880:	e062      	b.n	8009948 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	2b00      	cmp	r3, #0
 8009886:	d106      	bne.n	8009896 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009888:	f107 0310 	add.w	r3, r7, #16
 800988c:	4618      	mov	r0, r3
 800988e:	f001 f86d 	bl	800a96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009892:	2301      	movs	r3, #1
 8009894:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009896:	f002 f82f 	bl	800b8f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800989a:	f000 fde9 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800989e:	f001 fffd 	bl	800b89c <vPortEnterCritical>
 80098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d103      	bne.n	80098b8 <xQueueReceive+0x11c>
 80098b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098be:	b25b      	sxtb	r3, r3
 80098c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c4:	d103      	bne.n	80098ce <xQueueReceive+0x132>
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ce:	f002 f813 	bl	800b8f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098d2:	1d3a      	adds	r2, r7, #4
 80098d4:	f107 0310 	add.w	r3, r7, #16
 80098d8:	4611      	mov	r1, r2
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 f85c 	bl	800a998 <xTaskCheckForTimeOut>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d123      	bne.n	800992e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e8:	f000 fad5 	bl	8009e96 <prvIsQueueEmpty>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d017      	beq.n	8009922 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	3324      	adds	r3, #36	; 0x24
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 ff86 	bl	800a80c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009902:	f000 fa76 	bl	8009df2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009906:	f000 fdc1 	bl	800a48c <xTaskResumeAll>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d189      	bne.n	8009824 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <xQueueReceive+0x1b4>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	e780      	b.n	8009824 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009924:	f000 fa65 	bl	8009df2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009928:	f000 fdb0 	bl	800a48c <xTaskResumeAll>
 800992c:	e77a      	b.n	8009824 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800992e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009930:	f000 fa5f 	bl	8009df2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009934:	f000 fdaa 	bl	800a48c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993a:	f000 faac 	bl	8009e96 <prvIsQueueEmpty>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	f43f af6f 	beq.w	8009824 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009946:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009948:	4618      	mov	r0, r3
 800994a:	3730      	adds	r7, #48	; 0x30
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	e000ed04 	.word	0xe000ed04

08009954 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08e      	sub	sp, #56	; 0x38
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800995e:	2300      	movs	r3, #0
 8009960:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800996a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996c:	2b00      	cmp	r3, #0
 800996e:	d109      	bne.n	8009984 <xQueueSemaphoreTake+0x30>
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	623b      	str	r3, [r7, #32]
 8009982:	e7fe      	b.n	8009982 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <xQueueSemaphoreTake+0x4c>
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	61fb      	str	r3, [r7, #28]
 800999e:	e7fe      	b.n	800999e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099a0:	f001 f938 	bl	800ac14 <xTaskGetSchedulerState>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d102      	bne.n	80099b0 <xQueueSemaphoreTake+0x5c>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d101      	bne.n	80099b4 <xQueueSemaphoreTake+0x60>
 80099b0:	2301      	movs	r3, #1
 80099b2:	e000      	b.n	80099b6 <xQueueSemaphoreTake+0x62>
 80099b4:	2300      	movs	r3, #0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d109      	bne.n	80099ce <xQueueSemaphoreTake+0x7a>
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	61bb      	str	r3, [r7, #24]
 80099cc:	e7fe      	b.n	80099cc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099ce:	f001 ff65 	bl	800b89c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d024      	beq.n	8009a28 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	1e5a      	subs	r2, r3, #1
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d104      	bne.n	80099f8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80099ee:	f001 fa83 	bl	800aef8 <pvTaskIncrementMutexHeldCount>
 80099f2:	4602      	mov	r2, r0
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00f      	beq.n	8009a20 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a02:	3310      	adds	r3, #16
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 ff4f 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d007      	beq.n	8009a20 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a10:	4b53      	ldr	r3, [pc, #332]	; (8009b60 <xQueueSemaphoreTake+0x20c>)
 8009a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a20:	f001 ff6a 	bl	800b8f8 <vPortExitCritical>
				return pdPASS;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e096      	b.n	8009b56 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d110      	bne.n	8009a50 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d009      	beq.n	8009a48 <xQueueSemaphoreTake+0xf4>
 8009a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e7fe      	b.n	8009a46 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a48:	f001 ff56 	bl	800b8f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e082      	b.n	8009b56 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a56:	f107 030c 	add.w	r3, r7, #12
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 ff86 	bl	800a96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a60:	2301      	movs	r3, #1
 8009a62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a64:	f001 ff48 	bl	800b8f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a68:	f000 fd02 	bl	800a470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a6c:	f001 ff16 	bl	800b89c <vPortEnterCritical>
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a76:	b25b      	sxtb	r3, r3
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7c:	d103      	bne.n	8009a86 <xQueueSemaphoreTake+0x132>
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	2200      	movs	r2, #0
 8009a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a8c:	b25b      	sxtb	r3, r3
 8009a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a92:	d103      	bne.n	8009a9c <xQueueSemaphoreTake+0x148>
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	2200      	movs	r2, #0
 8009a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a9c:	f001 ff2c 	bl	800b8f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009aa0:	463a      	mov	r2, r7
 8009aa2:	f107 030c 	add.w	r3, r7, #12
 8009aa6:	4611      	mov	r1, r2
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f000 ff75 	bl	800a998 <xTaskCheckForTimeOut>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d132      	bne.n	8009b1a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ab6:	f000 f9ee 	bl	8009e96 <prvIsQueueEmpty>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d026      	beq.n	8009b0e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d109      	bne.n	8009adc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009ac8:	f001 fee8 	bl	800b89c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f8bd 	bl	800ac50 <xTaskPriorityInherit>
 8009ad6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ad8:	f001 ff0e 	bl	800b8f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	3324      	adds	r3, #36	; 0x24
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fe91 	bl	800a80c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009aea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009aec:	f000 f981 	bl	8009df2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009af0:	f000 fccc 	bl	800a48c <xTaskResumeAll>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f47f af69 	bne.w	80099ce <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009afc:	4b18      	ldr	r3, [pc, #96]	; (8009b60 <xQueueSemaphoreTake+0x20c>)
 8009afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	e75f      	b.n	80099ce <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b10:	f000 f96f 	bl	8009df2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b14:	f000 fcba 	bl	800a48c <xTaskResumeAll>
 8009b18:	e759      	b.n	80099ce <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b1c:	f000 f969 	bl	8009df2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b20:	f000 fcb4 	bl	800a48c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b26:	f000 f9b6 	bl	8009e96 <prvIsQueueEmpty>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f43f af4e 	beq.w	80099ce <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00d      	beq.n	8009b54 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009b38:	f001 feb0 	bl	800b89c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b3e:	f000 f8b0 	bl	8009ca2 <prvGetDisinheritPriorityAfterTimeout>
 8009b42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 f954 	bl	800adf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b50:	f001 fed2 	bl	800b8f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3738      	adds	r7, #56	; 0x38
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08e      	sub	sp, #56	; 0x38
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d109      	bne.n	8009b8e <xQueueReceiveFromISR+0x2a>
 8009b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7e:	f383 8811 	msr	BASEPRI, r3
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	623b      	str	r3, [r7, #32]
 8009b8c:	e7fe      	b.n	8009b8c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d103      	bne.n	8009b9c <xQueueReceiveFromISR+0x38>
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <xQueueReceiveFromISR+0x3c>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e000      	b.n	8009ba2 <xQueueReceiveFromISR+0x3e>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <xQueueReceiveFromISR+0x56>
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	61fb      	str	r3, [r7, #28]
 8009bb8:	e7fe      	b.n	8009bb8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009bba:	f001 ff4b 	bl	800ba54 <vPortValidateInterruptPriority>
	__asm volatile
 8009bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	61ba      	str	r2, [r7, #24]
 8009bd4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bd6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d02f      	beq.n	8009c46 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bf4:	f000 f8d7 	bl	8009da6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfa:	1e5a      	subs	r2, r3, #1
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c08:	d112      	bne.n	8009c30 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d016      	beq.n	8009c40 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	3310      	adds	r3, #16
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fe46 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00e      	beq.n	8009c40 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00b      	beq.n	8009c40 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	e007      	b.n	8009c40 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c34:	3301      	adds	r3, #1
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	b25a      	sxtb	r2, r3
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c40:	2301      	movs	r3, #1
 8009c42:	637b      	str	r3, [r7, #52]	; 0x34
 8009c44:	e001      	b.n	8009c4a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	637b      	str	r3, [r7, #52]	; 0x34
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3738      	adds	r7, #56	; 0x38
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b084      	sub	sp, #16
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d109      	bne.n	8009c84 <vQueueDelete+0x26>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	60bb      	str	r3, [r7, #8]
 8009c82:	e7fe      	b.n	8009c82 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 f95d 	bl	8009f44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d102      	bne.n	8009c9a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f001 ffdd 	bl	800bc54 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009c9a:	bf00      	nop
 8009c9c:	3710      	adds	r7, #16
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d006      	beq.n	8009cc0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009cbc:	60fb      	str	r3, [r7, #12]
 8009cbe:	e001      	b.n	8009cc4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
	}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3714      	adds	r7, #20
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10d      	bne.n	8009d0c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d14d      	bne.n	8009d94 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 f80f 	bl	800ad20 <xTaskPriorityDisinherit>
 8009d02:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	609a      	str	r2, [r3, #8]
 8009d0a:	e043      	b.n	8009d94 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d119      	bne.n	8009d46 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6858      	ldr	r0, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	68b9      	ldr	r1, [r7, #8]
 8009d1e:	f016 f9d1 	bl	80200c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	441a      	add	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685a      	ldr	r2, [r3, #4]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d32b      	bcc.n	8009d94 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	605a      	str	r2, [r3, #4]
 8009d44:	e026      	b.n	8009d94 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	68d8      	ldr	r0, [r3, #12]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4e:	461a      	mov	r2, r3
 8009d50:	68b9      	ldr	r1, [r7, #8]
 8009d52:	f016 f9b7 	bl	80200c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5e:	425b      	negs	r3, r3
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d207      	bcs.n	8009d82 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	689a      	ldr	r2, [r3, #8]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	425b      	negs	r3, r3
 8009d7c:	441a      	add	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d105      	bne.n	8009d94 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d002      	beq.n	8009d94 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d9c:	697b      	ldr	r3, [r7, #20]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d018      	beq.n	8009dea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc0:	441a      	add	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d303      	bcc.n	8009dda <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68d9      	ldr	r1, [r3, #12]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	461a      	mov	r2, r3
 8009de4:	6838      	ldr	r0, [r7, #0]
 8009de6:	f016 f96d 	bl	80200c4 <memcpy>
	}
}
 8009dea:	bf00      	nop
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009dfa:	f001 fd4f 	bl	800b89c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e06:	e011      	b.n	8009e2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d012      	beq.n	8009e36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3324      	adds	r3, #36	; 0x24
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fd47 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e20:	f000 fe1a 	bl	800aa58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	3b01      	subs	r3, #1
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	dce9      	bgt.n	8009e08 <prvUnlockQueue+0x16>
 8009e34:	e000      	b.n	8009e38 <prvUnlockQueue+0x46>
					break;
 8009e36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	22ff      	movs	r2, #255	; 0xff
 8009e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e40:	f001 fd5a 	bl	800b8f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e44:	f001 fd2a 	bl	800b89c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e50:	e011      	b.n	8009e76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d012      	beq.n	8009e80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3310      	adds	r3, #16
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fd22 	bl	800a8a8 <xTaskRemoveFromEventList>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e6a:	f000 fdf5 	bl	800aa58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dce9      	bgt.n	8009e52 <prvUnlockQueue+0x60>
 8009e7e:	e000      	b.n	8009e82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	22ff      	movs	r2, #255	; 0xff
 8009e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e8a:	f001 fd35 	bl	800b8f8 <vPortExitCritical>
}
 8009e8e:	bf00      	nop
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e9e:	f001 fcfd 	bl	800b89c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d102      	bne.n	8009eb0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	60fb      	str	r3, [r7, #12]
 8009eae:	e001      	b.n	8009eb4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb4:	f001 fd20 	bl	800b8f8 <vPortExitCritical>

	return xReturn;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eca:	f001 fce7 	bl	800b89c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d102      	bne.n	8009ee0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009eda:	2301      	movs	r3, #1
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e001      	b.n	8009ee4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee4:	f001 fd08 	bl	800b8f8 <vPortExitCritical>

	return xReturn;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
	...

08009ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e014      	b.n	8009f2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f04:	4a0e      	ldr	r2, [pc, #56]	; (8009f40 <vQueueAddToRegistry+0x4c>)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f10:	490b      	ldr	r1, [pc, #44]	; (8009f40 <vQueueAddToRegistry+0x4c>)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f1a:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <vQueueAddToRegistry+0x4c>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	4413      	add	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f26:	e005      	b.n	8009f34 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b07      	cmp	r3, #7
 8009f32:	d9e7      	bls.n	8009f04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f34:	bf00      	nop
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	2000a4c0 	.word	0x2000a4c0

08009f44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e016      	b.n	8009f80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f52:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <vQueueUnregisterQueue+0x50>)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4413      	add	r3, r2
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d10b      	bne.n	8009f7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f62:	4a0c      	ldr	r2, [pc, #48]	; (8009f94 <vQueueUnregisterQueue+0x50>)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2100      	movs	r1, #0
 8009f68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f6c:	4a09      	ldr	r2, [pc, #36]	; (8009f94 <vQueueUnregisterQueue+0x50>)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	4413      	add	r3, r2
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
				break;
 8009f78:	e005      	b.n	8009f86 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b07      	cmp	r3, #7
 8009f84:	d9e5      	bls.n	8009f52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009f86:	bf00      	nop
 8009f88:	3714      	adds	r7, #20
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2000a4c0 	.word	0x2000a4c0

08009f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009fa8:	f001 fc78 	bl	800b89c <vPortEnterCritical>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fb2:	b25b      	sxtb	r3, r3
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fb8:	d103      	bne.n	8009fc2 <vQueueWaitForMessageRestricted+0x2a>
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc8:	b25b      	sxtb	r3, r3
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d103      	bne.n	8009fd8 <vQueueWaitForMessageRestricted+0x40>
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd8:	f001 fc8e 	bl	800b8f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fc31 	bl	800a854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f7ff fefd 	bl	8009df2 <prvUnlockQueue>
	}
 8009ff8:	bf00      	nop
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af04      	add	r7, sp, #16
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a010:	2b00      	cmp	r3, #0
 800a012:	d109      	bne.n	800a028 <xTaskCreateStatic+0x28>
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	623b      	str	r3, [r7, #32]
 800a026:	e7fe      	b.n	800a026 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d109      	bne.n	800a042 <xTaskCreateStatic+0x42>
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	61fb      	str	r3, [r7, #28]
 800a040:	e7fe      	b.n	800a040 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a042:	2360      	movs	r3, #96	; 0x60
 800a044:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2b60      	cmp	r3, #96	; 0x60
 800a04a:	d009      	beq.n	800a060 <xTaskCreateStatic+0x60>
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	e7fe      	b.n	800a05e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a060:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01e      	beq.n	800a0a6 <xTaskCreateStatic+0xa6>
 800a068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01b      	beq.n	800a0a6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a076:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a080:	2300      	movs	r3, #0
 800a082:	9303      	str	r3, [sp, #12]
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	9302      	str	r3, [sp, #8]
 800a088:	f107 0314 	add.w	r3, r7, #20
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	68b9      	ldr	r1, [r7, #8]
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	f000 f850 	bl	800a13e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a09e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0a0:	f000 f8de 	bl	800a260 <prvAddNewTaskToReadyList>
 800a0a4:	e001      	b.n	800a0aa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a0aa:	697b      	ldr	r3, [r7, #20]
	}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3728      	adds	r7, #40	; 0x28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08c      	sub	sp, #48	; 0x30
 800a0b8:	af04      	add	r7, sp, #16
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a0c4:	88fb      	ldrh	r3, [r7, #6]
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f001 fd01 	bl	800bad0 <pvPortMalloc>
 800a0ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00e      	beq.n	800a0f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a0d6:	2060      	movs	r0, #96	; 0x60
 800a0d8:	f001 fcfa 	bl	800bad0 <pvPortMalloc>
 800a0dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	697a      	ldr	r2, [r7, #20]
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30
 800a0ea:	e005      	b.n	800a0f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0ec:	6978      	ldr	r0, [r7, #20]
 800a0ee:	f001 fdb1 	bl	800bc54 <vPortFree>
 800a0f2:	e001      	b.n	800a0f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d017      	beq.n	800a12e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a106:	88fa      	ldrh	r2, [r7, #6]
 800a108:	2300      	movs	r3, #0
 800a10a:	9303      	str	r3, [sp, #12]
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	9302      	str	r3, [sp, #8]
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f80e 	bl	800a13e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a122:	69f8      	ldr	r0, [r7, #28]
 800a124:	f000 f89c 	bl	800a260 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a128:	2301      	movs	r3, #1
 800a12a:	61bb      	str	r3, [r7, #24]
 800a12c:	e002      	b.n	800a134 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a134:	69bb      	ldr	r3, [r7, #24]
	}
 800a136:	4618      	mov	r0, r3
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	607a      	str	r2, [r7, #4]
 800a14a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	461a      	mov	r2, r3
 800a156:	21a5      	movs	r1, #165	; 0xa5
 800a158:	f015 ffbf 	bl	80200da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a166:	3b01      	subs	r3, #1
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f023 0307 	bic.w	r3, r3, #7
 800a174:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	f003 0307 	and.w	r3, r3, #7
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d009      	beq.n	800a194 <prvInitialiseNewTask+0x56>
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	e7fe      	b.n	800a192 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d01f      	beq.n	800a1da <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a19a:	2300      	movs	r3, #0
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	e012      	b.n	800a1c6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	7819      	ldrb	r1, [r3, #0]
 800a1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3334      	adds	r3, #52	; 0x34
 800a1b0:	460a      	mov	r2, r1
 800a1b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a1b4:	68ba      	ldr	r2, [r7, #8]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	61fb      	str	r3, [r7, #28]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	2b0f      	cmp	r3, #15
 800a1ca:	d9e9      	bls.n	800a1a0 <prvInitialiseNewTask+0x62>
 800a1cc:	e000      	b.n	800a1d0 <prvInitialiseNewTask+0x92>
			{
				break;
 800a1ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1d8:	e003      	b.n	800a1e2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	2b37      	cmp	r3, #55	; 0x37
 800a1e6:	d901      	bls.n	800a1ec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1e8:	2337      	movs	r3, #55	; 0x37
 800a1ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fe7a 	bl	8008efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	3318      	adds	r3, #24
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fe fe75 	bl	8008efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	2200      	movs	r2, #0
 800a22c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	2200      	movs	r2, #0
 800a232:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	2200      	movs	r2, #0
 800a238:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a23c:	683a      	ldr	r2, [r7, #0]
 800a23e:	68f9      	ldr	r1, [r7, #12]
 800a240:	69b8      	ldr	r0, [r7, #24]
 800a242:	f001 fa07 	bl	800b654 <pxPortInitialiseStack>
 800a246:	4602      	mov	r2, r0
 800a248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a256:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a258:	bf00      	nop
 800a25a:	3720      	adds	r7, #32
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a268:	f001 fb18 	bl	800b89c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a26c:	4b2d      	ldr	r3, [pc, #180]	; (800a324 <prvAddNewTaskToReadyList+0xc4>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3301      	adds	r3, #1
 800a272:	4a2c      	ldr	r2, [pc, #176]	; (800a324 <prvAddNewTaskToReadyList+0xc4>)
 800a274:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a276:	4b2c      	ldr	r3, [pc, #176]	; (800a328 <prvAddNewTaskToReadyList+0xc8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a27e:	4a2a      	ldr	r2, [pc, #168]	; (800a328 <prvAddNewTaskToReadyList+0xc8>)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a284:	4b27      	ldr	r3, [pc, #156]	; (800a324 <prvAddNewTaskToReadyList+0xc4>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d110      	bne.n	800a2ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a28c:	f000 fc08 	bl	800aaa0 <prvInitialiseTaskLists>
 800a290:	e00d      	b.n	800a2ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a292:	4b26      	ldr	r3, [pc, #152]	; (800a32c <prvAddNewTaskToReadyList+0xcc>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d109      	bne.n	800a2ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a29a:	4b23      	ldr	r3, [pc, #140]	; (800a328 <prvAddNewTaskToReadyList+0xc8>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d802      	bhi.n	800a2ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a2a8:	4a1f      	ldr	r2, [pc, #124]	; (800a328 <prvAddNewTaskToReadyList+0xc8>)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a2ae:	4b20      	ldr	r3, [pc, #128]	; (800a330 <prvAddNewTaskToReadyList+0xd0>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	4a1e      	ldr	r2, [pc, #120]	; (800a330 <prvAddNewTaskToReadyList+0xd0>)
 800a2b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2b8:	4b1d      	ldr	r3, [pc, #116]	; (800a330 <prvAddNewTaskToReadyList+0xd0>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c4:	4b1b      	ldr	r3, [pc, #108]	; (800a334 <prvAddNewTaskToReadyList+0xd4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d903      	bls.n	800a2d4 <prvAddNewTaskToReadyList+0x74>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	4a18      	ldr	r2, [pc, #96]	; (800a334 <prvAddNewTaskToReadyList+0xd4>)
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d8:	4613      	mov	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4413      	add	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4a15      	ldr	r2, [pc, #84]	; (800a338 <prvAddNewTaskToReadyList+0xd8>)
 800a2e2:	441a      	add	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	f7fe fe13 	bl	8008f16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2f0:	f001 fb02 	bl	800b8f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2f4:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <prvAddNewTaskToReadyList+0xcc>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00e      	beq.n	800a31a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2fc:	4b0a      	ldr	r3, [pc, #40]	; (800a328 <prvAddNewTaskToReadyList+0xc8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	429a      	cmp	r2, r3
 800a308:	d207      	bcs.n	800a31a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a30a:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <prvAddNewTaskToReadyList+0xdc>)
 800a30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a310:	601a      	str	r2, [r3, #0]
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20000d48 	.word	0x20000d48
 800a328:	20000874 	.word	0x20000874
 800a32c:	20000d54 	.word	0x20000d54
 800a330:	20000d64 	.word	0x20000d64
 800a334:	20000d50 	.word	0x20000d50
 800a338:	20000878 	.word	0x20000878
 800a33c:	e000ed04 	.word	0xe000ed04

0800a340 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d016      	beq.n	800a380 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a352:	4b13      	ldr	r3, [pc, #76]	; (800a3a0 <vTaskDelay+0x60>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d009      	beq.n	800a36e <vTaskDelay+0x2e>
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	60bb      	str	r3, [r7, #8]
 800a36c:	e7fe      	b.n	800a36c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a36e:	f000 f87f 	bl	800a470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a372:	2100      	movs	r1, #0
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fdd3 	bl	800af20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a37a:	f000 f887 	bl	800a48c <xTaskResumeAll>
 800a37e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d107      	bne.n	800a396 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a386:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <vTaskDelay+0x64>)
 800a388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a396:	bf00      	nop
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	20000d70 	.word	0x20000d70
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3b6:	463a      	mov	r2, r7
 800a3b8:	1d39      	adds	r1, r7, #4
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fd48 	bl	8008e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3c4:	6839      	ldr	r1, [r7, #0]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	9202      	str	r2, [sp, #8]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	460a      	mov	r2, r1
 800a3d6:	4920      	ldr	r1, [pc, #128]	; (800a458 <vTaskStartScheduler+0xb0>)
 800a3d8:	4820      	ldr	r0, [pc, #128]	; (800a45c <vTaskStartScheduler+0xb4>)
 800a3da:	f7ff fe11 	bl	800a000 <xTaskCreateStatic>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	4b1f      	ldr	r3, [pc, #124]	; (800a460 <vTaskStartScheduler+0xb8>)
 800a3e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3e4:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <vTaskStartScheduler+0xb8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d002      	beq.n	800a3f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
 800a3f0:	e001      	b.n	800a3f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d102      	bne.n	800a402 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3fc:	f000 fde4 	bl	800afc8 <xTimerCreateTimerTask>
 800a400:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d115      	bne.n	800a434 <vTaskStartScheduler+0x8c>
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a41a:	4b12      	ldr	r3, [pc, #72]	; (800a464 <vTaskStartScheduler+0xbc>)
 800a41c:	f04f 32ff 	mov.w	r2, #4294967295
 800a420:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <vTaskStartScheduler+0xc0>)
 800a424:	2201      	movs	r2, #1
 800a426:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a428:	4b10      	ldr	r3, [pc, #64]	; (800a46c <vTaskStartScheduler+0xc4>)
 800a42a:	2200      	movs	r2, #0
 800a42c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a42e:	f001 f997 	bl	800b760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a432:	e00d      	b.n	800a450 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43a:	d109      	bne.n	800a450 <vTaskStartScheduler+0xa8>
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e7fe      	b.n	800a44e <vTaskStartScheduler+0xa6>
}
 800a450:	bf00      	nop
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	08021018 	.word	0x08021018
 800a45c:	0800aa71 	.word	0x0800aa71
 800a460:	20000d6c 	.word	0x20000d6c
 800a464:	20000d68 	.word	0x20000d68
 800a468:	20000d54 	.word	0x20000d54
 800a46c:	20000d4c 	.word	0x20000d4c

0800a470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a470:	b480      	push	{r7}
 800a472:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <vTaskSuspendAll+0x18>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	3301      	adds	r3, #1
 800a47a:	4a03      	ldr	r2, [pc, #12]	; (800a488 <vTaskSuspendAll+0x18>)
 800a47c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a47e:	bf00      	nop
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	20000d70 	.word	0x20000d70

0800a48c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a49a:	4b41      	ldr	r3, [pc, #260]	; (800a5a0 <xTaskResumeAll+0x114>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d109      	bne.n	800a4b6 <xTaskResumeAll+0x2a>
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	e7fe      	b.n	800a4b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4b6:	f001 f9f1 	bl	800b89c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4ba:	4b39      	ldr	r3, [pc, #228]	; (800a5a0 <xTaskResumeAll+0x114>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	4a37      	ldr	r2, [pc, #220]	; (800a5a0 <xTaskResumeAll+0x114>)
 800a4c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4c4:	4b36      	ldr	r3, [pc, #216]	; (800a5a0 <xTaskResumeAll+0x114>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d162      	bne.n	800a592 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4cc:	4b35      	ldr	r3, [pc, #212]	; (800a5a4 <xTaskResumeAll+0x118>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d05e      	beq.n	800a592 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4d4:	e02f      	b.n	800a536 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4d6:	4b34      	ldr	r3, [pc, #208]	; (800a5a8 <xTaskResumeAll+0x11c>)
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3318      	adds	r3, #24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fe fd74 	bl	8008fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe fd6f 	bl	8008fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f6:	4b2d      	ldr	r3, [pc, #180]	; (800a5ac <xTaskResumeAll+0x120>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d903      	bls.n	800a506 <xTaskResumeAll+0x7a>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	4a2a      	ldr	r2, [pc, #168]	; (800a5ac <xTaskResumeAll+0x120>)
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50a:	4613      	mov	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4a27      	ldr	r2, [pc, #156]	; (800a5b0 <xTaskResumeAll+0x124>)
 800a514:	441a      	add	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	3304      	adds	r3, #4
 800a51a:	4619      	mov	r1, r3
 800a51c:	4610      	mov	r0, r2
 800a51e:	f7fe fcfa 	bl	8008f16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a526:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <xTaskResumeAll+0x128>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d302      	bcc.n	800a536 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a530:	4b21      	ldr	r3, [pc, #132]	; (800a5b8 <xTaskResumeAll+0x12c>)
 800a532:	2201      	movs	r2, #1
 800a534:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a536:	4b1c      	ldr	r3, [pc, #112]	; (800a5a8 <xTaskResumeAll+0x11c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1cb      	bne.n	800a4d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d001      	beq.n	800a548 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a544:	f000 fb46 	bl	800abd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a548:	4b1c      	ldr	r3, [pc, #112]	; (800a5bc <xTaskResumeAll+0x130>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d010      	beq.n	800a576 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a554:	f000 f846 	bl	800a5e4 <xTaskIncrementTick>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a55e:	4b16      	ldr	r3, [pc, #88]	; (800a5b8 <xTaskResumeAll+0x12c>)
 800a560:	2201      	movs	r2, #1
 800a562:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3b01      	subs	r3, #1
 800a568:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f1      	bne.n	800a554 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a570:	4b12      	ldr	r3, [pc, #72]	; (800a5bc <xTaskResumeAll+0x130>)
 800a572:	2200      	movs	r2, #0
 800a574:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a576:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <xTaskResumeAll+0x12c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a57e:	2301      	movs	r3, #1
 800a580:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a582:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <xTaskResumeAll+0x134>)
 800a584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a592:	f001 f9b1 	bl	800b8f8 <vPortExitCritical>

	return xAlreadyYielded;
 800a596:	68bb      	ldr	r3, [r7, #8]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	20000d70 	.word	0x20000d70
 800a5a4:	20000d48 	.word	0x20000d48
 800a5a8:	20000d08 	.word	0x20000d08
 800a5ac:	20000d50 	.word	0x20000d50
 800a5b0:	20000878 	.word	0x20000878
 800a5b4:	20000874 	.word	0x20000874
 800a5b8:	20000d5c 	.word	0x20000d5c
 800a5bc:	20000d58 	.word	0x20000d58
 800a5c0:	e000ed04 	.word	0xe000ed04

0800a5c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <xTaskGetTickCount+0x1c>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5d0:	687b      	ldr	r3, [r7, #4]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	370c      	adds	r7, #12
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000d4c 	.word	0x20000d4c

0800a5e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5ee:	4b4e      	ldr	r3, [pc, #312]	; (800a728 <xTaskIncrementTick+0x144>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f040 8088 	bne.w	800a708 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5f8:	4b4c      	ldr	r3, [pc, #304]	; (800a72c <xTaskIncrementTick+0x148>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3301      	adds	r3, #1
 800a5fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a600:	4a4a      	ldr	r2, [pc, #296]	; (800a72c <xTaskIncrementTick+0x148>)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d11f      	bne.n	800a64c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a60c:	4b48      	ldr	r3, [pc, #288]	; (800a730 <xTaskIncrementTick+0x14c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <xTaskIncrementTick+0x46>
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	603b      	str	r3, [r7, #0]
 800a628:	e7fe      	b.n	800a628 <xTaskIncrementTick+0x44>
 800a62a:	4b41      	ldr	r3, [pc, #260]	; (800a730 <xTaskIncrementTick+0x14c>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	4b40      	ldr	r3, [pc, #256]	; (800a734 <xTaskIncrementTick+0x150>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a3e      	ldr	r2, [pc, #248]	; (800a730 <xTaskIncrementTick+0x14c>)
 800a636:	6013      	str	r3, [r2, #0]
 800a638:	4a3e      	ldr	r2, [pc, #248]	; (800a734 <xTaskIncrementTick+0x150>)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	4b3e      	ldr	r3, [pc, #248]	; (800a738 <xTaskIncrementTick+0x154>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3301      	adds	r3, #1
 800a644:	4a3c      	ldr	r2, [pc, #240]	; (800a738 <xTaskIncrementTick+0x154>)
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	f000 fac4 	bl	800abd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a64c:	4b3b      	ldr	r3, [pc, #236]	; (800a73c <xTaskIncrementTick+0x158>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	429a      	cmp	r2, r3
 800a654:	d349      	bcc.n	800a6ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a656:	4b36      	ldr	r3, [pc, #216]	; (800a730 <xTaskIncrementTick+0x14c>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d104      	bne.n	800a66a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a660:	4b36      	ldr	r3, [pc, #216]	; (800a73c <xTaskIncrementTick+0x158>)
 800a662:	f04f 32ff 	mov.w	r2, #4294967295
 800a666:	601a      	str	r2, [r3, #0]
					break;
 800a668:	e03f      	b.n	800a6ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a66a:	4b31      	ldr	r3, [pc, #196]	; (800a730 <xTaskIncrementTick+0x14c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d203      	bcs.n	800a68a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a682:	4a2e      	ldr	r2, [pc, #184]	; (800a73c <xTaskIncrementTick+0x158>)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a688:	e02f      	b.n	800a6ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fc9e 	bl	8008fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d004      	beq.n	800a6a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	3318      	adds	r3, #24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fc95 	bl	8008fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6aa:	4b25      	ldr	r3, [pc, #148]	; (800a740 <xTaskIncrementTick+0x15c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d903      	bls.n	800a6ba <xTaskIncrementTick+0xd6>
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b6:	4a22      	ldr	r2, [pc, #136]	; (800a740 <xTaskIncrementTick+0x15c>)
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6be:	4613      	mov	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4a1f      	ldr	r2, [pc, #124]	; (800a744 <xTaskIncrementTick+0x160>)
 800a6c8:	441a      	add	r2, r3
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f7fe fc20 	bl	8008f16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6da:	4b1b      	ldr	r3, [pc, #108]	; (800a748 <xTaskIncrementTick+0x164>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d3b8      	bcc.n	800a656 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6e8:	e7b5      	b.n	800a656 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6ea:	4b17      	ldr	r3, [pc, #92]	; (800a748 <xTaskIncrementTick+0x164>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f0:	4914      	ldr	r1, [pc, #80]	; (800a744 <xTaskIncrementTick+0x160>)
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d907      	bls.n	800a712 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a702:	2301      	movs	r3, #1
 800a704:	617b      	str	r3, [r7, #20]
 800a706:	e004      	b.n	800a712 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a708:	4b10      	ldr	r3, [pc, #64]	; (800a74c <xTaskIncrementTick+0x168>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	4a0f      	ldr	r2, [pc, #60]	; (800a74c <xTaskIncrementTick+0x168>)
 800a710:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a712:	4b0f      	ldr	r3, [pc, #60]	; (800a750 <xTaskIncrementTick+0x16c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a71a:	2301      	movs	r3, #1
 800a71c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a71e:	697b      	ldr	r3, [r7, #20]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3718      	adds	r7, #24
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	20000d70 	.word	0x20000d70
 800a72c:	20000d4c 	.word	0x20000d4c
 800a730:	20000d00 	.word	0x20000d00
 800a734:	20000d04 	.word	0x20000d04
 800a738:	20000d60 	.word	0x20000d60
 800a73c:	20000d68 	.word	0x20000d68
 800a740:	20000d50 	.word	0x20000d50
 800a744:	20000878 	.word	0x20000878
 800a748:	20000874 	.word	0x20000874
 800a74c:	20000d58 	.word	0x20000d58
 800a750:	20000d5c 	.word	0x20000d5c

0800a754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a754:	b480      	push	{r7}
 800a756:	b085      	sub	sp, #20
 800a758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a75a:	4b27      	ldr	r3, [pc, #156]	; (800a7f8 <vTaskSwitchContext+0xa4>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a762:	4b26      	ldr	r3, [pc, #152]	; (800a7fc <vTaskSwitchContext+0xa8>)
 800a764:	2201      	movs	r2, #1
 800a766:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a768:	e040      	b.n	800a7ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a76a:	4b24      	ldr	r3, [pc, #144]	; (800a7fc <vTaskSwitchContext+0xa8>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a770:	4b23      	ldr	r3, [pc, #140]	; (800a800 <vTaskSwitchContext+0xac>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	60fb      	str	r3, [r7, #12]
 800a776:	e00f      	b.n	800a798 <vTaskSwitchContext+0x44>
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d109      	bne.n	800a792 <vTaskSwitchContext+0x3e>
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	607b      	str	r3, [r7, #4]
 800a790:	e7fe      	b.n	800a790 <vTaskSwitchContext+0x3c>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	3b01      	subs	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	491a      	ldr	r1, [pc, #104]	; (800a804 <vTaskSwitchContext+0xb0>)
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0e5      	beq.n	800a778 <vTaskSwitchContext+0x24>
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	4a13      	ldr	r2, [pc, #76]	; (800a804 <vTaskSwitchContext+0xb0>)
 800a7b8:	4413      	add	r3, r2
 800a7ba:	60bb      	str	r3, [r7, #8]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	605a      	str	r2, [r3, #4]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d104      	bne.n	800a7dc <vTaskSwitchContext+0x88>
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	605a      	str	r2, [r3, #4]
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	4a09      	ldr	r2, [pc, #36]	; (800a808 <vTaskSwitchContext+0xb4>)
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	4a06      	ldr	r2, [pc, #24]	; (800a800 <vTaskSwitchContext+0xac>)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6013      	str	r3, [r2, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	20000d70 	.word	0x20000d70
 800a7fc:	20000d5c 	.word	0x20000d5c
 800a800:	20000d50 	.word	0x20000d50
 800a804:	20000878 	.word	0x20000878
 800a808:	20000874 	.word	0x20000874

0800a80c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d109      	bne.n	800a830 <vTaskPlaceOnEventList+0x24>
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	f383 8811 	msr	BASEPRI, r3
 800a824:	f3bf 8f6f 	isb	sy
 800a828:	f3bf 8f4f 	dsb	sy
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	e7fe      	b.n	800a82e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <vTaskPlaceOnEventList+0x44>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3318      	adds	r3, #24
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7fe fb90 	bl	8008f5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a83e:	2101      	movs	r1, #1
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f000 fb6d 	bl	800af20 <prvAddCurrentTaskToDelayedList>
}
 800a846:	bf00      	nop
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20000874 	.word	0x20000874

0800a854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d109      	bne.n	800a87a <vTaskPlaceOnEventListRestricted+0x26>
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e7fe      	b.n	800a878 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a87a:	4b0a      	ldr	r3, [pc, #40]	; (800a8a4 <vTaskPlaceOnEventListRestricted+0x50>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3318      	adds	r3, #24
 800a880:	4619      	mov	r1, r3
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7fe fb47 	bl	8008f16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a894:	6879      	ldr	r1, [r7, #4]
 800a896:	68b8      	ldr	r0, [r7, #8]
 800a898:	f000 fb42 	bl	800af20 <prvAddCurrentTaskToDelayedList>
	}
 800a89c:	bf00      	nop
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	20000874 	.word	0x20000874

0800a8a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d109      	bne.n	800a8d2 <xTaskRemoveFromEventList+0x2a>
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	60fb      	str	r3, [r7, #12]
 800a8d0:	e7fe      	b.n	800a8d0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	3318      	adds	r3, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe fb7a 	bl	8008fd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8dc:	4b1d      	ldr	r3, [pc, #116]	; (800a954 <xTaskRemoveFromEventList+0xac>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d11d      	bne.n	800a920 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fb71 	bl	8008fd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f2:	4b19      	ldr	r3, [pc, #100]	; (800a958 <xTaskRemoveFromEventList+0xb0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d903      	bls.n	800a902 <xTaskRemoveFromEventList+0x5a>
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fe:	4a16      	ldr	r2, [pc, #88]	; (800a958 <xTaskRemoveFromEventList+0xb0>)
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a906:	4613      	mov	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	4413      	add	r3, r2
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4a13      	ldr	r2, [pc, #76]	; (800a95c <xTaskRemoveFromEventList+0xb4>)
 800a910:	441a      	add	r2, r3
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	3304      	adds	r3, #4
 800a916:	4619      	mov	r1, r3
 800a918:	4610      	mov	r0, r2
 800a91a:	f7fe fafc 	bl	8008f16 <vListInsertEnd>
 800a91e:	e005      	b.n	800a92c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	3318      	adds	r3, #24
 800a924:	4619      	mov	r1, r3
 800a926:	480e      	ldr	r0, [pc, #56]	; (800a960 <xTaskRemoveFromEventList+0xb8>)
 800a928:	f7fe faf5 	bl	8008f16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <xTaskRemoveFromEventList+0xbc>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a936:	429a      	cmp	r2, r3
 800a938:	d905      	bls.n	800a946 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a93a:	2301      	movs	r3, #1
 800a93c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a93e:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <xTaskRemoveFromEventList+0xc0>)
 800a940:	2201      	movs	r2, #1
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	e001      	b.n	800a94a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a946:	2300      	movs	r3, #0
 800a948:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a94a:	697b      	ldr	r3, [r7, #20]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	20000d70 	.word	0x20000d70
 800a958:	20000d50 	.word	0x20000d50
 800a95c:	20000878 	.word	0x20000878
 800a960:	20000d08 	.word	0x20000d08
 800a964:	20000874 	.word	0x20000874
 800a968:	20000d5c 	.word	0x20000d5c

0800a96c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a974:	4b06      	ldr	r3, [pc, #24]	; (800a990 <vTaskInternalSetTimeOutState+0x24>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <vTaskInternalSetTimeOutState+0x28>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	20000d60 	.word	0x20000d60
 800a994:	20000d4c 	.word	0x20000d4c

0800a998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d109      	bne.n	800a9bc <xTaskCheckForTimeOut+0x24>
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	613b      	str	r3, [r7, #16]
 800a9ba:	e7fe      	b.n	800a9ba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d109      	bne.n	800a9d6 <xTaskCheckForTimeOut+0x3e>
 800a9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	e7fe      	b.n	800a9d4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a9d6:	f000 ff61 	bl	800b89c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9da:	4b1d      	ldr	r3, [pc, #116]	; (800aa50 <xTaskCheckForTimeOut+0xb8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f2:	d102      	bne.n	800a9fa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61fb      	str	r3, [r7, #28]
 800a9f8:	e023      	b.n	800aa42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	4b15      	ldr	r3, [pc, #84]	; (800aa54 <xTaskCheckForTimeOut+0xbc>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d007      	beq.n	800aa16 <xTaskCheckForTimeOut+0x7e>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d302      	bcc.n	800aa16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa10:	2301      	movs	r3, #1
 800aa12:	61fb      	str	r3, [r7, #28]
 800aa14:	e015      	b.n	800aa42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d20b      	bcs.n	800aa38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	1ad2      	subs	r2, r2, r3
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7ff ff9d 	bl	800a96c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61fb      	str	r3, [r7, #28]
 800aa36:	e004      	b.n	800aa42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa42:	f000 ff59 	bl	800b8f8 <vPortExitCritical>

	return xReturn;
 800aa46:	69fb      	ldr	r3, [r7, #28]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3720      	adds	r7, #32
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20000d4c 	.word	0x20000d4c
 800aa54:	20000d60 	.word	0x20000d60

0800aa58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa5c:	4b03      	ldr	r3, [pc, #12]	; (800aa6c <vTaskMissedYield+0x14>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
}
 800aa62:	bf00      	nop
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20000d5c 	.word	0x20000d5c

0800aa70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa78:	f000 f852 	bl	800ab20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <prvIdleTask+0x28>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d9f9      	bls.n	800aa78 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa84:	4b05      	ldr	r3, [pc, #20]	; (800aa9c <prvIdleTask+0x2c>)
 800aa86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa94:	e7f0      	b.n	800aa78 <prvIdleTask+0x8>
 800aa96:	bf00      	nop
 800aa98:	20000878 	.word	0x20000878
 800aa9c:	e000ed04 	.word	0xe000ed04

0800aaa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	607b      	str	r3, [r7, #4]
 800aaaa:	e00c      	b.n	800aac6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4a12      	ldr	r2, [pc, #72]	; (800ab00 <prvInitialiseTaskLists+0x60>)
 800aab8:	4413      	add	r3, r2
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe f9fe 	bl	8008ebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3301      	adds	r3, #1
 800aac4:	607b      	str	r3, [r7, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b37      	cmp	r3, #55	; 0x37
 800aaca:	d9ef      	bls.n	800aaac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aacc:	480d      	ldr	r0, [pc, #52]	; (800ab04 <prvInitialiseTaskLists+0x64>)
 800aace:	f7fe f9f5 	bl	8008ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aad2:	480d      	ldr	r0, [pc, #52]	; (800ab08 <prvInitialiseTaskLists+0x68>)
 800aad4:	f7fe f9f2 	bl	8008ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aad8:	480c      	ldr	r0, [pc, #48]	; (800ab0c <prvInitialiseTaskLists+0x6c>)
 800aada:	f7fe f9ef 	bl	8008ebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aade:	480c      	ldr	r0, [pc, #48]	; (800ab10 <prvInitialiseTaskLists+0x70>)
 800aae0:	f7fe f9ec 	bl	8008ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aae4:	480b      	ldr	r0, [pc, #44]	; (800ab14 <prvInitialiseTaskLists+0x74>)
 800aae6:	f7fe f9e9 	bl	8008ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aaea:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <prvInitialiseTaskLists+0x78>)
 800aaec:	4a05      	ldr	r2, [pc, #20]	; (800ab04 <prvInitialiseTaskLists+0x64>)
 800aaee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aaf0:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <prvInitialiseTaskLists+0x7c>)
 800aaf2:	4a05      	ldr	r2, [pc, #20]	; (800ab08 <prvInitialiseTaskLists+0x68>)
 800aaf4:	601a      	str	r2, [r3, #0]
}
 800aaf6:	bf00      	nop
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20000878 	.word	0x20000878
 800ab04:	20000cd8 	.word	0x20000cd8
 800ab08:	20000cec 	.word	0x20000cec
 800ab0c:	20000d08 	.word	0x20000d08
 800ab10:	20000d1c 	.word	0x20000d1c
 800ab14:	20000d34 	.word	0x20000d34
 800ab18:	20000d00 	.word	0x20000d00
 800ab1c:	20000d04 	.word	0x20000d04

0800ab20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab26:	e019      	b.n	800ab5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab28:	f000 feb8 	bl	800b89c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab2c:	4b0f      	ldr	r3, [pc, #60]	; (800ab6c <prvCheckTasksWaitingTermination+0x4c>)
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	3304      	adds	r3, #4
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe fa49 	bl	8008fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <prvCheckTasksWaitingTermination+0x50>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	4a0a      	ldr	r2, [pc, #40]	; (800ab70 <prvCheckTasksWaitingTermination+0x50>)
 800ab46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab48:	4b0a      	ldr	r3, [pc, #40]	; (800ab74 <prvCheckTasksWaitingTermination+0x54>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	4a09      	ldr	r2, [pc, #36]	; (800ab74 <prvCheckTasksWaitingTermination+0x54>)
 800ab50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab52:	f000 fed1 	bl	800b8f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f80e 	bl	800ab78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab5c:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <prvCheckTasksWaitingTermination+0x54>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1e1      	bne.n	800ab28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20000d1c 	.word	0x20000d1c
 800ab70:	20000d48 	.word	0x20000d48
 800ab74:	20000d30 	.word	0x20000d30

0800ab78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d108      	bne.n	800ab9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f001 f860 	bl	800bc54 <vPortFree>
				vPortFree( pxTCB );
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f85d 	bl	800bc54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab9a:	e017      	b.n	800abcc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d103      	bne.n	800abae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 f854 	bl	800bc54 <vPortFree>
	}
 800abac:	e00e      	b.n	800abcc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abb4:	2b02      	cmp	r3, #2
 800abb6:	d009      	beq.n	800abcc <prvDeleteTCB+0x54>
 800abb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abbc:	f383 8811 	msr	BASEPRI, r3
 800abc0:	f3bf 8f6f 	isb	sy
 800abc4:	f3bf 8f4f 	dsb	sy
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	e7fe      	b.n	800abca <prvDeleteTCB+0x52>
	}
 800abcc:	bf00      	nop
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abda:	4b0c      	ldr	r3, [pc, #48]	; (800ac0c <prvResetNextTaskUnblockTime+0x38>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d104      	bne.n	800abee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abe4:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <prvResetNextTaskUnblockTime+0x3c>)
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800abec:	e008      	b.n	800ac00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abee:	4b07      	ldr	r3, [pc, #28]	; (800ac0c <prvResetNextTaskUnblockTime+0x38>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	4a04      	ldr	r2, [pc, #16]	; (800ac10 <prvResetNextTaskUnblockTime+0x3c>)
 800abfe:	6013      	str	r3, [r2, #0]
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	20000d00 	.word	0x20000d00
 800ac10:	20000d68 	.word	0x20000d68

0800ac14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac1a:	4b0b      	ldr	r3, [pc, #44]	; (800ac48 <xTaskGetSchedulerState+0x34>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d102      	bne.n	800ac28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac22:	2301      	movs	r3, #1
 800ac24:	607b      	str	r3, [r7, #4]
 800ac26:	e008      	b.n	800ac3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac28:	4b08      	ldr	r3, [pc, #32]	; (800ac4c <xTaskGetSchedulerState+0x38>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac30:	2302      	movs	r3, #2
 800ac32:	607b      	str	r3, [r7, #4]
 800ac34:	e001      	b.n	800ac3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac36:	2300      	movs	r3, #0
 800ac38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac3a:	687b      	ldr	r3, [r7, #4]
	}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	20000d54 	.word	0x20000d54
 800ac4c:	20000d70 	.word	0x20000d70

0800ac50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d051      	beq.n	800ad0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6a:	4b2a      	ldr	r3, [pc, #168]	; (800ad14 <xTaskPriorityInherit+0xc4>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d241      	bcs.n	800acf8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	db06      	blt.n	800ac8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac7c:	4b25      	ldr	r3, [pc, #148]	; (800ad14 <xTaskPriorityInherit+0xc4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	6959      	ldr	r1, [r3, #20]
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <xTaskPriorityInherit+0xc8>)
 800ac9c:	4413      	add	r3, r2
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d122      	bne.n	800ace8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe f992 	bl	8008fd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800acac:	4b19      	ldr	r3, [pc, #100]	; (800ad14 <xTaskPriorityInherit+0xc4>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acba:	4b18      	ldr	r3, [pc, #96]	; (800ad1c <xTaskPriorityInherit+0xcc>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d903      	bls.n	800acca <xTaskPriorityInherit+0x7a>
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc6:	4a15      	ldr	r2, [pc, #84]	; (800ad1c <xTaskPriorityInherit+0xcc>)
 800acc8:	6013      	str	r3, [r2, #0]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acce:	4613      	mov	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	4413      	add	r3, r2
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4a10      	ldr	r2, [pc, #64]	; (800ad18 <xTaskPriorityInherit+0xc8>)
 800acd8:	441a      	add	r2, r3
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	3304      	adds	r3, #4
 800acde:	4619      	mov	r1, r3
 800ace0:	4610      	mov	r0, r2
 800ace2:	f7fe f918 	bl	8008f16 <vListInsertEnd>
 800ace6:	e004      	b.n	800acf2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ace8:	4b0a      	ldr	r3, [pc, #40]	; (800ad14 <xTaskPriorityInherit+0xc4>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800acf2:	2301      	movs	r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]
 800acf6:	e008      	b.n	800ad0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <xTaskPriorityInherit+0xc4>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d201      	bcs.n	800ad0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ad06:	2301      	movs	r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
	}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20000874 	.word	0x20000874
 800ad18:	20000878 	.word	0x20000878
 800ad1c:	20000d50 	.word	0x20000d50

0800ad20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b086      	sub	sp, #24
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d054      	beq.n	800ade0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad36:	4b2d      	ldr	r3, [pc, #180]	; (800adec <xTaskPriorityDisinherit+0xcc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d009      	beq.n	800ad54 <xTaskPriorityDisinherit+0x34>
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	60fb      	str	r3, [r7, #12]
 800ad52:	e7fe      	b.n	800ad52 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d109      	bne.n	800ad70 <xTaskPriorityDisinherit+0x50>
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	60bb      	str	r3, [r7, #8]
 800ad6e:	e7fe      	b.n	800ad6e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad74:	1e5a      	subs	r2, r3, #1
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d02c      	beq.n	800ade0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d128      	bne.n	800ade0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3304      	adds	r3, #4
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe f91c 	bl	8008fd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adb0:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <xTaskPriorityDisinherit+0xd0>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d903      	bls.n	800adc0 <xTaskPriorityDisinherit+0xa0>
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adbc:	4a0c      	ldr	r2, [pc, #48]	; (800adf0 <xTaskPriorityDisinherit+0xd0>)
 800adbe:	6013      	str	r3, [r2, #0]
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc4:	4613      	mov	r3, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4a09      	ldr	r2, [pc, #36]	; (800adf4 <xTaskPriorityDisinherit+0xd4>)
 800adce:	441a      	add	r2, r3
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	3304      	adds	r3, #4
 800add4:	4619      	mov	r1, r3
 800add6:	4610      	mov	r0, r2
 800add8:	f7fe f89d 	bl	8008f16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800addc:	2301      	movs	r3, #1
 800adde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ade0:	697b      	ldr	r3, [r7, #20]
	}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20000874 	.word	0x20000874
 800adf0:	20000d50 	.word	0x20000d50
 800adf4:	20000878 	.word	0x20000878

0800adf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ae06:	2301      	movs	r3, #1
 800ae08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d068      	beq.n	800aee2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d109      	bne.n	800ae2c <vTaskPriorityDisinheritAfterTimeout+0x34>
 800ae18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1c:	f383 8811 	msr	BASEPRI, r3
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	f3bf 8f4f 	dsb	sy
 800ae28:	60fb      	str	r3, [r7, #12]
 800ae2a:	e7fe      	b.n	800ae2a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d902      	bls.n	800ae3c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	61fb      	str	r3, [r7, #28]
 800ae3a:	e002      	b.n	800ae42 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d04a      	beq.n	800aee2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae50:	697a      	ldr	r2, [r7, #20]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d145      	bne.n	800aee2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ae56:	4b25      	ldr	r3, [pc, #148]	; (800aeec <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d109      	bne.n	800ae74 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	60bb      	str	r3, [r7, #8]
 800ae72:	e7fe      	b.n	800ae72 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	69fa      	ldr	r2, [r7, #28]
 800ae7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	db04      	blt.n	800ae92 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	6959      	ldr	r1, [r3, #20]
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4a13      	ldr	r2, [pc, #76]	; (800aef0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aea2:	4413      	add	r3, r2
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d11c      	bne.n	800aee2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7fe f88f 	bl	8008fd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d903      	bls.n	800aec6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	4a0c      	ldr	r2, [pc, #48]	; (800aef4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aeca:	4613      	mov	r3, r2
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4a07      	ldr	r2, [pc, #28]	; (800aef0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aed4:	441a      	add	r2, r3
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	3304      	adds	r3, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7fe f81a 	bl	8008f16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aee2:	bf00      	nop
 800aee4:	3720      	adds	r7, #32
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20000874 	.word	0x20000874
 800aef0:	20000878 	.word	0x20000878
 800aef4:	20000d50 	.word	0x20000d50

0800aef8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aefc:	4b07      	ldr	r3, [pc, #28]	; (800af1c <pvTaskIncrementMutexHeldCount+0x24>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d004      	beq.n	800af0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <pvTaskIncrementMutexHeldCount+0x24>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af0a:	3201      	adds	r2, #1
 800af0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800af0e:	4b03      	ldr	r3, [pc, #12]	; (800af1c <pvTaskIncrementMutexHeldCount+0x24>)
 800af10:	681b      	ldr	r3, [r3, #0]
	}
 800af12:	4618      	mov	r0, r3
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr
 800af1c:	20000874 	.word	0x20000874

0800af20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af2a:	4b21      	ldr	r3, [pc, #132]	; (800afb0 <prvAddCurrentTaskToDelayedList+0x90>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af30:	4b20      	ldr	r3, [pc, #128]	; (800afb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3304      	adds	r3, #4
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe f84a 	bl	8008fd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af42:	d10a      	bne.n	800af5a <prvAddCurrentTaskToDelayedList+0x3a>
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d007      	beq.n	800af5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af4a:	4b1a      	ldr	r3, [pc, #104]	; (800afb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3304      	adds	r3, #4
 800af50:	4619      	mov	r1, r3
 800af52:	4819      	ldr	r0, [pc, #100]	; (800afb8 <prvAddCurrentTaskToDelayedList+0x98>)
 800af54:	f7fd ffdf 	bl	8008f16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af58:	e026      	b.n	800afa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4413      	add	r3, r2
 800af60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af62:	4b14      	ldr	r3, [pc, #80]	; (800afb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	429a      	cmp	r2, r3
 800af70:	d209      	bcs.n	800af86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af72:	4b12      	ldr	r3, [pc, #72]	; (800afbc <prvAddCurrentTaskToDelayedList+0x9c>)
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	4b0f      	ldr	r3, [pc, #60]	; (800afb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	3304      	adds	r3, #4
 800af7c:	4619      	mov	r1, r3
 800af7e:	4610      	mov	r0, r2
 800af80:	f7fd ffed 	bl	8008f5e <vListInsert>
}
 800af84:	e010      	b.n	800afa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af86:	4b0e      	ldr	r3, [pc, #56]	; (800afc0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <prvAddCurrentTaskToDelayedList+0x94>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	3304      	adds	r3, #4
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fd ffe3 	bl	8008f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af98:	4b0a      	ldr	r3, [pc, #40]	; (800afc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d202      	bcs.n	800afa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800afa2:	4a08      	ldr	r2, [pc, #32]	; (800afc4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	6013      	str	r3, [r2, #0]
}
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000d4c 	.word	0x20000d4c
 800afb4:	20000874 	.word	0x20000874
 800afb8:	20000d34 	.word	0x20000d34
 800afbc:	20000d04 	.word	0x20000d04
 800afc0:	20000d00 	.word	0x20000d00
 800afc4:	20000d68 	.word	0x20000d68

0800afc8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08a      	sub	sp, #40	; 0x28
 800afcc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800afd2:	f000 faff 	bl	800b5d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800afd6:	4b1c      	ldr	r3, [pc, #112]	; (800b048 <xTimerCreateTimerTask+0x80>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d021      	beq.n	800b022 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800afe2:	2300      	movs	r3, #0
 800afe4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800afe6:	1d3a      	adds	r2, r7, #4
 800afe8:	f107 0108 	add.w	r1, r7, #8
 800afec:	f107 030c 	add.w	r3, r7, #12
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fd ff49 	bl	8008e88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aff6:	6879      	ldr	r1, [r7, #4]
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	9202      	str	r2, [sp, #8]
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	2302      	movs	r3, #2
 800b002:	9300      	str	r3, [sp, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	460a      	mov	r2, r1
 800b008:	4910      	ldr	r1, [pc, #64]	; (800b04c <xTimerCreateTimerTask+0x84>)
 800b00a:	4811      	ldr	r0, [pc, #68]	; (800b050 <xTimerCreateTimerTask+0x88>)
 800b00c:	f7fe fff8 	bl	800a000 <xTaskCreateStatic>
 800b010:	4602      	mov	r2, r0
 800b012:	4b10      	ldr	r3, [pc, #64]	; (800b054 <xTimerCreateTimerTask+0x8c>)
 800b014:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b016:	4b0f      	ldr	r3, [pc, #60]	; (800b054 <xTimerCreateTimerTask+0x8c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b01e:	2301      	movs	r3, #1
 800b020:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <xTimerCreateTimerTask+0x74>
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	613b      	str	r3, [r7, #16]
 800b03a:	e7fe      	b.n	800b03a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b03c:	697b      	ldr	r3, [r7, #20]
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	20000da4 	.word	0x20000da4
 800b04c:	08021020 	.word	0x08021020
 800b050:	0800b189 	.word	0x0800b189
 800b054:	20000da8 	.word	0x20000da8

0800b058 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08a      	sub	sp, #40	; 0x28
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b066:	2300      	movs	r3, #0
 800b068:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d109      	bne.n	800b084 <xTimerGenericCommand+0x2c>
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	623b      	str	r3, [r7, #32]
 800b082:	e7fe      	b.n	800b082 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b084:	4b19      	ldr	r3, [pc, #100]	; (800b0ec <xTimerGenericCommand+0x94>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d02a      	beq.n	800b0e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2b05      	cmp	r3, #5
 800b09c:	dc18      	bgt.n	800b0d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b09e:	f7ff fdb9 	bl	800ac14 <xTaskGetSchedulerState>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b02      	cmp	r3, #2
 800b0a6:	d109      	bne.n	800b0bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b0a8:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <xTimerGenericCommand+0x94>)
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	f107 0110 	add.w	r1, r7, #16
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0b4:	f7fe f95a 	bl	800936c <xQueueGenericSend>
 800b0b8:	6278      	str	r0, [r7, #36]	; 0x24
 800b0ba:	e012      	b.n	800b0e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <xTimerGenericCommand+0x94>)
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	f107 0110 	add.w	r1, r7, #16
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f7fe f950 	bl	800936c <xQueueGenericSend>
 800b0cc:	6278      	str	r0, [r7, #36]	; 0x24
 800b0ce:	e008      	b.n	800b0e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b0d0:	4b06      	ldr	r3, [pc, #24]	; (800b0ec <xTimerGenericCommand+0x94>)
 800b0d2:	6818      	ldr	r0, [r3, #0]
 800b0d4:	f107 0110 	add.w	r1, r7, #16
 800b0d8:	2300      	movs	r3, #0
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	f7fe fa40 	bl	8009560 <xQueueGenericSendFromISR>
 800b0e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3728      	adds	r7, #40	; 0x28
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20000da4 	.word	0x20000da4

0800b0f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af02      	add	r7, sp, #8
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0fa:	4b22      	ldr	r3, [pc, #136]	; (800b184 <prvProcessExpiredTimer+0x94>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	3304      	adds	r3, #4
 800b108:	4618      	mov	r0, r3
 800b10a:	f7fd ff61 	bl	8008fd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b114:	f003 0304 	and.w	r3, r3, #4
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d021      	beq.n	800b160 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	699a      	ldr	r2, [r3, #24]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	18d1      	adds	r1, r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	6978      	ldr	r0, [r7, #20]
 800b12a:	f000 f8d1 	bl	800b2d0 <prvInsertTimerInActiveList>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d01e      	beq.n	800b172 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b134:	2300      	movs	r3, #0
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	2300      	movs	r3, #0
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	2100      	movs	r1, #0
 800b13e:	6978      	ldr	r0, [r7, #20]
 800b140:	f7ff ff8a 	bl	800b058 <xTimerGenericCommand>
 800b144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d112      	bne.n	800b172 <prvProcessExpiredTimer+0x82>
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e7fe      	b.n	800b15e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b166:	f023 0301 	bic.w	r3, r3, #1
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	6978      	ldr	r0, [r7, #20]
 800b178:	4798      	blx	r3
}
 800b17a:	bf00      	nop
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	20000d9c 	.word	0x20000d9c

0800b188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b190:	f107 0308 	add.w	r3, r7, #8
 800b194:	4618      	mov	r0, r3
 800b196:	f000 f857 	bl	800b248 <prvGetNextExpireTime>
 800b19a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 f803 	bl	800b1ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b1a6:	f000 f8d5 	bl	800b354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b1aa:	e7f1      	b.n	800b190 <prvTimerTask+0x8>

0800b1ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b084      	sub	sp, #16
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b1b6:	f7ff f95b 	bl	800a470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f000 f866 	bl	800b290 <prvSampleTimeNow>
 800b1c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d130      	bne.n	800b22e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d10a      	bne.n	800b1e8 <prvProcessTimerOrBlockTask+0x3c>
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d806      	bhi.n	800b1e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b1da:	f7ff f957 	bl	800a48c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b1de:	68f9      	ldr	r1, [r7, #12]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f7ff ff85 	bl	800b0f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b1e6:	e024      	b.n	800b232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d008      	beq.n	800b200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <prvProcessTimerOrBlockTask+0x90>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d101      	bne.n	800b1fc <prvProcessTimerOrBlockTask+0x50>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e000      	b.n	800b1fe <prvProcessTimerOrBlockTask+0x52>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b200:	4b0f      	ldr	r3, [pc, #60]	; (800b240 <prvProcessTimerOrBlockTask+0x94>)
 800b202:	6818      	ldr	r0, [r3, #0]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4619      	mov	r1, r3
 800b20e:	f7fe fec3 	bl	8009f98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b212:	f7ff f93b 	bl	800a48c <xTaskResumeAll>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10a      	bne.n	800b232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvProcessTimerOrBlockTask+0x98>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	f3bf 8f6f 	isb	sy
}
 800b22c:	e001      	b.n	800b232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b22e:	f7ff f92d 	bl	800a48c <xTaskResumeAll>
}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000da0 	.word	0x20000da0
 800b240:	20000da4 	.word	0x20000da4
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b250:	4b0e      	ldr	r3, [pc, #56]	; (800b28c <prvGetNextExpireTime+0x44>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <prvGetNextExpireTime+0x16>
 800b25a:	2201      	movs	r2, #1
 800b25c:	e000      	b.n	800b260 <prvGetNextExpireTime+0x18>
 800b25e:	2200      	movs	r2, #0
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b26c:	4b07      	ldr	r3, [pc, #28]	; (800b28c <prvGetNextExpireTime+0x44>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e001      	b.n	800b27c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b27c:	68fb      	ldr	r3, [r7, #12]
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3714      	adds	r7, #20
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	20000d9c 	.word	0x20000d9c

0800b290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b298:	f7ff f994 	bl	800a5c4 <xTaskGetTickCount>
 800b29c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b29e:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <prvSampleTimeNow+0x3c>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d205      	bcs.n	800b2b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b2a8:	f000 f930 	bl	800b50c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	e002      	b.n	800b2ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b2ba:	4a04      	ldr	r2, [pc, #16]	; (800b2cc <prvSampleTimeNow+0x3c>)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3710      	adds	r7, #16
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20000dac 	.word	0x20000dac

0800b2d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d812      	bhi.n	800b31c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	429a      	cmp	r2, r3
 800b302:	d302      	bcc.n	800b30a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b304:	2301      	movs	r3, #1
 800b306:	617b      	str	r3, [r7, #20]
 800b308:	e01b      	b.n	800b342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b30a:	4b10      	ldr	r3, [pc, #64]	; (800b34c <prvInsertTimerInActiveList+0x7c>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3304      	adds	r3, #4
 800b312:	4619      	mov	r1, r3
 800b314:	4610      	mov	r0, r2
 800b316:	f7fd fe22 	bl	8008f5e <vListInsert>
 800b31a:	e012      	b.n	800b342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d206      	bcs.n	800b332 <prvInsertTimerInActiveList+0x62>
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d302      	bcc.n	800b332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	e007      	b.n	800b342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b332:	4b07      	ldr	r3, [pc, #28]	; (800b350 <prvInsertTimerInActiveList+0x80>)
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3304      	adds	r3, #4
 800b33a:	4619      	mov	r1, r3
 800b33c:	4610      	mov	r0, r2
 800b33e:	f7fd fe0e 	bl	8008f5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b342:	697b      	ldr	r3, [r7, #20]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	20000da0 	.word	0x20000da0
 800b350:	20000d9c 	.word	0x20000d9c

0800b354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08e      	sub	sp, #56	; 0x38
 800b358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b35a:	e0c6      	b.n	800b4ea <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da17      	bge.n	800b392 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b362:	1d3b      	adds	r3, r7, #4
 800b364:	3304      	adds	r3, #4
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d109      	bne.n	800b382 <prvProcessReceivedCommands+0x2e>
 800b36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	61fb      	str	r3, [r7, #28]
 800b380:	e7fe      	b.n	800b380 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b388:	6850      	ldr	r0, [r2, #4]
 800b38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b38c:	6892      	ldr	r2, [r2, #8]
 800b38e:	4611      	mov	r1, r2
 800b390:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	f2c0 80a7 	blt.w	800b4e8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	695b      	ldr	r3, [r3, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d004      	beq.n	800b3b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f7fd fe10 	bl	8008fd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3b0:	463b      	mov	r3, r7
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff ff6c 	bl	800b290 <prvSampleTimeNow>
 800b3b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b09      	cmp	r3, #9
 800b3be:	f200 8094 	bhi.w	800b4ea <prvProcessReceivedCommands+0x196>
 800b3c2:	a201      	add	r2, pc, #4	; (adr r2, 800b3c8 <prvProcessReceivedCommands+0x74>)
 800b3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c8:	0800b3f1 	.word	0x0800b3f1
 800b3cc:	0800b3f1 	.word	0x0800b3f1
 800b3d0:	0800b3f1 	.word	0x0800b3f1
 800b3d4:	0800b463 	.word	0x0800b463
 800b3d8:	0800b477 	.word	0x0800b477
 800b3dc:	0800b4bf 	.word	0x0800b4bf
 800b3e0:	0800b3f1 	.word	0x0800b3f1
 800b3e4:	0800b3f1 	.word	0x0800b3f1
 800b3e8:	0800b463 	.word	0x0800b463
 800b3ec:	0800b477 	.word	0x0800b477
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3f6:	f043 0301 	orr.w	r3, r3, #1
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	18d1      	adds	r1, r2, r3
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b40e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b410:	f7ff ff5e 	bl	800b2d0 <prvInsertTimerInActiveList>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d067      	beq.n	800b4ea <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b428:	f003 0304 	and.w	r3, r3, #4
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d05c      	beq.n	800b4ea <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	441a      	add	r2, r3
 800b438:	2300      	movs	r3, #0
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	2300      	movs	r3, #0
 800b43e:	2100      	movs	r1, #0
 800b440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b442:	f7ff fe09 	bl	800b058 <xTimerGenericCommand>
 800b446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b448:	6a3b      	ldr	r3, [r7, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d14d      	bne.n	800b4ea <prvProcessReceivedCommands+0x196>
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	61bb      	str	r3, [r7, #24]
 800b460:	e7fe      	b.n	800b460 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b468:	f023 0301 	bic.w	r3, r3, #1
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b474:	e039      	b.n	800b4ea <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	b2da      	uxtb	r2, r3
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d109      	bne.n	800b4aa <prvProcessReceivedCommands+0x156>
 800b496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49a:	f383 8811 	msr	BASEPRI, r3
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f3bf 8f4f 	dsb	sy
 800b4a6:	617b      	str	r3, [r7, #20]
 800b4a8:	e7fe      	b.n	800b4a8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ac:	699a      	ldr	r2, [r3, #24]
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	18d1      	adds	r1, r2, r3
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4b8:	f7ff ff0a 	bl	800b2d0 <prvInsertTimerInActiveList>
					break;
 800b4bc:	e015      	b.n	800b4ea <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d103      	bne.n	800b4d4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b4cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ce:	f000 fbc1 	bl	800bc54 <vPortFree>
 800b4d2:	e00a      	b.n	800b4ea <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4da:	f023 0301 	bic.w	r3, r3, #1
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b4e6:	e000      	b.n	800b4ea <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b4e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4ea:	4b07      	ldr	r3, [pc, #28]	; (800b508 <prvProcessReceivedCommands+0x1b4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	1d39      	adds	r1, r7, #4
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fe f952 	bl	800979c <xQueueReceive>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f47f af2e 	bne.w	800b35c <prvProcessReceivedCommands+0x8>
	}
}
 800b500:	bf00      	nop
 800b502:	3730      	adds	r7, #48	; 0x30
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20000da4 	.word	0x20000da4

0800b50c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b088      	sub	sp, #32
 800b510:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b512:	e047      	b.n	800b5a4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b514:	4b2d      	ldr	r3, [pc, #180]	; (800b5cc <prvSwitchTimerLists+0xc0>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b51e:	4b2b      	ldr	r3, [pc, #172]	; (800b5cc <prvSwitchTimerLists+0xc0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3304      	adds	r3, #4
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fd fd4f 	bl	8008fd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b540:	f003 0304 	and.w	r3, r3, #4
 800b544:	2b00      	cmp	r3, #0
 800b546:	d02d      	beq.n	800b5a4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	699b      	ldr	r3, [r3, #24]
 800b54c:	693a      	ldr	r2, [r7, #16]
 800b54e:	4413      	add	r3, r2
 800b550:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	429a      	cmp	r2, r3
 800b558:	d90e      	bls.n	800b578 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	68ba      	ldr	r2, [r7, #8]
 800b55e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b566:	4b19      	ldr	r3, [pc, #100]	; (800b5cc <prvSwitchTimerLists+0xc0>)
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3304      	adds	r3, #4
 800b56e:	4619      	mov	r1, r3
 800b570:	4610      	mov	r0, r2
 800b572:	f7fd fcf4 	bl	8008f5e <vListInsert>
 800b576:	e015      	b.n	800b5a4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b578:	2300      	movs	r3, #0
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	2300      	movs	r3, #0
 800b57e:	693a      	ldr	r2, [r7, #16]
 800b580:	2100      	movs	r1, #0
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f7ff fd68 	bl	800b058 <xTimerGenericCommand>
 800b588:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d109      	bne.n	800b5a4 <prvSwitchTimerLists+0x98>
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	603b      	str	r3, [r7, #0]
 800b5a2:	e7fe      	b.n	800b5a2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <prvSwitchTimerLists+0xc0>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1b2      	bne.n	800b514 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b5ae:	4b07      	ldr	r3, [pc, #28]	; (800b5cc <prvSwitchTimerLists+0xc0>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b5b4:	4b06      	ldr	r3, [pc, #24]	; (800b5d0 <prvSwitchTimerLists+0xc4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a04      	ldr	r2, [pc, #16]	; (800b5cc <prvSwitchTimerLists+0xc0>)
 800b5ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b5bc:	4a04      	ldr	r2, [pc, #16]	; (800b5d0 <prvSwitchTimerLists+0xc4>)
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	6013      	str	r3, [r2, #0]
}
 800b5c2:	bf00      	nop
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20000d9c 	.word	0x20000d9c
 800b5d0:	20000da0 	.word	0x20000da0

0800b5d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b5da:	f000 f95f 	bl	800b89c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b5de:	4b15      	ldr	r3, [pc, #84]	; (800b634 <prvCheckForValidListAndQueue+0x60>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d120      	bne.n	800b628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b5e6:	4814      	ldr	r0, [pc, #80]	; (800b638 <prvCheckForValidListAndQueue+0x64>)
 800b5e8:	f7fd fc68 	bl	8008ebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b5ec:	4813      	ldr	r0, [pc, #76]	; (800b63c <prvCheckForValidListAndQueue+0x68>)
 800b5ee:	f7fd fc65 	bl	8008ebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b5f2:	4b13      	ldr	r3, [pc, #76]	; (800b640 <prvCheckForValidListAndQueue+0x6c>)
 800b5f4:	4a10      	ldr	r2, [pc, #64]	; (800b638 <prvCheckForValidListAndQueue+0x64>)
 800b5f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b5f8:	4b12      	ldr	r3, [pc, #72]	; (800b644 <prvCheckForValidListAndQueue+0x70>)
 800b5fa:	4a10      	ldr	r2, [pc, #64]	; (800b63c <prvCheckForValidListAndQueue+0x68>)
 800b5fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b5fe:	2300      	movs	r3, #0
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	4b11      	ldr	r3, [pc, #68]	; (800b648 <prvCheckForValidListAndQueue+0x74>)
 800b604:	4a11      	ldr	r2, [pc, #68]	; (800b64c <prvCheckForValidListAndQueue+0x78>)
 800b606:	2110      	movs	r1, #16
 800b608:	200a      	movs	r0, #10
 800b60a:	f7fd fd73 	bl	80090f4 <xQueueGenericCreateStatic>
 800b60e:	4602      	mov	r2, r0
 800b610:	4b08      	ldr	r3, [pc, #32]	; (800b634 <prvCheckForValidListAndQueue+0x60>)
 800b612:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b614:	4b07      	ldr	r3, [pc, #28]	; (800b634 <prvCheckForValidListAndQueue+0x60>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d005      	beq.n	800b628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b61c:	4b05      	ldr	r3, [pc, #20]	; (800b634 <prvCheckForValidListAndQueue+0x60>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	490b      	ldr	r1, [pc, #44]	; (800b650 <prvCheckForValidListAndQueue+0x7c>)
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fc66 	bl	8009ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b628:	f000 f966 	bl	800b8f8 <vPortExitCritical>
}
 800b62c:	bf00      	nop
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	20000da4 	.word	0x20000da4
 800b638:	20000d74 	.word	0x20000d74
 800b63c:	20000d88 	.word	0x20000d88
 800b640:	20000d9c 	.word	0x20000d9c
 800b644:	20000da0 	.word	0x20000da0
 800b648:	20000e50 	.word	0x20000e50
 800b64c:	20000db0 	.word	0x20000db0
 800b650:	08021028 	.word	0x08021028

0800b654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3b04      	subs	r3, #4
 800b664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b66c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3b04      	subs	r3, #4
 800b672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	f023 0201 	bic.w	r2, r3, #1
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3b04      	subs	r3, #4
 800b682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b684:	4a0c      	ldr	r2, [pc, #48]	; (800b6b8 <pxPortInitialiseStack+0x64>)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	3b14      	subs	r3, #20
 800b68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3b04      	subs	r3, #4
 800b69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f06f 0202 	mvn.w	r2, #2
 800b6a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	3b20      	subs	r3, #32
 800b6a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3714      	adds	r7, #20
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	0800b6bd 	.word	0x0800b6bd

0800b6bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b6c6:	4b11      	ldr	r3, [pc, #68]	; (800b70c <prvTaskExitError+0x50>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ce:	d009      	beq.n	800b6e4 <prvTaskExitError+0x28>
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	e7fe      	b.n	800b6e2 <prvTaskExitError+0x26>
 800b6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e8:	f383 8811 	msr	BASEPRI, r3
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f3bf 8f4f 	dsb	sy
 800b6f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b6f6:	bf00      	nop
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0fc      	beq.n	800b6f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b6fe:	bf00      	nop
 800b700:	3714      	adds	r7, #20
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20000078 	.word	0x20000078

0800b710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b710:	4b07      	ldr	r3, [pc, #28]	; (800b730 <pxCurrentTCBConst2>)
 800b712:	6819      	ldr	r1, [r3, #0]
 800b714:	6808      	ldr	r0, [r1, #0]
 800b716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71a:	f380 8809 	msr	PSP, r0
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f04f 0000 	mov.w	r0, #0
 800b726:	f380 8811 	msr	BASEPRI, r0
 800b72a:	4770      	bx	lr
 800b72c:	f3af 8000 	nop.w

0800b730 <pxCurrentTCBConst2>:
 800b730:	20000874 	.word	0x20000874
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop

0800b738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b738:	4808      	ldr	r0, [pc, #32]	; (800b75c <prvPortStartFirstTask+0x24>)
 800b73a:	6800      	ldr	r0, [r0, #0]
 800b73c:	6800      	ldr	r0, [r0, #0]
 800b73e:	f380 8808 	msr	MSP, r0
 800b742:	f04f 0000 	mov.w	r0, #0
 800b746:	f380 8814 	msr	CONTROL, r0
 800b74a:	b662      	cpsie	i
 800b74c:	b661      	cpsie	f
 800b74e:	f3bf 8f4f 	dsb	sy
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	df00      	svc	0
 800b758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b75a:	bf00      	nop
 800b75c:	e000ed08 	.word	0xe000ed08

0800b760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b766:	4b44      	ldr	r3, [pc, #272]	; (800b878 <xPortStartScheduler+0x118>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a44      	ldr	r2, [pc, #272]	; (800b87c <xPortStartScheduler+0x11c>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d109      	bne.n	800b784 <xPortStartScheduler+0x24>
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	613b      	str	r3, [r7, #16]
 800b782:	e7fe      	b.n	800b782 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b784:	4b3c      	ldr	r3, [pc, #240]	; (800b878 <xPortStartScheduler+0x118>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a3d      	ldr	r2, [pc, #244]	; (800b880 <xPortStartScheduler+0x120>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d109      	bne.n	800b7a2 <xPortStartScheduler+0x42>
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	e7fe      	b.n	800b7a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b7a2:	4b38      	ldr	r3, [pc, #224]	; (800b884 <xPortStartScheduler+0x124>)
 800b7a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	b2db      	uxtb	r3, r3
 800b7ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	22ff      	movs	r2, #255	; 0xff
 800b7b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	4b30      	ldr	r3, [pc, #192]	; (800b888 <xPortStartScheduler+0x128>)
 800b7c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7ca:	4b30      	ldr	r3, [pc, #192]	; (800b88c <xPortStartScheduler+0x12c>)
 800b7cc:	2207      	movs	r2, #7
 800b7ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7d0:	e009      	b.n	800b7e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b7d2:	4b2e      	ldr	r3, [pc, #184]	; (800b88c <xPortStartScheduler+0x12c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	4a2c      	ldr	r2, [pc, #176]	; (800b88c <xPortStartScheduler+0x12c>)
 800b7da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	005b      	lsls	r3, r3, #1
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7e6:	78fb      	ldrb	r3, [r7, #3]
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ee:	2b80      	cmp	r3, #128	; 0x80
 800b7f0:	d0ef      	beq.n	800b7d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7f2:	4b26      	ldr	r3, [pc, #152]	; (800b88c <xPortStartScheduler+0x12c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f1c3 0307 	rsb	r3, r3, #7
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d009      	beq.n	800b812 <xPortStartScheduler+0xb2>
 800b7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b802:	f383 8811 	msr	BASEPRI, r3
 800b806:	f3bf 8f6f 	isb	sy
 800b80a:	f3bf 8f4f 	dsb	sy
 800b80e:	60bb      	str	r3, [r7, #8]
 800b810:	e7fe      	b.n	800b810 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b812:	4b1e      	ldr	r3, [pc, #120]	; (800b88c <xPortStartScheduler+0x12c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	021b      	lsls	r3, r3, #8
 800b818:	4a1c      	ldr	r2, [pc, #112]	; (800b88c <xPortStartScheduler+0x12c>)
 800b81a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b81c:	4b1b      	ldr	r3, [pc, #108]	; (800b88c <xPortStartScheduler+0x12c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b824:	4a19      	ldr	r2, [pc, #100]	; (800b88c <xPortStartScheduler+0x12c>)
 800b826:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b830:	4b17      	ldr	r3, [pc, #92]	; (800b890 <xPortStartScheduler+0x130>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a16      	ldr	r2, [pc, #88]	; (800b890 <xPortStartScheduler+0x130>)
 800b836:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b83a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b83c:	4b14      	ldr	r3, [pc, #80]	; (800b890 <xPortStartScheduler+0x130>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4a13      	ldr	r2, [pc, #76]	; (800b890 <xPortStartScheduler+0x130>)
 800b842:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b846:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b848:	f000 f8d6 	bl	800b9f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b84c:	4b11      	ldr	r3, [pc, #68]	; (800b894 <xPortStartScheduler+0x134>)
 800b84e:	2200      	movs	r2, #0
 800b850:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b852:	f000 f8f5 	bl	800ba40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b856:	4b10      	ldr	r3, [pc, #64]	; (800b898 <xPortStartScheduler+0x138>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a0f      	ldr	r2, [pc, #60]	; (800b898 <xPortStartScheduler+0x138>)
 800b85c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b860:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b862:	f7ff ff69 	bl	800b738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b866:	f7fe ff75 	bl	800a754 <vTaskSwitchContext>
	prvTaskExitError();
 800b86a:	f7ff ff27 	bl	800b6bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	e000ed00 	.word	0xe000ed00
 800b87c:	410fc271 	.word	0x410fc271
 800b880:	410fc270 	.word	0x410fc270
 800b884:	e000e400 	.word	0xe000e400
 800b888:	20000ea0 	.word	0x20000ea0
 800b88c:	20000ea4 	.word	0x20000ea4
 800b890:	e000ed20 	.word	0xe000ed20
 800b894:	20000078 	.word	0x20000078
 800b898:	e000ef34 	.word	0xe000ef34

0800b89c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	f383 8811 	msr	BASEPRI, r3
 800b8aa:	f3bf 8f6f 	isb	sy
 800b8ae:	f3bf 8f4f 	dsb	sy
 800b8b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <vPortEnterCritical+0x54>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	4a0d      	ldr	r2, [pc, #52]	; (800b8f0 <vPortEnterCritical+0x54>)
 800b8bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b8be:	4b0c      	ldr	r3, [pc, #48]	; (800b8f0 <vPortEnterCritical+0x54>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d10e      	bne.n	800b8e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b8c6:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <vPortEnterCritical+0x58>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d009      	beq.n	800b8e4 <vPortEnterCritical+0x48>
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	603b      	str	r3, [r7, #0]
 800b8e2:	e7fe      	b.n	800b8e2 <vPortEnterCritical+0x46>
	}
}
 800b8e4:	bf00      	nop
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr
 800b8f0:	20000078 	.word	0x20000078
 800b8f4:	e000ed04 	.word	0xe000ed04

0800b8f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b8fe:	4b11      	ldr	r3, [pc, #68]	; (800b944 <vPortExitCritical+0x4c>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d109      	bne.n	800b91a <vPortExitCritical+0x22>
 800b906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	607b      	str	r3, [r7, #4]
 800b918:	e7fe      	b.n	800b918 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b91a:	4b0a      	ldr	r3, [pc, #40]	; (800b944 <vPortExitCritical+0x4c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	3b01      	subs	r3, #1
 800b920:	4a08      	ldr	r2, [pc, #32]	; (800b944 <vPortExitCritical+0x4c>)
 800b922:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b924:	4b07      	ldr	r3, [pc, #28]	; (800b944 <vPortExitCritical+0x4c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d104      	bne.n	800b936 <vPortExitCritical+0x3e>
 800b92c:	2300      	movs	r3, #0
 800b92e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b936:	bf00      	nop
 800b938:	370c      	adds	r7, #12
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	20000078 	.word	0x20000078
	...

0800b950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b950:	f3ef 8009 	mrs	r0, PSP
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	4b15      	ldr	r3, [pc, #84]	; (800b9b0 <pxCurrentTCBConst>)
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	f01e 0f10 	tst.w	lr, #16
 800b960:	bf08      	it	eq
 800b962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96a:	6010      	str	r0, [r2, #0]
 800b96c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b970:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b974:	f380 8811 	msr	BASEPRI, r0
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f7fe fee8 	bl	800a754 <vTaskSwitchContext>
 800b984:	f04f 0000 	mov.w	r0, #0
 800b988:	f380 8811 	msr	BASEPRI, r0
 800b98c:	bc09      	pop	{r0, r3}
 800b98e:	6819      	ldr	r1, [r3, #0]
 800b990:	6808      	ldr	r0, [r1, #0]
 800b992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b996:	f01e 0f10 	tst.w	lr, #16
 800b99a:	bf08      	it	eq
 800b99c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b9a0:	f380 8809 	msr	PSP, r0
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	f3af 8000 	nop.w

0800b9b0 <pxCurrentTCBConst>:
 800b9b0:	20000874 	.word	0x20000874
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b9b4:	bf00      	nop
 800b9b6:	bf00      	nop

0800b9b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b9d0:	f7fe fe08 	bl	800a5e4 <xTaskIncrementTick>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b9da:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <SysTick_Handler+0x3c>)
 800b9dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9e0:	601a      	str	r2, [r3, #0]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	e000ed04 	.word	0xe000ed04

0800b9f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ba2c <vPortSetupTimerInterrupt+0x34>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ba02:	4b0b      	ldr	r3, [pc, #44]	; (800ba30 <vPortSetupTimerInterrupt+0x38>)
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ba08:	4b0a      	ldr	r3, [pc, #40]	; (800ba34 <vPortSetupTimerInterrupt+0x3c>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a0a      	ldr	r2, [pc, #40]	; (800ba38 <vPortSetupTimerInterrupt+0x40>)
 800ba0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba12:	099b      	lsrs	r3, r3, #6
 800ba14:	4a09      	ldr	r2, [pc, #36]	; (800ba3c <vPortSetupTimerInterrupt+0x44>)
 800ba16:	3b01      	subs	r3, #1
 800ba18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ba1a:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <vPortSetupTimerInterrupt+0x34>)
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	601a      	str	r2, [r3, #0]
}
 800ba20:	bf00      	nop
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	e000e010 	.word	0xe000e010
 800ba30:	e000e018 	.word	0xe000e018
 800ba34:	2000000c 	.word	0x2000000c
 800ba38:	10624dd3 	.word	0x10624dd3
 800ba3c:	e000e014 	.word	0xe000e014

0800ba40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ba40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ba50 <vPortEnableVFP+0x10>
 800ba44:	6801      	ldr	r1, [r0, #0]
 800ba46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ba4a:	6001      	str	r1, [r0, #0]
 800ba4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ba4e:	bf00      	nop
 800ba50:	e000ed88 	.word	0xe000ed88

0800ba54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ba5a:	f3ef 8305 	mrs	r3, IPSR
 800ba5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b0f      	cmp	r3, #15
 800ba64:	d913      	bls.n	800ba8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ba66:	4a16      	ldr	r2, [pc, #88]	; (800bac0 <vPortValidateInterruptPriority+0x6c>)
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ba70:	4b14      	ldr	r3, [pc, #80]	; (800bac4 <vPortValidateInterruptPriority+0x70>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	7afa      	ldrb	r2, [r7, #11]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d209      	bcs.n	800ba8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	607b      	str	r3, [r7, #4]
 800ba8c:	e7fe      	b.n	800ba8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <vPortValidateInterruptPriority+0x74>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ba96:	4b0d      	ldr	r3, [pc, #52]	; (800bacc <vPortValidateInterruptPriority+0x78>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d909      	bls.n	800bab2 <vPortValidateInterruptPriority+0x5e>
 800ba9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	603b      	str	r3, [r7, #0]
 800bab0:	e7fe      	b.n	800bab0 <vPortValidateInterruptPriority+0x5c>
	}
 800bab2:	bf00      	nop
 800bab4:	3714      	adds	r7, #20
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	e000e3f0 	.word	0xe000e3f0
 800bac4:	20000ea0 	.word	0x20000ea0
 800bac8:	e000ed0c 	.word	0xe000ed0c
 800bacc:	20000ea4 	.word	0x20000ea4

0800bad0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08a      	sub	sp, #40	; 0x28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bad8:	2300      	movs	r3, #0
 800bada:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800badc:	f7fe fcc8 	bl	800a470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bae0:	4b57      	ldr	r3, [pc, #348]	; (800bc40 <pvPortMalloc+0x170>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bae8:	f000 f90c 	bl	800bd04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800baec:	4b55      	ldr	r3, [pc, #340]	; (800bc44 <pvPortMalloc+0x174>)
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4013      	ands	r3, r2
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f040 808c 	bne.w	800bc12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01c      	beq.n	800bb3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bb00:	2208      	movs	r2, #8
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4413      	add	r3, r2
 800bb06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f003 0307 	and.w	r3, r3, #7
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d013      	beq.n	800bb3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f023 0307 	bic.w	r3, r3, #7
 800bb18:	3308      	adds	r3, #8
 800bb1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f003 0307 	and.w	r3, r3, #7
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <pvPortMalloc+0x6a>
 800bb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	e7fe      	b.n	800bb38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d068      	beq.n	800bc12 <pvPortMalloc+0x142>
 800bb40:	4b41      	ldr	r3, [pc, #260]	; (800bc48 <pvPortMalloc+0x178>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d863      	bhi.n	800bc12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bb4a:	4b40      	ldr	r3, [pc, #256]	; (800bc4c <pvPortMalloc+0x17c>)
 800bb4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bb4e:	4b3f      	ldr	r3, [pc, #252]	; (800bc4c <pvPortMalloc+0x17c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb54:	e004      	b.n	800bb60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800bb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d903      	bls.n	800bb72 <pvPortMalloc+0xa2>
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1f1      	bne.n	800bb56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bb72:	4b33      	ldr	r3, [pc, #204]	; (800bc40 <pvPortMalloc+0x170>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d04a      	beq.n	800bc12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bb7c:	6a3b      	ldr	r3, [r7, #32]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2208      	movs	r2, #8
 800bb82:	4413      	add	r3, r2
 800bb84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	1ad2      	subs	r2, r2, r3
 800bb96:	2308      	movs	r3, #8
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d91e      	bls.n	800bbdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bb9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4413      	add	r3, r2
 800bba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	f003 0307 	and.w	r3, r3, #7
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d009      	beq.n	800bbc4 <pvPortMalloc+0xf4>
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	613b      	str	r3, [r7, #16]
 800bbc2:	e7fe      	b.n	800bbc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	1ad2      	subs	r2, r2, r3
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bbd6:	69b8      	ldr	r0, [r7, #24]
 800bbd8:	f000 f8f6 	bl	800bdc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bbdc:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <pvPortMalloc+0x178>)
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	4a18      	ldr	r2, [pc, #96]	; (800bc48 <pvPortMalloc+0x178>)
 800bbe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bbea:	4b17      	ldr	r3, [pc, #92]	; (800bc48 <pvPortMalloc+0x178>)
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	4b18      	ldr	r3, [pc, #96]	; (800bc50 <pvPortMalloc+0x180>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d203      	bcs.n	800bbfe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bbf6:	4b14      	ldr	r3, [pc, #80]	; (800bc48 <pvPortMalloc+0x178>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a15      	ldr	r2, [pc, #84]	; (800bc50 <pvPortMalloc+0x180>)
 800bbfc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	4b10      	ldr	r3, [pc, #64]	; (800bc44 <pvPortMalloc+0x174>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	431a      	orrs	r2, r3
 800bc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	2200      	movs	r2, #0
 800bc10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bc12:	f7fe fc3b 	bl	800a48c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bc16:	69fb      	ldr	r3, [r7, #28]
 800bc18:	f003 0307 	and.w	r3, r3, #7
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d009      	beq.n	800bc34 <pvPortMalloc+0x164>
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	60fb      	str	r3, [r7, #12]
 800bc32:	e7fe      	b.n	800bc32 <pvPortMalloc+0x162>
	return pvReturn;
 800bc34:	69fb      	ldr	r3, [r7, #28]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3728      	adds	r7, #40	; 0x28
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20008eb0 	.word	0x20008eb0
 800bc44:	20008ebc 	.word	0x20008ebc
 800bc48:	20008eb4 	.word	0x20008eb4
 800bc4c:	20008ea8 	.word	0x20008ea8
 800bc50:	20008eb8 	.word	0x20008eb8

0800bc54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d046      	beq.n	800bcf4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bc66:	2308      	movs	r3, #8
 800bc68:	425b      	negs	r3, r3
 800bc6a:	697a      	ldr	r2, [r7, #20]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	685a      	ldr	r2, [r3, #4]
 800bc78:	4b20      	ldr	r3, [pc, #128]	; (800bcfc <vPortFree+0xa8>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d109      	bne.n	800bc96 <vPortFree+0x42>
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	60fb      	str	r3, [r7, #12]
 800bc94:	e7fe      	b.n	800bc94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d009      	beq.n	800bcb2 <vPortFree+0x5e>
 800bc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca2:	f383 8811 	msr	BASEPRI, r3
 800bca6:	f3bf 8f6f 	isb	sy
 800bcaa:	f3bf 8f4f 	dsb	sy
 800bcae:	60bb      	str	r3, [r7, #8]
 800bcb0:	e7fe      	b.n	800bcb0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	4b11      	ldr	r3, [pc, #68]	; (800bcfc <vPortFree+0xa8>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4013      	ands	r3, r2
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d019      	beq.n	800bcf4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d115      	bne.n	800bcf4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	4b0b      	ldr	r3, [pc, #44]	; (800bcfc <vPortFree+0xa8>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	43db      	mvns	r3, r3
 800bcd2:	401a      	ands	r2, r3
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bcd8:	f7fe fbca 	bl	800a470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	4b07      	ldr	r3, [pc, #28]	; (800bd00 <vPortFree+0xac>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4413      	add	r3, r2
 800bce6:	4a06      	ldr	r2, [pc, #24]	; (800bd00 <vPortFree+0xac>)
 800bce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bcea:	6938      	ldr	r0, [r7, #16]
 800bcec:	f000 f86c 	bl	800bdc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bcf0:	f7fe fbcc 	bl	800a48c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bcf4:	bf00      	nop
 800bcf6:	3718      	adds	r7, #24
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}
 800bcfc:	20008ebc 	.word	0x20008ebc
 800bd00:	20008eb4 	.word	0x20008eb4

0800bd04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bd04:	b480      	push	{r7}
 800bd06:	b085      	sub	sp, #20
 800bd08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bd0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bd10:	4b27      	ldr	r3, [pc, #156]	; (800bdb0 <prvHeapInit+0xac>)
 800bd12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00c      	beq.n	800bd38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3307      	adds	r3, #7
 800bd22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0307 	bic.w	r3, r3, #7
 800bd2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	4a1f      	ldr	r2, [pc, #124]	; (800bdb0 <prvHeapInit+0xac>)
 800bd34:	4413      	add	r3, r2
 800bd36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bd3c:	4a1d      	ldr	r2, [pc, #116]	; (800bdb4 <prvHeapInit+0xb0>)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bd42:	4b1c      	ldr	r3, [pc, #112]	; (800bdb4 <prvHeapInit+0xb0>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bd50:	2208      	movs	r2, #8
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	1a9b      	subs	r3, r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f023 0307 	bic.w	r3, r3, #7
 800bd5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	4a15      	ldr	r2, [pc, #84]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bd66:	4b14      	ldr	r3, [pc, #80]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bd6e:	4b12      	ldr	r3, [pc, #72]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	1ad2      	subs	r2, r2, r3
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bd84:	4b0c      	ldr	r3, [pc, #48]	; (800bdb8 <prvHeapInit+0xb4>)
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	4a0a      	ldr	r2, [pc, #40]	; (800bdbc <prvHeapInit+0xb8>)
 800bd92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	4a09      	ldr	r2, [pc, #36]	; (800bdc0 <prvHeapInit+0xbc>)
 800bd9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bd9c:	4b09      	ldr	r3, [pc, #36]	; (800bdc4 <prvHeapInit+0xc0>)
 800bd9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bda2:	601a      	str	r2, [r3, #0]
}
 800bda4:	bf00      	nop
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	20000ea8 	.word	0x20000ea8
 800bdb4:	20008ea8 	.word	0x20008ea8
 800bdb8:	20008eb0 	.word	0x20008eb0
 800bdbc:	20008eb8 	.word	0x20008eb8
 800bdc0:	20008eb4 	.word	0x20008eb4
 800bdc4:	20008ebc 	.word	0x20008ebc

0800bdc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bdd0:	4b28      	ldr	r3, [pc, #160]	; (800be74 <prvInsertBlockIntoFreeList+0xac>)
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e002      	b.n	800bddc <prvInsertBlockIntoFreeList+0x14>
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d8f7      	bhi.n	800bdd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	68ba      	ldr	r2, [r7, #8]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d108      	bne.n	800be0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	441a      	add	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	441a      	add	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d118      	bne.n	800be50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	4b15      	ldr	r3, [pc, #84]	; (800be78 <prvInsertBlockIntoFreeList+0xb0>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	429a      	cmp	r2, r3
 800be28:	d00d      	beq.n	800be46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	441a      	add	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	e008      	b.n	800be58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800be46:	4b0c      	ldr	r3, [pc, #48]	; (800be78 <prvInsertBlockIntoFreeList+0xb0>)
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	e003      	b.n	800be58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d002      	beq.n	800be66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be66:	bf00      	nop
 800be68:	3714      	adds	r7, #20
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	20008ea8 	.word	0x20008ea8
 800be78:	20008eb0 	.word	0x20008eb0

0800be7c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 800be80:	f003 fc5c 	bl	800f73c <touchgfx_init>
}
 800be84:	bf00      	nop
 800be86:	bd80      	pop	{r7, pc}

0800be88 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b082      	sub	sp, #8
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 800be90:	f003 fc7e 	bl	800f790 <touchgfx_taskEntry>
}
 800be94:	bf00      	nop
 800be96:	3708      	adds	r7, #8
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
    {
 800bea4:	4a04      	ldr	r2, [pc, #16]	; (800beb8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	601a      	str	r2, [r3, #0]
    }
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	08021754 	.word	0x08021754

0800bebc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
    }
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff ffe9 	bl	800be9c <_ZN8touchgfx12FontProviderD1Ev>
 800beca:	2104      	movs	r1, #4
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f014 f84f 	bl	801ff70 <_ZdlPvj>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800bee8:	887b      	ldrh	r3, [r7, #2]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d008      	beq.n	800bf00 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d00b      	beq.n	800bf0a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d10e      	bne.n	800bf14 <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdanab_38_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800bef6:	f001 fe07 	bl	800db08 <_ZN17TypedTextDatabase8getFontsEv>
 800befa:	4603      	mov	r3, r0
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	e00a      	b.n	800bf16 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800bf00:	f001 fe02 	bl	800db08 <_ZN17TypedTextDatabase8getFontsEv>
 800bf04:	4603      	mov	r3, r0
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	e005      	b.n	800bf16 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800bf0a:	f001 fdfd 	bl	800db08 <_ZN17TypedTextDatabase8getFontsEv>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	e000      	b.n	800bf16 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 800bf14:	2300      	movs	r3, #0
    }
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	4a05      	ldr	r2, [pc, #20]	; (800bf40 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff ffb3 	bl	800be9c <_ZN8touchgfx12FontProviderD1Ev>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	08021740 	.word	0x08021740

0800bf44 <_ZN23ApplicationFontProviderD0Ev>:
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff ffe7 	bl	800bf20 <_ZN23ApplicationFontProviderD1Ev>
 800bf52:	2104      	movs	r1, #4
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f014 f80b 	bl	801ff70 <_ZdlPvj>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3708      	adds	r7, #8
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	4a04      	ldr	r2, [pc, #16]	; (800bf80 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	601a      	str	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	08022f6c 	.word	0x08022f6c

0800bf84 <_ZN8touchgfx4FontD0Ev>:
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff ffe9 	bl	800bf64 <_ZN8touchgfx4FontD1Ev>
 800bf92:	2110      	movs	r1, #16
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f013 ffeb 	bl	801ff70 <_ZdlPvj>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800bfa4:	b590      	push	{r4, r7, lr}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3308      	adds	r3, #8
 800bfbe:	681c      	ldr	r4, [r3, #0]
 800bfc0:	f107 030f 	add.w	r3, r7, #15
 800bfc4:	f107 0210 	add.w	r2, r7, #16
 800bfc8:	8879      	ldrh	r1, [r7, #2]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	47a0      	blx	r4
 800bfce:	6178      	str	r0, [r7, #20]
        return glyph;
 800bfd0:	697b      	ldr	r3, [r7, #20]
    }
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	371c      	adds	r7, #28
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd90      	pop	{r4, r7, pc}

0800bfda <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800bfda:	b480      	push	{r7}
 800bfdc:	b083      	sub	sp, #12
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	895b      	ldrh	r3, [r3, #10]
    }
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	899b      	ldrh	r3, [r3, #12]
    }
 800bffe:	4618      	mov	r0, r3
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 800c00a:	b480      	push	{r7}
 800c00c:	b083      	sub	sp, #12
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	889b      	ldrh	r3, [r3, #4]
    }
 800c016:	4618      	mov	r0, r3
 800c018:	370c      	adds	r7, #12
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	889a      	ldrh	r2, [r3, #4]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	799b      	ldrb	r3, [r3, #6]
 800c032:	b29b      	uxth	r3, r3
 800c034:	4413      	add	r3, r2
 800c036:	b29b      	uxth	r3, r3
    }
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	79db      	ldrb	r3, [r3, #7]
 800c050:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800c054:	b2db      	uxtb	r3, r3
    }
 800c056:	4618      	mov	r0, r3
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 800c062:	b480      	push	{r7}
 800c064:	b083      	sub	sp, #12
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
    {
        return a4;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	79db      	ldrb	r3, [r3, #7]
 800c06e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800c072:	b2db      	uxtb	r3, r3
    }
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	4a05      	ldr	r2, [pc, #20]	; (800c0a0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4618      	mov	r0, r3
 800c092:	f7ff ff67 	bl	800bf64 <_ZN8touchgfx4FontD1Ev>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	08023024 	.word	0x08023024

0800c0a4 <_ZN8touchgfx9ConstFontD0Ev>:
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f7ff ffe7 	bl	800c080 <_ZN8touchgfx9ConstFontD1Ev>
 800c0b2:	2118      	movs	r1, #24
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f013 ff5b 	bl	801ff70 <_ZdlPvj>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	4a05      	ldr	r2, [pc, #20]	; (800c0e4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	601a      	str	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7ff ffd3 	bl	800c080 <_ZN8touchgfx9ConstFontD1Ev>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3708      	adds	r7, #8
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	08021798 	.word	0x08021798

0800c0e8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f7ff ffe7 	bl	800c0c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c0f6:	2124      	movs	r1, #36	; 0x24
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f013 ff39 	bl	801ff70 <_ZdlPvj>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4618      	mov	r0, r3
 800c102:	3708      	adds	r7, #8
 800c104:	46bd      	mov	sp, r7
 800c106:	bd80      	pop	{r7, pc}

0800c108 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f82d 	bl	800c170 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800c116:	4b08      	ldr	r3, [pc, #32]	; (800c138 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	4b08      	ldr	r3, [pc, #32]	; (800c13c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800c11c:	6819      	ldr	r1, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	440b      	add	r3, r1
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4413      	add	r3, r2
 800c12c:	681b      	ldr	r3, [r3, #0]
    }
 800c12e:	4618      	mov	r0, r3
 800c130:	3708      	adds	r7, #8
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	20009f74 	.word	0x20009f74
 800c13c:	20009f6c 	.word	0x20009f6c

0800c140 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 f811 	bl	800c170 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800c14e:	4b07      	ldr	r3, [pc, #28]	; (800c16c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	4413      	add	r3, r2
 800c15a:	785b      	ldrb	r3, [r3, #1]
 800c15c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c160:	b2db      	uxtb	r3, r3
    }
 800c162:	4618      	mov	r0, r3
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20009f6c 	.word	0x20009f6c

0800c170 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800c178:	4b0c      	ldr	r3, [pc, #48]	; (800c1ac <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d105      	bne.n	800c18c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800c180:	4b0b      	ldr	r3, [pc, #44]	; (800c1b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800c182:	4a0c      	ldr	r2, [pc, #48]	; (800c1b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800c184:	21de      	movs	r1, #222	; 0xde
 800c186:	480c      	ldr	r0, [pc, #48]	; (800c1b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800c188:	f013 ff1e 	bl	801ffc8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	881a      	ldrh	r2, [r3, #0]
 800c190:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	429a      	cmp	r2, r3
 800c196:	d305      	bcc.n	800c1a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800c198:	4b09      	ldr	r3, [pc, #36]	; (800c1c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800c19a:	4a06      	ldr	r2, [pc, #24]	; (800c1b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800c19c:	21df      	movs	r1, #223	; 0xdf
 800c19e:	4806      	ldr	r0, [pc, #24]	; (800c1b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800c1a0:	f013 ff12 	bl	801ffc8 <__assert_func>
    }
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	20009f6c 	.word	0x20009f6c
 800c1b0:	08021030 	.word	0x08021030
 800c1b4:	08021760 	.word	0x08021760
 800c1b8:	08021074 	.word	0x08021074
 800c1bc:	20009f70 	.word	0x20009f70
 800c1c0:	080210b8 	.word	0x080210b8

0800c1c4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7b5b      	ldrb	r3, [r3, #13]
 800c1d0:	021b      	lsls	r3, r3, #8
 800c1d2:	b21b      	sxth	r3, r3
 800c1d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1d8:	b21a      	sxth	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	7adb      	ldrb	r3, [r3, #11]
 800c1de:	b21b      	sxth	r3, r3
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	b21b      	sxth	r3, r3
 800c1e4:	b29b      	uxth	r3, r3
    }
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
    }
 800c1fe:	4618      	mov	r0, r3
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
	...

0800c20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08c      	sub	sp, #48	; 0x30
 800c210:	af08      	add	r7, sp, #32
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	4611      	mov	r1, r2
 800c218:	461a      	mov	r2, r3
 800c21a:	460b      	mov	r3, r1
 800c21c:	80fb      	strh	r3, [r7, #6]
 800c21e:	4613      	mov	r3, r2
 800c220:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	88b9      	ldrh	r1, [r7, #4]
 800c226:	88fa      	ldrh	r2, [r7, #6]
 800c228:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c22a:	9306      	str	r3, [sp, #24]
 800c22c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c22e:	9305      	str	r3, [sp, #20]
 800c230:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c234:	9304      	str	r3, [sp, #16]
 800c236:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c23a:	9303      	str	r3, [sp, #12]
 800c23c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c240:	9302      	str	r3, [sp, #8]
 800c242:	7f3b      	ldrb	r3, [r7, #28]
 800c244:	9301      	str	r3, [sp, #4]
 800c246:	7e3b      	ldrb	r3, [r7, #24]
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	460b      	mov	r3, r1
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	f006 fe1b 	bl	8012e88 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800c252:	4a08      	ldr	r2, [pc, #32]	; (800c274 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c25c:	619a      	str	r2, [r3, #24]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c262:	61da      	str	r2, [r3, #28]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c268:	621a      	str	r2, [r3, #32]
{
}
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	4618      	mov	r0, r3
 800c26e:	3710      	adds	r7, #16
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}
 800c274:	08021798 	.word	0x08021798

0800c278 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	889b      	ldrh	r3, [r3, #4]
 800c28c:	0adb      	lsrs	r3, r3, #11
 800c28e:	b29b      	uxth	r3, r3
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	68fa      	ldr	r2, [r7, #12]
 800c294:	4413      	add	r3, r2
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4413      	add	r3, r2
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr

0800c2aa <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b086      	sub	sp, #24
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	60f8      	str	r0, [r7, #12]
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	7b1b      	ldrb	r3, [r3, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d101      	bne.n	800c2ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e023      	b.n	800c312 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7ff ff7a 	bl	800c1c4 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800c2d4:	8abb      	ldrh	r3, [r7, #20]
 800c2d6:	82fb      	strh	r3, [r7, #22]
 800c2d8:	8afa      	ldrh	r2, [r7, #22]
 800c2da:	8abb      	ldrh	r3, [r7, #20]
 800c2dc:	6879      	ldr	r1, [r7, #4]
 800c2de:	7b09      	ldrb	r1, [r1, #12]
 800c2e0:	440b      	add	r3, r1
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	da14      	bge.n	800c310 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	69da      	ldr	r2, [r3, #28]
 800c2ea:	8afb      	ldrh	r3, [r7, #22]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	881b      	ldrh	r3, [r3, #0]
 800c2f2:	897a      	ldrh	r2, [r7, #10]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d107      	bne.n	800c308 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	69da      	ldr	r2, [r3, #28]
 800c2fc:	8afb      	ldrh	r3, [r7, #22]
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c306:	e004      	b.n	800c312 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800c308:	8afb      	ldrh	r3, [r7, #22]
 800c30a:	3301      	adds	r3, #1
 800c30c:	82fb      	strh	r3, [r7, #22]
 800c30e:	e7e3      	b.n	800c2d8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
 800c320:	4801      	ldr	r0, [pc, #4]	; (800c328 <__tcf_0+0xc>)
 800c322:	f7ff fecf 	bl	800c0c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20008ec0 	.word	0x20008ec0

0800c32c <_Z23getFont_verdana_10_4bppv>:
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08a      	sub	sp, #40	; 0x28
 800c330:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800c332:	4b15      	ldr	r3, [pc, #84]	; (800c388 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d11f      	bne.n	800c37e <_Z23getFont_verdana_10_4bppv+0x52>
 800c33e:	2300      	movs	r3, #0
 800c340:	9309      	str	r3, [sp, #36]	; 0x24
 800c342:	2300      	movs	r3, #0
 800c344:	9308      	str	r3, [sp, #32]
 800c346:	233f      	movs	r3, #63	; 0x3f
 800c348:	9307      	str	r3, [sp, #28]
 800c34a:	4b10      	ldr	r3, [pc, #64]	; (800c38c <_Z23getFont_verdana_10_4bppv+0x60>)
 800c34c:	9306      	str	r3, [sp, #24]
 800c34e:	4b10      	ldr	r3, [pc, #64]	; (800c390 <_Z23getFont_verdana_10_4bppv+0x64>)
 800c350:	9305      	str	r3, [sp, #20]
 800c352:	2300      	movs	r3, #0
 800c354:	9304      	str	r3, [sp, #16]
 800c356:	2300      	movs	r3, #0
 800c358:	9303      	str	r3, [sp, #12]
 800c35a:	2301      	movs	r3, #1
 800c35c:	9302      	str	r3, [sp, #8]
 800c35e:	2304      	movs	r3, #4
 800c360:	9301      	str	r3, [sp, #4]
 800c362:	2300      	movs	r3, #0
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	230a      	movs	r3, #10
 800c368:	2201      	movs	r2, #1
 800c36a:	490a      	ldr	r1, [pc, #40]	; (800c394 <_Z23getFont_verdana_10_4bppv+0x68>)
 800c36c:	480a      	ldr	r0, [pc, #40]	; (800c398 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800c36e:	f7ff ff4d 	bl	800c20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c372:	4b05      	ldr	r3, [pc, #20]	; (800c388 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800c374:	2201      	movs	r2, #1
 800c376:	601a      	str	r2, [r3, #0]
 800c378:	4808      	ldr	r0, [pc, #32]	; (800c39c <_Z23getFont_verdana_10_4bppv+0x70>)
 800c37a:	f013 fe43 	bl	8020004 <atexit>
    return verdana_10_4bpp;
 800c37e:	4b06      	ldr	r3, [pc, #24]	; (800c398 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800c380:	4618      	mov	r0, r3
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20008ee4 	.word	0x20008ee4
 800c38c:	08025878 	.word	0x08025878
 800c390:	080217e4 	.word	0x080217e4
 800c394:	08025884 	.word	0x08025884
 800c398:	20008ec0 	.word	0x20008ec0
 800c39c:	0800c31d 	.word	0x0800c31d

0800c3a0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__tcf_0+0xc>)
 800c3a6:	f7ff fe8d 	bl	800c0c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20008ee8 	.word	0x20008ee8

0800c3b0 <_Z23getFont_verdana_40_4bppv>:
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08a      	sub	sp, #40	; 0x28
 800c3b4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800c3b6:	4b15      	ldr	r3, [pc, #84]	; (800c40c <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d11f      	bne.n	800c402 <_Z23getFont_verdana_40_4bppv+0x52>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	9308      	str	r3, [sp, #32]
 800c3ca:	233f      	movs	r3, #63	; 0x3f
 800c3cc:	9307      	str	r3, [sp, #28]
 800c3ce:	4b10      	ldr	r3, [pc, #64]	; (800c410 <_Z23getFont_verdana_40_4bppv+0x60>)
 800c3d0:	9306      	str	r3, [sp, #24]
 800c3d2:	4b10      	ldr	r3, [pc, #64]	; (800c414 <_Z23getFont_verdana_40_4bppv+0x64>)
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9304      	str	r3, [sp, #16]
 800c3da:	2300      	movs	r3, #0
 800c3dc:	9303      	str	r3, [sp, #12]
 800c3de:	2301      	movs	r3, #1
 800c3e0:	9302      	str	r3, [sp, #8]
 800c3e2:	2304      	movs	r3, #4
 800c3e4:	9301      	str	r3, [sp, #4]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	2328      	movs	r3, #40	; 0x28
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	490a      	ldr	r1, [pc, #40]	; (800c418 <_Z23getFont_verdana_40_4bppv+0x68>)
 800c3f0:	480a      	ldr	r0, [pc, #40]	; (800c41c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800c3f2:	f7ff ff0b 	bl	800c20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c3f6:	4b05      	ldr	r3, [pc, #20]	; (800c40c <_Z23getFont_verdana_40_4bppv+0x5c>)
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	4808      	ldr	r0, [pc, #32]	; (800c420 <_Z23getFont_verdana_40_4bppv+0x70>)
 800c3fe:	f013 fe01 	bl	8020004 <atexit>
    return verdana_40_4bpp;
 800c402:	4b06      	ldr	r3, [pc, #24]	; (800c41c <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800c404:	4618      	mov	r0, r3
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20008f0c 	.word	0x20008f0c
 800c410:	0802587c 	.word	0x0802587c
 800c414:	080217e8 	.word	0x080217e8
 800c418:	08025894 	.word	0x08025894
 800c41c:	20008ee8 	.word	0x20008ee8
 800c420:	0800c3a1 	.word	0x0800c3a1

0800c424 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdanab_38_4bpp[];
touchgfx::GeneratedFont& getFont_verdanab_38_4bpp();

touchgfx::GeneratedFont& getFont_verdanab_38_4bpp()
{
    static touchgfx::GeneratedFont verdanab_38_4bpp(glyphs_verdanab_38_4bpp, 14, 38, 1, 4, 1, 0, 0, unicodes_verdanab_38_4bpp, kerning_verdanab_38_4bpp, 63, 0, 0);
 800c424:	b580      	push	{r7, lr}
 800c426:	af00      	add	r7, sp, #0
 800c428:	4801      	ldr	r0, [pc, #4]	; (800c430 <__tcf_0+0xc>)
 800c42a:	f7ff fe4b 	bl	800c0c4 <_ZN8touchgfx13GeneratedFontD1Ev>
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	20008f10 	.word	0x20008f10

0800c434 <_Z24getFont_verdanab_38_4bppv>:
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08a      	sub	sp, #40	; 0x28
 800c438:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdanab_38_4bpp(glyphs_verdanab_38_4bpp, 14, 38, 1, 4, 1, 0, 0, unicodes_verdanab_38_4bpp, kerning_verdanab_38_4bpp, 63, 0, 0);
 800c43a:	4b15      	ldr	r3, [pc, #84]	; (800c490 <_Z24getFont_verdanab_38_4bppv+0x5c>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b00      	cmp	r3, #0
 800c444:	d11f      	bne.n	800c486 <_Z24getFont_verdanab_38_4bppv+0x52>
 800c446:	2300      	movs	r3, #0
 800c448:	9309      	str	r3, [sp, #36]	; 0x24
 800c44a:	2300      	movs	r3, #0
 800c44c:	9308      	str	r3, [sp, #32]
 800c44e:	233f      	movs	r3, #63	; 0x3f
 800c450:	9307      	str	r3, [sp, #28]
 800c452:	4b10      	ldr	r3, [pc, #64]	; (800c494 <_Z24getFont_verdanab_38_4bppv+0x60>)
 800c454:	9306      	str	r3, [sp, #24]
 800c456:	4b10      	ldr	r3, [pc, #64]	; (800c498 <_Z24getFont_verdanab_38_4bppv+0x64>)
 800c458:	9305      	str	r3, [sp, #20]
 800c45a:	2300      	movs	r3, #0
 800c45c:	9304      	str	r3, [sp, #16]
 800c45e:	2300      	movs	r3, #0
 800c460:	9303      	str	r3, [sp, #12]
 800c462:	2301      	movs	r3, #1
 800c464:	9302      	str	r3, [sp, #8]
 800c466:	2304      	movs	r3, #4
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	2301      	movs	r3, #1
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	2326      	movs	r3, #38	; 0x26
 800c470:	220e      	movs	r2, #14
 800c472:	490a      	ldr	r1, [pc, #40]	; (800c49c <_Z24getFont_verdanab_38_4bppv+0x68>)
 800c474:	480a      	ldr	r0, [pc, #40]	; (800c4a0 <_Z24getFont_verdanab_38_4bppv+0x6c>)
 800c476:	f7ff fec9 	bl	800c20c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800c47a:	4b05      	ldr	r3, [pc, #20]	; (800c490 <_Z24getFont_verdanab_38_4bppv+0x5c>)
 800c47c:	2201      	movs	r2, #1
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	4808      	ldr	r0, [pc, #32]	; (800c4a4 <_Z24getFont_verdanab_38_4bppv+0x70>)
 800c482:	f013 fdbf 	bl	8020004 <atexit>
    return verdanab_38_4bpp;
 800c486:	4b06      	ldr	r3, [pc, #24]	; (800c4a0 <_Z24getFont_verdanab_38_4bppv+0x6c>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20008f34 	.word	0x20008f34
 800c494:	08025880 	.word	0x08025880
 800c498:	080217ec 	.word	0x080217ec
 800c49c:	080258a4 	.word	0x080258a4
 800c4a0:	20008f10 	.word	0x20008f10
 800c4a4:	0800c425 	.word	0x0800c425

0800c4a8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
    {
    }
 800c4ca:	bf00      	nop
 800c4cc:	370c      	adds	r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800c4d6:	b480      	push	{r7}
 800c4d8:	b083      	sub	sp, #12
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	6039      	str	r1, [r7, #0]
    {
    }
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800c4ec:	b480      	push	{r7}
 800c4ee:	b083      	sub	sp, #12
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
    {
    }
 800c4f6:	bf00      	nop
 800c4f8:	370c      	adds	r7, #12
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c500:	4770      	bx	lr

0800c502 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c50e:	bf00      	nop
 800c510:	370c      	adds	r7, #12
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800c51a:	b480      	push	{r7}
 800c51c:	b083      	sub	sp, #12
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
    {
    }
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800c52e:	b480      	push	{r7}
 800c530:	b083      	sub	sp, #12
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
    {
    }
 800c536:	bf00      	nop
 800c538:	370c      	adds	r7, #12
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr
	...

0800c544 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
    {
 800c54c:	4a04      	ldr	r2, [pc, #16]	; (800c560 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	601a      	str	r2, [r3, #0]
    }
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4618      	mov	r0, r3
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr
 800c560:	080218e0 	.word	0x080218e0

0800c564 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
    }
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff ffe9 	bl	800c544 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c572:	2104      	movs	r1, #4
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f013 fcfb 	bl	801ff70 <_ZdlPvj>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800c58c:	4a07      	ldr	r2, [pc, #28]	; (800c5ac <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	601a      	str	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	605a      	str	r2, [r3, #4]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	721a      	strb	r2, [r3, #8]
    {
    }
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	370c      	adds	r7, #12
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr
 800c5ac:	080218c0 	.word	0x080218c0

0800c5b0 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
    {
 800c5b8:	4a04      	ldr	r2, [pc, #16]	; (800c5cc <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	601a      	str	r2, [r3, #0]
    }
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	080218c0 	.word	0x080218c0

0800c5d0 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
    }
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7ff ffe9 	bl	800c5b0 <_ZN8touchgfx10TransitionD1Ev>
 800c5de:	210c      	movs	r1, #12
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f013 fcc5 	bl	801ff70 <_ZdlPvj>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3708      	adds	r7, #8
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	bf00      	nop
 800c60e:	370c      	adds	r7, #12
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800c618:	b480      	push	{r7}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	605a      	str	r2, [r3, #4]
    }
 800c63c:	bf00      	nop
 800c63e:	370c      	adds	r7, #12
 800c640:	46bd      	mov	sp, r7
 800c642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c646:	4770      	bx	lr

0800c648 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
    {
    }
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
    {
 800c668:	4a04      	ldr	r2, [pc, #16]	; (800c67c <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	601a      	str	r2, [r3, #0]
    }
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	080218a8 	.word	0x080218a8

0800c680 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
    }
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff ffe9 	bl	800c660 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800c68e:	2104      	movs	r1, #4
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f013 fc6d 	bl	801ff70 <_ZdlPvj>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800c6a0:	b480      	push	{r7}
 800c6a2:	af00      	add	r7, sp, #0
    {
        return instance;
 800c6a4:	4b03      	ldr	r3, [pc, #12]	; (800c6b4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
    }
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	20009efc 	.word	0x20009efc

0800c6b8 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800c6b8:	b480      	push	{r7}
 800c6ba:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800c6bc:	4b0b      	ldr	r3, [pc, #44]	; (800c6ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d008      	beq.n	800c6da <_ZN8touchgfx3HAL3lcdEv+0x22>
 800c6c8:	4b08      	ldr	r3, [pc, #32]	; (800c6ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800c6d2:	4b06      	ldr	r3, [pc, #24]	; (800c6ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6d8:	e002      	b.n	800c6e0 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800c6da:	4b04      	ldr	r3, [pc, #16]	; (800c6ec <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	689b      	ldr	r3, [r3, #8]
        }
    }
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	20009efc 	.word	0x20009efc

0800c6f0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	4a05      	ldr	r2, [pc, #20]	; (800c710 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	601a      	str	r2, [r3, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff ff1f 	bl	800c544 <_ZN8touchgfx15UIEventListenerD1Ev>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4618      	mov	r0, r3
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	08022e84 	.word	0x08022e84

0800c714 <_ZN8touchgfx11ApplicationD0Ev>:
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff ffe7 	bl	800c6f0 <_ZN8touchgfx11ApplicationD1Ev>
 800c722:	f44f 7198 	mov.w	r1, #304	; 0x130
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f013 fc22 	bl	801ff70 <_ZdlPvj>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4618      	mov	r0, r3
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4618      	mov	r0, r3
 800c744:	f005 fedc 	bl	8012500 <_ZN8touchgfx11ApplicationC1Ev>
 800c748:	4a09      	ldr	r2, [pc, #36]	; (800c770 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	601a      	str	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	4a04      	ldr	r2, [pc, #16]	; (800c774 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800c762:	6013      	str	r3, [r2, #0]
    }
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4618      	mov	r0, r3
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	0802186c 	.word	0x0802186c
 800c774:	20009f68 	.word	0x20009f68

0800c778 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	4a05      	ldr	r2, [pc, #20]	; (800c798 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	601a      	str	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff ffb1 	bl	800c6f0 <_ZN8touchgfx11ApplicationD1Ev>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4618      	mov	r0, r3
 800c792:	3708      	adds	r7, #8
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	0802186c 	.word	0x0802186c

0800c79c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff ffe7 	bl	800c778 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c7aa:	f44f 719c 	mov.w	r1, #312	; 0x138
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f013 fbde 	bl	801ff70 <_ZdlPvj>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f804 	bl	800c7d4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800c7cc:	bf00      	nop
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b082      	sub	sp, #8
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00f      	beq.n	800c806 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	330c      	adds	r3, #12
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4798      	blx	r3
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800c802:	2301      	movs	r3, #1
 800c804:	e000      	b.n	800c808 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800c806:	2300      	movs	r3, #0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00e      	beq.n	800c82a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	3308      	adds	r3, #8
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4610      	mov	r0, r2
 800c820:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2200      	movs	r2, #0
 800c826:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800c82a:	bf00      	nop
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}

0800c832 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800c832:	b580      	push	{r7, lr}
 800c834:	b084      	sub	sp, #16
 800c836:	af00      	add	r7, sp, #0
 800c838:	60f8      	str	r0, [r7, #12]
 800c83a:	60b9      	str	r1, [r7, #8]
 800c83c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800c83e:	f005 fe3f 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 800c842:	4603      	mov	r3, r0
 800c844:	4618      	mov	r0, r3
 800c846:	f005 fe41 	bl	80124cc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d008      	beq.n	800c864 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	330c      	adds	r3, #12
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
    }
    if (*currentTrans)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d007      	beq.n	800c87c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
    }
    if (*currentScreen)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d008      	beq.n	800c896 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	3314      	adds	r3, #20
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4610      	mov	r0, r2
 800c894:	4798      	blx	r3
    }
    if (*currentPresenter)
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d008      	beq.n	800c8b0 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
    }
    if (*currentScreen)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d007      	beq.n	800c8c8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	4798      	blx	r3
    }
    if (*currentPresenter)
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d008      	beq.n	800c8e2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	681a      	ldr	r2, [r3, #0]
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3308      	adds	r3, #8
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4610      	mov	r0, r2
 800c8e0:	4798      	blx	r3
    }
}
 800c8e2:	bf00      	nop
 800c8e4:	3710      	adds	r7, #16
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b084      	sub	sp, #16
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	60f8      	str	r0, [r7, #12]
 800c8f2:	60b9      	str	r1, [r7, #8]
 800c8f4:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	330c      	adds	r3, #12
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	4798      	blx	r3
    newPresenter->activate();
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68b8      	ldr	r0, [r7, #8]
 800c90a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800c90c:	6879      	ldr	r1, [r7, #4]
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f006 fe86 	bl	8013620 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3310      	adds	r3, #16
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	4798      	blx	r3

    Application::getInstance()->draw();
 800c920:	f005 fdce 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 800c924:	4602      	mov	r2, r0
 800c926:	6813      	ldr	r3, [r2, #0]
 800c928:	3328      	adds	r3, #40	; 0x28
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4610      	mov	r0, r2
 800c92e:	4798      	blx	r3
}
 800c930:	bf00      	nop
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	683a      	ldr	r2, [r7, #0]
 800c946:	601a      	str	r2, [r3, #0]
    }
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	4a08      	ldr	r2, [pc, #32]	; (800c980 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 fa5b 	bl	800ce24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff ff01 	bl	800c778 <_ZN8touchgfx14MVPApplicationD1Ev>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	08021818 	.word	0x08021818

0800c984 <_ZN23FrontendApplicationBaseD0Ev>:
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f7ff ffe1 	bl	800c954 <_ZN23FrontendApplicationBaseD1Ev>
 800c992:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f013 faea 	bl	801ff70 <_ZdlPvj>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
	...

0800c9a8 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff fde6 	bl	800c584 <_ZN8touchgfx10TransitionC1Ev>
 800c9b8:	4a03      	ldr	r2, [pc, #12]	; (800c9c8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	601a      	str	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	080217f8 	.word	0x080217f8

0800c9cc <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	4a05      	ldr	r2, [pc, #20]	; (800c9ec <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7ff fde7 	bl	800c5b0 <_ZN8touchgfx10TransitionD1Ev>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	080217f8 	.word	0x080217f8

0800c9f0 <_ZN8touchgfx12NoTransitionD0Ev>:
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff ffe7 	bl	800c9cc <_ZN8touchgfx12NoTransitionD1Ev>
 800c9fe:	210c      	movs	r1, #12
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f013 fab5 	bl	801ff70 <_ZdlPvj>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	721a      	strb	r2, [r3, #8]
    }
 800ca1e:	bf00      	nop
 800ca20:	370c      	adds	r7, #12
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr

0800ca2a <_ZN13ModelListener4bindEP5Model>:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}
    virtual void analogUpdate(uint32_t value) {}

    void bind(Model* m)
 800ca2a:	b480      	push	{r7}
 800ca2c:	b083      	sub	sp, #12
 800ca2e:	af00      	add	r7, sp, #0
 800ca30:	6078      	str	r0, [r7, #4]
 800ca32:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	605a      	str	r2, [r3, #4]
    }
 800ca3a:	bf00      	nop
 800ca3c:	370c      	adds	r7, #12
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
	...

0800ca48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff fe6e 	bl	800c738 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ca5c:	4a13      	ldr	r2, [pc, #76]	; (800caac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 f89f 	bl	800cbac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	68ba      	ldr	r2, [r7, #8]
 800ca7a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ca7e:	f7ff fe0f 	bl	800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800ca82:	4602      	mov	r2, r0
 800ca84:	6813      	ldr	r3, [r2, #0]
 800ca86:	3308      	adds	r3, #8
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800ca90:	2000      	movs	r0, #0
 800ca92:	f000 ffc1 	bl	800da18 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ca96:	f7ff fe0f 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f00c fa02 	bl	8018ea6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	08021818 	.word	0x08021818

0800cab0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4618      	mov	r0, r3
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	4611      	mov	r1, r2
 800cad8:	4618      	mov	r0, r3
 800cada:	f7ff ffe9 	bl	800cab0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	605a      	str	r2, [r3, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	3308      	adds	r3, #8
 800caec:	3208      	adds	r2, #8
 800caee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800caf2:	e883 0003 	stmia.w	r3, {r0, r1}
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	4618      	mov	r0, r3
 800cafa:	3708      	adds	r7, #8
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800cb00:	b590      	push	{r4, r7, lr}
 800cb02:	b089      	sub	sp, #36	; 0x24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800cb0e:	4b10      	ldr	r3, [pc, #64]	; (800cb50 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800cb10:	61bb      	str	r3, [r7, #24]
 800cb12:	2300      	movs	r3, #0
 800cb14:	61fb      	str	r3, [r7, #28]
 800cb16:	f107 0008 	add.w	r0, r7, #8
 800cb1a:	f107 0318 	add.w	r3, r7, #24
 800cb1e:	cb0c      	ldmia	r3, {r2, r3}
 800cb20:	6879      	ldr	r1, [r7, #4]
 800cb22:	f000 f85f 	bl	800cbe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800cb26:	f107 0308 	add.w	r3, r7, #8
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f7ff ffcb 	bl	800cac8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800cb32:	f107 0308 	add.w	r3, r7, #8
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 f974 	bl	800ce24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800cb48:	bf00      	nop
 800cb4a:	3724      	adds	r7, #36	; 0x24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd90      	pop	{r4, r7, pc}
 800cb50:	0800cb55 	.word	0x0800cb55

0800cb54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af02      	add	r7, sp, #8
 800cb5a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cb68:	461a      	mov	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	4b04      	ldr	r3, [pc, #16]	; (800cb84 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800cb74:	4804      	ldr	r0, [pc, #16]	; (800cb88 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800cb76:	f000 f855 	bl	800cc24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800cb7a:	bf00      	nop
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	20009f5c 	.word	0x20009f5c
 800cb88:	20009f58 	.word	0x20009f58

0800cb8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	4a04      	ldr	r2, [pc, #16]	; (800cba8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr
 800cba8:	080218a8 	.word	0x080218a8

0800cbac <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7ff ffe8 	bl	800cb8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cbbc:	4a08      	ldr	r2, [pc, #32]	; (800cbe0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	605a      	str	r2, [r3, #4]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	609a      	str	r2, [r3, #8]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	60da      	str	r2, [r3, #12]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	08021854 	.word	0x08021854

0800cbe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800cbe4:	b580      	push	{r7, lr}
 800cbe6:	b084      	sub	sp, #16
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4639      	mov	r1, r7
 800cbf0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff ffc8 	bl	800cb8c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800cbfc:	4a08      	ldr	r2, [pc, #32]	; (800cc20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	463a      	mov	r2, r7
 800cc0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	08021854 	.word	0x08021854

0800cc24 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b089      	sub	sp, #36	; 0x24
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	60f8      	str	r0, [r7, #12]
 800cc2c:	60b9      	str	r1, [r7, #8]
 800cc2e:	607a      	str	r2, [r7, #4]
 800cc30:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	689a      	ldr	r2, [r3, #8]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3320      	adds	r3, #32
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4610      	mov	r0, r2
 800cc42:	4798      	blx	r3
 800cc44:	4603      	mov	r3, r0
 800cc46:	2bb7      	cmp	r3, #183	; 0xb7
 800cc48:	d805      	bhi.n	800cc56 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800cc4a:	4b4d      	ldr	r3, [pc, #308]	; (800cd80 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800cc4c:	4a4d      	ldr	r2, [pc, #308]	; (800cd84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800cc4e:	21c2      	movs	r1, #194	; 0xc2
 800cc50:	484d      	ldr	r0, [pc, #308]	; (800cd88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cc52:	f013 f9b9 	bl	801ffc8 <__assert_func>
 800cc56:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3320      	adds	r3, #32
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4610      	mov	r0, r2
 800cc68:	4798      	blx	r3
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b0f      	cmp	r3, #15
 800cc6e:	d805      	bhi.n	800cc7c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800cc70:	4b46      	ldr	r3, [pc, #280]	; (800cd8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800cc72:	4a44      	ldr	r2, [pc, #272]	; (800cd84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800cc74:	21c3      	movs	r1, #195	; 0xc3
 800cc76:	4844      	ldr	r0, [pc, #272]	; (800cd88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cc78:	f013 f9a6 	bl	801ffc8 <__assert_func>
 800cc7c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	68db      	ldr	r3, [r3, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3320      	adds	r3, #32
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	4798      	blx	r3
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b0b      	cmp	r3, #11
 800cc94:	d805      	bhi.n	800cca2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800cc96:	4b3e      	ldr	r3, [pc, #248]	; (800cd90 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800cc98:	4a3a      	ldr	r2, [pc, #232]	; (800cd84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800cc9a:	21c4      	movs	r1, #196	; 0xc4
 800cc9c:	483a      	ldr	r0, [pc, #232]	; (800cd88 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800cc9e:	f013 f993 	bl	801ffc8 <__assert_func>
 800cca2:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	68b9      	ldr	r1, [r7, #8]
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7ff fdc2 	bl	800c832 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	2100      	movs	r1, #0
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f86d 	bl	800cd94 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	200c      	movs	r0, #12
 800ccc0:	f7ff fbf2 	bl	800c4a8 <_ZnwjPv>
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	2c00      	cmp	r4, #0
 800ccc8:	d004      	beq.n	800ccd4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 800ccca:	4620      	mov	r0, r4
 800cccc:	f7ff fe6c 	bl	800c9a8 <_ZN8touchgfx12NoTransitionC1Ev>
 800ccd0:	4623      	mov	r3, r4
 800ccd2:	e000      	b.n	800ccd6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800ccd4:	4623      	mov	r3, r4
 800ccd6:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	689b      	ldr	r3, [r3, #8]
 800ccdc:	2100      	movs	r1, #0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f000 f86b 	bl	800cdba <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800cce4:	4603      	mov	r3, r0
 800cce6:	4619      	mov	r1, r3
 800cce8:	20b8      	movs	r0, #184	; 0xb8
 800ccea:	f7ff fbdd 	bl	800c4a8 <_ZnwjPv>
 800ccee:	4604      	mov	r4, r0
 800ccf0:	2c00      	cmp	r4, #0
 800ccf2:	d004      	beq.n	800ccfe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f001 f91d 	bl	800df34 <_ZN11Screen1ViewC1Ev>
 800ccfa:	4623      	mov	r3, r4
 800ccfc:	e000      	b.n	800cd00 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800ccfe:	4623      	mov	r3, r4
 800cd00:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	2100      	movs	r1, #0
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 f869 	bl	800cde0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	4619      	mov	r1, r3
 800cd12:	2010      	movs	r0, #16
 800cd14:	f7ff fbc8 	bl	800c4a8 <_ZnwjPv>
 800cd18:	4604      	mov	r4, r0
 800cd1a:	2c00      	cmp	r4, #0
 800cd1c:	d005      	beq.n	800cd2a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 800cd1e:	69b9      	ldr	r1, [r7, #24]
 800cd20:	4620      	mov	r0, r4
 800cd22:	f001 f885 	bl	800de30 <_ZN16Screen1PresenterC1ER11Screen1View>
 800cd26:	4623      	mov	r3, r4
 800cd28:	e000      	b.n	800cd2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800cd2a:	4623      	mov	r3, r4
 800cd2c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	69fa      	ldr	r2, [r7, #28]
 800cd32:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	697a      	ldr	r2, [r7, #20]
 800cd38:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d002      	beq.n	800cd4c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	e000      	b.n	800cd4e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4619      	mov	r1, r3
 800cd50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd52:	f7ff fdf1 	bl	800c938 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	3304      	adds	r3, #4
 800cd5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7ff fe64 	bl	800ca2a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800cd62:	69bb      	ldr	r3, [r7, #24]
 800cd64:	6979      	ldr	r1, [r7, #20]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f000 f84d 	bl	800ce06 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800cd6c:	69fa      	ldr	r2, [r7, #28]
 800cd6e:	6979      	ldr	r1, [r7, #20]
 800cd70:	69b8      	ldr	r0, [r7, #24]
 800cd72:	f7ff fdba 	bl	800c8ea <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800cd76:	697b      	ldr	r3, [r7, #20]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3724      	adds	r7, #36	; 0x24
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd90      	pop	{r4, r7, pc}
 800cd80:	0802110c 	.word	0x0802110c
 800cd84:	08021900 	.word	0x08021900
 800cd88:	0802119c 	.word	0x0802119c
 800cd8c:	080211e0 	.word	0x080211e0
 800cd90:	08021284 	.word	0x08021284

0800cd94 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3324      	adds	r3, #36	; 0x24
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	887a      	ldrh	r2, [r7, #2]
 800cdaa:	4611      	mov	r1, r2
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	4798      	blx	r3
 800cdb0:	4603      	mov	r3, r0
    }
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3708      	adds	r7, #8
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
 800cdc2:	460b      	mov	r3, r1
 800cdc4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3324      	adds	r3, #36	; 0x24
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	887a      	ldrh	r2, [r7, #2]
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	4798      	blx	r3
 800cdd6:	4603      	mov	r3, r0
    }
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	460b      	mov	r3, r1
 800cdea:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3324      	adds	r3, #36	; 0x24
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	887a      	ldrh	r2, [r7, #2]
 800cdf6:	4611      	mov	r1, r2
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	4798      	blx	r3
 800cdfc:	4603      	mov	r3, r0
    }
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3708      	adds	r7, #8
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ce06:	b480      	push	{r7}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ce16:	bf00      	nop
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
	...

0800ce24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	4a05      	ldr	r2, [pc, #20]	; (800ce44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	601a      	str	r2, [r3, #0]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f7ff fc13 	bl	800c660 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	08021854 	.word	0x08021854

0800ce48 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f7ff ffe7 	bl	800ce24 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ce56:	2110      	movs	r1, #16
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f013 f889 	bl	801ff70 <_ZdlPvj>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	68d2      	ldr	r2, [r2, #12]
 800ce78:	1052      	asrs	r2, r2, #1
 800ce7a:	1899      	adds	r1, r3, r2
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d102      	bne.n	800ce8e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	e00a      	b.n	800cea4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	68d2      	ldr	r2, [r2, #12]
 800ce96:	1052      	asrs	r2, r2, #1
 800ce98:	4413      	add	r3, r2
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6892      	ldr	r2, [r2, #8]
 800cea0:	4413      	add	r3, r2
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4608      	mov	r0, r1
 800cea6:	4798      	blx	r3
    }
 800cea8:	bf00      	nop
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d010      	beq.n	800cee2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d107      	bne.n	800ced8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d101      	bne.n	800ced8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ced4:	2301      	movs	r3, #1
 800ced6:	e000      	b.n	800ceda <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ced8:	2300      	movs	r3, #0
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d001      	beq.n	800cee2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800cede:	2301      	movs	r3, #1
 800cee0:	e000      	b.n	800cee4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800cee2:	2300      	movs	r3, #0
    }
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800cef0:	b480      	push	{r7}
 800cef2:	b083      	sub	sp, #12
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	601a      	str	r2, [r3, #0]
    }
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4618      	mov	r0, r3
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800cf0e:	b480      	push	{r7}
 800cf10:	b083      	sub	sp, #12
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	80da      	strh	r2, [r3, #6]
    }
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4618      	mov	r0, r3
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	4608      	mov	r0, r1
 800cf46:	4611      	mov	r1, r2
 800cf48:	461a      	mov	r2, r3
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	817b      	strh	r3, [r7, #10]
 800cf4e:	460b      	mov	r3, r1
 800cf50:	813b      	strh	r3, [r7, #8]
 800cf52:	4613      	mov	r3, r2
 800cf54:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	897a      	ldrh	r2, [r7, #10]
 800cf5a:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	893a      	ldrh	r2, [r7, #8]
 800cf60:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	88fa      	ldrh	r2, [r7, #6]
 800cf66:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8b3a      	ldrh	r2, [r7, #24]
 800cf6c:	80da      	strh	r2, [r3, #6]
    }
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	4618      	mov	r0, r3
 800cf72:	3714      	adds	r7, #20
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	887a      	ldrh	r2, [r7, #2]
 800cf8c:	801a      	strh	r2, [r3, #0]
    {
    }
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4618      	mov	r0, r3
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af02      	add	r7, sp, #8
 800cfa2:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800cfa4:	4a13      	ldr	r2, [pc, #76]	; (800cff4 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	601a      	str	r2, [r3, #0]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	1d18      	adds	r0, r3, #4
 800cfae:	2300      	movs	r3, #0
 800cfb0:	9300      	str	r3, [sp, #0]
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	f7ff ffc0 	bl	800cf3c <_ZN8touchgfx4RectC1Essss>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	330c      	adds	r3, #12
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff ffa4 	bl	800cf0e <_ZN8touchgfx4RectC1Ev>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	615a      	str	r2, [r3, #20]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	619a      	str	r2, [r3, #24]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	61da      	str	r2, [r3, #28]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	08022fbc 	.word	0x08022fbc

0800cff8 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	4a04      	ldr	r2, [pc, #16]	; (800d014 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4618      	mov	r0, r3
 800d00a:	370c      	adds	r7, #12
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	4770      	bx	lr
 800d014:	08022fbc 	.word	0x08022fbc

0800d018 <_ZN8touchgfx8DrawableD0Ev>:
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ffe9 	bl	800cff8 <_ZN8touchgfx8DrawableD1Ev>
 800d026:	2128      	movs	r1, #40	; 0x28
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f012 ffa1 	bl	801ff70 <_ZdlPvj>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4618      	mov	r0, r3
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	4608      	mov	r0, r1
 800d042:	4611      	mov	r1, r2
 800d044:	461a      	mov	r2, r3
 800d046:	4603      	mov	r3, r0
 800d048:	817b      	strh	r3, [r7, #10]
 800d04a:	460b      	mov	r3, r1
 800d04c:	813b      	strh	r3, [r7, #8]
 800d04e:	4613      	mov	r3, r2
 800d050:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	3334      	adds	r3, #52	; 0x34
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d05e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	4798      	blx	r3
        setWidth(width);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3338      	adds	r3, #56	; 0x38
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d072:	4611      	mov	r1, r2
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	4798      	blx	r3
        setHeight(height);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	333c      	adds	r3, #60	; 0x3c
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800d084:	4611      	mov	r1, r2
 800d086:	68f8      	ldr	r0, [r7, #12]
 800d088:	4798      	blx	r3
    }
 800d08a:	bf00      	nop
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800d092:	b480      	push	{r7}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	460b      	mov	r3, r1
 800d09c:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	887a      	ldrh	r2, [r7, #2]
 800d0a2:	809a      	strh	r2, [r3, #4]
    }
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	887a      	ldrh	r2, [r7, #2]
 800d0c0:	80da      	strh	r2, [r3, #6]
    }
 800d0c2:	bf00      	nop
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b082      	sub	sp, #8
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	807b      	strh	r3, [r7, #2]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	332c      	adds	r3, #44	; 0x2c
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	4798      	blx	r3
        setY(y);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3330      	adds	r3, #48	; 0x30
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	4798      	blx	r3
    }
 800d102:	bf00      	nop
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	887a      	ldrh	r2, [r7, #2]
 800d11a:	811a      	strh	r2, [r3, #8]
    }
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	460b      	mov	r3, r1
 800d132:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	887a      	ldrh	r2, [r7, #2]
 800d138:	815a      	strh	r2, [r3, #10]
    }
 800d13a:	bf00      	nop
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d144:	4770      	bx	lr

0800d146 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800d146:	b480      	push	{r7}
 800d148:	b083      	sub	sp, #12
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	bf00      	nop
 800d150:	370c      	adds	r7, #12
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800d15a:	b480      	push	{r7}
 800d15c:	b083      	sub	sp, #12
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	6039      	str	r1, [r7, #0]
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
 800d17a:	bf00      	nop
 800d17c:	370c      	adds	r7, #12
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr

0800d186 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800d186:	b480      	push	{r7}
 800d188:	b083      	sub	sp, #12
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	6039      	str	r1, [r7, #0]
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	bf00      	nop
 800d1a6:	370c      	adds	r7, #12
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr

0800d1b0 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800d1be:	4618      	mov	r0, r3
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800d1ca:	b480      	push	{r7}
 800d1cc:	b083      	sub	sp, #12
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b082      	sub	sp, #8
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	807b      	strh	r3, [r7, #2]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3354      	adds	r3, #84	; 0x54
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	8879      	ldrh	r1, [r7, #2]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800d204:	b292      	uxth	r2, r2
 800d206:	1a8a      	subs	r2, r1, r2
 800d208:	b292      	uxth	r2, r2
 800d20a:	b210      	sxth	r0, r2
 800d20c:	8839      	ldrh	r1, [r7, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800d214:	b292      	uxth	r2, r2
 800d216:	1a8a      	subs	r2, r1, r2
 800d218:	b292      	uxth	r2, r2
 800d21a:	b212      	sxth	r2, r2
 800d21c:	4601      	mov	r1, r0
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	4798      	blx	r3
    }
 800d222:	bf00      	nop
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d238:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d240:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d248:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800d24a:	bf00      	nop
 800d24c:	370c      	adds	r7, #12
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff ffe1 	bl	800d22a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	601a      	str	r2, [r3, #0]
    }
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
	...

0800d280 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	4a05      	ldr	r2, [pc, #20]	; (800d2a0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	601a      	str	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4618      	mov	r0, r3
 800d292:	f7ff feb1 	bl	800cff8 <_ZN8touchgfx8DrawableD1Ev>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4618      	mov	r0, r3
 800d29a:	3708      	adds	r7, #8
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	08022434 	.word	0x08022434

0800d2a4 <_ZN8touchgfx9ContainerD0Ev>:
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff ffe7 	bl	800d280 <_ZN8touchgfx9ContainerD1Ev>
 800d2b2:	212c      	movs	r1, #44	; 0x2c
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f012 fe5b 	bl	801ff70 <_ZdlPvj>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	4a06      	ldr	r2, [pc, #24]	; (800d2e8 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	601a      	str	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7ff ffd2 	bl	800d280 <_ZN8touchgfx9ContainerD1Ev>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3708      	adds	r7, #8
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	080230b4 	.word	0x080230b4

0800d2ec <_ZN8touchgfx6ScreenD0Ev>:
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff ffe5 	bl	800d2c4 <_ZN8touchgfx6ScreenD1Ev>
 800d2fa:	213c      	movs	r1, #60	; 0x3c
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f012 fe37 	bl	801ff70 <_ZdlPvj>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800d30c:	b480      	push	{r7}
 800d30e:	b083      	sub	sp, #12
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
    {
    }
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
    {
    }
 800d368:	bf00      	nop
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	3304      	adds	r3, #4
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	4618      	mov	r0, r3
 800d386:	f002 fea9 	bl	80100dc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800d38a:	bf00      	nop
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
	...

0800d394 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7ff fdfc 	bl	800cf9c <_ZN8touchgfx8DrawableC1Ev>
 800d3a4:	4a03      	ldr	r2, [pc, #12]	; (800d3b4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3708      	adds	r7, #8
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	08021af0 	.word	0x08021af0

0800d3b8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	4a05      	ldr	r2, [pc, #20]	; (800d3d8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7ff fe15 	bl	800cff8 <_ZN8touchgfx8DrawableD1Ev>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	08021af0 	.word	0x08021af0

0800d3dc <_ZN8touchgfx6WidgetD0Ev>:
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b082      	sub	sp, #8
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7ff ffe7 	bl	800d3b8 <_ZN8touchgfx6WidgetD1Ev>
 800d3ea:	2128      	movs	r1, #40	; 0x28
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f012 fdbf 	bl	801ff70 <_ZdlPvj>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	607b      	str	r3, [r7, #4]
 800d406:	460b      	mov	r3, r1
 800d408:	817b      	strh	r3, [r7, #10]
 800d40a:	4613      	mov	r3, r2
 800d40c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	4618      	mov	r0, r3
 800d412:	f7ff fecd 	bl	800d1b0 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d008      	beq.n	800d42e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	4618      	mov	r0, r3
 800d420:	f7ff fed3 	bl	800d1ca <_ZNK8touchgfx8Drawable11isTouchableEv>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	d001      	beq.n	800d42e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800d42e:	2300      	movs	r3, #0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d002      	beq.n	800d43a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	601a      	str	r2, [r3, #0]
        }
    }
 800d43a:	bf00      	nop
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
	...

0800d444 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff ff9f 	bl	800d394 <_ZN8touchgfx6WidgetC1Ev>
 800d456:	4a0b      	ldr	r2, [pc, #44]	; (800d484 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	3326      	adds	r3, #38	; 0x26
 800d460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fd89 	bl	800cf7c <_ZN8touchgfx6BitmapC1Et>
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	22ff      	movs	r2, #255	; 0xff
 800d46e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f003 ffd7 	bl	8011428 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	08022d3c 	.word	0x08022d3c

0800d488 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	807b      	strh	r3, [r7, #2]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	887a      	ldrh	r2, [r7, #2]
 800d498:	801a      	strh	r2, [r3, #0]
    }
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4618      	mov	r0, r3
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff ff6e 	bl	800d394 <_ZN8touchgfx6WidgetC1Ev>
 800d4b8:	4a13      	ldr	r2, [pc, #76]	; (800d508 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	3326      	adds	r3, #38	; 0x26
 800d4c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7ff ffde 	bl	800d488 <_ZN8touchgfx9TypedTextC1Et>
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	3328      	adds	r3, #40	; 0x28
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7ff fd0c 	bl	800cef0 <_ZN8touchgfx9colortypeC1Em>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	859a      	strh	r2, [r3, #44]	; 0x2c
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	22ff      	movs	r2, #255	; 0xff
 800d4e2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	08022c44 	.word	0x08022c44

0800d50c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af02      	add	r7, sp, #8
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800d516:	2300      	movs	r3, #0
 800d518:	9300      	str	r3, [sp, #0]
 800d51a:	2300      	movs	r3, #0
 800d51c:	2200      	movs	r2, #0
 800d51e:	2100      	movs	r1, #0
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fd0b 	bl	800cf3c <_ZN8touchgfx4RectC1Essss>
    }
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}

0800d52e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800d52e:	b480      	push	{r7}
 800d530:	b083      	sub	sp, #12
 800d532:	af00      	add	r7, sp, #0
 800d534:	6078      	str	r0, [r7, #4]
 800d536:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	683a      	ldr	r2, [r7, #0]
 800d53c:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800d53e:	bf00      	nop
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800d54a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d54c:	b085      	sub	sp, #20
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	460b      	mov	r3, r1
 800d554:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800d556:	687e      	ldr	r6, [r7, #4]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3330      	adds	r3, #48	; 0x30
 800d55e:	681c      	ldr	r4, [r3, #0]
 800d560:	887d      	ldrh	r5, [r7, #2]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f845 	bl	800d5f2 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800d568:	4603      	mov	r3, r0
 800d56a:	81bb      	strh	r3, [r7, #12]
 800d56c:	f107 030c 	add.w	r3, r7, #12
 800d570:	4618      	mov	r0, r3
 800d572:	f7fe fdc9 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 800d576:	4602      	mov	r2, r0
 800d578:	6813      	ldr	r3, [r2, #0]
 800d57a:	332c      	adds	r3, #44	; 0x2c
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	4610      	mov	r0, r2
 800d580:	4798      	blx	r3
 800d582:	4603      	mov	r3, r0
 800d584:	1aeb      	subs	r3, r5, r3
 800d586:	b29b      	uxth	r3, r3
 800d588:	b21b      	sxth	r3, r3
 800d58a:	4619      	mov	r1, r3
 800d58c:	4630      	mov	r0, r6
 800d58e:	47a0      	blx	r4
    }
 800d590:	bf00      	nop
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d598 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	807b      	strh	r3, [r7, #2]
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	332c      	adds	r3, #44	; 0x2c
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	4798      	blx	r3
        setBaselineY(baselineY);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3360      	adds	r3, #96	; 0x60
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f9b7 2000 	ldrsh.w	r2, [r7]
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	4798      	blx	r3
    }
 800d5cc:	bf00      	nop
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	460b      	mov	r3, r1
 800d5de:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	887a      	ldrh	r2, [r7, #2]
 800d5e4:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800d5fe:	4618      	mov	r0, r3
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
	...

0800d60c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b082      	sub	sp, #8
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	4a05      	ldr	r2, [pc, #20]	; (800d62c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff fecb 	bl	800d3b8 <_ZN8touchgfx6WidgetD1Ev>
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4618      	mov	r0, r3
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	08022c44 	.word	0x08022c44

0800d630 <_ZN8touchgfx8TextAreaD0Ev>:
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ffe7 	bl	800d60c <_ZN8touchgfx8TextAreaD1Ev>
 800d63e:	2134      	movs	r1, #52	; 0x34
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f012 fc95 	bl	801ff70 <_ZdlPvj>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase()
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
        : TextArea()
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff ff24 	bl	800d4a8 <_ZN8touchgfx8TextAreaC1Ev>
 800d660:	4a03      	ldr	r2, [pc, #12]	; (800d670 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	601a      	str	r2, [r3, #0]
    {
    }
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	08021a74 	.word	0x08021a74

0800d674 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	4a05      	ldr	r2, [pc, #20]	; (800d694 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	601a      	str	r2, [r3, #0]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4618      	mov	r0, r3
 800d686:	f7ff ffc1 	bl	800d60c <_ZN8touchgfx8TextAreaD1Ev>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	08021a74 	.word	0x08021a74

0800d698 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7ff ffe7 	bl	800d674 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d6a6:	2134      	movs	r1, #52	; 0x34
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f012 fc61 	bl	801ff70 <_ZdlPvj>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard()
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wildcard(0)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7ff ffc4 	bl	800d650 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800d6c8:	4a05      	ldr	r2, [pc, #20]	; (800d6e0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	08022cc0 	.word	0x08022cc0

0800d6e4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800d6e4:	b480      	push	{r7}
 800d6e6:	b083      	sub	sp, #12
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800d6f4:	bf00      	nop
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	4a05      	ldr	r2, [pc, #20]	; (800d720 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	601a      	str	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	4618      	mov	r0, r3
 800d712:	f7ff fdd7 	bl	800d2c4 <_ZN8touchgfx6ScreenD1Ev>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	4618      	mov	r0, r3
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	08021a40 	.word	0x08021a40

0800d724 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7ff ffe7 	bl	800d700 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d732:	2140      	movs	r1, #64	; 0x40
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f012 fc1b 	bl	801ff70 <_ZdlPvj>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4618      	mov	r0, r3
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	4a0a      	ldr	r2, [pc, #40]	; (800d778 <_ZN15Screen1ViewBaseD1Ev+0x34>)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	336c      	adds	r3, #108	; 0x6c
 800d756:	4618      	mov	r0, r3
 800d758:	f000 f90e 	bl	800d978 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3340      	adds	r3, #64	; 0x40
 800d760:	4618      	mov	r0, r3
 800d762:	f000 f8e7 	bl	800d934 <_ZN8touchgfx5ImageD1Ev>
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7ff ffc9 	bl	800d700 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4618      	mov	r0, r3
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	08021a0c 	.word	0x08021a0c

0800d77c <_ZN15Screen1ViewBaseD0Ev>:
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7ff ffdd 	bl	800d744 <_ZN15Screen1ViewBaseD1Ev>
 800d78a:	21b8      	movs	r1, #184	; 0xb8
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f012 fbef 	bl	801ff70 <_ZdlPvj>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4618      	mov	r0, r3
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800d79c:	b590      	push	{r4, r7, lr}
 800d79e:	b083      	sub	sp, #12
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	71fb      	strb	r3, [r7, #7]
 800d7a6:	460b      	mov	r3, r1
 800d7a8:	71bb      	strb	r3, [r7, #6]
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800d7ae:	f7fe ff77 	bl	800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d105      	bne.n	800d7c4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	; (800d7e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800d7ba:	4a0b      	ldr	r2, [pc, #44]	; (800d7e8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800d7bc:	2138      	movs	r1, #56	; 0x38
 800d7be:	480b      	ldr	r0, [pc, #44]	; (800d7ec <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800d7c0:	f012 fc02 	bl	801ffc8 <__assert_func>
 800d7c4:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800d7c6:	f7fe ff77 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 800d7ca:	6803      	ldr	r3, [r0, #0]
 800d7cc:	332c      	adds	r3, #44	; 0x2c
 800d7ce:	681c      	ldr	r4, [r3, #0]
 800d7d0:	797b      	ldrb	r3, [r7, #5]
 800d7d2:	79ba      	ldrb	r2, [r7, #6]
 800d7d4:	79f9      	ldrb	r1, [r7, #7]
 800d7d6:	47a0      	blx	r4
 800d7d8:	4603      	mov	r3, r0
    }
 800d7da:	4618      	mov	r0, r3
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd90      	pop	{r4, r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08021404 	.word	0x08021404
 800d7e8:	08021b50 	.word	0x08021b50
 800d7ec:	08021448 	.word	0x08021448

0800d7f0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase()
 800d7f0:	b590      	push	{r4, r7, lr}
 800d7f2:	b089      	sub	sp, #36	; 0x24
 800d7f4:	af02      	add	r7, sp, #8
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f000 f884 	bl	800d908 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800d800:	4a3b      	ldr	r2, [pc, #236]	; (800d8f0 <_ZN15Screen1ViewBaseC1Ev+0x100>)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d80c:	f107 030c 	add.w	r3, r7, #12
 800d810:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d814:	4618      	mov	r0, r3
 800d816:	f7ff fbb1 	bl	800cf7c <_ZN8touchgfx6BitmapC1Et>
 800d81a:	f107 030c 	add.w	r3, r7, #12
 800d81e:	4619      	mov	r1, r3
 800d820:	4620      	mov	r0, r4
 800d822:	f7ff fe0f 	bl	800d444 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	336c      	adds	r3, #108	; 0x6c
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7ff ff44 	bl	800d6b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    image1.setXY(0, 0);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	3340      	adds	r3, #64	; 0x40
 800d834:	2200      	movs	r2, #0
 800d836:	2100      	movs	r1, #0
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fc48 	bl	800d0ce <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ADCBG_ID));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d844:	f107 0310 	add.w	r3, r7, #16
 800d848:	2100      	movs	r1, #0
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7ff fb96 	bl	800cf7c <_ZN8touchgfx6BitmapC1Et>
 800d850:	f107 0310 	add.w	r3, r7, #16
 800d854:	4619      	mov	r1, r3
 800d856:	4620      	mov	r0, r4
 800d858:	f003 fde6 	bl	8011428 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    textAreaAD.setPosition(82, 96, 196, 49);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800d862:	2331      	movs	r3, #49	; 0x31
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	23c4      	movs	r3, #196	; 0xc4
 800d868:	2260      	movs	r2, #96	; 0x60
 800d86a:	2152      	movs	r1, #82	; 0x52
 800d86c:	f7ff fbe4 	bl	800d038 <_ZN8touchgfx8Drawable11setPositionEssss>
    textAreaAD.setColor(touchgfx::Color::getColorFrom24BitRGB(239, 80, 255));
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d876:	22ff      	movs	r2, #255	; 0xff
 800d878:	2150      	movs	r1, #80	; 0x50
 800d87a:	20ef      	movs	r0, #239	; 0xef
 800d87c:	f7ff ff8e 	bl	800d79c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800d880:	4603      	mov	r3, r0
 800d882:	4619      	mov	r1, r3
 800d884:	4620      	mov	r0, r4
 800d886:	f7ff fe52 	bl	800d52e <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textAreaAD.setLinespacing(0);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	336c      	adds	r3, #108	; 0x6c
 800d88e:	2100      	movs	r1, #0
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff fe9f 	bl	800d5d4 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textAreaADBuffer[0] = 0;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    textAreaAD.setWildcard(textAreaADBuffer);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	33a4      	adds	r3, #164	; 0xa4
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	4610      	mov	r0, r2
 800d8ac:	f7ff ff1a 	bl	800d6e4 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaAD.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800d8b6:	f107 0314 	add.w	r3, r7, #20
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fde3 	bl	800d488 <_ZN8touchgfx9TypedTextC1Et>
 800d8c2:	8ab9      	ldrh	r1, [r7, #20]
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f003 fd13 	bl	80112f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image1);
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3340      	adds	r3, #64	; 0x40
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	4610      	mov	r0, r2
 800d8d4:	f7ff fd4e 	bl	800d374 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textAreaAD);
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	336c      	adds	r3, #108	; 0x6c
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f7ff fd47 	bl	800d374 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	371c      	adds	r7, #28
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd90      	pop	{r4, r7, pc}
 800d8f0:	08021a0c 	.word	0x08021a0c

0800d8f4 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	b083      	sub	sp, #12
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]

}
 800d8fc:	bf00      	nop
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	4618      	mov	r0, r3
 800d914:	f005 fd0a 	bl	801332c <_ZN8touchgfx6ScreenC1Ev>
 800d918:	4a05      	ldr	r2, [pc, #20]	; (800d930 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	601a      	str	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2200      	movs	r2, #0
 800d922:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	08021a40 	.word	0x08021a40

0800d934 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	4a05      	ldr	r2, [pc, #20]	; (800d954 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	601a      	str	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff fd37 	bl	800d3b8 <_ZN8touchgfx6WidgetD1Ev>
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4618      	mov	r0, r3
 800d94e:	3708      	adds	r7, #8
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	08022d3c 	.word	0x08022d3c

0800d958 <_ZN8touchgfx5ImageD0Ev>:
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7ff ffe7 	bl	800d934 <_ZN8touchgfx5ImageD1Ev>
 800d966:	212c      	movs	r1, #44	; 0x2c
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f012 fb01 	bl	801ff70 <_ZdlPvj>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	4618      	mov	r0, r3
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	4a05      	ldr	r2, [pc, #20]	; (800d998 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	601a      	str	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4618      	mov	r0, r3
 800d98a:	f7ff fe73 	bl	800d674 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4618      	mov	r0, r3
 800d992:	3708      	adds	r7, #8
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	08022cc0 	.word	0x08022cc0

0800d99c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b082      	sub	sp, #8
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7ff ffe7 	bl	800d978 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800d9aa:	2138      	movs	r1, #56	; 0x38
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f012 fadf 	bl	801ff70 <_ZdlPvj>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800d9bc:	b480      	push	{r7}
 800d9be:	af00      	add	r7, sp, #0
    return bitmap_database;
 800d9c0:	4b02      	ldr	r3, [pc, #8]	; (800d9cc <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	08021bac 	.word	0x08021bac

0800d9d0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800d9d4:	2303      	movs	r3, #3
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800d9ee:	4a07      	ldr	r2, [pc, #28]	; (800da0c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6013      	str	r3, [r2, #0]
        fonts = f;
 800d9f4:	4a06      	ldr	r2, [pc, #24]	; (800da10 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800d9fa:	4a06      	ldr	r2, [pc, #24]	; (800da14 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800d9fc:	88fb      	ldrh	r3, [r7, #6]
 800d9fe:	8013      	strh	r3, [r2, #0]
    }
 800da00:	bf00      	nop
 800da02:	3714      	adds	r7, #20
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	20009f6c 	.word	0x20009f6c
 800da10:	20009f74 	.word	0x20009f74
 800da14:	20009f70 	.word	0x20009f70

0800da18 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800da18:	b590      	push	{r4, r7, lr}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800da26:	88fb      	ldrh	r3, [r7, #6]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d127      	bne.n	800da7c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800da2c:	88fb      	ldrh	r3, [r7, #6]
 800da2e:	4a1e      	ldr	r2, [pc, #120]	; (800daa8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800da30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d016      	beq.n	800da66 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800da38:	88fb      	ldrh	r3, [r7, #6]
 800da3a:	4a1b      	ldr	r2, [pc, #108]	; (800daa8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800da3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da40:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68ba      	ldr	r2, [r7, #8]
 800da48:	4413      	add	r3, r2
 800da4a:	4a18      	ldr	r2, [pc, #96]	; (800daac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800da4c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	4413      	add	r3, r2
 800da56:	4a16      	ldr	r2, [pc, #88]	; (800dab0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800da58:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	4413      	add	r3, r2
 800da62:	60fb      	str	r3, [r7, #12]
 800da64:	e00a      	b.n	800da7c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800da68:	4a12      	ldr	r2, [pc, #72]	; (800dab4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800da6a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800da6c:	4a12      	ldr	r2, [pc, #72]	; (800dab8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800da6e:	4b10      	ldr	r3, [pc, #64]	; (800dab0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800da70:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800da72:	88fb      	ldrh	r3, [r7, #6]
 800da74:	4a11      	ldr	r2, [pc, #68]	; (800dabc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800da76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da7a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00d      	beq.n	800da9e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800da82:	4a0f      	ldr	r2, [pc, #60]	; (800dac0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800da84:	88fb      	ldrh	r3, [r7, #6]
 800da86:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800da88:	f000 f83e 	bl	800db08 <_ZN17TypedTextDatabase8getFontsEv>
 800da8c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800da8e:	f000 f833 	bl	800daf8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800da92:	4603      	mov	r3, r0
 800da94:	461a      	mov	r2, r3
 800da96:	4621      	mov	r1, r4
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f7ff ffa1 	bl	800d9e0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800da9e:	bf00      	nop
 800daa0:	3714      	adds	r7, #20
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd90      	pop	{r4, r7, pc}
 800daa6:	bf00      	nop
 800daa8:	20008f48 	.word	0x20008f48
 800daac:	20008f50 	.word	0x20008f50
 800dab0:	20008f54 	.word	0x20008f54
 800dab4:	0809616c 	.word	0x0809616c
 800dab8:	08096168 	.word	0x08096168
 800dabc:	08096178 	.word	0x08096178
 800dac0:	20008f4c 	.word	0x20008f4c

0800dac4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800dad0:	4b07      	ldr	r3, [pc, #28]	; (800daf0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	4b07      	ldr	r3, [pc, #28]	; (800daf4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800dad6:	6819      	ldr	r1, [r3, #0]
 800dad8:	887b      	ldrh	r3, [r7, #2]
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	440b      	add	r3, r1
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	4413      	add	r3, r2
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr
 800daf0:	20008f50 	.word	0x20008f50
 800daf4:	20008f54 	.word	0x20008f54

0800daf8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800dafc:	2301      	movs	r3, #1
}
 800dafe:	4618      	mov	r0, r3
 800db00:	46bd      	mov	sp, r7
 800db02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db06:	4770      	bx	lr

0800db08 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800db08:	b480      	push	{r7}
 800db0a:	af00      	add	r7, sp, #0
    return _fonts;
 800db0c:	4b02      	ldr	r3, [pc, #8]	; (800db18 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800db0e:	4618      	mov	r0, r3
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	20008f58 	.word	0x20008f58

0800db1c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d113      	bne.n	800db54 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db32:	4293      	cmp	r3, r2
 800db34:	d10e      	bne.n	800db54 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdanab_38_4bpp()),
 800db36:	f7fe fc7d 	bl	800c434 <_Z24getFont_verdanab_38_4bppv>
 800db3a:	4602      	mov	r2, r0
};
 800db3c:	4b07      	ldr	r3, [pc, #28]	; (800db5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800db3e:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800db40:	f7fe fc36 	bl	800c3b0 <_Z23getFont_verdana_40_4bppv>
 800db44:	4602      	mov	r2, r0
};
 800db46:	4b05      	ldr	r3, [pc, #20]	; (800db5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800db48:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800db4a:	f7fe fbef 	bl	800c32c <_Z23getFont_verdana_10_4bppv>
 800db4e:	4602      	mov	r2, r0
};
 800db50:	4b02      	ldr	r3, [pc, #8]	; (800db5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800db52:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	20008f58 	.word	0x20008f58

0800db60 <_GLOBAL__sub_I__fonts>:
 800db60:	b580      	push	{r7, lr}
 800db62:	af00      	add	r7, sp, #0
 800db64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800db68:	2001      	movs	r0, #1
 800db6a:	f7ff ffd7 	bl	800db1c <_Z41__static_initialization_and_destruction_0ii>
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	4a05      	ldr	r2, [pc, #20]	; (800db90 <_ZN19FrontendApplicationD1Ev+0x20>)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fee7 	bl	800c954 <_ZN23FrontendApplicationBaseD1Ev>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4618      	mov	r0, r3
 800db8a:	3708      	adds	r7, #8
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	08021bf0 	.word	0x08021bf0

0800db94 <_ZN19FrontendApplicationD0Ev>:
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff ffe7 	bl	800db70 <_ZN19FrontendApplicationD1Ev>
 800dba2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f012 f9e2 	bl	801ff70 <_ZdlPvj>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}

0800dbb6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800dbb6:	b580      	push	{r7, lr}
 800dbb8:	b082      	sub	sp, #8
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 f82d 	bl	800dc24 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f004 fb4b 	bl	8012268 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
	...

0800dbdc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	68b9      	ldr	r1, [r7, #8]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe ff2a 	bl	800ca48 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800dbf4:	4a03      	ldr	r2, [pc, #12]	; (800dc04 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	601a      	str	r2, [r3, #0]
{

}
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	08021bf0 	.word	0x08021bf0

0800dc08 <_ZN5ModelC1Ev>:
#include <cmsis_os2.h>

extern osSemaphoreId_t binarySemAnalogHandle;
extern uint16_t uhADCxConvertedValue[10];

Model::Model() : modelListener(0)
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	601a      	str	r2, [r3, #0]
{

}
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <_ZN5Model4tickEv>:

void Model::tick()
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
	if(binarySemAnalogHandle != NULL)
 800dc2c:	4b0c      	ldr	r3, [pc, #48]	; (800dc60 <_ZN5Model4tickEv+0x3c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d010      	beq.n	800dc56 <_ZN5Model4tickEv+0x32>
	{
		if(osSemaphoreAcquire(binarySemAnalogHandle, 100) == osOK)
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <_ZN5Model4tickEv+0x3c>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2164      	movs	r1, #100	; 0x64
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fa fee0 	bl	8008a00 <osSemaphoreAcquire>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	bf0c      	ite	eq
 800dc46:	2301      	moveq	r3, #1
 800dc48:	2300      	movne	r3, #0
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <_ZN5Model4tickEv+0x32>
		{
			analogUpdate();
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 f807 	bl	800dc64 <_ZN5Model12analogUpdateEv>
		}
	}

}
 800dc56:	bf00      	nop
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	2000a360 	.word	0x2000a360

0800dc64 <_ZN5Model12analogUpdateEv>:

void Model::analogUpdate()
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
	uint32_t sum = 0;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 10; i++)
 800dc70:	2300      	movs	r3, #0
 800dc72:	60bb      	str	r3, [r7, #8]
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2b09      	cmp	r3, #9
 800dc78:	dc0b      	bgt.n	800dc92 <_ZN5Model12analogUpdateEv+0x2e>
	{
		sum += uhADCxConvertedValue[i];
 800dc7a:	4a0f      	ldr	r2, [pc, #60]	; (800dcb8 <_ZN5Model12analogUpdateEv+0x54>)
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc82:	461a      	mov	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	4413      	add	r3, r2
 800dc88:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 10; i++)
 800dc8a:	68bb      	ldr	r3, [r7, #8]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	60bb      	str	r3, [r7, #8]
 800dc90:	e7f0      	b.n	800dc74 <_ZN5Model12analogUpdateEv+0x10>
	}
	modelListener->analogUpdate(sum / 10);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6818      	ldr	r0, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	3308      	adds	r3, #8
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	4906      	ldr	r1, [pc, #24]	; (800dcbc <_ZN5Model12analogUpdateEv+0x58>)
 800dca4:	fba1 1202 	umull	r1, r2, r1, r2
 800dca8:	08d2      	lsrs	r2, r2, #3
 800dcaa:	4611      	mov	r1, r2
 800dcac:	4798      	blx	r3
}
 800dcae:	bf00      	nop
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	2000018c 	.word	0x2000018c
 800dcbc:	cccccccd 	.word	0xcccccccd

0800dcc0 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
    {
    }
 800dcc8:	bf00      	nop
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
    {
    }
 800dcdc:	bf00      	nop
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
    {
 800dcf0:	4a04      	ldr	r2, [pc, #16]	; (800dd04 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	601a      	str	r2, [r3, #0]
    }
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	08021c70 	.word	0x08021c70

0800dd08 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
    }
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f7ff ffe9 	bl	800dce8 <_ZN8touchgfx9PresenterD1Ev>
 800dd16:	2104      	movs	r1, #4
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f012 f929 	bl	801ff70 <_ZdlPvj>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
    {
 800dd30:	4a04      	ldr	r2, [pc, #16]	; (800dd44 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	601a      	str	r2, [r3, #0]
    }
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	370c      	adds	r7, #12
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr
 800dd44:	08021c70 	.word	0x08021c70

0800dd48 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800dd48:	b480      	push	{r7}
 800dd4a:	b083      	sub	sp, #12
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	4a06      	ldr	r2, [pc, #24]	; (800dd6c <_ZN13ModelListenerC1Ev+0x24>)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	601a      	str	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	605a      	str	r2, [r3, #4]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	370c      	adds	r7, #12
 800dd62:	46bd      	mov	sp, r7
 800dd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd68:	4770      	bx	lr
 800dd6a:	bf00      	nop
 800dd6c:	08021c5c 	.word	0x08021c5c

0800dd70 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	4a04      	ldr	r2, [pc, #16]	; (800dd8c <_ZN13ModelListenerD1Ev+0x1c>)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	601a      	str	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	4618      	mov	r0, r3
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	08021c5c 	.word	0x08021c5c

0800dd90 <_ZN13ModelListenerD0Ev>:
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f7ff ffe9 	bl	800dd70 <_ZN13ModelListenerD1Ev>
 800dd9e:	2108      	movs	r1, #8
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f012 f8e5 	bl	801ff70 <_ZdlPvj>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3708      	adds	r7, #8
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <_ZN13ModelListener12analogUpdateEm>:
    virtual void analogUpdate(uint32_t value) {}
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
 800ddba:	bf00      	nop
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr
	...

0800ddc8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	4a09      	ldr	r2, [pc, #36]	; (800ddf8 <_ZN16Screen1PresenterD1Ev+0x30>)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	4a09      	ldr	r2, [pc, #36]	; (800ddfc <_ZN16Screen1PresenterD1Ev+0x34>)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	605a      	str	r2, [r3, #4]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	3304      	adds	r3, #4
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7ff ffc5 	bl	800dd70 <_ZN13ModelListenerD1Ev>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7ff ff7d 	bl	800dce8 <_ZN8touchgfx9PresenterD1Ev>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	08021c2c 	.word	0x08021c2c
 800ddfc:	08021c48 	.word	0x08021c48

0800de00 <_ZThn4_N16Screen1PresenterD1Ev>:
 800de00:	f1a0 0004 	sub.w	r0, r0, #4
 800de04:	e7e0      	b.n	800ddc8 <_ZN16Screen1PresenterD1Ev>
 800de06:	bf00      	nop

0800de08 <_ZN16Screen1PresenterD0Ev>:
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff ffd9 	bl	800ddc8 <_ZN16Screen1PresenterD1Ev>
 800de16:	2110      	movs	r1, #16
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f012 f8a9 	bl	801ff70 <_ZdlPvj>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <_ZThn4_N16Screen1PresenterD0Ev>:
 800de28:	f1a0 0004 	sub.w	r0, r0, #4
 800de2c:	e7ec      	b.n	800de08 <_ZN16Screen1PresenterD0Ev>
	...

0800de30 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800de30:	b580      	push	{r7, lr}
 800de32:	b082      	sub	sp, #8
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]
    : view(v)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7ff ff73 	bl	800dd28 <_ZN8touchgfx9PresenterC1Ev>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	3304      	adds	r3, #4
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff ff7e 	bl	800dd48 <_ZN13ModelListenerC1Ev>
 800de4c:	4a06      	ldr	r2, [pc, #24]	; (800de68 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	4a06      	ldr	r2, [pc, #24]	; (800de6c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	605a      	str	r2, [r3, #4]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	683a      	ldr	r2, [r7, #0]
 800de5c:	60da      	str	r2, [r3, #12]
{

}
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4618      	mov	r0, r3
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}
 800de68:	08021c2c 	.word	0x08021c2c
 800de6c:	08021c48 	.word	0x08021c48

0800de70 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]

}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]

}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <_ZN16Screen1Presenter12analogUpdateEm>:

void Screen1Presenter::analogUpdate(uint32_t value)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
	view.analogUpdate(value);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	68da      	ldr	r2, [r3, #12]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	332c      	adds	r3, #44	; 0x2c
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	4610      	mov	r0, r2
 800deb4:	4798      	blx	r3
}
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}

0800debe <_ZThn4_N16Screen1Presenter12analogUpdateEm>:

    virtual void analogUpdate(uint32_t value);
 800debe:	f1a0 0004 	sub.w	r0, r0, #4
 800dec2:	f7ff bfe9 	b.w	800de98 <_ZN16Screen1Presenter12analogUpdateEm>

0800dec6 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     *          touchgfx::Unicode::snprintfFloats(dst, dstSize, tmpfmt, values);
     *          \endcode
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 800dec6:	b580      	push	{r7, lr}
 800dec8:	b084      	sub	sp, #16
 800deca:	af00      	add	r7, sp, #0
 800decc:	60f8      	str	r0, [r7, #12]
 800dece:	460b      	mov	r3, r1
 800ded0:	607a      	str	r2, [r7, #4]
 800ded2:	ed87 0a00 	vstr	s0, [r7]
 800ded6:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 800ded8:	463b      	mov	r3, r7
 800deda:	8979      	ldrh	r1, [r7, #10]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	68f8      	ldr	r0, [r7, #12]
 800dee0:	f006 face 	bl	8014480 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 800dee4:	4603      	mov	r3, r0
    }
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	4a05      	ldr	r2, [pc, #20]	; (800df10 <_ZN11Screen1ViewD1Ev+0x20>)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff fc1f 	bl	800d744 <_ZN15Screen1ViewBaseD1Ev>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4618      	mov	r0, r3
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	08021c88 	.word	0x08021c88

0800df14 <_ZN11Screen1ViewD0Ev>:
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7ff ffe7 	bl	800def0 <_ZN11Screen1ViewD1Ev>
 800df22:	21b8      	movs	r1, #184	; 0xb8
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f012 f823 	bl	801ff70 <_ZdlPvj>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include "string.h"

Screen1View::Screen1View()
 800df34:	b580      	push	{r7, lr}
 800df36:	b082      	sub	sp, #8
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4618      	mov	r0, r3
 800df40:	f7ff fc56 	bl	800d7f0 <_ZN15Screen1ViewBaseC1Ev>
 800df44:	4a03      	ldr	r2, [pc, #12]	; (800df54 <_ZN11Screen1ViewC1Ev+0x20>)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	601a      	str	r2, [r3, #0]
{

}
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4618      	mov	r0, r3
 800df4e:	3708      	adds	r7, #8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	08021c88 	.word	0x08021c88

0800df58 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fcc6 	bl	800d8f4 <_ZN15Screen1ViewBase11setupScreenEv>
}
 800df68:	bf00      	nop
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f7ff f9da 	bl	800d334 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800df80:	bf00      	nop
 800df82:	3708      	adds	r7, #8
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}

0800df88 <_ZN11Screen1View12analogUpdateEm>:

void Screen1View::analogUpdate(uint32_t value)
{
 800df88:	b590      	push	{r4, r7, lr}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
	memset(&textAreaADBuffer, 0, TEXTAREAAD_SIZE);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	33a4      	adds	r3, #164	; 0xa4
 800df96:	220a      	movs	r2, #10
 800df98:	2100      	movs	r1, #0
 800df9a:	4618      	mov	r0, r3
 800df9c:	f012 f89d 	bl	80200da <memset>
	Unicode::snprintfFloat(textAreaADBuffer, sizeof(textAreaADBuffer), "%.3f", value * 0.000805664 ); // 3.3/4096 = 0.000805664
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800dfa6:	6838      	ldr	r0, [r7, #0]
 800dfa8:	f7f2 fab4 	bl	8000514 <__aeabi_ui2d>
 800dfac:	a30f      	add	r3, pc, #60	; (adr r3, 800dfec <_ZN11Screen1View12analogUpdateEm+0x64>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 fb29 	bl	8000608 <__aeabi_dmul>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4610      	mov	r0, r2
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	f7f2 fd35 	bl	8000a2c <__aeabi_d2f>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	ee00 3a10 	vmov	s0, r3
 800dfc8:	4a07      	ldr	r2, [pc, #28]	; (800dfe8 <_ZN11Screen1View12analogUpdateEm+0x60>)
 800dfca:	2114      	movs	r1, #20
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f7ff ff7a 	bl	800dec6 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	textAreaAD.invalidate();
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	336c      	adds	r3, #108	; 0x6c
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f004 fe9c 	bl	8012d14 <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd90      	pop	{r4, r7, pc}
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	08021564 	.word	0x08021564
 800dfec:	440a4e96 	.word	0x440a4e96
 800dff0:	3f4a6666 	.word	0x3f4a6666

0800dff4 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
    {
 800dffc:	4a04      	ldr	r2, [pc, #16]	; (800e010 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	601a      	str	r2, [r3, #0]
    }
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr
 800e010:	08021cd8 	.word	0x08021cd8

0800e014 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
    }
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f7ff ffe9 	bl	800dff4 <_ZN8touchgfx15TouchControllerD1Ev>
 800e022:	2104      	movs	r1, #4
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f011 ffa3 	bl	801ff70 <_ZdlPvj>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}

0800e034 <_ZN20STM32TouchController4initEv>:

uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize);
void    BSP_TS_GetState(TS_StateTypeDef* TsState);

void STM32TouchController::init()
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b082      	sub	sp, #8
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 800e03c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e040:	20f0      	movs	r0, #240	; 0xf0
 800e042:	f000 f821 	bl	800e088 <_Z11BSP_TS_Inittt>
}
 800e046:	bf00      	nop
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b086      	sub	sp, #24
 800e052:	af00      	add	r7, sp, #0
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 800e05a:	f107 0310 	add.w	r3, r7, #16
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f850 	bl	800e104 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800e064:	8a3b      	ldrh	r3, [r7, #16]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d009      	beq.n	800e07e <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.X;
 800e06a:	8a7b      	ldrh	r3, [r7, #18]
 800e06c:	461a      	mov	r2, r3
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	601a      	str	r2, [r3, #0]
        y = state.Y;
 800e072:	8abb      	ldrh	r3, [r7, #20]
 800e074:	461a      	mov	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	601a      	str	r2, [r3, #0]
        return true;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	4603      	mov	r3, r0
 800e090:	460a      	mov	r2, r1
 800e092:	80fb      	strh	r3, [r7, #6]
 800e094:	4613      	mov	r3, r2
 800e096:	80bb      	strh	r3, [r7, #4]
    uint8_t ret = TS_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	73fb      	strb	r3, [r7, #15]

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 800e09c:	4a15      	ldr	r2, [pc, #84]	; (800e0f4 <_Z11BSP_TS_Inittt+0x6c>)
 800e09e:	88fb      	ldrh	r3, [r7, #6]
 800e0a0:	8013      	strh	r3, [r2, #0]
    TsYBoundary = YSize;
 800e0a2:	4a15      	ldr	r2, [pc, #84]	; (800e0f8 <_Z11BSP_TS_Inittt+0x70>)
 800e0a4:	88bb      	ldrh	r3, [r7, #4]
 800e0a6:	8013      	strh	r3, [r2, #0]

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800e0a8:	4b14      	ldr	r3, [pc, #80]	; (800e0fc <_Z11BSP_TS_Inittt+0x74>)
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	2082      	movs	r0, #130	; 0x82
 800e0ae:	4798      	blx	r3
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	f640 0311 	movw	r3, #2065	; 0x811
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	bf0c      	ite	eq
 800e0bc:	2301      	moveq	r3, #1
 800e0be:	2300      	movne	r3, #0
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d004      	beq.n	800e0d0 <_Z11BSP_TS_Inittt+0x48>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 800e0c6:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <_Z11BSP_TS_Inittt+0x78>)
 800e0c8:	4a0c      	ldr	r2, [pc, #48]	; (800e0fc <_Z11BSP_TS_Inittt+0x74>)
 800e0ca:	601a      	str	r2, [r3, #0]

        ret = TS_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == TS_OK)
 800e0d0:	7bfb      	ldrb	r3, [r7, #15]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d109      	bne.n	800e0ea <_Z11BSP_TS_Inittt+0x62>
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 800e0d6:	4b0a      	ldr	r3, [pc, #40]	; (800e100 <_Z11BSP_TS_Inittt+0x78>)
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2082      	movs	r0, #130	; 0x82
 800e0de:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <_Z11BSP_TS_Inittt+0x78>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	2082      	movs	r0, #130	; 0x82
 800e0e8:	4798      	blx	r3
    }

    return ret;
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	20008f68 	.word	0x20008f68
 800e0f8:	20008f6a 	.word	0x20008f6a
 800e0fc:	20000048 	.word	0x20000048
 800e100:	20008f64 	.word	0x20008f64

0800e104 <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800e10c:	4b4f      	ldr	r3, [pc, #316]	; (800e24c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	2082      	movs	r0, #130	; 0x82
 800e114:	4798      	blx	r3
 800e116:	4603      	mov	r3, r0
 800e118:	b29a      	uxth	r2, r3
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	801a      	strh	r2, [r3, #0]

    if (TsState->TouchDetected)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	881b      	ldrh	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	f000 808d 	beq.w	800e242 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x13e>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800e128:	4b48      	ldr	r3, [pc, #288]	; (800e24c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	695b      	ldr	r3, [r3, #20]
 800e12e:	f107 020c 	add.w	r2, r7, #12
 800e132:	f107 010e 	add.w	r1, r7, #14
 800e136:	2082      	movs	r0, #130	; 0x82
 800e138:	4798      	blx	r3

        /* Y value first correction */
        y -= 360;
 800e13a:	89bb      	ldrh	r3, [r7, #12]
 800e13c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800e140:	b29b      	uxth	r3, r3
 800e142:	81bb      	strh	r3, [r7, #12]

        /* Y value second correction */
        yr = y / 11;
 800e144:	89bb      	ldrh	r3, [r7, #12]
 800e146:	4a42      	ldr	r2, [pc, #264]	; (800e250 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x14c>)
 800e148:	fba2 2303 	umull	r2, r3, r2, r3
 800e14c:	08db      	lsrs	r3, r3, #3
 800e14e:	82bb      	strh	r3, [r7, #20]

        /* Return y position value */
        if (yr <= 0)
 800e150:	8abb      	ldrh	r3, [r7, #20]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d102      	bne.n	800e15c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x58>
        {
            yr = 0;
 800e156:	2300      	movs	r3, #0
 800e158:	82bb      	strh	r3, [r7, #20]
 800e15a:	e008      	b.n	800e16e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        }
        else if (yr > TsYBoundary)
 800e15c:	4b3d      	ldr	r3, [pc, #244]	; (800e254 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 800e15e:	881b      	ldrh	r3, [r3, #0]
 800e160:	8aba      	ldrh	r2, [r7, #20]
 800e162:	429a      	cmp	r2, r3
 800e164:	d903      	bls.n	800e16e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        {
            yr = TsYBoundary - 1;
 800e166:	4b3b      	ldr	r3, [pc, #236]	; (800e254 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	3b01      	subs	r3, #1
 800e16c:	82bb      	strh	r3, [r7, #20]
        }
        else
        {}
        y = yr;
 800e16e:	8abb      	ldrh	r3, [r7, #20]
 800e170:	81bb      	strh	r3, [r7, #12]

        /* X value first correction */
        if (x <= 3000)
 800e172:	89fb      	ldrh	r3, [r7, #14]
 800e174:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800e178:	4293      	cmp	r3, r2
 800e17a:	d806      	bhi.n	800e18a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x86>
        {
            x = 3870 - x;
 800e17c:	89fb      	ldrh	r3, [r7, #14]
 800e17e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800e182:	330e      	adds	r3, #14
 800e184:	b29b      	uxth	r3, r3
 800e186:	81fb      	strh	r3, [r7, #14]
 800e188:	e005      	b.n	800e196 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x92>
        }
        else
        {
            x = 3800 - x;
 800e18a:	89fb      	ldrh	r3, [r7, #14]
 800e18c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800e190:	3308      	adds	r3, #8
 800e192:	b29b      	uxth	r3, r3
 800e194:	81fb      	strh	r3, [r7, #14]
        }

        /* X value second correction */
        xr = x / 15;
 800e196:	89fb      	ldrh	r3, [r7, #14]
 800e198:	4a2f      	ldr	r2, [pc, #188]	; (800e258 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x154>)
 800e19a:	fba2 2303 	umull	r2, r3, r2, r3
 800e19e:	08db      	lsrs	r3, r3, #3
 800e1a0:	82fb      	strh	r3, [r7, #22]

        /* Return X position value */
        if (xr <= 0)
 800e1a2:	8afb      	ldrh	r3, [r7, #22]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d102      	bne.n	800e1ae <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
        {
            xr = 0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	82fb      	strh	r3, [r7, #22]
 800e1ac:	e008      	b.n	800e1c0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        }
        else if (xr > TsXBoundary)
 800e1ae:	4b2b      	ldr	r3, [pc, #172]	; (800e25c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	8afa      	ldrh	r2, [r7, #22]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d903      	bls.n	800e1c0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        {
            xr = TsXBoundary - 1;
 800e1b8:	4b28      	ldr	r3, [pc, #160]	; (800e25c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	82fb      	strh	r3, [r7, #22]
        }
        else
        {}

        x = xr;
 800e1c0:	8afb      	ldrh	r3, [r7, #22]
 800e1c2:	81fb      	strh	r3, [r7, #14]
        xDiff = x > _x ? (x - _x) : (_x - x);
 800e1c4:	89fb      	ldrh	r3, [r7, #14]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	4b25      	ldr	r3, [pc, #148]	; (800e260 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d906      	bls.n	800e1de <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xda>
 800e1d0:	89fa      	ldrh	r2, [r7, #14]
 800e1d2:	4b23      	ldr	r3, [pc, #140]	; (800e260 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	b29b      	uxth	r3, r3
 800e1d8:	1ad3      	subs	r3, r2, r3
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	e005      	b.n	800e1ea <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe6>
 800e1de:	4b20      	ldr	r3, [pc, #128]	; (800e260 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	b29a      	uxth	r2, r3
 800e1e4:	89fb      	ldrh	r3, [r7, #14]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	827b      	strh	r3, [r7, #18]
        yDiff = y > _y ? (y - _y) : (_y - y);
 800e1ec:	89bb      	ldrh	r3, [r7, #12]
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	4b1c      	ldr	r3, [pc, #112]	; (800e264 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d906      	bls.n	800e206 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x102>
 800e1f8:	89ba      	ldrh	r2, [r7, #12]
 800e1fa:	4b1a      	ldr	r3, [pc, #104]	; (800e264 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	b29b      	uxth	r3, r3
 800e204:	e005      	b.n	800e212 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x10e>
 800e206:	4b17      	ldr	r3, [pc, #92]	; (800e264 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	89bb      	ldrh	r3, [r7, #12]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	b29b      	uxth	r3, r3
 800e212:	823b      	strh	r3, [r7, #16]

        if (xDiff + yDiff > 5)
 800e214:	8a7a      	ldrh	r2, [r7, #18]
 800e216:	8a3b      	ldrh	r3, [r7, #16]
 800e218:	4413      	add	r3, r2
 800e21a:	2b05      	cmp	r3, #5
 800e21c:	dd07      	ble.n	800e22e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x12a>
        {
            _x = x;
 800e21e:	89fb      	ldrh	r3, [r7, #14]
 800e220:	461a      	mov	r2, r3
 800e222:	4b0f      	ldr	r3, [pc, #60]	; (800e260 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800e224:	601a      	str	r2, [r3, #0]
            _y = y;
 800e226:	89bb      	ldrh	r3, [r7, #12]
 800e228:	461a      	mov	r2, r3
 800e22a:	4b0e      	ldr	r3, [pc, #56]	; (800e264 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800e22c:	601a      	str	r2, [r3, #0]
        }

        /* Update the X position */
        TsState->X = _x;
 800e22e:	4b0c      	ldr	r3, [pc, #48]	; (800e260 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	b29a      	uxth	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	805a      	strh	r2, [r3, #2]

        /* Update the Y position */
        TsState->Y = _y;
 800e238:	4b0a      	ldr	r3, [pc, #40]	; (800e264 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	809a      	strh	r2, [r3, #4]
    }
}
 800e242:	bf00      	nop
 800e244:	3718      	adds	r7, #24
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	20008f64 	.word	0x20008f64
 800e250:	ba2e8ba3 	.word	0xba2e8ba3
 800e254:	20008f6a 	.word	0x20008f6a
 800e258:	88888889 	.word	0x88888889
 800e25c:	20008f68 	.word	0x20008f68
 800e260:	20008f6c 	.word	0x20008f6c
 800e264:	20008f70 	.word	0x20008f70

0800e268 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	4a05      	ldr	r2, [pc, #20]	; (800e288 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff febb 	bl	800dff4 <_ZN8touchgfx15TouchControllerD1Ev>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	08021cc0 	.word	0x08021cc0

0800e28c <_ZN20STM32TouchControllerD0Ev>:
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff ffe7 	bl	800e268 <_ZN20STM32TouchControllerD1Ev>
 800e29a:	2104      	movs	r1, #4
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f011 fe67 	bl	801ff70 <_ZdlPvj>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	71fb      	strb	r3, [r7, #7]

}
 800e2b6:	bf00      	nop
 800e2b8:	370c      	adds	r7, #12
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr

0800e2c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800e2c2:	b480      	push	{r7}
 800e2c4:	b083      	sub	sp, #12
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	71fb      	strb	r3, [r7, #7]

}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr

0800e2d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	71fb      	strb	r3, [r7, #7]

}
 800e2e2:	bf00      	nop
 800e2e4:	370c      	adds	r7, #12
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr
	...

0800e2f0 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
    {
 800e2f8:	4a04      	ldr	r2, [pc, #16]	; (800e30c <_ZN8touchgfx3HALD1Ev+0x1c>)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	601a      	str	r2, [r3, #0]
    }
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4618      	mov	r0, r3
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr
 800e30c:	080226dc 	.word	0x080226dc

0800e310 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
    }
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f7ff ffe9 	bl	800e2f0 <_ZN8touchgfx3HALD1Ev>
 800e31e:	2178      	movs	r1, #120	; 0x78
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f011 fe25 	bl	801ff70 <_ZdlPvj>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	4618      	mov	r0, r3
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	78fa      	ldrb	r2, [r7, #3]
 800e340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2201      	movs	r2, #1
 800e348:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800e34c:	bf00      	nop
 800e34e:	370c      	adds	r7, #12
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr

0800e358 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685a      	ldr	r2, [r3, #4]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4610      	mov	r0, r2
 800e36e:	4798      	blx	r3
 800e370:	4603      	mov	r3, r0
    }
 800e372:	4618      	mov	r0, r3
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f002 fd66 	bl	8010e54 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3390      	adds	r3, #144	; 0x90
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	4798      	blx	r3
    }
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
    {
        return false;
 800e3a6:	2300      	movs	r3, #0
    }
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	370c      	adds	r7, #12
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b2:	4770      	bx	lr

0800e3b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 800e3b4:	b590      	push	{r4, r7, lr}
 800e3b6:	b08b      	sub	sp, #44	; 0x2c
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	60b9      	str	r1, [r7, #8]
 800e3be:	4611      	mov	r1, r2
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	460b      	mov	r3, r1
 800e3c4:	80fb      	strh	r3, [r7, #6]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 800e3ca:	f7fe f975 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	6813      	ldr	r3, [r2, #0]
 800e3d2:	3328      	adds	r3, #40	; 0x28
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	4798      	blx	r3
 800e3da:	4603      	mov	r3, r0
 800e3dc:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800e3de:	8b7b      	ldrh	r3, [r7, #26]
 800e3e0:	4a3d      	ldr	r2, [pc, #244]	; (800e4d8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 800e3e2:	8812      	ldrh	r2, [r2, #0]
 800e3e4:	fb02 f303 	mul.w	r3, r2, r3
 800e3e8:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800e3f6:	797b      	ldrb	r3, [r7, #5]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d005      	beq.n	800e408 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800e3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	4413      	add	r3, r2
 800e402:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e406:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800e408:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d005      	beq.n	800e41c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800e410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e412:	697b      	ldr	r3, [r7, #20]
 800e414:	4413      	add	r3, r2
 800e416:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800e418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41a:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800e41c:	88fb      	ldrh	r3, [r7, #6]
 800e41e:	3b01      	subs	r3, #1
 800e420:	2b1f      	cmp	r3, #31
 800e422:	d84d      	bhi.n	800e4c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 800e424:	a201      	add	r2, pc, #4	; (adr r2, 800e42c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800e426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e42a:	bf00      	nop
 800e42c:	0800e4ad 	.word	0x0800e4ad
 800e430:	0800e4ad 	.word	0x0800e4ad
 800e434:	0800e4c1 	.word	0x0800e4c1
 800e438:	0800e4ad 	.word	0x0800e4ad
 800e43c:	0800e4c1 	.word	0x0800e4c1
 800e440:	0800e4c1 	.word	0x0800e4c1
 800e444:	0800e4c1 	.word	0x0800e4c1
 800e448:	0800e4ad 	.word	0x0800e4ad
 800e44c:	0800e4c1 	.word	0x0800e4c1
 800e450:	0800e4c1 	.word	0x0800e4c1
 800e454:	0800e4c1 	.word	0x0800e4c1
 800e458:	0800e4c1 	.word	0x0800e4c1
 800e45c:	0800e4c1 	.word	0x0800e4c1
 800e460:	0800e4c1 	.word	0x0800e4c1
 800e464:	0800e4c1 	.word	0x0800e4c1
 800e468:	0800e4ad 	.word	0x0800e4ad
 800e46c:	0800e4c1 	.word	0x0800e4c1
 800e470:	0800e4c1 	.word	0x0800e4c1
 800e474:	0800e4c1 	.word	0x0800e4c1
 800e478:	0800e4c1 	.word	0x0800e4c1
 800e47c:	0800e4c1 	.word	0x0800e4c1
 800e480:	0800e4c1 	.word	0x0800e4c1
 800e484:	0800e4c1 	.word	0x0800e4c1
 800e488:	0800e4ad 	.word	0x0800e4ad
 800e48c:	0800e4c1 	.word	0x0800e4c1
 800e490:	0800e4c1 	.word	0x0800e4c1
 800e494:	0800e4c1 	.word	0x0800e4c1
 800e498:	0800e4c1 	.word	0x0800e4c1
 800e49c:	0800e4c1 	.word	0x0800e4c1
 800e4a0:	0800e4c1 	.word	0x0800e4c1
 800e4a4:	0800e4c1 	.word	0x0800e4c1
 800e4a8:	0800e4ad 	.word	0x0800e4ad
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3374      	adds	r3, #116	; 0x74
 800e4b2:	681c      	ldr	r4, [r3, #0]
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	6a3a      	ldr	r2, [r7, #32]
 800e4b8:	68b9      	ldr	r1, [r7, #8]
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	47a0      	blx	r4
            break;
 800e4be:	e006      	b.n	800e4ce <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 800e4c0:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 800e4c2:	4a07      	ldr	r2, [pc, #28]	; (800e4e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 800e4c4:	f240 3125 	movw	r1, #805	; 0x325
 800e4c8:	4806      	ldr	r0, [pc, #24]	; (800e4e4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 800e4ca:	f011 fd7d 	bl	801ffc8 <__assert_func>
            break;
        }
    }
 800e4ce:	bf00      	nop
 800e4d0:	372c      	adds	r7, #44	; 0x2c
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd90      	pop	{r4, r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	20009ef8 	.word	0x20009ef8
 800e4dc:	0802156c 	.word	0x0802156c
 800e4e0:	08021dec 	.word	0x08021dec
 800e4e4:	0802158c 	.word	0x0802158c

0800e4e8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	607a      	str	r2, [r7, #4]
 800e4f4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d106      	bne.n	800e50a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800e4fc:	4b11      	ldr	r3, [pc, #68]	; (800e544 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800e4fe:	4a12      	ldr	r2, [pc, #72]	; (800e548 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800e500:	f240 3137 	movw	r1, #823	; 0x337
 800e504:	4811      	ldr	r0, [pc, #68]	; (800e54c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800e506:	f011 fd5f 	bl	801ffc8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	68ba      	ldr	r2, [r7, #8]
 800e50e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bf14      	ite	ne
 800e522:	2301      	movne	r3, #1
 800e524:	2300      	moveq	r3, #0
 800e526:	b2da      	uxtb	r2, r3
 800e528:	4b09      	ldr	r3, [pc, #36]	; (800e550 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800e52a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	bf14      	ite	ne
 800e532:	2301      	movne	r3, #1
 800e534:	2300      	moveq	r3, #0
 800e536:	b2da      	uxtb	r2, r3
 800e538:	4b06      	ldr	r3, [pc, #24]	; (800e554 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800e53a:	701a      	strb	r2, [r3, #0]
    }
 800e53c:	bf00      	nop
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	080215d0 	.word	0x080215d0
 800e548:	08021d9c 	.word	0x08021d9c
 800e54c:	0802158c 	.word	0x0802158c
 800e550:	20009efa 	.word	0x20009efa
 800e554:	20009efb 	.word	0x20009efb

0800e558 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	460b      	mov	r3, r1
 800e562:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d004      	beq.n	800e576 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e570:	887a      	ldrh	r2, [r7, #2]
 800e572:	4610      	mov	r0, r2
 800e574:	4798      	blx	r3
        }
    }
 800e576:	bf00      	nop
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800e57e:	b480      	push	{r7}
 800e580:	b083      	sub	sp, #12
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800e586:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800e58a:	4618      	mov	r0, r3
 800e58c:	370c      	adds	r7, #12
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800e596:	b580      	push	{r7, lr}
 800e598:	b082      	sub	sp, #8
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685a      	ldr	r2, [r3, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3318      	adds	r3, #24
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4610      	mov	r0, r2
 800e5ae:	4798      	blx	r3
 800e5b0:	4603      	mov	r3, r0
    }
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3708      	adds	r7, #8
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
	...

0800e5bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d017      	beq.n	800e604 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800e5d4:	4b1a      	ldr	r3, [pc, #104]	; (800e640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d12a      	bne.n	800e632 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800e5dc:	4b19      	ldr	r3, [pc, #100]	; (800e644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e5de:	881a      	ldrh	r2, [r3, #0]
 800e5e0:	4b19      	ldr	r3, [pc, #100]	; (800e648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e5e2:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800e5e4:	4b19      	ldr	r3, [pc, #100]	; (800e64c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e5e6:	881a      	ldrh	r2, [r3, #0]
 800e5e8:	4b19      	ldr	r3, [pc, #100]	; (800e650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e5ea:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800e5ec:	4b16      	ldr	r3, [pc, #88]	; (800e648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e5ee:	881a      	ldrh	r2, [r3, #0]
 800e5f0:	4b16      	ldr	r3, [pc, #88]	; (800e64c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e5f2:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800e5f4:	4b16      	ldr	r3, [pc, #88]	; (800e650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e5f6:	881a      	ldrh	r2, [r3, #0]
 800e5f8:	4b12      	ldr	r3, [pc, #72]	; (800e644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e5fa:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800e5fc:	4b10      	ldr	r3, [pc, #64]	; (800e640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e5fe:	2201      	movs	r2, #1
 800e600:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800e602:	e016      	b.n	800e632 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800e604:	4b0e      	ldr	r3, [pc, #56]	; (800e640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d012      	beq.n	800e632 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800e60c:	4b0f      	ldr	r3, [pc, #60]	; (800e64c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e60e:	881a      	ldrh	r2, [r3, #0]
 800e610:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e612:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800e614:	4b0b      	ldr	r3, [pc, #44]	; (800e644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e616:	881a      	ldrh	r2, [r3, #0]
 800e618:	4b0d      	ldr	r3, [pc, #52]	; (800e650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e61a:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800e61c:	4b0c      	ldr	r3, [pc, #48]	; (800e650 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800e61e:	881a      	ldrh	r2, [r3, #0]
 800e620:	4b0a      	ldr	r3, [pc, #40]	; (800e64c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800e622:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800e624:	4b08      	ldr	r3, [pc, #32]	; (800e648 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800e626:	881a      	ldrh	r2, [r3, #0]
 800e628:	4b06      	ldr	r3, [pc, #24]	; (800e644 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800e62a:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800e62c:	4b04      	ldr	r3, [pc, #16]	; (800e640 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800e62e:	2200      	movs	r2, #0
 800e630:	701a      	strb	r2, [r3, #0]
    }
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	20009ef4 	.word	0x20009ef4
 800e644:	20009ef0 	.word	0x20009ef0
 800e648:	20009ef6 	.word	0x20009ef6
 800e64c:	20009ef2 	.word	0x20009ef2
 800e650:	20009ef8 	.word	0x20009ef8

0800e654 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	4618      	mov	r0, r3
 800e660:	f001 fe7b 	bl	801035a <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800e664:	bf00      	nop
 800e666:	3708      	adds	r7, #8
 800e668:	46bd      	mov	sp, r7
 800e66a:	bd80      	pop	{r7, pc}

0800e66c <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
 800e674:	4a05      	ldr	r2, [pc, #20]	; (800e68c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff fe37 	bl	800e2f0 <_ZN8touchgfx3HALD1Ev>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4618      	mov	r0, r3
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	080220c8 	.word	0x080220c8

0800e690 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f7ff ffe7 	bl	800e66c <_ZN20TouchGFXGeneratedHALD1Ev>
 800e69e:	2178      	movs	r1, #120	; 0x78
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f011 fc65 	bl	801ff70 <_ZdlPvj>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff ffca 	bl	800e654 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800e6c0:	bf00      	nop
 800e6c2:	3708      	adds	r7, #8
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <_ZN11TouchGFXHAL10initializeEv>:
}

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fae6 	bl	800fca4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800e6d8:	bf00      	nop
 800e6da:	3708      	adds	r7, #8
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	3368      	adds	r3, #104	; 0x68
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	4798      	blx	r3
    enableInterrupts();
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3360      	adds	r3, #96	; 0x60
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	4798      	blx	r3

    OSWrappers::waitForVSync();
 800e700:	f000 f936 	bl	800e970 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	3358      	adds	r3, #88	; 0x58
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4610      	mov	r0, r2
 800e710:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 800e712:	2029      	movs	r0, #41	; 0x29
 800e714:	f7f3 f906 	bl	8001924 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800e718:	f000 f92a 	bl	800e970 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	3358      	adds	r3, #88	; 0x58
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	4610      	mov	r0, r2
 800e728:	4798      	blx	r3
        OSWrappers::waitForVSync();
 800e72a:	e7f5      	b.n	800e718 <_ZN11TouchGFXHAL9taskEntryEv+0x38>

0800e72c <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	4618      	mov	r0, r3
 800e738:	f001 fb38 	bl	800fdac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800e73c:	4603      	mov	r3, r0
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b082      	sub	sp, #8
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6839      	ldr	r1, [r7, #0]
 800e754:	4618      	mov	r0, r3
 800e756:	f001 fb37 	bl	800fdc8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800e75a:	bf00      	nop
 800e75c:	3708      	adds	r7, #8
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}

0800e762 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b082      	sub	sp, #8
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	4618      	mov	r0, r3
 800e772:	f001 fb3f 	bl	800fdf4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800e776:	bf00      	nop
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b082      	sub	sp, #8
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4618      	mov	r0, r3
 800e78a:	f001 fab5 	bl	800fcf8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800e78e:	bf00      	nop
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b082      	sub	sp, #8
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 fab9 	bl	800fd18 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800e7a6:	bf00      	nop
 800e7a8:	3708      	adds	r7, #8
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b082      	sub	sp, #8
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f001 fabb 	bl	800fd34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b082      	sub	sp, #8
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f001 fabd 	bl	800fd50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800e7d6:	bf00      	nop
 800e7d8:	3708      	adds	r7, #8
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
	...

0800e7e0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	4a05      	ldr	r2, [pc, #20]	; (800e800 <_ZN11TouchGFXHALD1Ev+0x20>)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff ff3b 	bl	800e66c <_ZN20TouchGFXGeneratedHALD1Ev>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	08021cf0 	.word	0x08021cf0

0800e804 <_ZN11TouchGFXHALD0Ev>:
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7ff ffe7 	bl	800e7e0 <_ZN11TouchGFXHALD1Ev>
 800e812:	2178      	movs	r1, #120	; 0x78
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f011 fbab 	bl	801ff70 <_ZdlPvj>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4618      	mov	r0, r3
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800e828:	2200      	movs	r2, #0
 800e82a:	2101      	movs	r1, #1
 800e82c:	2001      	movs	r0, #1
 800e82e:	f7fa f849 	bl	80088c4 <osSemaphoreNew>
 800e832:	4602      	mov	r2, r0
 800e834:	4b09      	ldr	r3, [pc, #36]	; (800e85c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800e836:	601a      	str	r2, [r3, #0]
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever); // take the lock
 800e838:	4b08      	ldr	r3, [pc, #32]	; (800e85c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f04f 31ff 	mov.w	r1, #4294967295
 800e840:	4618      	mov	r0, r3
 800e842:	f7fa f8dd 	bl	8008a00 <osSemaphoreAcquire>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800e846:	2200      	movs	r2, #0
 800e848:	2104      	movs	r1, #4
 800e84a:	2001      	movs	r0, #1
 800e84c:	f7fa f996 	bl	8008b7c <osMessageQueueNew>
 800e850:	4602      	mov	r2, r0
 800e852:	4b03      	ldr	r3, [pc, #12]	; (800e860 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800e854:	601a      	str	r2, [r3, #0]
}
 800e856:	bf00      	nop
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	20008f74 	.word	0x20008f74
 800e860:	20008f78 	.word	0x20008f78

0800e864 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800e868:	4b09      	ldr	r3, [pc, #36]	; (800e890 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d105      	bne.n	800e87c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 800e870:	4b08      	ldr	r3, [pc, #32]	; (800e894 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 800e872:	4a09      	ldr	r2, [pc, #36]	; (800e898 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 800e874:	2131      	movs	r1, #49	; 0x31
 800e876:	4809      	ldr	r0, [pc, #36]	; (800e89c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 800e878:	f011 fba6 	bl	801ffc8 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800e87c:	4b04      	ldr	r3, [pc, #16]	; (800e890 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f04f 31ff 	mov.w	r1, #4294967295
 800e884:	4618      	mov	r0, r3
 800e886:	f7fa f8bb 	bl	8008a00 <osSemaphoreAcquire>
}
 800e88a:	bf00      	nop
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	20008f74 	.word	0x20008f74
 800e894:	08021608 	.word	0x08021608
 800e898:	08021e40 	.word	0x08021e40
 800e89c:	0802161c 	.word	0x0802161c

0800e8a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800e8a4:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d105      	bne.n	800e8b8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 800e8ac:	4b07      	ldr	r3, [pc, #28]	; (800e8cc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 800e8ae:	4a08      	ldr	r2, [pc, #32]	; (800e8d0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 800e8b0:	213a      	movs	r1, #58	; 0x3a
 800e8b2:	4808      	ldr	r0, [pc, #32]	; (800e8d4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 800e8b4:	f011 fb88 	bl	801ffc8 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800e8b8:	4b03      	ldr	r3, [pc, #12]	; (800e8c8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7fa f905 	bl	8008acc <osSemaphoreRelease>
}
 800e8c2:	bf00      	nop
 800e8c4:	bd80      	pop	{r7, pc}
 800e8c6:	bf00      	nop
 800e8c8:	20008f74 	.word	0x20008f74
 800e8cc:	08021608 	.word	0x08021608
 800e8d0:	08021e80 	.word	0x08021e80
 800e8d4:	0802161c 	.word	0x0802161c

0800e8d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800e8dc:	4b08      	ldr	r3, [pc, #32]	; (800e900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d105      	bne.n	800e8f0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 800e8e4:	4b07      	ldr	r3, [pc, #28]	; (800e904 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 800e8e6:	4a08      	ldr	r2, [pc, #32]	; (800e908 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 800e8e8:	2147      	movs	r1, #71	; 0x47
 800e8ea:	4808      	ldr	r0, [pc, #32]	; (800e90c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 800e8ec:	f011 fb6c 	bl	801ffc8 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800e8f0:	4b03      	ldr	r3, [pc, #12]	; (800e900 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fa f882 	bl	8008a00 <osSemaphoreAcquire>
}
 800e8fc:	bf00      	nop
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	20008f74 	.word	0x20008f74
 800e904:	08021608 	.word	0x08021608
 800e908:	08021ec0 	.word	0x08021ec0
 800e90c:	0802161c 	.word	0x0802161c

0800e910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800e910:	b580      	push	{r7, lr}
 800e912:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800e914:	4b08      	ldr	r3, [pc, #32]	; (800e938 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d105      	bne.n	800e928 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 800e91c:	4b07      	ldr	r3, [pc, #28]	; (800e93c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 800e91e:	4a08      	ldr	r2, [pc, #32]	; (800e940 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 800e920:	2154      	movs	r1, #84	; 0x54
 800e922:	4808      	ldr	r0, [pc, #32]	; (800e944 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 800e924:	f011 fb50 	bl	801ffc8 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800e928:	4b03      	ldr	r3, [pc, #12]	; (800e938 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fa f8cd 	bl	8008acc <osSemaphoreRelease>
}
 800e932:	bf00      	nop
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	20008f74 	.word	0x20008f74
 800e93c:	08021608 	.word	0x08021608
 800e940:	08021f00 	.word	0x08021f00
 800e944:	0802161c 	.word	0x0802161c

0800e948 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
    if (vsync_queue)
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d006      	beq.n	800e962 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1a>
    {
        osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800e954:	4b04      	ldr	r3, [pc, #16]	; (800e968 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 800e956:	6818      	ldr	r0, [r3, #0]
 800e958:	2300      	movs	r3, #0
 800e95a:	2200      	movs	r2, #0
 800e95c:	4903      	ldr	r1, [pc, #12]	; (800e96c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 800e95e:	f7fa f993 	bl	8008c88 <osMessageQueuePut>
    }
}
 800e962:	bf00      	nop
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	20008f78 	.word	0x20008f78
 800e96c:	2000008c 	.word	0x2000008c

0800e970 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
    if (vsync_queue)
 800e976:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00e      	beq.n	800e99c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
      uint32_t dummyGet;
      // First make sure the queue is empty, by trying to remove an element with 0 timeout.
      osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800e97e:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	1d39      	adds	r1, r7, #4
 800e984:	2300      	movs	r3, #0
 800e986:	2200      	movs	r2, #0
 800e988:	f7fa f9f2 	bl	8008d70 <osMessageQueueGet>

      // Then, wait for next VSYNC to occur.
      osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800e98c:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800e98e:	6818      	ldr	r0, [r3, #0]
 800e990:	1d39      	adds	r1, r7, #4
 800e992:	f04f 33ff 	mov.w	r3, #4294967295
 800e996:	2200      	movs	r2, #0
 800e998:	f7fa f9ea 	bl	8008d70 <osMessageQueueGet>
    }
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	20008f78 	.word	0x20008f78

0800e9a8 <__NVIC_EnableIRQ>:
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e9b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	db0d      	blt.n	800e9d6 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e9ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	f003 021f 	and.w	r2, r3, #31
 800e9c4:	4907      	ldr	r1, [pc, #28]	; (800e9e4 <__NVIC_EnableIRQ+0x3c>)
 800e9c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9ca:	095b      	lsrs	r3, r3, #5
 800e9cc:	2001      	movs	r0, #1
 800e9ce:	fa00 f202 	lsl.w	r2, r0, r2
 800e9d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e9d6:	bf00      	nop
 800e9d8:	370c      	adds	r7, #12
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	e000e100 	.word	0xe000e100

0800e9e8 <__NVIC_DisableIRQ>:
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e9f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	db12      	blt.n	800ea20 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e9fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	f003 021f 	and.w	r2, r3, #31
 800ea04:	4909      	ldr	r1, [pc, #36]	; (800ea2c <__NVIC_DisableIRQ+0x44>)
 800ea06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea0a:	095b      	lsrs	r3, r3, #5
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	fa00 f202 	lsl.w	r2, r0, r2
 800ea12:	3320      	adds	r3, #32
 800ea14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ea18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ea1c:	f3bf 8f6f 	isb	sy
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	e000e100 	.word	0xe000e100

0800ea30 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	601a      	str	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	370c      	adds	r7, #12
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
        return color;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
    }
 800ea58:	4618      	mov	r0, r3
 800ea5a:	370c      	adds	r7, #12
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	b29b      	uxth	r3, r3
    }
 800ea72:	4618      	mov	r0, r3
 800ea74:	370c      	adds	r7, #12
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
	...

0800ea80 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
    {
 800ea88:	4a04      	ldr	r2, [pc, #16]	; (800ea9c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	601a      	str	r2, [r3, #0]
    }
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4618      	mov	r0, r3
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	08021f9c 	.word	0x08021f9c

0800eaa0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
    }
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7ff ffe9 	bl	800ea80 <_ZN8touchgfx9DMA_QueueD1Ev>
 800eaae:	2104      	movs	r1, #4
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f011 fa5d 	bl	801ff70 <_ZdlPvj>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	4618      	mov	r0, r3
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	3344      	adds	r3, #68	; 0x44
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	4798      	blx	r3
    }
 800ead4:	bf00      	nop
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}

0800eadc <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800eae4:	2300      	movs	r3, #0
    }
 800eae6:	4618      	mov	r0, r3
 800eae8:	370c      	adds	r7, #12
 800eaea:	46bd      	mov	sp, r7
 800eaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf0:	4770      	bx	lr
	...

0800eaf4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
    {
 800eafc:	4a04      	ldr	r2, [pc, #16]	; (800eb10 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	601a      	str	r2, [r3, #0]
    }
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	08022b20 	.word	0x08022b20

0800eb14 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    }
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff ffe9 	bl	800eaf4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800eb22:	210c      	movs	r1, #12
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f011 fa23 	bl	801ff70 <_ZdlPvj>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800eb3e:	4a09      	ldr	r2, [pc, #36]	; (800eb64 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	605a      	str	r2, [r3, #4]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	721a      	strb	r2, [r3, #8]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	725a      	strb	r2, [r3, #9]
    {
    }
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr
 800eb64:	08022b20 	.word	0x08022b20

0800eb68 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685a      	ldr	r2, [r3, #4]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	3314      	adds	r3, #20
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	4610      	mov	r0, r2
 800eb80:	4798      	blx	r3
    }
 800eb82:	bf00      	nop
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b082      	sub	sp, #8
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	3328      	adds	r3, #40	; 0x28
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	4798      	blx	r3
    }
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b085      	sub	sp, #20
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
 800ebb4:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ebc0:	68ba      	ldr	r2, [r7, #8]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	430a      	orrs	r2, r1
 800ebc8:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd0:	f023 0107 	bic.w	r1, r3, #7
 800ebd4:	687a      	ldr	r2, [r7, #4]
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	430a      	orrs	r2, r1
 800ebdc:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebe4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ebe8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	6812      	ldr	r2, [r2, #0]
 800ebf2:	430b      	orrs	r3, r1
 800ebf4:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3714      	adds	r7, #20
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800ec0c:	f7fd fd48 	bl	800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800ec10:	4603      	mov	r3, r0
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff ffa8 	bl	800eb68 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 800ec18:	bf00      	nop
 800ec1a:	3708      	adds	r7, #8
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
    assert(0);
 800ec28:	4b02      	ldr	r3, [pc, #8]	; (800ec34 <DMA2D_XferErrorCallback+0x14>)
 800ec2a:	4a03      	ldr	r2, [pc, #12]	; (800ec38 <DMA2D_XferErrorCallback+0x18>)
 800ec2c:	2136      	movs	r1, #54	; 0x36
 800ec2e:	4803      	ldr	r0, [pc, #12]	; (800ec3c <DMA2D_XferErrorCallback+0x1c>)
 800ec30:	f011 f9ca 	bl	801ffc8 <__assert_func>
 800ec34:	08021648 	.word	0x08021648
 800ec38:	08021fb8 	.word	0x08021fb8
 800ec3c:	0802164c 	.word	0x0802164c

0800ec40 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	3318      	adds	r3, #24
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7ff feef 	bl	800ea30 <_ZN8touchgfx9colortypeC1Ev>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <_ZN10STM32F4DMAC1Ev>:
}

}

STM32F4DMA::STM32F4DMA()
 800ec5c:	b5b0      	push	{r4, r5, r7, lr}
 800ec5e:	b082      	sub	sp, #8
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	330c      	adds	r3, #12
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f7ff ff61 	bl	800eb34 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800ec72:	4a0e      	ldr	r2, [pc, #56]	; (800ecac <_ZN10STM32F4DMAC1Ev+0x50>)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	601a      	str	r2, [r3, #0]
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f103 000c 	add.w	r0, r3, #12
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	3320      	adds	r3, #32
 800ec82:	2260      	movs	r2, #96	; 0x60
 800ec84:	4619      	mov	r1, r3
 800ec86:	f002 fa0b 	bl	80110a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3320      	adds	r3, #32
 800ec8e:	245f      	movs	r4, #95	; 0x5f
 800ec90:	461d      	mov	r5, r3
 800ec92:	2c00      	cmp	r4, #0
 800ec94:	db05      	blt.n	800eca2 <_ZN10STM32F4DMAC1Ev+0x46>
 800ec96:	4628      	mov	r0, r5
 800ec98:	f7ff ffd2 	bl	800ec40 <_ZN8touchgfx6BlitOpC1Ev>
 800ec9c:	3520      	adds	r5, #32
 800ec9e:	3c01      	subs	r4, #1
 800eca0:	e7f7      	b.n	800ec92 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	3708      	adds	r7, #8
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bdb0      	pop	{r4, r5, r7, pc}
 800ecac:	08021f4c 	.word	0x08021f4c

0800ecb0 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	4a0b      	ldr	r2, [pc, #44]	; (800ece8 <_ZN10STM32F4DMAD1Ev+0x38>)
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800ecbe:	480b      	ldr	r0, [pc, #44]	; (800ecec <_ZN10STM32F4DMAD1Ev+0x3c>)
 800ecc0:	f7f5 f942 	bl	8003f48 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 800ecc4:	205a      	movs	r0, #90	; 0x5a
 800ecc6:	f7ff fe8f 	bl	800e9e8 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	330c      	adds	r3, #12
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f000 faa0 	bl	800f214 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7ff ff0c 	bl	800eaf4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08021f4c 	.word	0x08021f4c
 800ecec:	2000a3c8 	.word	0x2000a3c8

0800ecf0 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
}
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff ffd9 	bl	800ecb0 <_ZN10STM32F4DMAD1Ev>
 800ecfe:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f011 f934 	bl	801ff70 <_ZdlPvj>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
	...

0800ed14 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800ed1c:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800ed1e:	4a0a      	ldr	r2, [pc, #40]	; (800ed48 <_ZN10STM32F4DMA10initializeEv+0x34>)
 800ed20:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 800ed22:	4808      	ldr	r0, [pc, #32]	; (800ed44 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800ed24:	f7f5 f8c6 	bl	8003eb4 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800ed28:	4b06      	ldr	r3, [pc, #24]	; (800ed44 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800ed2a:	4a08      	ldr	r2, [pc, #32]	; (800ed4c <_ZN10STM32F4DMA10initializeEv+0x38>)
 800ed2c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800ed2e:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <_ZN10STM32F4DMA10initializeEv+0x30>)
 800ed30:	4a07      	ldr	r2, [pc, #28]	; (800ed50 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 800ed32:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 800ed34:	205a      	movs	r0, #90	; 0x5a
 800ed36:	f7ff fe37 	bl	800e9a8 <__NVIC_EnableIRQ>
}
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	2000a3c8 	.word	0x2000a3c8
 800ed48:	4002b000 	.word	0x4002b000
 800ed4c:	0800ec05 	.word	0x0800ec05
 800ed50:	0800ec21 	.word	0x0800ec21

0800ed54 <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800ed54:	b480      	push	{r7}
 800ed56:	b083      	sub	sp, #12
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
                                        | BLIT_OP_COPY
                                        | BLIT_OP_COPY_WITH_ALPHA
                                        | BLIT_OP_COPY_ARGB8888
                                        | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                        | BLIT_OP_COPY_A4
                                        | BLIT_OP_COPY_A8);
 800ed5c:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800ed6c:	b590      	push	{r4, r7, lr}
 800ed6e:	b08d      	sub	sp, #52	; 0x34
 800ed70:	af02      	add	r7, sp, #8
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800ed76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed7a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800ed84:	2b20      	cmp	r3, #32
 800ed86:	d007      	beq.n	800ed98 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	2b40      	cmp	r3, #64	; 0x40
 800ed8e:	d003      	beq.n	800ed98 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	2b04      	cmp	r3, #4
 800ed96:	d101      	bne.n	800ed9c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e000      	b.n	800ed9e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 800ed9c:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800ed9e:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800eda4:	2b80      	cmp	r3, #128	; 0x80
 800eda6:	d004      	beq.n	800edb2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edb0:	d101      	bne.n	800edb6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800edb2:	2301      	movs	r3, #1
 800edb4:	e000      	b.n	800edb8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800edb6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800edb8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800edba:	f7fd fc7d 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 800edbe:	4602      	mov	r2, r0
 800edc0:	6813      	ldr	r3, [r2, #0]
 800edc2:	3320      	adds	r3, #32
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4610      	mov	r0, r2
 800edc8:	4798      	blx	r3
 800edca:	4603      	mov	r3, r0
 800edcc:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	2b40      	cmp	r3, #64	; 0x40
 800edd4:	d01d      	beq.n	800ee12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800edd6:	2b40      	cmp	r3, #64	; 0x40
 800edd8:	d804      	bhi.n	800ede4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800edda:	2b04      	cmp	r3, #4
 800eddc:	d00e      	beq.n	800edfc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800edde:	2b20      	cmp	r3, #32
 800ede0:	d017      	beq.n	800ee12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800ede2:	e019      	b.n	800ee18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800ede4:	2b80      	cmp	r3, #128	; 0x80
 800ede6:	d003      	beq.n	800edf0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800ede8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edec:	d003      	beq.n	800edf6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800edee:	e013      	b.n	800ee18 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 800edf0:	230a      	movs	r3, #10
 800edf2:	623b      	str	r3, [r7, #32]
        break;
 800edf4:	e01a      	b.n	800ee2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800edf6:	2309      	movs	r3, #9
 800edf8:	623b      	str	r3, [r7, #32]
        break;
 800edfa:	e017      	b.n	800ee2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800edfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ee00:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ee02:	7f7b      	ldrb	r3, [r7, #29]
 800ee04:	2b10      	cmp	r3, #16
 800ee06:	d101      	bne.n	800ee0c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800ee08:	2302      	movs	r3, #2
 800ee0a:	e000      	b.n	800ee0e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	623b      	str	r3, [r7, #32]
        break;
 800ee10:	e00c      	b.n	800ee2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 800ee12:	2300      	movs	r3, #0
 800ee14:	623b      	str	r3, [r7, #32]
        break;
 800ee16:	e009      	b.n	800ee2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ee1c:	7f7b      	ldrb	r3, [r7, #29]
 800ee1e:	2b10      	cmp	r3, #16
 800ee20:	d101      	bne.n	800ee26 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 800ee22:	2302      	movs	r3, #2
 800ee24:	e000      	b.n	800ee28 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800ee26:	2301      	movs	r3, #1
 800ee28:	623b      	str	r3, [r7, #32]
        break;
 800ee2a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800ee2c:	4a76      	ldr	r2, [pc, #472]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee30:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800ee32:	7f7b      	ldrb	r3, [r7, #29]
 800ee34:	2b10      	cmp	r3, #16
 800ee36:	d101      	bne.n	800ee3c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800ee38:	2302      	movs	r3, #2
 800ee3a:	e000      	b.n	800ee3e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	4a72      	ldr	r2, [pc, #456]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ee40:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	8adb      	ldrh	r3, [r3, #22]
 800ee46:	461a      	mov	r2, r3
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	8a1b      	ldrh	r3, [r3, #16]
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	461a      	mov	r2, r3
 800ee50:	4b6d      	ldr	r3, [pc, #436]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ee52:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800ee54:	7f7b      	ldrb	r3, [r7, #29]
 800ee56:	2b10      	cmp	r3, #16
 800ee58:	d101      	bne.n	800ee5e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800ee5a:	2202      	movs	r2, #2
 800ee5c:	e000      	b.n	800ee60 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 800ee5e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	8adb      	ldrh	r3, [r3, #22]
 800ee64:	4619      	mov	r1, r3
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	8a1b      	ldrh	r3, [r3, #16]
 800ee6a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800ee6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee6e:	4866      	ldr	r0, [pc, #408]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ee70:	f7ff fe9a 	bl	800eba8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800ee74:	4a64      	ldr	r2, [pc, #400]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	8a9b      	ldrh	r3, [r3, #20]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	8a1b      	ldrh	r3, [r3, #16]
 800ee84:	1ad3      	subs	r3, r2, r3
 800ee86:	461a      	mov	r2, r3
 800ee88:	4b5f      	ldr	r3, [pc, #380]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ee8a:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 800ee8c:	7ffb      	ldrb	r3, [r7, #31]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d103      	bne.n	800ee9a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800ee92:	7fbb      	ldrb	r3, [r7, #30]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f000 8082 	beq.w	800ef9e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	7f1b      	ldrb	r3, [r3, #28]
 800ee9e:	2bff      	cmp	r3, #255	; 0xff
 800eea0:	d008      	beq.n	800eeb4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800eea2:	4b59      	ldr	r3, [pc, #356]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800eea4:	2202      	movs	r2, #2
 800eea6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	7f1b      	ldrb	r3, [r3, #28]
 800eeac:	461a      	mov	r2, r3
 800eeae:	4b56      	ldr	r3, [pc, #344]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800eeb0:	635a      	str	r2, [r3, #52]	; 0x34
 800eeb2:	e002      	b.n	800eeba <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800eeb4:	4b54      	ldr	r3, [pc, #336]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800eeba:	7fbb      	ldrb	r3, [r7, #30]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d059      	beq.n	800ef74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 800eec0:	7f7b      	ldrb	r3, [r7, #29]
 800eec2:	2b10      	cmp	r3, #16
 800eec4:	d14a      	bne.n	800ef5c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	3318      	adds	r3, #24
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7ff fdca 	bl	800ea64 <_ZNK8touchgfx9colortypecvtEv>
 800eed0:	4603      	mov	r3, r0
 800eed2:	12db      	asrs	r3, r3, #11
 800eed4:	f003 021f 	and.w	r2, r3, #31
 800eed8:	4613      	mov	r3, r2
 800eeda:	021b      	lsls	r3, r3, #8
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	4a4b      	ldr	r2, [pc, #300]	; (800f00c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800eee0:	fb82 1203 	smull	r1, r2, r2, r3
 800eee4:	441a      	add	r2, r3
 800eee6:	1112      	asrs	r2, r2, #4
 800eee8:	17db      	asrs	r3, r3, #31
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	3318      	adds	r3, #24
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff fdb6 	bl	800ea64 <_ZNK8touchgfx9colortypecvtEv>
 800eef8:	4603      	mov	r3, r0
 800eefa:	115b      	asrs	r3, r3, #5
 800eefc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ef00:	4613      	mov	r3, r2
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	1a9b      	subs	r3, r3, r2
 800ef06:	4a42      	ldr	r2, [pc, #264]	; (800f010 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800ef08:	fb82 1203 	smull	r1, r2, r2, r3
 800ef0c:	441a      	add	r2, r3
 800ef0e:	1152      	asrs	r2, r2, #5
 800ef10:	17db      	asrs	r3, r3, #31
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	3318      	adds	r3, #24
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7ff fda2 	bl	800ea64 <_ZNK8touchgfx9colortypecvtEv>
 800ef20:	4603      	mov	r3, r0
 800ef22:	f003 021f 	and.w	r2, r3, #31
 800ef26:	4613      	mov	r3, r2
 800ef28:	021b      	lsls	r3, r3, #8
 800ef2a:	1a9b      	subs	r3, r3, r2
 800ef2c:	4a37      	ldr	r2, [pc, #220]	; (800f00c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800ef2e:	fb82 1203 	smull	r1, r2, r2, r3
 800ef32:	441a      	add	r2, r3
 800ef34:	1112      	asrs	r2, r2, #4
 800ef36:	17db      	asrs	r3, r3, #31
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	7f1b      	ldrb	r3, [r3, #28]
 800ef40:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	061a      	lsls	r2, r3, #24
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	041b      	lsls	r3, r3, #16
 800ef4a:	431a      	orrs	r2, r3
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	021b      	lsls	r3, r3, #8
 800ef50:	431a      	orrs	r2, r3
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	4a2c      	ldr	r2, [pc, #176]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ef58:	6353      	str	r3, [r2, #52]	; 0x34
 800ef5a:	e00b      	b.n	800ef74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	3318      	adds	r3, #24
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff fd73 	bl	800ea4c <_ZNK8touchgfx9colortype10getColor32Ev>
 800ef66:	4602      	mov	r2, r0
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	7f1b      	ldrb	r3, [r3, #28]
 800ef6c:	061b      	lsls	r3, r3, #24
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	4a25      	ldr	r2, [pc, #148]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ef72:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	8adb      	ldrh	r3, [r3, #22]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	8a1b      	ldrh	r3, [r3, #16]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	461a      	mov	r2, r3
 800ef82:	4b21      	ldr	r3, [pc, #132]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ef84:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ef86:	7f7b      	ldrb	r3, [r7, #29]
 800ef88:	2b10      	cmp	r3, #16
 800ef8a:	d101      	bne.n	800ef90 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 800ef8c:	2302      	movs	r3, #2
 800ef8e:	e000      	b.n	800ef92 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 800ef90:	2301      	movs	r3, #1
 800ef92:	4a1d      	ldr	r2, [pc, #116]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ef94:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800ef96:	2100      	movs	r1, #0
 800ef98:	481b      	ldr	r0, [pc, #108]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ef9a:	f7f5 fa55 	bl	8004448 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800ef9e:	2101      	movs	r1, #1
 800efa0:	4819      	ldr	r0, [pc, #100]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800efa2:	f7f5 fa51 	bl	8004448 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 800efa6:	7ffb      	ldrb	r3, [r7, #31]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d102      	bne.n	800efb2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800efac:	7fbb      	ldrb	r3, [r7, #30]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d015      	beq.n	800efde <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800efb6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800efbc:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800efc2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800efc8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800efce:	9301      	str	r3, [sp, #4]
 800efd0:	9200      	str	r2, [sp, #0]
 800efd2:	4623      	mov	r3, r4
 800efd4:	4602      	mov	r2, r0
 800efd6:	480c      	ldr	r0, [pc, #48]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800efd8:	f7f5 f859 	bl	800408e <HAL_DMA2D_BlendingStart_IT>
 800efdc:	e00f      	b.n	800effe <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800efe2:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 800efe8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800efee:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 800eff4:	9300      	str	r3, [sp, #0]
 800eff6:	4603      	mov	r3, r0
 800eff8:	4803      	ldr	r0, [pc, #12]	; (800f008 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800effa:	f7f5 f815 	bl	8004028 <HAL_DMA2D_Start_IT>
    }
}
 800effe:	bf00      	nop
 800f000:	372c      	adds	r7, #44	; 0x2c
 800f002:	46bd      	mov	sp, r7
 800f004:	bd90      	pop	{r4, r7, pc}
 800f006:	bf00      	nop
 800f008:	2000a3c8 	.word	0x2000a3c8
 800f00c:	84210843 	.word	0x84210843
 800f010:	82082083 	.word	0x82082083

0800f014 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 800f014:	b590      	push	{r4, r7, lr}
 800f016:	b08d      	sub	sp, #52	; 0x34
 800f018:	af02      	add	r7, sp, #8
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800f01e:	f7fd fb4b 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 800f022:	4602      	mov	r2, r0
 800f024:	6813      	ldr	r3, [r2, #0]
 800f026:	3320      	adds	r3, #32
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4610      	mov	r0, r2
 800f02c:	4798      	blx	r3
 800f02e:	4603      	mov	r3, r0
 800f030:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800f032:	7ffb      	ldrb	r3, [r7, #31]
 800f034:	2b10      	cmp	r3, #16
 800f036:	d101      	bne.n	800f03c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 800f038:	2302      	movs	r3, #2
 800f03a:	e000      	b.n	800f03e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 800f03c:	2301      	movs	r3, #1
 800f03e:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 800f040:	2300      	movs	r3, #0
 800f042:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 800f044:	7ffb      	ldrb	r3, [r7, #31]
 800f046:	2b10      	cmp	r3, #16
 800f048:	d149      	bne.n	800f0de <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	3318      	adds	r3, #24
 800f04e:	4618      	mov	r0, r3
 800f050:	f7ff fd08 	bl	800ea64 <_ZNK8touchgfx9colortypecvtEv>
 800f054:	4603      	mov	r3, r0
 800f056:	12db      	asrs	r3, r3, #11
 800f058:	f003 021f 	and.w	r2, r3, #31
 800f05c:	4613      	mov	r3, r2
 800f05e:	021b      	lsls	r3, r3, #8
 800f060:	1a9b      	subs	r3, r3, r2
 800f062:	4a69      	ldr	r2, [pc, #420]	; (800f208 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800f064:	fb82 1203 	smull	r1, r2, r2, r3
 800f068:	441a      	add	r2, r3
 800f06a:	1112      	asrs	r2, r2, #4
 800f06c:	17db      	asrs	r3, r3, #31
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	3318      	adds	r3, #24
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fcf4 	bl	800ea64 <_ZNK8touchgfx9colortypecvtEv>
 800f07c:	4603      	mov	r3, r0
 800f07e:	115b      	asrs	r3, r3, #5
 800f080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f084:	4613      	mov	r3, r2
 800f086:	021b      	lsls	r3, r3, #8
 800f088:	1a9b      	subs	r3, r3, r2
 800f08a:	4a60      	ldr	r2, [pc, #384]	; (800f20c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 800f08c:	fb82 1203 	smull	r1, r2, r2, r3
 800f090:	441a      	add	r2, r3
 800f092:	1152      	asrs	r2, r2, #5
 800f094:	17db      	asrs	r3, r3, #31
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	3318      	adds	r3, #24
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fce0 	bl	800ea64 <_ZNK8touchgfx9colortypecvtEv>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	f003 021f 	and.w	r2, r3, #31
 800f0aa:	4613      	mov	r3, r2
 800f0ac:	021b      	lsls	r3, r3, #8
 800f0ae:	1a9b      	subs	r3, r3, r2
 800f0b0:	4a55      	ldr	r2, [pc, #340]	; (800f208 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800f0b2:	fb82 1203 	smull	r1, r2, r2, r3
 800f0b6:	441a      	add	r2, r3
 800f0b8:	1112      	asrs	r2, r2, #4
 800f0ba:	17db      	asrs	r3, r3, #31
 800f0bc:	1ad3      	subs	r3, r2, r3
 800f0be:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	7f1b      	ldrb	r3, [r3, #28]
 800f0c4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	061a      	lsls	r2, r3, #24
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	041b      	lsls	r3, r3, #16
 800f0ce:	431a      	orrs	r2, r3
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	021b      	lsls	r3, r3, #8
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	4313      	orrs	r3, r2
 800f0da:	623b      	str	r3, [r7, #32]
 800f0dc:	e00b      	b.n	800f0f6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	7f1b      	ldrb	r3, [r3, #28]
 800f0e2:	061b      	lsls	r3, r3, #24
 800f0e4:	461c      	mov	r4, r3
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	3318      	adds	r3, #24
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7ff fcae 	bl	800ea4c <_ZNK8touchgfx9colortype10getColor32Ev>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	4323      	orrs	r3, r4
 800f0f4:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b08      	cmp	r3, #8
 800f0fc:	d103      	bne.n	800f106 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800f0fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f104:	e003      	b.n	800f10e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 800f106:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800f10a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f10c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800f10e:	4a40      	ldr	r2, [pc, #256]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f112:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800f114:	7ffb      	ldrb	r3, [r7, #31]
 800f116:	2b10      	cmp	r3, #16
 800f118:	d101      	bne.n	800f11e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 800f11a:	2302      	movs	r3, #2
 800f11c:	e000      	b.n	800f120 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 800f11e:	2301      	movs	r3, #1
 800f120:	4a3b      	ldr	r2, [pc, #236]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f122:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	8adb      	ldrh	r3, [r3, #22]
 800f128:	461a      	mov	r2, r3
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	8a1b      	ldrh	r3, [r3, #16]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	461a      	mov	r2, r3
 800f132:	4b37      	ldr	r3, [pc, #220]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f134:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800f136:	7ffb      	ldrb	r3, [r7, #31]
 800f138:	2b10      	cmp	r3, #16
 800f13a:	d101      	bne.n	800f140 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 800f13c:	2202      	movs	r2, #2
 800f13e:	e000      	b.n	800f142 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 800f140:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	8adb      	ldrh	r3, [r3, #22]
 800f146:	4619      	mov	r1, r3
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	8a1b      	ldrh	r3, [r3, #16]
 800f14c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800f14e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f150:	482f      	ldr	r0, [pc, #188]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f152:	f7ff fd29 	bl	800eba8 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 800f156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f15c:	d11e      	bne.n	800f19c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800f15e:	4b2c      	ldr	r3, [pc, #176]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f160:	2201      	movs	r2, #1
 800f162:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 800f164:	4a2a      	ldr	r2, [pc, #168]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 800f16a:	4b29      	ldr	r3, [pc, #164]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f16c:	2209      	movs	r2, #9
 800f16e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	8adb      	ldrh	r3, [r3, #22]
 800f174:	461a      	mov	r2, r3
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	8a1b      	ldrh	r3, [r3, #16]
 800f17a:	1ad3      	subs	r3, r2, r3
 800f17c:	461a      	mov	r2, r3
 800f17e:	4b24      	ldr	r3, [pc, #144]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f180:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800f182:	7ffb      	ldrb	r3, [r7, #31]
 800f184:	2b10      	cmp	r3, #16
 800f186:	d101      	bne.n	800f18c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 800f188:	2302      	movs	r3, #2
 800f18a:	e000      	b.n	800f18e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 800f18c:	2301      	movs	r3, #1
 800f18e:	4a20      	ldr	r2, [pc, #128]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f190:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800f192:	2100      	movs	r1, #0
 800f194:	481e      	ldr	r0, [pc, #120]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f196:	f7f5 f957 	bl	8004448 <HAL_DMA2D_ConfigLayer>
 800f19a:	e005      	b.n	800f1a8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800f19c:	4a1c      	ldr	r2, [pc, #112]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f19e:	69bb      	ldr	r3, [r7, #24]
 800f1a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 800f1a2:	4b1b      	ldr	r3, [pc, #108]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800f1a8:	2101      	movs	r1, #1
 800f1aa:	4819      	ldr	r0, [pc, #100]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f1ac:	f7f5 f94c 	bl	8004448 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1b6:	d115      	bne.n	800f1e4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800f1bc:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800f1c2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800f1c8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800f1ce:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800f1d4:	9301      	str	r3, [sp, #4]
 800f1d6:	9200      	str	r2, [sp, #0]
 800f1d8:	4623      	mov	r3, r4
 800f1da:	4602      	mov	r2, r0
 800f1dc:	480c      	ldr	r0, [pc, #48]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f1de:	f7f4 ff56 	bl	800408e <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 800f1e2:	e00d      	b.n	800f200 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	68db      	ldr	r3, [r3, #12]
 800f1e8:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800f1ee:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	6a39      	ldr	r1, [r7, #32]
 800f1fa:	4805      	ldr	r0, [pc, #20]	; (800f210 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800f1fc:	f7f4 ff14 	bl	8004028 <HAL_DMA2D_Start_IT>
}
 800f200:	bf00      	nop
 800f202:	372c      	adds	r7, #44	; 0x2c
 800f204:	46bd      	mov	sp, r7
 800f206:	bd90      	pop	{r4, r7, pc}
 800f208:	84210843 	.word	0x84210843
 800f20c:	82082083 	.word	0x82082083
 800f210:	2000a3c8 	.word	0x2000a3c8

0800f214 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	4a05      	ldr	r2, [pc, #20]	; (800f234 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	601a      	str	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff fc2b 	bl	800ea80 <_ZN8touchgfx9DMA_QueueD1Ev>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	08022b70 	.word	0x08022b70

0800f238 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff ffe7 	bl	800f214 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800f246:	2114      	movs	r1, #20
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f010 fe91 	bl	801ff70 <_ZdlPvj>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4618      	mov	r0, r3
 800f252:	3708      	adds	r7, #8
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
        texts = t;
 800f260:	4a04      	ldr	r2, [pc, #16]	; (800f274 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6013      	str	r3, [r2, #0]
    }
 800f266:	bf00      	nop
 800f268:	370c      	adds	r7, #12
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	20009f78 	.word	0x20009f78

0800f278 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
 800f284:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 800f286:	4a0b      	ldr	r2, [pc, #44]	; (800f2b4 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	601a      	str	r2, [r3, #0]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	68ba      	ldr	r2, [r7, #8]
 800f290:	605a      	str	r2, [r3, #4]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	609a      	str	r2, [r3, #8]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	60da      	str	r2, [r3, #12]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	611a      	str	r2, [r3, #16]
    {
    }
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3714      	adds	r7, #20
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	080220b8 	.word	0x080220b8

0800f2b8 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
    {
 800f2c0:	4a04      	ldr	r2, [pc, #16]	; (800f2d4 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	601a      	str	r2, [r3, #0]
    }
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	370c      	adds	r7, #12
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr
 800f2d4:	080220b8 	.word	0x080220b8

0800f2d8 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
    }
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff ffe9 	bl	800f2b8 <_ZN8touchgfx7MVPHeapD1Ev>
 800f2e6:	2114      	movs	r1, #20
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f010 fe41 	bl	801ff70 <_ZdlPvj>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
    {
 800f300:	4a04      	ldr	r2, [pc, #16]	; (800f314 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	601a      	str	r2, [r3, #0]
    }
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	4618      	mov	r0, r3
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr
 800f314:	08022da8 	.word	0x08022da8

0800f318 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
    }
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f7ff ffe9 	bl	800f2f8 <_ZN8touchgfx3LCDD1Ev>
 800f326:	2108      	movs	r1, #8
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f010 fe21 	bl	801ff70 <_ZdlPvj>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2200      	movs	r2, #0
 800f344:	801a      	strh	r2, [r3, #0]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	805a      	strh	r2, [r3, #2]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2200      	movs	r2, #0
 800f350:	809a      	strh	r2, [r3, #4]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2200      	movs	r2, #0
 800f356:	80da      	strh	r2, [r3, #6]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2200      	movs	r2, #0
 800f35c:	811a      	strh	r2, [r3, #8]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	815a      	strh	r2, [r3, #10]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	819a      	strh	r2, [r3, #12]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	739a      	strb	r2, [r3, #14]
        {
        }
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	4618      	mov	r0, r3
 800f374:	370c      	adds	r7, #12
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr

0800f37e <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 800f37e:	b580      	push	{r7, lr}
 800f380:	b082      	sub	sp, #8
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4618      	mov	r0, r3
 800f38a:	f7ff ffd5 	bl	800f338 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	611a      	str	r2, [r3, #16]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	829a      	strh	r2, [r3, #20]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	4618      	mov	r0, r3
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}

0800f3a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	607a      	str	r2, [r7, #4]
 800f3b0:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 800f3b2:	4a44      	ldr	r2, [pc, #272]	; (800f4c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	601a      	str	r2, [r3, #0]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	68ba      	ldr	r2, [r7, #8]
 800f3bc:	605a      	str	r2, [r3, #4]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	609a      	str	r2, [r3, #8]
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	60da      	str	r2, [r3, #12]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	611a      	str	r2, [r3, #16]
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	615a      	str	r2, [r3, #20]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	619a      	str	r2, [r3, #24]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	331c      	adds	r3, #28
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7ff ffcc 	bl	800f37e <_ZN8touchgfx8GesturesC1Ev>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	639a      	str	r2, [r3, #56]	; 0x38
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	63da      	str	r2, [r3, #60]	; 0x3c
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	641a      	str	r2, [r3, #64]	; 0x40
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	645a      	str	r2, [r3, #68]	; 0x44
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2201      	movs	r2, #1
 800f40a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2201      	movs	r2, #1
 800f412:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2200      	movs	r2, #0
 800f41a:	64da      	str	r2, [r3, #76]	; 0x4c
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3350      	adds	r3, #80	; 0x50
 800f420:	4618      	mov	r0, r3
 800f422:	f7fd fd74 	bl	800cf0e <_ZN8touchgfx4RectC1Ev>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2201      	movs	r2, #1
 800f42a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	2200      	movs	r2, #0
 800f432:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2201      	movs	r2, #1
 800f442:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2200      	movs	r2, #0
 800f452:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2200      	movs	r2, #0
 800f45a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2200      	movs	r2, #0
 800f462:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	671a      	str	r2, [r3, #112]	; 0x70
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	2200      	movs	r2, #0
 800f478:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 800f47c:	4a12      	ldr	r2, [pc, #72]	; (800f4c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800f482:	4a12      	ldr	r2, [pc, #72]	; (800f4cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800f484:	8b3b      	ldrh	r3, [r7, #24]
 800f486:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800f488:	4a11      	ldr	r2, [pc, #68]	; (800f4d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800f48a:	8bbb      	ldrh	r3, [r7, #28]
 800f48c:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800f48e:	4b11      	ldr	r3, [pc, #68]	; (800f4d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 800f490:	2200      	movs	r2, #0
 800f492:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800f494:	4b0d      	ldr	r3, [pc, #52]	; (800f4cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800f496:	881a      	ldrh	r2, [r3, #0]
 800f498:	4b0f      	ldr	r3, [pc, #60]	; (800f4d8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 800f49a:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800f49c:	4b0c      	ldr	r3, [pc, #48]	; (800f4d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800f49e:	881a      	ldrh	r2, [r3, #0]
 800f4a0:	4b0e      	ldr	r3, [pc, #56]	; (800f4dc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800f4a2:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800f4a4:	8b3a      	ldrh	r2, [r7, #24]
 800f4a6:	8bbb      	ldrh	r3, [r7, #28]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d301      	bcc.n	800f4b0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	e000      	b.n	800f4b2 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
 800f4c2:	bf00      	nop
 800f4c4:	080226dc 	.word	0x080226dc
 800f4c8:	20009efc 	.word	0x20009efc
 800f4cc:	20009ef0 	.word	0x20009ef0
 800f4d0:	20009ef2 	.word	0x20009ef2
 800f4d4:	20009ef4 	.word	0x20009ef4
 800f4d8:	20009ef6 	.word	0x20009ef6
 800f4dc:	20009ef8 	.word	0x20009ef8

0800f4e0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
 800f4e8:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fd fb07 	bl	800cb00 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800f4f2:	bf00      	nop
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
	...

0800f4fc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af02      	add	r7, sp, #8
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	9300      	str	r3, [sp, #0]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	68b9      	ldr	r1, [r7, #8]
 800f516:	f7ff feaf 	bl	800f278 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800f51a:	4a04      	ldr	r2, [pc, #16]	; (800f52c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	601a      	str	r2, [r3, #0]
    {

    }
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4618      	mov	r0, r3
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	080220a4 	.word	0x080220a4

0800f530 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800f530:	b580      	push	{r7, lr}
 800f532:	af00      	add	r7, sp, #0
 800f534:	4801      	ldr	r0, [pc, #4]	; (800f53c <__tcf_0+0xc>)
 800f536:	f000 f9d1 	bl	800f8dc <_ZN12FrontendHeapD1Ev>
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	20008f7c 	.word	0x20008f7c

0800f540 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800f540:	b580      	push	{r7, lr}
 800f542:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800f544:	4b08      	ldr	r3, [pc, #32]	; (800f568 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f003 0301 	and.w	r3, r3, #1
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d108      	bne.n	800f562 <_ZN12FrontendHeap11getInstanceEv+0x22>
 800f550:	4806      	ldr	r0, [pc, #24]	; (800f56c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 800f552:	f000 f831 	bl	800f5b8 <_ZN12FrontendHeapC1Ev>
 800f556:	4b04      	ldr	r3, [pc, #16]	; (800f568 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800f558:	2201      	movs	r2, #1
 800f55a:	601a      	str	r2, [r3, #0]
 800f55c:	4804      	ldr	r0, [pc, #16]	; (800f570 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 800f55e:	f010 fd51 	bl	8020004 <atexit>
        return instance;
 800f562:	4b02      	ldr	r3, [pc, #8]	; (800f56c <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 800f564:	4618      	mov	r0, r3
 800f566:	bd80      	pop	{r7, pc}
 800f568:	200091d0 	.word	0x200091d0
 800f56c:	20008f7c 	.word	0x20008f7c
 800f570:	0800f531 	.word	0x0800f531

0800f574 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	4a05      	ldr	r2, [pc, #20]	; (800f594 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff fe97 	bl	800f2b8 <_ZN8touchgfx7MVPHeapD1Ev>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	080220a4 	.word	0x080220a4

0800f598 <_ZN16FrontendHeapBaseD0Ev>:
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff ffe7 	bl	800f574 <_ZN16FrontendHeapBaseD1Ev>
 800f5a6:	2114      	movs	r1, #20
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f010 fce1 	bl	801ff70 <_ZdlPvj>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800f5b8:	b590      	push	{r4, r7, lr}
 800f5ba:	b085      	sub	sp, #20
 800f5bc:	af02      	add	r7, sp, #8
 800f5be:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f103 0114 	add.w	r1, r3, #20
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	4623      	mov	r3, r4
 800f5de:	f7ff ff8d 	bl	800f4fc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800f5e2:	4a17      	ldr	r2, [pc, #92]	; (800f640 <_ZN12FrontendHeapC1Ev+0x88>)
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	3314      	adds	r3, #20
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f8d9 	bl	800f7a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	332c      	adds	r3, #44	; 0x2c
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f000 f908 	bl	800f80c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	33ec      	adds	r3, #236	; 0xec
 800f600:	4618      	mov	r0, r3
 800f602:	f000 f937 	bl	800f874 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	4619      	mov	r1, r3
 800f616:	f7fe fae1 	bl	800dbdc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800f620:	4618      	mov	r0, r3
 800f622:	f7fe faf1 	bl	800dc08 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f62e:	4619      	mov	r1, r3
 800f630:	4610      	mov	r0, r2
 800f632:	f7ff ff55 	bl	800f4e0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	4618      	mov	r0, r3
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd90      	pop	{r4, r7, pc}
 800f640:	08021ff4 	.word	0x08021ff4

0800f644 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
{
public:
    LCD16bpp();

    virtual ~LCD16bpp()
 800f644:	b580      	push	{r7, lr}
 800f646:	b082      	sub	sp, #8
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
    {
 800f64c:	4a05      	ldr	r2, [pc, #20]	; (800f664 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	601a      	str	r2, [r3, #0]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff fe4f 	bl	800f2f8 <_ZN8touchgfx3LCDD1Ev>
    }
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	08024150 	.word	0x08024150

0800f668 <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
    }
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7ff ffe7 	bl	800f644 <_ZN8touchgfx8LCD16bppD1Ev>
 800f676:	2178      	movs	r1, #120	; 0x78
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f010 fc79 	bl	801ff70 <_ZdlPvj>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800f688:	b580      	push	{r7, lr}
 800f68a:	b086      	sub	sp, #24
 800f68c:	af02      	add	r7, sp, #8
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	603b      	str	r3, [r7, #0]
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	8bbb      	ldrh	r3, [r7, #28]
 800f69a:	9301      	str	r3, [sp, #4]
 800f69c:	8b3b      	ldrh	r3, [r7, #24]
 800f69e:	9300      	str	r3, [sp, #0]
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	68b9      	ldr	r1, [r7, #8]
 800f6a6:	f7ff fe7d 	bl	800f3a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800f6aa:	4a04      	ldr	r2, [pc, #16]	; (800f6bc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	601a      	str	r2, [r3, #0]
    }
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	080220c8 	.word	0x080220c8

0800f6c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af02      	add	r7, sp, #8
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	603b      	str	r3, [r7, #0]
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	8bbb      	ldrh	r3, [r7, #28]
 800f6d2:	9301      	str	r3, [sp, #4]
 800f6d4:	8b3b      	ldrh	r3, [r7, #24]
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	68b9      	ldr	r1, [r7, #8]
 800f6de:	f7ff ffd3 	bl	800f688 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f6e2:	4a04      	ldr	r2, [pc, #16]	; (800f6f4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	601a      	str	r2, [r3, #0]
    }
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	08021cf0 	.word	0x08021cf0

0800f6f8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	4a04      	ldr	r2, [pc, #16]	; (800f714 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	601a      	str	r2, [r3, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	4618      	mov	r0, r3
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr
 800f714:	08021cd8 	.word	0x08021cd8

0800f718 <_ZN20STM32TouchControllerC1Ev>:

class STM32TouchController : public touchgfx::TouchController
{
public:

    STM32TouchController() {}
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	4618      	mov	r0, r3
 800f724:	f7ff ffe8 	bl	800f6f8 <_ZN8touchgfx15TouchControllerC1Ev>
 800f728:	4a03      	ldr	r2, [pc, #12]	; (800f738 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	3708      	adds	r7, #8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	08021cc0 	.word	0x08021cc0

0800f73c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800f73c:	b590      	push	{r4, r7, lr}
 800f73e:	b085      	sub	sp, #20
 800f740:	af02      	add	r7, sp, #8
  Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800f742:	f7fe f93b 	bl	800d9bc <_ZN14BitmapDatabase11getInstanceEv>
 800f746:	4604      	mov	r4, r0
 800f748:	f7fe f942 	bl	800d9d0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800f74c:	4603      	mov	r3, r0
 800f74e:	4619      	mov	r1, r3
 800f750:	2300      	movs	r3, #0
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	2300      	movs	r3, #0
 800f756:	2200      	movs	r2, #0
 800f758:	4620      	mov	r0, r4
 800f75a:	f004 ff69 	bl	8014630 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
  TypedText::registerTexts(&texts);
 800f75e:	4809      	ldr	r0, [pc, #36]	; (800f784 <touchgfx_init+0x48>)
 800f760:	f7ff fd7a 	bl	800f258 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
  Texts::setLanguage(0);
 800f764:	2000      	movs	r0, #0
 800f766:	f7fe f957 	bl	800da18 <_ZN8touchgfx5Texts11setLanguageEt>

  FontManager::setFontProvider(&fontProvider);
 800f76a:	4807      	ldr	r0, [pc, #28]	; (800f788 <touchgfx_init+0x4c>)
 800f76c:	f004 feae 	bl	80144cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

  FrontendHeap& heap = FrontendHeap::getInstance();
 800f770:	f7ff fee6 	bl	800f540 <_ZN12FrontendHeap11getInstanceEv>
 800f774:	6078      	str	r0, [r7, #4]
  (void)heap; // we need to obtain the reference above to initialize the frontend heap.

  hal.initialize();
 800f776:	4805      	ldr	r0, [pc, #20]	; (800f78c <touchgfx_init+0x50>)
 800f778:	f7fe ffa6 	bl	800e6c8 <_ZN11TouchGFXHAL10initializeEv>
}
 800f77c:	bf00      	nop
 800f77e:	370c      	adds	r7, #12
 800f780:	46bd      	mov	sp, r7
 800f782:	bd90      	pop	{r4, r7, pc}
 800f784:	20009e70 	.word	0x20009e70
 800f788:	20000090 	.word	0x20000090
 800f78c:	20009e74 	.word	0x20009e74

0800f790 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800f790:	b580      	push	{r7, lr}
 800f792:	af00      	add	r7, sp, #0
  * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
  * this function from your GUI task.
  *
  * Note This function never returns
  */
  hal.taskEntry();
 800f794:	4802      	ldr	r0, [pc, #8]	; (800f7a0 <touchgfx_taskEntry+0x10>)
 800f796:	f7fe ffa3 	bl	800e6e0 <_ZN11TouchGFXHAL9taskEntryEv>
}
 800f79a:	bf00      	nop
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20009e74 	.word	0x20009e74

0800f7a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 fbf4 	bl	800ff9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f7b4:	4a03      	ldr	r2, [pc, #12]	; (800f7c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	601a      	str	r2, [r3, #0]
    {
    }
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3708      	adds	r7, #8
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	08022070 	.word	0x08022070

0800f7c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
    {
    }
 800f7d0:	4a05      	ldr	r2, [pc, #20]	; (800f7e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 fbdd 	bl	800ff98 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	08022070 	.word	0x08022070

0800f7ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
    }
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f7ff ffe7 	bl	800f7c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f7fa:	2118      	movs	r1, #24
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f010 fbb7 	bl	801ff70 <_ZdlPvj>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4618      	mov	r0, r3
 800f806:	3708      	adds	r7, #8
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	4618      	mov	r0, r3
 800f818:	f000 fbc0 	bl	800ff9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f81c:	4a03      	ldr	r2, [pc, #12]	; (800f82c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	601a      	str	r2, [r3, #0]
    }
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4618      	mov	r0, r3
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	0802203c 	.word	0x0802203c

0800f830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
    }
 800f838:	4a05      	ldr	r2, [pc, #20]	; (800f850 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	601a      	str	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4618      	mov	r0, r3
 800f842:	f000 fba9 	bl	800ff98 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	0802203c 	.word	0x0802203c

0800f854 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    }
 800f85c:	6878      	ldr	r0, [r7, #4]
 800f85e:	f7ff ffe7 	bl	800f830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f862:	21c0      	movs	r1, #192	; 0xc0
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f010 fb83 	bl	801ff70 <_ZdlPvj>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4618      	mov	r0, r3
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4618      	mov	r0, r3
 800f880:	f000 fb8c 	bl	800ff9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800f884:	4a03      	ldr	r2, [pc, #12]	; (800f894 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	601a      	str	r2, [r3, #0]
    }
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	08022008 	.word	0x08022008

0800f898 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800f898:	b580      	push	{r7, lr}
 800f89a:	b082      	sub	sp, #8
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
    }
 800f8a0:	4a05      	ldr	r2, [pc, #20]	; (800f8b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f000 fb75 	bl	800ff98 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	08022008 	.word	0x08022008

0800f8bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
    }
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff ffe7 	bl	800f898 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f8ca:	2114      	movs	r1, #20
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f010 fb4f 	bl	801ff70 <_ZdlPvj>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	4a10      	ldr	r2, [pc, #64]	; (800f928 <_ZN12FrontendHeapD1Ev+0x4c>)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	601a      	str	r2, [r3, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fe f93d 	bl	800db70 <_ZN19FrontendApplicationD1Ev>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	33ec      	adds	r3, #236	; 0xec
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7ff ffcc 	bl	800f898 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	332c      	adds	r3, #44	; 0x2c
 800f904:	4618      	mov	r0, r3
 800f906:	f7ff ff93 	bl	800f830 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3314      	adds	r3, #20
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff ff5a 	bl	800f7c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff fe2c 	bl	800f574 <_ZN16FrontendHeapBaseD1Ev>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4618      	mov	r0, r3
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	08021ff4 	.word	0x08021ff4

0800f92c <_ZN12FrontendHeapD0Ev>:
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ffd1 	bl	800f8dc <_ZN12FrontendHeapD1Ev>
 800f93a:	f44f 7115 	mov.w	r1, #596	; 0x254
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f010 fb16 	bl	801ff70 <_ZdlPvj>
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	4618      	mov	r0, r3
 800f948:	3708      	adds	r7, #8
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
	...

0800f950 <_Z41__static_initialization_and_destruction_0ii>:
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af02      	add	r7, sp, #8
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d118      	bne.n	800f992 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f966:	4293      	cmp	r3, r2
 800f968:	d113      	bne.n	800f992 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 800f96a:	4817      	ldr	r0, [pc, #92]	; (800f9c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800f96c:	f7ff fed4 	bl	800f718 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800f970:	4816      	ldr	r0, [pc, #88]	; (800f9cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f972:	f7ff f973 	bl	800ec5c <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 800f976:	4816      	ldr	r0, [pc, #88]	; (800f9d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f978:	f007 fe5e 	bl	8017638 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800f97c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	23f0      	movs	r3, #240	; 0xf0
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	4b10      	ldr	r3, [pc, #64]	; (800f9c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800f988:	4a11      	ldr	r2, [pc, #68]	; (800f9d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f98a:	4910      	ldr	r1, [pc, #64]	; (800f9cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f98c:	4811      	ldr	r0, [pc, #68]	; (800f9d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f98e:	f7ff fe97 	bl	800f6c0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d113      	bne.n	800f9c0 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d10e      	bne.n	800f9c0 <_Z41__static_initialization_and_destruction_0ii+0x70>
 800f9a2:	480c      	ldr	r0, [pc, #48]	; (800f9d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800f9a4:	f7fe ff1c 	bl	800e7e0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800f9a8:	480b      	ldr	r0, [pc, #44]	; (800f9d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800f9aa:	f7fc fab9 	bl	800bf20 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800f9ae:	4808      	ldr	r0, [pc, #32]	; (800f9d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800f9b0:	f7ff fe48 	bl	800f644 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 800f9b4:	4805      	ldr	r0, [pc, #20]	; (800f9cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800f9b6:	f7ff f97b 	bl	800ecb0 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800f9ba:	4803      	ldr	r0, [pc, #12]	; (800f9c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800f9bc:	f7fe fc54 	bl	800e268 <_ZN20STM32TouchControllerD1Ev>
}
 800f9c0:	bf00      	nop
 800f9c2:	3708      	adds	r7, #8
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	200091d4 	.word	0x200091d4
 800f9cc:	200091d8 	.word	0x200091d8
 800f9d0:	20009df8 	.word	0x20009df8
 800f9d4:	20009e74 	.word	0x20009e74
 800f9d8:	20000090 	.word	0x20000090

0800f9dc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800f9e4:	2301      	movs	r3, #1
    }
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	370c      	adds	r7, #12
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 800f9f2:	b480      	push	{r7}
 800f9f4:	b083      	sub	sp, #12
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800f9fa:	230c      	movs	r3, #12
    }
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr

0800fa08 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800fa14:	887a      	ldrh	r2, [r7, #2]
 800fa16:	4613      	mov	r3, r2
 800fa18:	005b      	lsls	r3, r3, #1
 800fa1a:	4413      	add	r3, r2
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	3308      	adds	r3, #8
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	4413      	add	r3, r2
    }
 800fa24:	4618      	mov	r0, r3
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800fa3c:	887a      	ldrh	r2, [r7, #2]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	005b      	lsls	r3, r3, #1
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	3308      	adds	r3, #8
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	4413      	add	r3, r2
    }
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800fa60:	2301      	movs	r3, #1
    }
 800fa62:	4618      	mov	r0, r3
 800fa64:	370c      	adds	r7, #12
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr

0800fa6e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800fa6e:	b480      	push	{r7}
 800fa70:	b083      	sub	sp, #12
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800fa76:	23b8      	movs	r3, #184	; 0xb8
    }
 800fa78:	4618      	mov	r0, r3
 800fa7a:	370c      	adds	r7, #12
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa82:	4770      	bx	lr

0800fa84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800fa90:	887b      	ldrh	r3, [r7, #2]
 800fa92:	22b8      	movs	r2, #184	; 0xb8
 800fa94:	fb02 f303 	mul.w	r3, r2, r3
 800fa98:	3308      	adds	r3, #8
 800fa9a:	687a      	ldr	r2, [r7, #4]
 800fa9c:	4413      	add	r3, r2
    }
 800fa9e:	4618      	mov	r0, r3
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr

0800faaa <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800faaa:	b480      	push	{r7}
 800faac:	b083      	sub	sp, #12
 800faae:	af00      	add	r7, sp, #0
 800fab0:	6078      	str	r0, [r7, #4]
 800fab2:	460b      	mov	r3, r1
 800fab4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800fab6:	887b      	ldrh	r3, [r7, #2]
 800fab8:	22b8      	movs	r2, #184	; 0xb8
 800faba:	fb02 f303 	mul.w	r3, r2, r3
 800fabe:	3308      	adds	r3, #8
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	4413      	add	r3, r2
    }
 800fac4:	4618      	mov	r0, r3
 800fac6:	370c      	adds	r7, #12
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800fad8:	2301      	movs	r3, #1
    }
 800fada:	4618      	mov	r0, r3
 800fadc:	370c      	adds	r7, #12
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800fae6:	b480      	push	{r7}
 800fae8:	b083      	sub	sp, #12
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800faee:	2310      	movs	r3, #16
    }
 800faf0:	4618      	mov	r0, r3
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	460b      	mov	r3, r1
 800fb06:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800fb08:	887b      	ldrh	r3, [r7, #2]
 800fb0a:	011b      	lsls	r3, r3, #4
 800fb0c:	3308      	adds	r3, #8
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	4413      	add	r3, r2
    }
 800fb12:	4618      	mov	r0, r3
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr

0800fb1e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800fb1e:	b480      	push	{r7}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
 800fb26:	460b      	mov	r3, r1
 800fb28:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800fb2a:	887b      	ldrh	r3, [r7, #2]
 800fb2c:	011b      	lsls	r3, r3, #4
 800fb2e:	3308      	adds	r3, #8
 800fb30:	687a      	ldr	r2, [r7, #4]
 800fb32:	4413      	add	r3, r2
    }
 800fb34:	4618      	mov	r0, r3
 800fb36:	370c      	adds	r7, #12
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr

0800fb40 <_GLOBAL__sub_I_touchgfx_init>:
 800fb40:	b580      	push	{r7, lr}
 800fb42:	af00      	add	r7, sp, #0
 800fb44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fb48:	2001      	movs	r0, #1
 800fb4a:	f7ff ff01 	bl	800f950 <_Z41__static_initialization_and_destruction_0ii>
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <_GLOBAL__sub_D_touchgfx_init>:
 800fb50:	b580      	push	{r7, lr}
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fb58:	2000      	movs	r0, #0
 800fb5a:	f7ff fef9 	bl	800f950 <_Z41__static_initialization_and_destruction_0ii>
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3318      	adds	r3, #24
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	4798      	blx	r3
    }
 800fb74:	bf00      	nop
 800fb76:	3708      	adds	r7, #8
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	460b      	mov	r3, r1
 800fb86:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	78fa      	ldrb	r2, [r7, #3]
 800fb8c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800fbaa:	3301      	adds	r3, #1
 800fbac:	b2da      	uxtb	r2, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800fbb4:	bf00      	nop
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <__NVIC_EnableIRQ>:
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	db0d      	blt.n	800fbee <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fbd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	f003 021f 	and.w	r2, r3, #31
 800fbdc:	4907      	ldr	r1, [pc, #28]	; (800fbfc <__NVIC_EnableIRQ+0x3c>)
 800fbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbe2:	095b      	lsrs	r3, r3, #5
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	fa00 f202 	lsl.w	r2, r0, r2
 800fbea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800fbee:	bf00      	nop
 800fbf0:	370c      	adds	r7, #12
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	e000e100 	.word	0xe000e100

0800fc00 <__NVIC_DisableIRQ>:
{
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	4603      	mov	r3, r0
 800fc08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	db12      	blt.n	800fc38 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fc12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	f003 021f 	and.w	r2, r3, #31
 800fc1c:	4909      	ldr	r1, [pc, #36]	; (800fc44 <__NVIC_DisableIRQ+0x44>)
 800fc1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc22:	095b      	lsrs	r3, r3, #5
 800fc24:	2001      	movs	r0, #1
 800fc26:	fa00 f202 	lsl.w	r2, r0, r2
 800fc2a:	3320      	adds	r3, #32
 800fc2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800fc30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fc34:	f3bf 8f6f 	isb	sy
}
 800fc38:	bf00      	nop
 800fc3a:	370c      	adds	r7, #12
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	e000e100 	.word	0xe000e100

0800fc48 <__NVIC_SetPriority>:
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	6039      	str	r1, [r7, #0]
 800fc52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fc54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	db0c      	blt.n	800fc76 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	4a0e      	ldr	r2, [pc, #56]	; (800fc9c <__NVIC_SetPriority+0x54>)
 800fc62:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800fc66:	4608      	mov	r0, r1
 800fc68:	011b      	lsls	r3, r3, #4
 800fc6a:	b2d9      	uxtb	r1, r3
 800fc6c:	1813      	adds	r3, r2, r0
 800fc6e:	460a      	mov	r2, r1
 800fc70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fc74:	e00c      	b.n	800fc90 <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	b2da      	uxtb	r2, r3
 800fc7a:	4909      	ldr	r1, [pc, #36]	; (800fca0 <__NVIC_SetPriority+0x58>)
 800fc7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc80:	b2db      	uxtb	r3, r3
 800fc82:	f003 030f 	and.w	r3, r3, #15
 800fc86:	3b04      	subs	r3, #4
 800fc88:	0112      	lsls	r2, r2, #4
 800fc8a:	b2d2      	uxtb	r2, r2
 800fc8c:	440b      	add	r3, r1
 800fc8e:	761a      	strb	r2, [r3, #24]
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	e000e100 	.word	0xe000e100
 800fca0:	e000ed00 	.word	0xe000ed00

0800fca4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800fca4:	b5b0      	push	{r4, r5, r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f000 fe48 	bl	8010944 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800fcb4:	687d      	ldr	r5, [r7, #4]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	334c      	adds	r3, #76	; 0x4c
 800fcbc:	681c      	ldr	r4, [r3, #0]
 800fcbe:	f002 fbff 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	4619      	mov	r1, r3
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf)/(sizeof(uint32_t)*2)), (void*)0);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	3374      	adds	r3, #116	; 0x74
 800fcd2:	681c      	ldr	r4, [r3, #0]
 800fcd4:	4a06      	ldr	r2, [pc, #24]	; (800fcf0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	4906      	ldr	r1, [pc, #24]	; (800fcf4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x50>)
 800fcda:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2100      	movs	r1, #0
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff ff4b 	bl	800fb7c <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800fce6:	bf00      	nop
 800fce8:	3708      	adds	r7, #8
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bdb0      	pop	{r4, r5, r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	d0025800 	.word	0xd0025800
 800fcf4:	d0000000 	.word	0xd0000000

0800fcf8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800fd00:	2109      	movs	r1, #9
 800fd02:	205a      	movs	r0, #90	; 0x5a
 800fd04:	f7ff ffa0 	bl	800fc48 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800fd08:	2109      	movs	r1, #9
 800fd0a:	2058      	movs	r0, #88	; 0x58
 800fd0c:	f7ff ff9c 	bl	800fc48 <__NVIC_SetPriority>
}
 800fd10:	bf00      	nop
 800fd12:	3708      	adds	r7, #8
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b082      	sub	sp, #8
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800fd20:	205a      	movs	r0, #90	; 0x5a
 800fd22:	f7ff ff4d 	bl	800fbc0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800fd26:	2058      	movs	r0, #88	; 0x58
 800fd28:	f7ff ff4a 	bl	800fbc0 <__NVIC_EnableIRQ>
}
 800fd2c:	bf00      	nop
 800fd2e:	3708      	adds	r7, #8
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800fd3c:	205a      	movs	r0, #90	; 0x5a
 800fd3e:	f7ff ff5f 	bl	800fc00 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800fd42:	2058      	movs	r0, #88	; 0x58
 800fd44:	f7ff ff5c 	bl	800fc00 <__NVIC_DisableIRQ>
}
 800fd48:	bf00      	nop
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800fd58:	4b11      	ldr	r3, [pc, #68]	; (800fda0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	3b01      	subs	r3, #1
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	4b0e      	ldr	r3, [pc, #56]	; (800fda4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800fd6a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800fd6c:	4b0c      	ldr	r3, [pc, #48]	; (800fda0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	b29a      	uxth	r2, r3
 800fd7c:	4b0a      	ldr	r3, [pc, #40]	; (800fda8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800fd7e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800fd80:	4b08      	ldr	r3, [pc, #32]	; (800fda4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800fd82:	881a      	ldrh	r2, [r3, #0]
 800fd84:	4b06      	ldr	r3, [pc, #24]	; (800fda0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fd86:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800fd88:	4b05      	ldr	r3, [pc, #20]	; (800fda0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fd8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd8c:	4a04      	ldr	r2, [pc, #16]	; (800fda0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800fd8e:	f043 0301 	orr.w	r3, r3, #1
 800fd92:	6353      	str	r3, [r2, #52]	; 0x34
}
 800fd94:	bf00      	nop
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	40016800 	.word	0x40016800
 800fda4:	20009eec 	.word	0x20009eec
 800fda8:	20009eee 	.word	0x20009eee

0800fdac <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800fdb4:	4b03      	ldr	r3, [pc, #12]	; (800fdc4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800fdb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800fdb8:	4618      	mov	r0, r3
 800fdba:	370c      	adds	r7, #12
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr
 800fdc4:	40016884 	.word	0x40016884

0800fdc8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800fdd2:	4a06      	ldr	r2, [pc, #24]	; (800fdec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800fdd8:	4b05      	ldr	r3, [pc, #20]	; (800fdf0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800fdda:	2201      	movs	r2, #1
 800fddc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fdde:	bf00      	nop
 800fde0:	370c      	adds	r7, #12
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	40016884 	.word	0x40016884
 800fdf0:	40016800 	.word	0x40016800

0800fdf4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6839      	ldr	r1, [r7, #0]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f000 faaf 	bl	8010366 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800fe08:	bf00      	nop
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
    {
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800fe18:	4b1a      	ldr	r3, [pc, #104]	; (800fe84 <HAL_LTDC_LineEventCallback+0x74>)
 800fe1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe1c:	4a1a      	ldr	r2, [pc, #104]	; (800fe88 <HAL_LTDC_LineEventCallback+0x78>)
 800fe1e:	8812      	ldrh	r2, [r2, #0]
 800fe20:	4293      	cmp	r3, r2
 800fe22:	bf0c      	ite	eq
 800fe24:	2301      	moveq	r3, #1
 800fe26:	2300      	movne	r3, #0
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d017      	beq.n	800fe5e <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800fe2e:	4b17      	ldr	r3, [pc, #92]	; (800fe8c <HAL_LTDC_LineEventCallback+0x7c>)
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	4619      	mov	r1, r3
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f7f5 ffe9 	bl	8005e0c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800fe3a:	f7fc fc31 	bl	800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff feab 	bl	800fb9c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800fe46:	f7fe fd7f 	bl	800e948 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800fe4a:	f7fc fc29 	bl	800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	4618      	mov	r0, r3
 800fe52:	f000 ffff 	bl	8010e54 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800fe56:	2000      	movs	r0, #0
 800fe58:	f7fe fa28 	bl	800e2ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800fe5c:	e00e      	b.n	800fe7c <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800fe5e:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <HAL_LTDC_LineEventCallback+0x78>)
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7f5 ffd1 	bl	8005e0c <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	f7fe fa29 	bl	800e2c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800fe70:	f7fc fc16 	bl	800c6a0 <_ZN8touchgfx3HAL11getInstanceEv>
 800fe74:	4603      	mov	r3, r0
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff fe72 	bl	800fb60 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	40016800 	.word	0x40016800
 800fe88:	20009eec 	.word	0x20009eec
 800fe8c:	20009eee 	.word	0x20009eee

0800fe90 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800fe90:	8880      	ldrh	r0, [r0, #4]
 800fe92:	4770      	bx	lr

0800fe94 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fe94:	2300      	movs	r3, #0
 800fe96:	8083      	strh	r3, [r0, #4]
 800fe98:	4770      	bx	lr
	...

0800fe9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800fe9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe9e:	6803      	ldr	r3, [r0, #0]
 800fea0:	4605      	mov	r5, r0
 800fea2:	460e      	mov	r6, r1
 800fea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea6:	2100      	movs	r1, #0
 800fea8:	4798      	blx	r3
 800feaa:	682b      	ldr	r3, [r5, #0]
 800feac:	4604      	mov	r4, r0
 800feae:	6a1b      	ldr	r3, [r3, #32]
 800feb0:	4628      	mov	r0, r5
 800feb2:	4798      	blx	r3
 800feb4:	88ab      	ldrh	r3, [r5, #4]
 800feb6:	1b34      	subs	r4, r6, r4
 800feb8:	b2a4      	uxth	r4, r4
 800feba:	fbb4 f4f0 	udiv	r4, r4, r0
 800febe:	42a3      	cmp	r3, r4
 800fec0:	d805      	bhi.n	800fece <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800fec2:	4b0e      	ldr	r3, [pc, #56]	; (800fefc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800fec4:	4a0e      	ldr	r2, [pc, #56]	; (800ff00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800fec6:	211e      	movs	r1, #30
 800fec8:	480e      	ldr	r0, [pc, #56]	; (800ff04 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800feca:	f010 f87d 	bl	801ffc8 <__assert_func>
 800fece:	682b      	ldr	r3, [r5, #0]
 800fed0:	2100      	movs	r1, #0
 800fed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed4:	4628      	mov	r0, r5
 800fed6:	4798      	blx	r3
 800fed8:	682b      	ldr	r3, [r5, #0]
 800feda:	4607      	mov	r7, r0
 800fedc:	6a1b      	ldr	r3, [r3, #32]
 800fede:	4628      	mov	r0, r5
 800fee0:	4798      	blx	r3
 800fee2:	1bf3      	subs	r3, r6, r7
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	fbb3 f2f0 	udiv	r2, r3, r0
 800feea:	fb02 3010 	mls	r0, r2, r0, r3
 800feee:	b118      	cbz	r0, 800fef8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800fef2:	4a03      	ldr	r2, [pc, #12]	; (800ff00 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800fef4:	211f      	movs	r1, #31
 800fef6:	e7e7      	b.n	800fec8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800fef8:	4620      	mov	r0, r4
 800fefa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fefc:	08022174 	.word	0x08022174
 800ff00:	080222e2 	.word	0x080222e2
 800ff04:	08022189 	.word	0x08022189
 800ff08:	080221b7 	.word	0x080221b7

0800ff0c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	6803      	ldr	r3, [r0, #0]
 800ff10:	6a1b      	ldr	r3, [r3, #32]
 800ff12:	460d      	mov	r5, r1
 800ff14:	4604      	mov	r4, r0
 800ff16:	4798      	blx	r3
 800ff18:	4285      	cmp	r5, r0
 800ff1a:	d905      	bls.n	800ff28 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800ff1c:	4b0c      	ldr	r3, [pc, #48]	; (800ff50 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800ff1e:	4a0d      	ldr	r2, [pc, #52]	; (800ff54 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800ff20:	212f      	movs	r1, #47	; 0x2f
 800ff22:	480d      	ldr	r0, [pc, #52]	; (800ff58 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800ff24:	f010 f850 	bl	801ffc8 <__assert_func>
 800ff28:	6823      	ldr	r3, [r4, #0]
 800ff2a:	88a5      	ldrh	r5, [r4, #4]
 800ff2c:	69db      	ldr	r3, [r3, #28]
 800ff2e:	4620      	mov	r0, r4
 800ff30:	4798      	blx	r3
 800ff32:	4285      	cmp	r5, r0
 800ff34:	d303      	bcc.n	800ff3e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800ff36:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800ff38:	4a06      	ldr	r2, [pc, #24]	; (800ff54 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800ff3a:	2130      	movs	r1, #48	; 0x30
 800ff3c:	e7f1      	b.n	800ff22 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800ff3e:	6823      	ldr	r3, [r4, #0]
 800ff40:	88a1      	ldrh	r1, [r4, #4]
 800ff42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff44:	4620      	mov	r0, r4
 800ff46:	4798      	blx	r3
 800ff48:	88a3      	ldrh	r3, [r4, #4]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	80a3      	strh	r3, [r4, #4]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	08022231 	.word	0x08022231
 800ff54:	08022325 	.word	0x08022325
 800ff58:	08022189 	.word	0x08022189
 800ff5c:	08022248 	.word	0x08022248

0800ff60 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800ff60:	b570      	push	{r4, r5, r6, lr}
 800ff62:	6803      	ldr	r3, [r0, #0]
 800ff64:	6a1b      	ldr	r3, [r3, #32]
 800ff66:	4616      	mov	r6, r2
 800ff68:	4604      	mov	r4, r0
 800ff6a:	460d      	mov	r5, r1
 800ff6c:	4798      	blx	r3
 800ff6e:	4286      	cmp	r6, r0
 800ff70:	d905      	bls.n	800ff7e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800ff72:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800ff74:	4a06      	ldr	r2, [pc, #24]	; (800ff90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800ff76:	4807      	ldr	r0, [pc, #28]	; (800ff94 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800ff78:	2139      	movs	r1, #57	; 0x39
 800ff7a:	f010 f825 	bl	801ffc8 <__assert_func>
 800ff7e:	6823      	ldr	r3, [r4, #0]
 800ff80:	4629      	mov	r1, r5
 800ff82:	4620      	mov	r0, r4
 800ff84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff8a:	4718      	bx	r3
 800ff8c:	08022231 	.word	0x08022231
 800ff90:	08022298 	.word	0x08022298
 800ff94:	08022189 	.word	0x08022189

0800ff98 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800ff98:	4770      	bx	lr
	...

0800ff9c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ff9c:	4a02      	ldr	r2, [pc, #8]	; (800ffa8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ff9e:	6002      	str	r2, [r0, #0]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	8082      	strh	r2, [r0, #4]
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	0802226c 	.word	0x0802226c

0800ffac <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ffac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ffae:	2000      	movs	r0, #0
 800ffb0:	b12b      	cbz	r3, 800ffbe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ffb2:	b920      	cbnz	r0, 800ffbe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ffb4:	1a5a      	subs	r2, r3, r1
 800ffb6:	4250      	negs	r0, r2
 800ffb8:	4150      	adcs	r0, r2
 800ffba:	699b      	ldr	r3, [r3, #24]
 800ffbc:	e7f8      	b.n	800ffb0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ffbe:	4770      	bx	lr

0800ffc0 <_ZN8touchgfx9Container9removeAllEv>:
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ffc4:	b123      	cbz	r3, 800ffd0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ffc6:	6999      	ldr	r1, [r3, #24]
 800ffc8:	6281      	str	r1, [r0, #40]	; 0x28
 800ffca:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ffce:	e7f8      	b.n	800ffc2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ffd0:	4770      	bx	lr

0800ffd2 <_ZN8touchgfx9Container6unlinkEv>:
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	6283      	str	r3, [r0, #40]	; 0x28
 800ffd6:	4770      	bx	lr

0800ffd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	461f      	mov	r7, r3
 800ffde:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ffe2:	460d      	mov	r5, r1
 800ffe4:	4616      	mov	r6, r2
 800ffe6:	b103      	cbz	r3, 800ffea <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ffe8:	6038      	str	r0, [r7, #0]
 800ffea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ffec:	b314      	cbz	r4, 8010034 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ffee:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fff2:	b1eb      	cbz	r3, 8010030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fff4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fff8:	428d      	cmp	r5, r1
 800fffa:	db19      	blt.n	8010030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fffc:	8923      	ldrh	r3, [r4, #8]
 800fffe:	b289      	uxth	r1, r1
 8010000:	440b      	add	r3, r1
 8010002:	b21b      	sxth	r3, r3
 8010004:	429d      	cmp	r5, r3
 8010006:	da13      	bge.n	8010030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010008:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801000c:	4296      	cmp	r6, r2
 801000e:	db0f      	blt.n	8010030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8010010:	8963      	ldrh	r3, [r4, #10]
 8010012:	b292      	uxth	r2, r2
 8010014:	4413      	add	r3, r2
 8010016:	b21b      	sxth	r3, r3
 8010018:	429e      	cmp	r6, r3
 801001a:	da09      	bge.n	8010030 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801001c:	6823      	ldr	r3, [r4, #0]
 801001e:	1ab2      	subs	r2, r6, r2
 8010020:	1a69      	subs	r1, r5, r1
 8010022:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8010026:	b212      	sxth	r2, r2
 8010028:	463b      	mov	r3, r7
 801002a:	b209      	sxth	r1, r1
 801002c:	4620      	mov	r0, r4
 801002e:	47c0      	blx	r8
 8010030:	69a4      	ldr	r4, [r4, #24]
 8010032:	e7db      	b.n	800ffec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8010034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010038 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8010038:	2200      	movs	r2, #0
 801003a:	8002      	strh	r2, [r0, #0]
 801003c:	8042      	strh	r2, [r0, #2]
 801003e:	8082      	strh	r2, [r0, #4]
 8010040:	80c2      	strh	r2, [r0, #6]
 8010042:	4770      	bx	lr

08010044 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8010044:	b570      	push	{r4, r5, r6, lr}
 8010046:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010048:	460d      	mov	r5, r1
 801004a:	4616      	mov	r6, r2
 801004c:	b13c      	cbz	r4, 801005e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	4620      	mov	r0, r4
 8010052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010054:	4632      	mov	r2, r6
 8010056:	4629      	mov	r1, r5
 8010058:	4798      	blx	r3
 801005a:	69a4      	ldr	r4, [r4, #24]
 801005c:	e7f6      	b.n	801004c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 801005e:	bd70      	pop	{r4, r5, r6, pc}

08010060 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8010060:	b538      	push	{r3, r4, r5, lr}
 8010062:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010064:	460d      	mov	r5, r1
 8010066:	b134      	cbz	r4, 8010076 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8010068:	682b      	ldr	r3, [r5, #0]
 801006a:	4621      	mov	r1, r4
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	4628      	mov	r0, r5
 8010070:	4798      	blx	r3
 8010072:	69a4      	ldr	r4, [r4, #24]
 8010074:	e7f7      	b.n	8010066 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8010076:	bd38      	pop	{r3, r4, r5, pc}

08010078 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8010078:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801007a:	b19b      	cbz	r3, 80100a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801007c:	428b      	cmp	r3, r1
 801007e:	d109      	bne.n	8010094 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8010080:	699a      	ldr	r2, [r3, #24]
 8010082:	2100      	movs	r1, #0
 8010084:	6159      	str	r1, [r3, #20]
 8010086:	6282      	str	r2, [r0, #40]	; 0x28
 8010088:	b902      	cbnz	r2, 801008c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801008a:	4770      	bx	lr
 801008c:	6199      	str	r1, [r3, #24]
 801008e:	4770      	bx	lr
 8010090:	4613      	mov	r3, r2
 8010092:	b13a      	cbz	r2, 80100a4 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8010094:	699a      	ldr	r2, [r3, #24]
 8010096:	428a      	cmp	r2, r1
 8010098:	d1fa      	bne.n	8010090 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801009a:	698a      	ldr	r2, [r1, #24]
 801009c:	619a      	str	r2, [r3, #24]
 801009e:	2300      	movs	r3, #0
 80100a0:	e9c1 3305 	strd	r3, r3, [r1, #20]
 80100a4:	4770      	bx	lr

080100a6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 80100a6:	b410      	push	{r4}
 80100a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80100aa:	4604      	mov	r4, r0
 80100ac:	b92b      	cbnz	r3, 80100ba <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80100ae:	6803      	ldr	r3, [r0, #0]
 80100b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80100b6:	4611      	mov	r1, r2
 80100b8:	4718      	bx	r3
 80100ba:	b941      	cbnz	r1, 80100ce <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80100bc:	6193      	str	r3, [r2, #24]
 80100be:	6282      	str	r2, [r0, #40]	; 0x28
 80100c0:	6154      	str	r4, [r2, #20]
 80100c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	4603      	mov	r3, r0
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d0f9      	beq.n	80100c2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80100ce:	4299      	cmp	r1, r3
 80100d0:	6998      	ldr	r0, [r3, #24]
 80100d2:	d1f9      	bne.n	80100c8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80100d4:	6190      	str	r0, [r2, #24]
 80100d6:	618a      	str	r2, [r1, #24]
 80100d8:	e7f2      	b.n	80100c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

080100dc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80100dc:	4288      	cmp	r0, r1
 80100de:	b508      	push	{r3, lr}
 80100e0:	d105      	bne.n	80100ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 80100e2:	4b11      	ldr	r3, [pc, #68]	; (8010128 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 80100e4:	4a11      	ldr	r2, [pc, #68]	; (801012c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80100e6:	2123      	movs	r1, #35	; 0x23
 80100e8:	4811      	ldr	r0, [pc, #68]	; (8010130 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 80100ea:	f00f ff6d 	bl	801ffc8 <__assert_func>
 80100ee:	694b      	ldr	r3, [r1, #20]
 80100f0:	b11b      	cbz	r3, 80100fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 80100f2:	4b10      	ldr	r3, [pc, #64]	; (8010134 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 80100f4:	4a0d      	ldr	r2, [pc, #52]	; (801012c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80100f6:	2124      	movs	r1, #36	; 0x24
 80100f8:	e7f6      	b.n	80100e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80100fa:	e9c1 0305 	strd	r0, r3, [r1, #20]
 80100fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8010100:	b913      	cbnz	r3, 8010108 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 8010102:	6281      	str	r1, [r0, #40]	; 0x28
 8010104:	bd08      	pop	{r3, pc}
 8010106:	4613      	mov	r3, r2
 8010108:	699a      	ldr	r2, [r3, #24]
 801010a:	b12a      	cbz	r2, 8010118 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 801010c:	428b      	cmp	r3, r1
 801010e:	d1fa      	bne.n	8010106 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8010110:	4b09      	ldr	r3, [pc, #36]	; (8010138 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 8010112:	4a06      	ldr	r2, [pc, #24]	; (801012c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8010114:	2135      	movs	r1, #53	; 0x35
 8010116:	e7e7      	b.n	80100e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8010118:	428b      	cmp	r3, r1
 801011a:	d103      	bne.n	8010124 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 801011c:	4b06      	ldr	r3, [pc, #24]	; (8010138 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801011e:	4a03      	ldr	r2, [pc, #12]	; (801012c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8010120:	2138      	movs	r1, #56	; 0x38
 8010122:	e7e1      	b.n	80100e8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8010124:	6199      	str	r1, [r3, #24]
 8010126:	e7ed      	b.n	8010104 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 8010128:	08022363 	.word	0x08022363
 801012c:	080224b8 	.word	0x080224b8
 8010130:	0802238f 	.word	0x0802238f
 8010134:	080223c2 	.word	0x080223c2
 8010138:	080223f8 	.word	0x080223f8

0801013c <_ZN8touchgfx4RectaNERKS0_>:
 801013c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010140:	888b      	ldrh	r3, [r1, #4]
 8010142:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010146:	f9b0 a000 	ldrsh.w	sl, [r0]
 801014a:	444b      	add	r3, r9
 801014c:	b29b      	uxth	r3, r3
 801014e:	fa0f f883 	sxth.w	r8, r3
 8010152:	45c2      	cmp	sl, r8
 8010154:	da30      	bge.n	80101b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8010156:	8882      	ldrh	r2, [r0, #4]
 8010158:	4452      	add	r2, sl
 801015a:	b292      	uxth	r2, r2
 801015c:	fa0f fe82 	sxth.w	lr, r2
 8010160:	45f1      	cmp	r9, lr
 8010162:	da29      	bge.n	80101b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8010164:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8010168:	88cc      	ldrh	r4, [r1, #6]
 801016a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801016e:	442c      	add	r4, r5
 8010170:	b224      	sxth	r4, r4
 8010172:	42a6      	cmp	r6, r4
 8010174:	da20      	bge.n	80101b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8010176:	88c7      	ldrh	r7, [r0, #6]
 8010178:	4437      	add	r7, r6
 801017a:	b2bf      	uxth	r7, r7
 801017c:	fa0f fc87 	sxth.w	ip, r7
 8010180:	4565      	cmp	r5, ip
 8010182:	da19      	bge.n	80101b8 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8010184:	45ca      	cmp	sl, r9
 8010186:	4654      	mov	r4, sl
 8010188:	bfb8      	it	lt
 801018a:	464c      	movlt	r4, r9
 801018c:	42b5      	cmp	r5, r6
 801018e:	bfb8      	it	lt
 8010190:	4635      	movlt	r5, r6
 8010192:	45f0      	cmp	r8, lr
 8010194:	bfc8      	it	gt
 8010196:	4613      	movgt	r3, r2
 8010198:	1b1b      	subs	r3, r3, r4
 801019a:	8083      	strh	r3, [r0, #4]
 801019c:	88ca      	ldrh	r2, [r1, #6]
 801019e:	884b      	ldrh	r3, [r1, #2]
 80101a0:	8004      	strh	r4, [r0, #0]
 80101a2:	4413      	add	r3, r2
 80101a4:	b29b      	uxth	r3, r3
 80101a6:	b21a      	sxth	r2, r3
 80101a8:	4594      	cmp	ip, r2
 80101aa:	bfb8      	it	lt
 80101ac:	463b      	movlt	r3, r7
 80101ae:	1b5b      	subs	r3, r3, r5
 80101b0:	80c3      	strh	r3, [r0, #6]
 80101b2:	8045      	strh	r5, [r0, #2]
 80101b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101b8:	2300      	movs	r3, #0
 80101ba:	8003      	strh	r3, [r0, #0]
 80101bc:	8043      	strh	r3, [r0, #2]
 80101be:	8083      	strh	r3, [r0, #4]
 80101c0:	80c3      	strh	r3, [r0, #6]
 80101c2:	e7f7      	b.n	80101b4 <_ZN8touchgfx4RectaNERKS0_+0x78>

080101c4 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80101c4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80101c8:	b12b      	cbz	r3, 80101d6 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 80101ca:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80101ce:	fab0 f080 	clz	r0, r0
 80101d2:	0940      	lsrs	r0, r0, #5
 80101d4:	4770      	bx	lr
 80101d6:	2001      	movs	r0, #1
 80101d8:	4770      	bx	lr

080101da <_ZNK8touchgfx9Container16getContainedAreaEv>:
 80101da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101de:	2300      	movs	r3, #0
 80101e0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80101e2:	8003      	strh	r3, [r0, #0]
 80101e4:	4604      	mov	r4, r0
 80101e6:	8043      	strh	r3, [r0, #2]
 80101e8:	8083      	strh	r3, [r0, #4]
 80101ea:	80c3      	strh	r3, [r0, #6]
 80101ec:	2d00      	cmp	r5, #0
 80101ee:	d040      	beq.n	8010272 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80101f0:	1d28      	adds	r0, r5, #4
 80101f2:	f7ff ffe7 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80101f6:	b988      	cbnz	r0, 801021c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80101f8:	4620      	mov	r0, r4
 80101fa:	f7ff ffe3 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80101fe:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8010202:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010206:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801020a:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 801020e:	b138      	cbz	r0, 8010220 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8010210:	8022      	strh	r2, [r4, #0]
 8010212:	8063      	strh	r3, [r4, #2]
 8010214:	f8a4 e004 	strh.w	lr, [r4, #4]
 8010218:	f8a4 c006 	strh.w	ip, [r4, #6]
 801021c:	69ad      	ldr	r5, [r5, #24]
 801021e:	e7e5      	b.n	80101ec <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8010220:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010224:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010228:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801022c:	4290      	cmp	r0, r2
 801022e:	4607      	mov	r7, r0
 8010230:	bfa8      	it	ge
 8010232:	4617      	movge	r7, r2
 8010234:	4472      	add	r2, lr
 8010236:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801023a:	8027      	strh	r7, [r4, #0]
 801023c:	4299      	cmp	r1, r3
 801023e:	460e      	mov	r6, r1
 8010240:	4440      	add	r0, r8
 8010242:	bfa8      	it	ge
 8010244:	461e      	movge	r6, r3
 8010246:	4471      	add	r1, lr
 8010248:	4463      	add	r3, ip
 801024a:	b200      	sxth	r0, r0
 801024c:	b212      	sxth	r2, r2
 801024e:	b209      	sxth	r1, r1
 8010250:	b21b      	sxth	r3, r3
 8010252:	4290      	cmp	r0, r2
 8010254:	bfac      	ite	ge
 8010256:	ebc7 0200 	rsbge	r2, r7, r0
 801025a:	ebc7 0202 	rsblt	r2, r7, r2
 801025e:	4299      	cmp	r1, r3
 8010260:	bfac      	ite	ge
 8010262:	ebc6 0301 	rsbge	r3, r6, r1
 8010266:	ebc6 0303 	rsblt	r3, r6, r3
 801026a:	8066      	strh	r6, [r4, #2]
 801026c:	80a2      	strh	r2, [r4, #4]
 801026e:	80e3      	strh	r3, [r4, #6]
 8010270:	e7d4      	b.n	801021c <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8010272:	4620      	mov	r0, r4
 8010274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010278 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010278:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801027c:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8010280:	b383      	cbz	r3, 80102e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010282:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010284:	b374      	cbz	r4, 80102e4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010286:	f9b1 5000 	ldrsh.w	r5, [r1]
 801028a:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801028e:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8010292:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010296:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801029a:	b303      	cbz	r3, 80102de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801029c:	4668      	mov	r0, sp
 801029e:	1d21      	adds	r1, r4, #4
 80102a0:	f8ad 5000 	strh.w	r5, [sp]
 80102a4:	f8ad 6002 	strh.w	r6, [sp, #2]
 80102a8:	f8ad 7004 	strh.w	r7, [sp, #4]
 80102ac:	f8ad 8006 	strh.w	r8, [sp, #6]
 80102b0:	f7ff ff44 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 80102b4:	4668      	mov	r0, sp
 80102b6:	f7ff ff85 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80102ba:	b980      	cbnz	r0, 80102de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80102bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80102c0:	88a2      	ldrh	r2, [r4, #4]
 80102c2:	1a9b      	subs	r3, r3, r2
 80102c4:	f8ad 3000 	strh.w	r3, [sp]
 80102c8:	88e2      	ldrh	r2, [r4, #6]
 80102ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80102ce:	1a9b      	subs	r3, r3, r2
 80102d0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80102d4:	6823      	ldr	r3, [r4, #0]
 80102d6:	4669      	mov	r1, sp
 80102d8:	689b      	ldr	r3, [r3, #8]
 80102da:	4620      	mov	r0, r4
 80102dc:	4798      	blx	r3
 80102de:	69a4      	ldr	r4, [r4, #24]
 80102e0:	2c00      	cmp	r4, #0
 80102e2:	d1d8      	bne.n	8010296 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80102e4:	b002      	add	sp, #8
 80102e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080102ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80102ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102ec:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80102f0:	460d      	mov	r5, r1
 80102f2:	4616      	mov	r6, r2
 80102f4:	b323      	cbz	r3, 8010340 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80102f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80102f8:	b314      	cbz	r4, 8010340 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80102fa:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80102fe:	b1eb      	cbz	r3, 801033c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010300:	6828      	ldr	r0, [r5, #0]
 8010302:	6869      	ldr	r1, [r5, #4]
 8010304:	466b      	mov	r3, sp
 8010306:	c303      	stmia	r3!, {r0, r1}
 8010308:	4668      	mov	r0, sp
 801030a:	1d21      	adds	r1, r4, #4
 801030c:	f7ff ff16 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8010310:	4668      	mov	r0, sp
 8010312:	f7ff ff57 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010316:	b988      	cbnz	r0, 801033c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8010318:	f8bd 3000 	ldrh.w	r3, [sp]
 801031c:	88a2      	ldrh	r2, [r4, #4]
 801031e:	1a9b      	subs	r3, r3, r2
 8010320:	f8ad 3000 	strh.w	r3, [sp]
 8010324:	88e2      	ldrh	r2, [r4, #6]
 8010326:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801032a:	1a9b      	subs	r3, r3, r2
 801032c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	4632      	mov	r2, r6
 8010334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010336:	4669      	mov	r1, sp
 8010338:	4620      	mov	r0, r4
 801033a:	4798      	blx	r3
 801033c:	69a4      	ldr	r4, [r4, #24]
 801033e:	e7db      	b.n	80102f8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8010340:	b002      	add	sp, #8
 8010342:	bd70      	pop	{r4, r5, r6, pc}

08010344 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8010344:	b513      	push	{r0, r1, r4, lr}
 8010346:	6803      	ldr	r3, [r0, #0]
 8010348:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801034c:	2300      	movs	r3, #0
 801034e:	e9cd 3300 	strd	r3, r3, [sp]
 8010352:	466b      	mov	r3, sp
 8010354:	47a0      	blx	r4
 8010356:	b002      	add	sp, #8
 8010358:	bd10      	pop	{r4, pc}

0801035a <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801035a:	2301      	movs	r3, #1
 801035c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8010360:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010364:	4770      	bx	lr

08010366 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010366:	2301      	movs	r3, #1
 8010368:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801036c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8010370:	4770      	bx	lr

08010372 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8010372:	6843      	ldr	r3, [r0, #4]
 8010374:	2201      	movs	r2, #1
 8010376:	725a      	strb	r2, [r3, #9]
 8010378:	6840      	ldr	r0, [r0, #4]
 801037a:	6803      	ldr	r3, [r0, #0]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	4718      	bx	r3

08010380 <_ZN8touchgfx3HAL8flushDMAEv>:
 8010380:	6840      	ldr	r0, [r0, #4]
 8010382:	6803      	ldr	r3, [r0, #0]
 8010384:	689b      	ldr	r3, [r3, #8]
 8010386:	4718      	bx	r3

08010388 <_ZN8touchgfx3HAL10beginFrameEv>:
 8010388:	4b04      	ldr	r3, [pc, #16]	; (801039c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	b123      	cbz	r3, 8010398 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801038e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8010392:	f080 0001 	eor.w	r0, r0, #1
 8010396:	4770      	bx	lr
 8010398:	2001      	movs	r0, #1
 801039a:	4770      	bx	lr
 801039c:	20009efa 	.word	0x20009efa

080103a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80103a0:	b510      	push	{r4, lr}
 80103a2:	4604      	mov	r4, r0
 80103a4:	6840      	ldr	r0, [r0, #4]
 80103a6:	6803      	ldr	r3, [r0, #0]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	4798      	blx	r3
 80103ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80103b0:	b113      	cbz	r3, 80103b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80103b2:	2301      	movs	r3, #1
 80103b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80103b8:	bd10      	pop	{r4, pc}

080103ba <_ZN8touchgfx3HAL9taskEntryEv>:
 80103ba:	b508      	push	{r3, lr}
 80103bc:	6803      	ldr	r3, [r0, #0]
 80103be:	4604      	mov	r4, r0
 80103c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80103c2:	4798      	blx	r3
 80103c4:	6823      	ldr	r3, [r4, #0]
 80103c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80103c8:	4620      	mov	r0, r4
 80103ca:	4798      	blx	r3
 80103cc:	f7fe fad0 	bl	800e970 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103d4:	e7f8      	b.n	80103c8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080103d8 <_ZN8touchgfx3HAL4tickEv>:
 80103d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80103da:	6803      	ldr	r3, [r0, #0]
 80103dc:	4d5c      	ldr	r5, [pc, #368]	; (8010550 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80103de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80103e2:	4604      	mov	r4, r0
 80103e4:	4798      	blx	r3
 80103e6:	2800      	cmp	r0, #0
 80103e8:	f000 8097 	beq.w	801051a <_ZN8touchgfx3HAL4tickEv+0x142>
 80103ec:	2001      	movs	r0, #1
 80103ee:	f7fd ff5d 	bl	800e2ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80103f2:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80103f6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80103fa:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80103fe:	2600      	movs	r6, #0
 8010400:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8010404:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8010408:	b133      	cbz	r3, 8010418 <_ZN8touchgfx3HAL4tickEv+0x40>
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	4620      	mov	r0, r4
 801040e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010412:	4798      	blx	r3
 8010414:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8010418:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801041c:	6862      	ldr	r2, [r4, #4]
 801041e:	f083 0301 	eor.w	r3, r3, #1
 8010422:	7253      	strb	r3, [r2, #9]
 8010424:	2601      	movs	r6, #1
 8010426:	702e      	strb	r6, [r5, #0]
 8010428:	f002 f84a 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 801042c:	6803      	ldr	r3, [r0, #0]
 801042e:	4631      	mov	r1, r6
 8010430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010432:	4798      	blx	r3
 8010434:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010438:	b90b      	cbnz	r3, 801043e <_ZN8touchgfx3HAL4tickEv+0x66>
 801043a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801043e:	f002 f83f 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 8010442:	6803      	ldr	r3, [r0, #0]
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	4798      	blx	r3
 8010448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801044a:	6803      	ldr	r3, [r0, #0]
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	4798      	blx	r3
 8010450:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010454:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8010458:	3b01      	subs	r3, #1
 801045a:	b2db      	uxtb	r3, r3
 801045c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010460:	b10a      	cbz	r2, 8010466 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8010462:	2b00      	cmp	r3, #0
 8010464:	d1eb      	bne.n	801043e <_ZN8touchgfx3HAL4tickEv+0x66>
 8010466:	4a3b      	ldr	r2, [pc, #236]	; (8010554 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8010468:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801046c:	7813      	ldrb	r3, [r2, #0]
 801046e:	3301      	adds	r3, #1
 8010470:	b25b      	sxtb	r3, r3
 8010472:	4299      	cmp	r1, r3
 8010474:	7013      	strb	r3, [r2, #0]
 8010476:	dc10      	bgt.n	801049a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8010478:	68e0      	ldr	r0, [r4, #12]
 801047a:	2300      	movs	r3, #0
 801047c:	7013      	strb	r3, [r2, #0]
 801047e:	6803      	ldr	r3, [r0, #0]
 8010480:	aa03      	add	r2, sp, #12
 8010482:	68db      	ldr	r3, [r3, #12]
 8010484:	a902      	add	r1, sp, #8
 8010486:	4798      	blx	r3
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	2800      	cmp	r0, #0
 801048c:	d051      	beq.n	8010532 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801048e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010492:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010496:	4620      	mov	r0, r4
 8010498:	4798      	blx	r3
 801049a:	6960      	ldr	r0, [r4, #20]
 801049c:	2300      	movs	r3, #0
 801049e:	f88d 3007 	strb.w	r3, [sp, #7]
 80104a2:	b158      	cbz	r0, 80104bc <_ZN8touchgfx3HAL4tickEv+0xe4>
 80104a4:	6803      	ldr	r3, [r0, #0]
 80104a6:	f10d 0107 	add.w	r1, sp, #7
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	4798      	blx	r3
 80104ae:	b128      	cbz	r0, 80104bc <_ZN8touchgfx3HAL4tickEv+0xe4>
 80104b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80104b6:	6803      	ldr	r3, [r0, #0]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	4798      	blx	r3
 80104bc:	f104 001c 	add.w	r0, r4, #28
 80104c0:	f00f fc9e 	bl	801fe00 <_ZN8touchgfx8Gestures4tickEv>
 80104c4:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80104c8:	b30b      	cbz	r3, 801050e <_ZN8touchgfx3HAL4tickEv+0x136>
 80104ca:	6920      	ldr	r0, [r4, #16]
 80104cc:	6803      	ldr	r3, [r0, #0]
 80104ce:	691b      	ldr	r3, [r3, #16]
 80104d0:	4798      	blx	r3
 80104d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104d4:	4606      	mov	r6, r0
 80104d6:	b903      	cbnz	r3, 80104da <_ZN8touchgfx3HAL4tickEv+0x102>
 80104d8:	6720      	str	r0, [r4, #112]	; 0x70
 80104da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104dc:	4a1e      	ldr	r2, [pc, #120]	; (8010558 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80104de:	1af3      	subs	r3, r6, r3
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d914      	bls.n	801050e <_ZN8touchgfx3HAL4tickEv+0x136>
 80104e4:	6920      	ldr	r0, [r4, #16]
 80104e6:	6803      	ldr	r3, [r0, #0]
 80104e8:	699b      	ldr	r3, [r3, #24]
 80104ea:	4798      	blx	r3
 80104ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80104ee:	2264      	movs	r2, #100	; 0x64
 80104f0:	1af3      	subs	r3, r6, r3
 80104f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80104f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80104fa:	2800      	cmp	r0, #0
 80104fc:	dc1e      	bgt.n	801053c <_ZN8touchgfx3HAL4tickEv+0x164>
 80104fe:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8010502:	6920      	ldr	r0, [r4, #16]
 8010504:	6803      	ldr	r3, [r0, #0]
 8010506:	2100      	movs	r1, #0
 8010508:	69db      	ldr	r3, [r3, #28]
 801050a:	4798      	blx	r3
 801050c:	6726      	str	r6, [r4, #112]	; 0x70
 801050e:	f001 ffd7 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 8010512:	6803      	ldr	r3, [r0, #0]
 8010514:	2100      	movs	r1, #0
 8010516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010518:	4798      	blx	r3
 801051a:	6823      	ldr	r3, [r4, #0]
 801051c:	4620      	mov	r0, r4
 801051e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010522:	4798      	blx	r3
 8010524:	2001      	movs	r0, #1
 8010526:	f7fd fecc 	bl	800e2c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801052a:	2300      	movs	r3, #0
 801052c:	702b      	strb	r3, [r5, #0]
 801052e:	b004      	add	sp, #16
 8010530:	bd70      	pop	{r4, r5, r6, pc}
 8010532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010536:	4620      	mov	r0, r4
 8010538:	4798      	blx	r3
 801053a:	e7ae      	b.n	801049a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801053c:	2863      	cmp	r0, #99	; 0x63
 801053e:	bfcb      	itete	gt
 8010540:	2300      	movgt	r3, #0
 8010542:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8010546:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801054a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801054e:	e7d8      	b.n	8010502 <_ZN8touchgfx3HAL4tickEv+0x12a>
 8010550:	20009f00 	.word	0x20009f00
 8010554:	20009f01 	.word	0x20009f01
 8010558:	05f5e100 	.word	0x05f5e100

0801055c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801055c:	f7fe b9a0 	b.w	800e8a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010560 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010560:	6581      	str	r1, [r0, #88]	; 0x58
 8010562:	301c      	adds	r0, #28
 8010564:	f00f bc4a 	b.w	801fdfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010568 <_ZN8touchgfx3HAL5touchEll>:
 8010568:	b530      	push	{r4, r5, lr}
 801056a:	b087      	sub	sp, #28
 801056c:	4604      	mov	r4, r0
 801056e:	a804      	add	r0, sp, #16
 8010570:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010574:	f001 fd62 	bl	801203c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010578:	9b04      	ldr	r3, [sp, #16]
 801057a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801057e:	a906      	add	r1, sp, #24
 8010580:	9b05      	ldr	r3, [sp, #20]
 8010582:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010586:	a803      	add	r0, sp, #12
 8010588:	f001 fda6 	bl	80120d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801058c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8010590:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010594:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8010598:	f104 001c 	add.w	r0, r4, #28
 801059c:	b189      	cbz	r1, 80105c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801059e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80105a8:	4613      	mov	r3, r2
 80105aa:	462a      	mov	r2, r5
 80105ac:	f00f fc36 	bl	801fe1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80105b0:	b128      	cbz	r0, 80105be <_ZN8touchgfx3HAL5touchEll+0x56>
 80105b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80105b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80105b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80105bc:	6623      	str	r3, [r4, #96]	; 0x60
 80105be:	b007      	add	sp, #28
 80105c0:	bd30      	pop	{r4, r5, pc}
 80105c2:	f00f fc6f 	bl	801fea4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80105c6:	2301      	movs	r3, #1
 80105c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80105cc:	e7f1      	b.n	80105b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080105ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80105ce:	b570      	push	{r4, r5, r6, lr}
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d050      	beq.n	8010676 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80105d4:	ea81 0002 	eor.w	r0, r1, r2
 80105d8:	07c6      	lsls	r6, r0, #31
 80105da:	d508      	bpl.n	80105ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80105dc:	3a01      	subs	r2, #1
 80105de:	18cc      	adds	r4, r1, r3
 80105e0:	42a1      	cmp	r1, r4
 80105e2:	d048      	beq.n	8010676 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 80105e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80105e8:	f801 0b01 	strb.w	r0, [r1], #1
 80105ec:	e7f8      	b.n	80105e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80105ee:	07d5      	lsls	r5, r2, #31
 80105f0:	bf42      	ittt	mi
 80105f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80105f6:	f801 0b01 	strbmi.w	r0, [r1], #1
 80105fa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d915      	bls.n	801062e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8010602:	ea82 0001 	eor.w	r0, r2, r1
 8010606:	0784      	lsls	r4, r0, #30
 8010608:	d02d      	beq.n	8010666 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 801060a:	1e94      	subs	r4, r2, #2
 801060c:	4608      	mov	r0, r1
 801060e:	18ce      	adds	r6, r1, r3
 8010610:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 8010614:	f820 5b02 	strh.w	r5, [r0], #2
 8010618:	1a35      	subs	r5, r6, r0
 801061a:	2d01      	cmp	r5, #1
 801061c:	d8f8      	bhi.n	8010610 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 801061e:	1e98      	subs	r0, r3, #2
 8010620:	f020 0001 	bic.w	r0, r0, #1
 8010624:	3002      	adds	r0, #2
 8010626:	4401      	add	r1, r0
 8010628:	4402      	add	r2, r0
 801062a:	f003 0301 	and.w	r3, r3, #1
 801062e:	1f14      	subs	r4, r2, #4
 8010630:	4608      	mov	r0, r1
 8010632:	18ce      	adds	r6, r1, r3
 8010634:	1a35      	subs	r5, r6, r0
 8010636:	2d03      	cmp	r5, #3
 8010638:	d810      	bhi.n	801065c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801063a:	089c      	lsrs	r4, r3, #2
 801063c:	00a0      	lsls	r0, r4, #2
 801063e:	4401      	add	r1, r0
 8010640:	3801      	subs	r0, #1
 8010642:	4402      	add	r2, r0
 8010644:	f06f 0003 	mvn.w	r0, #3
 8010648:	fb00 3404 	mla	r4, r0, r4, r3
 801064c:	440c      	add	r4, r1
 801064e:	42a1      	cmp	r1, r4
 8010650:	d011      	beq.n	8010676 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 8010652:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8010656:	f801 3b01 	strb.w	r3, [r1], #1
 801065a:	e7f8      	b.n	801064e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 801065c:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8010660:	f840 5b04 	str.w	r5, [r0], #4
 8010664:	e7e6      	b.n	8010634 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 8010666:	0790      	lsls	r0, r2, #30
 8010668:	d0e1      	beq.n	801062e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801066a:	f832 0b02 	ldrh.w	r0, [r2], #2
 801066e:	f821 0b02 	strh.w	r0, [r1], #2
 8010672:	3b02      	subs	r3, #2
 8010674:	e7db      	b.n	801062e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8010676:	2001      	movs	r0, #1
 8010678:	bd70      	pop	{r4, r5, r6, pc}

0801067a <_ZN8touchgfx3HAL7noTouchEv>:
 801067a:	b510      	push	{r4, lr}
 801067c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8010680:	4604      	mov	r4, r0
 8010682:	b153      	cbz	r3, 801069a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010684:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010688:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801068c:	2101      	movs	r1, #1
 801068e:	301c      	adds	r0, #28
 8010690:	f00f fc08 	bl	801fea4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010694:	2300      	movs	r3, #0
 8010696:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801069a:	bd10      	pop	{r4, pc}

0801069c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801069c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106a0:	4605      	mov	r5, r0
 80106a2:	6980      	ldr	r0, [r0, #24]
 80106a4:	b085      	sub	sp, #20
 80106a6:	460f      	mov	r7, r1
 80106a8:	4690      	mov	r8, r2
 80106aa:	4699      	mov	r9, r3
 80106ac:	b930      	cbnz	r0, 80106bc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 80106ae:	4b1f      	ldr	r3, [pc, #124]	; (801072c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 80106b0:	4a1f      	ldr	r2, [pc, #124]	; (8010730 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80106b2:	f44f 7198 	mov.w	r1, #304	; 0x130
 80106b6:	481f      	ldr	r0, [pc, #124]	; (8010734 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 80106b8:	f00f fc86 	bl	801ffc8 <__assert_func>
 80106bc:	ac04      	add	r4, sp, #16
 80106be:	2600      	movs	r6, #0
 80106c0:	f844 6d04 	str.w	r6, [r4, #-4]!
 80106c4:	6806      	ldr	r6, [r0, #0]
 80106c6:	9401      	str	r4, [sp, #4]
 80106c8:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80106cc:	9400      	str	r4, [sp, #0]
 80106ce:	6834      	ldr	r4, [r6, #0]
 80106d0:	47a0      	blx	r4
 80106d2:	4c19      	ldr	r4, [pc, #100]	; (8010738 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 80106d4:	4606      	mov	r6, r0
 80106d6:	f8a4 9000 	strh.w	r9, [r4]
 80106da:	f7fb ffed 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 80106de:	6803      	ldr	r3, [r0, #0]
 80106e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e2:	4798      	blx	r3
 80106e4:	280c      	cmp	r0, #12
 80106e6:	d80f      	bhi.n	8010708 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 80106e8:	e8df f000 	tbb	[pc, r0]
 80106ec:	1b1b1207 	.word	0x1b1b1207
 80106f0:	1b1b1b1b 	.word	0x1b1b1b1b
 80106f4:	1b1b1b1b 	.word	0x1b1b1b1b
 80106f8:	1b          	.byte	0x1b
 80106f9:	00          	.byte	0x00
 80106fa:	8823      	ldrh	r3, [r4, #0]
 80106fc:	fb08 7203 	mla	r2, r8, r3, r7
 8010700:	9b03      	ldr	r3, [sp, #12]
 8010702:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010706:	63eb      	str	r3, [r5, #60]	; 0x3c
 8010708:	4630      	mov	r0, r6
 801070a:	b005      	add	sp, #20
 801070c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010710:	8822      	ldrh	r2, [r4, #0]
 8010712:	9b03      	ldr	r3, [sp, #12]
 8010714:	fb08 7202 	mla	r2, r8, r2, r7
 8010718:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801071c:	1a9a      	subs	r2, r3, r2
 801071e:	63ea      	str	r2, [r5, #60]	; 0x3c
 8010720:	e7f2      	b.n	8010708 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 8010722:	4b06      	ldr	r3, [pc, #24]	; (801073c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 8010724:	4a02      	ldr	r2, [pc, #8]	; (8010730 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8010726:	f240 114d 	movw	r1, #333	; 0x14d
 801072a:	e7c4      	b.n	80106b6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 801072c:	08022561 	.word	0x08022561
 8010730:	08022872 	.word	0x08022872
 8010734:	080225a6 	.word	0x080225a6
 8010738:	20009ef6 	.word	0x20009ef6
 801073c:	080225cc 	.word	0x080225cc

08010740 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8010740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010744:	4698      	mov	r8, r3
 8010746:	6803      	ldr	r3, [r0, #0]
 8010748:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 801074a:	4b0f      	ldr	r3, [pc, #60]	; (8010788 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 801074c:	b087      	sub	sp, #28
 801074e:	f8b3 9000 	ldrh.w	r9, [r3]
 8010752:	460e      	mov	r6, r1
 8010754:	4617      	mov	r7, r2
 8010756:	4604      	mov	r4, r0
 8010758:	f7fb ffae 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 801075c:	6803      	ldr	r3, [r0, #0]
 801075e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010760:	4798      	blx	r3
 8010762:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010766:	9302      	str	r3, [sp, #8]
 8010768:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010772:	9300      	str	r3, [sp, #0]
 8010774:	e9cd 9003 	strd	r9, r0, [sp, #12]
 8010778:	4643      	mov	r3, r8
 801077a:	463a      	mov	r2, r7
 801077c:	4631      	mov	r1, r6
 801077e:	4620      	mov	r0, r4
 8010780:	47a8      	blx	r5
 8010782:	b007      	add	sp, #28
 8010784:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010788:	20009ef6 	.word	0x20009ef6

0801078c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801078c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010790:	4606      	mov	r6, r0
 8010792:	b089      	sub	sp, #36	; 0x24
 8010794:	4610      	mov	r0, r2
 8010796:	460c      	mov	r4, r1
 8010798:	4691      	mov	r9, r2
 801079a:	4698      	mov	r8, r3
 801079c:	f003 fe9c 	bl	80144d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	f000 8092 	beq.w	80108ca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 80107a6:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80108e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 80107aa:	f8df b13c 	ldr.w	fp, [pc, #316]	; 80108e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 80107ae:	f8da 0000 	ldr.w	r0, [sl]
 80107b2:	4f4b      	ldr	r7, [pc, #300]	; (80108e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80107b4:	6802      	ldr	r2, [r0, #0]
 80107b6:	6a12      	ldr	r2, [r2, #32]
 80107b8:	4790      	blx	r2
 80107ba:	f8da 0000 	ldr.w	r0, [sl]
 80107be:	6802      	ldr	r2, [r0, #0]
 80107c0:	ad08      	add	r5, sp, #32
 80107c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80107c4:	4790      	blx	r2
 80107c6:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 80107ca:	f8bb 3000 	ldrh.w	r3, [fp]
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	4628      	mov	r0, r5
 80107d2:	883b      	ldrh	r3, [r7, #0]
 80107d4:	9301      	str	r3, [sp, #4]
 80107d6:	f003 ff3f 	bl	8014658 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80107da:	f8ab 0000 	strh.w	r0, [fp]
 80107de:	4628      	mov	r0, r5
 80107e0:	f003 ff74 	bl	80146cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80107e4:	f8da b000 	ldr.w	fp, [sl]
 80107e8:	8038      	strh	r0, [r7, #0]
 80107ea:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 80107ee:	9302      	str	r3, [sp, #8]
 80107f0:	4648      	mov	r0, r9
 80107f2:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 80107f6:	f003 fe6f 	bl	80144d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80107fa:	f8da 2000 	ldr.w	r2, [sl]
 80107fe:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 8010802:	63d0      	str	r0, [r2, #60]	; 0x3c
 8010804:	6822      	ldr	r2, [r4, #0]
 8010806:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 801080a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801080c:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 8010810:	2200      	movs	r2, #0
 8010812:	4611      	mov	r1, r2
 8010814:	4620      	mov	r0, r4
 8010816:	4798      	blx	r3
 8010818:	2201      	movs	r2, #1
 801081a:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 801081e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 8010822:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 8010826:	1d22      	adds	r2, r4, #4
 8010828:	2900      	cmp	r1, #0
 801082a:	d051      	beq.n	80108d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 801082c:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 8010830:	2900      	cmp	r1, #0
 8010832:	d04d      	beq.n	80108d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 8010834:	6810      	ldr	r0, [r2, #0]
 8010836:	6851      	ldr	r1, [r2, #4]
 8010838:	f10d 0c18 	add.w	ip, sp, #24
 801083c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010840:	4641      	mov	r1, r8
 8010842:	a806      	add	r0, sp, #24
 8010844:	f7ff fc7a 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8010848:	4628      	mov	r0, r5
 801084a:	f004 f891 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801084e:	4680      	mov	r8, r0
 8010850:	f7fb ff32 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010854:	6802      	ldr	r2, [r0, #0]
 8010856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010858:	4790      	blx	r2
 801085a:	4580      	cmp	r8, r0
 801085c:	d03d      	beq.n	80108da <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 801085e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8010860:	b150      	cbz	r0, 8010878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 8010862:	4628      	mov	r0, r5
 8010864:	f004 f884 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8010868:	4605      	mov	r5, r0
 801086a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801086c:	6803      	ldr	r3, [r0, #0]
 801086e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010870:	4798      	blx	r3
 8010872:	1a2b      	subs	r3, r5, r0
 8010874:	4258      	negs	r0, r3
 8010876:	4158      	adcs	r0, r3
 8010878:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 801087c:	6822      	ldr	r2, [r4, #0]
 801087e:	6963      	ldr	r3, [r4, #20]
 8010880:	9303      	str	r3, [sp, #12]
 8010882:	2500      	movs	r5, #0
 8010884:	6165      	str	r5, [r4, #20]
 8010886:	4620      	mov	r0, r4
 8010888:	6892      	ldr	r2, [r2, #8]
 801088a:	a906      	add	r1, sp, #24
 801088c:	4790      	blx	r2
 801088e:	9b03      	ldr	r3, [sp, #12]
 8010890:	6163      	str	r3, [r4, #20]
 8010892:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 8010896:	6823      	ldr	r3, [r4, #0]
 8010898:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 801089c:	4620      	mov	r0, r4
 801089e:	4c11      	ldr	r4, [pc, #68]	; (80108e4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 80108a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a2:	4652      	mov	r2, sl
 80108a4:	4649      	mov	r1, r9
 80108a6:	4798      	blx	r3
 80108a8:	6820      	ldr	r0, [r4, #0]
 80108aa:	9b02      	ldr	r3, [sp, #8]
 80108ac:	9a00      	ldr	r2, [sp, #0]
 80108ae:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 80108b2:	4b0d      	ldr	r3, [pc, #52]	; (80108e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 80108b4:	801a      	strh	r2, [r3, #0]
 80108b6:	4b0a      	ldr	r3, [pc, #40]	; (80108e0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 80108b8:	9a01      	ldr	r2, [sp, #4]
 80108ba:	801a      	strh	r2, [r3, #0]
 80108bc:	6803      	ldr	r3, [r0, #0]
 80108be:	6a1b      	ldr	r3, [r3, #32]
 80108c0:	4798      	blx	r3
 80108c2:	6820      	ldr	r0, [r4, #0]
 80108c4:	6803      	ldr	r3, [r0, #0]
 80108c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c8:	4798      	blx	r3
 80108ca:	b009      	add	sp, #36	; 0x24
 80108cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d0:	6810      	ldr	r0, [r2, #0]
 80108d2:	6851      	ldr	r1, [r2, #4]
 80108d4:	ab06      	add	r3, sp, #24
 80108d6:	c303      	stmia	r3!, {r0, r1}
 80108d8:	e7b6      	b.n	8010848 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 80108da:	2000      	movs	r0, #0
 80108dc:	e7cc      	b.n	8010878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 80108de:	bf00      	nop
 80108e0:	20009ef8 	.word	0x20009ef8
 80108e4:	20009efc 	.word	0x20009efc
 80108e8:	20009ef6 	.word	0x20009ef6

080108ec <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80108ec:	b510      	push	{r4, lr}
 80108ee:	4b07      	ldr	r3, [pc, #28]	; (801090c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	4604      	mov	r4, r0
 80108f4:	b13b      	cbz	r3, 8010906 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80108f6:	6803      	ldr	r3, [r0, #0]
 80108f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108fa:	4798      	blx	r3
 80108fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80108fe:	4283      	cmp	r3, r0
 8010900:	d101      	bne.n	8010906 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010902:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8010904:	bd10      	pop	{r4, pc}
 8010906:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8010908:	e7fc      	b.n	8010904 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801090a:	bf00      	nop
 801090c:	20009efa 	.word	0x20009efa

08010910 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010910:	b510      	push	{r4, lr}
 8010912:	4b0b      	ldr	r3, [pc, #44]	; (8010940 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	4604      	mov	r4, r0
 8010918:	b95b      	cbnz	r3, 8010932 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801091a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801091e:	2b02      	cmp	r3, #2
 8010920:	d007      	beq.n	8010932 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010922:	6840      	ldr	r0, [r0, #4]
 8010924:	f000 fbc8 	bl	80110b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010928:	b118      	cbz	r0, 8010932 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801092a:	6862      	ldr	r2, [r4, #4]
 801092c:	7a53      	ldrb	r3, [r2, #9]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0fc      	beq.n	801092c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010932:	f7fd ff97 	bl	800e864 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010936:	4620      	mov	r0, r4
 8010938:	f7ff ffd8 	bl	80108ec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801093c:	bd10      	pop	{r4, pc}
 801093e:	bf00      	nop
 8010940:	20009efa 	.word	0x20009efa

08010944 <_ZN8touchgfx3HAL10initializeEv>:
 8010944:	b510      	push	{r4, lr}
 8010946:	4604      	mov	r4, r0
 8010948:	f7fd ff6c 	bl	800e824 <_ZN8touchgfx10OSWrappers10initializeEv>
 801094c:	6860      	ldr	r0, [r4, #4]
 801094e:	6803      	ldr	r3, [r0, #0]
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	4798      	blx	r3
 8010954:	68e0      	ldr	r0, [r4, #12]
 8010956:	6803      	ldr	r3, [r0, #0]
 8010958:	689b      	ldr	r3, [r3, #8]
 801095a:	4798      	blx	r3
 801095c:	6823      	ldr	r3, [r4, #0]
 801095e:	4620      	mov	r0, r4
 8010960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010966:	4718      	bx	r3

08010968 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8010968:	b508      	push	{r3, lr}
 801096a:	290c      	cmp	r1, #12
 801096c:	d817      	bhi.n	801099e <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 801096e:	e8df f001 	tbb	[pc, r1]
 8010972:	090b      	.short	0x090b
 8010974:	0d0d0d07 	.word	0x0d0d0d07
 8010978:	1414140d 	.word	0x1414140d
 801097c:	1414      	.short	0x1414
 801097e:	0d          	.byte	0x0d
 801097f:	00          	.byte	0x00
 8010980:	2020      	movs	r0, #32
 8010982:	bd08      	pop	{r3, pc}
 8010984:	2018      	movs	r0, #24
 8010986:	e7fc      	b.n	8010982 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8010988:	2010      	movs	r0, #16
 801098a:	e7fa      	b.n	8010982 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801098c:	4b05      	ldr	r3, [pc, #20]	; (80109a4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801098e:	4a06      	ldr	r2, [pc, #24]	; (80109a8 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8010990:	4806      	ldr	r0, [pc, #24]	; (80109ac <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8010992:	f44f 710c 	mov.w	r1, #560	; 0x230
 8010996:	f00f fb17 	bl	801ffc8 <__assert_func>
 801099a:	2008      	movs	r0, #8
 801099c:	e7f1      	b.n	8010982 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 801099e:	2000      	movs	r0, #0
 80109a0:	e7ef      	b.n	8010982 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 80109a2:	bf00      	nop
 80109a4:	0802269f 	.word	0x0802269f
 80109a8:	08022a34 	.word	0x08022a34
 80109ac:	080225a6 	.word	0x080225a6

080109b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 80109b0:	b570      	push	{r4, r5, r6, lr}
 80109b2:	460d      	mov	r5, r1
 80109b4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80109b8:	4616      	mov	r6, r2
 80109ba:	461c      	mov	r4, r3
 80109bc:	f7ff ffd4 	bl	8010968 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 80109c0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80109c4:	10c0      	asrs	r0, r0, #3
 80109c6:	fb06 5101 	mla	r1, r6, r1, r5
 80109ca:	fb00 4001 	mla	r0, r0, r1, r4
 80109ce:	bd70      	pop	{r4, r5, r6, pc}

080109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 80109d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d4:	b08a      	sub	sp, #40	; 0x28
 80109d6:	f04f 0c00 	mov.w	ip, #0
 80109da:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 80109de:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 80109e2:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80109e6:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80109ea:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80109ee:	f8cd c020 	str.w	ip, [sp, #32]
 80109f2:	f1b8 0f02 	cmp.w	r8, #2
 80109f6:	4604      	mov	r4, r0
 80109f8:	469a      	mov	sl, r3
 80109fa:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80109fe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8010a02:	d030      	beq.n	8010a66 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 8010a04:	2bff      	cmp	r3, #255	; 0xff
 8010a06:	d12c      	bne.n	8010a62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 8010a08:	4560      	cmp	r0, ip
 8010a0a:	bf14      	ite	ne
 8010a0c:	2004      	movne	r0, #4
 8010a0e:	2001      	moveq	r0, #1
 8010a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010a14:	9204      	str	r2, [sp, #16]
 8010a16:	4620      	mov	r0, r4
 8010a18:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8010a1c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010a20:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010a24:	f8ad 6018 	strh.w	r6, [sp, #24]
 8010a28:	f8ad 501a 	strh.w	r5, [sp, #26]
 8010a2c:	f7ff ff5e 	bl	80108ec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010a30:	e9cd 9700 	strd	r9, r7, [sp]
 8010a34:	4603      	mov	r3, r0
 8010a36:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8010a3a:	4651      	mov	r1, sl
 8010a3c:	4620      	mov	r0, r4
 8010a3e:	f7ff ffb7 	bl	80109b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8010a42:	f8ad 901e 	strh.w	r9, [sp, #30]
 8010a46:	9005      	str	r0, [sp, #20]
 8010a48:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 8010a4c:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 8010a50:	b106      	cbz	r6, 8010a54 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 8010a52:	b98d      	cbnz	r5, 8010a78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 8010a54:	4b12      	ldr	r3, [pc, #72]	; (8010aa0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 8010a56:	4a13      	ldr	r2, [pc, #76]	; (8010aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8010a58:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8010a5c:	4812      	ldr	r0, [pc, #72]	; (8010aa8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8010a5e:	f00f fab3 	bl	801ffc8 <__assert_func>
 8010a62:	2004      	movs	r0, #4
 8010a64:	e7d4      	b.n	8010a10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8010a66:	2bff      	cmp	r3, #255	; 0xff
 8010a68:	d104      	bne.n	8010a74 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	bf14      	ite	ne
 8010a6e:	2040      	movne	r0, #64	; 0x40
 8010a70:	2020      	moveq	r0, #32
 8010a72:	e7cd      	b.n	8010a10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8010a74:	2040      	movs	r0, #64	; 0x40
 8010a76:	e7cb      	b.n	8010a10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	9d02      	ldr	r5, [sp, #8]
 8010a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a7e:	4620      	mov	r0, r4
 8010a80:	4798      	blx	r3
 8010a82:	4228      	tst	r0, r5
 8010a84:	d104      	bne.n	8010a90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 8010a86:	4b09      	ldr	r3, [pc, #36]	; (8010aac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 8010a88:	4a06      	ldr	r2, [pc, #24]	; (8010aa4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8010a8a:	f240 11b1 	movw	r1, #433	; 0x1b1
 8010a8e:	e7e5      	b.n	8010a5c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 8010a90:	6860      	ldr	r0, [r4, #4]
 8010a92:	6803      	ldr	r3, [r0, #0]
 8010a94:	a902      	add	r1, sp, #8
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	4798      	blx	r3
 8010a9a:	b00a      	add	sp, #40	; 0x28
 8010a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa0:	08022622 	.word	0x08022622
 8010aa4:	080228d6 	.word	0x080228d6
 8010aa8:	080225a6 	.word	0x080225a6
 8010aac:	0802265a 	.word	0x0802265a

08010ab0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	b08a      	sub	sp, #40	; 0x28
 8010ab4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8010ab8:	9408      	str	r4, [sp, #32]
 8010aba:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 8010abe:	9407      	str	r4, [sp, #28]
 8010ac0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8010ac4:	9406      	str	r4, [sp, #24]
 8010ac6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8010aca:	9405      	str	r4, [sp, #20]
 8010acc:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8010ad0:	9404      	str	r4, [sp, #16]
 8010ad2:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8010ad6:	9403      	str	r4, [sp, #12]
 8010ad8:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 8010adc:	9402      	str	r4, [sp, #8]
 8010ade:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 8010ae2:	e9cd 3400 	strd	r3, r4, [sp]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f7ff ff71 	bl	80109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8010aee:	b00a      	add	sp, #40	; 0x28
 8010af0:	bd10      	pop	{r4, pc}
	...

08010af4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 8010af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010af6:	b08b      	sub	sp, #44	; 0x2c
 8010af8:	4616      	mov	r6, r2
 8010afa:	460d      	mov	r5, r1
 8010afc:	461f      	mov	r7, r3
 8010afe:	4604      	mov	r4, r0
 8010b00:	f7fb fdda 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010b04:	6803      	ldr	r3, [r0, #0]
 8010b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b08:	4798      	blx	r3
 8010b0a:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010b0e:	4b0d      	ldr	r3, [pc, #52]	; (8010b44 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 8010b10:	881b      	ldrh	r3, [r3, #0]
 8010b12:	9306      	str	r3, [sp, #24]
 8010b14:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8010b18:	9305      	str	r3, [sp, #20]
 8010b1a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010b1e:	9304      	str	r3, [sp, #16]
 8010b20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010b24:	9303      	str	r3, [sp, #12]
 8010b26:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010b2a:	9302      	str	r3, [sp, #8]
 8010b2c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010b30:	2200      	movs	r2, #0
 8010b32:	e9cd 7300 	strd	r7, r3, [sp]
 8010b36:	4629      	mov	r1, r5
 8010b38:	4633      	mov	r3, r6
 8010b3a:	4620      	mov	r0, r4
 8010b3c:	f7ff ff48 	bl	80109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8010b40:	b00b      	add	sp, #44	; 0x2c
 8010b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b44:	20009ef6 	.word	0x20009ef6

08010b48 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8010b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b4c:	461f      	mov	r7, r3
 8010b4e:	4b14      	ldr	r3, [pc, #80]	; (8010ba0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8010b50:	b08a      	sub	sp, #40	; 0x28
 8010b52:	4616      	mov	r6, r2
 8010b54:	f8b3 8000 	ldrh.w	r8, [r3]
 8010b58:	460d      	mov	r5, r1
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	f7fb fdac 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010b60:	6803      	ldr	r3, [r0, #0]
 8010b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b64:	4798      	blx	r3
 8010b66:	2302      	movs	r3, #2
 8010b68:	e9cd 8306 	strd	r8, r3, [sp, #24]
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	9305      	str	r3, [sp, #20]
 8010b70:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010b74:	9304      	str	r3, [sp, #16]
 8010b76:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010b7a:	9303      	str	r3, [sp, #12]
 8010b7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010b80:	9302      	str	r3, [sp, #8]
 8010b82:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010b86:	9008      	str	r0, [sp, #32]
 8010b88:	e9cd 7300 	strd	r7, r3, [sp]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	4633      	mov	r3, r6
 8010b90:	4629      	mov	r1, r5
 8010b92:	4620      	mov	r0, r4
 8010b94:	f7ff ff1c 	bl	80109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8010b98:	b00a      	add	sp, #40	; 0x28
 8010b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20009ef6 	.word	0x20009ef6

08010ba4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8010ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba8:	b08b      	sub	sp, #44	; 0x2c
 8010baa:	469b      	mov	fp, r3
 8010bac:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8010bb0:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8010bb4:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8010bb8:	2fff      	cmp	r7, #255	; 0xff
 8010bba:	bf14      	ite	ne
 8010bbc:	2308      	movne	r3, #8
 8010bbe:	2302      	moveq	r3, #2
 8010bc0:	2600      	movs	r6, #0
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	4689      	mov	r9, r1
 8010bc6:	4692      	mov	sl, r2
 8010bc8:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8010bcc:	9608      	str	r6, [sp, #32]
 8010bce:	f7ff fe8d 	bl	80108ec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010bd2:	e9cd 8500 	strd	r8, r5, [sp]
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	465a      	mov	r2, fp
 8010bda:	4651      	mov	r1, sl
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7ff fee7 	bl	80109b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8010be2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8010be6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010bea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010bee:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010bf2:	6823      	ldr	r3, [r4, #0]
 8010bf4:	9005      	str	r0, [sp, #20]
 8010bf6:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 8010bfa:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 8010bfe:	f8ad 601c 	strh.w	r6, [sp, #28]
 8010c02:	f8ad 801e 	strh.w	r8, [sp, #30]
 8010c06:	f8cd 9020 	str.w	r9, [sp, #32]
 8010c0a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 8010c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c10:	9d02      	ldr	r5, [sp, #8]
 8010c12:	4620      	mov	r0, r4
 8010c14:	4798      	blx	r3
 8010c16:	4228      	tst	r0, r5
 8010c18:	d106      	bne.n	8010c28 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 8010c1a:	4b07      	ldr	r3, [pc, #28]	; (8010c38 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 8010c1c:	4a07      	ldr	r2, [pc, #28]	; (8010c3c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 8010c1e:	4808      	ldr	r0, [pc, #32]	; (8010c40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 8010c20:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8010c24:	f00f f9d0 	bl	801ffc8 <__assert_func>
 8010c28:	6860      	ldr	r0, [r4, #4]
 8010c2a:	6803      	ldr	r3, [r0, #0]
 8010c2c:	a902      	add	r1, sp, #8
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	4798      	blx	r3
 8010c32:	b00b      	add	sp, #44	; 0x2c
 8010c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c38:	0802265a 	.word	0x0802265a
 8010c3c:	0802299f 	.word	0x0802299f
 8010c40:	080225a6 	.word	0x080225a6

08010c44 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010c48:	461f      	mov	r7, r3
 8010c4a:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010c4c:	460d      	mov	r5, r1
 8010c4e:	f8b3 8000 	ldrh.w	r8, [r3]
 8010c52:	4616      	mov	r6, r2
 8010c54:	4604      	mov	r4, r0
 8010c56:	f7fb fd2f 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010c5a:	6803      	ldr	r3, [r0, #0]
 8010c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c5e:	4798      	blx	r3
 8010c60:	463b      	mov	r3, r7
 8010c62:	e9cd 8000 	strd	r8, r0, [sp]
 8010c66:	4632      	mov	r2, r6
 8010c68:	4629      	mov	r1, r5
 8010c6a:	4620      	mov	r0, r4
 8010c6c:	f7ff fea0 	bl	80109b0 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8010c70:	b002      	add	sp, #8
 8010c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c76:	bf00      	nop
 8010c78:	20009ef6 	.word	0x20009ef6

08010c7c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8010c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c80:	b088      	sub	sp, #32
 8010c82:	4698      	mov	r8, r3
 8010c84:	2300      	movs	r3, #0
 8010c86:	9306      	str	r3, [sp, #24]
 8010c88:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010c8c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8010c90:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8010c94:	f8ad 6010 	strh.w	r6, [sp, #16]
 8010c98:	e9cd 3100 	strd	r3, r1, [sp]
 8010c9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010ca0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010ca4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8010ca8:	f88d 301c 	strb.w	r3, [sp, #28]
 8010cac:	4617      	mov	r7, r2
 8010cae:	4604      	mov	r4, r0
 8010cb0:	f8ad 5012 	strh.w	r5, [sp, #18]
 8010cb4:	f7ff fe1a 	bl	80108ec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010cb8:	4642      	mov	r2, r8
 8010cba:	4603      	mov	r3, r0
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	f7ff ffc0 	bl	8010c44 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010cc4:	4b16      	ldr	r3, [pc, #88]	; (8010d20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 8010cc6:	9003      	str	r0, [sp, #12]
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010cce:	f7fb fcf3 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010cd2:	6803      	ldr	r3, [r0, #0]
 8010cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd6:	4798      	blx	r3
 8010cd8:	f88d 001e 	strb.w	r0, [sp, #30]
 8010cdc:	f88d 001d 	strb.w	r0, [sp, #29]
 8010ce0:	b106      	cbz	r6, 8010ce4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 8010ce2:	b935      	cbnz	r5, 8010cf2 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 8010ce4:	4b0f      	ldr	r3, [pc, #60]	; (8010d24 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 8010ce6:	4a10      	ldr	r2, [pc, #64]	; (8010d28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8010ce8:	f240 11cd 	movw	r1, #461	; 0x1cd
 8010cec:	480f      	ldr	r0, [pc, #60]	; (8010d2c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 8010cee:	f00f f96b 	bl	801ffc8 <__assert_func>
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	9d00      	ldr	r5, [sp, #0]
 8010cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	4798      	blx	r3
 8010cfc:	4228      	tst	r0, r5
 8010cfe:	d104      	bne.n	8010d0a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 8010d00:	4b0b      	ldr	r3, [pc, #44]	; (8010d30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 8010d02:	4a09      	ldr	r2, [pc, #36]	; (8010d28 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 8010d04:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8010d08:	e7f0      	b.n	8010cec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 8010d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010d0c:	6860      	ldr	r0, [r4, #4]
 8010d0e:	9306      	str	r3, [sp, #24]
 8010d10:	6803      	ldr	r3, [r0, #0]
 8010d12:	4669      	mov	r1, sp
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	4798      	blx	r3
 8010d18:	b008      	add	sp, #32
 8010d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d1e:	bf00      	nop
 8010d20:	20009ef6 	.word	0x20009ef6
 8010d24:	08022622 	.word	0x08022622
 8010d28:	08022788 	.word	0x08022788
 8010d2c:	080225a6 	.word	0x080225a6
 8010d30:	0802265a 	.word	0x0802265a

08010d34 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	b08a      	sub	sp, #40	; 0x28
 8010d38:	466b      	mov	r3, sp
 8010d3a:	e883 0006 	stmia.w	r3, {r1, r2}
 8010d3e:	4b20      	ldr	r3, [pc, #128]	; (8010dc0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	4604      	mov	r4, r0
 8010d44:	b933      	cbnz	r3, 8010d54 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 8010d46:	4b1f      	ldr	r3, [pc, #124]	; (8010dc4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8010d48:	4a1f      	ldr	r2, [pc, #124]	; (8010dc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8010d4a:	4820      	ldr	r0, [pc, #128]	; (8010dcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8010d4c:	f240 11f9 	movw	r1, #505	; 0x1f9
 8010d50:	f00f f93a 	bl	801ffc8 <__assert_func>
 8010d54:	2300      	movs	r3, #0
 8010d56:	9308      	str	r3, [sp, #32]
 8010d58:	2301      	movs	r3, #1
 8010d5a:	9302      	str	r3, [sp, #8]
 8010d5c:	6803      	ldr	r3, [r0, #0]
 8010d5e:	f8bd 5000 	ldrh.w	r5, [sp]
 8010d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d64:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8010d68:	4798      	blx	r3
 8010d6a:	4632      	mov	r2, r6
 8010d6c:	4629      	mov	r1, r5
 8010d6e:	4603      	mov	r3, r0
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7ff ff67 	bl	8010c44 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010d76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d78:	9305      	str	r3, [sp, #20]
 8010d7a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010d7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010d82:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010d86:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010d8a:	4b11      	ldr	r3, [pc, #68]	; (8010dd0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8010d8c:	9003      	str	r0, [sp, #12]
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010d94:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010d98:	f7fb fc8e 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010d9c:	6803      	ldr	r3, [r0, #0]
 8010d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010da0:	4798      	blx	r3
 8010da2:	23ff      	movs	r3, #255	; 0xff
 8010da4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8010da8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8010dac:	6860      	ldr	r0, [r4, #4]
 8010dae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010db2:	6803      	ldr	r3, [r0, #0]
 8010db4:	a902      	add	r1, sp, #8
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	4798      	blx	r3
 8010dba:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010dbc:	b00a      	add	sp, #40	; 0x28
 8010dbe:	bd70      	pop	{r4, r5, r6, pc}
 8010dc0:	20009efb 	.word	0x20009efb
 8010dc4:	080224f3 	.word	0x080224f3
 8010dc8:	0802282c 	.word	0x0802282c
 8010dcc:	080225a6 	.word	0x080225a6
 8010dd0:	20009ef6 	.word	0x20009ef6

08010dd4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dd6:	b08b      	sub	sp, #44	; 0x2c
 8010dd8:	466d      	mov	r5, sp
 8010dda:	e885 0006 	stmia.w	r5, {r1, r2}
 8010dde:	461d      	mov	r5, r3
 8010de0:	2300      	movs	r3, #0
 8010de2:	9308      	str	r3, [sp, #32]
 8010de4:	2301      	movs	r3, #1
 8010de6:	9302      	str	r3, [sp, #8]
 8010de8:	6803      	ldr	r3, [r0, #0]
 8010dea:	f8bd 6000 	ldrh.w	r6, [sp]
 8010dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010df0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010df4:	4604      	mov	r4, r0
 8010df6:	4798      	blx	r3
 8010df8:	463a      	mov	r2, r7
 8010dfa:	4631      	mov	r1, r6
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f7ff ff20 	bl	8010c44 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010e04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e08:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010e0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010e10:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010e14:	4b0e      	ldr	r3, [pc, #56]	; (8010e50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 8010e16:	9003      	str	r0, [sp, #12]
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010e1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e20:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010e24:	9505      	str	r5, [sp, #20]
 8010e26:	f7fb fc47 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 8010e2a:	6803      	ldr	r3, [r0, #0]
 8010e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e2e:	4798      	blx	r3
 8010e30:	23ff      	movs	r3, #255	; 0xff
 8010e32:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8010e36:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8010e3a:	6860      	ldr	r0, [r4, #4]
 8010e3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010e40:	6803      	ldr	r3, [r0, #0]
 8010e42:	a902      	add	r1, sp, #8
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	4798      	blx	r3
 8010e48:	4628      	mov	r0, r5
 8010e4a:	b00b      	add	sp, #44	; 0x2c
 8010e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	20009ef6 	.word	0x20009ef6

08010e54 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010e54:	b570      	push	{r4, r5, r6, lr}
 8010e56:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8010e5a:	4604      	mov	r4, r0
 8010e5c:	b19b      	cbz	r3, 8010e86 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010e5e:	2002      	movs	r0, #2
 8010e60:	f7fd fa3a 	bl	800e2d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010e64:	2300      	movs	r3, #0
 8010e66:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010e6a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8010e6e:	6823      	ldr	r3, [r4, #0]
 8010e70:	4620      	mov	r0, r4
 8010e72:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8010e76:	f7ff fd39 	bl	80108ec <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010e7a:	462b      	mov	r3, r5
 8010e7c:	4601      	mov	r1, r0
 8010e7e:	4620      	mov	r0, r4
 8010e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e84:	4718      	bx	r3
 8010e86:	bd70      	pop	{r4, r5, r6, pc}

08010e88 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8010e88:	4770      	bx	lr

08010e8a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010e8a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010e8e:	1a13      	subs	r3, r2, r0
 8010e90:	4258      	negs	r0, r3
 8010e92:	4158      	adcs	r0, r3
 8010e94:	4770      	bx	lr

08010e96 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010e96:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010e9a:	1a9b      	subs	r3, r3, r2
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	bfdc      	itt	le
 8010ea0:	6882      	ldrle	r2, [r0, #8]
 8010ea2:	189b      	addle	r3, r3, r2
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	bfcc      	ite	gt
 8010ea8:	2000      	movgt	r0, #0
 8010eaa:	2001      	movle	r0, #1
 8010eac:	4770      	bx	lr

08010eae <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010eae:	6902      	ldr	r2, [r0, #16]
 8010eb0:	6840      	ldr	r0, [r0, #4]
 8010eb2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8010eb6:	4770      	bx	lr

08010eb8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010eb8:	6803      	ldr	r3, [r0, #0]
 8010eba:	691b      	ldr	r3, [r3, #16]
 8010ebc:	4718      	bx	r3

08010ebe <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010ebe:	4770      	bx	lr

08010ec0 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010ec0:	4770      	bx	lr
	...

08010ec4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010ec4:	b570      	push	{r4, r5, r6, lr}
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	7203      	strb	r3, [r0, #8]
 8010eca:	4604      	mov	r4, r0
 8010ecc:	6840      	ldr	r0, [r0, #4]
 8010ece:	6803      	ldr	r3, [r0, #0]
 8010ed0:	699b      	ldr	r3, [r3, #24]
 8010ed2:	4798      	blx	r3
 8010ed4:	6803      	ldr	r3, [r0, #0]
 8010ed6:	2b08      	cmp	r3, #8
 8010ed8:	4605      	mov	r5, r0
 8010eda:	d01e      	beq.n	8010f1a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8010edc:	d80b      	bhi.n	8010ef6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d027      	beq.n	8010f32 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8010ee2:	2b04      	cmp	r3, #4
 8010ee4:	d011      	beq.n	8010f0a <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d028      	beq.n	8010f3c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010eea:	4b17      	ldr	r3, [pc, #92]	; (8010f48 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8010eec:	4a17      	ldr	r2, [pc, #92]	; (8010f4c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8010eee:	4818      	ldr	r0, [pc, #96]	; (8010f50 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8010ef0:	218b      	movs	r1, #139	; 0x8b
 8010ef2:	f00f f869 	bl	801ffc8 <__assert_func>
 8010ef6:	2b40      	cmp	r3, #64	; 0x40
 8010ef8:	d020      	beq.n	8010f3c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010efa:	d801      	bhi.n	8010f00 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010efc:	2b20      	cmp	r3, #32
 8010efe:	e7f3      	b.n	8010ee8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8010f00:	2b80      	cmp	r3, #128	; 0x80
 8010f02:	d01b      	beq.n	8010f3c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f08:	e7ee      	b.n	8010ee8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8010f0a:	6823      	ldr	r3, [r4, #0]
 8010f0c:	7f01      	ldrb	r1, [r0, #28]
 8010f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f10:	4620      	mov	r0, r4
 8010f12:	4798      	blx	r3
 8010f14:	6823      	ldr	r3, [r4, #0]
 8010f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f18:	e006      	b.n	8010f28 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	7f01      	ldrb	r1, [r0, #28]
 8010f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f20:	4620      	mov	r0, r4
 8010f22:	4798      	blx	r3
 8010f24:	6823      	ldr	r3, [r4, #0]
 8010f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f28:	4629      	mov	r1, r5
 8010f2a:	4620      	mov	r0, r4
 8010f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f30:	4718      	bx	r3
 8010f32:	6823      	ldr	r3, [r4, #0]
 8010f34:	4620      	mov	r0, r4
 8010f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f38:	4798      	blx	r3
 8010f3a:	e7f3      	b.n	8010f24 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8010f3c:	6823      	ldr	r3, [r4, #0]
 8010f3e:	4620      	mov	r0, r4
 8010f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f42:	4798      	blx	r3
 8010f44:	e7e6      	b.n	8010f14 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8010f46:	bf00      	nop
 8010f48:	08022a7d 	.word	0x08022a7d
 8010f4c:	08022b8c 	.word	0x08022b8c
 8010f50:	08022aa2 	.word	0x08022aa2

08010f54 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010f54:	b570      	push	{r4, r5, r6, lr}
 8010f56:	4604      	mov	r4, r0
 8010f58:	460e      	mov	r6, r1
 8010f5a:	6860      	ldr	r0, [r4, #4]
 8010f5c:	6803      	ldr	r3, [r0, #0]
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	4798      	blx	r3
 8010f62:	2800      	cmp	r0, #0
 8010f64:	d1f9      	bne.n	8010f5a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8010f66:	4d0b      	ldr	r5, [pc, #44]	; (8010f94 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8010f68:	6828      	ldr	r0, [r5, #0]
 8010f6a:	6803      	ldr	r3, [r0, #0]
 8010f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f6e:	4798      	blx	r3
 8010f70:	f7fd fcb2 	bl	800e8d8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010f74:	6860      	ldr	r0, [r4, #4]
 8010f76:	6803      	ldr	r3, [r0, #0]
 8010f78:	4631      	mov	r1, r6
 8010f7a:	689b      	ldr	r3, [r3, #8]
 8010f7c:	4798      	blx	r3
 8010f7e:	6823      	ldr	r3, [r4, #0]
 8010f80:	4620      	mov	r0, r4
 8010f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f84:	4798      	blx	r3
 8010f86:	6828      	ldr	r0, [r5, #0]
 8010f88:	6803      	ldr	r3, [r0, #0]
 8010f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010f90:	4718      	bx	r3
 8010f92:	bf00      	nop
 8010f94:	20009efc 	.word	0x20009efc

08010f98 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010f98:	b508      	push	{r3, lr}
 8010f9a:	f7fd fc63 	bl	800e864 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010fa2:	f7fd bc7d 	b.w	800e8a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010fa6 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010fa6:	b510      	push	{r4, lr}
 8010fa8:	4604      	mov	r4, r0
 8010faa:	6840      	ldr	r0, [r0, #4]
 8010fac:	6803      	ldr	r3, [r0, #0]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4798      	blx	r3
 8010fb2:	b948      	cbnz	r0, 8010fc8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010fb4:	7a63      	ldrb	r3, [r4, #9]
 8010fb6:	b13b      	cbz	r3, 8010fc8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010fb8:	7a23      	ldrb	r3, [r4, #8]
 8010fba:	b92b      	cbnz	r3, 8010fc8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010fbc:	6823      	ldr	r3, [r4, #0]
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fc6:	4718      	bx	r3
 8010fc8:	bd10      	pop	{r4, pc}
	...

08010fcc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010fcc:	b510      	push	{r4, lr}
 8010fce:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 8010fd2:	1b12      	subs	r2, r2, r4
 8010fd4:	2a00      	cmp	r2, #0
 8010fd6:	bfdc      	itt	le
 8010fd8:	6883      	ldrle	r3, [r0, #8]
 8010fda:	18d2      	addle	r2, r2, r3
 8010fdc:	2a01      	cmp	r2, #1
 8010fde:	dd18      	ble.n	8011012 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8010fe0:	6843      	ldr	r3, [r0, #4]
 8010fe2:	f101 021c 	add.w	r2, r1, #28
 8010fe6:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8010fea:	f851 4b04 	ldr.w	r4, [r1], #4
 8010fee:	f843 4b04 	str.w	r4, [r3], #4
 8010ff2:	4291      	cmp	r1, r2
 8010ff4:	d1f9      	bne.n	8010fea <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8010ff6:	880a      	ldrh	r2, [r1, #0]
 8010ff8:	801a      	strh	r2, [r3, #0]
 8010ffa:	788a      	ldrb	r2, [r1, #2]
 8010ffc:	709a      	strb	r2, [r3, #2]
 8010ffe:	68c3      	ldr	r3, [r0, #12]
 8011000:	6882      	ldr	r2, [r0, #8]
 8011002:	f3bf 8f5b 	dmb	ish
 8011006:	3301      	adds	r3, #1
 8011008:	429a      	cmp	r2, r3
 801100a:	bfd8      	it	le
 801100c:	1a9b      	suble	r3, r3, r2
 801100e:	60c3      	str	r3, [r0, #12]
 8011010:	bd10      	pop	{r4, pc}
 8011012:	4b03      	ldr	r3, [pc, #12]	; (8011020 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8011014:	4a03      	ldr	r2, [pc, #12]	; (8011024 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8011016:	4804      	ldr	r0, [pc, #16]	; (8011028 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8011018:	2139      	movs	r1, #57	; 0x39
 801101a:	f00e ffd5 	bl	801ffc8 <__assert_func>
 801101e:	bf00      	nop
 8011020:	08022ac8 	.word	0x08022ac8
 8011024:	08022bbc 	.word	0x08022bbc
 8011028:	08022aa2 	.word	0x08022aa2

0801102c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801102c:	b510      	push	{r4, lr}
 801102e:	6803      	ldr	r3, [r0, #0]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	4604      	mov	r4, r0
 8011034:	4798      	blx	r3
 8011036:	b128      	cbz	r0, 8011044 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8011038:	4b07      	ldr	r3, [pc, #28]	; (8011058 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801103a:	4a08      	ldr	r2, [pc, #32]	; (801105c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801103c:	4808      	ldr	r0, [pc, #32]	; (8011060 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801103e:	213f      	movs	r1, #63	; 0x3f
 8011040:	f00e ffc2 	bl	801ffc8 <__assert_func>
 8011044:	6923      	ldr	r3, [r4, #16]
 8011046:	68a2      	ldr	r2, [r4, #8]
 8011048:	f3bf 8f5b 	dmb	ish
 801104c:	3301      	adds	r3, #1
 801104e:	429a      	cmp	r2, r3
 8011050:	bfd8      	it	le
 8011052:	1a9b      	suble	r3, r3, r2
 8011054:	6123      	str	r3, [r4, #16]
 8011056:	bd10      	pop	{r4, pc}
 8011058:	08022aeb 	.word	0x08022aeb
 801105c:	08022c0a 	.word	0x08022c0a
 8011060:	08022aa2 	.word	0x08022aa2

08011064 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8011064:	b570      	push	{r4, r5, r6, lr}
 8011066:	4604      	mov	r4, r0
 8011068:	6840      	ldr	r0, [r0, #4]
 801106a:	6803      	ldr	r3, [r0, #0]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4798      	blx	r3
 8011070:	4605      	mov	r5, r0
 8011072:	b930      	cbnz	r0, 8011082 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011074:	7a23      	ldrb	r3, [r4, #8]
 8011076:	b123      	cbz	r3, 8011082 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8011078:	6860      	ldr	r0, [r4, #4]
 801107a:	6803      	ldr	r3, [r0, #0]
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	4798      	blx	r3
 8011080:	7225      	strb	r5, [r4, #8]
 8011082:	6860      	ldr	r0, [r4, #4]
 8011084:	6803      	ldr	r3, [r0, #0]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4798      	blx	r3
 801108a:	b928      	cbnz	r0, 8011098 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801108c:	6823      	ldr	r3, [r4, #0]
 801108e:	4620      	mov	r0, r4
 8011090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011096:	4718      	bx	r3
 8011098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801109c:	f7fd bc38 	b.w	800e910 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080110a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80110a0:	b510      	push	{r4, lr}
 80110a2:	4c04      	ldr	r4, [pc, #16]	; (80110b4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80110a4:	6082      	str	r2, [r0, #8]
 80110a6:	2200      	movs	r2, #0
 80110a8:	e9c0 4100 	strd	r4, r1, [r0]
 80110ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80110b0:	bd10      	pop	{r4, pc}
 80110b2:	bf00      	nop
 80110b4:	08022b70 	.word	0x08022b70

080110b8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80110b8:	6840      	ldr	r0, [r0, #4]
 80110ba:	6803      	ldr	r3, [r0, #0]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	4718      	bx	r3

080110c0 <_ZNK8touchgfx9TypedText7getTextEv>:
 80110c0:	b510      	push	{r4, lr}
 80110c2:	4604      	mov	r4, r0
 80110c4:	f7fb f854 	bl	800c170 <_ZNK8touchgfx9TypedText11assertValidEv>
 80110c8:	4b03      	ldr	r3, [pc, #12]	; (80110d8 <_ZNK8touchgfx9TypedText7getTextEv+0x18>)
 80110ca:	8821      	ldrh	r1, [r4, #0]
 80110cc:	6818      	ldr	r0, [r3, #0]
 80110ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d2:	f7fc bcf7 	b.w	800dac4 <_ZNK8touchgfx5Texts7getTextEt>
 80110d6:	bf00      	nop
 80110d8:	20009f78 	.word	0x20009f78

080110dc <_ZN8touchgfx8TextArea13getTextHeightEv>:
 80110dc:	b570      	push	{r4, r5, r6, lr}
 80110de:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80110e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110e4:	429a      	cmp	r2, r3
 80110e6:	4604      	mov	r4, r0
 80110e8:	d00c      	beq.n	8011104 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 80110ea:	f850 3b26 	ldr.w	r3, [r0], #38
 80110ee:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 80110f0:	f7ff ffe6 	bl	80110c0 <_ZNK8touchgfx9TypedText7getTextEv>
 80110f4:	2300      	movs	r3, #0
 80110f6:	4601      	mov	r1, r0
 80110f8:	46ac      	mov	ip, r5
 80110fa:	4620      	mov	r0, r4
 80110fc:	461a      	mov	r2, r3
 80110fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011102:	4760      	bx	ip
 8011104:	2000      	movs	r0, #0
 8011106:	bd70      	pop	{r4, r5, r6, pc}

08011108 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8011108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801110a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801110c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011110:	429a      	cmp	r2, r3
 8011112:	d016      	beq.n	8011142 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 8011114:	f100 0426 	add.w	r4, r0, #38	; 0x26
 8011118:	4620      	mov	r0, r4
 801111a:	f7fa fff5 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 801111e:	6803      	ldr	r3, [r0, #0]
 8011120:	4605      	mov	r5, r0
 8011122:	4620      	mov	r0, r4
 8011124:	69de      	ldr	r6, [r3, #28]
 8011126:	f7fb f80b 	bl	800c140 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801112a:	4607      	mov	r7, r0
 801112c:	4620      	mov	r0, r4
 801112e:	f7ff ffc7 	bl	80110c0 <_ZNK8touchgfx9TypedText7getTextEv>
 8011132:	2300      	movs	r3, #0
 8011134:	4602      	mov	r2, r0
 8011136:	9300      	str	r3, [sp, #0]
 8011138:	4639      	mov	r1, r7
 801113a:	4628      	mov	r0, r5
 801113c:	47b0      	blx	r6
 801113e:	b003      	add	sp, #12
 8011140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011142:	2000      	movs	r0, #0
 8011144:	e7fb      	b.n	801113e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

08011146 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8011146:	b40e      	push	{r1, r2, r3}
 8011148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801114c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011152:	429a      	cmp	r2, r3
 8011154:	b09b      	sub	sp, #108	; 0x6c
 8011156:	4604      	mov	r4, r0
 8011158:	d03f      	beq.n	80111da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 801115a:	f100 0726 	add.w	r7, r0, #38	; 0x26
 801115e:	ab22      	add	r3, sp, #136	; 0x88
 8011160:	4638      	mov	r0, r7
 8011162:	9303      	str	r3, [sp, #12]
 8011164:	f7fa ffd0 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 8011168:	6803      	ldr	r3, [r0, #0]
 801116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801116c:	4680      	mov	r8, r0
 801116e:	4798      	blx	r3
 8011170:	b205      	sxth	r5, r0
 8011172:	4606      	mov	r6, r0
 8011174:	a804      	add	r0, sp, #16
 8011176:	f002 fcb9 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 801117a:	f8d8 3000 	ldr.w	r3, [r8]
 801117e:	4640      	mov	r0, r8
 8011180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011182:	4798      	blx	r3
 8011184:	9a03      	ldr	r2, [sp, #12]
 8011186:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011188:	4603      	mov	r3, r0
 801118a:	a804      	add	r0, sp, #16
 801118c:	f002 fccb 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011190:	4638      	mov	r0, r7
 8011192:	f7fa ffd5 	bl	800c140 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8011196:	4680      	mov	r8, r0
 8011198:	4638      	mov	r0, r7
 801119a:	f7fa ffb5 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 801119e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80111a2:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80111a6:	9300      	str	r3, [sp, #0]
 80111a8:	4642      	mov	r2, r8
 80111aa:	4603      	mov	r3, r0
 80111ac:	a804      	add	r0, sp, #16
 80111ae:	f000 fd68 	bl	8011c82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80111b2:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 80111b6:	18a9      	adds	r1, r5, r2
 80111b8:	2900      	cmp	r1, #0
 80111ba:	b203      	sxth	r3, r0
 80111bc:	dd0b      	ble.n	80111d6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 80111be:	3b01      	subs	r3, #1
 80111c0:	fb13 f302 	smulbb	r3, r3, r2
 80111c4:	fb16 3300 	smlabb	r3, r6, r0, r3
 80111c8:	b21d      	sxth	r5, r3
 80111ca:	4628      	mov	r0, r5
 80111cc:	b01b      	add	sp, #108	; 0x6c
 80111ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111d2:	b003      	add	sp, #12
 80111d4:	4770      	bx	lr
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	dcf7      	bgt.n	80111ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 80111da:	2500      	movs	r5, #0
 80111dc:	e7f5      	b.n	80111ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

080111e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80111e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111e4:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80111e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111ea:	429e      	cmp	r6, r3
 80111ec:	b08d      	sub	sp, #52	; 0x34
 80111ee:	4604      	mov	r4, r0
 80111f0:	4688      	mov	r8, r1
 80111f2:	d04b      	beq.n	801128c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 80111f4:	f100 0526 	add.w	r5, r0, #38	; 0x26
 80111f8:	4628      	mov	r0, r5
 80111fa:	f7fa ff85 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 80111fe:	4607      	mov	r7, r0
 8011200:	2800      	cmp	r0, #0
 8011202:	d043      	beq.n	801128c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 8011204:	4628      	mov	r0, r5
 8011206:	f7fa ffb3 	bl	800c170 <_ZNK8touchgfx9TypedText11assertValidEv>
 801120a:	4b22      	ldr	r3, [pc, #136]	; (8011294 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 801120c:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 8011216:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 801121a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 801121e:	4628      	mov	r0, r5
 8011220:	785e      	ldrb	r6, [r3, #1]
 8011222:	f7fa ff8d 	bl	800c140 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8011226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011228:	9309      	str	r3, [sp, #36]	; 0x24
 801122a:	4b1b      	ldr	r3, [pc, #108]	; (8011298 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 801122c:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8011236:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801123a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 801123e:	9707      	str	r7, [sp, #28]
 8011240:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8011244:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8011248:	f88d 6020 	strb.w	r6, [sp, #32]
 801124c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011250:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 8011254:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8011258:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 801125c:	b10a      	cbz	r2, 8011262 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 801125e:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8011260:	b906      	cbnz	r6, 8011264 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 8011262:	689e      	ldr	r6, [r3, #8]
 8011264:	af05      	add	r7, sp, #20
 8011266:	4621      	mov	r1, r4
 8011268:	4638      	mov	r0, r7
 801126a:	f001 fdfa 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801126e:	4628      	mov	r0, r5
 8011270:	f7ff ff26 	bl	80110c0 <_ZNK8touchgfx9TypedText7getTextEv>
 8011274:	2300      	movs	r3, #0
 8011276:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801127a:	ab07      	add	r3, sp, #28
 801127c:	9001      	str	r0, [sp, #4]
 801127e:	9300      	str	r3, [sp, #0]
 8011280:	e897 0006 	ldmia.w	r7, {r1, r2}
 8011284:	4643      	mov	r3, r8
 8011286:	4630      	mov	r0, r6
 8011288:	f000 fac6 	bl	8011818 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801128c:	b00d      	add	sp, #52	; 0x34
 801128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011292:	bf00      	nop
 8011294:	20009f6c 	.word	0x20009f6c
 8011298:	20009efc 	.word	0x20009efc

0801129c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801129c:	b570      	push	{r4, r5, r6, lr}
 801129e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80112a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112a4:	429a      	cmp	r2, r3
 80112a6:	4604      	mov	r4, r0
 80112a8:	d021      	beq.n	80112ee <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 80112aa:	6803      	ldr	r3, [r0, #0]
 80112ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112ae:	4798      	blx	r3
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	4605      	mov	r5, r0
 80112b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112b6:	4620      	mov	r0, r4
 80112b8:	4798      	blx	r3
 80112ba:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80112be:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80112c2:	6823      	ldr	r3, [r4, #0]
 80112c4:	4606      	mov	r6, r0
 80112c6:	b22d      	sxth	r5, r5
 80112c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ca:	d109      	bne.n	80112e0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 80112cc:	4629      	mov	r1, r5
 80112ce:	4620      	mov	r0, r4
 80112d0:	4798      	blx	r3
 80112d2:	6823      	ldr	r3, [r4, #0]
 80112d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112d6:	4631      	mov	r1, r6
 80112d8:	4620      	mov	r0, r4
 80112da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112de:	4718      	bx	r3
 80112e0:	4601      	mov	r1, r0
 80112e2:	4620      	mov	r0, r4
 80112e4:	4798      	blx	r3
 80112e6:	6823      	ldr	r3, [r4, #0]
 80112e8:	4629      	mov	r1, r5
 80112ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ec:	e7f4      	b.n	80112d8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 80112ee:	bd70      	pop	{r4, r5, r6, pc}

080112f0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 80112f0:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 80112f4:	84c1      	strh	r1, [r0, #38]	; 0x26
 80112f6:	b922      	cbnz	r2, 8011302 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80112f8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80112fc:	b90b      	cbnz	r3, 8011302 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 80112fe:	f7ff bfcd 	b.w	801129c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8011302:	4770      	bx	lr

08011304 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8011304:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011308:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801130a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801130e:	429a      	cmp	r2, r3
 8011310:	4604      	mov	r4, r0
 8011312:	d018      	beq.n	8011346 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x42>
 8011314:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8011318:	4628      	mov	r0, r5
 801131a:	f7fa fef5 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 801131e:	6803      	ldr	r3, [r0, #0]
 8011320:	4606      	mov	r6, r0
 8011322:	4628      	mov	r0, r5
 8011324:	69df      	ldr	r7, [r3, #28]
 8011326:	f7fa ff0b 	bl	800c140 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801132a:	4680      	mov	r8, r0
 801132c:	4628      	mov	r0, r5
 801132e:	f7ff fec7 	bl	80110c0 <_ZNK8touchgfx9TypedText7getTextEv>
 8011332:	2300      	movs	r3, #0
 8011334:	9300      	str	r3, [sp, #0]
 8011336:	4602      	mov	r2, r0
 8011338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801133a:	4641      	mov	r1, r8
 801133c:	4630      	mov	r0, r6
 801133e:	47b8      	blx	r7
 8011340:	b002      	add	sp, #8
 8011342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011346:	2000      	movs	r0, #0
 8011348:	e7fa      	b.n	8011340 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x3c>

0801134a <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 801134a:	b570      	push	{r4, r5, r6, lr}
 801134c:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 801134e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011352:	429a      	cmp	r2, r3
 8011354:	4604      	mov	r4, r0
 8011356:	d00c      	beq.n	8011372 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x28>
 8011358:	f850 3b26 	ldr.w	r3, [r0], #38
 801135c:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 801135e:	f7ff feaf 	bl	80110c0 <_ZNK8touchgfx9TypedText7getTextEv>
 8011362:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011364:	4601      	mov	r1, r0
 8011366:	46ac      	mov	ip, r5
 8011368:	4620      	mov	r0, r4
 801136a:	2300      	movs	r3, #0
 801136c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011370:	4760      	bx	ip
 8011372:	2000      	movs	r0, #0
 8011374:	bd70      	pop	{r4, r5, r6, pc}
	...

08011378 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8011378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801137c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 801137e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011382:	429e      	cmp	r6, r3
 8011384:	b08d      	sub	sp, #52	; 0x34
 8011386:	4604      	mov	r4, r0
 8011388:	460f      	mov	r7, r1
 801138a:	d048      	beq.n	801141e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801138c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 8011390:	4628      	mov	r0, r5
 8011392:	f7fa feb9 	bl	800c108 <_ZNK8touchgfx9TypedText7getFontEv>
 8011396:	4680      	mov	r8, r0
 8011398:	2800      	cmp	r0, #0
 801139a:	d040      	beq.n	801141e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xa6>
 801139c:	4628      	mov	r0, r5
 801139e:	f7fa fee7 	bl	800c170 <_ZNK8touchgfx9TypedText11assertValidEv>
 80113a2:	4b20      	ldr	r3, [pc, #128]	; (8011424 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xac>)
 80113a4:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 80113ae:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 80113b2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80113b6:	4628      	mov	r0, r5
 80113b8:	785e      	ldrb	r6, [r3, #1]
 80113ba:	f7fa fec1 	bl	800c140 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80113be:	f3c6 0601 	ubfx	r6, r6, #0, #2
 80113c2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80113c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113c8:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80113cc:	9309      	str	r3, [sp, #36]	; 0x24
 80113ce:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 80113d2:	f8cd 801c 	str.w	r8, [sp, #28]
 80113d6:	f88d 6020 	strb.w	r6, [sp, #32]
 80113da:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 80113de:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 80113e2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80113e6:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 80113ea:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 80113ee:	f7fb f963 	bl	800c6b8 <_ZN8touchgfx3HAL3lcdEv>
 80113f2:	ae05      	add	r6, sp, #20
 80113f4:	4621      	mov	r1, r4
 80113f6:	4680      	mov	r8, r0
 80113f8:	4630      	mov	r0, r6
 80113fa:	f001 fd32 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80113fe:	4628      	mov	r0, r5
 8011400:	f7ff fe5e 	bl	80110c0 <_ZNK8touchgfx9TypedText7getTextEv>
 8011404:	2300      	movs	r3, #0
 8011406:	9303      	str	r3, [sp, #12]
 8011408:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801140a:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801140e:	ab07      	add	r3, sp, #28
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	e896 0006 	ldmia.w	r6, {r1, r2}
 8011416:	463b      	mov	r3, r7
 8011418:	4640      	mov	r0, r8
 801141a:	f000 f9fd 	bl	8011818 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801141e:	b00d      	add	sp, #52	; 0x34
 8011420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011424:	20009f6c 	.word	0x20009f6c

08011428 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8011428:	b570      	push	{r4, r5, r6, lr}
 801142a:	4605      	mov	r5, r0
 801142c:	880b      	ldrh	r3, [r1, #0]
 801142e:	84c3      	strh	r3, [r0, #38]	; 0x26
 8011430:	f855 3b26 	ldr.w	r3, [r5], #38
 8011434:	4604      	mov	r4, r0
 8011436:	4628      	mov	r0, r5
 8011438:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 801143a:	f003 f90d 	bl	8014658 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801143e:	b201      	sxth	r1, r0
 8011440:	4620      	mov	r0, r4
 8011442:	47b0      	blx	r6
 8011444:	6823      	ldr	r3, [r4, #0]
 8011446:	4628      	mov	r0, r5
 8011448:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 801144a:	f003 f93f 	bl	80146cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801144e:	b201      	sxth	r1, r0
 8011450:	4620      	mov	r0, r4
 8011452:	47b0      	blx	r6
 8011454:	4628      	mov	r0, r5
 8011456:	f003 f9cd 	bl	80147f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801145a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 801145e:	bd70      	pop	{r4, r5, r6, pc}

08011460 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8011460:	b510      	push	{r4, lr}
 8011462:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8011466:	2bff      	cmp	r3, #255	; 0xff
 8011468:	4604      	mov	r4, r0
 801146a:	d006      	beq.n	801147a <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801146c:	2300      	movs	r3, #0
 801146e:	8003      	strh	r3, [r0, #0]
 8011470:	8043      	strh	r3, [r0, #2]
 8011472:	8083      	strh	r3, [r0, #4]
 8011474:	80c3      	strh	r3, [r0, #6]
 8011476:	4620      	mov	r0, r4
 8011478:	bd10      	pop	{r4, pc}
 801147a:	3126      	adds	r1, #38	; 0x26
 801147c:	f003 f960 	bl	8014740 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8011480:	e7f9      	b.n	8011476 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08011484 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8011484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011488:	4604      	mov	r4, r0
 801148a:	b088      	sub	sp, #32
 801148c:	f854 3b26 	ldr.w	r3, [r4], #38
 8011490:	2500      	movs	r5, #0
 8011492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011494:	460f      	mov	r7, r1
 8011496:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801149a:	a904      	add	r1, sp, #16
 801149c:	4606      	mov	r6, r0
 801149e:	4798      	blx	r3
 80114a0:	4620      	mov	r0, r4
 80114a2:	f003 f8d9 	bl	8014658 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80114a6:	4680      	mov	r8, r0
 80114a8:	4620      	mov	r0, r4
 80114aa:	f003 f90f 	bl	80146cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80114ae:	9506      	str	r5, [sp, #24]
 80114b0:	ad06      	add	r5, sp, #24
 80114b2:	f8ad 001e 	strh.w	r0, [sp, #30]
 80114b6:	4639      	mov	r1, r7
 80114b8:	4628      	mov	r0, r5
 80114ba:	f8ad 801c 	strh.w	r8, [sp, #28]
 80114be:	f7fe fe3d 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 80114c2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80114c6:	b1c3      	cbz	r3, 80114fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80114c8:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80114cc:	b1ab      	cbz	r3, 80114fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 80114ce:	4b0c      	ldr	r3, [pc, #48]	; (8011500 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80114d6:	b10a      	cbz	r2, 80114dc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 80114d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80114da:	b900      	cbnz	r0, 80114de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 80114dc:	6898      	ldr	r0, [r3, #8]
 80114de:	6801      	ldr	r1, [r0, #0]
 80114e0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80114e4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80114e8:	2701      	movs	r7, #1
 80114ea:	9702      	str	r7, [sp, #8]
 80114ec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80114f0:	e9cd 5600 	strd	r5, r6, [sp]
 80114f4:	68cd      	ldr	r5, [r1, #12]
 80114f6:	4621      	mov	r1, r4
 80114f8:	47a8      	blx	r5
 80114fa:	b008      	add	sp, #32
 80114fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011500:	20009efc 	.word	0x20009efc

08011504 <_ZN8touchgfx3LCD4initEv>:
 8011504:	4770      	bx	lr

08011506 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8011506:	2000      	movs	r0, #0
 8011508:	4770      	bx	lr

0801150a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801150a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801150e:	b091      	sub	sp, #68	; 0x44
 8011510:	4699      	mov	r9, r3
 8011512:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8011516:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8011518:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 801151c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011520:	4680      	mov	r8, r0
 8011522:	4617      	mov	r7, r2
 8011524:	a80e      	add	r0, sp, #56	; 0x38
 8011526:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 801152a:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 801152e:	2500      	movs	r5, #0
 8011530:	910d      	str	r1, [sp, #52]	; 0x34
 8011532:	950e      	str	r5, [sp, #56]	; 0x38
 8011534:	f000 fe3e 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011538:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801153a:	f8d9 6000 	ldr.w	r6, [r9]
 801153e:	6818      	ldr	r0, [r3, #0]
 8011540:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011542:	f9b4 b000 	ldrsh.w	fp, [r4]
 8011546:	f9b3 2000 	ldrsh.w	r2, [r3]
 801154a:	eb02 0c06 	add.w	ip, r2, r6
 801154e:	1b80      	subs	r0, r0, r6
 8011550:	ebab 0e0c 	sub.w	lr, fp, ip
 8011554:	4570      	cmp	r0, lr
 8011556:	f340 80bd 	ble.w	80116d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801155a:	88a1      	ldrh	r1, [r4, #4]
 801155c:	4459      	add	r1, fp
 801155e:	b209      	sxth	r1, r1
 8011560:	458c      	cmp	ip, r1
 8011562:	f300 80b7 	bgt.w	80116d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 8011566:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 801156a:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 801156e:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 8011572:	edd9 6a07 	vldr	s13, [r9, #28]
 8011576:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 801157a:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 801157e:	4283      	cmp	r3, r0
 8011580:	bfa8      	it	ge
 8011582:	4603      	movge	r3, r0
 8011584:	ee07 3a90 	vmov	s15, r3
 8011588:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801158c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8011590:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011594:	ee65 4a24 	vmul.f32	s9, s10, s9
 8011598:	ee25 5a27 	vmul.f32	s10, s10, s15
 801159c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80115a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80115a4:	45e3      	cmp	fp, ip
 80115a6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80115aa:	ee32 1a05 	vadd.f32	s2, s4, s10
 80115ae:	ee36 0a84 	vadd.f32	s0, s13, s8
 80115b2:	ee61 1a87 	vmul.f32	s3, s3, s14
 80115b6:	ee22 2a07 	vmul.f32	s4, s4, s14
 80115ba:	f340 808e 	ble.w	80116da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 80115be:	fb9e f5f3 	sdiv	r5, lr, r3
 80115c2:	ee07 5a10 	vmov	s14, r5
 80115c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80115ca:	2d00      	cmp	r5, #0
 80115cc:	fb03 e415 	mls	r4, r3, r5, lr
 80115d0:	eea7 0a04 	vfma.f32	s0, s14, s8
 80115d4:	eee7 0a24 	vfma.f32	s1, s14, s9
 80115d8:	eea7 1a05 	vfma.f32	s2, s14, s10
 80115dc:	dd13      	ble.n	8011606 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80115de:	ee70 6a44 	vsub.f32	s13, s0, s8
 80115e2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80115e6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80115ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115ee:	bf18      	it	ne
 80115f0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80115f4:	ee31 2a45 	vsub.f32	s4, s2, s10
 80115f8:	bf08      	it	eq
 80115fa:	eeb0 7a67 	vmoveq.f32	s14, s15
 80115fe:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011602:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011606:	fb05 f703 	mul.w	r7, r5, r3
 801160a:	1bc0      	subs	r0, r0, r7
 801160c:	443e      	add	r6, r7
 801160e:	1997      	adds	r7, r2, r6
 8011610:	4407      	add	r7, r0
 8011612:	42b9      	cmp	r1, r7
 8011614:	bfbc      	itt	lt
 8011616:	1a88      	sublt	r0, r1, r2
 8011618:	1b80      	sublt	r0, r0, r6
 801161a:	2800      	cmp	r0, #0
 801161c:	dd5a      	ble.n	80116d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 801161e:	fb90 f1f3 	sdiv	r1, r0, r3
 8011622:	fb03 0211 	mls	r2, r3, r1, r0
 8011626:	b90a      	cbnz	r2, 801162c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 8011628:	3901      	subs	r1, #1
 801162a:	461a      	mov	r2, r3
 801162c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011630:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 8011634:	44a4      	add	ip, r4
 8011636:	fb03 c505 	mla	r5, r3, r5, ip
 801163a:	2900      	cmp	r1, #0
 801163c:	bfcc      	ite	gt
 801163e:	469e      	movgt	lr, r3
 8011640:	4696      	movle	lr, r2
 8011642:	eef0 6a42 	vmov.f32	s13, s4
 8011646:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801164a:	ee21 3a23 	vmul.f32	s6, s2, s7
 801164e:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011656:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801165a:	eeb0 7a61 	vmov.f32	s14, s3
 801165e:	ee17 0a90 	vmov	r0, s15
 8011662:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011666:	fb90 f6f3 	sdiv	r6, r0, r3
 801166a:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801166e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011672:	ee17 0a90 	vmov	r0, s15
 8011676:	fb90 f7f3 	sdiv	r7, r0, r3
 801167a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801167e:	900c      	str	r0, [sp, #48]	; 0x30
 8011680:	f8d0 8000 	ldr.w	r8, [r0]
 8011684:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011686:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801168a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801168e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011692:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8011696:	f8cd a020 	str.w	sl, [sp, #32]
 801169a:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 801169e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80116a0:	f8d9 9014 	ldr.w	r9, [r9, #20]
 80116a4:	9603      	str	r6, [sp, #12]
 80116a6:	e9cd 7004 	strd	r7, r0, [sp, #16]
 80116aa:	ee16 0a90 	vmov	r0, s13
 80116ae:	fb07 0704 	mla	r7, r7, r4, r0
 80116b2:	ee17 0a10 	vmov	r0, s14
 80116b6:	fb06 0604 	mla	r6, r6, r4, r0
 80116ba:	e9cd 3600 	strd	r3, r6, [sp]
 80116be:	44ca      	add	sl, r9
 80116c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80116c4:	9506      	str	r5, [sp, #24]
 80116c6:	9702      	str	r7, [sp, #8]
 80116c8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80116cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80116ce:	ebae 0304 	sub.w	r3, lr, r4
 80116d2:	47a8      	blx	r5
 80116d4:	b011      	add	sp, #68	; 0x44
 80116d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116da:	462c      	mov	r4, r5
 80116dc:	e797      	b.n	801160e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

080116de <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80116de:	b570      	push	{r4, r5, r6, lr}
 80116e0:	4604      	mov	r4, r0
 80116e2:	2500      	movs	r5, #0
 80116e4:	7223      	strb	r3, [r4, #8]
 80116e6:	9804      	ldr	r0, [sp, #16]
 80116e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80116ec:	8025      	strh	r5, [r4, #0]
 80116ee:	6061      	str	r1, [r4, #4]
 80116f0:	7263      	strb	r3, [r4, #9]
 80116f2:	60e0      	str	r0, [r4, #12]
 80116f4:	8222      	strh	r2, [r4, #16]
 80116f6:	8265      	strh	r5, [r4, #18]
 80116f8:	82a5      	strh	r5, [r4, #20]
 80116fa:	82e5      	strh	r5, [r4, #22]
 80116fc:	8325      	strh	r5, [r4, #24]
 80116fe:	8365      	strh	r5, [r4, #26]
 8011700:	83a5      	strh	r5, [r4, #28]
 8011702:	77a5      	strb	r5, [r4, #30]
 8011704:	6803      	ldr	r3, [r0, #0]
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	4798      	blx	r3
 801170a:	4606      	mov	r6, r0
 801170c:	b1f8      	cbz	r0, 801174e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801170e:	68e0      	ldr	r0, [r4, #12]
 8011710:	6803      	ldr	r3, [r0, #0]
 8011712:	4631      	mov	r1, r6
 8011714:	68db      	ldr	r3, [r3, #12]
 8011716:	4798      	blx	r3
 8011718:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801171c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011720:	7a83      	ldrb	r3, [r0, #10]
 8011722:	4313      	orrs	r3, r2
 8011724:	83a3      	strh	r3, [r4, #28]
 8011726:	7a63      	ldrb	r3, [r4, #9]
 8011728:	2b04      	cmp	r3, #4
 801172a:	4605      	mov	r5, r0
 801172c:	d10f      	bne.n	801174e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 801172e:	68e0      	ldr	r0, [r4, #12]
 8011730:	6803      	ldr	r3, [r0, #0]
 8011732:	462a      	mov	r2, r5
 8011734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011736:	4631      	mov	r1, r6
 8011738:	4798      	blx	r3
 801173a:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801173e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011742:	7aab      	ldrb	r3, [r5, #10]
 8011744:	4313      	orrs	r3, r2
 8011746:	4418      	add	r0, r3
 8011748:	8ba3      	ldrh	r3, [r4, #28]
 801174a:	4418      	add	r0, r3
 801174c:	83a0      	strh	r0, [r4, #28]
 801174e:	4620      	mov	r0, r4
 8011750:	bd70      	pop	{r4, r5, r6, pc}

08011752 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011756:	2400      	movs	r4, #0
 8011758:	b085      	sub	sp, #20
 801175a:	4681      	mov	r9, r0
 801175c:	460f      	mov	r7, r1
 801175e:	4692      	mov	sl, r2
 8011760:	469b      	mov	fp, r3
 8011762:	46a0      	mov	r8, r4
 8011764:	4626      	mov	r6, r4
 8011766:	4554      	cmp	r4, sl
 8011768:	da21      	bge.n	80117ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801176a:	2300      	movs	r3, #0
 801176c:	9303      	str	r3, [sp, #12]
 801176e:	463a      	mov	r2, r7
 8011770:	ab03      	add	r3, sp, #12
 8011772:	4659      	mov	r1, fp
 8011774:	4648      	mov	r0, r9
 8011776:	f002 fb3b 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801177a:	4605      	mov	r5, r0
 801177c:	b1b8      	cbz	r0, 80117ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 801177e:	280a      	cmp	r0, #10
 8011780:	d015      	beq.n	80117ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 8011782:	9a03      	ldr	r2, [sp, #12]
 8011784:	b182      	cbz	r2, 80117a8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 8011786:	f992 000d 	ldrsb.w	r0, [r2, #13]
 801178a:	7a93      	ldrb	r3, [r2, #10]
 801178c:	8895      	ldrh	r5, [r2, #4]
 801178e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8011792:	4303      	orrs	r3, r0
 8011794:	9301      	str	r3, [sp, #4]
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	4641      	mov	r1, r8
 801179a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801179c:	4638      	mov	r0, r7
 801179e:	4798      	blx	r3
 80117a0:	9b01      	ldr	r3, [sp, #4]
 80117a2:	4418      	add	r0, r3
 80117a4:	4406      	add	r6, r0
 80117a6:	b2b6      	uxth	r6, r6
 80117a8:	3401      	adds	r4, #1
 80117aa:	46a8      	mov	r8, r5
 80117ac:	e7db      	b.n	8011766 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 80117ae:	4630      	mov	r0, r6
 80117b0:	b005      	add	sp, #20
 80117b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80117b6:	2a02      	cmp	r2, #2
 80117b8:	b530      	push	{r4, r5, lr}
 80117ba:	d011      	beq.n	80117e0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80117bc:	2a03      	cmp	r2, #3
 80117be:	d01c      	beq.n	80117fa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80117c0:	2a01      	cmp	r2, #1
 80117c2:	d10c      	bne.n	80117de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80117c4:	888b      	ldrh	r3, [r1, #4]
 80117c6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80117ca:	8801      	ldrh	r1, [r0, #0]
 80117cc:	8844      	ldrh	r4, [r0, #2]
 80117ce:	8004      	strh	r4, [r0, #0]
 80117d0:	1a9b      	subs	r3, r3, r2
 80117d2:	1a5b      	subs	r3, r3, r1
 80117d4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80117d8:	8043      	strh	r3, [r0, #2]
 80117da:	8081      	strh	r1, [r0, #4]
 80117dc:	80c2      	strh	r2, [r0, #6]
 80117de:	bd30      	pop	{r4, r5, pc}
 80117e0:	88cb      	ldrh	r3, [r1, #6]
 80117e2:	88c2      	ldrh	r2, [r0, #6]
 80117e4:	1a9b      	subs	r3, r3, r2
 80117e6:	8842      	ldrh	r2, [r0, #2]
 80117e8:	1a9b      	subs	r3, r3, r2
 80117ea:	888a      	ldrh	r2, [r1, #4]
 80117ec:	8881      	ldrh	r1, [r0, #4]
 80117ee:	8043      	strh	r3, [r0, #2]
 80117f0:	1a52      	subs	r2, r2, r1
 80117f2:	8801      	ldrh	r1, [r0, #0]
 80117f4:	1a52      	subs	r2, r2, r1
 80117f6:	8002      	strh	r2, [r0, #0]
 80117f8:	e7f1      	b.n	80117de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80117fa:	88cb      	ldrh	r3, [r1, #6]
 80117fc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011800:	8841      	ldrh	r1, [r0, #2]
 8011802:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011806:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801180a:	8045      	strh	r5, [r0, #2]
 801180c:	1a9b      	subs	r3, r3, r2
 801180e:	1a5b      	subs	r3, r3, r1
 8011810:	8003      	strh	r3, [r0, #0]
 8011812:	8082      	strh	r2, [r0, #4]
 8011814:	80c4      	strh	r4, [r0, #6]
 8011816:	e7e2      	b.n	80117de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08011818 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8011818:	b570      	push	{r4, r5, r6, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	ac02      	add	r4, sp, #8
 801181e:	e884 0006 	stmia.w	r4, {r1, r2}
 8011822:	461a      	mov	r2, r3
 8011824:	ab0c      	add	r3, sp, #48	; 0x30
 8011826:	9305      	str	r3, [sp, #20]
 8011828:	4b0a      	ldr	r3, [pc, #40]	; (8011854 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 801182a:	685d      	ldr	r5, [r3, #4]
 801182c:	1069      	asrs	r1, r5, #1
 801182e:	07ed      	lsls	r5, r5, #31
 8011830:	bf4c      	ite	mi
 8011832:	681b      	ldrmi	r3, [r3, #0]
 8011834:	681d      	ldrpl	r5, [r3, #0]
 8011836:	eb00 0601 	add.w	r6, r0, r1
 801183a:	bf44      	itt	mi
 801183c:	5841      	ldrmi	r1, [r0, r1]
 801183e:	58cd      	ldrmi	r5, [r1, r3]
 8011840:	9b05      	ldr	r3, [sp, #20]
 8011842:	9301      	str	r3, [sp, #4]
 8011844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011846:	9300      	str	r3, [sp, #0]
 8011848:	4621      	mov	r1, r4
 801184a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801184c:	4630      	mov	r0, r6
 801184e:	47a8      	blx	r5
 8011850:	b006      	add	sp, #24
 8011852:	bd70      	pop	{r4, r5, r6, pc}
 8011854:	20000084 	.word	0x20000084

08011858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8011858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185c:	b09d      	sub	sp, #116	; 0x74
 801185e:	9114      	str	r1, [sp, #80]	; 0x50
 8011860:	9315      	str	r3, [sp, #84]	; 0x54
 8011862:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011864:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011866:	8809      	ldrh	r1, [r1, #0]
 8011868:	889b      	ldrh	r3, [r3, #4]
 801186a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801186c:	9210      	str	r2, [sp, #64]	; 0x40
 801186e:	440b      	add	r3, r1
 8011870:	b21b      	sxth	r3, r3
 8011872:	930e      	str	r3, [sp, #56]	; 0x38
 8011874:	6833      	ldr	r3, [r6, #0]
 8011876:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 801187a:	7a59      	ldrb	r1, [r3, #9]
 801187c:	7a1b      	ldrb	r3, [r3, #8]
 801187e:	9312      	str	r3, [sp, #72]	; 0x48
 8011880:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011882:	900f      	str	r0, [sp, #60]	; 0x3c
 8011884:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8011888:	9113      	str	r1, [sp, #76]	; 0x4c
 801188a:	f9b3 4000 	ldrsh.w	r4, [r3]
 801188e:	2a00      	cmp	r2, #0
 8011890:	d059      	beq.n	8011946 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8011892:	7c33      	ldrb	r3, [r6, #16]
 8011894:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8011896:	2b04      	cmp	r3, #4
 8011898:	bf14      	ite	ne
 801189a:	2301      	movne	r3, #1
 801189c:	2302      	moveq	r3, #2
 801189e:	4413      	add	r3, r2
 80118a0:	f04f 0800 	mov.w	r8, #0
 80118a4:	930d      	str	r3, [sp, #52]	; 0x34
 80118a6:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80118aa:	4645      	mov	r5, r8
 80118ac:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 80118b0:	4293      	cmp	r3, r2
 80118b2:	da75      	bge.n	80119a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 80118b4:	2300      	movs	r3, #0
 80118b6:	931a      	str	r3, [sp, #104]	; 0x68
 80118b8:	992b      	ldr	r1, [sp, #172]	; 0xac
 80118ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118bc:	6832      	ldr	r2, [r6, #0]
 80118be:	428b      	cmp	r3, r1
 80118c0:	db43      	blt.n	801194a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 80118c2:	6813      	ldr	r3, [r2, #0]
 80118c4:	4610      	mov	r0, r2
 80118c6:	695b      	ldr	r3, [r3, #20]
 80118c8:	4798      	blx	r3
 80118ca:	4681      	mov	r9, r0
 80118cc:	6830      	ldr	r0, [r6, #0]
 80118ce:	6803      	ldr	r3, [r0, #0]
 80118d0:	aa1b      	add	r2, sp, #108	; 0x6c
 80118d2:	689f      	ldr	r7, [r3, #8]
 80118d4:	4649      	mov	r1, r9
 80118d6:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 80118da:	47b8      	blx	r7
 80118dc:	901a      	str	r0, [sp, #104]	; 0x68
 80118de:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 80118e2:	45d1      	cmp	r9, sl
 80118e4:	d045      	beq.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80118e6:	f242 070b 	movw	r7, #8203	; 0x200b
 80118ea:	45b9      	cmp	r9, r7
 80118ec:	d041      	beq.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80118ee:	f1b9 0f00 	cmp.w	r9, #0
 80118f2:	f000 80ef 	beq.w	8011ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 80118f6:	f1b9 0f0a 	cmp.w	r9, #10
 80118fa:	d057      	beq.n	80119ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 80118fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80118fe:	b383      	cbz	r3, 8011962 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 8011900:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8011904:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011906:	2a00      	cmp	r2, #0
 8011908:	f000 80d3 	beq.w	8011ab2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25a>
 801190c:	f1bb 0f00 	cmp.w	fp, #0
 8011910:	d100      	bne.n	8011914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 8011912:	4444      	add	r4, r8
 8011914:	f992 800d 	ldrsb.w	r8, [r2, #13]
 8011918:	f408 7380 	and.w	r3, r8, #256	; 0x100
 801191c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8011920:	f1bb 0f01 	cmp.w	fp, #1
 8011924:	ea48 0803 	orr.w	r8, r8, r3
 8011928:	d128      	bne.n	801197c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 801192a:	eba4 0408 	sub.w	r4, r4, r8
 801192e:	2d00      	cmp	r5, #0
 8011930:	d143      	bne.n	80119ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8011932:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011934:	eb08 0304 	add.w	r3, r8, r4
 8011938:	4413      	add	r3, r2
 801193a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801193c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011940:	4293      	cmp	r3, r2
 8011942:	da44      	bge.n	80119ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8011944:	e02b      	b.n	801199e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8011946:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011948:	e7aa      	b.n	80118a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801194a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801194e:	9301      	str	r3, [sp, #4]
 8011950:	ab1b      	add	r3, sp, #108	; 0x6c
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	4659      	mov	r1, fp
 8011956:	ab1a      	add	r3, sp, #104	; 0x68
 8011958:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801195a:	f002 fa7d 	bl	8013e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801195e:	4681      	mov	r9, r0
 8011960:	e7bd      	b.n	80118de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8011962:	6830      	ldr	r0, [r6, #0]
 8011964:	6803      	ldr	r3, [r0, #0]
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	4798      	blx	r3
 801196a:	4550      	cmp	r0, sl
 801196c:	d001      	beq.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 801196e:	42b8      	cmp	r0, r7
 8011970:	d1c8      	bne.n	8011904 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 8011972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011974:	3301      	adds	r3, #1
 8011976:	930c      	str	r3, [sp, #48]	; 0x30
 8011978:	464d      	mov	r5, r9
 801197a:	e797      	b.n	80118ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 801197c:	2d00      	cmp	r5, #0
 801197e:	f000 80ab 	beq.w	8011ad8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x280>
 8011982:	f1bb 0f00 	cmp.w	fp, #0
 8011986:	d118      	bne.n	80119ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 8011988:	6830      	ldr	r0, [r6, #0]
 801198a:	6803      	ldr	r3, [r0, #0]
 801198c:	4629      	mov	r1, r5
 801198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011990:	4798      	blx	r3
 8011992:	4404      	add	r4, r0
 8011994:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011998:	1ae3      	subs	r3, r4, r3
 801199a:	4293      	cmp	r3, r2
 801199c:	dd17      	ble.n	80119ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801199e:	464d      	mov	r5, r9
 80119a0:	2d00      	cmp	r5, #0
 80119a2:	f000 8097 	beq.w	8011ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 80119a6:	2d0a      	cmp	r5, #10
 80119a8:	f040 8085 	bne.w	8011ab6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 80119ac:	250a      	movs	r5, #10
 80119ae:	fab5 f085 	clz	r0, r5
 80119b2:	0940      	lsrs	r0, r0, #5
 80119b4:	b01d      	add	sp, #116	; 0x74
 80119b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ba:	6830      	ldr	r0, [r6, #0]
 80119bc:	6803      	ldr	r3, [r0, #0]
 80119be:	4629      	mov	r1, r5
 80119c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119c2:	4798      	blx	r3
 80119c4:	f1bb 0f01 	cmp.w	fp, #1
 80119c8:	eba4 0400 	sub.w	r4, r4, r0
 80119cc:	d0b1      	beq.n	8011932 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80119ce:	981a      	ldr	r0, [sp, #104]	; 0x68
 80119d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80119d2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80119d6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80119da:	7b43      	ldrb	r3, [r0, #13]
 80119dc:	015b      	lsls	r3, r3, #5
 80119de:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80119e2:	7983      	ldrb	r3, [r0, #6]
 80119e4:	4421      	add	r1, r4
 80119e6:	4313      	orrs	r3, r2
 80119e8:	440b      	add	r3, r1
 80119ea:	42ab      	cmp	r3, r5
 80119ec:	dbc1      	blt.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80119ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119f0:	4299      	cmp	r1, r3
 80119f2:	dabe      	bge.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 80119f4:	6830      	ldr	r0, [r6, #0]
 80119f6:	6803      	ldr	r3, [r0, #0]
 80119f8:	42a5      	cmp	r5, r4
 80119fa:	bfc8      	it	gt
 80119fc:	1b2d      	subgt	r5, r5, r4
 80119fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a00:	bfcc      	ite	gt
 8011a02:	b2ad      	uxthgt	r5, r5
 8011a04:	2500      	movle	r5, #0
 8011a06:	4798      	blx	r3
 8011a08:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011a0a:	4936      	ldr	r1, [pc, #216]	; (8011ae4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>)
 8011a0c:	7b5a      	ldrb	r2, [r3, #13]
 8011a0e:	f893 e008 	ldrb.w	lr, [r3, #8]
 8011a12:	f012 0f40 	tst.w	r2, #64	; 0x40
 8011a16:	bf18      	it	ne
 8011a18:	468c      	movne	ip, r1
 8011a1a:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011a1c:	4408      	add	r0, r1
 8011a1e:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 8011a22:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011a26:	bf08      	it	eq
 8011a28:	f04f 0c00 	moveq.w	ip, #0
 8011a2c:	ea41 070e 	orr.w	r7, r1, lr
 8011a30:	ea4c 0707 	orr.w	r7, ip, r7
 8011a34:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8011a36:	1bc7      	subs	r7, r0, r7
 8011a38:	b2bf      	uxth	r7, r7
 8011a3a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8011a3e:	fa0f fa87 	sxth.w	sl, r7
 8011a42:	4551      	cmp	r1, sl
 8011a44:	dd33      	ble.n	8011aae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x256>
 8011a46:	0112      	lsls	r2, r2, #4
 8011a48:	79d8      	ldrb	r0, [r3, #7]
 8011a4a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011a4e:	4302      	orrs	r2, r0
 8011a50:	4492      	add	sl, r2
 8011a52:	4551      	cmp	r1, sl
 8011a54:	dc8d      	bgt.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8011a56:	1bcf      	subs	r7, r1, r7
 8011a58:	b2bf      	uxth	r7, r7
 8011a5a:	468a      	mov	sl, r1
 8011a5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a60:	6830      	ldr	r0, [r6, #0]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	6801      	ldr	r1, [r0, #0]
 8011a66:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8011a68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011a6a:	9311      	str	r3, [sp, #68]	; 0x44
 8011a6c:	9216      	str	r2, [sp, #88]	; 0x58
 8011a6e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8011a70:	4788      	blx	r1
 8011a72:	79b1      	ldrb	r1, [r6, #6]
 8011a74:	910b      	str	r1, [sp, #44]	; 0x2c
 8011a76:	7bb1      	ldrb	r1, [r6, #14]
 8011a78:	910a      	str	r1, [sp, #40]	; 0x28
 8011a7a:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 8011a7e:	9109      	str	r1, [sp, #36]	; 0x24
 8011a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a82:	68b1      	ldr	r1, [r6, #8]
 8011a84:	9305      	str	r3, [sp, #20]
 8011a86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8011a88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011a8a:	9206      	str	r2, [sp, #24]
 8011a8c:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011a90:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8011a94:	e9cd a501 	strd	sl, r5, [sp, #4]
 8011a98:	4425      	add	r5, r4
 8011a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a9c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8011a9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011aa0:	b22d      	sxth	r5, r5
 8011aa2:	9500      	str	r5, [sp, #0]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	47a8      	blx	r5
 8011aac:	e761      	b.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8011aae:	2700      	movs	r7, #0
 8011ab0:	e7d4      	b.n	8011a5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 8011ab2:	4690      	mov	r8, r2
 8011ab4:	e75d      	b.n	8011972 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 8011ab6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011ab8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011aba:	3401      	adds	r4, #1
 8011abc:	429c      	cmp	r4, r3
 8011abe:	f6bf af76 	bge.w	80119ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8011ac2:	4659      	mov	r1, fp
 8011ac4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8011ac6:	f002 f953 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011aca:	4605      	mov	r5, r0
 8011acc:	b110      	cbz	r0, 8011ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 8011ace:	280a      	cmp	r0, #10
 8011ad0:	d1f2      	bne.n	8011ab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x260>
 8011ad2:	e76b      	b.n	80119ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8011ad4:	2500      	movs	r5, #0
 8011ad6:	e76a      	b.n	80119ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 8011ad8:	f1bb 0f00 	cmp.w	fp, #0
 8011adc:	f43f af5a 	beq.w	8011994 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 8011ae0:	e775      	b.n	80119ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8011ae2:	bf00      	nop
 8011ae4:	fffffe00 	.word	0xfffffe00

08011ae8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8011ae8:	b530      	push	{r4, r5, lr}
 8011aea:	8a44      	ldrh	r4, [r0, #18]
 8011aec:	8ac5      	ldrh	r5, [r0, #22]
 8011aee:	82c3      	strh	r3, [r0, #22]
 8011af0:	442c      	add	r4, r5
 8011af2:	1ae4      	subs	r4, r4, r3
 8011af4:	8244      	strh	r4, [r0, #18]
 8011af6:	8b03      	ldrh	r3, [r0, #24]
 8011af8:	8a84      	ldrh	r4, [r0, #20]
 8011afa:	4422      	add	r2, r4
 8011afc:	440c      	add	r4, r1
 8011afe:	1a59      	subs	r1, r3, r1
 8011b00:	8342      	strh	r2, [r0, #26]
 8011b02:	8284      	strh	r4, [r0, #20]
 8011b04:	8301      	strh	r1, [r0, #24]
 8011b06:	bd30      	pop	{r4, r5, pc}

08011b08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8011b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0c:	7a45      	ldrb	r5, [r0, #9]
 8011b0e:	1eeb      	subs	r3, r5, #3
 8011b10:	b085      	sub	sp, #20
 8011b12:	4604      	mov	r4, r0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	4689      	mov	r9, r1
 8011b18:	b329      	cbz	r1, 8011b66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d921      	bls.n	8011b62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 8011b1e:	1e69      	subs	r1, r5, #1
 8011b20:	f1d1 0b00 	rsbs	fp, r1, #0
 8011b24:	eb4b 0b01 	adc.w	fp, fp, r1
 8011b28:	1eaa      	subs	r2, r5, #2
 8011b2a:	4253      	negs	r3, r2
 8011b2c:	4153      	adcs	r3, r2
 8011b2e:	2500      	movs	r5, #0
 8011b30:	9301      	str	r3, [sp, #4]
 8011b32:	9500      	str	r5, [sp, #0]
 8011b34:	2600      	movs	r6, #0
 8011b36:	8266      	strh	r6, [r4, #18]
 8011b38:	82a6      	strh	r6, [r4, #20]
 8011b3a:	f242 080b 	movw	r8, #8203	; 0x200b
 8011b3e:	2300      	movs	r3, #0
 8011b40:	9303      	str	r3, [sp, #12]
 8011b42:	68e2      	ldr	r2, [r4, #12]
 8011b44:	7a21      	ldrb	r1, [r4, #8]
 8011b46:	6860      	ldr	r0, [r4, #4]
 8011b48:	8827      	ldrh	r7, [r4, #0]
 8011b4a:	ab03      	add	r3, sp, #12
 8011b4c:	f002 f950 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011b50:	8020      	strh	r0, [r4, #0]
 8011b52:	b9b0      	cbnz	r0, 8011b82 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 8011b54:	8b22      	ldrh	r2, [r4, #24]
 8011b56:	2300      	movs	r3, #0
 8011b58:	4611      	mov	r1, r2
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	f7ff ffc4 	bl	8011ae8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011b60:	e062      	b.n	8011c28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8011b62:	468b      	mov	fp, r1
 8011b64:	e7e0      	b.n	8011b28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	f105 35ff 	add.w	r5, r5, #4294967295
 8011b6c:	bf8c      	ite	hi
 8011b6e:	2300      	movhi	r3, #0
 8011b70:	2301      	movls	r3, #1
 8011b72:	2d01      	cmp	r5, #1
 8011b74:	9300      	str	r3, [sp, #0]
 8011b76:	bf8c      	ite	hi
 8011b78:	2500      	movhi	r5, #0
 8011b7a:	2501      	movls	r5, #1
 8011b7c:	9101      	str	r1, [sp, #4]
 8011b7e:	468b      	mov	fp, r1
 8011b80:	e7d8      	b.n	8011b34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 8011b82:	8ae3      	ldrh	r3, [r4, #22]
 8011b84:	280a      	cmp	r0, #10
 8011b86:	f103 0301 	add.w	r3, r3, #1
 8011b8a:	82e3      	strh	r3, [r4, #22]
 8011b8c:	d0e2      	beq.n	8011b54 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 8011b8e:	9a03      	ldr	r2, [sp, #12]
 8011b90:	b972      	cbnz	r2, 8011bb0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 8011b92:	4540      	cmp	r0, r8
 8011b94:	d1d3      	bne.n	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011b96:	8823      	ldrh	r3, [r4, #0]
 8011b98:	8b21      	ldrh	r1, [r4, #24]
 8011b9a:	2b20      	cmp	r3, #32
 8011b9c:	d001      	beq.n	8011ba2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 8011b9e:	4543      	cmp	r3, r8
 8011ba0:	d11d      	bne.n	8011bde <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 8011ba2:	2f20      	cmp	r7, #32
 8011ba4:	d002      	beq.n	8011bac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8011ba6:	4547      	cmp	r7, r8
 8011ba8:	bf18      	it	ne
 8011baa:	460e      	movne	r6, r1
 8011bac:	2001      	movs	r0, #1
 8011bae:	e017      	b.n	8011be0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 8011bb0:	4540      	cmp	r0, r8
 8011bb2:	d012      	beq.n	8011bda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 8011bb4:	8893      	ldrh	r3, [r2, #4]
 8011bb6:	8023      	strh	r3, [r4, #0]
 8011bb8:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 8011bbc:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 8011bc0:	f892 a00a 	ldrb.w	sl, [r2, #10]
 8011bc4:	ea4a 0a00 	orr.w	sl, sl, r0
 8011bc8:	68e0      	ldr	r0, [r4, #12]
 8011bca:	6803      	ldr	r3, [r0, #0]
 8011bcc:	4639      	mov	r1, r7
 8011bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bd0:	4798      	blx	r3
 8011bd2:	eb0a 0200 	add.w	r2, sl, r0
 8011bd6:	b292      	uxth	r2, r2
 8011bd8:	e7dd      	b.n	8011b96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8011bda:	2200      	movs	r2, #0
 8011bdc:	e7db      	b.n	8011b96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 8011bde:	2000      	movs	r0, #0
 8011be0:	440a      	add	r2, r1
 8011be2:	8aa3      	ldrh	r3, [r4, #20]
 8011be4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8011be8:	b292      	uxth	r2, r2
 8011bea:	8322      	strh	r2, [r4, #24]
 8011bec:	4413      	add	r3, r2
 8011bee:	f1b9 0f00 	cmp.w	r9, #0
 8011bf2:	d022      	beq.n	8011c3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 8011bf4:	f1bb 0f00 	cmp.w	fp, #0
 8011bf8:	d102      	bne.n	8011c00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 8011bfa:	9901      	ldr	r1, [sp, #4]
 8011bfc:	b149      	cbz	r1, 8011c12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8011bfe:	b140      	cbz	r0, 8011c12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 8011c00:	8ba1      	ldrh	r1, [r4, #28]
 8011c02:	4419      	add	r1, r3
 8011c04:	458c      	cmp	ip, r1
 8011c06:	da12      	bge.n	8011c2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8011c08:	8a61      	ldrh	r1, [r4, #18]
 8011c0a:	b181      	cbz	r1, 8011c2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 8011c0c:	4563      	cmp	r3, ip
 8011c0e:	dd96      	ble.n	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c10:	e004      	b.n	8011c1c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 8011c12:	4563      	cmp	r3, ip
 8011c14:	dd93      	ble.n	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c16:	8a63      	ldrh	r3, [r4, #18]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d090      	beq.n	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	77a3      	strb	r3, [r4, #30]
 8011c20:	8ba2      	ldrh	r2, [r4, #28]
 8011c22:	8b63      	ldrh	r3, [r4, #26]
 8011c24:	4413      	add	r3, r2
 8011c26:	8363      	strh	r3, [r4, #26]
 8011c28:	b005      	add	sp, #20
 8011c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2e:	2300      	movs	r3, #0
 8011c30:	4611      	mov	r1, r2
 8011c32:	4620      	mov	r0, r4
 8011c34:	f7ff ff58 	bl	8011ae8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011c38:	e781      	b.n	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c3a:	4563      	cmp	r3, ip
 8011c3c:	dd16      	ble.n	8011c6c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 8011c3e:	9b00      	ldr	r3, [sp, #0]
 8011c40:	b113      	cbz	r3, 8011c48 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8011c42:	2301      	movs	r3, #1
 8011c44:	460a      	mov	r2, r1
 8011c46:	e787      	b.n	8011b58 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 8011c48:	2d00      	cmp	r5, #0
 8011c4a:	f43f af78 	beq.w	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	f47f af75 	bne.w	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c54:	2f20      	cmp	r7, #32
 8011c56:	d001      	beq.n	8011c5c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 8011c58:	4547      	cmp	r7, r8
 8011c5a:	d102      	bne.n	8011c62 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 8011c5c:	2301      	movs	r3, #1
 8011c5e:	4632      	mov	r2, r6
 8011c60:	e77b      	b.n	8011b5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 8011c62:	8a63      	ldrh	r3, [r4, #18]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f43f af6a 	beq.w	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c6a:	e7dd      	b.n	8011c28 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	f47f af66 	bne.w	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c72:	2f20      	cmp	r7, #32
 8011c74:	d002      	beq.n	8011c7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 8011c76:	4547      	cmp	r7, r8
 8011c78:	f47f af61 	bne.w	8011b3e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	4632      	mov	r2, r6
 8011c80:	e7d7      	b.n	8011c32 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

08011c82 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8011c82:	b570      	push	{r4, r5, r6, lr}
 8011c84:	4606      	mov	r6, r0
 8011c86:	b08a      	sub	sp, #40	; 0x28
 8011c88:	4615      	mov	r5, r2
 8011c8a:	b191      	cbz	r1, 8011cb2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 8011c8c:	e9cd 3100 	strd	r3, r1, [sp]
 8011c90:	4613      	mov	r3, r2
 8011c92:	4601      	mov	r1, r0
 8011c94:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8011c98:	a802      	add	r0, sp, #8
 8011c9a:	f7ff fd20 	bl	80116de <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8011c9e:	2401      	movs	r4, #1
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	a802      	add	r0, sp, #8
 8011ca4:	f7ff ff30 	bl	8011b08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011ca8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011cac:	b173      	cbz	r3, 8011ccc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8011cae:	3401      	adds	r4, #1
 8011cb0:	e7f6      	b.n	8011ca0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	f002 f85c 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011cb8:	2401      	movs	r4, #1
 8011cba:	280a      	cmp	r0, #10
 8011cbc:	4629      	mov	r1, r5
 8011cbe:	4630      	mov	r0, r6
 8011cc0:	bf08      	it	eq
 8011cc2:	3401      	addeq	r4, #1
 8011cc4:	f002 f854 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011cc8:	2800      	cmp	r0, #0
 8011cca:	d1f6      	bne.n	8011cba <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 8011ccc:	b2a0      	uxth	r0, r4
 8011cce:	b00a      	add	sp, #40	; 0x28
 8011cd0:	bd70      	pop	{r4, r5, r6, pc}

08011cd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011cd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cd6:	b0db      	sub	sp, #364	; 0x16c
 8011cd8:	468a      	mov	sl, r1
 8011cda:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 8011cde:	9009      	str	r0, [sp, #36]	; 0x24
 8011ce0:	461c      	mov	r4, r3
 8011ce2:	f1bb 0f00 	cmp.w	fp, #0
 8011ce6:	f000 80c7 	beq.w	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f000 80c3 	beq.w	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011cf2:	7ba3      	ldrb	r3, [r4, #14]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f000 80bf 	beq.w	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011cfa:	6810      	ldr	r0, [r2, #0]
 8011cfc:	6851      	ldr	r1, [r2, #4]
 8011cfe:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 8011d02:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 8011d06:	af0c      	add	r7, sp, #48	; 0x30
 8011d08:	463b      	mov	r3, r7
 8011d0a:	c303      	stmia	r3!, {r0, r1}
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 8011d12:	910e      	str	r1, [sp, #56]	; 0x38
 8011d14:	79a2      	ldrb	r2, [r4, #6]
 8011d16:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011d1a:	a90e      	add	r1, sp, #56	; 0x38
 8011d1c:	4638      	mov	r0, r7
 8011d1e:	f7ff fd4a 	bl	80117b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011d22:	a90e      	add	r1, sp, #56	; 0x38
 8011d24:	4608      	mov	r0, r1
 8011d26:	79a2      	ldrb	r2, [r4, #6]
 8011d28:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 8011d2c:	f7ff fd43 	bl	80117b6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011d30:	4648      	mov	r0, r9
 8011d32:	f001 fedb 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8011d36:	6820      	ldr	r0, [r4, #0]
 8011d38:	6803      	ldr	r3, [r0, #0]
 8011d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d3c:	4798      	blx	r3
 8011d3e:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8011d40:	4603      	mov	r3, r0
 8011d42:	4659      	mov	r1, fp
 8011d44:	4648      	mov	r0, r9
 8011d46:	f001 feee 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011d4a:	a82e      	add	r0, sp, #184	; 0xb8
 8011d4c:	f001 fece 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8011d50:	f894 8004 	ldrb.w	r8, [r4, #4]
 8011d54:	f1b8 0f00 	cmp.w	r8, #0
 8011d58:	d009      	beq.n	8011d6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 8011d5a:	6820      	ldr	r0, [r4, #0]
 8011d5c:	6803      	ldr	r3, [r0, #0]
 8011d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d60:	4798      	blx	r3
 8011d62:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8011d64:	4603      	mov	r3, r0
 8011d66:	4659      	mov	r1, fp
 8011d68:	a82e      	add	r0, sp, #184	; 0xb8
 8011d6a:	f001 fedc 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011d6e:	6820      	ldr	r0, [r4, #0]
 8011d70:	6803      	ldr	r3, [r0, #0]
 8011d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d74:	4798      	blx	r3
 8011d76:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011d7a:	182e      	adds	r6, r5, r0
 8011d7c:	2e00      	cmp	r6, #0
 8011d7e:	dd45      	ble.n	8011e0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8011d80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011d84:	4283      	cmp	r3, r0
 8011d86:	db41      	blt.n	8011e0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 8011d88:	441d      	add	r5, r3
 8011d8a:	fb95 f5f6 	sdiv	r5, r5, r6
 8011d8e:	a844      	add	r0, sp, #272	; 0x110
 8011d90:	f001 feac 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8011d94:	7c23      	ldrb	r3, [r4, #16]
 8011d96:	b14b      	cbz	r3, 8011dac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 8011d98:	6820      	ldr	r0, [r4, #0]
 8011d9a:	6803      	ldr	r3, [r0, #0]
 8011d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d9e:	4798      	blx	r3
 8011da0:	9a65      	ldr	r2, [sp, #404]	; 0x194
 8011da2:	4603      	mov	r3, r0
 8011da4:	4659      	mov	r1, fp
 8011da6:	a844      	add	r0, sp, #272	; 0x110
 8011da8:	f001 febd 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8011dac:	7c21      	ldrb	r1, [r4, #16]
 8011dae:	9101      	str	r1, [sp, #4]
 8011db0:	6821      	ldr	r1, [r4, #0]
 8011db2:	7963      	ldrb	r3, [r4, #5]
 8011db4:	9100      	str	r1, [sp, #0]
 8011db6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8011dba:	a944      	add	r1, sp, #272	; 0x110
 8011dbc:	a810      	add	r0, sp, #64	; 0x40
 8011dbe:	f7ff fc8e 	bl	80116de <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8011dc2:	7c23      	ldrb	r3, [r4, #16]
 8011dc4:	bb23      	cbnz	r3, 8011e10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 8011dc6:	fa1f fb86 	uxth.w	fp, r6
 8011dca:	2d00      	cmp	r5, #0
 8011dcc:	dd57      	ble.n	8011e7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8011dce:	7961      	ldrb	r1, [r4, #5]
 8011dd0:	4648      	mov	r0, r9
 8011dd2:	f001 ffcd 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	f1b8 0f00 	cmp.w	r8, #0
 8011ddc:	d005      	beq.n	8011dea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 8011dde:	9008      	str	r0, [sp, #32]
 8011de0:	7961      	ldrb	r1, [r4, #5]
 8011de2:	a82e      	add	r0, sp, #184	; 0xb8
 8011de4:	f001 ffc4 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011de8:	9b08      	ldr	r3, [sp, #32]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d044      	beq.n	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011dee:	2b0a      	cmp	r3, #10
 8011df0:	d1eb      	bne.n	8011dca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8011df2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011df6:	445b      	add	r3, fp
 8011df8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011dfc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011e00:	eba3 030b 	sub.w	r3, r3, fp
 8011e04:	3d01      	subs	r5, #1
 8011e06:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011e0a:	e7de      	b.n	8011dca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 8011e0c:	2500      	movs	r5, #0
 8011e0e:	e7be      	b.n	8011d8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 8011e10:	0073      	lsls	r3, r6, #1
 8011e12:	9308      	str	r3, [sp, #32]
 8011e14:	2d00      	cmp	r5, #0
 8011e16:	dd32      	ble.n	8011e7e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 8011e18:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8011e1c:	9b08      	ldr	r3, [sp, #32]
 8011e1e:	428b      	cmp	r3, r1
 8011e20:	bfd4      	ite	le
 8011e22:	2100      	movle	r1, #0
 8011e24:	2101      	movgt	r1, #1
 8011e26:	a810      	add	r0, sp, #64	; 0x40
 8011e28:	f7ff fe6e 	bl	8011b08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011e2c:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 8011e30:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011e34:	fa1f fb83 	uxth.w	fp, r3
 8011e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e3c:	459b      	cmp	fp, r3
 8011e3e:	d00b      	beq.n	8011e58 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8011e40:	7961      	ldrb	r1, [r4, #5]
 8011e42:	4648      	mov	r0, r9
 8011e44:	f001 ff94 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011e48:	f1b8 0f00 	cmp.w	r8, #0
 8011e4c:	d0f0      	beq.n	8011e30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8011e4e:	7961      	ldrb	r1, [r4, #5]
 8011e50:	a82e      	add	r0, sp, #184	; 0xb8
 8011e52:	f001 ff8d 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011e56:	e7eb      	b.n	8011e30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 8011e58:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8011e5c:	b2b3      	uxth	r3, r6
 8011e5e:	441a      	add	r2, r3
 8011e60:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 8011e64:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8011e68:	1ad3      	subs	r3, r2, r3
 8011e6a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011e6e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011e72:	3d01      	subs	r5, #1
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d1cd      	bne.n	8011e14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 8011e78:	b05b      	add	sp, #364	; 0x16c
 8011e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e7e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 8011e82:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 8011e86:	7c23      	ldrb	r3, [r4, #16]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d05f      	beq.n	8011f4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 8011e8c:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 8011e90:	458b      	cmp	fp, r1
 8011e92:	bfd4      	ite	le
 8011e94:	2100      	movle	r1, #0
 8011e96:	2101      	movgt	r1, #1
 8011e98:	a810      	add	r0, sp, #64	; 0x40
 8011e9a:	f7ff fe35 	bl	8011b08 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011e9e:	f1b8 0f00 	cmp.w	r8, #0
 8011ea2:	d04c      	beq.n	8011f3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8011ea4:	7c23      	ldrb	r3, [r4, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d053      	beq.n	8011f52 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 8011eaa:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 8011eae:	7922      	ldrb	r2, [r4, #4]
 8011eb0:	2a01      	cmp	r2, #1
 8011eb2:	d13c      	bne.n	8011f2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8011eb4:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 8011eb8:	1ac0      	subs	r0, r0, r3
 8011eba:	2302      	movs	r3, #2
 8011ebc:	fb90 f0f3 	sdiv	r0, r0, r3
 8011ec0:	b200      	sxth	r0, r0
 8011ec2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011ec6:	4418      	add	r0, r3
 8011ec8:	7c23      	ldrb	r3, [r4, #16]
 8011eca:	8028      	strh	r0, [r5, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d03a      	beq.n	8011f46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 8011ed0:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 8011ed4:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 8011ed8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8011edc:	f8cd 9010 	str.w	r9, [sp, #16]
 8011ee0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8011eea:	e9cd 5700 	strd	r5, r7, [sp]
 8011eee:	4652      	mov	r2, sl
 8011ef0:	2100      	movs	r1, #0
 8011ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ef4:	f7ff fcb0 	bl	8011858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	d1bd      	bne.n	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011efc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8011f00:	b2b2      	uxth	r2, r6
 8011f02:	4611      	mov	r1, r2
 8011f04:	4413      	add	r3, r2
 8011f06:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 8011f0a:	1a52      	subs	r2, r2, r1
 8011f0c:	7c21      	ldrb	r1, [r4, #16]
 8011f0e:	b21b      	sxth	r3, r3
 8011f10:	b212      	sxth	r2, r2
 8011f12:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8011f16:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8011f1a:	b109      	cbz	r1, 8011f20 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8011f1c:	42b2      	cmp	r2, r6
 8011f1e:	dbab      	blt.n	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011f20:	887a      	ldrh	r2, [r7, #2]
 8011f22:	88f9      	ldrh	r1, [r7, #6]
 8011f24:	440a      	add	r2, r1
 8011f26:	b212      	sxth	r2, r2
 8011f28:	4293      	cmp	r3, r2
 8011f2a:	ddac      	ble.n	8011e86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 8011f2c:	e7a4      	b.n	8011e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 8011f2e:	2a02      	cmp	r2, #2
 8011f30:	d107      	bne.n	8011f42 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8011f32:	7be2      	ldrb	r2, [r4, #15]
 8011f34:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 8011f38:	1a80      	subs	r0, r0, r2
 8011f3a:	1ac0      	subs	r0, r0, r3
 8011f3c:	e7c0      	b.n	8011ec0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 8011f3e:	7be0      	ldrb	r0, [r4, #15]
 8011f40:	e7bf      	b.n	8011ec2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8011f42:	2000      	movs	r0, #0
 8011f44:	e7bd      	b.n	8011ec2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 8011f46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011f4a:	e7c3      	b.n	8011ed4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 8011f4c:	f1b8 0f00 	cmp.w	r8, #0
 8011f50:	d0f5      	beq.n	8011f3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8011f52:	2300      	movs	r3, #0
 8011f54:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011f58:	6821      	ldr	r1, [r4, #0]
 8011f5a:	a82e      	add	r0, sp, #184	; 0xb8
 8011f5c:	f7ff fbf9 	bl	8011752 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8011f60:	b203      	sxth	r3, r0
 8011f62:	e7a4      	b.n	8011eae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

08011f64 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011f64:	b510      	push	{r4, lr}
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011f6c:	d00b      	beq.n	8011f86 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8011f6e:	2b03      	cmp	r3, #3
 8011f70:	d00e      	beq.n	8011f90 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d001      	beq.n	8011f7a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8011f76:	1860      	adds	r0, r4, r1
 8011f78:	bd10      	pop	{r4, pc}
 8011f7a:	8880      	ldrh	r0, [r0, #4]
 8011f7c:	4420      	add	r0, r4
 8011f7e:	b200      	sxth	r0, r0
 8011f80:	1a80      	subs	r0, r0, r2
 8011f82:	3801      	subs	r0, #1
 8011f84:	e7f8      	b.n	8011f78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8011f86:	8880      	ldrh	r0, [r0, #4]
 8011f88:	4420      	add	r0, r4
 8011f8a:	b200      	sxth	r0, r0
 8011f8c:	1a40      	subs	r0, r0, r1
 8011f8e:	e7f8      	b.n	8011f82 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011f90:	18a0      	adds	r0, r4, r2
 8011f92:	e7f1      	b.n	8011f78 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08011f94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011f94:	b510      	push	{r4, lr}
 8011f96:	2b02      	cmp	r3, #2
 8011f98:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011f9c:	d006      	beq.n	8011fac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8011f9e:	2b03      	cmp	r3, #3
 8011fa0:	d00a      	beq.n	8011fb8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	bf14      	ite	ne
 8011fa6:	18a0      	addne	r0, r4, r2
 8011fa8:	1860      	addeq	r0, r4, r1
 8011faa:	bd10      	pop	{r4, pc}
 8011fac:	88c0      	ldrh	r0, [r0, #6]
 8011fae:	4420      	add	r0, r4
 8011fb0:	b200      	sxth	r0, r0
 8011fb2:	1a80      	subs	r0, r0, r2
 8011fb4:	3801      	subs	r0, #1
 8011fb6:	e7f8      	b.n	8011faa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8011fb8:	88c0      	ldrh	r0, [r0, #6]
 8011fba:	4420      	add	r0, r4
 8011fbc:	b200      	sxth	r0, r0
 8011fbe:	1a40      	subs	r0, r0, r1
 8011fc0:	e7f8      	b.n	8011fb4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08011fc4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011fc4:	4b01      	ldr	r3, [pc, #4]	; (8011fcc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	601a      	str	r2, [r3, #0]
 8011fca:	4770      	bx	lr
 8011fcc:	20009f04 	.word	0x20009f04

08011fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 8011fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fd2:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 8011fd6:	1e05      	subs	r5, r0, #0
 8011fd8:	bfba      	itte	lt
 8011fda:	f04f 37ff 	movlt.w	r7, #4294967295
 8011fde:	426d      	neglt	r5, r5
 8011fe0:	2701      	movge	r7, #1
 8011fe2:	f1be 0f00 	cmp.w	lr, #0
 8011fe6:	bfb8      	it	lt
 8011fe8:	f1ce 0e00 	rsblt	lr, lr, #0
 8011fec:	f04f 0601 	mov.w	r6, #1
 8011ff0:	fa4e f001 	asr.w	r0, lr, r1
 8011ff4:	fa06 f101 	lsl.w	r1, r6, r1
 8011ff8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8011ffc:	f101 31ff 	add.w	r1, r1, #4294967295
 8012000:	ea01 010e 	and.w	r1, r1, lr
 8012004:	bfb8      	it	lt
 8012006:	427f      	neglt	r7, r7
 8012008:	434d      	muls	r5, r1
 801200a:	2c00      	cmp	r4, #0
 801200c:	f8dc 1000 	ldr.w	r1, [ip]
 8012010:	bfb8      	it	lt
 8012012:	4264      	neglt	r4, r4
 8012014:	fb03 1300 	mla	r3, r3, r0, r1
 8012018:	fb95 f1f4 	sdiv	r1, r5, r4
 801201c:	fb04 5511 	mls	r5, r4, r1, r5
 8012020:	441d      	add	r5, r3
 8012022:	fb95 f3f4 	sdiv	r3, r5, r4
 8012026:	fb04 5413 	mls	r4, r4, r3, r5
 801202a:	4419      	add	r1, r3
 801202c:	bfb8      	it	lt
 801202e:	427f      	neglt	r7, r7
 8012030:	fb02 1000 	mla	r0, r2, r0, r1
 8012034:	f8cc 4000 	str.w	r4, [ip]
 8012038:	4378      	muls	r0, r7
 801203a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801203c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012040:	4c24      	ldr	r4, [pc, #144]	; (80120d4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 8012042:	6807      	ldr	r7, [r0, #0]
 8012044:	69a3      	ldr	r3, [r4, #24]
 8012046:	b086      	sub	sp, #24
 8012048:	4605      	mov	r5, r0
 801204a:	b92b      	cbnz	r3, 8012058 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801204c:	6840      	ldr	r0, [r0, #4]
 801204e:	e9c5 7000 	strd	r7, r0, [r5]
 8012052:	b006      	add	sp, #24
 8012054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012058:	68a2      	ldr	r2, [r4, #8]
 801205a:	6820      	ldr	r0, [r4, #0]
 801205c:	ae06      	add	r6, sp, #24
 801205e:	f04f 0802 	mov.w	r8, #2
 8012062:	fb93 f1f8 	sdiv	r1, r3, r8
 8012066:	440a      	add	r2, r1
 8012068:	f846 2d04 	str.w	r2, [r6, #-4]!
 801206c:	69e1      	ldr	r1, [r4, #28]
 801206e:	9700      	str	r7, [sp, #0]
 8012070:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8012074:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012078:	f7ff ffaa 	bl	8011fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801207c:	69a3      	ldr	r3, [r4, #24]
 801207e:	9301      	str	r3, [sp, #4]
 8012080:	686b      	ldr	r3, [r5, #4]
 8012082:	9300      	str	r3, [sp, #0]
 8012084:	4607      	mov	r7, r0
 8012086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012088:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801208a:	6a21      	ldr	r1, [r4, #32]
 801208c:	9602      	str	r6, [sp, #8]
 801208e:	6860      	ldr	r0, [r4, #4]
 8012090:	f7ff ff9e 	bl	8011fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 8012094:	6963      	ldr	r3, [r4, #20]
 8012096:	69a2      	ldr	r2, [r4, #24]
 8012098:	fb92 f8f8 	sdiv	r8, r2, r8
 801209c:	4443      	add	r3, r8
 801209e:	9305      	str	r3, [sp, #20]
 80120a0:	682b      	ldr	r3, [r5, #0]
 80120a2:	9300      	str	r3, [sp, #0]
 80120a4:	e9cd 2601 	strd	r2, r6, [sp, #4]
 80120a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80120aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80120ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80120ae:	4407      	add	r7, r0
 80120b0:	68e0      	ldr	r0, [r4, #12]
 80120b2:	f7ff ff8d 	bl	8011fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80120b6:	69a3      	ldr	r3, [r4, #24]
 80120b8:	9301      	str	r3, [sp, #4]
 80120ba:	686b      	ldr	r3, [r5, #4]
 80120bc:	9300      	str	r3, [sp, #0]
 80120be:	4680      	mov	r8, r0
 80120c0:	9602      	str	r6, [sp, #8]
 80120c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80120c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80120c6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80120c8:	6920      	ldr	r0, [r4, #16]
 80120ca:	f7ff ff81 	bl	8011fd0 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 80120ce:	4440      	add	r0, r8
 80120d0:	e7bd      	b.n	801204e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 80120d2:	bf00      	nop
 80120d4:	20009f08 	.word	0x20009f08

080120d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80120d8:	b510      	push	{r4, lr}
 80120da:	4b07      	ldr	r3, [pc, #28]	; (80120f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	2b01      	cmp	r3, #1
 80120e0:	d108      	bne.n	80120f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80120e2:	4b06      	ldr	r3, [pc, #24]	; (80120fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80120e4:	880c      	ldrh	r4, [r1, #0]
 80120e6:	881b      	ldrh	r3, [r3, #0]
 80120e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80120ec:	3b01      	subs	r3, #1
 80120ee:	1b1b      	subs	r3, r3, r4
 80120f0:	8003      	strh	r3, [r0, #0]
 80120f2:	800a      	strh	r2, [r1, #0]
 80120f4:	bd10      	pop	{r4, pc}
 80120f6:	bf00      	nop
 80120f8:	20009ef4 	.word	0x20009ef4
 80120fc:	20009ef8 	.word	0x20009ef8

08012100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012100:	b510      	push	{r4, lr}
 8012102:	4b0a      	ldr	r3, [pc, #40]	; (801212c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b01      	cmp	r3, #1
 8012108:	d10e      	bne.n	8012128 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801210a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801210e:	8843      	ldrh	r3, [r0, #2]
 8012110:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012114:	8044      	strh	r4, [r0, #2]
 8012116:	18ca      	adds	r2, r1, r3
 8012118:	4b05      	ldr	r3, [pc, #20]	; (8012130 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801211a:	881b      	ldrh	r3, [r3, #0]
 801211c:	1a9b      	subs	r3, r3, r2
 801211e:	8003      	strh	r3, [r0, #0]
 8012120:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012124:	80c3      	strh	r3, [r0, #6]
 8012126:	8081      	strh	r1, [r0, #4]
 8012128:	bd10      	pop	{r4, pc}
 801212a:	bf00      	nop
 801212c:	20009ef4 	.word	0x20009ef4
 8012130:	20009ef0 	.word	0x20009ef0

08012134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012134:	b510      	push	{r4, lr}
 8012136:	4b07      	ldr	r3, [pc, #28]	; (8012154 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8012138:	781b      	ldrb	r3, [r3, #0]
 801213a:	2b01      	cmp	r3, #1
 801213c:	d108      	bne.n	8012150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801213e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012142:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012146:	8003      	strh	r3, [r0, #0]
 8012148:	8893      	ldrh	r3, [r2, #4]
 801214a:	3b01      	subs	r3, #1
 801214c:	1b1b      	subs	r3, r3, r4
 801214e:	800b      	strh	r3, [r1, #0]
 8012150:	bd10      	pop	{r4, pc}
 8012152:	bf00      	nop
 8012154:	20009ef4 	.word	0x20009ef4

08012158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012158:	b513      	push	{r0, r1, r4, lr}
 801215a:	4b08      	ldr	r3, [pc, #32]	; (801217c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801215c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012160:	4b07      	ldr	r3, [pc, #28]	; (8012180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 8012162:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012166:	f9b3 3000 	ldrsh.w	r3, [r3]
 801216a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801216e:	2400      	movs	r4, #0
 8012170:	466a      	mov	r2, sp
 8012172:	9400      	str	r4, [sp, #0]
 8012174:	f7ff ffde 	bl	8012134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012178:	b002      	add	sp, #8
 801217a:	bd10      	pop	{r4, pc}
 801217c:	20009ef0 	.word	0x20009ef0
 8012180:	20009ef2 	.word	0x20009ef2

08012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012184:	b510      	push	{r4, lr}
 8012186:	4b0a      	ldr	r3, [pc, #40]	; (80121b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	2b01      	cmp	r3, #1
 801218c:	460a      	mov	r2, r1
 801218e:	d10d      	bne.n	80121ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012190:	8881      	ldrh	r1, [r0, #4]
 8012192:	8803      	ldrh	r3, [r0, #0]
 8012194:	440b      	add	r3, r1
 8012196:	4601      	mov	r1, r0
 8012198:	3b01      	subs	r3, #1
 801219a:	f821 3b02 	strh.w	r3, [r1], #2
 801219e:	f7ff ffc9 	bl	8012134 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80121a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80121a6:	88c2      	ldrh	r2, [r0, #6]
 80121a8:	8082      	strh	r2, [r0, #4]
 80121aa:	80c3      	strh	r3, [r0, #6]
 80121ac:	bd10      	pop	{r4, pc}
 80121ae:	bf00      	nop
 80121b0:	20009ef4 	.word	0x20009ef4

080121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80121b4:	b507      	push	{r0, r1, r2, lr}
 80121b6:	4b09      	ldr	r3, [pc, #36]	; (80121dc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80121b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80121bc:	4b08      	ldr	r3, [pc, #32]	; (80121e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 80121be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80121c2:	2100      	movs	r1, #0
 80121c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80121c8:	9100      	str	r1, [sp, #0]
 80121ca:	4669      	mov	r1, sp
 80121cc:	f8ad 3006 	strh.w	r3, [sp, #6]
 80121d0:	f7ff ffd8 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80121d4:	b003      	add	sp, #12
 80121d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80121da:	bf00      	nop
 80121dc:	20009ef0 	.word	0x20009ef0
 80121e0:	20009ef2 	.word	0x20009ef2

080121e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80121e4:	4b03      	ldr	r3, [pc, #12]	; (80121f4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80121e6:	6818      	ldr	r0, [r3, #0]
 80121e8:	b110      	cbz	r0, 80121f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80121ea:	6803      	ldr	r3, [r0, #0]
 80121ec:	699b      	ldr	r3, [r3, #24]
 80121ee:	4718      	bx	r3
 80121f0:	4770      	bx	lr
 80121f2:	bf00      	nop
 80121f4:	20009f58 	.word	0x20009f58

080121f8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80121f8:	4770      	bx	lr
	...

080121fc <_ZN8touchgfx11Application4drawEv>:
 80121fc:	b507      	push	{r0, r1, r2, lr}
 80121fe:	4b09      	ldr	r3, [pc, #36]	; (8012224 <_ZN8touchgfx11Application4drawEv+0x28>)
 8012200:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012204:	4b08      	ldr	r3, [pc, #32]	; (8012228 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012206:	f8ad 2004 	strh.w	r2, [sp, #4]
 801220a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801220e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012212:	6803      	ldr	r3, [r0, #0]
 8012214:	2100      	movs	r1, #0
 8012216:	9100      	str	r1, [sp, #0]
 8012218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801221a:	4669      	mov	r1, sp
 801221c:	4798      	blx	r3
 801221e:	b003      	add	sp, #12
 8012220:	f85d fb04 	ldr.w	pc, [sp], #4
 8012224:	20009ef0 	.word	0x20009ef0
 8012228:	20009ef2 	.word	0x20009ef2

0801222c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801222c:	4b03      	ldr	r3, [pc, #12]	; (801223c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801222e:	6818      	ldr	r0, [r3, #0]
 8012230:	b110      	cbz	r0, 8012238 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012232:	6803      	ldr	r3, [r0, #0]
 8012234:	69db      	ldr	r3, [r3, #28]
 8012236:	4718      	bx	r3
 8012238:	4770      	bx	lr
 801223a:	bf00      	nop
 801223c:	20009f58 	.word	0x20009f58

08012240 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012240:	4b03      	ldr	r3, [pc, #12]	; (8012250 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012242:	6818      	ldr	r0, [r3, #0]
 8012244:	b110      	cbz	r0, 801224c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8012246:	6803      	ldr	r3, [r0, #0]
 8012248:	6a1b      	ldr	r3, [r3, #32]
 801224a:	4718      	bx	r3
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	20009f58 	.word	0x20009f58

08012254 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012254:	4b03      	ldr	r3, [pc, #12]	; (8012264 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8012256:	6818      	ldr	r0, [r3, #0]
 8012258:	b110      	cbz	r0, 8012260 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801225a:	6803      	ldr	r3, [r0, #0]
 801225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801225e:	4718      	bx	r3
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop
 8012264:	20009f58 	.word	0x20009f58

08012268 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801226c:	4d3a      	ldr	r5, [pc, #232]	; (8012358 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801226e:	4604      	mov	r4, r0
 8012270:	6828      	ldr	r0, [r5, #0]
 8012272:	b140      	cbz	r0, 8012286 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8012274:	7a03      	ldrb	r3, [r0, #8]
 8012276:	b933      	cbnz	r3, 8012286 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8012278:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801227c:	6803      	ldr	r3, [r0, #0]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012284:	4718      	bx	r3
 8012286:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801228a:	b97b      	cbnz	r3, 80122ac <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801228c:	b170      	cbz	r0, 80122ac <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801228e:	7a03      	ldrb	r3, [r0, #8]
 8012290:	b163      	cbz	r3, 80122ac <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8012292:	4b32      	ldr	r3, [pc, #200]	; (801235c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8012294:	6818      	ldr	r0, [r3, #0]
 8012296:	b110      	cbz	r0, 801229e <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8012298:	6803      	ldr	r3, [r0, #0]
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	4798      	blx	r3
 801229e:	6828      	ldr	r0, [r5, #0]
 80122a0:	6803      	ldr	r3, [r0, #0]
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	4798      	blx	r3
 80122a6:	2301      	movs	r3, #1
 80122a8:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 80122ac:	2500      	movs	r5, #0
 80122ae:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 80122b2:	42a8      	cmp	r0, r5
 80122b4:	dd0c      	ble.n	80122d0 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 80122b6:	1963      	adds	r3, r4, r5
 80122b8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80122bc:	b132      	cbz	r2, 80122cc <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 80122be:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80122c2:	4413      	add	r3, r2
 80122c4:	6858      	ldr	r0, [r3, #4]
 80122c6:	6803      	ldr	r3, [r0, #0]
 80122c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122ca:	4798      	blx	r3
 80122cc:	3501      	adds	r5, #1
 80122ce:	e7ee      	b.n	80122ae <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 80122d0:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 80122d4:	3801      	subs	r0, #1
 80122d6:	3678      	adds	r6, #120	; 0x78
 80122d8:	f04f 0c00 	mov.w	ip, #0
 80122dc:	1c43      	adds	r3, r0, #1
 80122de:	d033      	beq.n	8012348 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80122e0:	1823      	adds	r3, r4, r0
 80122e2:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80122e6:	bb6a      	cbnz	r2, 8012344 <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80122e8:	b281      	uxth	r1, r0
 80122ea:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80122ee:	1d25      	adds	r5, r4, #4
 80122f0:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80122f4:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80122f8:	4293      	cmp	r3, r2
 80122fa:	dc0a      	bgt.n	8012312 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80122fc:	f101 0288 	add.w	r2, r1, #136	; 0x88
 8012300:	4422      	add	r2, r4
 8012302:	18b1      	adds	r1, r6, r2
 8012304:	b289      	uxth	r1, r1
 8012306:	428b      	cmp	r3, r1
 8012308:	d919      	bls.n	801233e <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 801230a:	7851      	ldrb	r1, [r2, #1]
 801230c:	f802 1b01 	strb.w	r1, [r2], #1
 8012310:	e7f7      	b.n	8012302 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8012312:	682f      	ldr	r7, [r5, #0]
 8012314:	45b9      	cmp	r9, r7
 8012316:	f105 0804 	add.w	r8, r5, #4
 801231a:	d10d      	bne.n	8012338 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801231c:	4696      	mov	lr, r2
 801231e:	f1be 0f1e 	cmp.w	lr, #30
 8012322:	dc06      	bgt.n	8012332 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8012324:	f10e 0e01 	add.w	lr, lr, #1
 8012328:	686f      	ldr	r7, [r5, #4]
 801232a:	f845 7b04 	str.w	r7, [r5], #4
 801232e:	4573      	cmp	r3, lr
 8012330:	dcf5      	bgt.n	801231e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8012332:	3b01      	subs	r3, #1
 8012334:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8012338:	3201      	adds	r2, #1
 801233a:	4645      	mov	r5, r8
 801233c:	e7da      	b.n	80122f4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801233e:	4423      	add	r3, r4
 8012340:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 8012344:	3801      	subs	r0, #1
 8012346:	e7c9      	b.n	80122dc <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8012348:	4b04      	ldr	r3, [pc, #16]	; (801235c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801234a:	6818      	ldr	r0, [r3, #0]
 801234c:	b110      	cbz	r0, 8012354 <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 801234e:	6803      	ldr	r3, [r0, #0]
 8012350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012352:	e795      	b.n	8012280 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 8012354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012358:	20009f5c 	.word	0x20009f5c
 801235c:	20009f58 	.word	0x20009f58

08012360 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012360:	b570      	push	{r4, r5, r6, lr}
 8012362:	4606      	mov	r6, r0
 8012364:	460c      	mov	r4, r1
 8012366:	b929      	cbnz	r1, 8012374 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8012368:	4b0c      	ldr	r3, [pc, #48]	; (801239c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801236a:	4a0d      	ldr	r2, [pc, #52]	; (80123a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801236c:	480d      	ldr	r0, [pc, #52]	; (80123a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801236e:	2164      	movs	r1, #100	; 0x64
 8012370:	f00d fe2a 	bl	801ffc8 <__assert_func>
 8012374:	4d0c      	ldr	r5, [pc, #48]	; (80123a8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8012376:	2300      	movs	r3, #0
 8012378:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801237c:	6828      	ldr	r0, [r5, #0]
 801237e:	b110      	cbz	r0, 8012386 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8012380:	6803      	ldr	r3, [r0, #0]
 8012382:	695b      	ldr	r3, [r3, #20]
 8012384:	4798      	blx	r3
 8012386:	602c      	str	r4, [r5, #0]
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	4620      	mov	r0, r4
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	4798      	blx	r3
 8012390:	6833      	ldr	r3, [r6, #0]
 8012392:	4630      	mov	r0, r6
 8012394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801239a:	4718      	bx	r3
 801239c:	08022df0 	.word	0x08022df0
 80123a0:	08022eb8 	.word	0x08022eb8
 80123a4:	08022dfa 	.word	0x08022dfa
 80123a8:	20009f58 	.word	0x20009f58

080123ac <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80123ac:	b510      	push	{r4, lr}
 80123ae:	f9b1 4000 	ldrsh.w	r4, [r1]
 80123b2:	888a      	ldrh	r2, [r1, #4]
 80123b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80123b8:	4422      	add	r2, r4
 80123ba:	b212      	sxth	r2, r2
 80123bc:	4293      	cmp	r3, r2
 80123be:	da15      	bge.n	80123ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80123c0:	8882      	ldrh	r2, [r0, #4]
 80123c2:	4413      	add	r3, r2
 80123c4:	b21b      	sxth	r3, r3
 80123c6:	429c      	cmp	r4, r3
 80123c8:	da10      	bge.n	80123ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80123ca:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80123ce:	88c9      	ldrh	r1, [r1, #6]
 80123d0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80123d4:	4419      	add	r1, r3
 80123d6:	b209      	sxth	r1, r1
 80123d8:	428a      	cmp	r2, r1
 80123da:	da07      	bge.n	80123ec <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80123dc:	88c0      	ldrh	r0, [r0, #6]
 80123de:	4410      	add	r0, r2
 80123e0:	b200      	sxth	r0, r0
 80123e2:	4283      	cmp	r3, r0
 80123e4:	bfac      	ite	ge
 80123e6:	2000      	movge	r0, #0
 80123e8:	2001      	movlt	r0, #1
 80123ea:	bd10      	pop	{r4, pc}
 80123ec:	2000      	movs	r0, #0
 80123ee:	e7fc      	b.n	80123ea <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080123f0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80123f0:	b570      	push	{r4, r5, r6, lr}
 80123f2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80123f6:	f9b0 5000 	ldrsh.w	r5, [r0]
 80123fa:	42ac      	cmp	r4, r5
 80123fc:	db18      	blt.n	8012430 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80123fe:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8012402:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012406:	429a      	cmp	r2, r3
 8012408:	db12      	blt.n	8012430 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801240a:	8886      	ldrh	r6, [r0, #4]
 801240c:	4435      	add	r5, r6
 801240e:	888e      	ldrh	r6, [r1, #4]
 8012410:	4434      	add	r4, r6
 8012412:	b22d      	sxth	r5, r5
 8012414:	b224      	sxth	r4, r4
 8012416:	42a5      	cmp	r5, r4
 8012418:	db0a      	blt.n	8012430 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801241a:	88c0      	ldrh	r0, [r0, #6]
 801241c:	4418      	add	r0, r3
 801241e:	88cb      	ldrh	r3, [r1, #6]
 8012420:	441a      	add	r2, r3
 8012422:	b200      	sxth	r0, r0
 8012424:	b212      	sxth	r2, r2
 8012426:	4290      	cmp	r0, r2
 8012428:	bfb4      	ite	lt
 801242a:	2000      	movlt	r0, #0
 801242c:	2001      	movge	r0, #1
 801242e:	bd70      	pop	{r4, r5, r6, pc}
 8012430:	2000      	movs	r0, #0
 8012432:	e7fc      	b.n	801242e <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

08012434 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012436:	4604      	mov	r4, r0
 8012438:	4608      	mov	r0, r1
 801243a:	460d      	mov	r5, r1
 801243c:	f7fd fec2 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012440:	b978      	cbnz	r0, 8012462 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012442:	4620      	mov	r0, r4
 8012444:	f7fd febe 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012448:	f9b5 6000 	ldrsh.w	r6, [r5]
 801244c:	b150      	cbz	r0, 8012464 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801244e:	8026      	strh	r6, [r4, #0]
 8012450:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012454:	8063      	strh	r3, [r4, #2]
 8012456:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801245a:	80a3      	strh	r3, [r4, #4]
 801245c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012460:	80e3      	strh	r3, [r4, #6]
 8012462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012464:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012468:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801246c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012470:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012474:	88ed      	ldrh	r5, [r5, #6]
 8012476:	42b1      	cmp	r1, r6
 8012478:	460f      	mov	r7, r1
 801247a:	bfa8      	it	ge
 801247c:	4637      	movge	r7, r6
 801247e:	4293      	cmp	r3, r2
 8012480:	4618      	mov	r0, r3
 8012482:	4466      	add	r6, ip
 8012484:	bfa8      	it	ge
 8012486:	4610      	movge	r0, r2
 8012488:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801248c:	8027      	strh	r7, [r4, #0]
 801248e:	442a      	add	r2, r5
 8012490:	88e5      	ldrh	r5, [r4, #6]
 8012492:	8060      	strh	r0, [r4, #2]
 8012494:	4461      	add	r1, ip
 8012496:	442b      	add	r3, r5
 8012498:	b236      	sxth	r6, r6
 801249a:	b209      	sxth	r1, r1
 801249c:	b212      	sxth	r2, r2
 801249e:	b21b      	sxth	r3, r3
 80124a0:	428e      	cmp	r6, r1
 80124a2:	bfac      	ite	ge
 80124a4:	ebc7 0106 	rsbge	r1, r7, r6
 80124a8:	ebc7 0101 	rsblt	r1, r7, r1
 80124ac:	429a      	cmp	r2, r3
 80124ae:	bfac      	ite	ge
 80124b0:	ebc0 0202 	rsbge	r2, r0, r2
 80124b4:	ebc0 0203 	rsblt	r2, r0, r3
 80124b8:	80a1      	strh	r1, [r4, #4]
 80124ba:	80e2      	strh	r2, [r4, #6]
 80124bc:	e7d1      	b.n	8012462 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080124c0 <_ZN8touchgfx11Application11getInstanceEv>:
 80124c0:	4b01      	ldr	r3, [pc, #4]	; (80124c8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80124c2:	6818      	ldr	r0, [r3, #0]
 80124c4:	4770      	bx	lr
 80124c6:	bf00      	nop
 80124c8:	20009f68 	.word	0x20009f68

080124cc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 80124cc:	2300      	movs	r3, #0
 80124ce:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80124d2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 80124d6:	30a8      	adds	r0, #168	; 0xa8
 80124d8:	f802 3b01 	strb.w	r3, [r2], #1
 80124dc:	4282      	cmp	r2, r0
 80124de:	d1fb      	bne.n	80124d8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 80124e0:	4770      	bx	lr

080124e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80124e2:	4603      	mov	r3, r0
 80124e4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80124e8:	2200      	movs	r2, #0
 80124ea:	801a      	strh	r2, [r3, #0]
 80124ec:	805a      	strh	r2, [r3, #2]
 80124ee:	809a      	strh	r2, [r3, #4]
 80124f0:	80da      	strh	r2, [r3, #6]
 80124f2:	3308      	adds	r3, #8
 80124f4:	428b      	cmp	r3, r1
 80124f6:	d1f8      	bne.n	80124ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80124f8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80124fc:	4770      	bx	lr
	...

08012500 <_ZN8touchgfx11ApplicationC1Ev>:
 8012500:	b570      	push	{r4, r5, r6, lr}
 8012502:	4b16      	ldr	r3, [pc, #88]	; (801255c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 8012504:	6003      	str	r3, [r0, #0]
 8012506:	2500      	movs	r5, #0
 8012508:	4604      	mov	r4, r0
 801250a:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801250e:	30a8      	adds	r0, #168	; 0xa8
 8012510:	f7ff ffe7 	bl	80124e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012514:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8012518:	f7ff ffe3 	bl	80124e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801251c:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 8012520:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 8012524:	490e      	ldr	r1, [pc, #56]	; (8012560 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 8012526:	480f      	ldr	r0, [pc, #60]	; (8012564 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 8012528:	4e0f      	ldr	r6, [pc, #60]	; (8012568 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801252a:	f00d fc1b 	bl	801fd64 <CRC_Lock>
 801252e:	4b0f      	ldr	r3, [pc, #60]	; (801256c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8012530:	b158      	cbz	r0, 801254a <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 8012532:	801d      	strh	r5, [r3, #0]
 8012534:	4a0e      	ldr	r2, [pc, #56]	; (8012570 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8012536:	2300      	movs	r3, #0
 8012538:	6013      	str	r3, [r2, #0]
 801253a:	4a0e      	ldr	r2, [pc, #56]	; (8012574 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801253c:	6033      	str	r3, [r6, #0]
 801253e:	4620      	mov	r0, r4
 8012540:	6013      	str	r3, [r2, #0]
 8012542:	f7ff ffc3 	bl	80124cc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8012546:	4620      	mov	r0, r4
 8012548:	bd70      	pop	{r4, r5, r6, pc}
 801254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801254e:	2002      	movs	r0, #2
 8012550:	801a      	strh	r2, [r3, #0]
 8012552:	6030      	str	r0, [r6, #0]
 8012554:	f000 ff24 	bl	80133a0 <_ZN8touchgfx6Screen4drawEv>
 8012558:	e7ec      	b.n	8012534 <_ZN8touchgfx11ApplicationC1Ev+0x34>
 801255a:	bf00      	nop
 801255c:	08022e84 	.word	0x08022e84
 8012560:	b5e8b5cd 	.word	0xb5e8b5cd
 8012564:	f407a5c2 	.word	0xf407a5c2
 8012568:	20009f58 	.word	0x20009f58
 801256c:	20000094 	.word	0x20000094
 8012570:	20009f68 	.word	0x20009f68
 8012574:	20009f5c 	.word	0x20009f5c

08012578 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012578:	2300      	movs	r3, #0
 801257a:	8003      	strh	r3, [r0, #0]
 801257c:	8043      	strh	r3, [r0, #2]
 801257e:	8083      	strh	r3, [r0, #4]
 8012580:	80c3      	strh	r3, [r0, #6]
 8012582:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 8012586:	4293      	cmp	r3, r2
 8012588:	b530      	push	{r4, r5, lr}
 801258a:	d912      	bls.n	80125b2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801258c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8012590:	3b01      	subs	r3, #1
 8012592:	6825      	ldr	r5, [r4, #0]
 8012594:	6005      	str	r5, [r0, #0]
 8012596:	b29b      	uxth	r3, r3
 8012598:	6865      	ldr	r5, [r4, #4]
 801259a:	6045      	str	r5, [r0, #4]
 801259c:	4293      	cmp	r3, r2
 801259e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 80125a2:	d906      	bls.n	80125b2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 80125a4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80125a8:	681d      	ldr	r5, [r3, #0]
 80125aa:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 80125ae:	685d      	ldr	r5, [r3, #4]
 80125b0:	6065      	str	r5, [r4, #4]
 80125b2:	bd30      	pop	{r4, r5, pc}

080125b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 80125b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80125b6:	466b      	mov	r3, sp
 80125b8:	e883 0006 	stmia.w	r3, {r1, r2}
 80125bc:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 80125c0:	2a07      	cmp	r2, #7
 80125c2:	4604      	mov	r4, r0
 80125c4:	d906      	bls.n	80125d4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 80125c6:	4b09      	ldr	r3, [pc, #36]	; (80125ec <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 80125c8:	4a09      	ldr	r2, [pc, #36]	; (80125f0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 80125ca:	480a      	ldr	r0, [pc, #40]	; (80125f4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 80125cc:	f44f 7102 	mov.w	r1, #520	; 0x208
 80125d0:	f00d fcfa 	bl	801ffc8 <__assert_func>
 80125d4:	1c51      	adds	r1, r2, #1
 80125d6:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80125da:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 80125de:	cb03      	ldmia	r3!, {r0, r1}
 80125e0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 80125e4:	6069      	str	r1, [r5, #4]
 80125e6:	b003      	add	sp, #12
 80125e8:	bd30      	pop	{r4, r5, pc}
 80125ea:	bf00      	nop
 80125ec:	08022e24 	.word	0x08022e24
 80125f0:	08022efc 	.word	0x08022efc
 80125f4:	08022e53 	.word	0x08022e53

080125f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80125f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80125fc:	b089      	sub	sp, #36	; 0x24
 80125fe:	466c      	mov	r4, sp
 8012600:	4606      	mov	r6, r0
 8012602:	4620      	mov	r0, r4
 8012604:	e884 0006 	stmia.w	r4, {r1, r2}
 8012608:	f7fd fddc 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801260c:	bbb0      	cbnz	r0, 801267c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801260e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 8012612:	b1fd      	cbz	r5, 8012654 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 8012614:	3d01      	subs	r5, #1
 8012616:	af04      	add	r7, sp, #16
 8012618:	f04f 090a 	mov.w	r9, #10
 801261c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 8012620:	ab02      	add	r3, sp, #8
 8012622:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8012626:	6851      	ldr	r1, [r2, #4]
 8012628:	c303      	stmia	r3!, {r0, r1}
 801262a:	4621      	mov	r1, r4
 801262c:	a802      	add	r0, sp, #8
 801262e:	fa1f f885 	uxth.w	r8, r5
 8012632:	f7ff fedd 	bl	80123f0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012636:	bb08      	cbnz	r0, 801267c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 8012638:	a902      	add	r1, sp, #8
 801263a:	4620      	mov	r0, r4
 801263c:	f7ff fed8 	bl	80123f0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012640:	b1f8      	cbz	r0, 8012682 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 8012642:	4642      	mov	r2, r8
 8012644:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8012648:	a806      	add	r0, sp, #24
 801264a:	f7ff ff95 	bl	8012578 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801264e:	f115 35ff 	adds.w	r5, r5, #4294967295
 8012652:	d2e3      	bcs.n	801261c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 8012654:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8012658:	2b08      	cmp	r3, #8
 801265a:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801265e:	d108      	bne.n	8012672 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012660:	4629      	mov	r1, r5
 8012662:	a806      	add	r0, sp, #24
 8012664:	2207      	movs	r2, #7
 8012666:	f7ff ff87 	bl	8012578 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801266a:	a906      	add	r1, sp, #24
 801266c:	4620      	mov	r0, r4
 801266e:	f7ff fee1 	bl	8012434 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012672:	e894 0006 	ldmia.w	r4, {r1, r2}
 8012676:	4628      	mov	r0, r5
 8012678:	f7ff ff9c 	bl	80125b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801267c:	b009      	add	sp, #36	; 0x24
 801267e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012682:	4621      	mov	r1, r4
 8012684:	a802      	add	r0, sp, #8
 8012686:	f7ff fe91 	bl	80123ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 801268a:	b150      	cbz	r0, 80126a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801268c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8012690:	a806      	add	r0, sp, #24
 8012692:	4642      	mov	r2, r8
 8012694:	f7ff ff70 	bl	8012578 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012698:	a902      	add	r1, sp, #8
 801269a:	4620      	mov	r0, r4
 801269c:	f7ff feca 	bl	8012434 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80126a0:	e7d5      	b.n	801264e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80126a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80126a6:	e887 0003 	stmia.w	r7, {r0, r1}
 80126aa:	a902      	add	r1, sp, #8
 80126ac:	4638      	mov	r0, r7
 80126ae:	f7ff fec1 	bl	8012434 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80126b2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80126b6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80126ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80126be:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80126c2:	fb13 f302 	smulbb	r3, r3, r2
 80126c6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80126ca:	fb11 f102 	smulbb	r1, r1, r2
 80126ce:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80126d2:	fb12 1100 	smlabb	r1, r2, r0, r1
 80126d6:	220b      	movs	r2, #11
 80126d8:	fb09 f303 	mul.w	r3, r9, r3
 80126dc:	434a      	muls	r2, r1
 80126de:	4293      	cmp	r3, r2
 80126e0:	dab5      	bge.n	801264e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80126e2:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 80126e6:	a806      	add	r0, sp, #24
 80126e8:	4642      	mov	r2, r8
 80126ea:	f7ff ff45 	bl	8012578 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80126ee:	e897 0003 	ldmia.w	r7, {r0, r1}
 80126f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80126f6:	e7aa      	b.n	801264e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080126f8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80126f8:	b530      	push	{r4, r5, lr}
 80126fa:	4b1d      	ldr	r3, [pc, #116]	; (8012770 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80126fc:	b085      	sub	sp, #20
 80126fe:	460c      	mov	r4, r1
 8012700:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012704:	4b1b      	ldr	r3, [pc, #108]	; (8012774 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 8012706:	f8ad 2004 	strh.w	r2, [sp, #4]
 801270a:	2100      	movs	r1, #0
 801270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012710:	9100      	str	r1, [sp, #0]
 8012712:	4605      	mov	r5, r0
 8012714:	6861      	ldr	r1, [r4, #4]
 8012716:	6820      	ldr	r0, [r4, #0]
 8012718:	f8ad 3006 	strh.w	r3, [sp, #6]
 801271c:	ab02      	add	r3, sp, #8
 801271e:	c303      	stmia	r3!, {r0, r1}
 8012720:	4669      	mov	r1, sp
 8012722:	a802      	add	r0, sp, #8
 8012724:	f7fd fd0a 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8012728:	ab02      	add	r3, sp, #8
 801272a:	cb03      	ldmia	r3!, {r0, r1}
 801272c:	4b12      	ldr	r3, [pc, #72]	; (8012778 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801272e:	6020      	str	r0, [r4, #0]
 8012730:	6818      	ldr	r0, [r3, #0]
 8012732:	6061      	str	r1, [r4, #4]
 8012734:	b138      	cbz	r0, 8012746 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8012736:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801273a:	b133      	cbz	r3, 801274a <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801273c:	6821      	ldr	r1, [r4, #0]
 801273e:	6862      	ldr	r2, [r4, #4]
 8012740:	4628      	mov	r0, r5
 8012742:	f7ff ff59 	bl	80125f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012746:	b005      	add	sp, #20
 8012748:	bd30      	pop	{r4, r5, pc}
 801274a:	6803      	ldr	r3, [r0, #0]
 801274c:	4621      	mov	r1, r4
 801274e:	689b      	ldr	r3, [r3, #8]
 8012750:	4798      	blx	r3
 8012752:	4b0a      	ldr	r3, [pc, #40]	; (801277c <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 8012754:	6818      	ldr	r0, [r3, #0]
 8012756:	b118      	cbz	r0, 8012760 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8012758:	6803      	ldr	r3, [r0, #0]
 801275a:	4621      	mov	r1, r4
 801275c:	689b      	ldr	r3, [r3, #8]
 801275e:	4798      	blx	r3
 8012760:	4b07      	ldr	r3, [pc, #28]	; (8012780 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 8012762:	6818      	ldr	r0, [r3, #0]
 8012764:	6803      	ldr	r3, [r0, #0]
 8012766:	4621      	mov	r1, r4
 8012768:	695b      	ldr	r3, [r3, #20]
 801276a:	4798      	blx	r3
 801276c:	e7eb      	b.n	8012746 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801276e:	bf00      	nop
 8012770:	20009ef0 	.word	0x20009ef0
 8012774:	20009ef2 	.word	0x20009ef2
 8012778:	20009f58 	.word	0x20009f58
 801277c:	20009f54 	.word	0x20009f54
 8012780:	20009efc 	.word	0x20009efc

08012784 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 8012784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012788:	4604      	mov	r4, r0
 801278a:	b09b      	sub	sp, #108	; 0x6c
 801278c:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8012790:	b129      	cbz	r1, 801279e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 8012792:	2300      	movs	r3, #0
 8012794:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8012798:	b01b      	add	sp, #108	; 0x6c
 801279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801279e:	4baf      	ldr	r3, [pc, #700]	; (8012a5c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	b33b      	cbz	r3, 80127f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80127a4:	4dae      	ldr	r5, [pc, #696]	; (8012a60 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 80127a6:	4628      	mov	r0, r5
 80127a8:	f7fd fd0c 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80127ac:	4606      	mov	r6, r0
 80127ae:	bb08      	cbnz	r0, 80127f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 80127b0:	4628      	mov	r0, r5
 80127b2:	f7ff fca5 	bl	8012100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80127b6:	6829      	ldr	r1, [r5, #0]
 80127b8:	686a      	ldr	r2, [r5, #4]
 80127ba:	4620      	mov	r0, r4
 80127bc:	f7ff ff1c 	bl	80125f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80127c0:	802e      	strh	r6, [r5, #0]
 80127c2:	806e      	strh	r6, [r5, #2]
 80127c4:	80ae      	strh	r6, [r5, #4]
 80127c6:	80ee      	strh	r6, [r5, #6]
 80127c8:	4fa6      	ldr	r7, [pc, #664]	; (8012a64 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 80127ca:	a809      	add	r0, sp, #36	; 0x24
 80127cc:	f7ff fe89 	bl	80124e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80127d0:	883d      	ldrh	r5, [r7, #0]
 80127d2:	462e      	mov	r6, r5
 80127d4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80127d8:	42b3      	cmp	r3, r6
 80127da:	d910      	bls.n	80127fe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 80127dc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80127e0:	a809      	add	r0, sp, #36	; 0x24
 80127e2:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80127e6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80127ea:	3601      	adds	r6, #1
 80127ec:	f7ff fee2 	bl	80125b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80127f0:	b2b6      	uxth	r6, r6
 80127f2:	e7ef      	b.n	80127d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 80127f4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d1e5      	bne.n	80127c8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 80127fc:	e7cc      	b.n	8012798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80127fe:	462e      	mov	r6, r5
 8012800:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8012804:	42b3      	cmp	r3, r6
 8012806:	d90b      	bls.n	8012820 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 8012808:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801280c:	4620      	mov	r0, r4
 801280e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8012812:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8012816:	3601      	adds	r6, #1
 8012818:	f7ff feee 	bl	80125f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801281c:	b2b6      	uxth	r6, r6
 801281e:	e7ef      	b.n	8012800 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 8012820:	4e91      	ldr	r6, [pc, #580]	; (8012a68 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 8012822:	6833      	ldr	r3, [r6, #0]
 8012824:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012828:	2b01      	cmp	r3, #1
 801282a:	f040 8092 	bne.w	8012952 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801282e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8012832:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 8012836:	33aa      	adds	r3, #170	; 0xaa
 8012838:	f04f 0900 	mov.w	r9, #0
 801283c:	42a8      	cmp	r0, r5
 801283e:	f103 0308 	add.w	r3, r3, #8
 8012842:	dd0a      	ble.n	801285a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 8012844:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8012848:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801284c:	440a      	add	r2, r1
 801284e:	b212      	sxth	r2, r2
 8012850:	4591      	cmp	r9, r2
 8012852:	bfb8      	it	lt
 8012854:	4691      	movlt	r9, r2
 8012856:	3501      	adds	r5, #1
 8012858:	e7f0      	b.n	801283c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 801285a:	4b84      	ldr	r3, [pc, #528]	; (8012a6c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801285c:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8012a74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8012860:	881d      	ldrh	r5, [r3, #0]
 8012862:	2300      	movs	r3, #0
 8012864:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012868:	2d0f      	cmp	r5, #15
 801286a:	bf8c      	ite	hi
 801286c:	08ed      	lsrhi	r5, r5, #3
 801286e:	2501      	movls	r5, #1
 8012870:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012874:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8012878:	6830      	ldr	r0, [r6, #0]
 801287a:	440b      	add	r3, r1
 801287c:	b21b      	sxth	r3, r3
 801287e:	4599      	cmp	r9, r3
 8012880:	6802      	ldr	r2, [r0, #0]
 8012882:	dd49      	ble.n	8012918 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 8012884:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8012888:	4798      	blx	r3
 801288a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801288e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012892:	4413      	add	r3, r2
 8012894:	b21b      	sxth	r3, r3
 8012896:	195a      	adds	r2, r3, r5
 8012898:	4290      	cmp	r0, r2
 801289a:	da07      	bge.n	80128ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 801289c:	4581      	cmp	r9, r0
 801289e:	dd05      	ble.n	80128ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 80128a0:	4298      	cmp	r0, r3
 80128a2:	da33      	bge.n	801290c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	dd31      	ble.n	801290c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 80128a8:	4648      	mov	r0, r9
 80128aa:	e004      	b.n	80128b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 80128ac:	4298      	cmp	r0, r3
 80128ae:	dbfb      	blt.n	80128a8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 80128b0:	4548      	cmp	r0, r9
 80128b2:	bfa8      	it	ge
 80128b4:	4648      	movge	r0, r9
 80128b6:	f9b8 2000 	ldrsh.w	r2, [r8]
 80128ba:	f8b7 a000 	ldrh.w	sl, [r7]
 80128be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80128c2:	2100      	movs	r1, #0
 80128c4:	1ac0      	subs	r0, r0, r3
 80128c6:	f8ad 1014 	strh.w	r1, [sp, #20]
 80128ca:	f8ad 2018 	strh.w	r2, [sp, #24]
 80128ce:	f8ad 001a 	strh.w	r0, [sp, #26]
 80128d2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80128d6:	4553      	cmp	r3, sl
 80128d8:	d9ca      	bls.n	8012870 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80128da:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 80128de:	ab07      	add	r3, sp, #28
 80128e0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80128e4:	6851      	ldr	r1, [r2, #4]
 80128e6:	c303      	stmia	r3!, {r0, r1}
 80128e8:	a807      	add	r0, sp, #28
 80128ea:	a905      	add	r1, sp, #20
 80128ec:	f7fd fc26 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 80128f0:	a807      	add	r0, sp, #28
 80128f2:	f7fd fc67 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 80128f6:	b920      	cbnz	r0, 8012902 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 80128f8:	6823      	ldr	r3, [r4, #0]
 80128fa:	a907      	add	r1, sp, #28
 80128fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128fe:	4620      	mov	r0, r4
 8012900:	4798      	blx	r3
 8012902:	f10a 0a01 	add.w	sl, sl, #1
 8012906:	fa1f fa8a 	uxth.w	sl, sl
 801290a:	e7e2      	b.n	80128d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 801290c:	6830      	ldr	r0, [r6, #0]
 801290e:	6803      	ldr	r3, [r0, #0]
 8012910:	2101      	movs	r1, #1
 8012912:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012914:	4798      	blx	r3
 8012916:	e7ab      	b.n	8012870 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8012918:	69d3      	ldr	r3, [r2, #28]
 801291a:	4798      	blx	r3
 801291c:	4b54      	ldr	r3, [pc, #336]	; (8012a70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b00      	cmp	r3, #0
 8012922:	f43f af39 	beq.w	8012798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 8012926:	2300      	movs	r3, #0
 8012928:	883d      	ldrh	r5, [r7, #0]
 801292a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801292e:	34ea      	adds	r4, #234	; 0xea
 8012930:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8012934:	42ab      	cmp	r3, r5
 8012936:	f67f af2f 	bls.w	8012798 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801293a:	ab1a      	add	r3, sp, #104	; 0x68
 801293c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012940:	3b44      	subs	r3, #68	; 0x44
 8012942:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012946:	4620      	mov	r0, r4
 8012948:	3501      	adds	r5, #1
 801294a:	f7ff fe33 	bl	80125b4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801294e:	b2ad      	uxth	r5, r5
 8012950:	e7ee      	b.n	8012930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 8012952:	2b02      	cmp	r3, #2
 8012954:	d16a      	bne.n	8012a2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8012956:	f8df a120 	ldr.w	sl, [pc, #288]	; 8012a78 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801295a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801295e:	42ab      	cmp	r3, r5
 8012960:	d9dc      	bls.n	801291c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8012962:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8012966:	ab03      	add	r3, sp, #12
 8012968:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801296c:	6851      	ldr	r1, [r2, #4]
 801296e:	c303      	stmia	r3!, {r0, r1}
 8012970:	f89a 3000 	ldrb.w	r3, [sl]
 8012974:	2b01      	cmp	r3, #1
 8012976:	d102      	bne.n	801297e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8012978:	a803      	add	r0, sp, #12
 801297a:	f7ff fc1b 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801297e:	a803      	add	r0, sp, #12
 8012980:	f7fd fc20 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012984:	2800      	cmp	r0, #0
 8012986:	d14a      	bne.n	8012a1e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8012988:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801298c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012990:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012994:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012998:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801299c:	f8ad 001a 	strh.w	r0, [sp, #26]
 80129a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80129a4:	f10d 0914 	add.w	r9, sp, #20
 80129a8:	f10d 081c 	add.w	r8, sp, #28
 80129ac:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80129b0:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 80129b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80129b8:	6830      	ldr	r0, [r6, #0]
 80129ba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80129be:	f8d0 e000 	ldr.w	lr, [r0]
 80129c2:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80129c6:	44dc      	add	ip, fp
 80129c8:	ebac 0c02 	sub.w	ip, ip, r2
 80129cc:	fa1f fc8c 	uxth.w	ip, ip
 80129d0:	f8cd c000 	str.w	ip, [sp]
 80129d4:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 80129d8:	47d8      	blx	fp
 80129da:	f89a 3000 	ldrb.w	r3, [sl]
 80129de:	f8ad 001a 	strh.w	r0, [sp, #26]
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	d11e      	bne.n	8012a24 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 80129e6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80129ea:	e888 0003 	stmia.w	r8, {r0, r1}
 80129ee:	4640      	mov	r0, r8
 80129f0:	f7ff fb86 	bl	8012100 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80129f4:	6823      	ldr	r3, [r4, #0]
 80129f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f8:	4641      	mov	r1, r8
 80129fa:	4620      	mov	r0, r4
 80129fc:	4798      	blx	r3
 80129fe:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8012a02:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012a06:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8012a10:	440a      	add	r2, r1
 8012a12:	b21b      	sxth	r3, r3
 8012a14:	b212      	sxth	r2, r2
 8012a16:	4293      	cmp	r3, r2
 8012a18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012a1c:	dbc6      	blt.n	80129ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 8012a1e:	3501      	adds	r5, #1
 8012a20:	b2ad      	uxth	r5, r5
 8012a22:	e79a      	b.n	801295a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 8012a24:	6823      	ldr	r3, [r4, #0]
 8012a26:	4649      	mov	r1, r9
 8012a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a2a:	e7e6      	b.n	80129fa <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 8012a2c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8012a30:	42ab      	cmp	r3, r5
 8012a32:	f67f af73 	bls.w	801291c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 8012a36:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8012a3a:	ab07      	add	r3, sp, #28
 8012a3c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8012a40:	6851      	ldr	r1, [r2, #4]
 8012a42:	c303      	stmia	r3!, {r0, r1}
 8012a44:	a807      	add	r0, sp, #28
 8012a46:	f7fd fbbd 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a4a:	b920      	cbnz	r0, 8012a56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8012a4c:	6823      	ldr	r3, [r4, #0]
 8012a4e:	a907      	add	r1, sp, #28
 8012a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a52:	4620      	mov	r0, r4
 8012a54:	4798      	blx	r3
 8012a56:	3501      	adds	r5, #1
 8012a58:	b2ad      	uxth	r5, r5
 8012a5a:	e7e7      	b.n	8012a2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8012a5c:	20009f54 	.word	0x20009f54
 8012a60:	20009f60 	.word	0x20009f60
 8012a64:	20000094 	.word	0x20000094
 8012a68:	20009efc 	.word	0x20009efc
 8012a6c:	20009ef2 	.word	0x20009ef2
 8012a70:	20009efa 	.word	0x20009efa
 8012a74:	20009ef0 	.word	0x20009ef0
 8012a78:	20009ef4 	.word	0x20009ef4

08012a7c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012a7c:	4b03      	ldr	r3, [pc, #12]	; (8012a8c <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012a7e:	2200      	movs	r2, #0
 8012a80:	801a      	strh	r2, [r3, #0]
 8012a82:	805a      	strh	r2, [r3, #2]
 8012a84:	809a      	strh	r2, [r3, #4]
 8012a86:	80da      	strh	r2, [r3, #6]
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop
 8012a8c:	20009f60 	.word	0x20009f60

08012a90 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8012a90:	2000      	movs	r0, #0
 8012a92:	4770      	bx	lr

08012a94 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 8012a94:	2000      	movs	r0, #0
 8012a96:	4770      	bx	lr

08012a98 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8012a98:	b508      	push	{r3, lr}
 8012a9a:	6803      	ldr	r3, [r0, #0]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	4798      	blx	r3
 8012aa0:	b128      	cbz	r0, 8012aae <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012aa2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8012aa6:	7a80      	ldrb	r0, [r0, #10]
 8012aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012aac:	4318      	orrs	r0, r3
 8012aae:	bd08      	pop	{r3, pc}

08012ab0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8012ab0:	b40e      	push	{r1, r2, r3}
 8012ab2:	b533      	push	{r0, r1, r4, r5, lr}
 8012ab4:	ab05      	add	r3, sp, #20
 8012ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012aba:	9301      	str	r3, [sp, #4]
 8012abc:	4b09      	ldr	r3, [pc, #36]	; (8012ae4 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 8012abe:	685c      	ldr	r4, [r3, #4]
 8012ac0:	1061      	asrs	r1, r4, #1
 8012ac2:	07e4      	lsls	r4, r4, #31
 8012ac4:	eb00 0501 	add.w	r5, r0, r1
 8012ac8:	bf45      	ittet	mi
 8012aca:	681b      	ldrmi	r3, [r3, #0]
 8012acc:	5841      	ldrmi	r1, [r0, r1]
 8012ace:	681c      	ldrpl	r4, [r3, #0]
 8012ad0:	58cc      	ldrmi	r4, [r1, r3]
 8012ad2:	9b01      	ldr	r3, [sp, #4]
 8012ad4:	2100      	movs	r1, #0
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	47a0      	blx	r4
 8012ada:	b002      	add	sp, #8
 8012adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ae0:	b003      	add	sp, #12
 8012ae2:	4770      	bx	lr
 8012ae4:	2000007c 	.word	0x2000007c

08012ae8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 8012ae8:	b40c      	push	{r2, r3}
 8012aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012aec:	ab06      	add	r3, sp, #24
 8012aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8012af2:	9301      	str	r3, [sp, #4]
 8012af4:	4b09      	ldr	r3, [pc, #36]	; (8012b1c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 8012af6:	685d      	ldr	r5, [r3, #4]
 8012af8:	106c      	asrs	r4, r5, #1
 8012afa:	07ed      	lsls	r5, r5, #31
 8012afc:	eb00 0604 	add.w	r6, r0, r4
 8012b00:	bf45      	ittet	mi
 8012b02:	681b      	ldrmi	r3, [r3, #0]
 8012b04:	5900      	ldrmi	r0, [r0, r4]
 8012b06:	681c      	ldrpl	r4, [r3, #0]
 8012b08:	58c4      	ldrmi	r4, [r0, r3]
 8012b0a:	9b01      	ldr	r3, [sp, #4]
 8012b0c:	4630      	mov	r0, r6
 8012b0e:	47a0      	blx	r4
 8012b10:	b002      	add	sp, #8
 8012b12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b16:	b002      	add	sp, #8
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	2000007c 	.word	0x2000007c

08012b20 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8012b20:	b40e      	push	{r1, r2, r3}
 8012b22:	b530      	push	{r4, r5, lr}
 8012b24:	b098      	sub	sp, #96	; 0x60
 8012b26:	ab1b      	add	r3, sp, #108	; 0x6c
 8012b28:	4604      	mov	r4, r0
 8012b2a:	f853 5b04 	ldr.w	r5, [r3], #4
 8012b2e:	9301      	str	r3, [sp, #4]
 8012b30:	a802      	add	r0, sp, #8
 8012b32:	f000 ffdb 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8012b36:	6823      	ldr	r3, [r4, #0]
 8012b38:	4620      	mov	r0, r4
 8012b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b3c:	4798      	blx	r3
 8012b3e:	9a01      	ldr	r2, [sp, #4]
 8012b40:	4603      	mov	r3, r0
 8012b42:	4629      	mov	r1, r5
 8012b44:	a802      	add	r0, sp, #8
 8012b46:	f000 ffee 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012b4a:	a802      	add	r0, sp, #8
 8012b4c:	f001 f824 	bl	8013b98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012b50:	2401      	movs	r4, #1
 8012b52:	b2a3      	uxth	r3, r4
 8012b54:	b140      	cbz	r0, 8012b68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8012b56:	280a      	cmp	r0, #10
 8012b58:	bf08      	it	eq
 8012b5a:	3301      	addeq	r3, #1
 8012b5c:	a802      	add	r0, sp, #8
 8012b5e:	bf08      	it	eq
 8012b60:	b21c      	sxtheq	r4, r3
 8012b62:	f001 f819 	bl	8013b98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012b66:	e7f4      	b.n	8012b52 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8012b68:	4618      	mov	r0, r3
 8012b6a:	b018      	add	sp, #96	; 0x60
 8012b6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b70:	b003      	add	sp, #12
 8012b72:	4770      	bx	lr

08012b74 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8012b74:	b40e      	push	{r1, r2, r3}
 8012b76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b78:	b098      	sub	sp, #96	; 0x60
 8012b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8012b7c:	4605      	mov	r5, r0
 8012b7e:	f853 4b04 	ldr.w	r4, [r3], #4
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	a802      	add	r0, sp, #8
 8012b86:	f000 ffb1 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8012b8a:	682b      	ldr	r3, [r5, #0]
 8012b8c:	4f21      	ldr	r7, [pc, #132]	; (8012c14 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8012b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b90:	4628      	mov	r0, r5
 8012b92:	4798      	blx	r3
 8012b94:	ae18      	add	r6, sp, #96	; 0x60
 8012b96:	4603      	mov	r3, r0
 8012b98:	4621      	mov	r1, r4
 8012b9a:	9a00      	ldr	r2, [sp, #0]
 8012b9c:	a802      	add	r0, sp, #8
 8012b9e:	2400      	movs	r4, #0
 8012ba0:	f000 ffc1 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012ba4:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8012ba8:	462a      	mov	r2, r5
 8012baa:	4633      	mov	r3, r6
 8012bac:	4621      	mov	r1, r4
 8012bae:	a802      	add	r0, sp, #8
 8012bb0:	f001 f91e 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012bb4:	b338      	cbz	r0, 8012c06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 8012bb6:	280a      	cmp	r0, #10
 8012bb8:	d01e      	beq.n	8012bf8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8012bba:	9901      	ldr	r1, [sp, #4]
 8012bbc:	b1e1      	cbz	r1, 8012bf8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8012bbe:	7b4b      	ldrb	r3, [r1, #13]
 8012bc0:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012bc4:	79c9      	ldrb	r1, [r1, #7]
 8012bc6:	88aa      	ldrh	r2, [r5, #4]
 8012bc8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012bcc:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8012bd0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8012bd4:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8012bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bdc:	bf14      	ite	ne
 8012bde:	4638      	movne	r0, r7
 8012be0:	2000      	moveq	r0, #0
 8012be2:	ea41 010e 	orr.w	r1, r1, lr
 8012be6:	ea43 030c 	orr.w	r3, r3, ip
 8012bea:	440a      	add	r2, r1
 8012bec:	4303      	orrs	r3, r0
 8012bee:	1ad3      	subs	r3, r2, r3
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	42a3      	cmp	r3, r4
 8012bf4:	bfc8      	it	gt
 8012bf6:	b21c      	sxthgt	r4, r3
 8012bf8:	4633      	mov	r3, r6
 8012bfa:	462a      	mov	r2, r5
 8012bfc:	2100      	movs	r1, #0
 8012bfe:	a802      	add	r0, sp, #8
 8012c00:	f001 f8f6 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012c04:	e7d6      	b.n	8012bb4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8012c06:	b2a0      	uxth	r0, r4
 8012c08:	b018      	add	sp, #96	; 0x60
 8012c0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012c0e:	b003      	add	sp, #12
 8012c10:	4770      	bx	lr
 8012c12:	bf00      	nop
 8012c14:	fffffe00 	.word	0xfffffe00

08012c18 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8012c18:	b40e      	push	{r1, r2, r3}
 8012c1a:	b570      	push	{r4, r5, r6, lr}
 8012c1c:	b099      	sub	sp, #100	; 0x64
 8012c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8012c20:	4604      	mov	r4, r0
 8012c22:	f853 5b04 	ldr.w	r5, [r3], #4
 8012c26:	9300      	str	r3, [sp, #0]
 8012c28:	a802      	add	r0, sp, #8
 8012c2a:	f000 ff5f 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8012c2e:	6823      	ldr	r3, [r4, #0]
 8012c30:	4620      	mov	r0, r4
 8012c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c34:	4798      	blx	r3
 8012c36:	4629      	mov	r1, r5
 8012c38:	4603      	mov	r3, r0
 8012c3a:	9a00      	ldr	r2, [sp, #0]
 8012c3c:	a802      	add	r0, sp, #8
 8012c3e:	ad18      	add	r5, sp, #96	; 0x60
 8012c40:	f000 ff71 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012c44:	2100      	movs	r1, #0
 8012c46:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8012c4a:	4622      	mov	r2, r4
 8012c4c:	462b      	mov	r3, r5
 8012c4e:	a802      	add	r0, sp, #8
 8012c50:	f001 f8ce 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012c54:	26ff      	movs	r6, #255	; 0xff
 8012c56:	b190      	cbz	r0, 8012c7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8012c58:	280a      	cmp	r0, #10
 8012c5a:	d009      	beq.n	8012c70 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8012c5c:	9a01      	ldr	r2, [sp, #4]
 8012c5e:	b13a      	cbz	r2, 8012c70 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8012c60:	7923      	ldrb	r3, [r4, #4]
 8012c62:	7a12      	ldrb	r2, [r2, #8]
 8012c64:	1a9b      	subs	r3, r3, r2
 8012c66:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8012c6a:	429e      	cmp	r6, r3
 8012c6c:	bf28      	it	cs
 8012c6e:	461e      	movcs	r6, r3
 8012c70:	462b      	mov	r3, r5
 8012c72:	4622      	mov	r2, r4
 8012c74:	2100      	movs	r1, #0
 8012c76:	a802      	add	r0, sp, #8
 8012c78:	f001 f8ba 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012c7c:	e7eb      	b.n	8012c56 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8012c7e:	4630      	mov	r0, r6
 8012c80:	b019      	add	sp, #100	; 0x64
 8012c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c86:	b003      	add	sp, #12
 8012c88:	4770      	bx	lr

08012c8a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012c8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c8e:	4606      	mov	r6, r0
 8012c90:	b099      	sub	sp, #100	; 0x64
 8012c92:	a802      	add	r0, sp, #8
 8012c94:	4614      	mov	r4, r2
 8012c96:	4688      	mov	r8, r1
 8012c98:	461d      	mov	r5, r3
 8012c9a:	f000 ff27 	bl	8013aec <_ZN8touchgfx12TextProviderC1Ev>
 8012c9e:	6833      	ldr	r3, [r6, #0]
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ca4:	4798      	blx	r3
 8012ca6:	462a      	mov	r2, r5
 8012ca8:	4603      	mov	r3, r0
 8012caa:	4621      	mov	r1, r4
 8012cac:	a802      	add	r0, sp, #8
 8012cae:	f000 ff3a 	bl	8013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8012cb2:	f04f 0b00 	mov.w	fp, #0
 8012cb6:	465f      	mov	r7, fp
 8012cb8:	46da      	mov	sl, fp
 8012cba:	46d9      	mov	r9, fp
 8012cbc:	ab01      	add	r3, sp, #4
 8012cbe:	4632      	mov	r2, r6
 8012cc0:	4641      	mov	r1, r8
 8012cc2:	a802      	add	r0, sp, #8
 8012cc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8012cc8:	f001 f892 	bl	8013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012ccc:	4605      	mov	r5, r0
 8012cce:	b108      	cbz	r0, 8012cd4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8012cd0:	280a      	cmp	r0, #10
 8012cd2:	d10b      	bne.n	8012cec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8012cd4:	4557      	cmp	r7, sl
 8012cd6:	bf38      	it	cc
 8012cd8:	4657      	movcc	r7, sl
 8012cda:	f04f 0a00 	mov.w	sl, #0
 8012cde:	b91d      	cbnz	r5, 8012ce8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8012ce0:	4638      	mov	r0, r7
 8012ce2:	b019      	add	sp, #100	; 0x64
 8012ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce8:	46ab      	mov	fp, r5
 8012cea:	e7e7      	b.n	8012cbc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8012cec:	9a01      	ldr	r2, [sp, #4]
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	d0fa      	beq.n	8012ce8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8012cf2:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8012cf6:	6833      	ldr	r3, [r6, #0]
 8012cf8:	8895      	ldrh	r5, [r2, #4]
 8012cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cfc:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8012d00:	7a94      	ldrb	r4, [r2, #10]
 8012d02:	4659      	mov	r1, fp
 8012d04:	4304      	orrs	r4, r0
 8012d06:	4630      	mov	r0, r6
 8012d08:	4798      	blx	r3
 8012d0a:	4420      	add	r0, r4
 8012d0c:	4450      	add	r0, sl
 8012d0e:	fa1f fa80 	uxth.w	sl, r0
 8012d12:	e7e4      	b.n	8012cde <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08012d14 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8012d14:	b513      	push	{r0, r1, r4, lr}
 8012d16:	1d01      	adds	r1, r0, #4
 8012d18:	4603      	mov	r3, r0
 8012d1a:	c903      	ldmia	r1, {r0, r1}
 8012d1c:	466a      	mov	r2, sp
 8012d1e:	e882 0003 	stmia.w	r2, {r0, r1}
 8012d22:	2100      	movs	r1, #0
 8012d24:	9100      	str	r1, [sp, #0]
 8012d26:	6819      	ldr	r1, [r3, #0]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	690c      	ldr	r4, [r1, #16]
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	47a0      	blx	r4
 8012d30:	b002      	add	sp, #8
 8012d32:	bd10      	pop	{r4, pc}

08012d34 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8012d34:	b538      	push	{r3, r4, r5, lr}
 8012d36:	680b      	ldr	r3, [r1, #0]
 8012d38:	460c      	mov	r4, r1
 8012d3a:	68db      	ldr	r3, [r3, #12]
 8012d3c:	4605      	mov	r5, r0
 8012d3e:	4798      	blx	r3
 8012d40:	6823      	ldr	r3, [r4, #0]
 8012d42:	4620      	mov	r0, r4
 8012d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d46:	4629      	mov	r1, r5
 8012d48:	4798      	blx	r3
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	bd38      	pop	{r3, r4, r5, pc}

08012d4e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8012d4e:	b410      	push	{r4}
 8012d50:	880a      	ldrh	r2, [r1, #0]
 8012d52:	8884      	ldrh	r4, [r0, #4]
 8012d54:	4422      	add	r2, r4
 8012d56:	800a      	strh	r2, [r1, #0]
 8012d58:	88c4      	ldrh	r4, [r0, #6]
 8012d5a:	884a      	ldrh	r2, [r1, #2]
 8012d5c:	4422      	add	r2, r4
 8012d5e:	804a      	strh	r2, [r1, #2]
 8012d60:	6940      	ldr	r0, [r0, #20]
 8012d62:	b120      	cbz	r0, 8012d6e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8012d64:	6803      	ldr	r3, [r0, #0]
 8012d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d6c:	4718      	bx	r3
 8012d6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8012d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d76:	460b      	mov	r3, r1
 8012d78:	b085      	sub	sp, #20
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	b901      	cbnz	r1, 8012d80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8012d7e:	b1fa      	cbz	r2, 8012dc0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8012d80:	1d27      	adds	r7, r4, #4
 8012d82:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012d86:	466e      	mov	r6, sp
 8012d88:	e886 0003 	stmia.w	r6, {r0, r1}
 8012d8c:	88e1      	ldrh	r1, [r4, #6]
 8012d8e:	440a      	add	r2, r1
 8012d90:	88a1      	ldrh	r1, [r4, #4]
 8012d92:	4419      	add	r1, r3
 8012d94:	6823      	ldr	r3, [r4, #0]
 8012d96:	b209      	sxth	r1, r1
 8012d98:	4620      	mov	r0, r4
 8012d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d9c:	b212      	sxth	r2, r2
 8012d9e:	4798      	blx	r3
 8012da0:	e897 0003 	ldmia.w	r7, {r0, r1}
 8012da4:	ad02      	add	r5, sp, #8
 8012da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8012daa:	6960      	ldr	r0, [r4, #20]
 8012dac:	b150      	cbz	r0, 8012dc4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8012dae:	6803      	ldr	r3, [r0, #0]
 8012db0:	4631      	mov	r1, r6
 8012db2:	691b      	ldr	r3, [r3, #16]
 8012db4:	4798      	blx	r3
 8012db6:	6960      	ldr	r0, [r4, #20]
 8012db8:	6803      	ldr	r3, [r0, #0]
 8012dba:	691b      	ldr	r3, [r3, #16]
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	4798      	blx	r3
 8012dc0:	b005      	add	sp, #20
 8012dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc4:	f7ff fb7c 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 8012dc8:	6803      	ldr	r3, [r0, #0]
 8012dca:	4631      	mov	r1, r6
 8012dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dce:	4798      	blx	r3
 8012dd0:	f7ff fb76 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 8012dd4:	6803      	ldr	r3, [r0, #0]
 8012dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dd8:	e7f0      	b.n	8012dbc <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08012dda <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8012dda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012ddc:	8882      	ldrh	r2, [r0, #4]
 8012dde:	880b      	ldrh	r3, [r1, #0]
 8012de0:	4413      	add	r3, r2
 8012de2:	800b      	strh	r3, [r1, #0]
 8012de4:	88c2      	ldrh	r2, [r0, #6]
 8012de6:	884b      	ldrh	r3, [r1, #2]
 8012de8:	4413      	add	r3, r2
 8012dea:	4602      	mov	r2, r0
 8012dec:	804b      	strh	r3, [r1, #2]
 8012dee:	4605      	mov	r5, r0
 8012df0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8012df4:	460c      	mov	r4, r1
 8012df6:	6851      	ldr	r1, [r2, #4]
 8012df8:	466b      	mov	r3, sp
 8012dfa:	c303      	stmia	r3!, {r0, r1}
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	4668      	mov	r0, sp
 8012e00:	f7fd f99c 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8012e04:	466b      	mov	r3, sp
 8012e06:	cb03      	ldmia	r3!, {r0, r1}
 8012e08:	6020      	str	r0, [r4, #0]
 8012e0a:	6061      	str	r1, [r4, #4]
 8012e0c:	6968      	ldr	r0, [r5, #20]
 8012e0e:	b128      	cbz	r0, 8012e1c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8012e10:	6803      	ldr	r3, [r0, #0]
 8012e12:	691b      	ldr	r3, [r3, #16]
 8012e14:	4621      	mov	r1, r4
 8012e16:	4798      	blx	r3
 8012e18:	b003      	add	sp, #12
 8012e1a:	bd30      	pop	{r4, r5, pc}
 8012e1c:	f7ff fb50 	bl	80124c0 <_ZN8touchgfx11Application11getInstanceEv>
 8012e20:	6803      	ldr	r3, [r0, #0]
 8012e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e24:	e7f6      	b.n	8012e14 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08012e26 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8012e26:	b570      	push	{r4, r5, r6, lr}
 8012e28:	8882      	ldrh	r2, [r0, #4]
 8012e2a:	880b      	ldrh	r3, [r1, #0]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	800b      	strh	r3, [r1, #0]
 8012e30:	88c2      	ldrh	r2, [r0, #6]
 8012e32:	884b      	ldrh	r3, [r1, #2]
 8012e34:	460c      	mov	r4, r1
 8012e36:	4413      	add	r3, r2
 8012e38:	804b      	strh	r3, [r1, #2]
 8012e3a:	4605      	mov	r5, r0
 8012e3c:	1d01      	adds	r1, r0, #4
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f7fd f97c 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8012e44:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012e48:	b153      	cbz	r3, 8012e60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8012e4a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8012e4e:	b13b      	cbz	r3, 8012e60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8012e50:	6968      	ldr	r0, [r5, #20]
 8012e52:	b128      	cbz	r0, 8012e60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8012e54:	6803      	ldr	r3, [r0, #0]
 8012e56:	4621      	mov	r1, r4
 8012e58:	6a1b      	ldr	r3, [r3, #32]
 8012e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e5e:	4718      	bx	r3
 8012e60:	bd70      	pop	{r4, r5, r6, pc}

08012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8012e62:	b510      	push	{r4, lr}
 8012e64:	4604      	mov	r4, r0
 8012e66:	4608      	mov	r0, r1
 8012e68:	2300      	movs	r3, #0
 8012e6a:	8023      	strh	r3, [r4, #0]
 8012e6c:	8063      	strh	r3, [r4, #2]
 8012e6e:	6803      	ldr	r3, [r0, #0]
 8012e70:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012e74:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8012e78:	80a1      	strh	r1, [r4, #4]
 8012e7a:	80e2      	strh	r2, [r4, #6]
 8012e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e7e:	4621      	mov	r1, r4
 8012e80:	4798      	blx	r3
 8012e82:	4620      	mov	r0, r4
 8012e84:	bd10      	pop	{r4, pc}
	...

08012e88 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8012e88:	b530      	push	{r4, r5, lr}
 8012e8a:	8083      	strh	r3, [r0, #4]
 8012e8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8012e90:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8012e94:	7183      	strb	r3, [r0, #6]
 8012e96:	79c3      	ldrb	r3, [r0, #7]
 8012e98:	6101      	str	r1, [r0, #16]
 8012e9a:	f365 0306 	bfi	r3, r5, #0, #7
 8012e9e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012ea2:	8282      	strh	r2, [r0, #20]
 8012ea4:	f365 13c7 	bfi	r3, r5, #7, #1
 8012ea8:	71c3      	strb	r3, [r0, #7]
 8012eaa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8012eae:	7203      	strb	r3, [r0, #8]
 8012eb0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8012eb4:	7243      	strb	r3, [r0, #9]
 8012eb6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012eba:	8143      	strh	r3, [r0, #10]
 8012ebc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8012ec0:	8183      	strh	r3, [r0, #12]
 8012ec2:	4b01      	ldr	r3, [pc, #4]	; (8012ec8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8012ec4:	6003      	str	r3, [r0, #0]
 8012ec6:	bd30      	pop	{r4, r5, pc}
 8012ec8:	08023024 	.word	0x08023024

08012ecc <_ZNK8touchgfx9ConstFont4findEt>:
 8012ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ece:	8a84      	ldrh	r4, [r0, #20]
 8012ed0:	2500      	movs	r5, #0
 8012ed2:	3c01      	subs	r4, #1
 8012ed4:	260e      	movs	r6, #14
 8012ed6:	42a5      	cmp	r5, r4
 8012ed8:	dc0c      	bgt.n	8012ef4 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8012eda:	192a      	adds	r2, r5, r4
 8012edc:	6903      	ldr	r3, [r0, #16]
 8012ede:	1052      	asrs	r2, r2, #1
 8012ee0:	fb06 3302 	mla	r3, r6, r2, r3
 8012ee4:	889f      	ldrh	r7, [r3, #4]
 8012ee6:	428f      	cmp	r7, r1
 8012ee8:	d901      	bls.n	8012eee <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8012eea:	1e54      	subs	r4, r2, #1
 8012eec:	e7f3      	b.n	8012ed6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8012eee:	d202      	bcs.n	8012ef6 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8012ef0:	1c55      	adds	r5, r2, #1
 8012ef2:	e7f0      	b.n	8012ed6 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012efa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8012efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012efc:	4605      	mov	r5, r0
 8012efe:	4617      	mov	r7, r2
 8012f00:	461e      	mov	r6, r3
 8012f02:	f7ff ffe3 	bl	8012ecc <_ZNK8touchgfx9ConstFont4findEt>
 8012f06:	b9e0      	cbnz	r0, 8012f42 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8012f08:	b911      	cbnz	r1, 8012f10 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8012f0a:	2400      	movs	r4, #0
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f10:	290a      	cmp	r1, #10
 8012f12:	d0fa      	beq.n	8012f0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	4628      	mov	r0, r5
 8012f18:	691b      	ldr	r3, [r3, #16]
 8012f1a:	4798      	blx	r3
 8012f1c:	4601      	mov	r1, r0
 8012f1e:	4628      	mov	r0, r5
 8012f20:	f7ff ffd4 	bl	8012ecc <_ZNK8touchgfx9ConstFont4findEt>
 8012f24:	4604      	mov	r4, r0
 8012f26:	2800      	cmp	r0, #0
 8012f28:	d0ef      	beq.n	8012f0a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8012f2a:	682b      	ldr	r3, [r5, #0]
 8012f2c:	4621      	mov	r1, r4
 8012f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f30:	4628      	mov	r0, r5
 8012f32:	4798      	blx	r3
 8012f34:	6038      	str	r0, [r7, #0]
 8012f36:	682b      	ldr	r3, [r5, #0]
 8012f38:	4628      	mov	r0, r5
 8012f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f3c:	4798      	blx	r3
 8012f3e:	7030      	strb	r0, [r6, #0]
 8012f40:	e7e4      	b.n	8012f0c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8012f42:	4604      	mov	r4, r0
 8012f44:	e7f1      	b.n	8012f2a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08012f46 <_ZN8touchgfx6memsetEPvhm>:
 8012f46:	4402      	add	r2, r0
 8012f48:	4290      	cmp	r0, r2
 8012f4a:	d002      	beq.n	8012f52 <_ZN8touchgfx6memsetEPvhm+0xc>
 8012f4c:	f800 1b01 	strb.w	r1, [r0], #1
 8012f50:	e7fa      	b.n	8012f48 <_ZN8touchgfx6memsetEPvhm+0x2>
 8012f52:	4770      	bx	lr

08012f54 <_ZN8touchgfx10ClickEventD1Ev>:
 8012f54:	4770      	bx	lr

08012f56 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8012f56:	2000      	movs	r0, #0
 8012f58:	4770      	bx	lr

08012f5a <_ZN8touchgfx9DragEventD1Ev>:
 8012f5a:	4770      	bx	lr

08012f5c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8012f5c:	2001      	movs	r0, #1
 8012f5e:	4770      	bx	lr

08012f60 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8012f60:	2002      	movs	r0, #2
 8012f62:	4770      	bx	lr

08012f64 <_ZN8touchgfx12GestureEventD1Ev>:
 8012f64:	4770      	bx	lr

08012f66 <_ZN8touchgfx10ClickEventD0Ev>:
 8012f66:	b510      	push	{r4, lr}
 8012f68:	210c      	movs	r1, #12
 8012f6a:	4604      	mov	r4, r0
 8012f6c:	f00d f800 	bl	801ff70 <_ZdlPvj>
 8012f70:	4620      	mov	r0, r4
 8012f72:	bd10      	pop	{r4, pc}

08012f74 <_ZN8touchgfx9DragEventD0Ev>:
 8012f74:	b510      	push	{r4, lr}
 8012f76:	2110      	movs	r1, #16
 8012f78:	4604      	mov	r4, r0
 8012f7a:	f00c fff9 	bl	801ff70 <_ZdlPvj>
 8012f7e:	4620      	mov	r0, r4
 8012f80:	bd10      	pop	{r4, pc}

08012f82 <_ZN8touchgfx12GestureEventD0Ev>:
 8012f82:	b510      	push	{r4, lr}
 8012f84:	210c      	movs	r1, #12
 8012f86:	4604      	mov	r4, r0
 8012f88:	f00c fff2 	bl	801ff70 <_ZdlPvj>
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	bd10      	pop	{r4, pc}

08012f90 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8012f90:	b530      	push	{r4, r5, lr}
 8012f92:	460d      	mov	r5, r1
 8012f94:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012f96:	b087      	sub	sp, #28
 8012f98:	4604      	mov	r4, r0
 8012f9a:	b301      	cbz	r1, 8012fde <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8012f9c:	a801      	add	r0, sp, #4
 8012f9e:	f7ff ff60 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012fa2:	892a      	ldrh	r2, [r5, #8]
 8012fa4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012fa8:	7928      	ldrb	r0, [r5, #4]
 8012faa:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012fae:	f88d 0010 	strb.w	r0, [sp, #16]
 8012fb2:	1ad2      	subs	r2, r2, r3
 8012fb4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012fb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012fb8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012fbc:	441a      	add	r2, r3
 8012fbe:	896b      	ldrh	r3, [r5, #10]
 8012fc0:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8012fc4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012fc8:	1b5b      	subs	r3, r3, r5
 8012fca:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8012fcc:	442b      	add	r3, r5
 8012fce:	4d05      	ldr	r5, [pc, #20]	; (8012fe4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8012fd0:	9503      	str	r5, [sp, #12]
 8012fd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012fd6:	6803      	ldr	r3, [r0, #0]
 8012fd8:	a903      	add	r1, sp, #12
 8012fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012fdc:	4798      	blx	r3
 8012fde:	b007      	add	sp, #28
 8012fe0:	bd30      	pop	{r4, r5, pc}
 8012fe2:	bf00      	nop
 8012fe4:	080230a0 	.word	0x080230a0

08012fe8 <_ZNK8touchgfx4Rect9intersectEss>:
 8012fe8:	b510      	push	{r4, lr}
 8012fea:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012fee:	428b      	cmp	r3, r1
 8012ff0:	dc10      	bgt.n	8013014 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012ff2:	8884      	ldrh	r4, [r0, #4]
 8012ff4:	4423      	add	r3, r4
 8012ff6:	b21b      	sxth	r3, r3
 8012ff8:	4299      	cmp	r1, r3
 8012ffa:	da0b      	bge.n	8013014 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8012ffc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013000:	4293      	cmp	r3, r2
 8013002:	dc07      	bgt.n	8013014 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013004:	88c0      	ldrh	r0, [r0, #6]
 8013006:	4418      	add	r0, r3
 8013008:	b200      	sxth	r0, r0
 801300a:	4282      	cmp	r2, r0
 801300c:	bfac      	ite	ge
 801300e:	2000      	movge	r0, #0
 8013010:	2001      	movlt	r0, #1
 8013012:	bd10      	pop	{r4, pc}
 8013014:	2000      	movs	r0, #0
 8013016:	e7fc      	b.n	8013012 <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08013018 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801301a:	460c      	mov	r4, r1
 801301c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801301e:	b089      	sub	sp, #36	; 0x24
 8013020:	4605      	mov	r5, r0
 8013022:	2900      	cmp	r1, #0
 8013024:	d054      	beq.n	80130d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8013026:	4668      	mov	r0, sp
 8013028:	f7ff ff1b 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801302c:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801302e:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8013030:	8922      	ldrh	r2, [r4, #8]
 8013032:	88e1      	ldrh	r1, [r4, #6]
 8013034:	443a      	add	r2, r7
 8013036:	4431      	add	r1, r6
 8013038:	b212      	sxth	r2, r2
 801303a:	b209      	sxth	r1, r1
 801303c:	4668      	mov	r0, sp
 801303e:	f7ff ffd3 	bl	8012fe8 <_ZNK8touchgfx4Rect9intersectEss>
 8013042:	b1d0      	cbz	r0, 801307a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8013044:	89a2      	ldrh	r2, [r4, #12]
 8013046:	8961      	ldrh	r1, [r4, #10]
 8013048:	443a      	add	r2, r7
 801304a:	4431      	add	r1, r6
 801304c:	b212      	sxth	r2, r2
 801304e:	b209      	sxth	r1, r1
 8013050:	4668      	mov	r0, sp
 8013052:	f7ff ffc9 	bl	8012fe8 <_ZNK8touchgfx4Rect9intersectEss>
 8013056:	4603      	mov	r3, r0
 8013058:	b978      	cbnz	r0, 801307a <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 801305a:	4a1e      	ldr	r2, [pc, #120]	; (80130d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801305c:	9204      	str	r2, [sp, #16]
 801305e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013060:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013064:	2202      	movs	r2, #2
 8013066:	f88d 2014 	strb.w	r2, [sp, #20]
 801306a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801306e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013072:	6803      	ldr	r3, [r0, #0]
 8013074:	a904      	add	r1, sp, #16
 8013076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013078:	4798      	blx	r3
 801307a:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801307c:	a802      	add	r0, sp, #8
 801307e:	f7ff fef0 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013082:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8013086:	88e0      	ldrh	r0, [r4, #6]
 8013088:	8961      	ldrh	r1, [r4, #10]
 801308a:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801308e:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8013092:	8923      	ldrh	r3, [r4, #8]
 8013094:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8013096:	7927      	ldrb	r7, [r4, #4]
 8013098:	f88d 7014 	strb.w	r7, [sp, #20]
 801309c:	1a80      	subs	r0, r0, r2
 801309e:	1a89      	subs	r1, r1, r2
 80130a0:	89a2      	ldrh	r2, [r4, #12]
 80130a2:	4c0d      	ldr	r4, [pc, #52]	; (80130d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 80130a4:	9404      	str	r4, [sp, #16]
 80130a6:	4460      	add	r0, ip
 80130a8:	eba3 030e 	sub.w	r3, r3, lr
 80130ac:	eba2 020e 	sub.w	r2, r2, lr
 80130b0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80130b4:	4433      	add	r3, r6
 80130b6:	4461      	add	r1, ip
 80130b8:	4432      	add	r2, r6
 80130ba:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80130bc:	f8ad 101a 	strh.w	r1, [sp, #26]
 80130c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80130c4:	f8ad 201c 	strh.w	r2, [sp, #28]
 80130c8:	6803      	ldr	r3, [r0, #0]
 80130ca:	a904      	add	r1, sp, #16
 80130cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130ce:	4798      	blx	r3
 80130d0:	b009      	add	sp, #36	; 0x24
 80130d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130d4:	08023078 	.word	0x08023078
 80130d8:	0802308c 	.word	0x0802308c

080130dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 80130dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130e0:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 80130e4:	790b      	ldrb	r3, [r1, #4]
 80130e6:	b0a1      	sub	sp, #132	; 0x84
 80130e8:	4604      	mov	r4, r0
 80130ea:	460d      	mov	r5, r1
 80130ec:	f1b9 0f00 	cmp.w	r9, #0
 80130f0:	d00f      	beq.n	8013112 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	f040 80a0 	bne.w	8013238 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 80130f8:	b021      	add	sp, #132	; 0x84
 80130fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130fe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8013102:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013106:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801310a:	1d20      	adds	r0, r4, #4
 801310c:	f7fc ff64 	bl	800ffd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8013110:	e092      	b.n	8013238 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8013112:	2b00      	cmp	r3, #0
 8013114:	d1f0      	bne.n	80130f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8013116:	4b5e      	ldr	r3, [pc, #376]	; (8013290 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 801311e:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8013122:	f1ba 0f03 	cmp.w	sl, #3
 8013126:	ddea      	ble.n	80130fe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8013128:	f1ba 0f0c 	cmp.w	sl, #12
 801312c:	f04f 0303 	mov.w	r3, #3
 8013130:	bfdc      	itt	le
 8013132:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8013136:	fb92 f3f3 	sdivle	r3, r2, r3
 801313a:	9301      	str	r3, [sp, #4]
 801313c:	4b55      	ldr	r3, [pc, #340]	; (8013294 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 801313e:	4956      	ldr	r1, [pc, #344]	; (8013298 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8013140:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013144:	4b55      	ldr	r3, [pc, #340]	; (801329c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8013146:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801314a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801314e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013152:	ab0e      	add	r3, sp, #56	; 0x38
 8013154:	2248      	movs	r2, #72	; 0x48
 8013156:	2600      	movs	r6, #0
 8013158:	4618      	mov	r0, r3
 801315a:	960a      	str	r6, [sp, #40]	; 0x28
 801315c:	f00c ffb2 	bl	80200c4 <memcpy>
 8013160:	f04f 32ff 	mov.w	r2, #4294967295
 8013164:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8013168:	f8cd a008 	str.w	sl, [sp, #8]
 801316c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013170:	fb93 f3f2 	sdiv	r3, r3, r2
 8013174:	b29b      	uxth	r3, r3
 8013176:	46b3      	mov	fp, r6
 8013178:	9303      	str	r3, [sp, #12]
 801317a:	2300      	movs	r3, #0
 801317c:	9309      	str	r3, [sp, #36]	; 0x24
 801317e:	9b07      	ldr	r3, [sp, #28]
 8013180:	9a03      	ldr	r2, [sp, #12]
 8013182:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8013186:	88ef      	ldrh	r7, [r5, #6]
 8013188:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 801318c:	fb13 f302 	smulbb	r3, r3, r2
 8013190:	b29b      	uxth	r3, r3
 8013192:	9304      	str	r3, [sp, #16]
 8013194:	9b07      	ldr	r3, [sp, #28]
 8013196:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801319a:	a80a      	add	r0, sp, #40	; 0x28
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	fb13 f302 	smulbb	r3, r3, r2
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	9305      	str	r3, [sp, #20]
 80131a6:	9b04      	ldr	r3, [sp, #16]
 80131a8:	441f      	add	r7, r3
 80131aa:	9b05      	ldr	r3, [sp, #20]
 80131ac:	4498      	add	r8, r3
 80131ae:	b23f      	sxth	r7, r7
 80131b0:	fa0f f888 	sxth.w	r8, r8
 80131b4:	4642      	mov	r2, r8
 80131b6:	4639      	mov	r1, r7
 80131b8:	f7ff ff16 	bl	8012fe8 <_ZNK8touchgfx4Rect9intersectEss>
 80131bc:	b380      	cbz	r0, 8013220 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80131be:	4639      	mov	r1, r7
 80131c0:	ab09      	add	r3, sp, #36	; 0x24
 80131c2:	4642      	mov	r2, r8
 80131c4:	1d20      	adds	r0, r4, #4
 80131c6:	f7fc ff07 	bl	800ffd8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80131ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131cc:	b341      	cbz	r1, 8013220 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80131ce:	4549      	cmp	r1, r9
 80131d0:	d026      	beq.n	8013220 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80131d2:	a80c      	add	r0, sp, #48	; 0x30
 80131d4:	f7ff fe45 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80131d8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80131dc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80131e0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80131e4:	2002      	movs	r0, #2
 80131e6:	fb92 f2f0 	sdiv	r2, r2, r0
 80131ea:	440a      	add	r2, r1
 80131ec:	1a99      	subs	r1, r3, r2
 80131ee:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80131f2:	fb93 f3f0 	sdiv	r3, r3, r0
 80131f6:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80131fa:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80131fe:	4403      	add	r3, r0
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	435b      	muls	r3, r3
 8013204:	9a06      	ldr	r2, [sp, #24]
 8013206:	fb01 3301 	mla	r3, r1, r1, r3
 801320a:	4293      	cmp	r3, r2
 801320c:	d208      	bcs.n	8013220 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801320e:	9a04      	ldr	r2, [sp, #16]
 8013210:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013214:	86a2      	strh	r2, [r4, #52]	; 0x34
 8013216:	9a05      	ldr	r2, [sp, #20]
 8013218:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 801321c:	86e2      	strh	r2, [r4, #54]	; 0x36
 801321e:	9306      	str	r3, [sp, #24]
 8013220:	f10b 0b02 	add.w	fp, fp, #2
 8013224:	f1bb 0f08 	cmp.w	fp, #8
 8013228:	dda7      	ble.n	801317a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801322a:	9b02      	ldr	r3, [sp, #8]
 801322c:	4453      	add	r3, sl
 801322e:	9302      	str	r3, [sp, #8]
 8013230:	9b01      	ldr	r3, [sp, #4]
 8013232:	3601      	adds	r6, #1
 8013234:	42b3      	cmp	r3, r6
 8013236:	d199      	bne.n	801316c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 8013238:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801323a:	2900      	cmp	r1, #0
 801323c:	f43f af5c 	beq.w	80130f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8013240:	a80c      	add	r0, sp, #48	; 0x30
 8013242:	f7ff fe0e 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013246:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801324a:	88ea      	ldrh	r2, [r5, #6]
 801324c:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 8013250:	7929      	ldrb	r1, [r5, #4]
 8013252:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8013256:	1ad2      	subs	r2, r2, r3
 8013258:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801325a:	441a      	add	r2, r3
 801325c:	892b      	ldrh	r3, [r5, #8]
 801325e:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 8013262:	1a1b      	subs	r3, r3, r0
 8013264:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8013266:	4403      	add	r3, r0
 8013268:	480d      	ldr	r0, [pc, #52]	; (80132a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 801326a:	900e      	str	r0, [sp, #56]	; 0x38
 801326c:	2600      	movs	r6, #0
 801326e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013270:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013274:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8013278:	6803      	ldr	r3, [r0, #0]
 801327a:	a90e      	add	r1, sp, #56	; 0x38
 801327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801327e:	4798      	blx	r3
 8013280:	792b      	ldrb	r3, [r5, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	f43f af38 	beq.w	80130f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8013288:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801328c:	e734      	b.n	80130f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801328e:	bf00      	nop
 8013290:	20009efc 	.word	0x20009efc
 8013294:	20009ef0 	.word	0x20009ef0
 8013298:	08021678 	.word	0x08021678
 801329c:	20009ef2 	.word	0x20009ef2
 80132a0:	08023078 	.word	0x08023078

080132a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80132a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80132a6:	4604      	mov	r4, r0
 80132a8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80132ac:	3201      	adds	r2, #1
 80132ae:	d112      	bne.n	80132d6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80132b0:	6803      	ldr	r3, [r0, #0]
 80132b2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80132b6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80132ba:	f8ad 1004 	strh.w	r1, [sp, #4]
 80132be:	2500      	movs	r5, #0
 80132c0:	9500      	str	r5, [sp, #0]
 80132c2:	466d      	mov	r5, sp
 80132c4:	4629      	mov	r1, r5
 80132c6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80132ca:	6a1b      	ldr	r3, [r3, #32]
 80132cc:	4798      	blx	r3
 80132ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80132d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80132d6:	4620      	mov	r0, r4
 80132d8:	b003      	add	sp, #12
 80132da:	bd30      	pop	{r4, r5, pc}

080132dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80132dc:	b513      	push	{r0, r1, r4, lr}
 80132de:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80132e2:	3301      	adds	r3, #1
 80132e4:	4604      	mov	r4, r0
 80132e6:	d109      	bne.n	80132fc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80132e8:	4601      	mov	r1, r0
 80132ea:	4668      	mov	r0, sp
 80132ec:	f7ff fdb9 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80132f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80132f4:	8423      	strh	r3, [r4, #32]
 80132f6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80132fa:	8463      	strh	r3, [r4, #34]	; 0x22
 80132fc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013300:	b002      	add	sp, #8
 8013302:	bd10      	pop	{r4, pc}

08013304 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013304:	b513      	push	{r0, r1, r4, lr}
 8013306:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801330a:	3301      	adds	r3, #1
 801330c:	4604      	mov	r4, r0
 801330e:	d109      	bne.n	8013324 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013310:	4601      	mov	r1, r0
 8013312:	4668      	mov	r0, sp
 8013314:	f7ff fda5 	bl	8012e62 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013318:	f8bd 3000 	ldrh.w	r3, [sp]
 801331c:	8423      	strh	r3, [r4, #32]
 801331e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013322:	8463      	strh	r3, [r4, #34]	; 0x22
 8013324:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8013328:	b002      	add	sp, #8
 801332a:	bd10      	pop	{r4, pc}

0801332c <_ZN8touchgfx6ScreenC1Ev>:
 801332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801332e:	4605      	mov	r5, r0
 8013330:	4b17      	ldr	r3, [pc, #92]	; (8013390 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013332:	f845 3b04 	str.w	r3, [r5], #4
 8013336:	2301      	movs	r3, #1
 8013338:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801333c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013340:	4b14      	ldr	r3, [pc, #80]	; (8013394 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8013342:	4915      	ldr	r1, [pc, #84]	; (8013398 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8013344:	f9b3 7000 	ldrsh.w	r7, [r3]
 8013348:	4b14      	ldr	r3, [pc, #80]	; (801339c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801334a:	6041      	str	r1, [r0, #4]
 801334c:	2200      	movs	r2, #0
 801334e:	8102      	strh	r2, [r0, #8]
 8013350:	8142      	strh	r2, [r0, #10]
 8013352:	8182      	strh	r2, [r0, #12]
 8013354:	81c2      	strh	r2, [r0, #14]
 8013356:	8202      	strh	r2, [r0, #16]
 8013358:	8242      	strh	r2, [r0, #18]
 801335a:	8282      	strh	r2, [r0, #20]
 801335c:	82c2      	strh	r2, [r0, #22]
 801335e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013362:	6202      	str	r2, [r0, #32]
 8013364:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8013368:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801336c:	6342      	str	r2, [r0, #52]	; 0x34
 801336e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013372:	4611      	mov	r1, r2
 8013374:	4604      	mov	r4, r0
 8013376:	4628      	mov	r0, r5
 8013378:	f7f9 fea9 	bl	800d0ce <_ZN8touchgfx8Drawable5setXYEss>
 801337c:	4639      	mov	r1, r7
 801337e:	4628      	mov	r0, r5
 8013380:	f7f9 fec3 	bl	800d10a <_ZN8touchgfx8Drawable8setWidthEs>
 8013384:	4628      	mov	r0, r5
 8013386:	4631      	mov	r1, r6
 8013388:	f7f9 fece 	bl	800d128 <_ZN8touchgfx8Drawable9setHeightEs>
 801338c:	4620      	mov	r0, r4
 801338e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013390:	080230b4 	.word	0x080230b4
 8013394:	20009ef0 	.word	0x20009ef0
 8013398:	08022434 	.word	0x08022434
 801339c:	20009ef2 	.word	0x20009ef2

080133a0 <_ZN8touchgfx6Screen4drawEv>:
 80133a0:	b507      	push	{r0, r1, r2, lr}
 80133a2:	4b09      	ldr	r3, [pc, #36]	; (80133c8 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80133a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80133a8:	4b08      	ldr	r3, [pc, #32]	; (80133cc <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80133aa:	f8ad 2004 	strh.w	r2, [sp, #4]
 80133ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80133b6:	6803      	ldr	r3, [r0, #0]
 80133b8:	2100      	movs	r1, #0
 80133ba:	9100      	str	r1, [sp, #0]
 80133bc:	689b      	ldr	r3, [r3, #8]
 80133be:	4669      	mov	r1, sp
 80133c0:	4798      	blx	r3
 80133c2:	b003      	add	sp, #12
 80133c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80133c8:	20009ef0 	.word	0x20009ef0
 80133cc:	20009ef2 	.word	0x20009ef2

080133d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80133d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80133d8:	b089      	sub	sp, #36	; 0x24
 80133da:	4680      	mov	r8, r0
 80133dc:	460c      	mov	r4, r1
 80133de:	4615      	mov	r5, r2
 80133e0:	b16b      	cbz	r3, 80133fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80133e2:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80133e6:	b153      	cbz	r3, 80133fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80133e8:	4628      	mov	r0, r5
 80133ea:	f7ff ff5b 	bl	80132a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80133ee:	4621      	mov	r1, r4
 80133f0:	f7fe ffdc 	bl	80123ac <_ZNK8touchgfx4Rect9intersectERKS0_>
 80133f4:	69eb      	ldr	r3, [r5, #28]
 80133f6:	b928      	cbnz	r0, 8013404 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 80133f8:	461d      	mov	r5, r3
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1f4      	bne.n	80133e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 80133fe:	b009      	add	sp, #36	; 0x24
 8013400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013404:	ae04      	add	r6, sp, #16
 8013406:	2b00      	cmp	r3, #0
 8013408:	d051      	beq.n	80134ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 801340a:	682b      	ldr	r3, [r5, #0]
 801340c:	4629      	mov	r1, r5
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	a802      	add	r0, sp, #8
 8013412:	4798      	blx	r3
 8013414:	4628      	mov	r0, r5
 8013416:	f7ff ff61 	bl	80132dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801341a:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801341e:	4407      	add	r7, r0
 8013420:	4628      	mov	r0, r5
 8013422:	f7ff ff6f 	bl	8013304 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013426:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801342a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801342e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013432:	4418      	add	r0, r3
 8013434:	4621      	mov	r1, r4
 8013436:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801343a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801343e:	b23f      	sxth	r7, r7
 8013440:	4630      	mov	r0, r6
 8013442:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013446:	f8ad 7010 	strh.w	r7, [sp, #16]
 801344a:	f7fc fe77 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 801344e:	4628      	mov	r0, r5
 8013450:	f7ff ff28 	bl	80132a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013454:	4602      	mov	r2, r0
 8013456:	e896 0003 	ldmia.w	r6, {r0, r1}
 801345a:	ab06      	add	r3, sp, #24
 801345c:	e883 0003 	stmia.w	r3, {r0, r1}
 8013460:	4611      	mov	r1, r2
 8013462:	4618      	mov	r0, r3
 8013464:	f7fc fe6a 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8013468:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801346c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013470:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8013474:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8013478:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801347c:	4299      	cmp	r1, r3
 801347e:	d10b      	bne.n	8013498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8013480:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013484:	4552      	cmp	r2, sl
 8013486:	d107      	bne.n	8013498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8013488:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801348c:	455a      	cmp	r2, fp
 801348e:	d103      	bne.n	8013498 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8013490:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013494:	454a      	cmp	r2, r9
 8013496:	d00a      	beq.n	80134ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8013498:	f1bb 0f00 	cmp.w	fp, #0
 801349c:	d002      	beq.n	80134a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801349e:	f1b9 0f00 	cmp.w	r9, #0
 80134a2:	d12e      	bne.n	8013502 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 80134a4:	69ea      	ldr	r2, [r5, #28]
 80134a6:	4621      	mov	r1, r4
 80134a8:	4640      	mov	r0, r8
 80134aa:	f7ff ff91 	bl	80133d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80134ae:	4628      	mov	r0, r5
 80134b0:	f7ff fef8 	bl	80132a4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80134b4:	6861      	ldr	r1, [r4, #4]
 80134b6:	4602      	mov	r2, r0
 80134b8:	6820      	ldr	r0, [r4, #0]
 80134ba:	4633      	mov	r3, r6
 80134bc:	c303      	stmia	r3!, {r0, r1}
 80134be:	4611      	mov	r1, r2
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7fc fe3b 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 80134c6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d097      	beq.n	80133fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80134ce:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d093      	beq.n	80133fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80134d6:	4628      	mov	r0, r5
 80134d8:	f7ff ff00 	bl	80132dc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80134dc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80134e0:	1a18      	subs	r0, r3, r0
 80134e2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80134e6:	4628      	mov	r0, r5
 80134e8:	f7ff ff0c 	bl	8013304 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80134ec:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80134f0:	1a18      	subs	r0, r3, r0
 80134f2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80134f6:	682b      	ldr	r3, [r5, #0]
 80134f8:	4631      	mov	r1, r6
 80134fa:	689b      	ldr	r3, [r3, #8]
 80134fc:	4628      	mov	r0, r5
 80134fe:	4798      	blx	r3
 8013500:	e77d      	b.n	80133fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8013502:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013506:	fa1f f08a 	uxth.w	r0, sl
 801350a:	4552      	cmp	r2, sl
 801350c:	9000      	str	r0, [sp, #0]
 801350e:	da12      	bge.n	8013536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 8013510:	9301      	str	r3, [sp, #4]
 8013512:	9b00      	ldr	r3, [sp, #0]
 8013514:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013518:	f8ad 2012 	strh.w	r2, [sp, #18]
 801351c:	1a9a      	subs	r2, r3, r2
 801351e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013522:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013526:	f8ad 2016 	strh.w	r2, [sp, #22]
 801352a:	69ea      	ldr	r2, [r5, #28]
 801352c:	4631      	mov	r1, r6
 801352e:	4640      	mov	r0, r8
 8013530:	f7ff ff4e 	bl	80133d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013534:	9b01      	ldr	r3, [sp, #4]
 8013536:	f9b4 2000 	ldrsh.w	r2, [r4]
 801353a:	429a      	cmp	r2, r3
 801353c:	b29f      	uxth	r7, r3
 801353e:	da0d      	bge.n	801355c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 8013540:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013544:	1aba      	subs	r2, r7, r2
 8013546:	f8ad a012 	strh.w	sl, [sp, #18]
 801354a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801354e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013552:	69ea      	ldr	r2, [r5, #28]
 8013554:	4631      	mov	r1, r6
 8013556:	4640      	mov	r0, r8
 8013558:	f7ff ff3a 	bl	80133d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801355c:	8822      	ldrh	r2, [r4, #0]
 801355e:	88a3      	ldrh	r3, [r4, #4]
 8013560:	445f      	add	r7, fp
 8013562:	4413      	add	r3, r2
 8013564:	b29b      	uxth	r3, r3
 8013566:	b2bf      	uxth	r7, r7
 8013568:	b23a      	sxth	r2, r7
 801356a:	b219      	sxth	r1, r3
 801356c:	4291      	cmp	r1, r2
 801356e:	dd0d      	ble.n	801358c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 8013570:	1bdb      	subs	r3, r3, r7
 8013572:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013576:	f8ad a012 	strh.w	sl, [sp, #18]
 801357a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801357e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013582:	69ea      	ldr	r2, [r5, #28]
 8013584:	4631      	mov	r1, r6
 8013586:	4640      	mov	r0, r8
 8013588:	f7ff ff22 	bl	80133d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801358c:	88e2      	ldrh	r2, [r4, #6]
 801358e:	8863      	ldrh	r3, [r4, #2]
 8013590:	4413      	add	r3, r2
 8013592:	9a00      	ldr	r2, [sp, #0]
 8013594:	444a      	add	r2, r9
 8013596:	b29b      	uxth	r3, r3
 8013598:	fa1f f982 	uxth.w	r9, r2
 801359c:	fa0f f289 	sxth.w	r2, r9
 80135a0:	b219      	sxth	r1, r3
 80135a2:	428a      	cmp	r2, r1
 80135a4:	da83      	bge.n	80134ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80135a6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80135aa:	f9b4 0000 	ldrsh.w	r0, [r4]
 80135ae:	f8ad 1014 	strh.w	r1, [sp, #20]
 80135b2:	eba3 0309 	sub.w	r3, r3, r9
 80135b6:	f8ad 0010 	strh.w	r0, [sp, #16]
 80135ba:	f8ad 2012 	strh.w	r2, [sp, #18]
 80135be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135c2:	69ea      	ldr	r2, [r5, #28]
 80135c4:	4631      	mov	r1, r6
 80135c6:	e76f      	b.n	80134a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

080135c8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80135c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135ca:	aa02      	add	r2, sp, #8
 80135cc:	2300      	movs	r3, #0
 80135ce:	f842 3d04 	str.w	r3, [r2, #-4]!
 80135d2:	4604      	mov	r4, r0
 80135d4:	3004      	adds	r0, #4
 80135d6:	460d      	mov	r5, r1
 80135d8:	f7fc fe87 	bl	80102ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80135dc:	9a01      	ldr	r2, [sp, #4]
 80135de:	b11a      	cbz	r2, 80135e8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 80135e0:	4629      	mov	r1, r5
 80135e2:	4620      	mov	r0, r4
 80135e4:	f7ff fef4 	bl	80133d0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80135e8:	b003      	add	sp, #12
 80135ea:	bd30      	pop	{r4, r5, pc}

080135ec <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80135ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80135ee:	4602      	mov	r2, r0
 80135f0:	4604      	mov	r4, r0
 80135f2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80135f6:	460d      	mov	r5, r1
 80135f8:	6851      	ldr	r1, [r2, #4]
 80135fa:	466b      	mov	r3, sp
 80135fc:	c303      	stmia	r3!, {r0, r1}
 80135fe:	4629      	mov	r1, r5
 8013600:	4668      	mov	r0, sp
 8013602:	f7fc fd9b 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8013606:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801360a:	4669      	mov	r1, sp
 801360c:	b123      	cbz	r3, 8013618 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801360e:	4620      	mov	r0, r4
 8013610:	f7ff ffda 	bl	80135c8 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8013614:	b003      	add	sp, #12
 8013616:	bd30      	pop	{r4, r5, pc}
 8013618:	1d20      	adds	r0, r4, #4
 801361a:	f7fc fe2d 	bl	8010278 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801361e:	e7f9      	b.n	8013614 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

08013620 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8013620:	680a      	ldr	r2, [r1, #0]
 8013622:	460b      	mov	r3, r1
 8013624:	6952      	ldr	r2, [r2, #20]
 8013626:	1d01      	adds	r1, r0, #4
 8013628:	4618      	mov	r0, r3
 801362a:	4710      	bx	r2

0801362c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801362c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8013630:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8013634:	4b03      	ldr	r3, [pc, #12]	; (8013644 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 8013636:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801363a:	bf08      	it	eq
 801363c:	2300      	moveq	r3, #0
 801363e:	4308      	orrs	r0, r1
 8013640:	4318      	orrs	r0, r3
 8013642:	4770      	bx	lr
 8013644:	fffffe00 	.word	0xfffffe00

08013648 <_ZN8touchgfx9GlyphNode6setTopEs>:
 8013648:	7b43      	ldrb	r3, [r0, #13]
 801364a:	7201      	strb	r1, [r0, #8]
 801364c:	b289      	uxth	r1, r1
 801364e:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 8013652:	05ca      	lsls	r2, r1, #23
 8013654:	bf48      	it	mi
 8013656:	f043 0320 	orrmi.w	r3, r3, #32
 801365a:	7343      	strb	r3, [r0, #13]
 801365c:	058b      	lsls	r3, r1, #22
 801365e:	bf42      	ittt	mi
 8013660:	7b43      	ldrbmi	r3, [r0, #13]
 8013662:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8013666:	7343      	strbmi	r3, [r0, #13]
 8013668:	4770      	bx	lr

0801366a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801366a:	b530      	push	{r4, r5, lr}
 801366c:	2500      	movs	r5, #0
 801366e:	2401      	movs	r4, #1
 8013670:	6843      	ldr	r3, [r0, #4]
 8013672:	b913      	cbnz	r3, 801367a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8013674:	6803      	ldr	r3, [r0, #0]
 8013676:	b1f3      	cbz	r3, 80136b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8013678:	6043      	str	r3, [r0, #4]
 801367a:	7c03      	ldrb	r3, [r0, #16]
 801367c:	b143      	cbz	r3, 8013690 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801367e:	68c3      	ldr	r3, [r0, #12]
 8013680:	b12b      	cbz	r3, 801368e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013682:	881a      	ldrh	r2, [r3, #0]
 8013684:	b11a      	cbz	r2, 801368e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013686:	1c9a      	adds	r2, r3, #2
 8013688:	60c2      	str	r2, [r0, #12]
 801368a:	8818      	ldrh	r0, [r3, #0]
 801368c:	bd30      	pop	{r4, r5, pc}
 801368e:	7405      	strb	r5, [r0, #16]
 8013690:	6843      	ldr	r3, [r0, #4]
 8013692:	8819      	ldrh	r1, [r3, #0]
 8013694:	b179      	cbz	r1, 80136b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8013696:	1c9a      	adds	r2, r3, #2
 8013698:	2902      	cmp	r1, #2
 801369a:	6042      	str	r2, [r0, #4]
 801369c:	d1f5      	bne.n	801368a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801369e:	6883      	ldr	r3, [r0, #8]
 80136a0:	1d1a      	adds	r2, r3, #4
 80136a2:	6082      	str	r2, [r0, #8]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	60c3      	str	r3, [r0, #12]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d0e1      	beq.n	8013670 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80136ac:	881b      	ldrh	r3, [r3, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d0de      	beq.n	8013670 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80136b2:	7404      	strb	r4, [r0, #16]
 80136b4:	e7dc      	b.n	8013670 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80136b6:	2000      	movs	r0, #0
 80136b8:	e7e8      	b.n	801368c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080136ba <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80136ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136bc:	4605      	mov	r5, r0
 80136be:	4608      	mov	r0, r1
 80136c0:	b1e9      	cbz	r1, 80136fe <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80136c2:	f105 0440 	add.w	r4, r5, #64	; 0x40
 80136c6:	460b      	mov	r3, r1
 80136c8:	f101 0708 	add.w	r7, r1, #8
 80136cc:	4622      	mov	r2, r4
 80136ce:	6818      	ldr	r0, [r3, #0]
 80136d0:	6859      	ldr	r1, [r3, #4]
 80136d2:	4626      	mov	r6, r4
 80136d4:	c603      	stmia	r6!, {r0, r1}
 80136d6:	3308      	adds	r3, #8
 80136d8:	42bb      	cmp	r3, r7
 80136da:	4634      	mov	r4, r6
 80136dc:	d1f7      	bne.n	80136ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80136de:	6818      	ldr	r0, [r3, #0]
 80136e0:	6030      	str	r0, [r6, #0]
 80136e2:	889b      	ldrh	r3, [r3, #4]
 80136e4:	80b3      	strh	r3, [r6, #4]
 80136e6:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 80136ea:	015b      	lsls	r3, r3, #5
 80136ec:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80136f0:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80136f4:	430b      	orrs	r3, r1
 80136f6:	425b      	negs	r3, r3
 80136f8:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80136fc:	4610      	mov	r0, r2
 80136fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013700 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	460c      	mov	r4, r1
 8013704:	6811      	ldr	r1, [r2, #0]
 8013706:	4610      	mov	r0, r2
 8013708:	68cd      	ldr	r5, [r1, #12]
 801370a:	4619      	mov	r1, r3
 801370c:	47a8      	blx	r5
 801370e:	2800      	cmp	r0, #0
 8013710:	bf08      	it	eq
 8013712:	4620      	moveq	r0, r4
 8013714:	bd38      	pop	{r3, r4, r5, pc}

08013716 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8013716:	b570      	push	{r4, r5, r6, lr}
 8013718:	8810      	ldrh	r0, [r2, #0]
 801371a:	4298      	cmp	r0, r3
 801371c:	d817      	bhi.n	801374e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801371e:	1e48      	subs	r0, r1, #1
 8013720:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8013724:	4298      	cmp	r0, r3
 8013726:	d312      	bcc.n	801374e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013728:	2400      	movs	r4, #0
 801372a:	428c      	cmp	r4, r1
 801372c:	d20f      	bcs.n	801374e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801372e:	1860      	adds	r0, r4, r1
 8013730:	1040      	asrs	r0, r0, #1
 8013732:	0085      	lsls	r5, r0, #2
 8013734:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8013738:	42b3      	cmp	r3, r6
 801373a:	d902      	bls.n	8013742 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801373c:	3001      	adds	r0, #1
 801373e:	b284      	uxth	r4, r0
 8013740:	e7f3      	b.n	801372a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013742:	d102      	bne.n	801374a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 8013744:	442a      	add	r2, r5
 8013746:	8850      	ldrh	r0, [r2, #2]
 8013748:	bd70      	pop	{r4, r5, r6, pc}
 801374a:	b281      	uxth	r1, r0
 801374c:	e7ed      	b.n	801372a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801374e:	2000      	movs	r0, #0
 8013750:	e7fa      	b.n	8013748 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08013754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8013754:	b510      	push	{r4, lr}
 8013756:	8ac3      	ldrh	r3, [r0, #22]
 8013758:	428b      	cmp	r3, r1
 801375a:	d805      	bhi.n	8013768 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801375c:	4b07      	ldr	r3, [pc, #28]	; (801377c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801375e:	4a08      	ldr	r2, [pc, #32]	; (8013780 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 8013760:	4808      	ldr	r0, [pc, #32]	; (8013784 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 8013762:	21fd      	movs	r1, #253	; 0xfd
 8013764:	f00c fc30 	bl	801ffc8 <__assert_func>
 8013768:	8a83      	ldrh	r3, [r0, #20]
 801376a:	240a      	movs	r4, #10
 801376c:	4419      	add	r1, r3
 801376e:	fbb1 f3f4 	udiv	r3, r1, r4
 8013772:	fb04 1113 	mls	r1, r4, r3, r1
 8013776:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801377a:	bd10      	pop	{r4, pc}
 801377c:	08023101 	.word	0x08023101
 8013780:	08023530 	.word	0x08023530
 8013784:	0802310f 	.word	0x0802310f

08013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8013788:	b508      	push	{r3, lr}
 801378a:	8ac3      	ldrh	r3, [r0, #22]
 801378c:	428b      	cmp	r3, r1
 801378e:	d805      	bhi.n	801379c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 8013790:	4b07      	ldr	r3, [pc, #28]	; (80137b0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 8013792:	4a08      	ldr	r2, [pc, #32]	; (80137b4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8013794:	4808      	ldr	r0, [pc, #32]	; (80137b8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8013796:	21d3      	movs	r1, #211	; 0xd3
 8013798:	f00c fc16 	bl	801ffc8 <__assert_func>
 801379c:	8a83      	ldrh	r3, [r0, #20]
 801379e:	220a      	movs	r2, #10
 80137a0:	4419      	add	r1, r3
 80137a2:	fbb1 f3f2 	udiv	r3, r1, r2
 80137a6:	fb02 1113 	mls	r1, r2, r3, r1
 80137aa:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80137ae:	bd08      	pop	{r3, pc}
 80137b0:	08023101 	.word	0x08023101
 80137b4:	08023280 	.word	0x08023280
 80137b8:	0802310f 	.word	0x0802310f

080137bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80137bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c0:	4604      	mov	r4, r0
 80137c2:	4688      	mov	r8, r1
 80137c4:	4615      	mov	r5, r2
 80137c6:	b94a      	cbnz	r2, 80137dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 80137c8:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 80137cc:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80137d0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80137d4:	4691      	mov	r9, r2
 80137d6:	4648      	mov	r0, r9
 80137d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137dc:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80137e0:	8892      	ldrh	r2, [r2, #4]
 80137e2:	462b      	mov	r3, r5
 80137e4:	f105 0c08 	add.w	ip, r5, #8
 80137e8:	46b3      	mov	fp, r6
 80137ea:	6818      	ldr	r0, [r3, #0]
 80137ec:	6859      	ldr	r1, [r3, #4]
 80137ee:	4637      	mov	r7, r6
 80137f0:	c703      	stmia	r7!, {r0, r1}
 80137f2:	3308      	adds	r3, #8
 80137f4:	4563      	cmp	r3, ip
 80137f6:	463e      	mov	r6, r7
 80137f8:	d1f7      	bne.n	80137ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 80137fa:	6818      	ldr	r0, [r3, #0]
 80137fc:	6038      	str	r0, [r7, #0]
 80137fe:	889b      	ldrh	r3, [r3, #4]
 8013800:	80bb      	strh	r3, [r7, #4]
 8013802:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 8013806:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801380a:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 801380e:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 8013812:	18d3      	adds	r3, r2, r3
 8013814:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 8013818:	b298      	uxth	r0, r3
 801381a:	ea4a 0a01 	orr.w	sl, sl, r1
 801381e:	281d      	cmp	r0, #29
 8013820:	fa1f f68a 	uxth.w	r6, sl
 8013824:	46d9      	mov	r9, fp
 8013826:	d842      	bhi.n	80138ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 8013828:	2301      	movs	r3, #1
 801382a:	4950      	ldr	r1, [pc, #320]	; (801396c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b0>)
 801382c:	4083      	lsls	r3, r0
 801382e:	420b      	tst	r3, r1
 8013830:	ea4f 0aea 	mov.w	sl, sl, asr #3
 8013834:	d114      	bne.n	8013860 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8013836:	f413 7f60 	tst.w	r3, #896	; 0x380
 801383a:	d03c      	beq.n	80138b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 801383c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8013840:	fa1f fa8a 	uxth.w	sl, sl
 8013844:	eba1 010a 	sub.w	r1, r1, sl
 8013848:	4658      	mov	r0, fp
 801384a:	b209      	sxth	r1, r1
 801384c:	f7ff fefc 	bl	8013648 <_ZN8touchgfx9GlyphNode6setTopEs>
 8013850:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8013854:	1b86      	subs	r6, r0, r6
 8013856:	eba6 0a0a 	sub.w	sl, r6, sl
 801385a:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801385e:	e7ba      	b.n	80137d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8013860:	2100      	movs	r1, #0
 8013862:	f104 001a 	add.w	r0, r4, #26
 8013866:	f7ff ff8f 	bl	8013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801386a:	f640 6333 	movw	r3, #3635	; 0xe33
 801386e:	4298      	cmp	r0, r3
 8013870:	4601      	mov	r1, r0
 8013872:	d10a      	bne.n	801388a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xce>
 8013874:	f8d8 3000 	ldr.w	r3, [r8]
 8013878:	4640      	mov	r0, r8
 801387a:	68db      	ldr	r3, [r3, #12]
 801387c:	4798      	blx	r3
 801387e:	7b41      	ldrb	r1, [r0, #13]
 8013880:	7a00      	ldrb	r0, [r0, #8]
 8013882:	f7ff fed3 	bl	801362c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8013886:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801388a:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801388e:	4431      	add	r1, r6
 8013890:	4451      	add	r1, sl
 8013892:	b209      	sxth	r1, r1
 8013894:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8013898:	4658      	mov	r0, fp
 801389a:	f7ff fed5 	bl	8013648 <_ZN8touchgfx9GlyphNode6setTopEs>
 801389e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80138a2:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80138a6:	1a9b      	subs	r3, r3, r2
 80138a8:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 80138ac:	e793      	b.n	80137d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80138ae:	f640 631b 	movw	r3, #3611	; 0xe1b
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d005      	beq.n	80138c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x106>
 80138b6:	f022 0302 	bic.w	r3, r2, #2
 80138ba:	f640 611d 	movw	r1, #3613	; 0xe1d
 80138be:	428b      	cmp	r3, r1
 80138c0:	d119      	bne.n	80138f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 80138c2:	1e53      	subs	r3, r2, #1
 80138c4:	b29b      	uxth	r3, r3
 80138c6:	4642      	mov	r2, r8
 80138c8:	4629      	mov	r1, r5
 80138ca:	4620      	mov	r0, r4
 80138cc:	f7ff ff18 	bl	8013700 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80138d0:	7b41      	ldrb	r1, [r0, #13]
 80138d2:	7a00      	ldrb	r0, [r0, #8]
 80138d4:	f7ff feaa 	bl	801362c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80138d8:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 80138dc:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80138e0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80138e4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80138e8:	4313      	orrs	r3, r2
 80138ea:	115a      	asrs	r2, r3, #5
 80138ec:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80138f0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80138f4:	e02d      	b.n	8013952 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x196>
 80138f6:	4639      	mov	r1, r7
 80138f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80138fc:	f7ff fe96 	bl	801362c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8013900:	f640 6109 	movw	r1, #3593	; 0xe09
 8013904:	f022 0310 	bic.w	r3, r2, #16
 8013908:	428b      	cmp	r3, r1
 801390a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801390e:	d003      	beq.n	8013918 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 8013910:	f640 6313 	movw	r3, #3603	; 0xe13
 8013914:	429a      	cmp	r2, r3
 8013916:	d126      	bne.n	8013966 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1aa>
 8013918:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801391c:	b27f      	sxtb	r7, r7
 801391e:	f407 7780 	and.w	r7, r7, #256	; 0x100
 8013922:	431f      	orrs	r7, r3
 8013924:	f640 6313 	movw	r3, #3603	; 0xe13
 8013928:	429a      	cmp	r2, r3
 801392a:	bf1a      	itte	ne
 801392c:	f102 33ff 	addne.w	r3, r2, #4294967295
 8013930:	b29b      	uxthne	r3, r3
 8013932:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8013936:	4642      	mov	r2, r8
 8013938:	4629      	mov	r1, r5
 801393a:	4620      	mov	r0, r4
 801393c:	f7ff fee0 	bl	8013700 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013940:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8013944:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013948:	7a83      	ldrb	r3, [r0, #10]
 801394a:	4313      	orrs	r3, r2
 801394c:	1aff      	subs	r7, r7, r3
 801394e:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 8013952:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8013956:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801395a:	f7ff fe67 	bl	801362c <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801395e:	1b80      	subs	r0, r0, r6
 8013960:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8013964:	e737      	b.n	80137d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8013966:	2300      	movs	r3, #0
 8013968:	e7c2      	b.n	80138f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x134>
 801396a:	bf00      	nop
 801396c:	3fc00079 	.word	0x3fc00079

08013970 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8013970:	3a01      	subs	r2, #1
 8013972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013976:	b292      	uxth	r2, r2
 8013978:	460c      	mov	r4, r1
 801397a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801397e:	42b2      	cmp	r2, r6
 8013980:	d018      	beq.n	80139b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 8013982:	8b01      	ldrh	r1, [r0, #24]
 8013984:	f834 5b02 	ldrh.w	r5, [r4], #2
 8013988:	4291      	cmp	r1, r2
 801398a:	d805      	bhi.n	8013998 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 801398c:	4b14      	ldr	r3, [pc, #80]	; (80139e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801398e:	4a15      	ldr	r2, [pc, #84]	; (80139e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 8013990:	4815      	ldr	r0, [pc, #84]	; (80139e8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 8013992:	21d3      	movs	r1, #211	; 0xd3
 8013994:	f00c fb18 	bl	801ffc8 <__assert_func>
 8013998:	8ac1      	ldrh	r1, [r0, #22]
 801399a:	4411      	add	r1, r2
 801399c:	f001 0101 	and.w	r1, r1, #1
 80139a0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80139a4:	3a01      	subs	r2, #1
 80139a6:	8a49      	ldrh	r1, [r1, #18]
 80139a8:	428d      	cmp	r5, r1
 80139aa:	b292      	uxth	r2, r2
 80139ac:	d0e7      	beq.n	801397e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 80139ae:	2000      	movs	r0, #0
 80139b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b4:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 80139b8:	2600      	movs	r6, #0
 80139ba:	441f      	add	r7, r3
 80139bc:	f100 051a 	add.w	r5, r0, #26
 80139c0:	b2b1      	uxth	r1, r6
 80139c2:	42b9      	cmp	r1, r7
 80139c4:	da09      	bge.n	80139da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6a>
 80139c6:	4628      	mov	r0, r5
 80139c8:	f7ff fede 	bl	8013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 80139cc:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 80139d0:	4540      	cmp	r0, r8
 80139d2:	f106 0601 	add.w	r6, r6, #1
 80139d6:	d0f3      	beq.n	80139c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 80139d8:	e7e9      	b.n	80139ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 80139da:	2001      	movs	r0, #1
 80139dc:	e7e8      	b.n	80139b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 80139de:	bf00      	nop
 80139e0:	08023101 	.word	0x08023101
 80139e4:	08023690 	.word	0x08023690
 80139e8:	0802310f 	.word	0x0802310f

080139ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 80139ec:	b538      	push	{r3, r4, r5, lr}
 80139ee:	8ac3      	ldrh	r3, [r0, #22]
 80139f0:	428b      	cmp	r3, r1
 80139f2:	d205      	bcs.n	8013a00 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 80139f4:	4b08      	ldr	r3, [pc, #32]	; (8013a18 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 80139f6:	4a09      	ldr	r2, [pc, #36]	; (8013a1c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 80139f8:	4809      	ldr	r0, [pc, #36]	; (8013a20 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 80139fa:	21d8      	movs	r1, #216	; 0xd8
 80139fc:	f00c fae4 	bl	801ffc8 <__assert_func>
 8013a00:	8a82      	ldrh	r2, [r0, #20]
 8013a02:	250a      	movs	r5, #10
 8013a04:	440a      	add	r2, r1
 8013a06:	1a5b      	subs	r3, r3, r1
 8013a08:	fbb2 f4f5 	udiv	r4, r2, r5
 8013a0c:	fb05 2214 	mls	r2, r5, r4, r2
 8013a10:	8282      	strh	r2, [r0, #20]
 8013a12:	82c3      	strh	r3, [r0, #22]
 8013a14:	bd38      	pop	{r3, r4, r5, pc}
 8013a16:	bf00      	nop
 8013a18:	080230f5 	.word	0x080230f5
 8013a1c:	080234ac 	.word	0x080234ac
 8013a20:	0802310f 	.word	0x0802310f

08013a24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	8ac3      	ldrh	r3, [r0, #22]
 8013a28:	2b09      	cmp	r3, #9
 8013a2a:	d905      	bls.n	8013a38 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 8013a2c:	4b08      	ldr	r3, [pc, #32]	; (8013a50 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 8013a2e:	4a09      	ldr	r2, [pc, #36]	; (8013a54 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 8013a30:	4809      	ldr	r0, [pc, #36]	; (8013a58 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 8013a32:	21f7      	movs	r1, #247	; 0xf7
 8013a34:	f00c fac8 	bl	801ffc8 <__assert_func>
 8013a38:	8a82      	ldrh	r2, [r0, #20]
 8013a3a:	250a      	movs	r5, #10
 8013a3c:	441a      	add	r2, r3
 8013a3e:	fbb2 f4f5 	udiv	r4, r2, r5
 8013a42:	fb05 2214 	mls	r2, r5, r4, r2
 8013a46:	3301      	adds	r3, #1
 8013a48:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 8013a4c:	82c3      	strh	r3, [r0, #22]
 8013a4e:	bd38      	pop	{r3, r4, r5, pc}
 8013a50:	080230e9 	.word	0x080230e9
 8013a54:	080233fd 	.word	0x080233fd
 8013a58:	0802310f 	.word	0x0802310f

08013a5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4604      	mov	r4, r0
 8013a60:	f100 051a 	add.w	r5, r0, #26
 8013a64:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013a66:	2b0a      	cmp	r3, #10
 8013a68:	d01c      	beq.n	8013aa4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8013a6a:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8013a6c:	b962      	cbnz	r2, 8013a88 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 8013a6e:	f104 051a 	add.w	r5, r4, #26
 8013a72:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013a74:	2b0a      	cmp	r3, #10
 8013a76:	d015      	beq.n	8013aa4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7ff fdf6 	bl	801366a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8013a7e:	4601      	mov	r1, r0
 8013a80:	4628      	mov	r0, r5
 8013a82:	f7ff ffcf 	bl	8013a24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8013a86:	e7f4      	b.n	8013a72 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8013a88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013a8a:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 8013a8e:	3301      	adds	r3, #1
 8013a90:	f003 0301 	and.w	r3, r3, #1
 8013a94:	3a01      	subs	r2, #1
 8013a96:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8013a98:	86e3      	strh	r3, [r4, #54]	; 0x36
 8013a9a:	8722      	strh	r2, [r4, #56]	; 0x38
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f7ff ffc1 	bl	8013a24 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8013aa2:	e7df      	b.n	8013a64 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8013aa4:	bd38      	pop	{r3, r4, r5, pc}
	...

08013aa8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	b510      	push	{r4, lr}
 8013aac:	6043      	str	r3, [r0, #4]
 8013aae:	60c3      	str	r3, [r0, #12]
 8013ab0:	7403      	strb	r3, [r0, #16]
 8013ab2:	8603      	strh	r3, [r0, #48]	; 0x30
 8013ab4:	8303      	strh	r3, [r0, #24]
 8013ab6:	8703      	strh	r3, [r0, #56]	; 0x38
 8013ab8:	4604      	mov	r4, r0
 8013aba:	f7ff ffcf 	bl	8013a5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013abe:	4a0a      	ldr	r2, [pc, #40]	; (8013ae8 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 8013ac0:	6813      	ldr	r3, [r2, #0]
 8013ac2:	4611      	mov	r1, r2
 8013ac4:	b913      	cbnz	r3, 8013acc <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8013ac6:	6852      	ldr	r2, [r2, #4]
 8013ac8:	07d0      	lsls	r0, r2, #31
 8013aca:	d50b      	bpl.n	8013ae4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8013acc:	6849      	ldr	r1, [r1, #4]
 8013ace:	104a      	asrs	r2, r1, #1
 8013ad0:	07c9      	lsls	r1, r1, #31
 8013ad2:	eb04 0002 	add.w	r0, r4, r2
 8013ad6:	bf48      	it	mi
 8013ad8:	58a2      	ldrmi	r2, [r4, r2]
 8013ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ade:	bf48      	it	mi
 8013ae0:	58d3      	ldrmi	r3, [r2, r3]
 8013ae2:	4718      	bx	r3
 8013ae4:	bd10      	pop	{r4, pc}
 8013ae6:	bf00      	nop
 8013ae8:	20008f38 	.word	0x20008f38

08013aec <_ZN8touchgfx12TextProviderC1Ev>:
 8013aec:	b510      	push	{r4, lr}
 8013aee:	2300      	movs	r3, #0
 8013af0:	2201      	movs	r2, #1
 8013af2:	4604      	mov	r4, r0
 8013af4:	e9c0 3300 	strd	r3, r3, [r0]
 8013af8:	60c3      	str	r3, [r0, #12]
 8013afa:	7403      	strb	r3, [r0, #16]
 8013afc:	82c3      	strh	r3, [r0, #22]
 8013afe:	8303      	strh	r3, [r0, #24]
 8013b00:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013b02:	8603      	strh	r3, [r0, #48]	; 0x30
 8013b04:	86c3      	strh	r3, [r0, #54]	; 0x36
 8013b06:	8703      	strh	r3, [r0, #56]	; 0x38
 8013b08:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013b0a:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8013b0e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 8013b12:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8013b16:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 8013b1a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 8013b1e:	f7ff ffc3 	bl	8013aa8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8013b22:	4620      	mov	r0, r4
 8013b24:	bd10      	pop	{r4, pc}

08013b26 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 8013b26:	b410      	push	{r4}
 8013b28:	6082      	str	r2, [r0, #8]
 8013b2a:	6001      	str	r1, [r0, #0]
 8013b2c:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013b2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b32:	f7ff bfb9 	b.w	8013aa8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

08013b38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 8013b38:	b508      	push	{r3, lr}
 8013b3a:	88c2      	ldrh	r2, [r0, #6]
 8013b3c:	440a      	add	r2, r1
 8013b3e:	2a02      	cmp	r2, #2
 8013b40:	dd05      	ble.n	8013b4e <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 8013b42:	4b06      	ldr	r3, [pc, #24]	; (8013b5c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 8013b44:	4a06      	ldr	r2, [pc, #24]	; (8013b60 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 8013b46:	4807      	ldr	r0, [pc, #28]	; (8013b64 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 8013b48:	21ec      	movs	r1, #236	; 0xec
 8013b4a:	f00c fa3d 	bl	801ffc8 <__assert_func>
 8013b4e:	8883      	ldrh	r3, [r0, #4]
 8013b50:	80c2      	strh	r2, [r0, #6]
 8013b52:	1a59      	subs	r1, r3, r1
 8013b54:	f001 0101 	and.w	r1, r1, #1
 8013b58:	8081      	strh	r1, [r0, #4]
 8013b5a:	bd08      	pop	{r3, pc}
 8013b5c:	0802313b 	.word	0x0802313b
 8013b60:	08023609 	.word	0x08023609
 8013b64:	0802310f 	.word	0x0802310f

08013b68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8013b68:	b508      	push	{r3, lr}
 8013b6a:	88c3      	ldrh	r3, [r0, #6]
 8013b6c:	428b      	cmp	r3, r1
 8013b6e:	d805      	bhi.n	8013b7c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8013b70:	4b06      	ldr	r3, [pc, #24]	; (8013b8c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8013b72:	4a07      	ldr	r2, [pc, #28]	; (8013b90 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8013b74:	4807      	ldr	r0, [pc, #28]	; (8013b94 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8013b76:	21fd      	movs	r1, #253	; 0xfd
 8013b78:	f00c fa26 	bl	801ffc8 <__assert_func>
 8013b7c:	8883      	ldrh	r3, [r0, #4]
 8013b7e:	4419      	add	r1, r3
 8013b80:	f001 0101 	and.w	r1, r1, #1
 8013b84:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8013b88:	bd08      	pop	{r3, pc}
 8013b8a:	bf00      	nop
 8013b8c:	08023101 	.word	0x08023101
 8013b90:	08023761 	.word	0x08023761
 8013b94:	0802310f 	.word	0x0802310f

08013b98 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8013b98:	b570      	push	{r4, r5, r6, lr}
 8013b9a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	b92a      	cbnz	r2, 8013bac <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8013ba0:	4b12      	ldr	r3, [pc, #72]	; (8013bec <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8013ba2:	4a13      	ldr	r2, [pc, #76]	; (8013bf0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8013ba4:	4813      	ldr	r0, [pc, #76]	; (8013bf4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8013ba6:	21de      	movs	r1, #222	; 0xde
 8013ba8:	f00c fa0e 	bl	801ffc8 <__assert_func>
 8013bac:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013bae:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8013bb2:	260a      	movs	r6, #10
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	8b4d      	ldrh	r5, [r1, #26]
 8013bb8:	fbb3 f1f6 	udiv	r1, r3, r6
 8013bbc:	3a01      	subs	r2, #1
 8013bbe:	fb06 3311 	mls	r3, r6, r1, r3
 8013bc2:	8602      	strh	r2, [r0, #48]	; 0x30
 8013bc4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013bc6:	f7ff ff49 	bl	8013a5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013bca:	8b23      	ldrh	r3, [r4, #24]
 8013bcc:	2b02      	cmp	r3, #2
 8013bce:	bf04      	itt	eq
 8013bd0:	2301      	moveq	r3, #1
 8013bd2:	8323      	strheq	r3, [r4, #24]
 8013bd4:	3412      	adds	r4, #18
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	2101      	movs	r1, #1
 8013bda:	f7ff ffad 	bl	8013b38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8013bde:	4620      	mov	r0, r4
 8013be0:	462a      	mov	r2, r5
 8013be2:	2100      	movs	r1, #0
 8013be4:	f7ff ffc0 	bl	8013b68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8013be8:	4628      	mov	r0, r5
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	080230e0 	.word	0x080230e0
 8013bf0:	08023352 	.word	0x08023352
 8013bf4:	0802310f 	.word	0x0802310f

08013bf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8013bf8:	428a      	cmp	r2, r1
 8013bfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfe:	4604      	mov	r4, r0
 8013c00:	460e      	mov	r6, r1
 8013c02:	4615      	mov	r5, r2
 8013c04:	469a      	mov	sl, r3
 8013c06:	d92b      	bls.n	8013c60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8013c08:	1a57      	subs	r7, r2, r1
 8013c0a:	b2bf      	uxth	r7, r7
 8013c0c:	f04f 0800 	mov.w	r8, #0
 8013c10:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8013c14:	f04f 0b0a 	mov.w	fp, #10
 8013c18:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013c1a:	b92b      	cbnz	r3, 8013c28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8013c1c:	4b24      	ldr	r3, [pc, #144]	; (8013cb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8013c1e:	4a25      	ldr	r2, [pc, #148]	; (8013cb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8013c20:	21e6      	movs	r1, #230	; 0xe6
 8013c22:	4825      	ldr	r0, [pc, #148]	; (8013cb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8013c24:	f00c f9d0 	bl	801ffc8 <__assert_func>
 8013c28:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8013c2a:	3b01      	subs	r3, #1
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	441a      	add	r2, r3
 8013c30:	8623      	strh	r3, [r4, #48]	; 0x30
 8013c32:	fbb2 f3fb 	udiv	r3, r2, fp
 8013c36:	fb0b 2313 	mls	r3, fp, r3, r2
 8013c3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013c3e:	2101      	movs	r1, #1
 8013c40:	8b5a      	ldrh	r2, [r3, #26]
 8013c42:	9201      	str	r2, [sp, #4]
 8013c44:	4648      	mov	r0, r9
 8013c46:	f7ff ff77 	bl	8013b38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8013c4a:	f108 0801 	add.w	r8, r8, #1
 8013c4e:	9a01      	ldr	r2, [sp, #4]
 8013c50:	2100      	movs	r1, #0
 8013c52:	4648      	mov	r0, r9
 8013c54:	f7ff ff88 	bl	8013b68 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8013c58:	fa1f f388 	uxth.w	r3, r8
 8013c5c:	429f      	cmp	r7, r3
 8013c5e:	d8db      	bhi.n	8013c18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8013c60:	f104 071a 	add.w	r7, r4, #26
 8013c64:	4631      	mov	r1, r6
 8013c66:	4638      	mov	r0, r7
 8013c68:	f7ff fec0 	bl	80139ec <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8013c6c:	260a      	movs	r6, #10
 8013c6e:	b1c5      	cbz	r5, 8013ca2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8013c70:	3d01      	subs	r5, #1
 8013c72:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013c74:	b2ad      	uxth	r5, r5
 8013c76:	2b09      	cmp	r3, #9
 8013c78:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8013c7c:	d903      	bls.n	8013c86 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8013c7e:	4b0f      	ldr	r3, [pc, #60]	; (8013cbc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8013c80:	4a0f      	ldr	r2, [pc, #60]	; (8013cc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8013c82:	21ec      	movs	r1, #236	; 0xec
 8013c84:	e7cd      	b.n	8013c22 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8013c86:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8013c88:	3109      	adds	r1, #9
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	fbb1 f0f6 	udiv	r0, r1, r6
 8013c90:	fb06 1110 	mls	r1, r6, r0, r1
 8013c94:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8013c96:	8623      	strh	r3, [r4, #48]	; 0x30
 8013c98:	2100      	movs	r1, #0
 8013c9a:	4638      	mov	r0, r7
 8013c9c:	f7ff fd5a 	bl	8013754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8013ca0:	e7e5      	b.n	8013c6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	b003      	add	sp, #12
 8013ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013caa:	f7ff bed7 	b.w	8013a5c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8013cae:	bf00      	nop
 8013cb0:	080230e0 	.word	0x080230e0
 8013cb4:	080231d6 	.word	0x080231d6
 8013cb8:	0802310f 	.word	0x0802310f
 8013cbc:	0802313b 	.word	0x0802313b
 8013cc0:	0802314e 	.word	0x0802314e

08013cc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cc8:	4605      	mov	r5, r0
 8013cca:	4616      	mov	r6, r2
 8013ccc:	1c8c      	adds	r4, r1, #2
 8013cce:	8809      	ldrh	r1, [r1, #0]
 8013cd0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8013cd4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8013cd8:	42b3      	cmp	r3, r6
 8013cda:	d124      	bne.n	8013d26 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8013cdc:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8013ce0:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8013ce4:	f001 070f 	and.w	r7, r1, #15
 8013ce8:	f8cd 8000 	str.w	r8, [sp]
 8013cec:	464b      	mov	r3, r9
 8013cee:	4652      	mov	r2, sl
 8013cf0:	4621      	mov	r1, r4
 8013cf2:	4628      	mov	r0, r5
 8013cf4:	f7ff fe3c 	bl	8013970 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8013cf8:	4683      	mov	fp, r0
 8013cfa:	b168      	cbz	r0, 8013d18 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8013cfc:	eb0a 0109 	add.w	r1, sl, r9
 8013d00:	4441      	add	r1, r8
 8013d02:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8013d06:	463a      	mov	r2, r7
 8013d08:	4649      	mov	r1, r9
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	f7ff ff74 	bl	8013bf8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8013d10:	4658      	mov	r0, fp
 8013d12:	b003      	add	sp, #12
 8013d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d18:	eb07 010a 	add.w	r1, r7, sl
 8013d1c:	4449      	add	r1, r9
 8013d1e:	4441      	add	r1, r8
 8013d20:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8013d24:	e7d2      	b.n	8013ccc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8013d26:	f04f 0b00 	mov.w	fp, #0
 8013d2a:	e7f1      	b.n	8013d10 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08013d2c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8013d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d30:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8013d32:	886f      	ldrh	r7, [r5, #2]
 8013d34:	4604      	mov	r4, r0
 8013d36:	087f      	lsrs	r7, r7, #1
 8013d38:	260b      	movs	r6, #11
 8013d3a:	f100 091a 	add.w	r9, r0, #26
 8013d3e:	3e01      	subs	r6, #1
 8013d40:	d013      	beq.n	8013d6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8013d42:	2100      	movs	r1, #0
 8013d44:	4648      	mov	r0, r9
 8013d46:	f7ff fd1f 	bl	8013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8013d4a:	462a      	mov	r2, r5
 8013d4c:	4680      	mov	r8, r0
 8013d4e:	4603      	mov	r3, r0
 8013d50:	4639      	mov	r1, r7
 8013d52:	4620      	mov	r0, r4
 8013d54:	f7ff fcdf 	bl	8013716 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8013d58:	b138      	cbz	r0, 8013d6a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8013d5a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8013d5e:	4642      	mov	r2, r8
 8013d60:	4620      	mov	r0, r4
 8013d62:	f7ff ffaf 	bl	8013cc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8013d66:	2800      	cmp	r0, #0
 8013d68:	d1e9      	bne.n	8013d3e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8013d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8013d70:	b570      	push	{r4, r5, r6, lr}
 8013d72:	4b1e      	ldr	r3, [pc, #120]	; (8013dec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8013d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d78:	4604      	mov	r4, r0
 8013d7a:	f003 0501 	and.w	r5, r3, #1
 8013d7e:	b902      	cbnz	r2, 8013d82 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8013d80:	b165      	cbz	r5, 8013d9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8013d82:	105b      	asrs	r3, r3, #1
 8013d84:	f104 061a 	add.w	r6, r4, #26
 8013d88:	18e0      	adds	r0, r4, r3
 8013d8a:	b10d      	cbz	r5, 8013d90 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8013d8c:	58e3      	ldr	r3, [r4, r3]
 8013d8e:	589a      	ldr	r2, [r3, r2]
 8013d90:	4790      	blx	r2
 8013d92:	2100      	movs	r1, #0
 8013d94:	4602      	mov	r2, r0
 8013d96:	4630      	mov	r0, r6
 8013d98:	f7ff fcdc 	bl	8013754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8013d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013d9e:	b303      	cbz	r3, 8013de2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8013da0:	f104 051a 	add.w	r5, r4, #26
 8013da4:	2100      	movs	r1, #0
 8013da6:	4628      	mov	r0, r5
 8013da8:	f7ff fcee 	bl	8013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8013dac:	b1c8      	cbz	r0, 8013de2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8013dae:	4620      	mov	r0, r4
 8013db0:	f7ff ffbc 	bl	8013d2c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8013db4:	2101      	movs	r1, #1
 8013db6:	4628      	mov	r0, r5
 8013db8:	f7ff fce6 	bl	8013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8013dbc:	f640 133f 	movw	r3, #2367	; 0x93f
 8013dc0:	4298      	cmp	r0, r3
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	d10d      	bne.n	8013de2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f7ff fcdd 	bl	8013788 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8013dce:	2101      	movs	r1, #1
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f7ff fcbe 	bl	8013754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8013dd8:	4632      	mov	r2, r6
 8013dda:	2100      	movs	r1, #0
 8013ddc:	4628      	mov	r0, r5
 8013dde:	f7ff fcb9 	bl	8013754 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8013de2:	4620      	mov	r0, r4
 8013de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013de8:	f7ff bed6 	b.w	8013b98 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013dec:	20008f40 	.word	0x20008f40

08013df0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8013df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013df2:	4617      	mov	r7, r2
 8013df4:	461e      	mov	r6, r3
 8013df6:	4605      	mov	r5, r0
 8013df8:	f7ff ffba 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	4604      	mov	r4, r0
 8013e00:	68db      	ldr	r3, [r3, #12]
 8013e02:	4601      	mov	r1, r0
 8013e04:	4638      	mov	r0, r7
 8013e06:	4798      	blx	r3
 8013e08:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8013e10:	4602      	mov	r2, r0
 8013e12:	6030      	str	r0, [r6, #0]
 8013e14:	d813      	bhi.n	8013e3e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8013e16:	4639      	mov	r1, r7
 8013e18:	4628      	mov	r0, r5
 8013e1a:	f7ff fccf 	bl	80137bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013e1e:	6030      	str	r0, [r6, #0]
 8013e20:	6833      	ldr	r3, [r6, #0]
 8013e22:	b143      	cbz	r3, 8013e36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013e24:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8013e28:	7a9b      	ldrb	r3, [r3, #10]
 8013e2a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	bf0c      	ite	eq
 8013e32:	2301      	moveq	r3, #1
 8013e34:	2300      	movne	r3, #0
 8013e36:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e3e:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d0ec      	beq.n	8013e20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8013e46:	f640 1302 	movw	r3, #2306	; 0x902
 8013e4a:	429c      	cmp	r4, r3
 8013e4c:	d1e8      	bne.n	8013e20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8013e4e:	4601      	mov	r1, r0
 8013e50:	4628      	mov	r0, r5
 8013e52:	f7ff fc32 	bl	80136ba <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013e56:	e7e2      	b.n	8013e1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08013e58 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8013e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	4617      	mov	r7, r2
 8013e5e:	461e      	mov	r6, r3
 8013e60:	4605      	mov	r5, r0
 8013e62:	f7ff ff85 	bl	8013d70 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013e66:	683b      	ldr	r3, [r7, #0]
 8013e68:	4604      	mov	r4, r0
 8013e6a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8013e6e:	4601      	mov	r1, r0
 8013e70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e74:	4638      	mov	r0, r7
 8013e76:	47c0      	blx	r8
 8013e78:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8013e7c:	b29b      	uxth	r3, r3
 8013e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8013e80:	4602      	mov	r2, r0
 8013e82:	6030      	str	r0, [r6, #0]
 8013e84:	d814      	bhi.n	8013eb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8013e86:	4639      	mov	r1, r7
 8013e88:	4628      	mov	r0, r5
 8013e8a:	f7ff fc97 	bl	80137bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013e8e:	6030      	str	r0, [r6, #0]
 8013e90:	6833      	ldr	r3, [r6, #0]
 8013e92:	b143      	cbz	r3, 8013ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013e94:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8013e98:	7a9b      	ldrb	r3, [r3, #10]
 8013e9a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	bf0c      	ite	eq
 8013ea2:	2301      	moveq	r3, #1
 8013ea4:	2300      	movne	r3, #0
 8013ea6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013eaa:	4620      	mov	r0, r4
 8013eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013eb0:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d0eb      	beq.n	8013e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8013eb8:	f640 1302 	movw	r3, #2306	; 0x902
 8013ebc:	429c      	cmp	r4, r3
 8013ebe:	d1e7      	bne.n	8013e90 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8013ec0:	4601      	mov	r1, r0
 8013ec2:	4628      	mov	r0, r5
 8013ec4:	f7ff fbf9 	bl	80136ba <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013ec8:	e7e1      	b.n	8013e8e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

08013eca <_ZN8touchgfx7Unicode6strlenEPKt>:
 8013eca:	4602      	mov	r2, r0
 8013ecc:	b148      	cbz	r0, 8013ee2 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	b298      	uxth	r0, r3
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8013ed8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8013edc:	2900      	cmp	r1, #0
 8013ede:	d1f7      	bne.n	8013ed0 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8013ee0:	4770      	bx	lr
 8013ee2:	4770      	bx	lr

08013ee4 <_ZN8touchgfx7Unicode6strlenEPKc>:
 8013ee4:	b140      	cbz	r0, 8013ef8 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 8013ee6:	4602      	mov	r2, r0
 8013ee8:	1a13      	subs	r3, r2, r0
 8013eea:	f812 1b01 	ldrb.w	r1, [r2], #1
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	2900      	cmp	r1, #0
 8013ef2:	d1f9      	bne.n	8013ee8 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	4770      	bx	lr
 8013ef8:	4603      	mov	r3, r0
 8013efa:	e7fb      	b.n	8013ef4 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

08013efc <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8013efc:	b530      	push	{r4, r5, lr}
 8013efe:	4604      	mov	r4, r0
 8013f00:	b159      	cbz	r1, 8013f1a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8013f02:	b148      	cbz	r0, 8013f18 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8013f04:	2300      	movs	r3, #0
 8013f06:	b298      	uxth	r0, r3
 8013f08:	4282      	cmp	r2, r0
 8013f0a:	d905      	bls.n	8013f18 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8013f0c:	5ccd      	ldrb	r5, [r1, r3]
 8013f0e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8013f12:	3301      	adds	r3, #1
 8013f14:	2d00      	cmp	r5, #0
 8013f16:	d1f6      	bne.n	8013f06 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8013f18:	bd30      	pop	{r4, r5, pc}
 8013f1a:	4608      	mov	r0, r1
 8013f1c:	e7fc      	b.n	8013f18 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08013f1e <_ZN8touchgfx7Unicode4itoaElPtti>:
 8013f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f20:	4607      	mov	r7, r0
 8013f22:	b08b      	sub	sp, #44	; 0x2c
 8013f24:	4608      	mov	r0, r1
 8013f26:	b341      	cbz	r1, 8013f7a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8013f28:	1e99      	subs	r1, r3, #2
 8013f2a:	290e      	cmp	r1, #14
 8013f2c:	d825      	bhi.n	8013f7a <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8013f2e:	2100      	movs	r1, #0
 8013f30:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013f34:	463c      	mov	r4, r7
 8013f36:	261f      	movs	r6, #31
 8013f38:	f10d 0c04 	add.w	ip, sp, #4
 8013f3c:	fb94 fef3 	sdiv	lr, r4, r3
 8013f40:	fb03 441e 	mls	r4, r3, lr, r4
 8013f44:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8013f48:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8013f4c:	b2ec      	uxtb	r4, r5
 8013f4e:	2d09      	cmp	r5, #9
 8013f50:	bfd4      	ite	le
 8013f52:	3430      	addle	r4, #48	; 0x30
 8013f54:	3457      	addgt	r4, #87	; 0x57
 8013f56:	b2e4      	uxtb	r4, r4
 8013f58:	f80c 4006 	strb.w	r4, [ip, r6]
 8013f5c:	4674      	mov	r4, lr
 8013f5e:	1e71      	subs	r1, r6, #1
 8013f60:	b96c      	cbnz	r4, 8013f7e <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8013f62:	2f00      	cmp	r7, #0
 8013f64:	da05      	bge.n	8013f72 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8013f66:	ab0a      	add	r3, sp, #40	; 0x28
 8013f68:	4419      	add	r1, r3
 8013f6a:	232d      	movs	r3, #45	; 0x2d
 8013f6c:	f801 3c24 	strb.w	r3, [r1, #-36]
 8013f70:	1eb1      	subs	r1, r6, #2
 8013f72:	3101      	adds	r1, #1
 8013f74:	4461      	add	r1, ip
 8013f76:	f7ff ffc1 	bl	8013efc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8013f7a:	b00b      	add	sp, #44	; 0x2c
 8013f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f7e:	460e      	mov	r6, r1
 8013f80:	e7dc      	b.n	8013f3c <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08013f82 <_ZN8touchgfx7Unicode4atoiEPKt>:
 8013f82:	b510      	push	{r4, lr}
 8013f84:	b158      	cbz	r0, 8013f9e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8013f86:	1e82      	subs	r2, r0, #2
 8013f88:	210a      	movs	r1, #10
 8013f8a:	2000      	movs	r0, #0
 8013f8c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8013f90:	3b30      	subs	r3, #48	; 0x30
 8013f92:	b29c      	uxth	r4, r3
 8013f94:	2c09      	cmp	r4, #9
 8013f96:	d802      	bhi.n	8013f9e <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 8013f98:	fb01 3000 	mla	r0, r1, r0, r3
 8013f9c:	e7f6      	b.n	8013f8c <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 8013f9e:	bd10      	pop	{r4, pc}

08013fa0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 8013fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa4:	b085      	sub	sp, #20
 8013fa6:	f8d0 8000 	ldr.w	r8, [r0]
 8013faa:	9203      	str	r2, [sp, #12]
 8013fac:	468a      	mov	sl, r1
 8013fae:	4681      	mov	r9, r0
 8013fb0:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8013fb4:	9102      	str	r1, [sp, #8]
 8013fb6:	461c      	mov	r4, r3
 8013fb8:	4640      	mov	r0, r8
 8013fba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8013fbe:	9301      	str	r3, [sp, #4]
 8013fc0:	f7ff ff83 	bl	8013eca <_ZN8touchgfx7Unicode6strlenEPKt>
 8013fc4:	9a03      	ldr	r2, [sp, #12]
 8013fc6:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 8013fca:	8812      	ldrh	r2, [r2, #0]
 8013fcc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013fce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013fd0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8013fd2:	f1ba 0f00 	cmp.w	sl, #0
 8013fd6:	bf0c      	ite	eq
 8013fd8:	4684      	moveq	ip, r0
 8013fda:	f100 0c01 	addne.w	ip, r0, #1
 8013fde:	2a69      	cmp	r2, #105	; 0x69
 8013fe0:	fa1f fc8c 	uxth.w	ip, ip
 8013fe4:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8013fe8:	d004      	beq.n	8013ff4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8013fea:	d844      	bhi.n	8014076 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd6>
 8013fec:	2a58      	cmp	r2, #88	; 0x58
 8013fee:	d001      	beq.n	8013ff4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 8013ff0:	2a64      	cmp	r2, #100	; 0x64
 8013ff2:	d14b      	bne.n	801408c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 8013ff4:	b1a4      	cbz	r4, 8014020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8013ff6:	b956      	cbnz	r6, 801400e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8013ff8:	2801      	cmp	r0, #1
 8013ffa:	d108      	bne.n	801400e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x6e>
 8013ffc:	f8b8 2000 	ldrh.w	r2, [r8]
 8014000:	2a30      	cmp	r2, #48	; 0x30
 8014002:	bf02      	ittt	eq
 8014004:	f108 0202 	addeq.w	r2, r8, #2
 8014008:	f8c9 2000 	streq.w	r2, [r9]
 801400c:	4630      	moveq	r0, r6
 801400e:	45b4      	cmp	ip, r6
 8014010:	da3e      	bge.n	8014090 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf0>
 8014012:	b2b6      	uxth	r6, r6
 8014014:	eba6 040c 	sub.w	r4, r6, ip
 8014018:	b2a4      	uxth	r4, r4
 801401a:	46b4      	mov	ip, r6
 801401c:	f04f 0b00 	mov.w	fp, #0
 8014020:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8014024:	3a01      	subs	r2, #1
 8014026:	b169      	cbz	r1, 8014044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8014028:	9911      	ldr	r1, [sp, #68]	; 0x44
 801402a:	458c      	cmp	ip, r1
 801402c:	da09      	bge.n	8014042 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 801402e:	eba1 010c 	sub.w	r1, r1, ip
 8014032:	b289      	uxth	r1, r1
 8014034:	b933      	cbnz	r3, 8014044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8014036:	f1bb 0f00 	cmp.w	fp, #0
 801403a:	d02b      	beq.n	8014094 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801403c:	b350      	cbz	r0, 8014094 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf4>
 801403e:	440c      	add	r4, r1
 8014040:	b2a4      	uxth	r4, r4
 8014042:	2100      	movs	r1, #0
 8014044:	682b      	ldr	r3, [r5, #0]
 8014046:	4293      	cmp	r3, r2
 8014048:	da07      	bge.n	801405a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 801404a:	f1ba 0f00 	cmp.w	sl, #0
 801404e:	d004      	beq.n	801405a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xba>
 8014050:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 8014054:	682b      	ldr	r3, [r5, #0]
 8014056:	3301      	adds	r3, #1
 8014058:	602b      	str	r3, [r5, #0]
 801405a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 801405e:	b354      	cbz	r4, 80140b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 8014060:	682e      	ldr	r6, [r5, #0]
 8014062:	3c01      	subs	r4, #1
 8014064:	42b2      	cmp	r2, r6
 8014066:	b2a4      	uxth	r4, r4
 8014068:	dd25      	ble.n	80140b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801406a:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 801406e:	682b      	ldr	r3, [r5, #0]
 8014070:	3301      	adds	r3, #1
 8014072:	602b      	str	r3, [r5, #0]
 8014074:	e7f3      	b.n	801405e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xbe>
 8014076:	2a73      	cmp	r2, #115	; 0x73
 8014078:	d003      	beq.n	8014082 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe2>
 801407a:	2a78      	cmp	r2, #120	; 0x78
 801407c:	d0ba      	beq.n	8013ff4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x54>
 801407e:	2a6f      	cmp	r2, #111	; 0x6f
 8014080:	e7b7      	b.n	8013ff2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x52>
 8014082:	2c00      	cmp	r4, #0
 8014084:	d0cc      	beq.n	8014020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8014086:	42b0      	cmp	r0, r6
 8014088:	dd00      	ble.n	801408c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801408a:	b2b0      	uxth	r0, r6
 801408c:	2400      	movs	r4, #0
 801408e:	e7c7      	b.n	8014020 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x80>
 8014090:	2400      	movs	r4, #0
 8014092:	e7c3      	b.n	801401c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x7c>
 8014094:	2900      	cmp	r1, #0
 8014096:	d0d5      	beq.n	8014044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 8014098:	f04f 0c20 	mov.w	ip, #32
 801409c:	682e      	ldr	r6, [r5, #0]
 801409e:	2900      	cmp	r1, #0
 80140a0:	d0d0      	beq.n	8014044 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa4>
 80140a2:	3901      	subs	r1, #1
 80140a4:	4296      	cmp	r6, r2
 80140a6:	b289      	uxth	r1, r1
 80140a8:	dacb      	bge.n	8014042 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xa2>
 80140aa:	f827 c016 	strh.w	ip, [r7, r6, lsl #1]
 80140ae:	682b      	ldr	r3, [r5, #0]
 80140b0:	3301      	adds	r3, #1
 80140b2:	602b      	str	r3, [r5, #0]
 80140b4:	e7f2      	b.n	801409c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xfc>
 80140b6:	b198      	cbz	r0, 80140e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80140b8:	f8d9 3000 	ldr.w	r3, [r9]
 80140bc:	881c      	ldrh	r4, [r3, #0]
 80140be:	b17c      	cbz	r4, 80140e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80140c0:	682c      	ldr	r4, [r5, #0]
 80140c2:	3801      	subs	r0, #1
 80140c4:	42a2      	cmp	r2, r4
 80140c6:	b280      	uxth	r0, r0
 80140c8:	dd0a      	ble.n	80140e0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x140>
 80140ca:	1c9c      	adds	r4, r3, #2
 80140cc:	f8c9 4000 	str.w	r4, [r9]
 80140d0:	881c      	ldrh	r4, [r3, #0]
 80140d2:	682b      	ldr	r3, [r5, #0]
 80140d4:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 80140d8:	682b      	ldr	r3, [r5, #0]
 80140da:	3301      	adds	r3, #1
 80140dc:	602b      	str	r3, [r5, #0]
 80140de:	e7ea      	b.n	80140b6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 80140e0:	2620      	movs	r6, #32
 80140e2:	b151      	cbz	r1, 80140fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80140e4:	6828      	ldr	r0, [r5, #0]
 80140e6:	3901      	subs	r1, #1
 80140e8:	4282      	cmp	r2, r0
 80140ea:	b289      	uxth	r1, r1
 80140ec:	dd05      	ble.n	80140fa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x15a>
 80140ee:	f827 6010 	strh.w	r6, [r7, r0, lsl #1]
 80140f2:	682b      	ldr	r3, [r5, #0]
 80140f4:	3301      	adds	r3, #1
 80140f6:	602b      	str	r3, [r5, #0]
 80140f8:	e7f3      	b.n	80140e2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x142>
 80140fa:	b005      	add	sp, #20
 80140fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 8014100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014104:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8014108:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 801410c:	4604      	mov	r4, r0
 801410e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014110:	2000      	movs	r0, #0
 8014112:	8008      	strh	r0, [r1, #0]
 8014114:	f04f 0801 	mov.w	r8, #1
 8014118:	7010      	strb	r0, [r2, #0]
 801411a:	7018      	strb	r0, [r3, #0]
 801411c:	f88c 0000 	strb.w	r0, [ip]
 8014120:	f88e 0000 	strb.w	r0, [lr]
 8014124:	7030      	strb	r0, [r6, #0]
 8014126:	6820      	ldr	r0, [r4, #0]
 8014128:	8800      	ldrh	r0, [r0, #0]
 801412a:	b190      	cbz	r0, 8014152 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801412c:	282b      	cmp	r0, #43	; 0x2b
 801412e:	d001      	beq.n	8014134 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x34>
 8014130:	2820      	cmp	r0, #32
 8014132:	d104      	bne.n	801413e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3e>
 8014134:	8008      	strh	r0, [r1, #0]
 8014136:	6820      	ldr	r0, [r4, #0]
 8014138:	3002      	adds	r0, #2
 801413a:	6020      	str	r0, [r4, #0]
 801413c:	e7f3      	b.n	8014126 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x26>
 801413e:	282d      	cmp	r0, #45	; 0x2d
 8014140:	d102      	bne.n	8014148 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x48>
 8014142:	f882 8000 	strb.w	r8, [r2]
 8014146:	e7f6      	b.n	8014136 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8014148:	2823      	cmp	r0, #35	; 0x23
 801414a:	d102      	bne.n	8014152 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x52>
 801414c:	f883 8000 	strb.w	r8, [r3]
 8014150:	e7f1      	b.n	8014136 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x36>
 8014152:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014156:	2b09      	cmp	r3, #9
 8014158:	d901      	bls.n	801415e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x5e>
 801415a:	282a      	cmp	r0, #42	; 0x2a
 801415c:	d114      	bne.n	8014188 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 801415e:	2201      	movs	r2, #1
 8014160:	f88e 2000 	strb.w	r2, [lr]
 8014164:	6823      	ldr	r3, [r4, #0]
 8014166:	8819      	ldrh	r1, [r3, #0]
 8014168:	2930      	cmp	r1, #48	; 0x30
 801416a:	bf02      	ittt	eq
 801416c:	3302      	addeq	r3, #2
 801416e:	6023      	streq	r3, [r4, #0]
 8014170:	f88c 2000 	strbeq.w	r2, [ip]
 8014174:	6820      	ldr	r0, [r4, #0]
 8014176:	8803      	ldrh	r3, [r0, #0]
 8014178:	2b2a      	cmp	r3, #42	; 0x2a
 801417a:	d11e      	bne.n	80141ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801417c:	f04f 33ff 	mov.w	r3, #4294967295
 8014180:	603b      	str	r3, [r7, #0]
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	3302      	adds	r3, #2
 8014186:	6023      	str	r3, [r4, #0]
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	881b      	ldrh	r3, [r3, #0]
 801418c:	2b2e      	cmp	r3, #46	; 0x2e
 801418e:	d112      	bne.n	80141b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb6>
 8014190:	2301      	movs	r3, #1
 8014192:	7033      	strb	r3, [r6, #0]
 8014194:	6823      	ldr	r3, [r4, #0]
 8014196:	1c98      	adds	r0, r3, #2
 8014198:	6020      	str	r0, [r4, #0]
 801419a:	885b      	ldrh	r3, [r3, #2]
 801419c:	2b2a      	cmp	r3, #42	; 0x2a
 801419e:	d117      	bne.n	80141d0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd0>
 80141a0:	f04f 33ff 	mov.w	r3, #4294967295
 80141a4:	602b      	str	r3, [r5, #0]
 80141a6:	6823      	ldr	r3, [r4, #0]
 80141a8:	3302      	adds	r3, #2
 80141aa:	6023      	str	r3, [r4, #0]
 80141ac:	682b      	ldr	r3, [r5, #0]
 80141ae:	2b06      	cmp	r3, #6
 80141b0:	bfa8      	it	ge
 80141b2:	2306      	movge	r3, #6
 80141b4:	602b      	str	r3, [r5, #0]
 80141b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ba:	f7ff fee2 	bl	8013f82 <_ZN8touchgfx7Unicode4atoiEPKt>
 80141be:	6038      	str	r0, [r7, #0]
 80141c0:	6823      	ldr	r3, [r4, #0]
 80141c2:	881a      	ldrh	r2, [r3, #0]
 80141c4:	3a30      	subs	r2, #48	; 0x30
 80141c6:	2a09      	cmp	r2, #9
 80141c8:	d8de      	bhi.n	8014188 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x88>
 80141ca:	3302      	adds	r3, #2
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	e7f7      	b.n	80141c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc0>
 80141d0:	f7ff fed7 	bl	8013f82 <_ZN8touchgfx7Unicode4atoiEPKt>
 80141d4:	6028      	str	r0, [r5, #0]
 80141d6:	6823      	ldr	r3, [r4, #0]
 80141d8:	881a      	ldrh	r2, [r3, #0]
 80141da:	3a30      	subs	r2, #48	; 0x30
 80141dc:	2a09      	cmp	r2, #9
 80141de:	d8e5      	bhi.n	80141ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xac>
 80141e0:	3302      	adds	r3, #2
 80141e2:	6023      	str	r3, [r4, #0]
 80141e4:	e7f7      	b.n	80141d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
	...

080141e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>:
 80141e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141ec:	b0c3      	sub	sp, #268	; 0x10c
 80141ee:	2400      	movs	r4, #0
 80141f0:	af10      	add	r7, sp, #64	; 0x40
 80141f2:	4606      	mov	r6, r0
 80141f4:	4689      	mov	r9, r1
 80141f6:	9209      	str	r2, [sp, #36]	; 0x24
 80141f8:	4621      	mov	r1, r4
 80141fa:	22c8      	movs	r2, #200	; 0xc8
 80141fc:	4638      	mov	r0, r7
 80141fe:	469a      	mov	sl, r3
 8014200:	940c      	str	r4, [sp, #48]	; 0x30
 8014202:	f7fe fea0 	bl	8012f46 <_ZN8touchgfx6memsetEPvhm>
 8014206:	b116      	cbz	r6, 801420e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 8014208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801420a:	b923      	cbnz	r3, 8014216 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x2e>
 801420c:	8033      	strh	r3, [r6, #0]
 801420e:	4630      	mov	r0, r6
 8014210:	b043      	add	sp, #268	; 0x10c
 8014212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014216:	f109 3bff 	add.w	fp, r9, #4294967295
 801421a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801421c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801421e:	8812      	ldrh	r2, [r2, #0]
 8014220:	2a00      	cmp	r2, #0
 8014222:	f000 80d1 	beq.w	80143c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 8014226:	459b      	cmp	fp, r3
 8014228:	f340 80ce 	ble.w	80143c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e0>
 801422c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801422e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014230:	882a      	ldrh	r2, [r5, #0]
 8014232:	2a00      	cmp	r2, #0
 8014234:	d0f1      	beq.n	801421a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8014236:	2a25      	cmp	r2, #37	; 0x25
 8014238:	f000 80ca 	beq.w	80143d0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1e8>
 801423c:	459b      	cmp	fp, r3
 801423e:	ddec      	ble.n	801421a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 8014240:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 8014244:	3502      	adds	r5, #2
 8014246:	3301      	adds	r3, #1
 8014248:	9509      	str	r5, [sp, #36]	; 0x24
 801424a:	930c      	str	r3, [sp, #48]	; 0x30
 801424c:	e7ee      	b.n	801422c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x44>
 801424e:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8014252:	3202      	adds	r2, #2
 8014254:	920c      	str	r2, [sp, #48]	; 0x30
 8014256:	e0ac      	b.n	80143b2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1ca>
 8014258:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801425c:	edd3 7a00 	vldr	s15, [r3]
 8014260:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8014264:	970f      	str	r7, [sp, #60]	; 0x3c
 8014266:	3401      	adds	r4, #1
 8014268:	b923      	cbnz	r3, 8014274 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x8c>
 801426a:	2301      	movs	r3, #1
 801426c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 8014270:	2303      	movs	r3, #3
 8014272:	930e      	str	r3, [sp, #56]	; 0x38
 8014274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801427c:	bf48      	it	mi
 801427e:	232d      	movmi	r3, #45	; 0x2d
 8014280:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014282:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 801447c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x294>
 8014286:	bf44      	itt	mi
 8014288:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 801428c:	eef1 7a67 	vnegmi.f32	s15, s15
 8014290:	2300      	movs	r3, #0
 8014292:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8014296:	4298      	cmp	r0, r3
 8014298:	dd03      	ble.n	80142a2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xba>
 801429a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801429e:	3301      	adds	r3, #1
 80142a0:	e7f9      	b.n	8014296 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xae>
 80142a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80142a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80142aa:	eeb0 7a67 	vmov.f32	s14, s15
 80142ae:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80142b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142b6:	da26      	bge.n	8014306 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x11e>
 80142b8:	eba9 0202 	sub.w	r2, r9, r2
 80142bc:	2100      	movs	r1, #0
 80142be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80142c2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80142c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ca:	b28d      	uxth	r5, r1
 80142cc:	db21      	blt.n	8014312 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x12a>
 80142ce:	1a53      	subs	r3, r2, r1
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	dd1e      	ble.n	8014312 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x12a>
 80142d4:	2963      	cmp	r1, #99	; 0x63
 80142d6:	d01b      	beq.n	8014310 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x128>
 80142d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80142dc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80142e0:	ee17 3a10 	vmov	r3, s14
 80142e4:	2b09      	cmp	r3, #9
 80142e6:	bfa8      	it	ge
 80142e8:	2309      	movge	r3, #9
 80142ea:	ee07 3a10 	vmov	s14, r3
 80142ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80142f2:	f103 0530 	add.w	r5, r3, #48	; 0x30
 80142f6:	f827 5011 	strh.w	r5, [r7, r1, lsl #1]
 80142fa:	eee7 7a66 	vfms.f32	s15, s14, s13
 80142fe:	3101      	adds	r1, #1
 8014300:	eec6 6a86 	vdiv.f32	s13, s13, s12
 8014304:	e7dd      	b.n	80142c2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xda>
 8014306:	ee66 6a86 	vmul.f32	s13, s13, s12
 801430a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 801430e:	e7ce      	b.n	80142ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0xc6>
 8014310:	460d      	mov	r5, r1
 8014312:	2a63      	cmp	r2, #99	; 0x63
 8014314:	bfd4      	ite	le
 8014316:	ebc5 0202 	rsble	r2, r5, r2
 801431a:	f1c5 0263 	rsbgt	r2, r5, #99	; 0x63
 801431e:	2a00      	cmp	r2, #0
 8014320:	dd4d      	ble.n	80143be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d6>
 8014322:	4603      	mov	r3, r0
 8014324:	f04f 0801 	mov.w	r8, #1
 8014328:	2b00      	cmp	r3, #0
 801432a:	dd0e      	ble.n	801434a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x162>
 801432c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014330:	210a      	movs	r1, #10
 8014332:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014336:	3b01      	subs	r3, #1
 8014338:	ee17 ca10 	vmov	ip, s14
 801433c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014340:	fb01 c808 	mla	r8, r1, r8, ip
 8014344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014348:	e7ee      	b.n	8014328 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x140>
 801434a:	2800      	cmp	r0, #0
 801434c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014350:	bfac      	ite	ge
 8014352:	1a18      	subge	r0, r3, r0
 8014354:	4618      	movlt	r0, r3
 8014356:	006d      	lsls	r5, r5, #1
 8014358:	900e      	str	r0, [sp, #56]	; 0x38
 801435a:	230a      	movs	r3, #10
 801435c:	b292      	uxth	r2, r2
 801435e:	1979      	adds	r1, r7, r5
 8014360:	4640      	mov	r0, r8
 8014362:	f7ff fddc 	bl	8013f1e <_ZN8touchgfx7Unicode4itoaElPtti>
 8014366:	f1b8 0f01 	cmp.w	r8, #1
 801436a:	dc26      	bgt.n	80143ba <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x1d2>
 801436c:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8014370:	2b00      	cmp	r3, #0
 8014372:	bf0c      	ite	eq
 8014374:	2300      	moveq	r3, #0
 8014376:	232e      	movne	r3, #46	; 0x2e
 8014378:	aa42      	add	r2, sp, #264	; 0x108
 801437a:	4415      	add	r5, r2
 801437c:	aa0c      	add	r2, sp, #48	; 0x30
 801437e:	f825 3cc8 	strh.w	r3, [r5, #-200]
 8014382:	9205      	str	r2, [sp, #20]
 8014384:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8014388:	9204      	str	r2, [sp, #16]
 801438a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801438c:	9203      	str	r2, [sp, #12]
 801438e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 8014392:	9202      	str	r2, [sp, #8]
 8014394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014396:	9201      	str	r2, [sp, #4]
 8014398:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 801439c:	9200      	str	r2, [sp, #0]
 801439e:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80143a2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80143a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143a8:	e9cd 9606 	strd	r9, r6, [sp, #24]
 80143ac:	a80f      	add	r0, sp, #60	; 0x3c
 80143ae:	f7ff fdf7 	bl	8013fa0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 80143b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143b4:	3302      	adds	r3, #2
 80143b6:	9309      	str	r3, [sp, #36]	; 0x24
 80143b8:	e72f      	b.n	801421a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80143ba:	232e      	movs	r3, #46	; 0x2e
 80143bc:	e7dc      	b.n	8014378 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x190>
 80143be:	ab42      	add	r3, sp, #264	; 0x108
 80143c0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80143c4:	2300      	movs	r3, #0
 80143c6:	e7d9      	b.n	801437c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x194>
 80143c8:	2200      	movs	r2, #0
 80143ca:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80143ce:	e71e      	b.n	801420e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x26>
 80143d0:	459b      	cmp	fp, r3
 80143d2:	f77f af22 	ble.w	801421a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x32>
 80143d6:	2300      	movs	r3, #0
 80143d8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80143dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80143e8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80143ec:	930d      	str	r3, [sp, #52]	; 0x34
 80143ee:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80143f2:	930e      	str	r3, [sp, #56]	; 0x38
 80143f4:	1cab      	adds	r3, r5, #2
 80143f6:	9309      	str	r3, [sp, #36]	; 0x24
 80143f8:	ab0e      	add	r3, sp, #56	; 0x38
 80143fa:	9304      	str	r3, [sp, #16]
 80143fc:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8014400:	9303      	str	r3, [sp, #12]
 8014402:	ab0d      	add	r3, sp, #52	; 0x34
 8014404:	9302      	str	r3, [sp, #8]
 8014406:	ab0b      	add	r3, sp, #44	; 0x2c
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 8014414:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8014418:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801441c:	a809      	add	r0, sp, #36	; 0x24
 801441e:	f7ff fe6f 	bl	8014100 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8014422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014424:	2b00      	cmp	r3, #0
 8014426:	da0b      	bge.n	8014440 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x258>
 8014428:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801442c:	edd3 7a00 	vldr	s15, [r3]
 8014430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014434:	3401      	adds	r4, #1
 8014436:	ee17 3a90 	vmov	r3, s15
 801443a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801443e:	930d      	str	r3, [sp, #52]	; 0x34
 8014440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014442:	2b00      	cmp	r3, #0
 8014444:	da0b      	bge.n	801445e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x276>
 8014446:	eb0a 0384 	add.w	r3, sl, r4, lsl #2
 801444a:	edd3 7a00 	vldr	s15, [r3]
 801444e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014452:	3401      	adds	r4, #1
 8014454:	ee17 3a90 	vmov	r3, s15
 8014458:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801445c:	930e      	str	r3, [sp, #56]	; 0x38
 801445e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014462:	881b      	ldrh	r3, [r3, #0]
 8014464:	2b25      	cmp	r3, #37	; 0x25
 8014466:	f43f aef2 	beq.w	801424e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x66>
 801446a:	2b66      	cmp	r3, #102	; 0x66
 801446c:	f43f aef4 	beq.w	8014258 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x70>
 8014470:	9509      	str	r5, [sp, #36]	; 0x24
 8014472:	882b      	ldrh	r3, [r5, #0]
 8014474:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 8014478:	3201      	adds	r2, #1
 801447a:	e6eb      	b.n	8014254 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf+0x6c>
 801447c:	3f000002 	.word	0x3f000002

08014480 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8014480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014482:	4605      	mov	r5, r0
 8014484:	b0a1      	sub	sp, #132	; 0x84
 8014486:	4610      	mov	r0, r2
 8014488:	460e      	mov	r6, r1
 801448a:	4614      	mov	r4, r2
 801448c:	461f      	mov	r7, r3
 801448e:	f7ff fd29 	bl	8013ee4 <_ZN8touchgfx7Unicode6strlenEPKc>
 8014492:	283f      	cmp	r0, #63	; 0x3f
 8014494:	d906      	bls.n	80144a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x24>
 8014496:	4b0a      	ldr	r3, [pc, #40]	; (80144c0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x40>)
 8014498:	4a0a      	ldr	r2, [pc, #40]	; (80144c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x44>)
 801449a:	480b      	ldr	r0, [pc, #44]	; (80144c8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf+0x48>)
 801449c:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80144a0:	f00b fd92 	bl	801ffc8 <__assert_func>
 80144a4:	4621      	mov	r1, r4
 80144a6:	2240      	movs	r2, #64	; 0x40
 80144a8:	4668      	mov	r0, sp
 80144aa:	f7ff fd27 	bl	8013efc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80144ae:	463b      	mov	r3, r7
 80144b0:	466a      	mov	r2, sp
 80144b2:	4631      	mov	r1, r6
 80144b4:	4628      	mov	r0, r5
 80144b6:	f7ff fe97 	bl	80141e8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKf>
 80144ba:	b021      	add	sp, #132	; 0x84
 80144bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144be:	bf00      	nop
 80144c0:	08023839 	.word	0x08023839
 80144c4:	0802387c 	.word	0x0802387c
 80144c8:	08023856 	.word	0x08023856

080144cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80144cc:	4b01      	ldr	r3, [pc, #4]	; (80144d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80144ce:	6018      	str	r0, [r3, #0]
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	20009f7c 	.word	0x20009f7c

080144d8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80144d8:	4b07      	ldr	r3, [pc, #28]	; (80144f8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 80144da:	881a      	ldrh	r2, [r3, #0]
 80144dc:	4282      	cmp	r2, r0
 80144de:	d809      	bhi.n	80144f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80144e0:	4b06      	ldr	r3, [pc, #24]	; (80144fc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 80144e2:	881b      	ldrh	r3, [r3, #0]
 80144e4:	4413      	add	r3, r2
 80144e6:	4298      	cmp	r0, r3
 80144e8:	da04      	bge.n	80144f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 80144ea:	4b05      	ldr	r3, [pc, #20]	; (8014500 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80144f2:	4770      	bx	lr
 80144f4:	2000      	movs	r0, #0
 80144f6:	4770      	bx	lr
 80144f8:	20009f9c 	.word	0x20009f9c
 80144fc:	20009fa0 	.word	0x20009fa0
 8014500:	20009f80 	.word	0x20009f80

08014504 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8014504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014508:	4d26      	ldr	r5, [pc, #152]	; (80145a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801450a:	682b      	ldr	r3, [r5, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d046      	beq.n	801459e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8014510:	4a25      	ldr	r2, [pc, #148]	; (80145a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8014512:	4f26      	ldr	r7, [pc, #152]	; (80145ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8014514:	8810      	ldrh	r0, [r2, #0]
 8014516:	883c      	ldrh	r4, [r7, #0]
 8014518:	4e25      	ldr	r6, [pc, #148]	; (80145b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801451a:	4420      	add	r0, r4
 801451c:	1c42      	adds	r2, r0, #1
 801451e:	f022 0201 	bic.w	r2, r2, #1
 8014522:	0412      	lsls	r2, r2, #16
 8014524:	0c12      	lsrs	r2, r2, #16
 8014526:	0051      	lsls	r1, r2, #1
 8014528:	220e      	movs	r2, #14
 801452a:	fb02 fc04 	mul.w	ip, r2, r4
 801452e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8014532:	4c20      	ldr	r4, [pc, #128]	; (80145b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8014534:	eb03 0208 	add.w	r2, r3, r8
 8014538:	eb08 0e01 	add.w	lr, r8, r1
 801453c:	6022      	str	r2, [r4, #0]
 801453e:	eb03 020e 	add.w	r2, r3, lr
 8014542:	6032      	str	r2, [r6, #0]
 8014544:	44e6      	add	lr, ip
 8014546:	4a1c      	ldr	r2, [pc, #112]	; (80145b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8014548:	4473      	add	r3, lr
 801454a:	6013      	str	r3, [r2, #0]
 801454c:	4a1b      	ldr	r2, [pc, #108]	; (80145bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801454e:	2300      	movs	r3, #0
 8014550:	8013      	strh	r3, [r2, #0]
 8014552:	4a1b      	ldr	r2, [pc, #108]	; (80145c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8014554:	6812      	ldr	r2, [r2, #0]
 8014556:	eba2 0208 	sub.w	r2, r2, r8
 801455a:	1a52      	subs	r2, r2, r1
 801455c:	4919      	ldr	r1, [pc, #100]	; (80145c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801455e:	eba2 020c 	sub.w	r2, r2, ip
 8014562:	600a      	str	r2, [r1, #0]
 8014564:	4a18      	ldr	r2, [pc, #96]	; (80145c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8014566:	469c      	mov	ip, r3
 8014568:	8013      	strh	r3, [r2, #0]
 801456a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801456e:	4283      	cmp	r3, r0
 8014570:	d10d      	bne.n	801458e <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8014572:	883d      	ldrh	r5, [r7, #0]
 8014574:	6830      	ldr	r0, [r6, #0]
 8014576:	2300      	movs	r3, #0
 8014578:	240e      	movs	r4, #14
 801457a:	429d      	cmp	r5, r3
 801457c:	d90f      	bls.n	801459e <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801457e:	fb04 0203 	mla	r2, r4, r3, r0
 8014582:	3301      	adds	r3, #1
 8014584:	7b11      	ldrb	r1, [r2, #12]
 8014586:	f36f 1145 	bfc	r1, #5, #1
 801458a:	7311      	strb	r1, [r2, #12]
 801458c:	e7f5      	b.n	801457a <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 801458e:	682a      	ldr	r2, [r5, #0]
 8014590:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8014594:	6822      	ldr	r2, [r4, #0]
 8014596:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801459a:	3301      	adds	r3, #1
 801459c:	e7e7      	b.n	801456e <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801459e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145a2:	bf00      	nop
 80145a4:	20009f80 	.word	0x20009f80
 80145a8:	20009f9c 	.word	0x20009f9c
 80145ac:	20009fa0 	.word	0x20009fa0
 80145b0:	20009f84 	.word	0x20009f84
 80145b4:	20009f94 	.word	0x20009f94
 80145b8:	20009f8c 	.word	0x20009f8c
 80145bc:	20009f9e 	.word	0x20009f9e
 80145c0:	20009f88 	.word	0x20009f88
 80145c4:	20009f98 	.word	0x20009f98
 80145c8:	20009f90 	.word	0x20009f90

080145cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80145cc:	b510      	push	{r4, lr}
 80145ce:	4b10      	ldr	r3, [pc, #64]	; (8014610 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	b9db      	cbnz	r3, 801460c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80145d4:	b1d1      	cbz	r1, 801460c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80145d6:	4b0f      	ldr	r3, [pc, #60]	; (8014614 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80145d8:	801a      	strh	r2, [r3, #0]
 80145da:	4b0f      	ldr	r3, [pc, #60]	; (8014618 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80145dc:	881b      	ldrh	r3, [r3, #0]
 80145de:	b292      	uxth	r2, r2
 80145e0:	240e      	movs	r4, #14
 80145e2:	4413      	add	r3, r2
 80145e4:	4362      	muls	r2, r4
 80145e6:	2406      	movs	r4, #6
 80145e8:	fb04 2203 	mla	r2, r4, r3, r2
 80145ec:	428a      	cmp	r2, r1
 80145ee:	d305      	bcc.n	80145fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 80145f0:	4b0a      	ldr	r3, [pc, #40]	; (801461c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 80145f2:	4a0b      	ldr	r2, [pc, #44]	; (8014620 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 80145f4:	480b      	ldr	r0, [pc, #44]	; (8014624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 80145f6:	2137      	movs	r1, #55	; 0x37
 80145f8:	f00b fce6 	bl	801ffc8 <__assert_func>
 80145fc:	4b0a      	ldr	r3, [pc, #40]	; (8014628 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80145fe:	6019      	str	r1, [r3, #0]
 8014600:	4b0a      	ldr	r3, [pc, #40]	; (801462c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8014602:	6018      	str	r0, [r3, #0]
 8014604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014608:	f7ff bf7c 	b.w	8014504 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801460c:	bd10      	pop	{r4, pc}
 801460e:	bf00      	nop
 8014610:	20009f8c 	.word	0x20009f8c
 8014614:	20009fa0 	.word	0x20009fa0
 8014618:	20009f9c 	.word	0x20009f9c
 801461c:	08023968 	.word	0x08023968
 8014620:	080239fd 	.word	0x080239fd
 8014624:	08023943 	.word	0x08023943
 8014628:	20009f88 	.word	0x20009f88
 801462c:	20009f80 	.word	0x20009f80

08014630 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8014630:	b470      	push	{r4, r5, r6}
 8014632:	4c07      	ldr	r4, [pc, #28]	; (8014650 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8014634:	6826      	ldr	r6, [r4, #0]
 8014636:	4605      	mov	r5, r0
 8014638:	4610      	mov	r0, r2
 801463a:	9a03      	ldr	r2, [sp, #12]
 801463c:	b936      	cbnz	r6, 801464c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801463e:	6025      	str	r5, [r4, #0]
 8014640:	4c04      	ldr	r4, [pc, #16]	; (8014654 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8014642:	8021      	strh	r1, [r4, #0]
 8014644:	bc70      	pop	{r4, r5, r6}
 8014646:	4619      	mov	r1, r3
 8014648:	f7ff bfc0 	b.w	80145cc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801464c:	bc70      	pop	{r4, r5, r6}
 801464e:	4770      	bx	lr
 8014650:	20009fa4 	.word	0x20009fa4
 8014654:	20009f9c 	.word	0x20009f9c

08014658 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8014658:	b508      	push	{r3, lr}
 801465a:	4b14      	ldr	r3, [pc, #80]	; (80146ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801465c:	6819      	ldr	r1, [r3, #0]
 801465e:	b931      	cbnz	r1, 801466e <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8014660:	4b13      	ldr	r3, [pc, #76]	; (80146b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8014662:	4a14      	ldr	r2, [pc, #80]	; (80146b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8014664:	4814      	ldr	r0, [pc, #80]	; (80146b8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8014666:	f240 21e6 	movw	r1, #742	; 0x2e6
 801466a:	f00b fcad 	bl	801ffc8 <__assert_func>
 801466e:	4a13      	ldr	r2, [pc, #76]	; (80146bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8014670:	8803      	ldrh	r3, [r0, #0]
 8014672:	8812      	ldrh	r2, [r2, #0]
 8014674:	4293      	cmp	r3, r2
 8014676:	d204      	bcs.n	8014682 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8014678:	2214      	movs	r2, #20
 801467a:	fb02 1303 	mla	r3, r2, r3, r1
 801467e:	8918      	ldrh	r0, [r3, #8]
 8014680:	bd08      	pop	{r3, pc}
 8014682:	490f      	ldr	r1, [pc, #60]	; (80146c0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8014684:	8809      	ldrh	r1, [r1, #0]
 8014686:	4411      	add	r1, r2
 8014688:	428b      	cmp	r3, r1
 801468a:	da06      	bge.n	801469a <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801468c:	1a9b      	subs	r3, r3, r2
 801468e:	4a0d      	ldr	r2, [pc, #52]	; (80146c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8014690:	6812      	ldr	r2, [r2, #0]
 8014692:	210e      	movs	r1, #14
 8014694:	fb01 2303 	mla	r3, r1, r3, r2
 8014698:	e7f1      	b.n	801467e <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801469a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801469e:	4293      	cmp	r3, r2
 80146a0:	bf0a      	itet	eq
 80146a2:	4b09      	ldreq	r3, [pc, #36]	; (80146c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 80146a4:	2000      	movne	r0, #0
 80146a6:	8818      	ldrheq	r0, [r3, #0]
 80146a8:	e7ea      	b.n	8014680 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80146aa:	bf00      	nop
 80146ac:	20009fa4 	.word	0x20009fa4
 80146b0:	080239c1 	.word	0x080239c1
 80146b4:	08023aaa 	.word	0x08023aaa
 80146b8:	08023943 	.word	0x08023943
 80146bc:	20009f9c 	.word	0x20009f9c
 80146c0:	20009fa0 	.word	0x20009fa0
 80146c4:	20009f84 	.word	0x20009f84
 80146c8:	20009ef0 	.word	0x20009ef0

080146cc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80146cc:	b508      	push	{r3, lr}
 80146ce:	4b14      	ldr	r3, [pc, #80]	; (8014720 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80146d0:	6819      	ldr	r1, [r3, #0]
 80146d2:	b931      	cbnz	r1, 80146e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80146d4:	4b13      	ldr	r3, [pc, #76]	; (8014724 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80146d6:	4a14      	ldr	r2, [pc, #80]	; (8014728 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80146d8:	4814      	ldr	r0, [pc, #80]	; (801472c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80146da:	f240 21fa 	movw	r1, #762	; 0x2fa
 80146de:	f00b fc73 	bl	801ffc8 <__assert_func>
 80146e2:	4a13      	ldr	r2, [pc, #76]	; (8014730 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80146e4:	8803      	ldrh	r3, [r0, #0]
 80146e6:	8812      	ldrh	r2, [r2, #0]
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d204      	bcs.n	80146f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 80146ec:	2214      	movs	r2, #20
 80146ee:	fb02 1303 	mla	r3, r2, r3, r1
 80146f2:	8958      	ldrh	r0, [r3, #10]
 80146f4:	bd08      	pop	{r3, pc}
 80146f6:	490f      	ldr	r1, [pc, #60]	; (8014734 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 80146f8:	8809      	ldrh	r1, [r1, #0]
 80146fa:	4411      	add	r1, r2
 80146fc:	428b      	cmp	r3, r1
 80146fe:	da06      	bge.n	801470e <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8014700:	1a9b      	subs	r3, r3, r2
 8014702:	4a0d      	ldr	r2, [pc, #52]	; (8014738 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8014704:	6812      	ldr	r2, [r2, #0]
 8014706:	210e      	movs	r1, #14
 8014708:	fb01 2303 	mla	r3, r1, r3, r2
 801470c:	e7f1      	b.n	80146f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801470e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014712:	4293      	cmp	r3, r2
 8014714:	bf0a      	itet	eq
 8014716:	4b09      	ldreq	r3, [pc, #36]	; (801473c <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8014718:	2000      	movne	r0, #0
 801471a:	8818      	ldrheq	r0, [r3, #0]
 801471c:	e7ea      	b.n	80146f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801471e:	bf00      	nop
 8014720:	20009fa4 	.word	0x20009fa4
 8014724:	080239c1 	.word	0x080239c1
 8014728:	08023ad6 	.word	0x08023ad6
 801472c:	08023943 	.word	0x08023943
 8014730:	20009f9c 	.word	0x20009f9c
 8014734:	20009fa0 	.word	0x20009fa0
 8014738:	20009f84 	.word	0x20009f84
 801473c:	20009ef2 	.word	0x20009ef2

08014740 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8014740:	b510      	push	{r4, lr}
 8014742:	4b23      	ldr	r3, [pc, #140]	; (80147d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8014744:	681c      	ldr	r4, [r3, #0]
 8014746:	b934      	cbnz	r4, 8014756 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8014748:	4b22      	ldr	r3, [pc, #136]	; (80147d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801474a:	4a23      	ldr	r2, [pc, #140]	; (80147d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801474c:	4823      	ldr	r0, [pc, #140]	; (80147dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801474e:	f240 310e 	movw	r1, #782	; 0x30e
 8014752:	f00b fc39 	bl	801ffc8 <__assert_func>
 8014756:	4a22      	ldr	r2, [pc, #136]	; (80147e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8014758:	880b      	ldrh	r3, [r1, #0]
 801475a:	8812      	ldrh	r2, [r2, #0]
 801475c:	4293      	cmp	r3, r2
 801475e:	d211      	bcs.n	8014784 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 8014760:	2214      	movs	r2, #20
 8014762:	fb02 4303 	mla	r3, r2, r3, r4
 8014766:	8a1a      	ldrh	r2, [r3, #16]
 8014768:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801476c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8014770:	8a5b      	ldrh	r3, [r3, #18]
 8014772:	8004      	strh	r4, [r0, #0]
 8014774:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8014778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801477c:	8041      	strh	r1, [r0, #2]
 801477e:	8082      	strh	r2, [r0, #4]
 8014780:	80c3      	strh	r3, [r0, #6]
 8014782:	e00e      	b.n	80147a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8014784:	4917      	ldr	r1, [pc, #92]	; (80147e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8014786:	8809      	ldrh	r1, [r1, #0]
 8014788:	4411      	add	r1, r2
 801478a:	428b      	cmp	r3, r1
 801478c:	da0a      	bge.n	80147a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801478e:	1a9b      	subs	r3, r3, r2
 8014790:	4a15      	ldr	r2, [pc, #84]	; (80147e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 8014792:	6812      	ldr	r2, [r2, #0]
 8014794:	210e      	movs	r1, #14
 8014796:	fb01 2303 	mla	r3, r1, r3, r2
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	6002      	str	r2, [r0, #0]
 801479e:	685a      	ldr	r2, [r3, #4]
 80147a0:	6042      	str	r2, [r0, #4]
 80147a2:	bd10      	pop	{r4, pc}
 80147a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80147a8:	4293      	cmp	r3, r2
 80147aa:	d10b      	bne.n	80147c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80147ac:	4b0f      	ldr	r3, [pc, #60]	; (80147ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80147ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80147b2:	4b0f      	ldr	r3, [pc, #60]	; (80147f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80147b4:	8081      	strh	r1, [r0, #4]
 80147b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80147ba:	80c2      	strh	r2, [r0, #6]
 80147bc:	2300      	movs	r3, #0
 80147be:	8003      	strh	r3, [r0, #0]
 80147c0:	8043      	strh	r3, [r0, #2]
 80147c2:	e7ee      	b.n	80147a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80147c4:	2300      	movs	r3, #0
 80147c6:	8003      	strh	r3, [r0, #0]
 80147c8:	8043      	strh	r3, [r0, #2]
 80147ca:	8083      	strh	r3, [r0, #4]
 80147cc:	e7d8      	b.n	8014780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 80147ce:	bf00      	nop
 80147d0:	20009fa4 	.word	0x20009fa4
 80147d4:	080239c1 	.word	0x080239c1
 80147d8:	08023a43 	.word	0x08023a43
 80147dc:	08023943 	.word	0x08023943
 80147e0:	20009f9c 	.word	0x20009f9c
 80147e4:	20009fa0 	.word	0x20009fa0
 80147e8:	20009f84 	.word	0x20009f84
 80147ec:	20009ef0 	.word	0x20009ef0
 80147f0:	20009ef2 	.word	0x20009ef2

080147f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80147f4:	4b18      	ldr	r3, [pc, #96]	; (8014858 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	b34b      	cbz	r3, 801484e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80147fa:	4a18      	ldr	r2, [pc, #96]	; (801485c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80147fc:	8800      	ldrh	r0, [r0, #0]
 80147fe:	8812      	ldrh	r2, [r2, #0]
 8014800:	4290      	cmp	r0, r2
 8014802:	d211      	bcs.n	8014828 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 8014804:	2214      	movs	r2, #20
 8014806:	fb02 3300 	mla	r3, r2, r0, r3
 801480a:	8a1a      	ldrh	r2, [r3, #16]
 801480c:	8919      	ldrh	r1, [r3, #8]
 801480e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8014812:	428a      	cmp	r2, r1
 8014814:	db1d      	blt.n	8014852 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8014816:	8a58      	ldrh	r0, [r3, #18]
 8014818:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801481c:	895b      	ldrh	r3, [r3, #10]
 801481e:	4298      	cmp	r0, r3
 8014820:	bfac      	ite	ge
 8014822:	2000      	movge	r0, #0
 8014824:	2001      	movlt	r0, #1
 8014826:	4770      	bx	lr
 8014828:	4b0d      	ldr	r3, [pc, #52]	; (8014860 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801482a:	881b      	ldrh	r3, [r3, #0]
 801482c:	4413      	add	r3, r2
 801482e:	4298      	cmp	r0, r3
 8014830:	da0d      	bge.n	801484e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 8014832:	4b0c      	ldr	r3, [pc, #48]	; (8014864 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	1a80      	subs	r0, r0, r2
 8014838:	220e      	movs	r2, #14
 801483a:	fb02 3300 	mla	r3, r2, r0, r3
 801483e:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8014842:	891a      	ldrh	r2, [r3, #8]
 8014844:	4291      	cmp	r1, r2
 8014846:	db04      	blt.n	8014852 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 8014848:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801484c:	e7e6      	b.n	801481c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801484e:	2000      	movs	r0, #0
 8014850:	4770      	bx	lr
 8014852:	2001      	movs	r0, #1
 8014854:	4770      	bx	lr
 8014856:	bf00      	nop
 8014858:	20009fa4 	.word	0x20009fa4
 801485c:	20009f9c 	.word	0x20009f9c
 8014860:	20009fa0 	.word	0x20009fa0
 8014864:	20009f84 	.word	0x20009f84

08014868 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8014868:	b508      	push	{r3, lr}
 801486a:	4b12      	ldr	r3, [pc, #72]	; (80148b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801486c:	6819      	ldr	r1, [r3, #0]
 801486e:	b931      	cbnz	r1, 801487e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8014870:	4b11      	ldr	r3, [pc, #68]	; (80148b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014872:	4a12      	ldr	r2, [pc, #72]	; (80148bc <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8014874:	4812      	ldr	r0, [pc, #72]	; (80148c0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8014876:	f240 3132 	movw	r1, #818	; 0x332
 801487a:	f00b fba5 	bl	801ffc8 <__assert_func>
 801487e:	8803      	ldrh	r3, [r0, #0]
 8014880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014884:	4293      	cmp	r3, r2
 8014886:	d012      	beq.n	80148ae <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8014888:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801488c:	4293      	cmp	r3, r2
 801488e:	d103      	bne.n	8014898 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8014890:	4b0c      	ldr	r3, [pc, #48]	; (80148c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8014896:	bd08      	pop	{r3, pc}
 8014898:	4a0b      	ldr	r2, [pc, #44]	; (80148c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801489a:	6812      	ldr	r2, [r2, #0]
 801489c:	b11a      	cbz	r2, 80148a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801489e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d1f7      	bne.n	8014896 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80148a6:	2214      	movs	r2, #20
 80148a8:	4353      	muls	r3, r2
 80148aa:	58c8      	ldr	r0, [r1, r3]
 80148ac:	e7f3      	b.n	8014896 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80148ae:	2000      	movs	r0, #0
 80148b0:	e7f1      	b.n	8014896 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 80148b2:	bf00      	nop
 80148b4:	20009fa4 	.word	0x20009fa4
 80148b8:	080239c1 	.word	0x080239c1
 80148bc:	08023a79 	.word	0x08023a79
 80148c0:	08023943 	.word	0x08023943
 80148c4:	20009efc 	.word	0x20009efc
 80148c8:	20009f80 	.word	0x20009f80

080148cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80148cc:	8802      	ldrh	r2, [r0, #0]
 80148ce:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d840      	bhi.n	8014958 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80148d6:	4b21      	ldr	r3, [pc, #132]	; (801495c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 80148d8:	881b      	ldrh	r3, [r3, #0]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d220      	bcs.n	8014920 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 80148de:	4b20      	ldr	r3, [pc, #128]	; (8014960 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80148e0:	6819      	ldr	r1, [r3, #0]
 80148e2:	2314      	movs	r3, #20
 80148e4:	fb03 1302 	mla	r3, r3, r2, r1
 80148e8:	6858      	ldr	r0, [r3, #4]
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d035      	beq.n	801495a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80148ee:	491d      	ldr	r1, [pc, #116]	; (8014964 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80148f0:	6809      	ldr	r1, [r1, #0]
 80148f2:	2900      	cmp	r1, #0
 80148f4:	d031      	beq.n	801495a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80148f6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80148fa:	b371      	cbz	r1, 801495a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80148fc:	895a      	ldrh	r2, [r3, #10]
 80148fe:	8918      	ldrh	r0, [r3, #8]
 8014900:	4350      	muls	r0, r2
 8014902:	7c5a      	ldrb	r2, [r3, #17]
 8014904:	7cdb      	ldrb	r3, [r3, #19]
 8014906:	0952      	lsrs	r2, r2, #5
 8014908:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801490c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8014910:	2b0b      	cmp	r3, #11
 8014912:	bf18      	it	ne
 8014914:	0040      	lslne	r0, r0, #1
 8014916:	3003      	adds	r0, #3
 8014918:	f020 0003 	bic.w	r0, r0, #3
 801491c:	4408      	add	r0, r1
 801491e:	4770      	bx	lr
 8014920:	4911      	ldr	r1, [pc, #68]	; (8014968 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8014922:	8809      	ldrh	r1, [r1, #0]
 8014924:	4419      	add	r1, r3
 8014926:	428a      	cmp	r2, r1
 8014928:	da16      	bge.n	8014958 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801492a:	4910      	ldr	r1, [pc, #64]	; (801496c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801492c:	6809      	ldr	r1, [r1, #0]
 801492e:	1ad3      	subs	r3, r2, r3
 8014930:	200e      	movs	r0, #14
 8014932:	fb00 1303 	mla	r3, r0, r3, r1
 8014936:	7b19      	ldrb	r1, [r3, #12]
 8014938:	f001 011f 	and.w	r1, r1, #31
 801493c:	290b      	cmp	r1, #11
 801493e:	d10b      	bne.n	8014958 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8014940:	8919      	ldrh	r1, [r3, #8]
 8014942:	8958      	ldrh	r0, [r3, #10]
 8014944:	4b07      	ldr	r3, [pc, #28]	; (8014964 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8014946:	4348      	muls	r0, r1
 8014948:	6819      	ldr	r1, [r3, #0]
 801494a:	3003      	adds	r0, #3
 801494c:	f020 0303 	bic.w	r3, r0, #3
 8014950:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8014954:	4418      	add	r0, r3
 8014956:	4770      	bx	lr
 8014958:	2000      	movs	r0, #0
 801495a:	4770      	bx	lr
 801495c:	20009f9c 	.word	0x20009f9c
 8014960:	20009fa4 	.word	0x20009fa4
 8014964:	20009f80 	.word	0x20009f80
 8014968:	20009fa0 	.word	0x20009fa0
 801496c:	20009f84 	.word	0x20009f84

08014970 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8014970:	4b19      	ldr	r3, [pc, #100]	; (80149d8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8014972:	6819      	ldr	r1, [r3, #0]
 8014974:	8803      	ldrh	r3, [r0, #0]
 8014976:	b1e9      	cbz	r1, 80149b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8014978:	4a18      	ldr	r2, [pc, #96]	; (80149dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801497a:	8812      	ldrh	r2, [r2, #0]
 801497c:	429a      	cmp	r2, r3
 801497e:	d90a      	bls.n	8014996 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8014980:	2214      	movs	r2, #20
 8014982:	fb02 1303 	mla	r3, r2, r3, r1
 8014986:	7c58      	ldrb	r0, [r3, #17]
 8014988:	0942      	lsrs	r2, r0, #5
 801498a:	7cd8      	ldrb	r0, [r3, #19]
 801498c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8014990:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8014994:	4770      	bx	lr
 8014996:	4912      	ldr	r1, [pc, #72]	; (80149e0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8014998:	8809      	ldrh	r1, [r1, #0]
 801499a:	4411      	add	r1, r2
 801499c:	428b      	cmp	r3, r1
 801499e:	da09      	bge.n	80149b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80149a0:	1a9b      	subs	r3, r3, r2
 80149a2:	4a10      	ldr	r2, [pc, #64]	; (80149e4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 80149a4:	6812      	ldr	r2, [r2, #0]
 80149a6:	210e      	movs	r1, #14
 80149a8:	fb01 2303 	mla	r3, r1, r3, r2
 80149ac:	7b18      	ldrb	r0, [r3, #12]
 80149ae:	f000 001f 	and.w	r0, r0, #31
 80149b2:	4770      	bx	lr
 80149b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80149b8:	4293      	cmp	r3, r2
 80149ba:	d10a      	bne.n	80149d2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 80149bc:	4b0a      	ldr	r3, [pc, #40]	; (80149e8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80149c4:	b10a      	cbz	r2, 80149ca <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80149c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80149c8:	b900      	cbnz	r0, 80149cc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80149ca:	6898      	ldr	r0, [r3, #8]
 80149cc:	6803      	ldr	r3, [r0, #0]
 80149ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d0:	4718      	bx	r3
 80149d2:	2000      	movs	r0, #0
 80149d4:	4770      	bx	lr
 80149d6:	bf00      	nop
 80149d8:	20009fa4 	.word	0x20009fa4
 80149dc:	20009f9c 	.word	0x20009f9c
 80149e0:	20009fa0 	.word	0x20009fa0
 80149e4:	20009f84 	.word	0x20009f84
 80149e8:	20009efc 	.word	0x20009efc

080149ec <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80149ec:	2010      	movs	r0, #16
 80149ee:	4770      	bx	lr

080149f0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80149f0:	2000      	movs	r0, #0
 80149f2:	4770      	bx	lr

080149f4 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 80149f4:	00d2      	lsls	r2, r2, #3
 80149f6:	0209      	lsls	r1, r1, #8
 80149f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80149fc:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 8014a00:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8014a04:	4310      	orrs	r0, r2
 8014a06:	4770      	bx	lr

08014a08 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 8014a08:	1209      	asrs	r1, r1, #8
 8014a0a:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8014a0e:	4770      	bx	lr

08014a10 <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 8014a10:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8014a14:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8014a18:	4770      	bx	lr

08014a1a <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 8014a1a:	00c9      	lsls	r1, r1, #3
 8014a1c:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 8014a20:	4770      	bx	lr

08014a22 <_ZN8touchgfx8LCD16bpp4initEv>:
 8014a22:	4770      	bx	lr

08014a24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014a24:	2bff      	cmp	r3, #255	; 0xff
 8014a26:	d050      	beq.n	8014aca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8014a28:	2a0b      	cmp	r2, #11
 8014a2a:	d04a      	beq.n	8014ac2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014a2c:	d80e      	bhi.n	8014a4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8014a2e:	2a03      	cmp	r2, #3
 8014a30:	d03f      	beq.n	8014ab2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8014a32:	d804      	bhi.n	8014a3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8014a34:	2a01      	cmp	r2, #1
 8014a36:	d03e      	beq.n	8014ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8014a38:	d93f      	bls.n	8014aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8014a3a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8014a3c:	4770      	bx	lr
 8014a3e:	2a09      	cmp	r2, #9
 8014a40:	d03f      	beq.n	8014ac2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8014a42:	d83c      	bhi.n	8014abe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8014a44:	2a08      	cmp	r2, #8
 8014a46:	d03a      	beq.n	8014abe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8014a48:	2000      	movs	r0, #0
 8014a4a:	4770      	bx	lr
 8014a4c:	2a2f      	cmp	r2, #47	; 0x2f
 8014a4e:	d024      	beq.n	8014a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8014a50:	d80d      	bhi.n	8014a6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8014a52:	2a2d      	cmp	r2, #45	; 0x2d
 8014a54:	d014      	beq.n	8014a80 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8014a56:	d826      	bhi.n	8014aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8014a58:	2a2c      	cmp	r2, #44	; 0x2c
 8014a5a:	d1f5      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014a5c:	684b      	ldr	r3, [r1, #4]
 8014a5e:	781b      	ldrb	r3, [r3, #0]
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	d018      	beq.n	8014a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8014a64:	d323      	bcc.n	8014aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8014a66:	2b02      	cmp	r3, #2
 8014a68:	d1ee      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014a6a:	6880      	ldr	r0, [r0, #8]
 8014a6c:	4770      	bx	lr
 8014a6e:	2a31      	cmp	r2, #49	; 0x31
 8014a70:	d004      	beq.n	8014a7c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8014a72:	d328      	bcc.n	8014ac6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014a74:	2a32      	cmp	r2, #50	; 0x32
 8014a76:	d026      	beq.n	8014ac6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8014a78:	2a33      	cmp	r2, #51	; 0x33
 8014a7a:	d1e5      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014a7c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014a7e:	4770      	bx	lr
 8014a80:	684b      	ldr	r3, [r1, #4]
 8014a82:	781b      	ldrb	r3, [r3, #0]
 8014a84:	2b01      	cmp	r3, #1
 8014a86:	d004      	beq.n	8014a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8014a88:	d30b      	bcc.n	8014aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8014a8a:	2b02      	cmp	r3, #2
 8014a8c:	d1dc      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014a8e:	6900      	ldr	r0, [r0, #16]
 8014a90:	4770      	bx	lr
 8014a92:	6a00      	ldr	r0, [r0, #32]
 8014a94:	4770      	bx	lr
 8014a96:	6980      	ldr	r0, [r0, #24]
 8014a98:	4770      	bx	lr
 8014a9a:	684b      	ldr	r3, [r1, #4]
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1d2      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014aa2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014aa4:	4770      	bx	lr
 8014aa6:	684b      	ldr	r3, [r1, #4]
 8014aa8:	781b      	ldrb	r3, [r3, #0]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d1cc      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014aae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014ab0:	4770      	bx	lr
 8014ab2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014ab4:	4770      	bx	lr
 8014ab6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8014ab8:	4770      	bx	lr
 8014aba:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014abc:	4770      	bx	lr
 8014abe:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8014ac0:	4770      	bx	lr
 8014ac2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8014ac4:	4770      	bx	lr
 8014ac6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014ac8:	4770      	bx	lr
 8014aca:	2a0b      	cmp	r2, #11
 8014acc:	d049      	beq.n	8014b62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014ace:	d80e      	bhi.n	8014aee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8014ad0:	2a03      	cmp	r2, #3
 8014ad2:	d040      	beq.n	8014b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8014ad4:	d804      	bhi.n	8014ae0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8014ad6:	2a01      	cmp	r2, #1
 8014ad8:	d03f      	beq.n	8014b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8014ada:	d940      	bls.n	8014b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8014adc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8014ade:	4770      	bx	lr
 8014ae0:	2a09      	cmp	r2, #9
 8014ae2:	d03e      	beq.n	8014b62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8014ae4:	d801      	bhi.n	8014aea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8014ae6:	2a08      	cmp	r2, #8
 8014ae8:	d1ae      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014aea:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8014aec:	4770      	bx	lr
 8014aee:	2a2f      	cmp	r2, #47	; 0x2f
 8014af0:	d024      	beq.n	8014b3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8014af2:	d80d      	bhi.n	8014b10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8014af4:	2a2d      	cmp	r2, #45	; 0x2d
 8014af6:	d014      	beq.n	8014b22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8014af8:	d826      	bhi.n	8014b48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8014afa:	2a2c      	cmp	r2, #44	; 0x2c
 8014afc:	d1a4      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014afe:	684b      	ldr	r3, [r1, #4]
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	2b01      	cmp	r3, #1
 8014b04:	d018      	beq.n	8014b38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8014b06:	d324      	bcc.n	8014b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8014b08:	2b02      	cmp	r3, #2
 8014b0a:	d19d      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b0c:	68c0      	ldr	r0, [r0, #12]
 8014b0e:	4770      	bx	lr
 8014b10:	2a31      	cmp	r2, #49	; 0x31
 8014b12:	d004      	beq.n	8014b1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8014b14:	d327      	bcc.n	8014b66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8014b16:	2a32      	cmp	r2, #50	; 0x32
 8014b18:	d025      	beq.n	8014b66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8014b1a:	2a33      	cmp	r2, #51	; 0x33
 8014b1c:	d194      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b1e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8014b20:	4770      	bx	lr
 8014b22:	684b      	ldr	r3, [r1, #4]
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d004      	beq.n	8014b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8014b2a:	d30b      	bcc.n	8014b44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8014b2c:	2b02      	cmp	r3, #2
 8014b2e:	d18b      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b30:	6940      	ldr	r0, [r0, #20]
 8014b32:	4770      	bx	lr
 8014b34:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8014b36:	4770      	bx	lr
 8014b38:	69c0      	ldr	r0, [r0, #28]
 8014b3a:	4770      	bx	lr
 8014b3c:	684b      	ldr	r3, [r1, #4]
 8014b3e:	781b      	ldrb	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d181      	bne.n	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b44:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014b46:	4770      	bx	lr
 8014b48:	684b      	ldr	r3, [r1, #4]
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f47f af7b 	bne.w	8014a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8014b52:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014b54:	4770      	bx	lr
 8014b56:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8014b58:	4770      	bx	lr
 8014b5a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8014b5c:	4770      	bx	lr
 8014b5e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014b60:	4770      	bx	lr
 8014b62:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8014b64:	4770      	bx	lr
 8014b66:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8014b68:	4770      	bx	lr

08014b6a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b6e:	b087      	sub	sp, #28
 8014b70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014b72:	9205      	str	r2, [sp, #20]
 8014b74:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8014b78:	9202      	str	r2, [sp, #8]
 8014b7a:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8014b7e:	9101      	str	r1, [sp, #4]
 8014b80:	6871      	ldr	r1, [r6, #4]
 8014b82:	981a      	ldr	r0, [sp, #104]	; 0x68
 8014b84:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8014b88:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8014b8c:	fb01 2505 	mla	r5, r1, r5, r2
 8014b90:	6832      	ldr	r2, [r6, #0]
 8014b92:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8014b96:	6802      	ldr	r2, [r0, #0]
 8014b98:	9203      	str	r2, [sp, #12]
 8014b9a:	6842      	ldr	r2, [r0, #4]
 8014b9c:	fa1f fe84 	uxth.w	lr, r4
 8014ba0:	3204      	adds	r2, #4
 8014ba2:	43e4      	mvns	r4, r4
 8014ba4:	9204      	str	r2, [sp, #16]
 8014ba6:	b2e4      	uxtb	r4, r4
 8014ba8:	9a01      	ldr	r2, [sp, #4]
 8014baa:	2a00      	cmp	r2, #0
 8014bac:	dc03      	bgt.n	8014bb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8014bae:	9a05      	ldr	r2, [sp, #20]
 8014bb0:	2a00      	cmp	r2, #0
 8014bb2:	f340 8119 	ble.w	8014de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8014bb6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014bb8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014bbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bbe:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	dd0f      	ble.n	8014be6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8014bc6:	1408      	asrs	r0, r1, #16
 8014bc8:	d406      	bmi.n	8014bd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014bca:	4540      	cmp	r0, r8
 8014bcc:	da04      	bge.n	8014bd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014bce:	1410      	asrs	r0, r2, #16
 8014bd0:	d402      	bmi.n	8014bd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014bd2:	9e02      	ldr	r6, [sp, #8]
 8014bd4:	42b0      	cmp	r0, r6
 8014bd6:	db07      	blt.n	8014be8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8014bd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014bda:	4401      	add	r1, r0
 8014bdc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014bde:	3b01      	subs	r3, #1
 8014be0:	4402      	add	r2, r0
 8014be2:	3502      	adds	r5, #2
 8014be4:	e7ed      	b.n	8014bc2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8014be6:	d00f      	beq.n	8014c08 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8014be8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014bea:	1e58      	subs	r0, r3, #1
 8014bec:	fb06 1600 	mla	r6, r6, r0, r1
 8014bf0:	1436      	asrs	r6, r6, #16
 8014bf2:	d547      	bpl.n	8014c84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8014bf4:	469b      	mov	fp, r3
 8014bf6:	46aa      	mov	sl, r5
 8014bf8:	f1bb 0f00 	cmp.w	fp, #0
 8014bfc:	f300 809e 	bgt.w	8014d3c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 8014c00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c04:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8014c08:	9b01      	ldr	r3, [sp, #4]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	f340 80ec 	ble.w	8014de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8014c10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014c14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c18:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014c22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014c26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014c2a:	eef0 6a62 	vmov.f32	s13, s5
 8014c2e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014c32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014c36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014c3a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8014c3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014c42:	eef0 6a43 	vmov.f32	s13, s6
 8014c46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014c4a:	ee12 2a90 	vmov	r2, s5
 8014c4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014c52:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c56:	ee13 2a10 	vmov	r2, s6
 8014c5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014c62:	9314      	str	r3, [sp, #80]	; 0x50
 8014c64:	9b01      	ldr	r3, [sp, #4]
 8014c66:	9a05      	ldr	r2, [sp, #20]
 8014c68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014c6c:	3b01      	subs	r3, #1
 8014c6e:	9301      	str	r3, [sp, #4]
 8014c70:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8014c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c76:	eeb0 3a67 	vmov.f32	s6, s15
 8014c7a:	bf08      	it	eq
 8014c7c:	4613      	moveq	r3, r2
 8014c7e:	eef0 2a47 	vmov.f32	s5, s14
 8014c82:	e791      	b.n	8014ba8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8014c84:	4546      	cmp	r6, r8
 8014c86:	dab5      	bge.n	8014bf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8014c88:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8014c8a:	fb06 2000 	mla	r0, r6, r0, r2
 8014c8e:	1400      	asrs	r0, r0, #16
 8014c90:	d4b0      	bmi.n	8014bf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8014c92:	9e02      	ldr	r6, [sp, #8]
 8014c94:	42b0      	cmp	r0, r6
 8014c96:	daad      	bge.n	8014bf4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8014c98:	469a      	mov	sl, r3
 8014c9a:	46ab      	mov	fp, r5
 8014c9c:	f1ba 0f00 	cmp.w	sl, #0
 8014ca0:	ddae      	ble.n	8014c00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8014ca2:	9f03      	ldr	r7, [sp, #12]
 8014ca4:	1410      	asrs	r0, r2, #16
 8014ca6:	140e      	asrs	r6, r1, #16
 8014ca8:	fb08 7000 	mla	r0, r8, r0, r7
 8014cac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cb0:	5d80      	ldrb	r0, [r0, r6]
 8014cb2:	9e04      	ldr	r6, [sp, #16]
 8014cb4:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8014cb8:	f8bb 6000 	ldrh.w	r6, [fp]
 8014cbc:	1237      	asrs	r7, r6, #8
 8014cbe:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8014cc2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014cc6:	fb17 f704 	smulbb	r7, r7, r4
 8014cca:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8014cce:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014cd2:	00f6      	lsls	r6, r6, #3
 8014cd4:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8014cd8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014cdc:	10c7      	asrs	r7, r0, #3
 8014cde:	b2f6      	uxtb	r6, r6
 8014ce0:	00c0      	lsls	r0, r0, #3
 8014ce2:	fb19 f904 	smulbb	r9, r9, r4
 8014ce6:	fb16 f604 	smulbb	r6, r6, r4
 8014cea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014cee:	b2c0      	uxtb	r0, r0
 8014cf0:	fa1f fc8c 	uxth.w	ip, ip
 8014cf4:	fb07 970e 	mla	r7, r7, lr, r9
 8014cf8:	fb00 600e 	mla	r0, r0, lr, r6
 8014cfc:	b280      	uxth	r0, r0
 8014cfe:	b2bf      	uxth	r7, r7
 8014d00:	f10c 0601 	add.w	r6, ip, #1
 8014d04:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8014d08:	f107 0901 	add.w	r9, r7, #1
 8014d0c:	1c46      	adds	r6, r0, #1
 8014d0e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8014d12:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8014d16:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014d18:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014d1c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014d20:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8014d24:	ea4c 0c06 	orr.w	ip, ip, r6
 8014d28:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8014d2c:	4401      	add	r1, r0
 8014d2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014d30:	ea4c 0c09 	orr.w	ip, ip, r9
 8014d34:	f82b cb02 	strh.w	ip, [fp], #2
 8014d38:	4402      	add	r2, r0
 8014d3a:	e7af      	b.n	8014c9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8014d3c:	140e      	asrs	r6, r1, #16
 8014d3e:	d44a      	bmi.n	8014dd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8014d40:	4546      	cmp	r6, r8
 8014d42:	da48      	bge.n	8014dd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8014d44:	1410      	asrs	r0, r2, #16
 8014d46:	d446      	bmi.n	8014dd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8014d48:	9f02      	ldr	r7, [sp, #8]
 8014d4a:	42b8      	cmp	r0, r7
 8014d4c:	da43      	bge.n	8014dd6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 8014d4e:	9f03      	ldr	r7, [sp, #12]
 8014d50:	fb08 7000 	mla	r0, r8, r0, r7
 8014d54:	5d80      	ldrb	r0, [r0, r6]
 8014d56:	9e04      	ldr	r6, [sp, #16]
 8014d58:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8014d5c:	f8ba 6000 	ldrh.w	r6, [sl]
 8014d60:	1237      	asrs	r7, r6, #8
 8014d62:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8014d66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014d6a:	fb17 f704 	smulbb	r7, r7, r4
 8014d6e:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8014d72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014d76:	00f6      	lsls	r6, r6, #3
 8014d78:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8014d7c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014d80:	10c7      	asrs	r7, r0, #3
 8014d82:	b2f6      	uxtb	r6, r6
 8014d84:	00c0      	lsls	r0, r0, #3
 8014d86:	fb19 f904 	smulbb	r9, r9, r4
 8014d8a:	fb16 f604 	smulbb	r6, r6, r4
 8014d8e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8014d92:	b2c0      	uxtb	r0, r0
 8014d94:	fa1f fc8c 	uxth.w	ip, ip
 8014d98:	fb07 970e 	mla	r7, r7, lr, r9
 8014d9c:	fb00 600e 	mla	r0, r0, lr, r6
 8014da0:	b2bf      	uxth	r7, r7
 8014da2:	b280      	uxth	r0, r0
 8014da4:	f10c 0601 	add.w	r6, ip, #1
 8014da8:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8014dac:	f107 0901 	add.w	r9, r7, #1
 8014db0:	1c46      	adds	r6, r0, #1
 8014db2:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8014db6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8014dba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8014dbe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8014dc2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8014dc6:	ea4c 0c06 	orr.w	ip, ip, r6
 8014dca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8014dce:	ea4c 0c09 	orr.w	ip, ip, r9
 8014dd2:	f8aa c000 	strh.w	ip, [sl]
 8014dd6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014dd8:	4401      	add	r1, r0
 8014dda:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014ddc:	f10a 0a02 	add.w	sl, sl, #2
 8014de0:	4402      	add	r2, r0
 8014de2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014de6:	e707      	b.n	8014bf8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8014de8:	b007      	add	sp, #28
 8014dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014dee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df2:	b085      	sub	sp, #20
 8014df4:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 8014df8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8014dfa:	9203      	str	r2, [sp, #12]
 8014dfc:	6842      	ldr	r2, [r0, #4]
 8014dfe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014e00:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8014e02:	6800      	ldr	r0, [r0, #0]
 8014e04:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 8014e08:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8014e0c:	4696      	mov	lr, r2
 8014e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e10:	fb0e 2505 	mla	r5, lr, r5, r2
 8014e14:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8014e18:	6860      	ldr	r0, [r4, #4]
 8014e1a:	6822      	ldr	r2, [r4, #0]
 8014e1c:	9201      	str	r2, [sp, #4]
 8014e1e:	1d02      	adds	r2, r0, #4
 8014e20:	9202      	str	r2, [sp, #8]
 8014e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014e26:	2900      	cmp	r1, #0
 8014e28:	dc03      	bgt.n	8014e32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8014e2a:	9a03      	ldr	r2, [sp, #12]
 8014e2c:	2a00      	cmp	r2, #0
 8014e2e:	f340 809b 	ble.w	8014f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8014e32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014e34:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014e38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e3a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	dd0e      	ble.n	8014e60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8014e42:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8014e46:	d406      	bmi.n	8014e56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8014e48:	45e6      	cmp	lr, ip
 8014e4a:	da04      	bge.n	8014e56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8014e4c:	ea5f 4e20 	movs.w	lr, r0, asr #16
 8014e50:	d401      	bmi.n	8014e56 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8014e52:	45c6      	cmp	lr, r8
 8014e54:	db05      	blt.n	8014e62 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014e56:	443c      	add	r4, r7
 8014e58:	4430      	add	r0, r6
 8014e5a:	3b01      	subs	r3, #1
 8014e5c:	3502      	adds	r5, #2
 8014e5e:	e7ee      	b.n	8014e3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8014e60:	d010      	beq.n	8014e84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8014e62:	f103 3eff 	add.w	lr, r3, #4294967295
 8014e66:	fb07 490e 	mla	r9, r7, lr, r4
 8014e6a:	ea5f 4929 	movs.w	r9, r9, asr #16
 8014e6e:	d53d      	bpl.n	8014eec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8014e70:	469e      	mov	lr, r3
 8014e72:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8014e76:	f1be 0f00 	cmp.w	lr, #0
 8014e7a:	dc58      	bgt.n	8014f2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8014e7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014e80:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8014e84:	2900      	cmp	r1, #0
 8014e86:	dd6f      	ble.n	8014f68 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8014e88:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014e8c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014e90:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014e94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e96:	3901      	subs	r1, #1
 8014e98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014e9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014ea0:	eeb0 6a62 	vmov.f32	s12, s5
 8014ea4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014ea8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014eac:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014eb0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014eb4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014eb8:	eeb0 6a43 	vmov.f32	s12, s6
 8014ebc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014ec0:	ee12 2a90 	vmov	r2, s5
 8014ec4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014ec8:	fb92 f7f3 	sdiv	r7, r2, r3
 8014ecc:	ee13 2a10 	vmov	r2, s6
 8014ed0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014ed4:	fb92 f6f3 	sdiv	r6, r2, r3
 8014ed8:	9a03      	ldr	r2, [sp, #12]
 8014eda:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014ede:	bf08      	it	eq
 8014ee0:	4613      	moveq	r3, r2
 8014ee2:	eeb0 3a67 	vmov.f32	s6, s15
 8014ee6:	eef0 2a47 	vmov.f32	s5, s14
 8014eea:	e79c      	b.n	8014e26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8014eec:	45e1      	cmp	r9, ip
 8014eee:	dabf      	bge.n	8014e70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8014ef0:	fb06 0e0e 	mla	lr, r6, lr, r0
 8014ef4:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8014ef8:	d4ba      	bmi.n	8014e70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8014efa:	45c6      	cmp	lr, r8
 8014efc:	dab8      	bge.n	8014e70 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 8014efe:	469e      	mov	lr, r3
 8014f00:	46aa      	mov	sl, r5
 8014f02:	f1be 0f00 	cmp.w	lr, #0
 8014f06:	ddb9      	ble.n	8014e7c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8014f08:	9a01      	ldr	r2, [sp, #4]
 8014f0a:	ea4f 4920 	mov.w	r9, r0, asr #16
 8014f0e:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8014f12:	fb0c 2909 	mla	r9, ip, r9, r2
 8014f16:	9a02      	ldr	r2, [sp, #8]
 8014f18:	f819 900b 	ldrb.w	r9, [r9, fp]
 8014f1c:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8014f20:	f82a 9b02 	strh.w	r9, [sl], #2
 8014f24:	443c      	add	r4, r7
 8014f26:	4430      	add	r0, r6
 8014f28:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014f2c:	e7e9      	b.n	8014f02 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8014f2e:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8014f32:	d414      	bmi.n	8014f5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8014f34:	45e2      	cmp	sl, ip
 8014f36:	da12      	bge.n	8014f5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8014f38:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014f3c:	d40f      	bmi.n	8014f5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8014f3e:	45c1      	cmp	r9, r8
 8014f40:	da0d      	bge.n	8014f5e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8014f42:	9a01      	ldr	r2, [sp, #4]
 8014f44:	fb0c 2909 	mla	r9, ip, r9, r2
 8014f48:	9a02      	ldr	r2, [sp, #8]
 8014f4a:	f819 900a 	ldrb.w	r9, [r9, sl]
 8014f4e:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 8014f52:	f06f 0201 	mvn.w	r2, #1
 8014f56:	fb02 f90e 	mul.w	r9, r2, lr
 8014f5a:	f82b a009 	strh.w	sl, [fp, r9]
 8014f5e:	443c      	add	r4, r7
 8014f60:	4430      	add	r0, r6
 8014f62:	f10e 3eff 	add.w	lr, lr, #4294967295
 8014f66:	e786      	b.n	8014e76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8014f68:	b005      	add	sp, #20
 8014f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f6e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8014f6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f72:	b087      	sub	sp, #28
 8014f74:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014f76:	9205      	str	r2, [sp, #20]
 8014f78:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8014f7c:	9202      	str	r2, [sp, #8]
 8014f7e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8014f82:	9101      	str	r1, [sp, #4]
 8014f84:	6871      	ldr	r1, [r6, #4]
 8014f86:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8014f88:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8014f8c:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8014f90:	fb01 2404 	mla	r4, r1, r4, r2
 8014f94:	6832      	ldr	r2, [r6, #0]
 8014f96:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8014f9a:	682a      	ldr	r2, [r5, #0]
 8014f9c:	9203      	str	r2, [sp, #12]
 8014f9e:	686a      	ldr	r2, [r5, #4]
 8014fa0:	fa1f fc80 	uxth.w	ip, r0
 8014fa4:	3204      	adds	r2, #4
 8014fa6:	43c0      	mvns	r0, r0
 8014fa8:	9200      	str	r2, [sp, #0]
 8014faa:	b2c0      	uxtb	r0, r0
 8014fac:	9a01      	ldr	r2, [sp, #4]
 8014fae:	2a00      	cmp	r2, #0
 8014fb0:	dc03      	bgt.n	8014fba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8014fb2:	9a05      	ldr	r2, [sp, #20]
 8014fb4:	2a00      	cmp	r2, #0
 8014fb6:	f340 811b 	ble.w	80151f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8014fba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014fbc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8014fc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014fc2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	dd0f      	ble.n	8014fea <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8014fca:	140d      	asrs	r5, r1, #16
 8014fcc:	d406      	bmi.n	8014fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014fce:	4575      	cmp	r5, lr
 8014fd0:	da04      	bge.n	8014fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014fd2:	1415      	asrs	r5, r2, #16
 8014fd4:	d402      	bmi.n	8014fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8014fd6:	9e02      	ldr	r6, [sp, #8]
 8014fd8:	42b5      	cmp	r5, r6
 8014fda:	db07      	blt.n	8014fec <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8014fdc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014fde:	4429      	add	r1, r5
 8014fe0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8014fe2:	3b01      	subs	r3, #1
 8014fe4:	442a      	add	r2, r5
 8014fe6:	3402      	adds	r4, #2
 8014fe8:	e7ed      	b.n	8014fc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8014fea:	d00f      	beq.n	801500c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8014fec:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014fee:	1e5d      	subs	r5, r3, #1
 8014ff0:	fb06 1605 	mla	r6, r6, r5, r1
 8014ff4:	1436      	asrs	r6, r6, #16
 8014ff6:	d547      	bpl.n	8015088 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 8014ff8:	469a      	mov	sl, r3
 8014ffa:	46a1      	mov	r9, r4
 8014ffc:	f1ba 0f00 	cmp.w	sl, #0
 8015000:	f300 809f 	bgt.w	8015142 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8015004:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015008:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801500c:	9b01      	ldr	r3, [sp, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	f340 80ee 	ble.w	80151f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8015014:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801501c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015020:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015022:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015026:	ee31 1a05 	vadd.f32	s2, s2, s10
 801502a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801502e:	eef0 6a62 	vmov.f32	s13, s5
 8015032:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015036:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801503a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801503e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8015042:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015046:	eef0 6a43 	vmov.f32	s13, s6
 801504a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801504e:	ee12 2a90 	vmov	r2, s5
 8015052:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015056:	fb92 f3f3 	sdiv	r3, r2, r3
 801505a:	ee13 2a10 	vmov	r2, s6
 801505e:	9313      	str	r3, [sp, #76]	; 0x4c
 8015060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015062:	fb92 f3f3 	sdiv	r3, r2, r3
 8015066:	9314      	str	r3, [sp, #80]	; 0x50
 8015068:	9b01      	ldr	r3, [sp, #4]
 801506a:	9a05      	ldr	r2, [sp, #20]
 801506c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015070:	3b01      	subs	r3, #1
 8015072:	9301      	str	r3, [sp, #4]
 8015074:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8015078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801507a:	eeb0 3a67 	vmov.f32	s6, s15
 801507e:	bf08      	it	eq
 8015080:	4613      	moveq	r3, r2
 8015082:	eef0 2a47 	vmov.f32	s5, s14
 8015086:	e791      	b.n	8014fac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8015088:	4576      	cmp	r6, lr
 801508a:	dab5      	bge.n	8014ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801508c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801508e:	fb06 2505 	mla	r5, r6, r5, r2
 8015092:	142d      	asrs	r5, r5, #16
 8015094:	d4b0      	bmi.n	8014ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8015096:	9e02      	ldr	r6, [sp, #8]
 8015098:	42b5      	cmp	r5, r6
 801509a:	daad      	bge.n	8014ff8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801509c:	4699      	mov	r9, r3
 801509e:	46a2      	mov	sl, r4
 80150a0:	f1b9 0f00 	cmp.w	r9, #0
 80150a4:	ddae      	ble.n	8015004 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80150a6:	9f03      	ldr	r7, [sp, #12]
 80150a8:	1415      	asrs	r5, r2, #16
 80150aa:	140e      	asrs	r6, r1, #16
 80150ac:	fb0e 7505 	mla	r5, lr, r5, r7
 80150b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80150b4:	f815 8006 	ldrb.w	r8, [r5, r6]
 80150b8:	9d00      	ldr	r5, [sp, #0]
 80150ba:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80150be:	eb05 0b08 	add.w	fp, r5, r8
 80150c2:	f8ba 5000 	ldrh.w	r5, [sl]
 80150c6:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80150ca:	f89b b001 	ldrb.w	fp, [fp, #1]
 80150ce:	122f      	asrs	r7, r5, #8
 80150d0:	fb16 f60c 	smulbb	r6, r6, ip
 80150d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80150d8:	fb07 6700 	mla	r7, r7, r0, r6
 80150dc:	10ee      	asrs	r6, r5, #3
 80150de:	fb1b fb0c 	smulbb	fp, fp, ip
 80150e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80150e6:	fb06 b600 	mla	r6, r6, r0, fp
 80150ea:	b2b6      	uxth	r6, r6
 80150ec:	9604      	str	r6, [sp, #16]
 80150ee:	9e00      	ldr	r6, [sp, #0]
 80150f0:	00ed      	lsls	r5, r5, #3
 80150f2:	f816 8008 	ldrb.w	r8, [r6, r8]
 80150f6:	b2ed      	uxtb	r5, r5
 80150f8:	fb15 f500 	smulbb	r5, r5, r0
 80150fc:	b2bf      	uxth	r7, r7
 80150fe:	fb08 580c 	mla	r8, r8, ip, r5
 8015102:	fa1f f888 	uxth.w	r8, r8
 8015106:	1c7d      	adds	r5, r7, #1
 8015108:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 801510c:	f108 0501 	add.w	r5, r8, #1
 8015110:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8015114:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015118:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801511c:	432f      	orrs	r7, r5
 801511e:	9d04      	ldr	r5, [sp, #16]
 8015120:	f105 0b01 	add.w	fp, r5, #1
 8015124:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8015128:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801512a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801512e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015132:	4429      	add	r1, r5
 8015134:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015136:	ea47 070b 	orr.w	r7, r7, fp
 801513a:	f82a 7b02 	strh.w	r7, [sl], #2
 801513e:	442a      	add	r2, r5
 8015140:	e7ae      	b.n	80150a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 8015142:	140e      	asrs	r6, r1, #16
 8015144:	d44b      	bmi.n	80151de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8015146:	4576      	cmp	r6, lr
 8015148:	da49      	bge.n	80151de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801514a:	1415      	asrs	r5, r2, #16
 801514c:	d447      	bmi.n	80151de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801514e:	9f02      	ldr	r7, [sp, #8]
 8015150:	42bd      	cmp	r5, r7
 8015152:	da44      	bge.n	80151de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8015154:	9f03      	ldr	r7, [sp, #12]
 8015156:	fb0e 7505 	mla	r5, lr, r5, r7
 801515a:	f815 8006 	ldrb.w	r8, [r5, r6]
 801515e:	9d00      	ldr	r5, [sp, #0]
 8015160:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015164:	eb05 0b08 	add.w	fp, r5, r8
 8015168:	f8b9 5000 	ldrh.w	r5, [r9]
 801516c:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8015170:	f89b b001 	ldrb.w	fp, [fp, #1]
 8015174:	122f      	asrs	r7, r5, #8
 8015176:	fb16 f60c 	smulbb	r6, r6, ip
 801517a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801517e:	fb07 6700 	mla	r7, r7, r0, r6
 8015182:	10ee      	asrs	r6, r5, #3
 8015184:	fb1b fb0c 	smulbb	fp, fp, ip
 8015188:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801518c:	fb06 b600 	mla	r6, r6, r0, fp
 8015190:	b2b6      	uxth	r6, r6
 8015192:	9604      	str	r6, [sp, #16]
 8015194:	9e00      	ldr	r6, [sp, #0]
 8015196:	00ed      	lsls	r5, r5, #3
 8015198:	f816 8008 	ldrb.w	r8, [r6, r8]
 801519c:	b2ed      	uxtb	r5, r5
 801519e:	fb15 f500 	smulbb	r5, r5, r0
 80151a2:	b2bf      	uxth	r7, r7
 80151a4:	fb08 580c 	mla	r8, r8, ip, r5
 80151a8:	fa1f f888 	uxth.w	r8, r8
 80151ac:	1c7d      	adds	r5, r7, #1
 80151ae:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80151b2:	f108 0501 	add.w	r5, r8, #1
 80151b6:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 80151ba:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80151be:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80151c2:	432f      	orrs	r7, r5
 80151c4:	9d04      	ldr	r5, [sp, #16]
 80151c6:	f105 0b01 	add.w	fp, r5, #1
 80151ca:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80151ce:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80151d2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80151d6:	ea47 070b 	orr.w	r7, r7, fp
 80151da:	f8a9 7000 	strh.w	r7, [r9]
 80151de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80151e0:	4429      	add	r1, r5
 80151e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80151e4:	f109 0902 	add.w	r9, r9, #2
 80151e8:	442a      	add	r2, r5
 80151ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80151ee:	e705      	b.n	8014ffc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80151f0:	b007      	add	sp, #28
 80151f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080151f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80151f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fc:	b085      	sub	sp, #20
 80151fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015202:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015204:	9203      	str	r2, [sp, #12]
 8015206:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801520a:	6870      	ldr	r0, [r6, #4]
 801520c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801520e:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 8015212:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8015216:	9101      	str	r1, [sp, #4]
 8015218:	fb00 2404 	mla	r4, r0, r4, r2
 801521c:	6832      	ldr	r2, [r6, #0]
 801521e:	686e      	ldr	r6, [r5, #4]
 8015220:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015224:	682a      	ldr	r2, [r5, #0]
 8015226:	9202      	str	r2, [sp, #8]
 8015228:	3604      	adds	r6, #4
 801522a:	9a01      	ldr	r2, [sp, #4]
 801522c:	2a00      	cmp	r2, #0
 801522e:	dc03      	bgt.n	8015238 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8015230:	9a03      	ldr	r2, [sp, #12]
 8015232:	2a00      	cmp	r2, #0
 8015234:	f340 80c7 	ble.w	80153c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8015238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801523a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801523e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015240:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015244:	2b00      	cmp	r3, #0
 8015246:	dd0e      	ble.n	8015266 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8015248:	1405      	asrs	r5, r0, #16
 801524a:	d405      	bmi.n	8015258 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801524c:	42bd      	cmp	r5, r7
 801524e:	da03      	bge.n	8015258 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8015250:	1415      	asrs	r5, r2, #16
 8015252:	d401      	bmi.n	8015258 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8015254:	4545      	cmp	r5, r8
 8015256:	db07      	blt.n	8015268 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8015258:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801525a:	4428      	add	r0, r5
 801525c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801525e:	3b01      	subs	r3, #1
 8015260:	442a      	add	r2, r5
 8015262:	3402      	adds	r4, #2
 8015264:	e7ee      	b.n	8015244 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8015266:	d010      	beq.n	801528a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8015268:	9911      	ldr	r1, [sp, #68]	; 0x44
 801526a:	1e5d      	subs	r5, r3, #1
 801526c:	fb01 0c05 	mla	ip, r1, r5, r0
 8015270:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015274:	d545      	bpl.n	8015302 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8015276:	469e      	mov	lr, r3
 8015278:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 801527c:	f1be 0f00 	cmp.w	lr, #0
 8015280:	dc72      	bgt.n	8015368 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8015282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015286:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801528a:	9b01      	ldr	r3, [sp, #4]
 801528c:	2b00      	cmp	r3, #0
 801528e:	f340 809a 	ble.w	80153c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8015292:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015296:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801529a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801529e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152a0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80152a4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80152a8:	eeb0 6a62 	vmov.f32	s12, s5
 80152ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80152b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80152b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80152b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80152bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80152c0:	eeb0 6a43 	vmov.f32	s12, s6
 80152c4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80152c8:	ee12 2a90 	vmov	r2, s5
 80152cc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80152d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80152d4:	ee13 2a10 	vmov	r2, s6
 80152d8:	9311      	str	r3, [sp, #68]	; 0x44
 80152da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80152e0:	9312      	str	r3, [sp, #72]	; 0x48
 80152e2:	9b01      	ldr	r3, [sp, #4]
 80152e4:	9a03      	ldr	r2, [sp, #12]
 80152e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80152ea:	3b01      	subs	r3, #1
 80152ec:	9301      	str	r3, [sp, #4]
 80152ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80152f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152f4:	eeb0 3a67 	vmov.f32	s6, s15
 80152f8:	bf08      	it	eq
 80152fa:	4613      	moveq	r3, r2
 80152fc:	eef0 2a47 	vmov.f32	s5, s14
 8015300:	e793      	b.n	801522a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 8015302:	45bc      	cmp	ip, r7
 8015304:	dab7      	bge.n	8015276 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8015306:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015308:	fb01 2505 	mla	r5, r1, r5, r2
 801530c:	142d      	asrs	r5, r5, #16
 801530e:	d4b2      	bmi.n	8015276 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8015310:	4545      	cmp	r5, r8
 8015312:	dab0      	bge.n	8015276 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8015314:	469e      	mov	lr, r3
 8015316:	46a2      	mov	sl, r4
 8015318:	f1be 0f00 	cmp.w	lr, #0
 801531c:	ddb1      	ble.n	8015282 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801531e:	9902      	ldr	r1, [sp, #8]
 8015320:	1415      	asrs	r5, r2, #16
 8015322:	fb07 1505 	mla	r5, r7, r5, r1
 8015326:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801532a:	4928      	ldr	r1, [pc, #160]	; (80153cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 801532c:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8015330:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015334:	eb06 0b0c 	add.w	fp, r6, ip
 8015338:	f10e 3eff 	add.w	lr, lr, #4294967295
 801533c:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8015340:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8015344:	00ed      	lsls	r5, r5, #3
 8015346:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801534a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801534e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015350:	ea49 0505 	orr.w	r5, r9, r5
 8015354:	f816 900c 	ldrb.w	r9, [r6, ip]
 8015358:	4408      	add	r0, r1
 801535a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801535c:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 8015360:	f82a 5b02 	strh.w	r5, [sl], #2
 8015364:	440a      	add	r2, r1
 8015366:	e7d7      	b.n	8015318 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 8015368:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801536c:	d424      	bmi.n	80153b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801536e:	45bc      	cmp	ip, r7
 8015370:	da22      	bge.n	80153b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8015372:	1415      	asrs	r5, r2, #16
 8015374:	d420      	bmi.n	80153b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8015376:	4545      	cmp	r5, r8
 8015378:	da1e      	bge.n	80153b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801537a:	9902      	ldr	r1, [sp, #8]
 801537c:	fb07 1505 	mla	r5, r7, r5, r1
 8015380:	f06f 0101 	mvn.w	r1, #1
 8015384:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8015388:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801538c:	eb06 050c 	add.w	r5, r6, ip
 8015390:	fb01 f90e 	mul.w	r9, r1, lr
 8015394:	f895 a002 	ldrb.w	sl, [r5, #2]
 8015398:	786d      	ldrb	r5, [r5, #1]
 801539a:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801539e:	00ed      	lsls	r5, r5, #3
 80153a0:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 80153a4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80153a8:	ea4a 0505 	orr.w	r5, sl, r5
 80153ac:	f816 a00c 	ldrb.w	sl, [r6, ip]
 80153b0:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 80153b4:	f82b 5009 	strh.w	r5, [fp, r9]
 80153b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80153ba:	4408      	add	r0, r1
 80153bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80153be:	f10e 3eff 	add.w	lr, lr, #4294967295
 80153c2:	440a      	add	r2, r1
 80153c4:	e75a      	b.n	801527c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80153c6:	b005      	add	sp, #20
 80153c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153cc:	fffff800 	.word	0xfffff800

080153d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80153d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d4:	b087      	sub	sp, #28
 80153d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80153da:	9204      	str	r2, [sp, #16]
 80153dc:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80153e0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80153e2:	9201      	str	r2, [sp, #4]
 80153e4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80153e8:	9205      	str	r2, [sp, #20]
 80153ea:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80153ee:	9100      	str	r1, [sp, #0]
 80153f0:	6869      	ldr	r1, [r5, #4]
 80153f2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80153f4:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 80153f8:	fb01 2404 	mla	r4, r1, r4, r2
 80153fc:	682a      	ldr	r2, [r5, #0]
 80153fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015402:	6802      	ldr	r2, [r0, #0]
 8015404:	9202      	str	r2, [sp, #8]
 8015406:	6842      	ldr	r2, [r0, #4]
 8015408:	3204      	adds	r2, #4
 801540a:	9203      	str	r2, [sp, #12]
 801540c:	9a00      	ldr	r2, [sp, #0]
 801540e:	2a00      	cmp	r2, #0
 8015410:	dc03      	bgt.n	801541a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8015412:	9a04      	ldr	r2, [sp, #16]
 8015414:	2a00      	cmp	r2, #0
 8015416:	f340 812c 	ble.w	8015672 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801541a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801541c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015422:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015426:	2b00      	cmp	r3, #0
 8015428:	dd0f      	ble.n	801544a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801542a:	1402      	asrs	r2, r0, #16
 801542c:	d406      	bmi.n	801543c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801542e:	4572      	cmp	r2, lr
 8015430:	da04      	bge.n	801543c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8015432:	140a      	asrs	r2, r1, #16
 8015434:	d402      	bmi.n	801543c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8015436:	9d01      	ldr	r5, [sp, #4]
 8015438:	42aa      	cmp	r2, r5
 801543a:	db07      	blt.n	801544c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 801543c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801543e:	4410      	add	r0, r2
 8015440:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015442:	3b01      	subs	r3, #1
 8015444:	4411      	add	r1, r2
 8015446:	3402      	adds	r4, #2
 8015448:	e7ed      	b.n	8015426 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 801544a:	d00f      	beq.n	801546c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801544c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801544e:	1e5a      	subs	r2, r3, #1
 8015450:	fb05 0502 	mla	r5, r5, r2, r0
 8015454:	142d      	asrs	r5, r5, #16
 8015456:	d545      	bpl.n	80154e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8015458:	4699      	mov	r9, r3
 801545a:	46a0      	mov	r8, r4
 801545c:	f1b9 0f00 	cmp.w	r9, #0
 8015460:	f300 80a7 	bgt.w	80155b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8015464:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015468:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801546c:	9b00      	ldr	r3, [sp, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	f340 80ff 	ble.w	8015672 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8015474:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015478:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801547c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015480:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015482:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015486:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801548a:	eeb0 6a62 	vmov.f32	s12, s5
 801548e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015492:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015496:	ee77 2a62 	vsub.f32	s5, s14, s5
 801549a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801549e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80154a2:	eeb0 6a43 	vmov.f32	s12, s6
 80154a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80154aa:	ee12 2a90 	vmov	r2, s5
 80154ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80154b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80154b6:	ee13 2a10 	vmov	r2, s6
 80154ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80154bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154be:	fb92 f3f3 	sdiv	r3, r2, r3
 80154c2:	9314      	str	r3, [sp, #80]	; 0x50
 80154c4:	9b00      	ldr	r3, [sp, #0]
 80154c6:	9a04      	ldr	r2, [sp, #16]
 80154c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80154cc:	3b01      	subs	r3, #1
 80154ce:	9300      	str	r3, [sp, #0]
 80154d0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80154d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154d6:	eeb0 3a67 	vmov.f32	s6, s15
 80154da:	bf08      	it	eq
 80154dc:	4613      	moveq	r3, r2
 80154de:	eef0 2a47 	vmov.f32	s5, s14
 80154e2:	e793      	b.n	801540c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 80154e4:	4575      	cmp	r5, lr
 80154e6:	dab7      	bge.n	8015458 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80154e8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80154ea:	fb05 1202 	mla	r2, r5, r2, r1
 80154ee:	1412      	asrs	r2, r2, #16
 80154f0:	d4b2      	bmi.n	8015458 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80154f2:	9d01      	ldr	r5, [sp, #4]
 80154f4:	42aa      	cmp	r2, r5
 80154f6:	daaf      	bge.n	8015458 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 80154f8:	f04f 0800 	mov.w	r8, #0
 80154fc:	eba3 0208 	sub.w	r2, r3, r8
 8015500:	2a00      	cmp	r2, #0
 8015502:	ddaf      	ble.n	8015464 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8015504:	9e02      	ldr	r6, [sp, #8]
 8015506:	140a      	asrs	r2, r1, #16
 8015508:	1405      	asrs	r5, r0, #16
 801550a:	fb0e 6202 	mla	r2, lr, r2, r6
 801550e:	5d52      	ldrb	r2, [r2, r5]
 8015510:	9d03      	ldr	r5, [sp, #12]
 8015512:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8015516:	0e2e      	lsrs	r6, r5, #24
 8015518:	d044      	beq.n	80155a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 801551a:	9a05      	ldr	r2, [sp, #20]
 801551c:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8015520:	4356      	muls	r6, r2
 8015522:	1c72      	adds	r2, r6, #1
 8015524:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8015528:	1212      	asrs	r2, r2, #8
 801552a:	fa1f f982 	uxth.w	r9, r2
 801552e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8015532:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8015536:	43d2      	mvns	r2, r2
 8015538:	b2d2      	uxtb	r2, r2
 801553a:	fb16 f609 	smulbb	r6, r6, r9
 801553e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015542:	fb07 6702 	mla	r7, r7, r2, r6
 8015546:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801554a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801554e:	b2ed      	uxtb	r5, r5
 8015550:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015554:	fa5f fc8c 	uxtb.w	ip, ip
 8015558:	fb15 f509 	smulbb	r5, r5, r9
 801555c:	fb0c 5502 	mla	r5, ip, r2, r5
 8015560:	b2bf      	uxth	r7, r7
 8015562:	fb1a fa09 	smulbb	sl, sl, r9
 8015566:	b2ad      	uxth	r5, r5
 8015568:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801556c:	fb06 a602 	mla	r6, r6, r2, sl
 8015570:	1c7a      	adds	r2, r7, #1
 8015572:	f105 0a01 	add.w	sl, r5, #1
 8015576:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801557a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801557e:	b2b6      	uxth	r6, r6
 8015580:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015584:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015588:	ea47 070a 	orr.w	r7, r7, sl
 801558c:	f106 0a01 	add.w	sl, r6, #1
 8015590:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015594:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015598:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801559c:	ea47 070a 	orr.w	r7, r7, sl
 80155a0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80155a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155a6:	4410      	add	r0, r2
 80155a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155aa:	f108 0801 	add.w	r8, r8, #1
 80155ae:	4411      	add	r1, r2
 80155b0:	e7a4      	b.n	80154fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 80155b2:	1405      	asrs	r5, r0, #16
 80155b4:	d454      	bmi.n	8015660 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80155b6:	4575      	cmp	r5, lr
 80155b8:	da52      	bge.n	8015660 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80155ba:	140a      	asrs	r2, r1, #16
 80155bc:	d450      	bmi.n	8015660 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80155be:	9e01      	ldr	r6, [sp, #4]
 80155c0:	42b2      	cmp	r2, r6
 80155c2:	da4d      	bge.n	8015660 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80155c4:	9e02      	ldr	r6, [sp, #8]
 80155c6:	fb0e 6202 	mla	r2, lr, r2, r6
 80155ca:	5d52      	ldrb	r2, [r2, r5]
 80155cc:	9d03      	ldr	r5, [sp, #12]
 80155ce:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80155d2:	0e2e      	lsrs	r6, r5, #24
 80155d4:	d044      	beq.n	8015660 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 80155d6:	9a05      	ldr	r2, [sp, #20]
 80155d8:	f8b8 c000 	ldrh.w	ip, [r8]
 80155dc:	4356      	muls	r6, r2
 80155de:	1c72      	adds	r2, r6, #1
 80155e0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80155e4:	1212      	asrs	r2, r2, #8
 80155e6:	fa1f fa82 	uxth.w	sl, r2
 80155ea:	ea4f 272c 	mov.w	r7, ip, asr #8
 80155ee:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80155f2:	43d2      	mvns	r2, r2
 80155f4:	b2d2      	uxtb	r2, r2
 80155f6:	fb16 f60a 	smulbb	r6, r6, sl
 80155fa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80155fe:	fb07 6702 	mla	r7, r7, r2, r6
 8015602:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 8015606:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801560a:	b2ed      	uxtb	r5, r5
 801560c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8015610:	fa5f fc8c 	uxtb.w	ip, ip
 8015614:	fb15 f50a 	smulbb	r5, r5, sl
 8015618:	fb0c 5502 	mla	r5, ip, r2, r5
 801561c:	b2bf      	uxth	r7, r7
 801561e:	fb1b fb0a 	smulbb	fp, fp, sl
 8015622:	b2ad      	uxth	r5, r5
 8015624:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015628:	fb06 b602 	mla	r6, r6, r2, fp
 801562c:	1c7a      	adds	r2, r7, #1
 801562e:	f105 0b01 	add.w	fp, r5, #1
 8015632:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8015636:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 801563a:	b2b6      	uxth	r6, r6
 801563c:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8015640:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8015644:	ea47 070b 	orr.w	r7, r7, fp
 8015648:	f106 0b01 	add.w	fp, r6, #1
 801564c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8015650:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8015654:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8015658:	ea47 070b 	orr.w	r7, r7, fp
 801565c:	f8a8 7000 	strh.w	r7, [r8]
 8015660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015662:	4410      	add	r0, r2
 8015664:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015666:	f108 0802 	add.w	r8, r8, #2
 801566a:	4411      	add	r1, r2
 801566c:	f109 39ff 	add.w	r9, r9, #4294967295
 8015670:	e6f4      	b.n	801545c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8015672:	b007      	add	sp, #28
 8015674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015678 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567c:	b087      	sub	sp, #28
 801567e:	468b      	mov	fp, r1
 8015680:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015682:	9205      	str	r2, [sp, #20]
 8015684:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8015688:	9201      	str	r2, [sp, #4]
 801568a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801568e:	6869      	ldr	r1, [r5, #4]
 8015690:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015692:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8015696:	fb01 2404 	mla	r4, r1, r4, r2
 801569a:	682a      	ldr	r2, [r5, #0]
 801569c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80156a0:	6802      	ldr	r2, [r0, #0]
 80156a2:	9203      	str	r2, [sp, #12]
 80156a4:	6842      	ldr	r2, [r0, #4]
 80156a6:	3204      	adds	r2, #4
 80156a8:	9204      	str	r2, [sp, #16]
 80156aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80156ae:	f1bb 0f00 	cmp.w	fp, #0
 80156b2:	dc03      	bgt.n	80156bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80156b4:	9a05      	ldr	r2, [sp, #20]
 80156b6:	2a00      	cmp	r2, #0
 80156b8:	f340 814a 	ble.w	8015950 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 80156bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80156be:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80156c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156c4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	dd0f      	ble.n	80156ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80156cc:	1408      	asrs	r0, r1, #16
 80156ce:	d406      	bmi.n	80156de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80156d0:	4540      	cmp	r0, r8
 80156d2:	da04      	bge.n	80156de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80156d4:	1410      	asrs	r0, r2, #16
 80156d6:	d402      	bmi.n	80156de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 80156d8:	9d01      	ldr	r5, [sp, #4]
 80156da:	42a8      	cmp	r0, r5
 80156dc:	db07      	blt.n	80156ee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80156de:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80156e0:	4401      	add	r1, r0
 80156e2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80156e4:	3b01      	subs	r3, #1
 80156e6:	4402      	add	r2, r0
 80156e8:	3402      	adds	r4, #2
 80156ea:	e7ed      	b.n	80156c8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 80156ec:	d018      	beq.n	8015720 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 80156ee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80156f0:	1e58      	subs	r0, r3, #1
 80156f2:	fb05 1500 	mla	r5, r5, r0, r1
 80156f6:	142d      	asrs	r5, r5, #16
 80156f8:	d40a      	bmi.n	8015710 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80156fa:	4545      	cmp	r5, r8
 80156fc:	da08      	bge.n	8015710 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80156fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015700:	fb05 2000 	mla	r0, r5, r0, r2
 8015704:	1400      	asrs	r0, r0, #16
 8015706:	d403      	bmi.n	8015710 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8015708:	9d01      	ldr	r5, [sp, #4]
 801570a:	42a8      	cmp	r0, r5
 801570c:	f2c0 80b7 	blt.w	801587e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8015710:	2600      	movs	r6, #0
 8015712:	1998      	adds	r0, r3, r6
 8015714:	2800      	cmp	r0, #0
 8015716:	dc3e      	bgt.n	8015796 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8015718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801571c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015720:	f1bb 0f00 	cmp.w	fp, #0
 8015724:	f340 8114 	ble.w	8015950 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8015728:	ee30 0a04 	vadd.f32	s0, s0, s8
 801572c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015730:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015736:	f1bb 0b01 	subs.w	fp, fp, #1
 801573a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801573e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015742:	eeb0 6a62 	vmov.f32	s12, s5
 8015746:	ee61 7a27 	vmul.f32	s15, s2, s15
 801574a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801574e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015752:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015756:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801575a:	eeb0 6a43 	vmov.f32	s12, s6
 801575e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015762:	ee12 2a90 	vmov	r2, s5
 8015766:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801576a:	fb92 f3f3 	sdiv	r3, r2, r3
 801576e:	ee13 2a10 	vmov	r2, s6
 8015772:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015776:	9313      	str	r3, [sp, #76]	; 0x4c
 8015778:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801577a:	fb92 f3f3 	sdiv	r3, r2, r3
 801577e:	9a05      	ldr	r2, [sp, #20]
 8015780:	9314      	str	r3, [sp, #80]	; 0x50
 8015782:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015788:	eeb0 3a67 	vmov.f32	s6, s15
 801578c:	bf08      	it	eq
 801578e:	4613      	moveq	r3, r2
 8015790:	eef0 2a47 	vmov.f32	s5, s14
 8015794:	e78b      	b.n	80156ae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8015796:	140d      	asrs	r5, r1, #16
 8015798:	d459      	bmi.n	801584e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801579a:	4545      	cmp	r5, r8
 801579c:	da57      	bge.n	801584e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801579e:	1410      	asrs	r0, r2, #16
 80157a0:	d455      	bmi.n	801584e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80157a2:	9f01      	ldr	r7, [sp, #4]
 80157a4:	42b8      	cmp	r0, r7
 80157a6:	da52      	bge.n	801584e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80157a8:	9f03      	ldr	r7, [sp, #12]
 80157aa:	fb08 7000 	mla	r0, r8, r0, r7
 80157ae:	5d40      	ldrb	r0, [r0, r5]
 80157b0:	9d04      	ldr	r5, [sp, #16]
 80157b2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80157b6:	0e07      	lsrs	r7, r0, #24
 80157b8:	2fff      	cmp	r7, #255	; 0xff
 80157ba:	d04e      	beq.n	801585a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 80157bc:	b2fd      	uxtb	r5, r7
 80157be:	2f00      	cmp	r7, #0
 80157c0:	d045      	beq.n	801584e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80157c2:	f06f 0701 	mvn.w	r7, #1
 80157c6:	4377      	muls	r7, r6
 80157c8:	fa1f f985 	uxth.w	r9, r5
 80157cc:	f834 e007 	ldrh.w	lr, [r4, r7]
 80157d0:	9702      	str	r7, [sp, #8]
 80157d2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80157d6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80157da:	43ed      	mvns	r5, r5
 80157dc:	b2ed      	uxtb	r5, r5
 80157de:	fb17 f709 	smulbb	r7, r7, r9
 80157e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80157e6:	fb0c 7c05 	mla	ip, ip, r5, r7
 80157ea:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80157ee:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80157f2:	b2c0      	uxtb	r0, r0
 80157f4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80157f8:	fa5f fe8e 	uxtb.w	lr, lr
 80157fc:	fb10 f009 	smulbb	r0, r0, r9
 8015800:	fb0e 0005 	mla	r0, lr, r5, r0
 8015804:	b280      	uxth	r0, r0
 8015806:	fa1f fc8c 	uxth.w	ip, ip
 801580a:	fb1a fa09 	smulbb	sl, sl, r9
 801580e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015812:	fb07 a705 	mla	r7, r7, r5, sl
 8015816:	f100 0a01 	add.w	sl, r0, #1
 801581a:	f10c 0501 	add.w	r5, ip, #1
 801581e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8015822:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8015826:	b2bf      	uxth	r7, r7
 8015828:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801582c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015830:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015834:	f107 0a01 	add.w	sl, r7, #1
 8015838:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801583c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015840:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015844:	9802      	ldr	r0, [sp, #8]
 8015846:	ea4c 0c0a 	orr.w	ip, ip, sl
 801584a:	f824 c000 	strh.w	ip, [r4, r0]
 801584e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015850:	4401      	add	r1, r0
 8015852:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015854:	3e01      	subs	r6, #1
 8015856:	4402      	add	r2, r0
 8015858:	e75b      	b.n	8015712 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801585a:	f06f 0501 	mvn.w	r5, #1
 801585e:	fb05 f706 	mul.w	r7, r5, r6
 8015862:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8015866:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801586a:	0945      	lsrs	r5, r0, #5
 801586c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8015870:	ea4c 0505 	orr.w	r5, ip, r5
 8015874:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8015878:	4305      	orrs	r5, r0
 801587a:	53e5      	strh	r5, [r4, r7]
 801587c:	e7e7      	b.n	801584e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801587e:	f04f 0e00 	mov.w	lr, #0
 8015882:	eba3 000e 	sub.w	r0, r3, lr
 8015886:	2800      	cmp	r0, #0
 8015888:	f77f af46 	ble.w	8015718 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 801588c:	9e03      	ldr	r6, [sp, #12]
 801588e:	1410      	asrs	r0, r2, #16
 8015890:	140d      	asrs	r5, r1, #16
 8015892:	fb08 6000 	mla	r0, r8, r0, r6
 8015896:	5d40      	ldrb	r0, [r0, r5]
 8015898:	9d04      	ldr	r5, [sp, #16]
 801589a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801589e:	0e06      	lsrs	r6, r0, #24
 80158a0:	2eff      	cmp	r6, #255	; 0xff
 80158a2:	d048      	beq.n	8015936 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 80158a4:	b2f5      	uxtb	r5, r6
 80158a6:	2e00      	cmp	r6, #0
 80158a8:	d03e      	beq.n	8015928 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80158aa:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80158ae:	fa1f f985 	uxth.w	r9, r5
 80158b2:	ea4f 272c 	mov.w	r7, ip, asr #8
 80158b6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80158ba:	43ed      	mvns	r5, r5
 80158bc:	b2ed      	uxtb	r5, r5
 80158be:	fb16 f609 	smulbb	r6, r6, r9
 80158c2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80158c6:	fb07 6705 	mla	r7, r7, r5, r6
 80158ca:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80158ce:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80158d2:	b2c0      	uxtb	r0, r0
 80158d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80158d8:	fa5f fc8c 	uxtb.w	ip, ip
 80158dc:	fb10 f009 	smulbb	r0, r0, r9
 80158e0:	fb0c 0005 	mla	r0, ip, r5, r0
 80158e4:	b2bf      	uxth	r7, r7
 80158e6:	fb1a fa09 	smulbb	sl, sl, r9
 80158ea:	b280      	uxth	r0, r0
 80158ec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80158f0:	fb06 a605 	mla	r6, r6, r5, sl
 80158f4:	1c7d      	adds	r5, r7, #1
 80158f6:	f100 0a01 	add.w	sl, r0, #1
 80158fa:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80158fe:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8015902:	b2b6      	uxth	r6, r6
 8015904:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015908:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801590c:	ea47 070a 	orr.w	r7, r7, sl
 8015910:	f106 0a01 	add.w	sl, r6, #1
 8015914:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015918:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801591c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015920:	ea47 070a 	orr.w	r7, r7, sl
 8015924:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8015928:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801592a:	4401      	add	r1, r0
 801592c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801592e:	f10e 0e01 	add.w	lr, lr, #1
 8015932:	4402      	add	r2, r0
 8015934:	e7a5      	b.n	8015882 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 8015936:	4d08      	ldr	r5, [pc, #32]	; (8015958 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 8015938:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 801593c:	0945      	lsrs	r5, r0, #5
 801593e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8015942:	4335      	orrs	r5, r6
 8015944:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8015948:	4305      	orrs	r5, r0
 801594a:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 801594e:	e7eb      	b.n	8015928 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8015950:	b007      	add	sp, #28
 8015952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015956:	bf00      	nop
 8015958:	fffff800 	.word	0xfffff800

0801595c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015960:	b087      	sub	sp, #28
 8015962:	468b      	mov	fp, r1
 8015964:	9204      	str	r2, [sp, #16]
 8015966:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 801596a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801596c:	9201      	str	r2, [sp, #4]
 801596e:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8015972:	9205      	str	r2, [sp, #20]
 8015974:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8015978:	6869      	ldr	r1, [r5, #4]
 801597a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801597c:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8015980:	fb01 2404 	mla	r4, r1, r4, r2
 8015984:	682a      	ldr	r2, [r5, #0]
 8015986:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801598a:	6802      	ldr	r2, [r0, #0]
 801598c:	9202      	str	r2, [sp, #8]
 801598e:	6842      	ldr	r2, [r0, #4]
 8015990:	9203      	str	r2, [sp, #12]
 8015992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015996:	f1bb 0f00 	cmp.w	fp, #0
 801599a:	dc03      	bgt.n	80159a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 801599c:	9a04      	ldr	r2, [sp, #16]
 801599e:	2a00      	cmp	r2, #0
 80159a0:	f340 8136 	ble.w	8015c10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80159a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80159a6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80159aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80159ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	dd0f      	ble.n	80159d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80159b4:	1408      	asrs	r0, r1, #16
 80159b6:	d406      	bmi.n	80159c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80159b8:	4540      	cmp	r0, r8
 80159ba:	da04      	bge.n	80159c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80159bc:	1410      	asrs	r0, r2, #16
 80159be:	d402      	bmi.n	80159c6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80159c0:	9d01      	ldr	r5, [sp, #4]
 80159c2:	42a8      	cmp	r0, r5
 80159c4:	db07      	blt.n	80159d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 80159c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80159c8:	4401      	add	r1, r0
 80159ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 80159cc:	3b01      	subs	r3, #1
 80159ce:	4402      	add	r2, r0
 80159d0:	3402      	adds	r4, #2
 80159d2:	e7ed      	b.n	80159b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 80159d4:	d00f      	beq.n	80159f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 80159d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80159d8:	1e58      	subs	r0, r3, #1
 80159da:	fb05 1500 	mla	r5, r5, r0, r1
 80159de:	142d      	asrs	r5, r5, #16
 80159e0:	d544      	bpl.n	8015a6c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	46a2      	mov	sl, r4
 80159e6:	9800      	ldr	r0, [sp, #0]
 80159e8:	2800      	cmp	r0, #0
 80159ea:	f300 80ab 	bgt.w	8015b44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 80159ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80159f2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80159f6:	f1bb 0f00 	cmp.w	fp, #0
 80159fa:	f340 8109 	ble.w	8015c10 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80159fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015a02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015a06:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015a0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a0c:	f1bb 0b01 	subs.w	fp, fp, #1
 8015a10:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015a14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015a18:	eeb0 6a62 	vmov.f32	s12, s5
 8015a1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015a20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a24:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015a28:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015a2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015a30:	eeb0 6a43 	vmov.f32	s12, s6
 8015a34:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015a38:	ee12 2a90 	vmov	r2, s5
 8015a3c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a44:	ee13 2a10 	vmov	r2, s6
 8015a48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015a4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a50:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a54:	9a04      	ldr	r2, [sp, #16]
 8015a56:	9314      	str	r3, [sp, #80]	; 0x50
 8015a58:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a5e:	eeb0 3a67 	vmov.f32	s6, s15
 8015a62:	bf08      	it	eq
 8015a64:	4613      	moveq	r3, r2
 8015a66:	eef0 2a47 	vmov.f32	s5, s14
 8015a6a:	e794      	b.n	8015996 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8015a6c:	4545      	cmp	r5, r8
 8015a6e:	dab8      	bge.n	80159e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8015a70:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015a72:	fb05 2000 	mla	r0, r5, r0, r2
 8015a76:	1400      	asrs	r0, r0, #16
 8015a78:	d4b3      	bmi.n	80159e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8015a7a:	9d01      	ldr	r5, [sp, #4]
 8015a7c:	42a8      	cmp	r0, r5
 8015a7e:	dab0      	bge.n	80159e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8015a80:	f04f 0900 	mov.w	r9, #0
 8015a84:	eba3 0009 	sub.w	r0, r3, r9
 8015a88:	2800      	cmp	r0, #0
 8015a8a:	ddb0      	ble.n	80159ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8015a8c:	140d      	asrs	r5, r1, #16
 8015a8e:	1410      	asrs	r0, r2, #16
 8015a90:	fb08 5000 	mla	r0, r8, r0, r5
 8015a94:	9d03      	ldr	r5, [sp, #12]
 8015a96:	5c2e      	ldrb	r6, [r5, r0]
 8015a98:	2e00      	cmp	r6, #0
 8015a9a:	d04c      	beq.n	8015b36 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8015a9c:	9d02      	ldr	r5, [sp, #8]
 8015a9e:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8015aa2:	9805      	ldr	r0, [sp, #20]
 8015aa4:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8015aa8:	4346      	muls	r6, r0
 8015aaa:	1c70      	adds	r0, r6, #1
 8015aac:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8015ab0:	1200      	asrs	r0, r0, #8
 8015ab2:	b287      	uxth	r7, r0
 8015ab4:	122e      	asrs	r6, r5, #8
 8015ab6:	43c0      	mvns	r0, r0
 8015ab8:	b2c0      	uxtb	r0, r0
 8015aba:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015abe:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015ac2:	fb16 f600 	smulbb	r6, r6, r0
 8015ac6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015aca:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015ace:	00ed      	lsls	r5, r5, #3
 8015ad0:	fb0c 6c07 	mla	ip, ip, r7, r6
 8015ad4:	b2ed      	uxtb	r5, r5
 8015ad6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015ada:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015ade:	fb15 f500 	smulbb	r5, r5, r0
 8015ae2:	fa5f fe8e 	uxtb.w	lr, lr
 8015ae6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015aea:	fb0e 5507 	mla	r5, lr, r7, r5
 8015aee:	fb1a fa00 	smulbb	sl, sl, r0
 8015af2:	fa1f fc8c 	uxth.w	ip, ip
 8015af6:	b2ad      	uxth	r5, r5
 8015af8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015afc:	fb06 a607 	mla	r6, r6, r7, sl
 8015b00:	f10c 0001 	add.w	r0, ip, #1
 8015b04:	f105 0a01 	add.w	sl, r5, #1
 8015b08:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8015b0c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015b10:	b2b6      	uxth	r6, r6
 8015b12:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015b16:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015b1a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015b1e:	f106 0a01 	add.w	sl, r6, #1
 8015b22:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015b26:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015b2a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015b2e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015b32:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 8015b36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015b38:	4401      	add	r1, r0
 8015b3a:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015b3c:	f109 0901 	add.w	r9, r9, #1
 8015b40:	4402      	add	r2, r0
 8015b42:	e79f      	b.n	8015a84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 8015b44:	1408      	asrs	r0, r1, #16
 8015b46:	d459      	bmi.n	8015bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8015b48:	4540      	cmp	r0, r8
 8015b4a:	da57      	bge.n	8015bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8015b4c:	1415      	asrs	r5, r2, #16
 8015b4e:	d455      	bmi.n	8015bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8015b50:	9e01      	ldr	r6, [sp, #4]
 8015b52:	42b5      	cmp	r5, r6
 8015b54:	da52      	bge.n	8015bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8015b56:	fb08 0005 	mla	r0, r8, r5, r0
 8015b5a:	9d03      	ldr	r5, [sp, #12]
 8015b5c:	5c2e      	ldrb	r6, [r5, r0]
 8015b5e:	2e00      	cmp	r6, #0
 8015b60:	d04c      	beq.n	8015bfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8015b62:	9d02      	ldr	r5, [sp, #8]
 8015b64:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8015b68:	9805      	ldr	r0, [sp, #20]
 8015b6a:	f8ba 5000 	ldrh.w	r5, [sl]
 8015b6e:	4346      	muls	r6, r0
 8015b70:	1c70      	adds	r0, r6, #1
 8015b72:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8015b76:	1200      	asrs	r0, r0, #8
 8015b78:	b287      	uxth	r7, r0
 8015b7a:	122e      	asrs	r6, r5, #8
 8015b7c:	43c0      	mvns	r0, r0
 8015b7e:	b2c0      	uxtb	r0, r0
 8015b80:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015b84:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015b88:	fb16 f600 	smulbb	r6, r6, r0
 8015b8c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8015b90:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015b94:	00ed      	lsls	r5, r5, #3
 8015b96:	fb0c 6c07 	mla	ip, ip, r7, r6
 8015b9a:	b2ed      	uxtb	r5, r5
 8015b9c:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015ba0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015ba4:	fb15 f500 	smulbb	r5, r5, r0
 8015ba8:	fa5f fe8e 	uxtb.w	lr, lr
 8015bac:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015bb0:	fb0e 5507 	mla	r5, lr, r7, r5
 8015bb4:	fb19 f900 	smulbb	r9, r9, r0
 8015bb8:	fa1f fc8c 	uxth.w	ip, ip
 8015bbc:	b2ad      	uxth	r5, r5
 8015bbe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015bc2:	fb06 9607 	mla	r6, r6, r7, r9
 8015bc6:	f10c 0001 	add.w	r0, ip, #1
 8015bca:	f105 0901 	add.w	r9, r5, #1
 8015bce:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 8015bd2:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8015bd6:	b2b6      	uxth	r6, r6
 8015bd8:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8015bdc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015be0:	ea4c 0c09 	orr.w	ip, ip, r9
 8015be4:	f106 0901 	add.w	r9, r6, #1
 8015be8:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 8015bec:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8015bf0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8015bf4:	ea4c 0c09 	orr.w	ip, ip, r9
 8015bf8:	f8aa c000 	strh.w	ip, [sl]
 8015bfc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015bfe:	4401      	add	r1, r0
 8015c00:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015c02:	4402      	add	r2, r0
 8015c04:	9800      	ldr	r0, [sp, #0]
 8015c06:	3801      	subs	r0, #1
 8015c08:	f10a 0a02 	add.w	sl, sl, #2
 8015c0c:	9000      	str	r0, [sp, #0]
 8015c0e:	e6ea      	b.n	80159e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8015c10:	b007      	add	sp, #28
 8015c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c16 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1a:	b087      	sub	sp, #28
 8015c1c:	468b      	mov	fp, r1
 8015c1e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015c20:	9205      	str	r2, [sp, #20]
 8015c22:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8015c26:	9202      	str	r2, [sp, #8]
 8015c28:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8015c2c:	6869      	ldr	r1, [r5, #4]
 8015c2e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8015c30:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8015c34:	fb01 2000 	mla	r0, r1, r0, r2
 8015c38:	682a      	ldr	r2, [r5, #0]
 8015c3a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8015c3e:	6822      	ldr	r2, [r4, #0]
 8015c40:	9201      	str	r2, [sp, #4]
 8015c42:	6862      	ldr	r2, [r4, #4]
 8015c44:	9204      	str	r2, [sp, #16]
 8015c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c4a:	f1bb 0f00 	cmp.w	fp, #0
 8015c4e:	dc03      	bgt.n	8015c58 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8015c50:	9a05      	ldr	r2, [sp, #20]
 8015c52:	2a00      	cmp	r2, #0
 8015c54:	f340 813d 	ble.w	8015ed2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8015c58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c5a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015c60:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	dd0f      	ble.n	8015c88 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8015c68:	140c      	asrs	r4, r1, #16
 8015c6a:	d406      	bmi.n	8015c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015c6c:	454c      	cmp	r4, r9
 8015c6e:	da04      	bge.n	8015c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015c70:	1414      	asrs	r4, r2, #16
 8015c72:	d402      	bmi.n	8015c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8015c74:	9d02      	ldr	r5, [sp, #8]
 8015c76:	42ac      	cmp	r4, r5
 8015c78:	db07      	blt.n	8015c8a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8015c7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015c7c:	4421      	add	r1, r4
 8015c7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015c80:	3b01      	subs	r3, #1
 8015c82:	4422      	add	r2, r4
 8015c84:	3002      	adds	r0, #2
 8015c86:	e7ed      	b.n	8015c64 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8015c88:	d018      	beq.n	8015cbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 8015c8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015c8c:	1e5c      	subs	r4, r3, #1
 8015c8e:	fb05 1504 	mla	r5, r5, r4, r1
 8015c92:	142d      	asrs	r5, r5, #16
 8015c94:	d40a      	bmi.n	8015cac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8015c96:	454d      	cmp	r5, r9
 8015c98:	da08      	bge.n	8015cac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8015c9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015c9c:	fb05 2404 	mla	r4, r5, r4, r2
 8015ca0:	1424      	asrs	r4, r4, #16
 8015ca2:	d403      	bmi.n	8015cac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8015ca4:	9d02      	ldr	r5, [sp, #8]
 8015ca6:	42ac      	cmp	r4, r5
 8015ca8:	f2c0 80ae 	blt.w	8015e08 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 8015cac:	2600      	movs	r6, #0
 8015cae:	199c      	adds	r4, r3, r6
 8015cb0:	2c00      	cmp	r4, #0
 8015cb2:	dc3e      	bgt.n	8015d32 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8015cb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015cb8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015cbc:	f1bb 0f00 	cmp.w	fp, #0
 8015cc0:	f340 8107 	ble.w	8015ed2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8015cc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015cc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015ccc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cd2:	f1bb 0b01 	subs.w	fp, fp, #1
 8015cd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015cda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015cde:	eeb0 6a62 	vmov.f32	s12, s5
 8015ce2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015ce6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015cea:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015cee:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015cf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015cf6:	eeb0 6a43 	vmov.f32	s12, s6
 8015cfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015cfe:	ee12 2a90 	vmov	r2, s5
 8015d02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8015d0a:	ee13 2a10 	vmov	r2, s6
 8015d0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015d12:	9313      	str	r3, [sp, #76]	; 0x4c
 8015d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d16:	fb92 f3f3 	sdiv	r3, r2, r3
 8015d1a:	9a05      	ldr	r2, [sp, #20]
 8015d1c:	9314      	str	r3, [sp, #80]	; 0x50
 8015d1e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015d22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015d24:	eeb0 3a67 	vmov.f32	s6, s15
 8015d28:	bf08      	it	eq
 8015d2a:	4613      	moveq	r3, r2
 8015d2c:	eef0 2a47 	vmov.f32	s5, s14
 8015d30:	e78b      	b.n	8015c4a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 8015d32:	140c      	asrs	r4, r1, #16
 8015d34:	d45a      	bmi.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8015d36:	454c      	cmp	r4, r9
 8015d38:	da58      	bge.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8015d3a:	1415      	asrs	r5, r2, #16
 8015d3c:	d456      	bmi.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8015d3e:	9f02      	ldr	r7, [sp, #8]
 8015d40:	42bd      	cmp	r5, r7
 8015d42:	da53      	bge.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8015d44:	fb09 4505 	mla	r5, r9, r5, r4
 8015d48:	9c04      	ldr	r4, [sp, #16]
 8015d4a:	5d64      	ldrb	r4, [r4, r5]
 8015d4c:	2cff      	cmp	r4, #255	; 0xff
 8015d4e:	d053      	beq.n	8015df8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8015d50:	2c00      	cmp	r4, #0
 8015d52:	d04b      	beq.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8015d54:	9f01      	ldr	r7, [sp, #4]
 8015d56:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8015d5a:	f06f 0501 	mvn.w	r5, #1
 8015d5e:	4375      	muls	r5, r6
 8015d60:	9503      	str	r5, [sp, #12]
 8015d62:	5b45      	ldrh	r5, [r0, r5]
 8015d64:	fa1f fc84 	uxth.w	ip, r4
 8015d68:	122f      	asrs	r7, r5, #8
 8015d6a:	43e4      	mvns	r4, r4
 8015d6c:	b2e4      	uxtb	r4, r4
 8015d6e:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8015d72:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015d76:	fb17 f704 	smulbb	r7, r7, r4
 8015d7a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015d7e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8015d82:	00ed      	lsls	r5, r5, #3
 8015d84:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8015d88:	b2ed      	uxtb	r5, r5
 8015d8a:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8015d8e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8015d92:	fb15 f504 	smulbb	r5, r5, r4
 8015d96:	fa5f f888 	uxtb.w	r8, r8
 8015d9a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015d9e:	fb08 550c 	mla	r5, r8, ip, r5
 8015da2:	fb1a fa04 	smulbb	sl, sl, r4
 8015da6:	fa1f fe8e 	uxth.w	lr, lr
 8015daa:	b2ad      	uxth	r5, r5
 8015dac:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015db0:	fb07 a70c 	mla	r7, r7, ip, sl
 8015db4:	f10e 0401 	add.w	r4, lr, #1
 8015db8:	f105 0a01 	add.w	sl, r5, #1
 8015dbc:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8015dc0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015dc4:	b2bf      	uxth	r7, r7
 8015dc6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015dca:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8015dce:	ea4e 0e0a 	orr.w	lr, lr, sl
 8015dd2:	f107 0a01 	add.w	sl, r7, #1
 8015dd6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8015dda:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015dde:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015de2:	9c03      	ldr	r4, [sp, #12]
 8015de4:	ea4e 0e0a 	orr.w	lr, lr, sl
 8015de8:	f820 e004 	strh.w	lr, [r0, r4]
 8015dec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015dee:	4421      	add	r1, r4
 8015df0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015df2:	3e01      	subs	r6, #1
 8015df4:	4422      	add	r2, r4
 8015df6:	e75a      	b.n	8015cae <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8015df8:	9c01      	ldr	r4, [sp, #4]
 8015dfa:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8015dfe:	f06f 0401 	mvn.w	r4, #1
 8015e02:	4374      	muls	r4, r6
 8015e04:	5305      	strh	r5, [r0, r4]
 8015e06:	e7f1      	b.n	8015dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8015e08:	f04f 0800 	mov.w	r8, #0
 8015e0c:	eba3 0408 	sub.w	r4, r3, r8
 8015e10:	2c00      	cmp	r4, #0
 8015e12:	f77f af4f 	ble.w	8015cb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8015e16:	140c      	asrs	r4, r1, #16
 8015e18:	1415      	asrs	r5, r2, #16
 8015e1a:	fb09 4505 	mla	r5, r9, r5, r4
 8015e1e:	9c04      	ldr	r4, [sp, #16]
 8015e20:	5d64      	ldrb	r4, [r4, r5]
 8015e22:	2cff      	cmp	r4, #255	; 0xff
 8015e24:	d04f      	beq.n	8015ec6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8015e26:	2c00      	cmp	r4, #0
 8015e28:	d046      	beq.n	8015eb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8015e2a:	9e01      	ldr	r6, [sp, #4]
 8015e2c:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8015e30:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 8015e34:	b2a7      	uxth	r7, r4
 8015e36:	122e      	asrs	r6, r5, #8
 8015e38:	43e4      	mvns	r4, r4
 8015e3a:	b2e4      	uxtb	r4, r4
 8015e3c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015e40:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015e44:	fb16 f604 	smulbb	r6, r6, r4
 8015e48:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8015e4c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015e50:	00ed      	lsls	r5, r5, #3
 8015e52:	fb0c 6c07 	mla	ip, ip, r7, r6
 8015e56:	b2ed      	uxtb	r5, r5
 8015e58:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015e5c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015e60:	fb15 f504 	smulbb	r5, r5, r4
 8015e64:	fa5f fe8e 	uxtb.w	lr, lr
 8015e68:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015e6c:	fb0e 5507 	mla	r5, lr, r7, r5
 8015e70:	fb1a fa04 	smulbb	sl, sl, r4
 8015e74:	fa1f fc8c 	uxth.w	ip, ip
 8015e78:	b2ad      	uxth	r5, r5
 8015e7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015e7e:	fb06 a607 	mla	r6, r6, r7, sl
 8015e82:	f10c 0401 	add.w	r4, ip, #1
 8015e86:	f105 0a01 	add.w	sl, r5, #1
 8015e8a:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8015e8e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8015e92:	b2b6      	uxth	r6, r6
 8015e94:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8015e98:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015e9c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015ea0:	f106 0a01 	add.w	sl, r6, #1
 8015ea4:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8015ea8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8015eac:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8015eb0:	ea4c 0c0a 	orr.w	ip, ip, sl
 8015eb4:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 8015eb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015eba:	4421      	add	r1, r4
 8015ebc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015ebe:	f108 0801 	add.w	r8, r8, #1
 8015ec2:	4422      	add	r2, r4
 8015ec4:	e7a2      	b.n	8015e0c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8015ec6:	9c01      	ldr	r4, [sp, #4]
 8015ec8:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8015ecc:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 8015ed0:	e7f2      	b.n	8015eb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8015ed2:	b007      	add	sp, #28
 8015ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015ed8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8015ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	b085      	sub	sp, #20
 8015ede:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8015ee0:	9203      	str	r2, [sp, #12]
 8015ee2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8015ee6:	9201      	str	r2, [sp, #4]
 8015ee8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015eec:	9100      	str	r1, [sp, #0]
 8015eee:	6841      	ldr	r1, [r0, #4]
 8015ef0:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 8015ef4:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 8015ef8:	fb01 2404 	mla	r4, r1, r4, r2
 8015efc:	6802      	ldr	r2, [r0, #0]
 8015efe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8015f02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015f04:	fa1f fe85 	uxth.w	lr, r5
 8015f08:	6812      	ldr	r2, [r2, #0]
 8015f0a:	9202      	str	r2, [sp, #8]
 8015f0c:	43ed      	mvns	r5, r5
 8015f0e:	b2ed      	uxtb	r5, r5
 8015f10:	9a00      	ldr	r2, [sp, #0]
 8015f12:	2a00      	cmp	r2, #0
 8015f14:	dc03      	bgt.n	8015f1e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8015f16:	9a03      	ldr	r2, [sp, #12]
 8015f18:	2a00      	cmp	r2, #0
 8015f1a:	f340 8117 	ble.w	801614c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8015f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f20:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8015f24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015f26:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	dd0f      	ble.n	8015f4e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8015f2e:	1408      	asrs	r0, r1, #16
 8015f30:	d406      	bmi.n	8015f40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8015f32:	4540      	cmp	r0, r8
 8015f34:	da04      	bge.n	8015f40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8015f36:	1410      	asrs	r0, r2, #16
 8015f38:	d402      	bmi.n	8015f40 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8015f3a:	9e01      	ldr	r6, [sp, #4]
 8015f3c:	42b0      	cmp	r0, r6
 8015f3e:	db07      	blt.n	8015f50 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8015f40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015f42:	4401      	add	r1, r0
 8015f44:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015f46:	3b01      	subs	r3, #1
 8015f48:	4402      	add	r2, r0
 8015f4a:	3402      	adds	r4, #2
 8015f4c:	e7ed      	b.n	8015f2a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 8015f4e:	d069      	beq.n	8016024 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 8015f50:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015f52:	1e58      	subs	r0, r3, #1
 8015f54:	fb06 1600 	mla	r6, r6, r0, r1
 8015f58:	1436      	asrs	r6, r6, #16
 8015f5a:	d459      	bmi.n	8016010 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8015f5c:	4546      	cmp	r6, r8
 8015f5e:	da57      	bge.n	8016010 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8015f60:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015f62:	fb06 2000 	mla	r0, r6, r0, r2
 8015f66:	1400      	asrs	r0, r0, #16
 8015f68:	d452      	bmi.n	8016010 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8015f6a:	9e01      	ldr	r6, [sp, #4]
 8015f6c:	42b0      	cmp	r0, r6
 8015f6e:	da4f      	bge.n	8016010 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8015f70:	469a      	mov	sl, r3
 8015f72:	46a3      	mov	fp, r4
 8015f74:	f1ba 0f00 	cmp.w	sl, #0
 8015f78:	dd50      	ble.n	801601c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8015f7a:	140e      	asrs	r6, r1, #16
 8015f7c:	1410      	asrs	r0, r2, #16
 8015f7e:	fb08 6000 	mla	r0, r8, r0, r6
 8015f82:	9e02      	ldr	r6, [sp, #8]
 8015f84:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8015f88:	f8bb 6000 	ldrh.w	r6, [fp]
 8015f8c:	1237      	asrs	r7, r6, #8
 8015f8e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8015f92:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015f96:	fb17 f705 	smulbb	r7, r7, r5
 8015f9a:	ea4f 09e6 	mov.w	r9, r6, asr #3
 8015f9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015fa2:	00f6      	lsls	r6, r6, #3
 8015fa4:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8015fa8:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015fac:	10c7      	asrs	r7, r0, #3
 8015fae:	b2f6      	uxtb	r6, r6
 8015fb0:	00c0      	lsls	r0, r0, #3
 8015fb2:	fb19 f905 	smulbb	r9, r9, r5
 8015fb6:	fb16 f605 	smulbb	r6, r6, r5
 8015fba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8015fbe:	b2c0      	uxtb	r0, r0
 8015fc0:	fa1f fc8c 	uxth.w	ip, ip
 8015fc4:	fb07 970e 	mla	r7, r7, lr, r9
 8015fc8:	fb00 600e 	mla	r0, r0, lr, r6
 8015fcc:	b280      	uxth	r0, r0
 8015fce:	b2bf      	uxth	r7, r7
 8015fd0:	f10c 0601 	add.w	r6, ip, #1
 8015fd4:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8015fd8:	f107 0901 	add.w	r9, r7, #1
 8015fdc:	1c46      	adds	r6, r0, #1
 8015fde:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8015fe2:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8015fe6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015fe8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8015fec:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8015ff0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8015ff4:	ea4c 0c06 	orr.w	ip, ip, r6
 8015ff8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8015ffc:	4401      	add	r1, r0
 8015ffe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016000:	ea4c 0c09 	orr.w	ip, ip, r9
 8016004:	f82b cb02 	strh.w	ip, [fp], #2
 8016008:	4402      	add	r2, r0
 801600a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801600e:	e7b1      	b.n	8015f74 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8016010:	f04f 0900 	mov.w	r9, #0
 8016014:	eb03 0009 	add.w	r0, r3, r9
 8016018:	2800      	cmp	r0, #0
 801601a:	dc41      	bgt.n	80160a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 801601c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016020:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016024:	9b00      	ldr	r3, [sp, #0]
 8016026:	2b00      	cmp	r3, #0
 8016028:	f340 8090 	ble.w	801614c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801602c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016034:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801603a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801603e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016042:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016046:	eef0 6a62 	vmov.f32	s13, s5
 801604a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801604e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016052:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016056:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801605a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801605e:	eef0 6a43 	vmov.f32	s13, s6
 8016062:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016066:	ee12 2a90 	vmov	r2, s5
 801606a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801606e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016072:	ee13 2a10 	vmov	r2, s6
 8016076:	9311      	str	r3, [sp, #68]	; 0x44
 8016078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801607a:	fb92 f3f3 	sdiv	r3, r2, r3
 801607e:	9312      	str	r3, [sp, #72]	; 0x48
 8016080:	9b00      	ldr	r3, [sp, #0]
 8016082:	9a03      	ldr	r2, [sp, #12]
 8016084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016088:	3b01      	subs	r3, #1
 801608a:	9300      	str	r3, [sp, #0]
 801608c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8016090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016092:	eeb0 3a67 	vmov.f32	s6, s15
 8016096:	bf08      	it	eq
 8016098:	4613      	moveq	r3, r2
 801609a:	eef0 2a47 	vmov.f32	s5, s14
 801609e:	e737      	b.n	8015f10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 80160a0:	140e      	asrs	r6, r1, #16
 80160a2:	d44c      	bmi.n	801613e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80160a4:	4546      	cmp	r6, r8
 80160a6:	da4a      	bge.n	801613e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80160a8:	1410      	asrs	r0, r2, #16
 80160aa:	d448      	bmi.n	801613e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80160ac:	9f01      	ldr	r7, [sp, #4]
 80160ae:	42b8      	cmp	r0, r7
 80160b0:	da45      	bge.n	801613e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 80160b2:	fb08 6000 	mla	r0, r8, r0, r6
 80160b6:	9e02      	ldr	r6, [sp, #8]
 80160b8:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 80160bc:	f06f 0601 	mvn.w	r6, #1
 80160c0:	fb06 fb09 	mul.w	fp, r6, r9
 80160c4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80160c8:	f834 600b 	ldrh.w	r6, [r4, fp]
 80160cc:	1237      	asrs	r7, r6, #8
 80160ce:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80160d2:	fb17 f705 	smulbb	r7, r7, r5
 80160d6:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 80160da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80160de:	00f6      	lsls	r6, r6, #3
 80160e0:	fb0c 7c0e 	mla	ip, ip, lr, r7
 80160e4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80160e8:	10c7      	asrs	r7, r0, #3
 80160ea:	b2f6      	uxtb	r6, r6
 80160ec:	00c0      	lsls	r0, r0, #3
 80160ee:	fb1a fa05 	smulbb	sl, sl, r5
 80160f2:	fb16 f605 	smulbb	r6, r6, r5
 80160f6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80160fa:	b2c0      	uxtb	r0, r0
 80160fc:	fa1f fc8c 	uxth.w	ip, ip
 8016100:	fb07 a70e 	mla	r7, r7, lr, sl
 8016104:	fb00 600e 	mla	r0, r0, lr, r6
 8016108:	b2bf      	uxth	r7, r7
 801610a:	b280      	uxth	r0, r0
 801610c:	f10c 0601 	add.w	r6, ip, #1
 8016110:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8016114:	f107 0a01 	add.w	sl, r7, #1
 8016118:	1c46      	adds	r6, r0, #1
 801611a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801611e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8016122:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016126:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801612a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801612e:	ea4c 0c06 	orr.w	ip, ip, r6
 8016132:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016136:	ea4c 0c0a 	orr.w	ip, ip, sl
 801613a:	f824 c00b 	strh.w	ip, [r4, fp]
 801613e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016140:	4401      	add	r1, r0
 8016142:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016144:	f109 39ff 	add.w	r9, r9, #4294967295
 8016148:	4402      	add	r2, r0
 801614a:	e763      	b.n	8016014 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 801614c:	b005      	add	sp, #20
 801614e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016152 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016152:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016156:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016158:	9201      	str	r2, [sp, #4]
 801615a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801615e:	6844      	ldr	r4, [r0, #4]
 8016160:	6800      	ldr	r0, [r0, #0]
 8016162:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8016166:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 801616a:	fb04 2505 	mla	r5, r4, r5, r2
 801616e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016172:	9816      	ldr	r0, [sp, #88]	; 0x58
 8016174:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8016178:	6802      	ldr	r2, [r0, #0]
 801617a:	9200      	str	r2, [sp, #0]
 801617c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016180:	2900      	cmp	r1, #0
 8016182:	dc03      	bgt.n	801618c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8016184:	9a01      	ldr	r2, [sp, #4]
 8016186:	2a00      	cmp	r2, #0
 8016188:	f340 8095 	ble.w	80162b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 801618c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801618e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016194:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016198:	2b00      	cmp	r3, #0
 801619a:	dd0e      	ble.n	80161ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801619c:	ea5f 4824 	movs.w	r8, r4, asr #16
 80161a0:	d406      	bmi.n	80161b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80161a2:	45e0      	cmp	r8, ip
 80161a4:	da04      	bge.n	80161b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80161a6:	ea5f 4820 	movs.w	r8, r0, asr #16
 80161aa:	d401      	bmi.n	80161b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 80161ac:	45f0      	cmp	r8, lr
 80161ae:	db05      	blt.n	80161bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80161b0:	443c      	add	r4, r7
 80161b2:	4430      	add	r0, r6
 80161b4:	3b01      	subs	r3, #1
 80161b6:	3502      	adds	r5, #2
 80161b8:	e7ee      	b.n	8016198 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80161ba:	d010      	beq.n	80161de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 80161bc:	f103 38ff 	add.w	r8, r3, #4294967295
 80161c0:	fb07 4908 	mla	r9, r7, r8, r4
 80161c4:	ea5f 4929 	movs.w	r9, r9, asr #16
 80161c8:	d53d      	bpl.n	8016246 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 80161ca:	4698      	mov	r8, r3
 80161cc:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 80161d0:	f1b8 0f00 	cmp.w	r8, #0
 80161d4:	dc55      	bgt.n	8016282 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 80161d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161da:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80161de:	2900      	cmp	r1, #0
 80161e0:	dd69      	ble.n	80162b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 80161e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80161e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80161ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80161ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161f0:	3901      	subs	r1, #1
 80161f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80161f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80161fa:	eeb0 6a62 	vmov.f32	s12, s5
 80161fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016202:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016206:	ee77 2a62 	vsub.f32	s5, s14, s5
 801620a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801620e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016212:	eeb0 6a43 	vmov.f32	s12, s6
 8016216:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801621a:	ee12 2a90 	vmov	r2, s5
 801621e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016222:	fb92 f7f3 	sdiv	r7, r2, r3
 8016226:	ee13 2a10 	vmov	r2, s6
 801622a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801622e:	fb92 f6f3 	sdiv	r6, r2, r3
 8016232:	9a01      	ldr	r2, [sp, #4]
 8016234:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016238:	bf08      	it	eq
 801623a:	4613      	moveq	r3, r2
 801623c:	eeb0 3a67 	vmov.f32	s6, s15
 8016240:	eef0 2a47 	vmov.f32	s5, s14
 8016244:	e79c      	b.n	8016180 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 8016246:	45e1      	cmp	r9, ip
 8016248:	dabf      	bge.n	80161ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801624a:	fb06 0808 	mla	r8, r6, r8, r0
 801624e:	ea5f 4828 	movs.w	r8, r8, asr #16
 8016252:	d4ba      	bmi.n	80161ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8016254:	45f0      	cmp	r8, lr
 8016256:	dab8      	bge.n	80161ca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8016258:	4698      	mov	r8, r3
 801625a:	46aa      	mov	sl, r5
 801625c:	f1b8 0f00 	cmp.w	r8, #0
 8016260:	ddb9      	ble.n	80161d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8016262:	ea4f 4920 	mov.w	r9, r0, asr #16
 8016266:	ea4f 4b24 	mov.w	fp, r4, asr #16
 801626a:	fb0c b909 	mla	r9, ip, r9, fp
 801626e:	9a00      	ldr	r2, [sp, #0]
 8016270:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8016274:	f82a 9b02 	strh.w	r9, [sl], #2
 8016278:	443c      	add	r4, r7
 801627a:	4430      	add	r0, r6
 801627c:	f108 38ff 	add.w	r8, r8, #4294967295
 8016280:	e7ec      	b.n	801625c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8016282:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8016286:	d411      	bmi.n	80162ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8016288:	45e2      	cmp	sl, ip
 801628a:	da0f      	bge.n	80162ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801628c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016290:	d40c      	bmi.n	80162ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8016292:	45f1      	cmp	r9, lr
 8016294:	da0a      	bge.n	80162ac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8016296:	fb0c a909 	mla	r9, ip, r9, sl
 801629a:	9a00      	ldr	r2, [sp, #0]
 801629c:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 80162a0:	f06f 0201 	mvn.w	r2, #1
 80162a4:	fb02 f908 	mul.w	r9, r2, r8
 80162a8:	f82b a009 	strh.w	sl, [fp, r9]
 80162ac:	443c      	add	r4, r7
 80162ae:	4430      	add	r0, r6
 80162b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80162b4:	e78c      	b.n	80161d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 80162b6:	b003      	add	sp, #12
 80162b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80162bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c0:	b087      	sub	sp, #28
 80162c2:	468b      	mov	fp, r1
 80162c4:	9204      	str	r2, [sp, #16]
 80162c6:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80162ca:	9815      	ldr	r0, [sp, #84]	; 0x54
 80162cc:	9201      	str	r2, [sp, #4]
 80162ce:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80162d2:	9205      	str	r2, [sp, #20]
 80162d4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80162d8:	6841      	ldr	r1, [r0, #4]
 80162da:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 80162de:	fb01 2404 	mla	r4, r1, r4, r2
 80162e2:	6802      	ldr	r2, [r0, #0]
 80162e4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80162e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80162ea:	6812      	ldr	r2, [r2, #0]
 80162ec:	9203      	str	r2, [sp, #12]
 80162ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80162f2:	f1bb 0f00 	cmp.w	fp, #0
 80162f6:	dc03      	bgt.n	8016300 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80162f8:	9a04      	ldr	r2, [sp, #16]
 80162fa:	2a00      	cmp	r2, #0
 80162fc:	f340 812c 	ble.w	8016558 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8016300:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016302:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016306:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016308:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801630c:	2b00      	cmp	r3, #0
 801630e:	dd0f      	ble.n	8016330 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8016310:	1402      	asrs	r2, r0, #16
 8016312:	d406      	bmi.n	8016322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8016314:	4542      	cmp	r2, r8
 8016316:	da04      	bge.n	8016322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8016318:	140a      	asrs	r2, r1, #16
 801631a:	d402      	bmi.n	8016322 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801631c:	9d01      	ldr	r5, [sp, #4]
 801631e:	42aa      	cmp	r2, r5
 8016320:	db07      	blt.n	8016332 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8016322:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016324:	4410      	add	r0, r2
 8016326:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016328:	3b01      	subs	r3, #1
 801632a:	4411      	add	r1, r2
 801632c:	3402      	adds	r4, #2
 801632e:	e7ed      	b.n	801630c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8016330:	d01a      	beq.n	8016368 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8016332:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016334:	1e5a      	subs	r2, r3, #1
 8016336:	fb05 0502 	mla	r5, r5, r2, r0
 801633a:	142d      	asrs	r5, r5, #16
 801633c:	d40a      	bmi.n	8016354 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801633e:	4545      	cmp	r5, r8
 8016340:	da08      	bge.n	8016354 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8016342:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016344:	fb05 1202 	mla	r2, r5, r2, r1
 8016348:	1412      	asrs	r2, r2, #16
 801634a:	d403      	bmi.n	8016354 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 801634c:	9d01      	ldr	r5, [sp, #4]
 801634e:	42aa      	cmp	r2, r5
 8016350:	f2c0 80a6 	blt.w	80164a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8016354:	f04f 0c00 	mov.w	ip, #0
 8016358:	eb03 020c 	add.w	r2, r3, ip
 801635c:	2a00      	cmp	r2, #0
 801635e:	dc3e      	bgt.n	80163de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8016360:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016364:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016368:	f1bb 0f00 	cmp.w	fp, #0
 801636c:	f340 80f4 	ble.w	8016558 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8016370:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016374:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016378:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801637c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801637e:	f1bb 0b01 	subs.w	fp, fp, #1
 8016382:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016386:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801638a:	eeb0 6a62 	vmov.f32	s12, s5
 801638e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016392:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016396:	ee77 2a62 	vsub.f32	s5, s14, s5
 801639a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801639e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80163a2:	eeb0 6a43 	vmov.f32	s12, s6
 80163a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80163aa:	ee12 2a90 	vmov	r2, s5
 80163ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80163b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80163b6:	ee13 2a10 	vmov	r2, s6
 80163ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80163be:	9313      	str	r3, [sp, #76]	; 0x4c
 80163c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80163c6:	9a04      	ldr	r2, [sp, #16]
 80163c8:	9314      	str	r3, [sp, #80]	; 0x50
 80163ca:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80163ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163d0:	eeb0 3a67 	vmov.f32	s6, s15
 80163d4:	bf08      	it	eq
 80163d6:	4613      	moveq	r3, r2
 80163d8:	eef0 2a47 	vmov.f32	s5, s14
 80163dc:	e789      	b.n	80162f2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 80163de:	1405      	asrs	r5, r0, #16
 80163e0:	d457      	bmi.n	8016492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80163e2:	4545      	cmp	r5, r8
 80163e4:	da55      	bge.n	8016492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80163e6:	140a      	asrs	r2, r1, #16
 80163e8:	d453      	bmi.n	8016492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80163ea:	9e01      	ldr	r6, [sp, #4]
 80163ec:	42b2      	cmp	r2, r6
 80163ee:	da50      	bge.n	8016492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80163f0:	fb08 5202 	mla	r2, r8, r2, r5
 80163f4:	9d03      	ldr	r5, [sp, #12]
 80163f6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80163fa:	0e2e      	lsrs	r6, r5, #24
 80163fc:	d049      	beq.n	8016492 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80163fe:	f06f 0201 	mvn.w	r2, #1
 8016402:	fb02 f20c 	mul.w	r2, r2, ip
 8016406:	9202      	str	r2, [sp, #8]
 8016408:	f834 e002 	ldrh.w	lr, [r4, r2]
 801640c:	9a05      	ldr	r2, [sp, #20]
 801640e:	4356      	muls	r6, r2
 8016410:	1c72      	adds	r2, r6, #1
 8016412:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8016416:	1212      	asrs	r2, r2, #8
 8016418:	fa1f f982 	uxth.w	r9, r2
 801641c:	ea4f 272e 	mov.w	r7, lr, asr #8
 8016420:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016424:	43d2      	mvns	r2, r2
 8016426:	b2d2      	uxtb	r2, r2
 8016428:	fb16 f609 	smulbb	r6, r6, r9
 801642c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016430:	fb07 6702 	mla	r7, r7, r2, r6
 8016434:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016438:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801643c:	b2ed      	uxtb	r5, r5
 801643e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016442:	fa5f fe8e 	uxtb.w	lr, lr
 8016446:	fb15 f509 	smulbb	r5, r5, r9
 801644a:	fb0e 5502 	mla	r5, lr, r2, r5
 801644e:	b2bf      	uxth	r7, r7
 8016450:	fb1a fa09 	smulbb	sl, sl, r9
 8016454:	b2ad      	uxth	r5, r5
 8016456:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801645a:	fb06 a602 	mla	r6, r6, r2, sl
 801645e:	1c7a      	adds	r2, r7, #1
 8016460:	f105 0a01 	add.w	sl, r5, #1
 8016464:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016468:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801646c:	b2b6      	uxth	r6, r6
 801646e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016472:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016476:	ea47 070a 	orr.w	r7, r7, sl
 801647a:	f106 0a01 	add.w	sl, r6, #1
 801647e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016482:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016486:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801648a:	9a02      	ldr	r2, [sp, #8]
 801648c:	ea47 070a 	orr.w	r7, r7, sl
 8016490:	52a7      	strh	r7, [r4, r2]
 8016492:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016494:	4410      	add	r0, r2
 8016496:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016498:	f10c 3cff 	add.w	ip, ip, #4294967295
 801649c:	4411      	add	r1, r2
 801649e:	e75b      	b.n	8016358 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80164a0:	f04f 0e00 	mov.w	lr, #0
 80164a4:	eba3 020e 	sub.w	r2, r3, lr
 80164a8:	2a00      	cmp	r2, #0
 80164aa:	f77f af59 	ble.w	8016360 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 80164ae:	1405      	asrs	r5, r0, #16
 80164b0:	140a      	asrs	r2, r1, #16
 80164b2:	fb08 5202 	mla	r2, r8, r2, r5
 80164b6:	9d03      	ldr	r5, [sp, #12]
 80164b8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80164bc:	0e2e      	lsrs	r6, r5, #24
 80164be:	d044      	beq.n	801654a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 80164c0:	9a05      	ldr	r2, [sp, #20]
 80164c2:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80164c6:	4356      	muls	r6, r2
 80164c8:	1c72      	adds	r2, r6, #1
 80164ca:	eb02 2226 	add.w	r2, r2, r6, asr #8
 80164ce:	1212      	asrs	r2, r2, #8
 80164d0:	fa1f f982 	uxth.w	r9, r2
 80164d4:	ea4f 272c 	mov.w	r7, ip, asr #8
 80164d8:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80164dc:	43d2      	mvns	r2, r2
 80164de:	b2d2      	uxtb	r2, r2
 80164e0:	fb16 f609 	smulbb	r6, r6, r9
 80164e4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80164e8:	fb07 6702 	mla	r7, r7, r2, r6
 80164ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80164f0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80164f4:	b2ed      	uxtb	r5, r5
 80164f6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80164fa:	fa5f fc8c 	uxtb.w	ip, ip
 80164fe:	fb15 f509 	smulbb	r5, r5, r9
 8016502:	fb0c 5502 	mla	r5, ip, r2, r5
 8016506:	b2bf      	uxth	r7, r7
 8016508:	fb1a fa09 	smulbb	sl, sl, r9
 801650c:	b2ad      	uxth	r5, r5
 801650e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016512:	fb06 a602 	mla	r6, r6, r2, sl
 8016516:	1c7a      	adds	r2, r7, #1
 8016518:	f105 0a01 	add.w	sl, r5, #1
 801651c:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016520:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016524:	b2b6      	uxth	r6, r6
 8016526:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801652a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801652e:	ea47 070a 	orr.w	r7, r7, sl
 8016532:	f106 0a01 	add.w	sl, r6, #1
 8016536:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801653a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801653e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016542:	ea47 070a 	orr.w	r7, r7, sl
 8016546:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801654a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801654c:	4410      	add	r0, r2
 801654e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016550:	f10e 0e01 	add.w	lr, lr, #1
 8016554:	4411      	add	r1, r2
 8016556:	e7a5      	b.n	80164a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8016558:	b007      	add	sp, #28
 801655a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016560 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016564:	b087      	sub	sp, #28
 8016566:	468b      	mov	fp, r1
 8016568:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801656a:	9205      	str	r2, [sp, #20]
 801656c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8016570:	9201      	str	r2, [sp, #4]
 8016572:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8016576:	6861      	ldr	r1, [r4, #4]
 8016578:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 801657c:	fb01 2000 	mla	r0, r1, r0, r2
 8016580:	6822      	ldr	r2, [r4, #0]
 8016582:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8016586:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016588:	6812      	ldr	r2, [r2, #0]
 801658a:	9203      	str	r2, [sp, #12]
 801658c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016590:	f1bb 0f00 	cmp.w	fp, #0
 8016594:	dc03      	bgt.n	801659e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8016596:	9a05      	ldr	r2, [sp, #20]
 8016598:	2a00      	cmp	r2, #0
 801659a:	f340 814b 	ble.w	8016834 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801659e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80165a0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80165a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165a6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	dd0f      	ble.n	80165ce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80165ae:	140c      	asrs	r4, r1, #16
 80165b0:	d406      	bmi.n	80165c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80165b2:	454c      	cmp	r4, r9
 80165b4:	da04      	bge.n	80165c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80165b6:	1414      	asrs	r4, r2, #16
 80165b8:	d402      	bmi.n	80165c0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80165ba:	9d01      	ldr	r5, [sp, #4]
 80165bc:	42ac      	cmp	r4, r5
 80165be:	db07      	blt.n	80165d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80165c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80165c2:	4421      	add	r1, r4
 80165c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80165c6:	3b01      	subs	r3, #1
 80165c8:	4422      	add	r2, r4
 80165ca:	3002      	adds	r0, #2
 80165cc:	e7ed      	b.n	80165aa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 80165ce:	d018      	beq.n	8016602 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 80165d0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80165d2:	1e5c      	subs	r4, r3, #1
 80165d4:	fb05 1504 	mla	r5, r5, r4, r1
 80165d8:	142d      	asrs	r5, r5, #16
 80165da:	d40a      	bmi.n	80165f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80165dc:	454d      	cmp	r5, r9
 80165de:	da08      	bge.n	80165f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80165e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80165e2:	fb05 2404 	mla	r4, r5, r4, r2
 80165e6:	1424      	asrs	r4, r4, #16
 80165e8:	d403      	bmi.n	80165f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 80165ea:	9d01      	ldr	r5, [sp, #4]
 80165ec:	42ac      	cmp	r4, r5
 80165ee:	f2c0 80bb 	blt.w	8016768 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 80165f2:	2700      	movs	r7, #0
 80165f4:	19dc      	adds	r4, r3, r7
 80165f6:	2c00      	cmp	r4, #0
 80165f8:	dc3e      	bgt.n	8016678 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 80165fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80165fe:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8016602:	f1bb 0f00 	cmp.w	fp, #0
 8016606:	f340 8115 	ble.w	8016834 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 801660a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801660e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016612:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016616:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016618:	f1bb 0b01 	subs.w	fp, fp, #1
 801661c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016620:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016624:	eeb0 6a62 	vmov.f32	s12, s5
 8016628:	ee61 7a27 	vmul.f32	s15, s2, s15
 801662c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016630:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016634:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016638:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801663c:	eeb0 6a43 	vmov.f32	s12, s6
 8016640:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016644:	ee12 2a90 	vmov	r2, s5
 8016648:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801664c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016650:	ee13 2a10 	vmov	r2, s6
 8016654:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016658:	9313      	str	r3, [sp, #76]	; 0x4c
 801665a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801665c:	fb92 f3f3 	sdiv	r3, r2, r3
 8016660:	9a05      	ldr	r2, [sp, #20]
 8016662:	9314      	str	r3, [sp, #80]	; 0x50
 8016664:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016668:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801666a:	eeb0 3a67 	vmov.f32	s6, s15
 801666e:	bf08      	it	eq
 8016670:	4613      	moveq	r3, r2
 8016672:	eef0 2a47 	vmov.f32	s5, s14
 8016676:	e78b      	b.n	8016590 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8016678:	140d      	asrs	r5, r1, #16
 801667a:	d45c      	bmi.n	8016736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801667c:	454d      	cmp	r5, r9
 801667e:	da5a      	bge.n	8016736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8016680:	1414      	asrs	r4, r2, #16
 8016682:	d458      	bmi.n	8016736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8016684:	9e01      	ldr	r6, [sp, #4]
 8016686:	42b4      	cmp	r4, r6
 8016688:	da55      	bge.n	8016736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801668a:	fb09 5404 	mla	r4, r9, r4, r5
 801668e:	9d03      	ldr	r5, [sp, #12]
 8016690:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8016694:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8016698:	d04d      	beq.n	8016736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801669a:	0a26      	lsrs	r6, r4, #8
 801669c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80166a0:	fa5f f58e 	uxtb.w	r5, lr
 80166a4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80166a8:	9604      	str	r6, [sp, #16]
 80166aa:	d04a      	beq.n	8016742 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 80166ac:	f06f 0601 	mvn.w	r6, #1
 80166b0:	437e      	muls	r6, r7
 80166b2:	fa1f fa85 	uxth.w	sl, r5
 80166b6:	f830 8006 	ldrh.w	r8, [r0, r6]
 80166ba:	9602      	str	r6, [sp, #8]
 80166bc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80166c0:	43ed      	mvns	r5, r5
 80166c2:	fa5f fc8c 	uxtb.w	ip, ip
 80166c6:	b2ed      	uxtb	r5, r5
 80166c8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80166cc:	fb1c fc0a 	smulbb	ip, ip, sl
 80166d0:	fb0e cc05 	mla	ip, lr, r5, ip
 80166d4:	b2e4      	uxtb	r4, r4
 80166d6:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 80166da:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80166de:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80166e2:	fa5f f888 	uxtb.w	r8, r8
 80166e6:	fb14 f40a 	smulbb	r4, r4, sl
 80166ea:	fb08 4405 	mla	r4, r8, r5, r4
 80166ee:	b2a4      	uxth	r4, r4
 80166f0:	fa1f fc8c 	uxth.w	ip, ip
 80166f4:	fb16 f60a 	smulbb	r6, r6, sl
 80166f8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80166fc:	fb0e 6e05 	mla	lr, lr, r5, r6
 8016700:	1c66      	adds	r6, r4, #1
 8016702:	f10c 0501 	add.w	r5, ip, #1
 8016706:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801670a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801670e:	fa1f fe8e 	uxth.w	lr, lr
 8016712:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8016716:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801671a:	ea4c 0c06 	orr.w	ip, ip, r6
 801671e:	f10e 0601 	add.w	r6, lr, #1
 8016722:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8016726:	0976      	lsrs	r6, r6, #5
 8016728:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801672c:	9c02      	ldr	r4, [sp, #8]
 801672e:	ea4c 0c06 	orr.w	ip, ip, r6
 8016732:	f820 c004 	strh.w	ip, [r0, r4]
 8016736:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016738:	4421      	add	r1, r4
 801673a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801673c:	3f01      	subs	r7, #1
 801673e:	4422      	add	r2, r4
 8016740:	e758      	b.n	80165f4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8016742:	4e3e      	ldr	r6, [pc, #248]	; (801683c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8016744:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8016748:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 801674c:	ea4c 0c04 	orr.w	ip, ip, r4
 8016750:	9c04      	ldr	r4, [sp, #16]
 8016752:	f06f 0501 	mvn.w	r5, #1
 8016756:	00e6      	lsls	r6, r4, #3
 8016758:	437d      	muls	r5, r7
 801675a:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801675e:	ea4c 0c04 	orr.w	ip, ip, r4
 8016762:	f820 c005 	strh.w	ip, [r0, r5]
 8016766:	e7e6      	b.n	8016736 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8016768:	f04f 0800 	mov.w	r8, #0
 801676c:	eba3 0408 	sub.w	r4, r3, r8
 8016770:	2c00      	cmp	r4, #0
 8016772:	f77f af42 	ble.w	80165fa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8016776:	140d      	asrs	r5, r1, #16
 8016778:	1414      	asrs	r4, r2, #16
 801677a:	fb09 5404 	mla	r4, r9, r4, r5
 801677e:	9d03      	ldr	r5, [sp, #12]
 8016780:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8016784:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8016788:	d042      	beq.n	8016810 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801678a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801678e:	fa5f f58c 	uxtb.w	r5, ip
 8016792:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8016796:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801679a:	d040      	beq.n	801681e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801679c:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 80167a0:	fa1f fa85 	uxth.w	sl, r5
 80167a4:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80167a8:	43ed      	mvns	r5, r5
 80167aa:	b2ff      	uxtb	r7, r7
 80167ac:	b2ed      	uxtb	r5, r5
 80167ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80167b2:	fb17 f70a 	smulbb	r7, r7, sl
 80167b6:	fb0c 7705 	mla	r7, ip, r5, r7
 80167ba:	b2e4      	uxtb	r4, r4
 80167bc:	ea4f 0cee 	mov.w	ip, lr, asr #3
 80167c0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80167c4:	fa5f fe8e 	uxtb.w	lr, lr
 80167c8:	fb14 f40a 	smulbb	r4, r4, sl
 80167cc:	fb0e 4405 	mla	r4, lr, r5, r4
 80167d0:	b2f6      	uxtb	r6, r6
 80167d2:	b2bf      	uxth	r7, r7
 80167d4:	fb16 f60a 	smulbb	r6, r6, sl
 80167d8:	b2a4      	uxth	r4, r4
 80167da:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80167de:	fb0c 6c05 	mla	ip, ip, r5, r6
 80167e2:	1c7d      	adds	r5, r7, #1
 80167e4:	1c66      	adds	r6, r4, #1
 80167e6:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80167ea:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80167ee:	fa1f fc8c 	uxth.w	ip, ip
 80167f2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80167f6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80167fa:	4337      	orrs	r7, r6
 80167fc:	f10c 0601 	add.w	r6, ip, #1
 8016800:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8016804:	0976      	lsrs	r6, r6, #5
 8016806:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801680a:	4337      	orrs	r7, r6
 801680c:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 8016810:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016812:	4421      	add	r1, r4
 8016814:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8016816:	f108 0801 	add.w	r8, r8, #1
 801681a:	4422      	add	r2, r4
 801681c:	e7a6      	b.n	801676c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 801681e:	4d07      	ldr	r5, [pc, #28]	; (801683c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8016820:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8016824:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 8016828:	00f6      	lsls	r6, r6, #3
 801682a:	4327      	orrs	r7, r4
 801682c:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 8016830:	4327      	orrs	r7, r4
 8016832:	e7eb      	b.n	801680c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 8016834:	b007      	add	sp, #28
 8016836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801683a:	bf00      	nop
 801683c:	fffff800 	.word	0xfffff800

08016840 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016844:	b089      	sub	sp, #36	; 0x24
 8016846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801684a:	9206      	str	r2, [sp, #24]
 801684c:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8016850:	9202      	str	r2, [sp, #8]
 8016852:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8016856:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8016858:	9203      	str	r2, [sp, #12]
 801685a:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801685e:	9207      	str	r2, [sp, #28]
 8016860:	e9dd 2518 	ldrd	r2, r5, [sp, #96]	; 0x60
 8016864:	6860      	ldr	r0, [r4, #4]
 8016866:	9101      	str	r1, [sp, #4]
 8016868:	fb00 2505 	mla	r5, r0, r5, r2
 801686c:	6822      	ldr	r2, [r4, #0]
 801686e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8016872:	9a02      	ldr	r2, [sp, #8]
 8016874:	3201      	adds	r2, #1
 8016876:	f022 0201 	bic.w	r2, r2, #1
 801687a:	9204      	str	r2, [sp, #16]
 801687c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801687e:	6812      	ldr	r2, [r2, #0]
 8016880:	9205      	str	r2, [sp, #20]
 8016882:	9a01      	ldr	r2, [sp, #4]
 8016884:	2a00      	cmp	r2, #0
 8016886:	dc03      	bgt.n	8016890 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8016888:	9a06      	ldr	r2, [sp, #24]
 801688a:	2a00      	cmp	r2, #0
 801688c:	f340 8153 	ble.w	8016b36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8016890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016892:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016896:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016898:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801689c:	2b00      	cmp	r3, #0
 801689e:	dd10      	ble.n	80168c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80168a0:	1422      	asrs	r2, r4, #16
 80168a2:	d407      	bmi.n	80168b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80168a4:	9e02      	ldr	r6, [sp, #8]
 80168a6:	4296      	cmp	r6, r2
 80168a8:	dd04      	ble.n	80168b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80168aa:	1402      	asrs	r2, r0, #16
 80168ac:	d402      	bmi.n	80168b4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 80168ae:	9e03      	ldr	r6, [sp, #12]
 80168b0:	42b2      	cmp	r2, r6
 80168b2:	db07      	blt.n	80168c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 80168b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80168b6:	4414      	add	r4, r2
 80168b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80168ba:	3b01      	subs	r3, #1
 80168bc:	4410      	add	r0, r2
 80168be:	3502      	adds	r5, #2
 80168c0:	e7ec      	b.n	801689c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 80168c2:	d00f      	beq.n	80168e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 80168c4:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80168c6:	1e5a      	subs	r2, r3, #1
 80168c8:	fb06 4602 	mla	r6, r6, r2, r4
 80168cc:	1436      	asrs	r6, r6, #16
 80168ce:	d545      	bpl.n	801695c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 80168d0:	469a      	mov	sl, r3
 80168d2:	46a9      	mov	r9, r5
 80168d4:	f1ba 0f00 	cmp.w	sl, #0
 80168d8:	f300 80ba 	bgt.w	8016a50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 80168dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168e0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80168e4:	9b01      	ldr	r3, [sp, #4]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	f340 8125 	ble.w	8016b36 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 80168ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168f4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80168fa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80168fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016902:	eeb0 6a62 	vmov.f32	s12, s5
 8016906:	ee61 7a27 	vmul.f32	s15, s2, s15
 801690a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801690e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016912:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8016916:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801691a:	eeb0 6a43 	vmov.f32	s12, s6
 801691e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016922:	ee12 2a90 	vmov	r2, s5
 8016926:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801692a:	fb92 f3f3 	sdiv	r3, r2, r3
 801692e:	ee13 2a10 	vmov	r2, s6
 8016932:	9315      	str	r3, [sp, #84]	; 0x54
 8016934:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016936:	fb92 f3f3 	sdiv	r3, r2, r3
 801693a:	9316      	str	r3, [sp, #88]	; 0x58
 801693c:	9b01      	ldr	r3, [sp, #4]
 801693e:	9a06      	ldr	r2, [sp, #24]
 8016940:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016944:	3b01      	subs	r3, #1
 8016946:	9301      	str	r3, [sp, #4]
 8016948:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801694c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801694e:	eeb0 3a67 	vmov.f32	s6, s15
 8016952:	bf08      	it	eq
 8016954:	4613      	moveq	r3, r2
 8016956:	eef0 2a47 	vmov.f32	s5, s14
 801695a:	e792      	b.n	8016882 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 801695c:	9f02      	ldr	r7, [sp, #8]
 801695e:	42b7      	cmp	r7, r6
 8016960:	ddb6      	ble.n	80168d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8016962:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8016964:	fb06 0202 	mla	r2, r6, r2, r0
 8016968:	1412      	asrs	r2, r2, #16
 801696a:	d4b1      	bmi.n	80168d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801696c:	9e03      	ldr	r6, [sp, #12]
 801696e:	42b2      	cmp	r2, r6
 8016970:	daae      	bge.n	80168d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8016972:	f04f 0800 	mov.w	r8, #0
 8016976:	eba3 0208 	sub.w	r2, r3, r8
 801697a:	2a00      	cmp	r2, #0
 801697c:	ddae      	ble.n	80168dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801697e:	9904      	ldr	r1, [sp, #16]
 8016980:	1422      	asrs	r2, r4, #16
 8016982:	1406      	asrs	r6, r0, #16
 8016984:	fb01 2606 	mla	r6, r1, r6, r2
 8016988:	0872      	lsrs	r2, r6, #1
 801698a:	9905      	ldr	r1, [sp, #20]
 801698c:	5c8a      	ldrb	r2, [r1, r2]
 801698e:	07f1      	lsls	r1, r6, #31
 8016990:	bf54      	ite	pl
 8016992:	f002 020f 	andpl.w	r2, r2, #15
 8016996:	1112      	asrmi	r2, r2, #4
 8016998:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801699c:	b2d2      	uxtb	r2, r2
 801699e:	2a00      	cmp	r2, #0
 80169a0:	d04f      	beq.n	8016a42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 80169a2:	4966      	ldr	r1, [pc, #408]	; (8016b3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 80169a4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80169a8:	680e      	ldr	r6, [r1, #0]
 80169aa:	9907      	ldr	r1, [sp, #28]
 80169ac:	434a      	muls	r2, r1
 80169ae:	1c57      	adds	r7, r2, #1
 80169b0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80169b4:	1212      	asrs	r2, r2, #8
 80169b6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 80169ba:	fa1f fa82 	uxth.w	sl, r2
 80169be:	ea4f 272e 	mov.w	r7, lr, asr #8
 80169c2:	43d2      	mvns	r2, r2
 80169c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80169c8:	b2d2      	uxtb	r2, r2
 80169ca:	fb1c fc0a 	smulbb	ip, ip, sl
 80169ce:	f3c6 09cc 	ubfx	r9, r6, #3, #13
 80169d2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80169d6:	495a      	ldr	r1, [pc, #360]	; (8016b40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 80169d8:	fb07 c702 	mla	r7, r7, r2, ip
 80169dc:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80169e0:	ea4f 0cee 	mov.w	ip, lr, asr #3
 80169e4:	fb19 f90a 	smulbb	r9, r9, sl
 80169e8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80169ec:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 80169f0:	fb0c 9c02 	mla	ip, ip, r2, r9
 80169f4:	b2f6      	uxtb	r6, r6
 80169f6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80169fa:	fa1f fc8c 	uxth.w	ip, ip
 80169fe:	fa5f fe8e 	uxtb.w	lr, lr
 8016a02:	fb16 f60a 	smulbb	r6, r6, sl
 8016a06:	b2bf      	uxth	r7, r7
 8016a08:	fb0e 6602 	mla	r6, lr, r2, r6
 8016a0c:	f10c 0901 	add.w	r9, ip, #1
 8016a10:	b2b6      	uxth	r6, r6
 8016a12:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8016a16:	f107 0b01 	add.w	fp, r7, #1
 8016a1a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016a1e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016a22:	f106 0e01 	add.w	lr, r6, #1
 8016a26:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8016a2a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016a2e:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8016a32:	ea4c 0c07 	orr.w	ip, ip, r7
 8016a36:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8016a3a:	ea4c 0c0e 	orr.w	ip, ip, lr
 8016a3e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8016a42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016a44:	4414      	add	r4, r2
 8016a46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016a48:	f108 0801 	add.w	r8, r8, #1
 8016a4c:	4410      	add	r0, r2
 8016a4e:	e792      	b.n	8016976 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 8016a50:	1422      	asrs	r2, r4, #16
 8016a52:	d467      	bmi.n	8016b24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8016a54:	9e02      	ldr	r6, [sp, #8]
 8016a56:	4296      	cmp	r6, r2
 8016a58:	dd64      	ble.n	8016b24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8016a5a:	1406      	asrs	r6, r0, #16
 8016a5c:	d462      	bmi.n	8016b24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8016a5e:	9f03      	ldr	r7, [sp, #12]
 8016a60:	42be      	cmp	r6, r7
 8016a62:	da5f      	bge.n	8016b24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8016a64:	9f04      	ldr	r7, [sp, #16]
 8016a66:	fb06 2607 	mla	r6, r6, r7, r2
 8016a6a:	0872      	lsrs	r2, r6, #1
 8016a6c:	9f05      	ldr	r7, [sp, #20]
 8016a6e:	5cba      	ldrb	r2, [r7, r2]
 8016a70:	07f6      	lsls	r6, r6, #31
 8016a72:	bf54      	ite	pl
 8016a74:	f002 020f 	andpl.w	r2, r2, #15
 8016a78:	1112      	asrmi	r2, r2, #4
 8016a7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016a7e:	b2d2      	uxtb	r2, r2
 8016a80:	2a00      	cmp	r2, #0
 8016a82:	d04f      	beq.n	8016b24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8016a84:	9f07      	ldr	r7, [sp, #28]
 8016a86:	4e2d      	ldr	r6, [pc, #180]	; (8016b3c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8016a88:	f8b9 e000 	ldrh.w	lr, [r9]
 8016a8c:	6836      	ldr	r6, [r6, #0]
 8016a8e:	492c      	ldr	r1, [pc, #176]	; (8016b40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8016a90:	437a      	muls	r2, r7
 8016a92:	1c57      	adds	r7, r2, #1
 8016a94:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8016a98:	1212      	asrs	r2, r2, #8
 8016a9a:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8016a9e:	fa1f fb82 	uxth.w	fp, r2
 8016aa2:	ea4f 272e 	mov.w	r7, lr, asr #8
 8016aa6:	43d2      	mvns	r2, r2
 8016aa8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016aac:	b2d2      	uxtb	r2, r2
 8016aae:	fb1c fc0b 	smulbb	ip, ip, fp
 8016ab2:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8016ab6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016aba:	fb07 c702 	mla	r7, r7, r2, ip
 8016abe:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016ac2:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8016ac6:	fb18 f80b 	smulbb	r8, r8, fp
 8016aca:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8016ace:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8016ad2:	fb0c 8c02 	mla	ip, ip, r2, r8
 8016ad6:	b2f6      	uxtb	r6, r6
 8016ad8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016adc:	fa1f fc8c 	uxth.w	ip, ip
 8016ae0:	fa5f fe8e 	uxtb.w	lr, lr
 8016ae4:	fb16 f60b 	smulbb	r6, r6, fp
 8016ae8:	b2bf      	uxth	r7, r7
 8016aea:	fb0e 6602 	mla	r6, lr, r2, r6
 8016aee:	f10c 0801 	add.w	r8, ip, #1
 8016af2:	b2b6      	uxth	r6, r6
 8016af4:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 8016af8:	f107 0801 	add.w	r8, r7, #1
 8016afc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8016b00:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016b04:	f106 0e01 	add.w	lr, r6, #1
 8016b08:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8016b0c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016b10:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8016b14:	ea4c 0c07 	orr.w	ip, ip, r7
 8016b18:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8016b1c:	ea4c 0c0e 	orr.w	ip, ip, lr
 8016b20:	f8a9 c000 	strh.w	ip, [r9]
 8016b24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016b26:	4414      	add	r4, r2
 8016b28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016b2a:	f109 0902 	add.w	r9, r9, #2
 8016b2e:	4410      	add	r0, r2
 8016b30:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b34:	e6ce      	b.n	80168d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8016b36:	b009      	add	sp, #36	; 0x24
 8016b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b3c:	20009f04 	.word	0x20009f04
 8016b40:	0007fff8 	.word	0x0007fff8

08016b44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b48:	b087      	sub	sp, #28
 8016b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b4e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016b50:	9205      	str	r2, [sp, #20]
 8016b52:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8016b56:	9201      	str	r2, [sp, #4]
 8016b58:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016b5c:	6860      	ldr	r0, [r4, #4]
 8016b5e:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 8016b62:	9100      	str	r1, [sp, #0]
 8016b64:	fb00 2505 	mla	r5, r0, r5, r2
 8016b68:	6822      	ldr	r2, [r4, #0]
 8016b6a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8016b6e:	f10b 0201 	add.w	r2, fp, #1
 8016b72:	f022 0201 	bic.w	r2, r2, #1
 8016b76:	9203      	str	r2, [sp, #12]
 8016b78:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016b7a:	6812      	ldr	r2, [r2, #0]
 8016b7c:	9204      	str	r2, [sp, #16]
 8016b7e:	9a00      	ldr	r2, [sp, #0]
 8016b80:	2a00      	cmp	r2, #0
 8016b82:	dc03      	bgt.n	8016b8c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8016b84:	9a05      	ldr	r2, [sp, #20]
 8016b86:	2a00      	cmp	r2, #0
 8016b88:	f340 815c 	ble.w	8016e44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8016b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016b8e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b94:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	dd0f      	ble.n	8016bbc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8016b9c:	1422      	asrs	r2, r4, #16
 8016b9e:	d406      	bmi.n	8016bae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8016ba0:	4593      	cmp	fp, r2
 8016ba2:	dd04      	ble.n	8016bae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8016ba4:	1402      	asrs	r2, r0, #16
 8016ba6:	d402      	bmi.n	8016bae <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8016ba8:	9e01      	ldr	r6, [sp, #4]
 8016baa:	42b2      	cmp	r2, r6
 8016bac:	db07      	blt.n	8016bbe <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8016bae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016bb0:	4414      	add	r4, r2
 8016bb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016bb4:	3b01      	subs	r3, #1
 8016bb6:	4410      	add	r0, r2
 8016bb8:	3502      	adds	r5, #2
 8016bba:	e7ed      	b.n	8016b98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8016bbc:	d018      	beq.n	8016bf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8016bbe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016bc0:	1e5a      	subs	r2, r3, #1
 8016bc2:	fb06 4602 	mla	r6, r6, r2, r4
 8016bc6:	1436      	asrs	r6, r6, #16
 8016bc8:	d40a      	bmi.n	8016be0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8016bca:	45b3      	cmp	fp, r6
 8016bcc:	dd08      	ble.n	8016be0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8016bce:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016bd0:	fb06 0202 	mla	r2, r6, r2, r0
 8016bd4:	1412      	asrs	r2, r2, #16
 8016bd6:	d403      	bmi.n	8016be0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8016bd8:	9e01      	ldr	r6, [sp, #4]
 8016bda:	42b2      	cmp	r2, r6
 8016bdc:	f2c0 80bf 	blt.w	8016d5e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 8016be0:	2700      	movs	r7, #0
 8016be2:	19da      	adds	r2, r3, r7
 8016be4:	2a00      	cmp	r2, #0
 8016be6:	dc3f      	bgt.n	8016c68 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8016be8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016bec:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8016bf0:	9b00      	ldr	r3, [sp, #0]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f340 8126 	ble.w	8016e44 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8016bf8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016bfc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016c00:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c06:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016c0a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016c0e:	eeb0 6a62 	vmov.f32	s12, s5
 8016c12:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016c16:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c1a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016c1e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016c22:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016c26:	eeb0 6a43 	vmov.f32	s12, s6
 8016c2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016c2e:	ee12 2a90 	vmov	r2, s5
 8016c32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c3a:	ee13 2a10 	vmov	r2, s6
 8016c3e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c46:	9314      	str	r3, [sp, #80]	; 0x50
 8016c48:	9b00      	ldr	r3, [sp, #0]
 8016c4a:	9a05      	ldr	r2, [sp, #20]
 8016c4c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c50:	3b01      	subs	r3, #1
 8016c52:	9300      	str	r3, [sp, #0]
 8016c54:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c5a:	eeb0 3a67 	vmov.f32	s6, s15
 8016c5e:	bf08      	it	eq
 8016c60:	4613      	moveq	r3, r2
 8016c62:	eef0 2a47 	vmov.f32	s5, s14
 8016c66:	e78a      	b.n	8016b7e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8016c68:	1422      	asrs	r2, r4, #16
 8016c6a:	d466      	bmi.n	8016d3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8016c6c:	4593      	cmp	fp, r2
 8016c6e:	dd64      	ble.n	8016d3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8016c70:	1406      	asrs	r6, r0, #16
 8016c72:	d462      	bmi.n	8016d3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8016c74:	9901      	ldr	r1, [sp, #4]
 8016c76:	428e      	cmp	r6, r1
 8016c78:	da5f      	bge.n	8016d3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8016c7a:	9903      	ldr	r1, [sp, #12]
 8016c7c:	fb06 2601 	mla	r6, r6, r1, r2
 8016c80:	0872      	lsrs	r2, r6, #1
 8016c82:	9904      	ldr	r1, [sp, #16]
 8016c84:	5c8a      	ldrb	r2, [r1, r2]
 8016c86:	07f6      	lsls	r6, r6, #31
 8016c88:	bf54      	ite	pl
 8016c8a:	f002 020f 	andpl.w	r2, r2, #15
 8016c8e:	1112      	asrmi	r2, r2, #4
 8016c90:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016c94:	b2d2      	uxtb	r2, r2
 8016c96:	2a00      	cmp	r2, #0
 8016c98:	d04f      	beq.n	8016d3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8016c9a:	496c      	ldr	r1, [pc, #432]	; (8016e4c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 8016c9c:	680e      	ldr	r6, [r1, #0]
 8016c9e:	496c      	ldr	r1, [pc, #432]	; (8016e50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 8016ca0:	ea4f 2926 	mov.w	r9, r6, asr #8
 8016ca4:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8016ca8:	2aff      	cmp	r2, #255	; 0xff
 8016caa:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8016cae:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8016cb2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016cb6:	b2f6      	uxtb	r6, r6
 8016cb8:	d045      	beq.n	8016d46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8016cba:	f06f 0101 	mvn.w	r1, #1
 8016cbe:	4379      	muls	r1, r7
 8016cc0:	fa1f fa82 	uxth.w	sl, r2
 8016cc4:	f835 e001 	ldrh.w	lr, [r5, r1]
 8016cc8:	9102      	str	r1, [sp, #8]
 8016cca:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8016cce:	43d2      	mvns	r2, r2
 8016cd0:	b2d2      	uxtb	r2, r2
 8016cd2:	fb19 f90a 	smulbb	r9, r9, sl
 8016cd6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016cda:	fb0c 9c02 	mla	ip, ip, r2, r9
 8016cde:	ea4f 09ee 	mov.w	r9, lr, asr #3
 8016ce2:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8016ce6:	fb18 f80a 	smulbb	r8, r8, sl
 8016cea:	fb09 8802 	mla	r8, r9, r2, r8
 8016cee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016cf2:	fa1f f888 	uxth.w	r8, r8
 8016cf6:	fa5f fe8e 	uxtb.w	lr, lr
 8016cfa:	fb16 f60a 	smulbb	r6, r6, sl
 8016cfe:	fa1f fc8c 	uxth.w	ip, ip
 8016d02:	fb0e 6602 	mla	r6, lr, r2, r6
 8016d06:	f108 0901 	add.w	r9, r8, #1
 8016d0a:	b2b6      	uxth	r6, r6
 8016d0c:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8016d10:	f10c 0901 	add.w	r9, ip, #1
 8016d14:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016d18:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8016d1c:	1c72      	adds	r2, r6, #1
 8016d1e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016d22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016d26:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8016d2a:	ea48 080c 	orr.w	r8, r8, ip
 8016d2e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8016d32:	ea48 0806 	orr.w	r8, r8, r6
 8016d36:	f825 8001 	strh.w	r8, [r5, r1]
 8016d3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d3c:	4414      	add	r4, r2
 8016d3e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d40:	3f01      	subs	r7, #1
 8016d42:	4410      	add	r0, r2
 8016d44:	e74d      	b.n	8016be2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8016d46:	f06f 0201 	mvn.w	r2, #1
 8016d4a:	08f6      	lsrs	r6, r6, #3
 8016d4c:	fb02 fe07 	mul.w	lr, r2, r7
 8016d50:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8016d54:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 8016d58:	f825 600e 	strh.w	r6, [r5, lr]
 8016d5c:	e7ed      	b.n	8016d3a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8016d5e:	f04f 0e00 	mov.w	lr, #0
 8016d62:	eba3 020e 	sub.w	r2, r3, lr
 8016d66:	2a00      	cmp	r2, #0
 8016d68:	f77f af3e 	ble.w	8016be8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8016d6c:	9903      	ldr	r1, [sp, #12]
 8016d6e:	1422      	asrs	r2, r4, #16
 8016d70:	1406      	asrs	r6, r0, #16
 8016d72:	fb01 2606 	mla	r6, r1, r6, r2
 8016d76:	0872      	lsrs	r2, r6, #1
 8016d78:	9904      	ldr	r1, [sp, #16]
 8016d7a:	5c8a      	ldrb	r2, [r1, r2]
 8016d7c:	07f1      	lsls	r1, r6, #31
 8016d7e:	bf54      	ite	pl
 8016d80:	f002 020f 	andpl.w	r2, r2, #15
 8016d84:	1112      	asrmi	r2, r2, #4
 8016d86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016d8a:	b2d2      	uxtb	r2, r2
 8016d8c:	2a00      	cmp	r2, #0
 8016d8e:	d04a      	beq.n	8016e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 8016d90:	492e      	ldr	r1, [pc, #184]	; (8016e4c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 8016d92:	680e      	ldr	r6, [r1, #0]
 8016d94:	492e      	ldr	r1, [pc, #184]	; (8016e50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 8016d96:	ea4f 2926 	mov.w	r9, r6, asr #8
 8016d9a:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8016d9e:	2aff      	cmp	r2, #255	; 0xff
 8016da0:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8016da4:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8016da8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8016dac:	b2f6      	uxtb	r6, r6
 8016dae:	d041      	beq.n	8016e34 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f0>
 8016db0:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 8016db4:	fa1f fa82 	uxth.w	sl, r2
 8016db8:	ea4f 272c 	mov.w	r7, ip, asr #8
 8016dbc:	43d2      	mvns	r2, r2
 8016dbe:	b2d2      	uxtb	r2, r2
 8016dc0:	fb19 f90a 	smulbb	r9, r9, sl
 8016dc4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016dc8:	fb07 9702 	mla	r7, r7, r2, r9
 8016dcc:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8016dd0:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8016dd4:	fb18 f80a 	smulbb	r8, r8, sl
 8016dd8:	fb09 8802 	mla	r8, r9, r2, r8
 8016ddc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016de0:	fa1f f888 	uxth.w	r8, r8
 8016de4:	fa5f fc8c 	uxtb.w	ip, ip
 8016de8:	fb16 f60a 	smulbb	r6, r6, sl
 8016dec:	b2bf      	uxth	r7, r7
 8016dee:	fb0c 6602 	mla	r6, ip, r2, r6
 8016df2:	f108 0901 	add.w	r9, r8, #1
 8016df6:	b2b6      	uxth	r6, r6
 8016df8:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8016dfc:	f107 0901 	add.w	r9, r7, #1
 8016e00:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016e04:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8016e08:	1c72      	adds	r2, r6, #1
 8016e0a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8016e0e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016e12:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8016e16:	ea48 0807 	orr.w	r8, r8, r7
 8016e1a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8016e1e:	ea48 0806 	orr.w	r8, r8, r6
 8016e22:	f825 801e 	strh.w	r8, [r5, lr, lsl #1]
 8016e26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016e28:	4414      	add	r4, r2
 8016e2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e2c:	f10e 0e01 	add.w	lr, lr, #1
 8016e30:	4410      	add	r0, r2
 8016e32:	e796      	b.n	8016d62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 8016e34:	08f6      	lsrs	r6, r6, #3
 8016e36:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8016e3a:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 8016e3e:	f825 601e 	strh.w	r6, [r5, lr, lsl #1]
 8016e42:	e7f0      	b.n	8016e26 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 8016e44:	b007      	add	sp, #28
 8016e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e4a:	bf00      	nop
 8016e4c:	20009f04 	.word	0x20009f04
 8016e50:	0007fff8 	.word	0x0007fff8

08016e54 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8016e54:	4770      	bx	lr

08016e56 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8016e56:	4770      	bx	lr

08016e58 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8016e58:	4770      	bx	lr

08016e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8016e5a:	4770      	bx	lr

08016e5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016e5c:	4770      	bx	lr

08016e5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016e5e:	4770      	bx	lr

08016e60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016e60:	4770      	bx	lr

08016e62 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016e62:	4770      	bx	lr

08016e64 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016e64:	4770      	bx	lr

08016e66 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8016e66:	4770      	bx	lr

08016e68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016e68:	4770      	bx	lr

08016e6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016e6a:	4770      	bx	lr

08016e6c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016e6c:	4770      	bx	lr

08016e6e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8016e6e:	4770      	bx	lr

08016e70 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016e70:	4770      	bx	lr

08016e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016e72:	4770      	bx	lr

08016e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8016e74:	4770      	bx	lr

08016e76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8016e76:	4770      	bx	lr

08016e78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8016e78:	4770      	bx	lr

08016e7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8016e7a:	4770      	bx	lr

08016e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016e7c:	4770      	bx	lr

08016e7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8016e7e:	4770      	bx	lr

08016e80 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016e80:	4770      	bx	lr

08016e82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8016e82:	4770      	bx	lr

08016e84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8016e84:	4770      	bx	lr

08016e86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8016e86:	4770      	bx	lr

08016e88 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8016e88:	4770      	bx	lr

08016e8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8016e8a:	4770      	bx	lr

08016e8c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8016e8c:	b508      	push	{r3, lr}
 8016e8e:	4b06      	ldr	r3, [pc, #24]	; (8016ea8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 8016e90:	8818      	ldrh	r0, [r3, #0]
 8016e92:	b928      	cbnz	r0, 8016ea0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8016e94:	4b05      	ldr	r3, [pc, #20]	; (8016eac <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8016e96:	4a06      	ldr	r2, [pc, #24]	; (8016eb0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8016e98:	4806      	ldr	r0, [pc, #24]	; (8016eb4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8016e9a:	21d7      	movs	r1, #215	; 0xd7
 8016e9c:	f009 f894 	bl	801ffc8 <__assert_func>
 8016ea0:	0040      	lsls	r0, r0, #1
 8016ea2:	b280      	uxth	r0, r0
 8016ea4:	bd08      	pop	{r3, pc}
 8016ea6:	bf00      	nop
 8016ea8:	20009ef6 	.word	0x20009ef6
 8016eac:	08023ea3 	.word	0x08023ea3
 8016eb0:	08024427 	.word	0x08024427
 8016eb4:	08023ee5 	.word	0x08023ee5

08016eb8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8016eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ebc:	b08d      	sub	sp, #52	; 0x34
 8016ebe:	460f      	mov	r7, r1
 8016ec0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8016ec4:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8016ec8:	4616      	mov	r6, r2
 8016eca:	f1b9 0f00 	cmp.w	r9, #0
 8016ece:	d046      	beq.n	8016f5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8016ed0:	6810      	ldr	r0, [r2, #0]
 8016ed2:	6851      	ldr	r1, [r2, #4]
 8016ed4:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801709c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8016ed8:	ad08      	add	r5, sp, #32
 8016eda:	c503      	stmia	r5!, {r0, r1}
 8016edc:	6818      	ldr	r0, [r3, #0]
 8016ede:	6859      	ldr	r1, [r3, #4]
 8016ee0:	ad0a      	add	r5, sp, #40	; 0x28
 8016ee2:	c503      	stmia	r5!, {r0, r1}
 8016ee4:	a808      	add	r0, sp, #32
 8016ee6:	f7fb f965 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016eea:	4631      	mov	r1, r6
 8016eec:	a80a      	add	r0, sp, #40	; 0x28
 8016eee:	f7fb f949 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016ef2:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8016ef6:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8016efa:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8016efe:	f8d8 0000 	ldr.w	r0, [r8]
 8016f02:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 8016f06:	fb16 2103 	smlabb	r1, r6, r3, r2
 8016f0a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8016f0e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8016f12:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 8016f16:	440a      	add	r2, r1
 8016f18:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8016f1c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8016f20:	4413      	add	r3, r2
 8016f22:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8016f26:	6803      	ldr	r3, [r0, #0]
 8016f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f2a:	4798      	blx	r3
 8016f2c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016f30:	d018      	beq.n	8016f64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8016f32:	f010 0f04 	tst.w	r0, #4
 8016f36:	d019      	beq.n	8016f6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8016f38:	f8d8 0000 	ldr.w	r0, [r8]
 8016f3c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8016f40:	6801      	ldr	r1, [r0, #0]
 8016f42:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8016f46:	e9cd 9403 	strd	r9, r4, [sp, #12]
 8016f4a:	b2bf      	uxth	r7, r7
 8016f4c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8016f50:	9402      	str	r4, [sp, #8]
 8016f52:	b2ad      	uxth	r5, r5
 8016f54:	9701      	str	r7, [sp, #4]
 8016f56:	9500      	str	r5, [sp, #0]
 8016f58:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8016f5a:	4631      	mov	r1, r6
 8016f5c:	47a0      	blx	r4
 8016f5e:	b00d      	add	sp, #52	; 0x34
 8016f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f64:	b914      	cbnz	r4, 8016f6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8016f66:	f010 0f01 	tst.w	r0, #1
 8016f6a:	e7e4      	b.n	8016f36 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8016f6c:	f8d8 0000 	ldr.w	r0, [r8]
 8016f70:	6803      	ldr	r3, [r0, #0]
 8016f72:	6a1b      	ldr	r3, [r3, #32]
 8016f74:	4798      	blx	r3
 8016f76:	4a48      	ldr	r2, [pc, #288]	; (8017098 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 8016f78:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8016f7c:	8814      	ldrh	r4, [r2, #0]
 8016f7e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8016f82:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016f86:	fb01 3404 	mla	r4, r1, r4, r3
 8016f8a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8016f8e:	4692      	mov	sl, r2
 8016f90:	d118      	bne.n	8016fc4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 8016f92:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 8016f96:	f04f 0900 	mov.w	r9, #0
 8016f9a:	f8d8 0000 	ldr.w	r0, [r8]
 8016f9e:	45b9      	cmp	r9, r7
 8016fa0:	6803      	ldr	r3, [r0, #0]
 8016fa2:	da73      	bge.n	801708c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 8016fa4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8016fa6:	4632      	mov	r2, r6
 8016fa8:	465b      	mov	r3, fp
 8016faa:	4621      	mov	r1, r4
 8016fac:	47a8      	blx	r5
 8016fae:	f8ba 3000 	ldrh.w	r3, [sl]
 8016fb2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016fb6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8016fba:	f109 0901 	add.w	r9, r9, #1
 8016fbe:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8016fc2:	e7ea      	b.n	8016f9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 8016fc4:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 8016fc8:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 8016fcc:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8016fd0:	f04f 0b00 	mov.w	fp, #0
 8016fd4:	fa1f f389 	uxth.w	r3, r9
 8016fd8:	fa1f f888 	uxth.w	r8, r8
 8016fdc:	9207      	str	r2, [sp, #28]
 8016fde:	45bb      	cmp	fp, r7
 8016fe0:	da54      	bge.n	801708c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 8016fe2:	f04f 0e00 	mov.w	lr, #0
 8016fe6:	45ae      	cmp	lr, r5
 8016fe8:	da41      	bge.n	801706e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 8016fea:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 8016fee:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 8016ff2:	1208      	asrs	r0, r1, #8
 8016ff4:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8016ff8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016ffc:	fb10 f008 	smulbb	r0, r0, r8
 8017000:	ea4f 09e1 	mov.w	r9, r1, asr #3
 8017004:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017008:	00c9      	lsls	r1, r1, #3
 801700a:	fb0c 0c03 	mla	ip, ip, r3, r0
 801700e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017012:	10d0      	asrs	r0, r2, #3
 8017014:	b2c9      	uxtb	r1, r1
 8017016:	00d2      	lsls	r2, r2, #3
 8017018:	fa1f fc8c 	uxth.w	ip, ip
 801701c:	fb19 f908 	smulbb	r9, r9, r8
 8017020:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8017024:	b2d2      	uxtb	r2, r2
 8017026:	fb11 f108 	smulbb	r1, r1, r8
 801702a:	fb00 9003 	mla	r0, r0, r3, r9
 801702e:	fb02 1203 	mla	r2, r2, r3, r1
 8017032:	f10c 0901 	add.w	r9, ip, #1
 8017036:	b292      	uxth	r2, r2
 8017038:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801703c:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8017040:	f102 0c01 	add.w	ip, r2, #1
 8017044:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8017048:	b280      	uxth	r0, r0
 801704a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801704e:	ea49 0c02 	orr.w	ip, r9, r2
 8017052:	f100 0901 	add.w	r9, r0, #1
 8017056:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801705a:	0940      	lsrs	r0, r0, #5
 801705c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8017060:	ea4c 0c00 	orr.w	ip, ip, r0
 8017064:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 8017068:	f10e 0e01 	add.w	lr, lr, #1
 801706c:	e7bb      	b.n	8016fe6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801706e:	9a07      	ldr	r2, [sp, #28]
 8017070:	8812      	ldrh	r2, [r2, #0]
 8017072:	1b52      	subs	r2, r2, r5
 8017074:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8017078:	4414      	add	r4, r2
 801707a:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801707e:	1b52      	subs	r2, r2, r5
 8017080:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8017084:	4416      	add	r6, r2
 8017086:	f10b 0b01 	add.w	fp, fp, #1
 801708a:	e7a8      	b.n	8016fde <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 801708c:	4b03      	ldr	r3, [pc, #12]	; (801709c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801708e:	6818      	ldr	r0, [r3, #0]
 8017090:	6803      	ldr	r3, [r0, #0]
 8017092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017094:	4798      	blx	r3
 8017096:	e762      	b.n	8016f5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8017098:	20009ef6 	.word	0x20009ef6
 801709c:	20009efc 	.word	0x20009efc

080170a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80170a0:	b510      	push	{r4, lr}
 80170a2:	2104      	movs	r1, #4
 80170a4:	4604      	mov	r4, r0
 80170a6:	f008 ff63 	bl	801ff70 <_ZdlPvj>
 80170aa:	4620      	mov	r0, r4
 80170ac:	bd10      	pop	{r4, pc}

080170ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80170ae:	b510      	push	{r4, lr}
 80170b0:	2104      	movs	r1, #4
 80170b2:	4604      	mov	r4, r0
 80170b4:	f008 ff5c 	bl	801ff70 <_ZdlPvj>
 80170b8:	4620      	mov	r0, r4
 80170ba:	bd10      	pop	{r4, pc}

080170bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	2104      	movs	r1, #4
 80170c0:	4604      	mov	r4, r0
 80170c2:	f008 ff55 	bl	801ff70 <_ZdlPvj>
 80170c6:	4620      	mov	r0, r4
 80170c8:	bd10      	pop	{r4, pc}

080170ca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80170ca:	b510      	push	{r4, lr}
 80170cc:	2104      	movs	r1, #4
 80170ce:	4604      	mov	r4, r0
 80170d0:	f008 ff4e 	bl	801ff70 <_ZdlPvj>
 80170d4:	4620      	mov	r0, r4
 80170d6:	bd10      	pop	{r4, pc}

080170d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80170d8:	b510      	push	{r4, lr}
 80170da:	2104      	movs	r1, #4
 80170dc:	4604      	mov	r4, r0
 80170de:	f008 ff47 	bl	801ff70 <_ZdlPvj>
 80170e2:	4620      	mov	r0, r4
 80170e4:	bd10      	pop	{r4, pc}

080170e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80170e6:	b510      	push	{r4, lr}
 80170e8:	2104      	movs	r1, #4
 80170ea:	4604      	mov	r4, r0
 80170ec:	f008 ff40 	bl	801ff70 <_ZdlPvj>
 80170f0:	4620      	mov	r0, r4
 80170f2:	bd10      	pop	{r4, pc}

080170f4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80170f4:	b510      	push	{r4, lr}
 80170f6:	2104      	movs	r1, #4
 80170f8:	4604      	mov	r4, r0
 80170fa:	f008 ff39 	bl	801ff70 <_ZdlPvj>
 80170fe:	4620      	mov	r0, r4
 8017100:	bd10      	pop	{r4, pc}

08017102 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017102:	b510      	push	{r4, lr}
 8017104:	2104      	movs	r1, #4
 8017106:	4604      	mov	r4, r0
 8017108:	f008 ff32 	bl	801ff70 <_ZdlPvj>
 801710c:	4620      	mov	r0, r4
 801710e:	bd10      	pop	{r4, pc}

08017110 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017110:	b510      	push	{r4, lr}
 8017112:	2104      	movs	r1, #4
 8017114:	4604      	mov	r4, r0
 8017116:	f008 ff2b 	bl	801ff70 <_ZdlPvj>
 801711a:	4620      	mov	r0, r4
 801711c:	bd10      	pop	{r4, pc}

0801711e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801711e:	b510      	push	{r4, lr}
 8017120:	2104      	movs	r1, #4
 8017122:	4604      	mov	r4, r0
 8017124:	f008 ff24 	bl	801ff70 <_ZdlPvj>
 8017128:	4620      	mov	r0, r4
 801712a:	bd10      	pop	{r4, pc}

0801712c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801712c:	b510      	push	{r4, lr}
 801712e:	2104      	movs	r1, #4
 8017130:	4604      	mov	r4, r0
 8017132:	f008 ff1d 	bl	801ff70 <_ZdlPvj>
 8017136:	4620      	mov	r0, r4
 8017138:	bd10      	pop	{r4, pc}

0801713a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801713a:	b510      	push	{r4, lr}
 801713c:	2104      	movs	r1, #4
 801713e:	4604      	mov	r4, r0
 8017140:	f008 ff16 	bl	801ff70 <_ZdlPvj>
 8017144:	4620      	mov	r0, r4
 8017146:	bd10      	pop	{r4, pc}

08017148 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017148:	b510      	push	{r4, lr}
 801714a:	2104      	movs	r1, #4
 801714c:	4604      	mov	r4, r0
 801714e:	f008 ff0f 	bl	801ff70 <_ZdlPvj>
 8017152:	4620      	mov	r0, r4
 8017154:	bd10      	pop	{r4, pc}

08017156 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8017156:	b510      	push	{r4, lr}
 8017158:	2104      	movs	r1, #4
 801715a:	4604      	mov	r4, r0
 801715c:	f008 ff08 	bl	801ff70 <_ZdlPvj>
 8017160:	4620      	mov	r0, r4
 8017162:	bd10      	pop	{r4, pc}

08017164 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017164:	b510      	push	{r4, lr}
 8017166:	2104      	movs	r1, #4
 8017168:	4604      	mov	r4, r0
 801716a:	f008 ff01 	bl	801ff70 <_ZdlPvj>
 801716e:	4620      	mov	r0, r4
 8017170:	bd10      	pop	{r4, pc}

08017172 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017172:	b510      	push	{r4, lr}
 8017174:	2104      	movs	r1, #4
 8017176:	4604      	mov	r4, r0
 8017178:	f008 fefa 	bl	801ff70 <_ZdlPvj>
 801717c:	4620      	mov	r0, r4
 801717e:	bd10      	pop	{r4, pc}

08017180 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017180:	b510      	push	{r4, lr}
 8017182:	2104      	movs	r1, #4
 8017184:	4604      	mov	r4, r0
 8017186:	f008 fef3 	bl	801ff70 <_ZdlPvj>
 801718a:	4620      	mov	r0, r4
 801718c:	bd10      	pop	{r4, pc}

0801718e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801718e:	b510      	push	{r4, lr}
 8017190:	2104      	movs	r1, #4
 8017192:	4604      	mov	r4, r0
 8017194:	f008 feec 	bl	801ff70 <_ZdlPvj>
 8017198:	4620      	mov	r0, r4
 801719a:	bd10      	pop	{r4, pc}

0801719c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801719c:	b510      	push	{r4, lr}
 801719e:	2104      	movs	r1, #4
 80171a0:	4604      	mov	r4, r0
 80171a2:	f008 fee5 	bl	801ff70 <_ZdlPvj>
 80171a6:	4620      	mov	r0, r4
 80171a8:	bd10      	pop	{r4, pc}

080171aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80171aa:	b510      	push	{r4, lr}
 80171ac:	2104      	movs	r1, #4
 80171ae:	4604      	mov	r4, r0
 80171b0:	f008 fede 	bl	801ff70 <_ZdlPvj>
 80171b4:	4620      	mov	r0, r4
 80171b6:	bd10      	pop	{r4, pc}

080171b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80171b8:	b510      	push	{r4, lr}
 80171ba:	2104      	movs	r1, #4
 80171bc:	4604      	mov	r4, r0
 80171be:	f008 fed7 	bl	801ff70 <_ZdlPvj>
 80171c2:	4620      	mov	r0, r4
 80171c4:	bd10      	pop	{r4, pc}

080171c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80171c6:	b510      	push	{r4, lr}
 80171c8:	2104      	movs	r1, #4
 80171ca:	4604      	mov	r4, r0
 80171cc:	f008 fed0 	bl	801ff70 <_ZdlPvj>
 80171d0:	4620      	mov	r0, r4
 80171d2:	bd10      	pop	{r4, pc}

080171d4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80171d4:	b510      	push	{r4, lr}
 80171d6:	2104      	movs	r1, #4
 80171d8:	4604      	mov	r4, r0
 80171da:	f008 fec9 	bl	801ff70 <_ZdlPvj>
 80171de:	4620      	mov	r0, r4
 80171e0:	bd10      	pop	{r4, pc}

080171e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80171e2:	b510      	push	{r4, lr}
 80171e4:	2104      	movs	r1, #4
 80171e6:	4604      	mov	r4, r0
 80171e8:	f008 fec2 	bl	801ff70 <_ZdlPvj>
 80171ec:	4620      	mov	r0, r4
 80171ee:	bd10      	pop	{r4, pc}

080171f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80171f0:	b510      	push	{r4, lr}
 80171f2:	2104      	movs	r1, #4
 80171f4:	4604      	mov	r4, r0
 80171f6:	f008 febb 	bl	801ff70 <_ZdlPvj>
 80171fa:	4620      	mov	r0, r4
 80171fc:	bd10      	pop	{r4, pc}

080171fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80171fe:	b510      	push	{r4, lr}
 8017200:	2104      	movs	r1, #4
 8017202:	4604      	mov	r4, r0
 8017204:	f008 feb4 	bl	801ff70 <_ZdlPvj>
 8017208:	4620      	mov	r0, r4
 801720a:	bd10      	pop	{r4, pc}

0801720c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801720c:	b510      	push	{r4, lr}
 801720e:	2104      	movs	r1, #4
 8017210:	4604      	mov	r4, r0
 8017212:	f008 fead 	bl	801ff70 <_ZdlPvj>
 8017216:	4620      	mov	r0, r4
 8017218:	bd10      	pop	{r4, pc}

0801721a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801721a:	b510      	push	{r4, lr}
 801721c:	2104      	movs	r1, #4
 801721e:	4604      	mov	r4, r0
 8017220:	f008 fea6 	bl	801ff70 <_ZdlPvj>
 8017224:	4620      	mov	r0, r4
 8017226:	bd10      	pop	{r4, pc}

08017228 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801722c:	460e      	mov	r6, r1
 801722e:	b08b      	sub	sp, #44	; 0x2c
 8017230:	4615      	mov	r5, r2
 8017232:	461c      	mov	r4, r3
 8017234:	b323      	cbz	r3, 8017280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8017236:	4608      	mov	r0, r1
 8017238:	f7f8 ffc4 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 801723c:	bb00      	cbnz	r0, 8017280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 801723e:	6830      	ldr	r0, [r6, #0]
 8017240:	6871      	ldr	r1, [r6, #4]
 8017242:	4e55      	ldr	r6, [pc, #340]	; (8017398 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 8017244:	ab08      	add	r3, sp, #32
 8017246:	c303      	stmia	r3!, {r0, r1}
 8017248:	a808      	add	r0, sp, #32
 801724a:	f7fa ffb3 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801724e:	6830      	ldr	r0, [r6, #0]
 8017250:	6803      	ldr	r3, [r0, #0]
 8017252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017254:	4798      	blx	r3
 8017256:	2cff      	cmp	r4, #255	; 0xff
 8017258:	d015      	beq.n	8017286 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 801725a:	f010 0f08 	tst.w	r0, #8
 801725e:	d015      	beq.n	801728c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 8017260:	6830      	ldr	r0, [r6, #0]
 8017262:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017266:	6801      	ldr	r1, [r0, #0]
 8017268:	9402      	str	r4, [sp, #8]
 801726a:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801726e:	9401      	str	r4, [sp, #4]
 8017270:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8017274:	9400      	str	r4, [sp, #0]
 8017276:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8017278:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801727c:	4629      	mov	r1, r5
 801727e:	47a0      	blx	r4
 8017280:	b00b      	add	sp, #44	; 0x2c
 8017282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017286:	f010 0f02 	tst.w	r0, #2
 801728a:	e7e8      	b.n	801725e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801728c:	6830      	ldr	r0, [r6, #0]
 801728e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8017292:	6803      	ldr	r3, [r0, #0]
 8017294:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8017298:	6a1b      	ldr	r3, [r3, #32]
 801729a:	4798      	blx	r3
 801729c:	4a3f      	ldr	r2, [pc, #252]	; (801739c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 801729e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80172a2:	8816      	ldrh	r6, [r2, #0]
 80172a4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80172a8:	2cff      	cmp	r4, #255	; 0xff
 80172aa:	fb06 1303 	mla	r3, r6, r3, r1
 80172ae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80172b2:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 80172b6:	4616      	mov	r6, r2
 80172b8:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 80172bc:	d10a      	bne.n	80172d4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 80172be:	0049      	lsls	r1, r1, #1
 80172c0:	2200      	movs	r2, #0
 80172c2:	454a      	cmp	r2, r9
 80172c4:	da62      	bge.n	801738c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 80172c6:	2300      	movs	r3, #0
 80172c8:	4543      	cmp	r3, r8
 80172ca:	da58      	bge.n	801737e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 80172cc:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 80172d0:	3301      	adds	r3, #1
 80172d2:	e7f9      	b.n	80172c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 80172d4:	122b      	asrs	r3, r5, #8
 80172d6:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 80172da:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80172de:	b2a4      	uxth	r4, r4
 80172e0:	4363      	muls	r3, r4
 80172e2:	9305      	str	r3, [sp, #20]
 80172e4:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 80172e8:	00eb      	lsls	r3, r5, #3
 80172ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80172ee:	b2db      	uxtb	r3, r3
 80172f0:	0049      	lsls	r1, r1, #1
 80172f2:	4366      	muls	r6, r4
 80172f4:	4363      	muls	r3, r4
 80172f6:	9106      	str	r1, [sp, #24]
 80172f8:	f04f 0c00 	mov.w	ip, #0
 80172fc:	b2bf      	uxth	r7, r7
 80172fe:	9207      	str	r2, [sp, #28]
 8017300:	45cc      	cmp	ip, r9
 8017302:	da43      	bge.n	801738c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8017304:	4682      	mov	sl, r0
 8017306:	f04f 0e00 	mov.w	lr, #0
 801730a:	45c6      	cmp	lr, r8
 801730c:	da2d      	bge.n	801736a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x142>
 801730e:	f8ba 2000 	ldrh.w	r2, [sl]
 8017312:	9905      	ldr	r1, [sp, #20]
 8017314:	1214      	asrs	r4, r2, #8
 8017316:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801731a:	fb14 f407 	smulbb	r4, r4, r7
 801731e:	440c      	add	r4, r1
 8017320:	10d1      	asrs	r1, r2, #3
 8017322:	00d2      	lsls	r2, r2, #3
 8017324:	b2d2      	uxtb	r2, r2
 8017326:	fb12 f207 	smulbb	r2, r2, r7
 801732a:	b2a4      	uxth	r4, r4
 801732c:	441a      	add	r2, r3
 801732e:	b292      	uxth	r2, r2
 8017330:	1c65      	adds	r5, r4, #1
 8017332:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8017336:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801733a:	fb11 f107 	smulbb	r1, r1, r7
 801733e:	1c55      	adds	r5, r2, #1
 8017340:	4431      	add	r1, r6
 8017342:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8017346:	b289      	uxth	r1, r1
 8017348:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801734c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8017350:	4314      	orrs	r4, r2
 8017352:	1c4a      	adds	r2, r1, #1
 8017354:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8017358:	0949      	lsrs	r1, r1, #5
 801735a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801735e:	430c      	orrs	r4, r1
 8017360:	f82a 4b02 	strh.w	r4, [sl], #2
 8017364:	f10e 0e01 	add.w	lr, lr, #1
 8017368:	e7cf      	b.n	801730a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe2>
 801736a:	9a07      	ldr	r2, [sp, #28]
 801736c:	9906      	ldr	r1, [sp, #24]
 801736e:	8812      	ldrh	r2, [r2, #0]
 8017370:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 8017374:	440a      	add	r2, r1
 8017376:	4410      	add	r0, r2
 8017378:	f10c 0c01 	add.w	ip, ip, #1
 801737c:	e7c0      	b.n	8017300 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd8>
 801737e:	8833      	ldrh	r3, [r6, #0]
 8017380:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 8017384:	440b      	add	r3, r1
 8017386:	4418      	add	r0, r3
 8017388:	3201      	adds	r2, #1
 801738a:	e79a      	b.n	80172c2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 801738c:	4b02      	ldr	r3, [pc, #8]	; (8017398 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 801738e:	6818      	ldr	r0, [r3, #0]
 8017390:	6803      	ldr	r3, [r0, #0]
 8017392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017394:	4798      	blx	r3
 8017396:	e773      	b.n	8017280 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8017398:	20009efc 	.word	0x20009efc
 801739c:	20009ef6 	.word	0x20009ef6

080173a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80173a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a4:	4d9b      	ldr	r5, [pc, #620]	; (8017614 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 80173a6:	4690      	mov	r8, r2
 80173a8:	682a      	ldr	r2, [r5, #0]
 80173aa:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80173ae:	2a02      	cmp	r2, #2
 80173b0:	b08f      	sub	sp, #60	; 0x3c
 80173b2:	4604      	mov	r4, r0
 80173b4:	4689      	mov	r9, r1
 80173b6:	d106      	bne.n	80173c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 80173b8:	4b97      	ldr	r3, [pc, #604]	; (8017618 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 80173ba:	4a98      	ldr	r2, [pc, #608]	; (801761c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80173bc:	f240 21c2 	movw	r1, #706	; 0x2c2
 80173c0:	4897      	ldr	r0, [pc, #604]	; (8017620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 80173c2:	f008 fe01 	bl	801ffc8 <__assert_func>
 80173c6:	ae0e      	add	r6, sp, #56	; 0x38
 80173c8:	f826 3d24 	strh.w	r3, [r6, #-36]!
 80173cc:	4630      	mov	r0, r6
 80173ce:	f7fd facf 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80173d2:	6823      	ldr	r3, [r4, #0]
 80173d4:	4607      	mov	r7, r0
 80173d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d8:	4620      	mov	r0, r4
 80173da:	4798      	blx	r3
 80173dc:	4287      	cmp	r7, r0
 80173de:	d004      	beq.n	80173ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 80173e0:	4b90      	ldr	r3, [pc, #576]	; (8017624 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 80173e2:	4a8e      	ldr	r2, [pc, #568]	; (801761c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80173e4:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 80173e8:	e7ea      	b.n	80173c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80173ea:	4630      	mov	r0, r6
 80173ec:	f7fd fa3c 	bl	8014868 <_ZNK8touchgfx6Bitmap7getDataEv>
 80173f0:	4607      	mov	r7, r0
 80173f2:	b920      	cbnz	r0, 80173fe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 80173f4:	4b8c      	ldr	r3, [pc, #560]	; (8017628 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 80173f6:	4a89      	ldr	r2, [pc, #548]	; (801761c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80173f8:	f240 21c6 	movw	r1, #710	; 0x2c6
 80173fc:	e7e0      	b.n	80173c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 80173fe:	f8d8 0000 	ldr.w	r0, [r8]
 8017402:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017406:	f9b8 a000 	ldrsh.w	sl, [r8]
 801740a:	ab06      	add	r3, sp, #24
 801740c:	c303      	stmia	r3!, {r0, r1}
 801740e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017412:	f8d9 0000 	ldr.w	r0, [r9]
 8017416:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801741a:	ab08      	add	r3, sp, #32
 801741c:	c303      	stmia	r3!, {r0, r1}
 801741e:	4630      	mov	r0, r6
 8017420:	f7fd f91a 	bl	8014658 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017424:	4680      	mov	r8, r0
 8017426:	4630      	mov	r0, r6
 8017428:	f7fd f950 	bl	80146cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801742c:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8017430:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8017434:	f10d 0920 	add.w	r9, sp, #32
 8017438:	a806      	add	r0, sp, #24
 801743a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801743e:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8017442:	f7fa feb7 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017446:	4648      	mov	r0, r9
 8017448:	f7fa feb4 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801744c:	a80a      	add	r0, sp, #40	; 0x28
 801744e:	f7fa feb1 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017452:	4e76      	ldr	r6, [pc, #472]	; (801762c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8017454:	4b76      	ldr	r3, [pc, #472]	; (8017630 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8017456:	f9b6 2000 	ldrsh.w	r2, [r6]
 801745a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801745e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017462:	2100      	movs	r1, #0
 8017464:	910c      	str	r1, [sp, #48]	; 0x30
 8017466:	4648      	mov	r0, r9
 8017468:	a90c      	add	r1, sp, #48	; 0x30
 801746a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801746e:	f7f8 fe65 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8017472:	4648      	mov	r0, r9
 8017474:	f7f8 fea6 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017478:	2800      	cmp	r0, #0
 801747a:	f040 80bd 	bne.w	80175f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801747e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8017482:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8017486:	4288      	cmp	r0, r1
 8017488:	db37      	blt.n	80174fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 801748a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801748e:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017492:	429a      	cmp	r2, r3
 8017494:	db31      	blt.n	80174fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8017496:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 801749a:	4460      	add	r0, ip
 801749c:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 80174a0:	4461      	add	r1, ip
 80174a2:	b200      	sxth	r0, r0
 80174a4:	b209      	sxth	r1, r1
 80174a6:	4288      	cmp	r0, r1
 80174a8:	dc27      	bgt.n	80174fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80174aa:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 80174ae:	440a      	add	r2, r1
 80174b0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80174b4:	440b      	add	r3, r1
 80174b6:	b212      	sxth	r2, r2
 80174b8:	b21b      	sxth	r3, r3
 80174ba:	429a      	cmp	r2, r3
 80174bc:	dc1d      	bgt.n	80174fa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 80174be:	6823      	ldr	r3, [r4, #0]
 80174c0:	4620      	mov	r0, r4
 80174c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174c4:	4798      	blx	r3
 80174c6:	4682      	mov	sl, r0
 80174c8:	6828      	ldr	r0, [r5, #0]
 80174ca:	6803      	ldr	r3, [r0, #0]
 80174cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174ce:	4798      	blx	r3
 80174d0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80174d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80174d8:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 80174dc:	1a9b      	subs	r3, r3, r2
 80174de:	b29b      	uxth	r3, r3
 80174e0:	b21c      	sxth	r4, r3
 80174e2:	2c00      	cmp	r4, #0
 80174e4:	dc0e      	bgt.n	8017504 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 80174e6:	bf1f      	itttt	ne
 80174e8:	f8ad 2020 	strhne.w	r2, [sp, #32]
 80174ec:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 80174f0:	189b      	addne	r3, r3, r2
 80174f2:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 80174f6:	463c      	mov	r4, r7
 80174f8:	e00a      	b.n	8017510 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 80174fa:	4b4e      	ldr	r3, [pc, #312]	; (8017634 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 80174fc:	4a47      	ldr	r2, [pc, #284]	; (801761c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 80174fe:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8017502:	e75d      	b.n	80173c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8017504:	ebab 0303 	sub.w	r3, fp, r3
 8017508:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 801750c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8017510:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8017514:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017518:	1a5b      	subs	r3, r3, r1
 801751a:	b29b      	uxth	r3, r3
 801751c:	b21a      	sxth	r2, r3
 801751e:	2a00      	cmp	r2, #0
 8017520:	dd4a      	ble.n	80175b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 8017522:	fb02 f20b 	mul.w	r2, r2, fp
 8017526:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 801752a:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801752e:	1ad3      	subs	r3, r2, r3
 8017530:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8017534:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017538:	2b00      	cmp	r3, #0
 801753a:	dd5d      	ble.n	80175f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801753c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8017540:	f1bc 0f00 	cmp.w	ip, #0
 8017544:	dd58      	ble.n	80175f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8017546:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801754a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801754e:	fb0a f801 	mul.w	r8, sl, r1
 8017552:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8017556:	4480      	add	r8, r0
 8017558:	8830      	ldrh	r0, [r6, #0]
 801755a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801755e:	42b3      	cmp	r3, r6
 8017560:	bfa8      	it	ge
 8017562:	4633      	movge	r3, r6
 8017564:	1a82      	subs	r2, r0, r2
 8017566:	4293      	cmp	r3, r2
 8017568:	bfa8      	it	ge
 801756a:	4613      	movge	r3, r2
 801756c:	4a30      	ldr	r2, [pc, #192]	; (8017630 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801756e:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8017572:	8812      	ldrh	r2, [r2, #0]
 8017574:	4566      	cmp	r6, ip
 8017576:	eba2 0101 	sub.w	r1, r2, r1
 801757a:	bfa8      	it	ge
 801757c:	4666      	movge	r6, ip
 801757e:	428e      	cmp	r6, r1
 8017580:	4632      	mov	r2, r6
 8017582:	bfa8      	it	ge
 8017584:	460a      	movge	r2, r1
 8017586:	4298      	cmp	r0, r3
 8017588:	9202      	str	r2, [sp, #8]
 801758a:	d01e      	beq.n	80175ca <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 801758c:	005b      	lsls	r3, r3, #1
 801758e:	9303      	str	r3, [sp, #12]
 8017590:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8017594:	f04f 0900 	mov.w	r9, #0
 8017598:	9b02      	ldr	r3, [sp, #8]
 801759a:	454b      	cmp	r3, r9
 801759c:	dd2c      	ble.n	80175f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 801759e:	6828      	ldr	r0, [r5, #0]
 80175a0:	6803      	ldr	r3, [r0, #0]
 80175a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175a4:	4642      	mov	r2, r8
 80175a6:	461e      	mov	r6, r3
 80175a8:	4621      	mov	r1, r4
 80175aa:	9b03      	ldr	r3, [sp, #12]
 80175ac:	47b0      	blx	r6
 80175ae:	44d0      	add	r8, sl
 80175b0:	445c      	add	r4, fp
 80175b2:	f109 0901 	add.w	r9, r9, #1
 80175b6:	e7ef      	b.n	8017598 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 80175b8:	bf1f      	itttt	ne
 80175ba:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 80175be:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 80175c2:	189b      	addne	r3, r3, r2
 80175c4:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 80175c8:	e7b4      	b.n	8017534 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 80175ca:	4558      	cmp	r0, fp
 80175cc:	d1de      	bne.n	801758c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 80175ce:	6828      	ldr	r0, [r5, #0]
 80175d0:	6803      	ldr	r3, [r0, #0]
 80175d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175d4:	4798      	blx	r3
 80175d6:	07c3      	lsls	r3, r0, #31
 80175d8:	d512      	bpl.n	8017600 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 80175da:	6828      	ldr	r0, [r5, #0]
 80175dc:	9b02      	ldr	r3, [sp, #8]
 80175de:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 80175e2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80175e6:	6803      	ldr	r3, [r0, #0]
 80175e8:	f8cd b000 	str.w	fp, [sp]
 80175ec:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80175ee:	e899 0006 	ldmia.w	r9, {r1, r2}
 80175f2:	4623      	mov	r3, r4
 80175f4:	47a8      	blx	r5
 80175f6:	4607      	mov	r7, r0
 80175f8:	4638      	mov	r0, r7
 80175fa:	b00f      	add	sp, #60	; 0x3c
 80175fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017600:	6828      	ldr	r0, [r5, #0]
 8017602:	6803      	ldr	r3, [r0, #0]
 8017604:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8017606:	9b02      	ldr	r3, [sp, #8]
 8017608:	4642      	mov	r2, r8
 801760a:	fb03 f30a 	mul.w	r3, r3, sl
 801760e:	4621      	mov	r1, r4
 8017610:	47a8      	blx	r5
 8017612:	e7f1      	b.n	80175f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8017614:	20009efc 	.word	0x20009efc
 8017618:	08023c95 	.word	0x08023c95
 801761c:	080244d7 	.word	0x080244d7
 8017620:	08023d49 	.word	0x08023d49
 8017624:	08023d7b 	.word	0x08023d7b
 8017628:	08023dd0 	.word	0x08023dd0
 801762c:	20009ef6 	.word	0x20009ef6
 8017630:	20009ef8 	.word	0x20009ef8
 8017634:	08023e0e 	.word	0x08023e0e

08017638 <_ZN8touchgfx8LCD16bppC1Ev>:
 8017638:	2200      	movs	r2, #0
 801763a:	4910      	ldr	r1, [pc, #64]	; (801767c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801763c:	6042      	str	r2, [r0, #4]
 801763e:	6001      	str	r1, [r0, #0]
 8017640:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017644:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017648:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801764c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017650:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017654:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017658:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801765c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017660:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017664:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017668:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801766c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8017670:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8017674:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8017678:	4770      	bx	lr
 801767a:	bf00      	nop
 801767c:	08024150 	.word	0x08024150

08017680 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8017680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017684:	460c      	mov	r4, r1
 8017686:	b08d      	sub	sp, #52	; 0x34
 8017688:	4682      	mov	sl, r0
 801768a:	6808      	ldr	r0, [r1, #0]
 801768c:	6849      	ldr	r1, [r1, #4]
 801768e:	469b      	mov	fp, r3
 8017690:	ab08      	add	r3, sp, #32
 8017692:	c303      	stmia	r3!, {r0, r1}
 8017694:	6810      	ldr	r0, [r2, #0]
 8017696:	6851      	ldr	r1, [r2, #4]
 8017698:	ab0a      	add	r3, sp, #40	; 0x28
 801769a:	c303      	stmia	r3!, {r0, r1}
 801769c:	a808      	add	r0, sp, #32
 801769e:	f7fa fd89 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80176a2:	4621      	mov	r1, r4
 80176a4:	a80a      	add	r0, sp, #40	; 0x28
 80176a6:	f7fa fd6d 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80176aa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80176ae:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80176b2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80176b6:	4c60      	ldr	r4, [pc, #384]	; (8017838 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 80176b8:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80176bc:	6820      	ldr	r0, [r4, #0]
 80176be:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 80176c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80176c6:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80176ca:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80176ce:	440a      	add	r2, r1
 80176d0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80176d4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80176d8:	4413      	add	r3, r2
 80176da:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80176de:	6803      	ldr	r3, [r0, #0]
 80176e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176e2:	4798      	blx	r3
 80176e4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80176e8:	d119      	bne.n	801771e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80176ea:	f010 0f20 	tst.w	r0, #32
 80176ee:	6820      	ldr	r0, [r4, #0]
 80176f0:	d018      	beq.n	8017724 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80176f2:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80176f6:	6801      	ldr	r1, [r0, #0]
 80176f8:	9402      	str	r4, [sp, #8]
 80176fa:	fa1f f489 	uxth.w	r4, r9
 80176fe:	9401      	str	r4, [sp, #4]
 8017700:	fa1f f488 	uxth.w	r4, r8
 8017704:	f8cd b00c 	str.w	fp, [sp, #12]
 8017708:	9400      	str	r4, [sp, #0]
 801770a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801770c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8017710:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8017714:	4651      	mov	r1, sl
 8017716:	47a0      	blx	r4
 8017718:	b00d      	add	sp, #52	; 0x34
 801771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801771e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017722:	e7e4      	b.n	80176ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8017724:	6803      	ldr	r3, [r0, #0]
 8017726:	6a1b      	ldr	r3, [r3, #32]
 8017728:	4798      	blx	r3
 801772a:	4a44      	ldr	r2, [pc, #272]	; (801783c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 801772c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8017730:	8813      	ldrh	r3, [r2, #0]
 8017732:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8017736:	9207      	str	r2, [sp, #28]
 8017738:	fb04 1303 	mla	r3, r4, r3, r1
 801773c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017740:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8017744:	0099      	lsls	r1, r3, #2
 8017746:	005b      	lsls	r3, r3, #1
 8017748:	9106      	str	r1, [sp, #24]
 801774a:	9305      	str	r3, [sp, #20]
 801774c:	f04f 0c00 	mov.w	ip, #0
 8017750:	45cc      	cmp	ip, r9
 8017752:	da6b      	bge.n	801782c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 8017754:	2300      	movs	r3, #0
 8017756:	4543      	cmp	r3, r8
 8017758:	da55      	bge.n	8017806 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 801775a:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 801775e:	0e25      	lsrs	r5, r4, #24
 8017760:	d013      	beq.n	801778a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8017762:	2dff      	cmp	r5, #255	; 0xff
 8017764:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8017768:	d111      	bne.n	801778e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801776a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801776e:	d10e      	bne.n	801778e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8017770:	0962      	lsrs	r2, r4, #5
 8017772:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8017776:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801777a:	f027 0707 	bic.w	r7, r7, #7
 801777e:	4317      	orrs	r7, r2
 8017780:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017784:	433c      	orrs	r4, r7
 8017786:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 801778a:	3301      	adds	r3, #1
 801778c:	e7e3      	b.n	8017756 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 801778e:	fb0b f505 	mul.w	r5, fp, r5
 8017792:	1c6a      	adds	r2, r5, #1
 8017794:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8017798:	eb02 2225 	add.w	r2, r2, r5, asr #8
 801779c:	1212      	asrs	r2, r2, #8
 801779e:	fa1f fe82 	uxth.w	lr, r2
 80177a2:	120e      	asrs	r6, r1, #8
 80177a4:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80177a8:	43d2      	mvns	r2, r2
 80177aa:	b2d2      	uxtb	r2, r2
 80177ac:	fb15 f50e 	smulbb	r5, r5, lr
 80177b0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80177b4:	fb06 5602 	mla	r6, r6, r2, r5
 80177b8:	b2e4      	uxtb	r4, r4
 80177ba:	10cd      	asrs	r5, r1, #3
 80177bc:	00c9      	lsls	r1, r1, #3
 80177be:	b2c9      	uxtb	r1, r1
 80177c0:	fb14 f40e 	smulbb	r4, r4, lr
 80177c4:	fb01 4402 	mla	r4, r1, r2, r4
 80177c8:	b2ff      	uxtb	r7, r7
 80177ca:	b2b6      	uxth	r6, r6
 80177cc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80177d0:	b2a4      	uxth	r4, r4
 80177d2:	fb17 f70e 	smulbb	r7, r7, lr
 80177d6:	fb05 7702 	mla	r7, r5, r2, r7
 80177da:	1c72      	adds	r2, r6, #1
 80177dc:	1c65      	adds	r5, r4, #1
 80177de:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80177e2:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 80177e6:	b2bf      	uxth	r7, r7
 80177e8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80177ec:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80177f0:	432e      	orrs	r6, r5
 80177f2:	1c7d      	adds	r5, r7, #1
 80177f4:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80177f8:	097f      	lsrs	r7, r7, #5
 80177fa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80177fe:	433e      	orrs	r6, r7
 8017800:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8017804:	e7c1      	b.n	801778a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8017806:	9b07      	ldr	r3, [sp, #28]
 8017808:	9a05      	ldr	r2, [sp, #20]
 801780a:	881b      	ldrh	r3, [r3, #0]
 801780c:	eba3 0308 	sub.w	r3, r3, r8
 8017810:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017814:	4418      	add	r0, r3
 8017816:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801781a:	9a06      	ldr	r2, [sp, #24]
 801781c:	eba3 0308 	sub.w	r3, r3, r8
 8017820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017824:	449a      	add	sl, r3
 8017826:	f10c 0c01 	add.w	ip, ip, #1
 801782a:	e791      	b.n	8017750 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801782c:	4b02      	ldr	r3, [pc, #8]	; (8017838 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 801782e:	6818      	ldr	r0, [r3, #0]
 8017830:	6803      	ldr	r3, [r0, #0]
 8017832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017834:	4798      	blx	r3
 8017836:	e76f      	b.n	8017718 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8017838:	20009efc 	.word	0x20009efc
 801783c:	20009ef6 	.word	0x20009ef6

08017840 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8017840:	b570      	push	{r4, r5, r6, lr}
 8017842:	9d04      	ldr	r5, [sp, #16]
 8017844:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8017848:	460c      	mov	r4, r1
 801784a:	4619      	mov	r1, r3
 801784c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017850:	2a0c      	cmp	r2, #12
 8017852:	d820      	bhi.n	8017896 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8017854:	e8df f002 	tbb	[pc, r2]
 8017858:	18121807 	.word	0x18121807
 801785c:	18181818 	.word	0x18181818
 8017860:	18181818 	.word	0x18181818
 8017864:	18          	.byte	0x18
 8017865:	00          	.byte	0x00
 8017866:	6802      	ldr	r2, [r0, #0]
 8017868:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801786c:	6916      	ldr	r6, [r2, #16]
 801786e:	462b      	mov	r3, r5
 8017870:	460a      	mov	r2, r1
 8017872:	46b4      	mov	ip, r6
 8017874:	4621      	mov	r1, r4
 8017876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801787a:	4760      	bx	ip
 801787c:	462a      	mov	r2, r5
 801787e:	4620      	mov	r0, r4
 8017880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017884:	f7ff befc 	b.w	8017680 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017888:	4b03      	ldr	r3, [pc, #12]	; (8017898 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801788a:	4a04      	ldr	r2, [pc, #16]	; (801789c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801788c:	4804      	ldr	r0, [pc, #16]	; (80178a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801788e:	f240 21bb 	movw	r1, #699	; 0x2bb
 8017892:	f008 fb99 	bl	801ffc8 <__assert_func>
 8017896:	bd70      	pop	{r4, r5, r6, pc}
 8017898:	08023e6e 	.word	0x08023e6e
 801789c:	0802455d 	.word	0x0802455d
 80178a0:	08023d49 	.word	0x08023d49

080178a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80178a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178a8:	b093      	sub	sp, #76	; 0x4c
 80178aa:	880f      	ldrh	r7, [r1, #0]
 80178ac:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80178b0:	4681      	mov	r9, r0
 80178b2:	4688      	mov	r8, r1
 80178b4:	4615      	mov	r5, r2
 80178b6:	b12f      	cbz	r7, 80178c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 80178b8:	4b71      	ldr	r3, [pc, #452]	; (8017a80 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 80178ba:	4a72      	ldr	r2, [pc, #456]	; (8017a84 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 80178bc:	4872      	ldr	r0, [pc, #456]	; (8017a88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80178be:	21ec      	movs	r1, #236	; 0xec
 80178c0:	f008 fb82 	bl	801ffc8 <__assert_func>
 80178c4:	6810      	ldr	r0, [r2, #0]
 80178c6:	6851      	ldr	r1, [r2, #4]
 80178c8:	ac0e      	add	r4, sp, #56	; 0x38
 80178ca:	c403      	stmia	r4!, {r0, r1}
 80178cc:	6818      	ldr	r0, [r3, #0]
 80178ce:	6859      	ldr	r1, [r3, #4]
 80178d0:	ac10      	add	r4, sp, #64	; 0x40
 80178d2:	c403      	stmia	r4!, {r0, r1}
 80178d4:	a80e      	add	r0, sp, #56	; 0x38
 80178d6:	f7fa fc6d 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80178da:	4629      	mov	r1, r5
 80178dc:	a810      	add	r0, sp, #64	; 0x40
 80178de:	f7fa fc51 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80178e2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80178e6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80178ea:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80178ee:	4d67      	ldr	r5, [pc, #412]	; (8017a8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 80178f0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80178f4:	6828      	ldr	r0, [r5, #0]
 80178f6:	4c66      	ldr	r4, [pc, #408]	; (8017a90 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 80178f8:	fb11 2103 	smlabb	r1, r1, r3, r2
 80178fc:	4489      	add	r9, r1
 80178fe:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8017902:	440a      	add	r2, r1
 8017904:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017908:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801790c:	4413      	add	r3, r2
 801790e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017912:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8017916:	930a      	str	r3, [sp, #40]	; 0x28
 8017918:	6803      	ldr	r3, [r0, #0]
 801791a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801791e:	4798      	blx	r3
 8017920:	2801      	cmp	r0, #1
 8017922:	d11d      	bne.n	8017960 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 8017924:	220b      	movs	r2, #11
 8017926:	9708      	str	r7, [sp, #32]
 8017928:	9207      	str	r2, [sp, #28]
 801792a:	8822      	ldrh	r2, [r4, #0]
 801792c:	f8cd a010 	str.w	sl, [sp, #16]
 8017930:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8017934:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017938:	9203      	str	r2, [sp, #12]
 801793a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801793e:	9202      	str	r2, [sp, #8]
 8017940:	fa1f f28b 	uxth.w	r2, fp
 8017944:	9201      	str	r2, [sp, #4]
 8017946:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801794a:	9200      	str	r2, [sp, #0]
 801794c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017950:	6828      	ldr	r0, [r5, #0]
 8017952:	4642      	mov	r2, r8
 8017954:	4649      	mov	r1, r9
 8017956:	f7f9 f83b 	bl	80109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801795a:	b013      	add	sp, #76	; 0x4c
 801795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017960:	6828      	ldr	r0, [r5, #0]
 8017962:	6803      	ldr	r3, [r0, #0]
 8017964:	6a1b      	ldr	r3, [r3, #32]
 8017966:	4798      	blx	r3
 8017968:	8823      	ldrh	r3, [r4, #0]
 801796a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801796e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8017972:	fb01 2303 	mla	r3, r1, r3, r2
 8017976:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801797a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801797e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017980:	005b      	lsls	r3, r3, #1
 8017982:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8017986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017988:	429f      	cmp	r7, r3
 801798a:	da72      	bge.n	8017a72 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 801798c:	2100      	movs	r1, #0
 801798e:	4559      	cmp	r1, fp
 8017990:	da5e      	bge.n	8017a50 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8017992:	f819 3001 	ldrb.w	r3, [r9, r1]
 8017996:	2204      	movs	r2, #4
 8017998:	fb12 2303 	smlabb	r3, r2, r3, r2
 801799c:	f858 2003 	ldr.w	r2, [r8, r3]
 80179a0:	0e15      	lsrs	r5, r2, #24
 80179a2:	d013      	beq.n	80179cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80179a4:	2dff      	cmp	r5, #255	; 0xff
 80179a6:	ea4f 2412 	mov.w	r4, r2, lsr #8
 80179aa:	d111      	bne.n	80179d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80179ac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80179b0:	d10e      	bne.n	80179d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80179b2:	0953      	lsrs	r3, r2, #5
 80179b4:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80179b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80179bc:	f024 0407 	bic.w	r4, r4, #7
 80179c0:	431c      	orrs	r4, r3
 80179c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80179c6:	4314      	orrs	r4, r2
 80179c8:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 80179cc:	3101      	adds	r1, #1
 80179ce:	e7de      	b.n	801798e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 80179d0:	fb0a f505 	mul.w	r5, sl, r5
 80179d4:	1c6b      	adds	r3, r5, #1
 80179d6:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 80179da:	eb03 2325 	add.w	r3, r3, r5, asr #8
 80179de:	121b      	asrs	r3, r3, #8
 80179e0:	fa1f fe83 	uxth.w	lr, r3
 80179e4:	ea4f 262c 	mov.w	r6, ip, asr #8
 80179e8:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80179ec:	43db      	mvns	r3, r3
 80179ee:	b2db      	uxtb	r3, r3
 80179f0:	fb15 f50e 	smulbb	r5, r5, lr
 80179f4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80179f8:	fb06 5603 	mla	r6, r6, r3, r5
 80179fc:	b2d2      	uxtb	r2, r2
 80179fe:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8017a02:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017a06:	fa5f fc8c 	uxtb.w	ip, ip
 8017a0a:	fb12 f20e 	smulbb	r2, r2, lr
 8017a0e:	fb0c 2203 	mla	r2, ip, r3, r2
 8017a12:	b2e4      	uxtb	r4, r4
 8017a14:	b2b6      	uxth	r6, r6
 8017a16:	fb14 f40e 	smulbb	r4, r4, lr
 8017a1a:	b292      	uxth	r2, r2
 8017a1c:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8017a20:	fb05 4503 	mla	r5, r5, r3, r4
 8017a24:	1c73      	adds	r3, r6, #1
 8017a26:	1c54      	adds	r4, r2, #1
 8017a28:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017a2c:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8017a30:	b2ad      	uxth	r5, r5
 8017a32:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8017a36:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8017a3a:	4326      	orrs	r6, r4
 8017a3c:	1c6c      	adds	r4, r5, #1
 8017a3e:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 8017a42:	0964      	lsrs	r4, r4, #5
 8017a44:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8017a48:	4326      	orrs	r6, r4
 8017a4a:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 8017a4e:	e7bd      	b.n	80179cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	eba3 030b 	sub.w	r3, r3, fp
 8017a5a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017a5e:	4418      	add	r0, r3
 8017a60:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017a64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a66:	eba3 030b 	sub.w	r3, r3, fp
 8017a6a:	4413      	add	r3, r2
 8017a6c:	4499      	add	r9, r3
 8017a6e:	3701      	adds	r7, #1
 8017a70:	e789      	b.n	8017986 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8017a72:	4b06      	ldr	r3, [pc, #24]	; (8017a8c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8017a74:	6818      	ldr	r0, [r3, #0]
 8017a76:	6803      	ldr	r3, [r0, #0]
 8017a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a7a:	4798      	blx	r3
 8017a7c:	e76d      	b.n	801795a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 8017a7e:	bf00      	nop
 8017a80:	08023c45 	.word	0x08023c45
 8017a84:	0802432e 	.word	0x0802432e
 8017a88:	08023d49 	.word	0x08023d49
 8017a8c:	20009efc 	.word	0x20009efc
 8017a90:	20009ef6 	.word	0x20009ef6

08017a94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8017a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a98:	4614      	mov	r4, r2
 8017a9a:	880a      	ldrh	r2, [r1, #0]
 8017a9c:	b093      	sub	sp, #76	; 0x4c
 8017a9e:	2a02      	cmp	r2, #2
 8017aa0:	4606      	mov	r6, r0
 8017aa2:	4689      	mov	r9, r1
 8017aa4:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8017aa8:	d006      	beq.n	8017ab8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8017aaa:	4b7a      	ldr	r3, [pc, #488]	; (8017c94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8017aac:	4a7a      	ldr	r2, [pc, #488]	; (8017c98 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 8017aae:	487b      	ldr	r0, [pc, #492]	; (8017c9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 8017ab0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8017ab4:	f008 fa88 	bl	801ffc8 <__assert_func>
 8017ab8:	2f00      	cmp	r7, #0
 8017aba:	d04b      	beq.n	8017b54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8017abc:	6820      	ldr	r0, [r4, #0]
 8017abe:	6861      	ldr	r1, [r4, #4]
 8017ac0:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8017ca4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 8017ac4:	ad0e      	add	r5, sp, #56	; 0x38
 8017ac6:	c503      	stmia	r5!, {r0, r1}
 8017ac8:	6818      	ldr	r0, [r3, #0]
 8017aca:	6859      	ldr	r1, [r3, #4]
 8017acc:	ad10      	add	r5, sp, #64	; 0x40
 8017ace:	c503      	stmia	r5!, {r0, r1}
 8017ad0:	a80e      	add	r0, sp, #56	; 0x38
 8017ad2:	f7fa fb6f 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ad6:	4621      	mov	r1, r4
 8017ad8:	a810      	add	r0, sp, #64	; 0x40
 8017ada:	f7fa fb53 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ade:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8017ae2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8017ae6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8017aea:	f8da 0000 	ldr.w	r0, [sl]
 8017aee:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 8017af2:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 8017af6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017afa:	1874      	adds	r4, r6, r1
 8017afc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8017b00:	4e67      	ldr	r6, [pc, #412]	; (8017ca0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 8017b02:	440a      	add	r2, r1
 8017b04:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017b08:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017b0c:	4413      	add	r3, r2
 8017b0e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017b12:	6803      	ldr	r3, [r0, #0]
 8017b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017b18:	4798      	blx	r3
 8017b1a:	2801      	cmp	r0, #1
 8017b1c:	d11d      	bne.n	8017b5a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 8017b1e:	2200      	movs	r2, #0
 8017b20:	210b      	movs	r1, #11
 8017b22:	e9cd 1207 	strd	r1, r2, [sp, #28]
 8017b26:	8831      	ldrh	r1, [r6, #0]
 8017b28:	9704      	str	r7, [sp, #16]
 8017b2a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8017b2e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017b32:	9203      	str	r2, [sp, #12]
 8017b34:	fa1f f288 	uxth.w	r2, r8
 8017b38:	9202      	str	r2, [sp, #8]
 8017b3a:	b2ad      	uxth	r5, r5
 8017b3c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017b40:	9200      	str	r2, [sp, #0]
 8017b42:	9501      	str	r5, [sp, #4]
 8017b44:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017b48:	f8da 0000 	ldr.w	r0, [sl]
 8017b4c:	464a      	mov	r2, r9
 8017b4e:	4621      	mov	r1, r4
 8017b50:	f7f8 ff3e 	bl	80109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017b54:	b013      	add	sp, #76	; 0x4c
 8017b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b5a:	f8da 0000 	ldr.w	r0, [sl]
 8017b5e:	6803      	ldr	r3, [r0, #0]
 8017b60:	6a1b      	ldr	r3, [r3, #32]
 8017b62:	4798      	blx	r3
 8017b64:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8017b68:	8833      	ldrh	r3, [r6, #0]
 8017b6a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017b6e:	fb01 2303 	mla	r3, r1, r3, r2
 8017b72:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017b76:	2fff      	cmp	r7, #255	; 0xff
 8017b78:	f109 0304 	add.w	r3, r9, #4
 8017b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8017b7e:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8017b82:	d111      	bne.n	8017ba8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 8017b84:	b212      	sxth	r2, r2
 8017b86:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8017b8a:	2100      	movs	r1, #0
 8017b8c:	4541      	cmp	r1, r8
 8017b8e:	da7a      	bge.n	8017c86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8017b90:	2300      	movs	r3, #0
 8017b92:	42ab      	cmp	r3, r5
 8017b94:	da6b      	bge.n	8017c6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8017b96:	f814 c003 	ldrb.w	ip, [r4, r3]
 8017b9a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017b9c:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 8017ba0:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	e7f4      	b.n	8017b92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 8017ba8:	b213      	sxth	r3, r2
 8017baa:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8017bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8017bb0:	005b      	lsls	r3, r3, #1
 8017bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8017bb4:	f04f 0900 	mov.w	r9, #0
 8017bb8:	b2ba      	uxth	r2, r7
 8017bba:	fa1f fc8c 	uxth.w	ip, ip
 8017bbe:	960d      	str	r6, [sp, #52]	; 0x34
 8017bc0:	45c1      	cmp	r9, r8
 8017bc2:	da60      	bge.n	8017c86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8017bc4:	46a3      	mov	fp, r4
 8017bc6:	4682      	mov	sl, r0
 8017bc8:	ebab 0304 	sub.w	r3, fp, r4
 8017bcc:	429d      	cmp	r5, r3
 8017bce:	dd3e      	ble.n	8017c4e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 8017bd0:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8017bd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017bd6:	f8ba 1000 	ldrh.w	r1, [sl]
 8017bda:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8017bde:	120e      	asrs	r6, r1, #8
 8017be0:	121f      	asrs	r7, r3, #8
 8017be2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017be6:	fb16 f60c 	smulbb	r6, r6, ip
 8017bea:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 8017bee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017bf2:	00c9      	lsls	r1, r1, #3
 8017bf4:	fb07 6702 	mla	r7, r7, r2, r6
 8017bf8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8017bfc:	10de      	asrs	r6, r3, #3
 8017bfe:	b2c9      	uxtb	r1, r1
 8017c00:	00db      	lsls	r3, r3, #3
 8017c02:	fb1e fe0c 	smulbb	lr, lr, ip
 8017c06:	fb11 f10c 	smulbb	r1, r1, ip
 8017c0a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017c0e:	b2db      	uxtb	r3, r3
 8017c10:	b2bf      	uxth	r7, r7
 8017c12:	fb06 e602 	mla	r6, r6, r2, lr
 8017c16:	fb03 1302 	mla	r3, r3, r2, r1
 8017c1a:	b2b6      	uxth	r6, r6
 8017c1c:	b29b      	uxth	r3, r3
 8017c1e:	1c79      	adds	r1, r7, #1
 8017c20:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8017c24:	f106 0e01 	add.w	lr, r6, #1
 8017c28:	1c59      	adds	r1, r3, #1
 8017c2a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8017c2e:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8017c32:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017c36:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8017c3a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8017c3e:	430f      	orrs	r7, r1
 8017c40:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8017c44:	ea47 070e 	orr.w	r7, r7, lr
 8017c48:	f82a 7b02 	strh.w	r7, [sl], #2
 8017c4c:	e7bc      	b.n	8017bc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 8017c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017c52:	881b      	ldrh	r3, [r3, #0]
 8017c54:	1b5b      	subs	r3, r3, r5
 8017c56:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017c5a:	4418      	add	r0, r3
 8017c5c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017c62:	1b5b      	subs	r3, r3, r5
 8017c64:	440b      	add	r3, r1
 8017c66:	441c      	add	r4, r3
 8017c68:	f109 0901 	add.w	r9, r9, #1
 8017c6c:	e7a8      	b.n	8017bc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 8017c6e:	8833      	ldrh	r3, [r6, #0]
 8017c70:	1b5b      	subs	r3, r3, r5
 8017c72:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8017c76:	4418      	add	r0, r3
 8017c78:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017c7c:	1b5b      	subs	r3, r3, r5
 8017c7e:	4413      	add	r3, r2
 8017c80:	441c      	add	r4, r3
 8017c82:	3101      	adds	r1, #1
 8017c84:	e782      	b.n	8017b8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8017c86:	4b07      	ldr	r3, [pc, #28]	; (8017ca4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 8017c88:	6818      	ldr	r0, [r3, #0]
 8017c8a:	6803      	ldr	r3, [r0, #0]
 8017c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c8e:	4798      	blx	r3
 8017c90:	e760      	b.n	8017b54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8017c92:	bf00      	nop
 8017c94:	08023b03 	.word	0x08023b03
 8017c98:	08024198 	.word	0x08024198
 8017c9c:	08023d49 	.word	0x08023d49
 8017ca0:	20009ef6 	.word	0x20009ef6
 8017ca4:	20009efc 	.word	0x20009efc

08017ca8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cac:	4616      	mov	r6, r2
 8017cae:	880a      	ldrh	r2, [r1, #0]
 8017cb0:	b093      	sub	sp, #76	; 0x4c
 8017cb2:	2a01      	cmp	r2, #1
 8017cb4:	4681      	mov	r9, r0
 8017cb6:	4688      	mov	r8, r1
 8017cb8:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8017cbc:	d006      	beq.n	8017ccc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 8017cbe:	4b6c      	ldr	r3, [pc, #432]	; (8017e70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017cc0:	4a6c      	ldr	r2, [pc, #432]	; (8017e74 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8017cc2:	486d      	ldr	r0, [pc, #436]	; (8017e78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8017cc4:	f240 11a1 	movw	r1, #417	; 0x1a1
 8017cc8:	f008 f97e 	bl	801ffc8 <__assert_func>
 8017ccc:	f1ba 0f00 	cmp.w	sl, #0
 8017cd0:	d04a      	beq.n	8017d68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8017cd2:	6830      	ldr	r0, [r6, #0]
 8017cd4:	6871      	ldr	r1, [r6, #4]
 8017cd6:	4d69      	ldr	r5, [pc, #420]	; (8017e7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8017cd8:	ac0e      	add	r4, sp, #56	; 0x38
 8017cda:	c403      	stmia	r4!, {r0, r1}
 8017cdc:	6818      	ldr	r0, [r3, #0]
 8017cde:	6859      	ldr	r1, [r3, #4]
 8017ce0:	ac10      	add	r4, sp, #64	; 0x40
 8017ce2:	c403      	stmia	r4!, {r0, r1}
 8017ce4:	a80e      	add	r0, sp, #56	; 0x38
 8017ce6:	f7fa fa65 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017cea:	4631      	mov	r1, r6
 8017cec:	a810      	add	r0, sp, #64	; 0x40
 8017cee:	f7fa fa49 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017cf2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8017cf6:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8017cfa:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8017cfe:	6828      	ldr	r0, [r5, #0]
 8017d00:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 8017d04:	4c5e      	ldr	r4, [pc, #376]	; (8017e80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8017d06:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017d0a:	4489      	add	r9, r1
 8017d0c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8017d10:	440a      	add	r2, r1
 8017d12:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8017d16:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017d1a:	4413      	add	r3, r2
 8017d1c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8017d20:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 8017d24:	930a      	str	r3, [sp, #40]	; 0x28
 8017d26:	6803      	ldr	r3, [r0, #0]
 8017d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017d2c:	4798      	blx	r3
 8017d2e:	2801      	cmp	r0, #1
 8017d30:	d11d      	bne.n	8017d6e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 8017d32:	220b      	movs	r2, #11
 8017d34:	2100      	movs	r1, #0
 8017d36:	e9cd 2107 	strd	r2, r1, [sp, #28]
 8017d3a:	8822      	ldrh	r2, [r4, #0]
 8017d3c:	f8cd a010 	str.w	sl, [sp, #16]
 8017d40:	e9cd 0205 	strd	r0, r2, [sp, #20]
 8017d44:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8017d48:	9203      	str	r2, [sp, #12]
 8017d4a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8017d4e:	9202      	str	r2, [sp, #8]
 8017d50:	b2b6      	uxth	r6, r6
 8017d52:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8017d56:	9200      	str	r2, [sp, #0]
 8017d58:	9601      	str	r6, [sp, #4]
 8017d5a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017d5e:	6828      	ldr	r0, [r5, #0]
 8017d60:	4642      	mov	r2, r8
 8017d62:	4649      	mov	r1, r9
 8017d64:	f7f8 fe34 	bl	80109d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8017d68:	b013      	add	sp, #76	; 0x4c
 8017d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d6e:	6828      	ldr	r0, [r5, #0]
 8017d70:	6803      	ldr	r3, [r0, #0]
 8017d72:	6a1b      	ldr	r3, [r3, #32]
 8017d74:	4798      	blx	r3
 8017d76:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8017d7a:	8823      	ldrh	r3, [r4, #0]
 8017d7c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8017d80:	940d      	str	r4, [sp, #52]	; 0x34
 8017d82:	fb01 2303 	mla	r3, r1, r3, r2
 8017d86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017d8a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8017d8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d90:	ea6f 010a 	mvn.w	r1, sl
 8017d94:	005b      	lsls	r3, r3, #1
 8017d96:	930c      	str	r3, [sp, #48]	; 0x30
 8017d98:	f04f 0e00 	mov.w	lr, #0
 8017d9c:	b2c9      	uxtb	r1, r1
 8017d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017da0:	459e      	cmp	lr, r3
 8017da2:	da5f      	bge.n	8017e64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8017da4:	2700      	movs	r7, #0
 8017da6:	fa1f fb8a 	uxth.w	fp, sl
 8017daa:	42b7      	cmp	r7, r6
 8017dac:	da4a      	bge.n	8017e44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 8017dae:	f819 3007 	ldrb.w	r3, [r9, r7]
 8017db2:	2203      	movs	r2, #3
 8017db4:	2404      	movs	r4, #4
 8017db6:	fb12 4303 	smlabb	r3, r2, r3, r4
 8017dba:	eb08 0403 	add.w	r4, r8, r3
 8017dbe:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8017dc2:	78a2      	ldrb	r2, [r4, #2]
 8017dc4:	7865      	ldrb	r5, [r4, #1]
 8017dc6:	f818 c003 	ldrb.w	ip, [r8, r3]
 8017dca:	d10c      	bne.n	8017de6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 8017dcc:	4b2d      	ldr	r3, [pc, #180]	; (8017e84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8017dce:	00ed      	lsls	r5, r5, #3
 8017dd0:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8017dd4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017dd8:	432a      	orrs	r2, r5
 8017dda:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 8017dde:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 8017de2:	3701      	adds	r7, #1
 8017de4:	e7e1      	b.n	8017daa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 8017de6:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 8017dea:	121c      	asrs	r4, r3, #8
 8017dec:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8017df0:	fb12 f20b 	smulbb	r2, r2, fp
 8017df4:	fb04 2201 	mla	r2, r4, r1, r2
 8017df8:	10dc      	asrs	r4, r3, #3
 8017dfa:	00db      	lsls	r3, r3, #3
 8017dfc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	fb15 f50b 	smulbb	r5, r5, fp
 8017e06:	fb1c fc0b 	smulbb	ip, ip, fp
 8017e0a:	b292      	uxth	r2, r2
 8017e0c:	fb04 5501 	mla	r5, r4, r1, r5
 8017e10:	fb03 cc01 	mla	ip, r3, r1, ip
 8017e14:	b2ad      	uxth	r5, r5
 8017e16:	fa1f fc8c 	uxth.w	ip, ip
 8017e1a:	1c53      	adds	r3, r2, #1
 8017e1c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8017e20:	1c6c      	adds	r4, r5, #1
 8017e22:	f10c 0301 	add.w	r3, ip, #1
 8017e26:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017e2a:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 8017e2e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8017e32:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8017e36:	096d      	lsrs	r5, r5, #5
 8017e38:	ea42 020c 	orr.w	r2, r2, ip
 8017e3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8017e40:	432a      	orrs	r2, r5
 8017e42:	e7cc      	b.n	8017dde <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 8017e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e48:	881b      	ldrh	r3, [r3, #0]
 8017e4a:	1b9b      	subs	r3, r3, r6
 8017e4c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017e50:	4418      	add	r0, r3
 8017e52:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017e56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017e58:	1b9b      	subs	r3, r3, r6
 8017e5a:	4413      	add	r3, r2
 8017e5c:	4499      	add	r9, r3
 8017e5e:	f10e 0e01 	add.w	lr, lr, #1
 8017e62:	e79c      	b.n	8017d9e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 8017e64:	4b05      	ldr	r3, [pc, #20]	; (8017e7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8017e66:	6818      	ldr	r0, [r3, #0]
 8017e68:	6803      	ldr	r3, [r0, #0]
 8017e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e6c:	4798      	blx	r3
 8017e6e:	e77b      	b.n	8017d68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8017e70:	08023b51 	.word	0x08023b51
 8017e74:	08024221 	.word	0x08024221
 8017e78:	08023d49 	.word	0x08023d49
 8017e7c:	20009efc 	.word	0x20009efc
 8017e80:	20009ef6 	.word	0x20009ef6
 8017e84:	fffff800 	.word	0xfffff800

08017e88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8017e88:	b430      	push	{r4, r5}
 8017e8a:	780d      	ldrb	r5, [r1, #0]
 8017e8c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8017e90:	2d01      	cmp	r5, #1
 8017e92:	d00a      	beq.n	8017eaa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8017e94:	d305      	bcc.n	8017ea2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8017e96:	2d02      	cmp	r5, #2
 8017e98:	d10b      	bne.n	8017eb2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8017e9a:	9402      	str	r4, [sp, #8]
 8017e9c:	bc30      	pop	{r4, r5}
 8017e9e:	f7ff bdf9 	b.w	8017a94 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8017ea2:	9402      	str	r4, [sp, #8]
 8017ea4:	bc30      	pop	{r4, r5}
 8017ea6:	f7ff bcfd 	b.w	80178a4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8017eaa:	9402      	str	r4, [sp, #8]
 8017eac:	bc30      	pop	{r4, r5}
 8017eae:	f7ff befb 	b.w	8017ca8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8017eb2:	bc30      	pop	{r4, r5}
 8017eb4:	4770      	bx	lr
	...

08017eb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8017eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ebc:	4605      	mov	r5, r0
 8017ebe:	b089      	sub	sp, #36	; 0x24
 8017ec0:	6810      	ldr	r0, [r2, #0]
 8017ec2:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8017ec6:	460c      	mov	r4, r1
 8017ec8:	6851      	ldr	r1, [r2, #4]
 8017eca:	ae04      	add	r6, sp, #16
 8017ecc:	c603      	stmia	r6!, {r0, r1}
 8017ece:	6818      	ldr	r0, [r3, #0]
 8017ed0:	6859      	ldr	r1, [r3, #4]
 8017ed2:	ae06      	add	r6, sp, #24
 8017ed4:	4617      	mov	r7, r2
 8017ed6:	c603      	stmia	r6!, {r0, r1}
 8017ed8:	a804      	add	r0, sp, #16
 8017eda:	f7fa f96b 	bl	80121b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ede:	4639      	mov	r1, r7
 8017ee0:	a806      	add	r0, sp, #24
 8017ee2:	f7fa f94f 	bl	8012184 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ee6:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8017eea:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017eee:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8017ef2:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8017ef6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017efa:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8017efe:	440c      	add	r4, r1
 8017f00:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017f04:	440a      	add	r2, r1
 8017f06:	f8ad 2018 	strh.w	r2, [sp, #24]
 8017f0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8017f0e:	4413      	add	r3, r2
 8017f10:	f8ad 301a 	strh.w	r3, [sp, #26]
 8017f14:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8017f18:	9300      	str	r3, [sp, #0]
 8017f1a:	4b80      	ldr	r3, [pc, #512]	; (801811c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 8017f1c:	6818      	ldr	r0, [r3, #0]
 8017f1e:	6803      	ldr	r3, [r0, #0]
 8017f20:	6a1b      	ldr	r3, [r3, #32]
 8017f22:	4798      	blx	r3
 8017f24:	4b7e      	ldr	r3, [pc, #504]	; (8018120 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 8017f26:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8017f2a:	881a      	ldrh	r2, [r3, #0]
 8017f2c:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8017f30:	fb06 1202 	mla	r2, r6, r2, r1
 8017f34:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8017f38:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017f3c:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 8017f40:	b212      	sxth	r2, r2
 8017f42:	d117      	bne.n	8017f74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 8017f44:	9201      	str	r2, [sp, #4]
 8017f46:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8017f4a:	f04f 0a00 	mov.w	sl, #0
 8017f4e:	9302      	str	r3, [sp, #8]
 8017f50:	9b00      	ldr	r3, [sp, #0]
 8017f52:	459a      	cmp	sl, r3
 8017f54:	f280 80d9 	bge.w	801810a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8017f58:	2100      	movs	r1, #0
 8017f5a:	4541      	cmp	r1, r8
 8017f5c:	f280 80c1 	bge.w	80180e2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 8017f60:	5c63      	ldrb	r3, [r4, r1]
 8017f62:	b12b      	cbz	r3, 8017f70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 8017f64:	2bff      	cmp	r3, #255	; 0xff
 8017f66:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 8017f6a:	d176      	bne.n	801805a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 8017f6c:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 8017f70:	3101      	adds	r1, #1
 8017f72:	e7f2      	b.n	8017f5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 8017f74:	9202      	str	r2, [sp, #8]
 8017f76:	0052      	lsls	r2, r2, #1
 8017f78:	9201      	str	r2, [sp, #4]
 8017f7a:	f04f 0b00 	mov.w	fp, #0
 8017f7e:	9303      	str	r3, [sp, #12]
 8017f80:	9b00      	ldr	r3, [sp, #0]
 8017f82:	459b      	cmp	fp, r3
 8017f84:	f280 80c1 	bge.w	801810a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8017f88:	f04f 0c00 	mov.w	ip, #0
 8017f8c:	45c4      	cmp	ip, r8
 8017f8e:	da4f      	bge.n	8018030 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 8017f90:	f814 300c 	ldrb.w	r3, [r4, ip]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d048      	beq.n	801802a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8017f98:	fb09 f303 	mul.w	r3, r9, r3
 8017f9c:	1c5a      	adds	r2, r3, #1
 8017f9e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017fa2:	121b      	asrs	r3, r3, #8
 8017fa4:	d041      	beq.n	801802a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8017fa6:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8017faa:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 8017fae:	b29e      	uxth	r6, r3
 8017fb0:	1211      	asrs	r1, r2, #8
 8017fb2:	43db      	mvns	r3, r3
 8017fb4:	b2db      	uxtb	r3, r3
 8017fb6:	ea4f 272e 	mov.w	r7, lr, asr #8
 8017fba:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8017fbe:	fb11 f103 	smulbb	r1, r1, r3
 8017fc2:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8017fc6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017fca:	00d2      	lsls	r2, r2, #3
 8017fcc:	fb07 1706 	mla	r7, r7, r6, r1
 8017fd0:	b2d2      	uxtb	r2, r2
 8017fd2:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8017fd6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017fda:	fb12 f203 	smulbb	r2, r2, r3
 8017fde:	fa5f fe8e 	uxtb.w	lr, lr
 8017fe2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8017fe6:	fb0e 2206 	mla	r2, lr, r6, r2
 8017fea:	fb1a fa03 	smulbb	sl, sl, r3
 8017fee:	b2bf      	uxth	r7, r7
 8017ff0:	b292      	uxth	r2, r2
 8017ff2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8017ff6:	fb01 a106 	mla	r1, r1, r6, sl
 8017ffa:	1c7b      	adds	r3, r7, #1
 8017ffc:	f102 0a01 	add.w	sl, r2, #1
 8018000:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8018004:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 8018008:	b289      	uxth	r1, r1
 801800a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801800e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018012:	ea47 070a 	orr.w	r7, r7, sl
 8018016:	f101 0a01 	add.w	sl, r1, #1
 801801a:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 801801e:	0949      	lsrs	r1, r1, #5
 8018020:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8018024:	430f      	orrs	r7, r1
 8018026:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 801802a:	f10c 0c01 	add.w	ip, ip, #1
 801802e:	e7ad      	b.n	8017f8c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 8018030:	9b03      	ldr	r3, [sp, #12]
 8018032:	9a01      	ldr	r2, [sp, #4]
 8018034:	881b      	ldrh	r3, [r3, #0]
 8018036:	eba3 0308 	sub.w	r3, r3, r8
 801803a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801803e:	4418      	add	r0, r3
 8018040:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018044:	eba3 0308 	sub.w	r3, r3, r8
 8018048:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801804c:	4415      	add	r5, r2
 801804e:	9a02      	ldr	r2, [sp, #8]
 8018050:	4413      	add	r3, r2
 8018052:	441c      	add	r4, r3
 8018054:	f10b 0b01 	add.w	fp, fp, #1
 8018058:	e792      	b.n	8017f80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 801805a:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801805e:	b29f      	uxth	r7, r3
 8018060:	1216      	asrs	r6, r2, #8
 8018062:	43db      	mvns	r3, r3
 8018064:	b2db      	uxtb	r3, r3
 8018066:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801806a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801806e:	fb16 f603 	smulbb	r6, r6, r3
 8018072:	ea4f 09e2 	mov.w	r9, r2, asr #3
 8018076:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801807a:	00d2      	lsls	r2, r2, #3
 801807c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018080:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8018084:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018088:	b2d2      	uxtb	r2, r2
 801808a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801808e:	fa1f fc8c 	uxth.w	ip, ip
 8018092:	fb19 f903 	smulbb	r9, r9, r3
 8018096:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801809a:	fa5f fe8e 	uxtb.w	lr, lr
 801809e:	fb12 f203 	smulbb	r2, r2, r3
 80180a2:	fb06 9607 	mla	r6, r6, r7, r9
 80180a6:	fb0e 2207 	mla	r2, lr, r7, r2
 80180aa:	f10c 0901 	add.w	r9, ip, #1
 80180ae:	b292      	uxth	r2, r2
 80180b0:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80180b4:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80180b8:	f102 0c01 	add.w	ip, r2, #1
 80180bc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80180c0:	b2b6      	uxth	r6, r6
 80180c2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80180c6:	ea49 0c02 	orr.w	ip, r9, r2
 80180ca:	f106 0901 	add.w	r9, r6, #1
 80180ce:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 80180d2:	0976      	lsrs	r6, r6, #5
 80180d4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80180d8:	ea4c 0c06 	orr.w	ip, ip, r6
 80180dc:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 80180e0:	e746      	b.n	8017f70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 80180e2:	9b02      	ldr	r3, [sp, #8]
 80180e4:	881b      	ldrh	r3, [r3, #0]
 80180e6:	eba3 0308 	sub.w	r3, r3, r8
 80180ea:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80180ee:	4418      	add	r0, r3
 80180f0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80180f4:	eba3 0308 	sub.w	r3, r3, r8
 80180f8:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 80180fc:	4415      	add	r5, r2
 80180fe:	9a01      	ldr	r2, [sp, #4]
 8018100:	4413      	add	r3, r2
 8018102:	441c      	add	r4, r3
 8018104:	f10a 0a01 	add.w	sl, sl, #1
 8018108:	e722      	b.n	8017f50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 801810a:	4b04      	ldr	r3, [pc, #16]	; (801811c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 801810c:	6818      	ldr	r0, [r3, #0]
 801810e:	6803      	ldr	r3, [r0, #0]
 8018110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018112:	4798      	blx	r3
 8018114:	b009      	add	sp, #36	; 0x24
 8018116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801811a:	bf00      	nop
 801811c:	20009efc 	.word	0x20009efc
 8018120:	20009ef6 	.word	0x20009ef6

08018124 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8018124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018128:	b089      	sub	sp, #36	; 0x24
 801812a:	4682      	mov	sl, r0
 801812c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8018130:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018132:	460d      	mov	r5, r1
 8018134:	4691      	mov	r9, r2
 8018136:	4698      	mov	r8, r3
 8018138:	b3ae      	cbz	r6, 80181a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801813a:	4608      	mov	r0, r1
 801813c:	f7fc fa8c 	bl	8014658 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018140:	4607      	mov	r7, r0
 8018142:	4628      	mov	r0, r5
 8018144:	f7fc fac2 	bl	80146cc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018148:	f8ad 000e 	strh.w	r0, [sp, #14]
 801814c:	4628      	mov	r0, r5
 801814e:	f8ad 9008 	strh.w	r9, [sp, #8]
 8018152:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018156:	f8ad 700c 	strh.w	r7, [sp, #12]
 801815a:	f7fc fc09 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801815e:	b178      	cbz	r0, 8018180 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018160:	4628      	mov	r0, r5
 8018162:	f7fc fc05 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018166:	2802      	cmp	r0, #2
 8018168:	d00a      	beq.n	8018180 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801816a:	4628      	mov	r0, r5
 801816c:	f7fc fc00 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018170:	280b      	cmp	r0, #11
 8018172:	d005      	beq.n	8018180 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018174:	4b69      	ldr	r3, [pc, #420]	; (801831c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8018176:	4a6a      	ldr	r2, [pc, #424]	; (8018320 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8018178:	486a      	ldr	r0, [pc, #424]	; (8018324 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 801817a:	214f      	movs	r1, #79	; 0x4f
 801817c:	f007 ff24 	bl	801ffc8 <__assert_func>
 8018180:	4628      	mov	r0, r5
 8018182:	f7fc fb71 	bl	8014868 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018186:	4607      	mov	r7, r0
 8018188:	4628      	mov	r0, r5
 801818a:	f7fc fb9f 	bl	80148cc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801818e:	4681      	mov	r9, r0
 8018190:	4628      	mov	r0, r5
 8018192:	f7fc fbed 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018196:	2802      	cmp	r0, #2
 8018198:	d108      	bne.n	80181ac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801819a:	4633      	mov	r3, r6
 801819c:	4622      	mov	r2, r4
 801819e:	a902      	add	r1, sp, #8
 80181a0:	4638      	mov	r0, r7
 80181a2:	f7ff fa6d 	bl	8017680 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80181a6:	b009      	add	sp, #36	; 0x24
 80181a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ac:	4628      	mov	r0, r5
 80181ae:	f7fc fbdf 	bl	8014970 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80181b2:	280b      	cmp	r0, #11
 80181b4:	d107      	bne.n	80181c6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 80181b6:	9600      	str	r6, [sp, #0]
 80181b8:	4623      	mov	r3, r4
 80181ba:	aa02      	add	r2, sp, #8
 80181bc:	4649      	mov	r1, r9
 80181be:	4638      	mov	r0, r7
 80181c0:	f7ff fe62 	bl	8017e88 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80181c4:	e7ef      	b.n	80181a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80181c6:	4628      	mov	r0, r5
 80181c8:	f7fc fb14 	bl	80147f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80181cc:	b950      	cbnz	r0, 80181e4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 80181ce:	e9cd 6000 	strd	r6, r0, [sp]
 80181d2:	f8da 3000 	ldr.w	r3, [sl]
 80181d6:	aa02      	add	r2, sp, #8
 80181d8:	691d      	ldr	r5, [r3, #16]
 80181da:	4639      	mov	r1, r7
 80181dc:	4623      	mov	r3, r4
 80181de:	4650      	mov	r0, sl
 80181e0:	47a8      	blx	r5
 80181e2:	e7e0      	b.n	80181a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80181e4:	f10d 0818 	add.w	r8, sp, #24
 80181e8:	4629      	mov	r1, r5
 80181ea:	4640      	mov	r0, r8
 80181ec:	f7fc faa8 	bl	8014740 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80181f0:	e898 0003 	ldmia.w	r8, {r0, r1}
 80181f4:	ad04      	add	r5, sp, #16
 80181f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80181fa:	4628      	mov	r0, r5
 80181fc:	4621      	mov	r1, r4
 80181fe:	f7f7 ff9d 	bl	801013c <_ZN8touchgfx4RectaNERKS0_>
 8018202:	4628      	mov	r0, r5
 8018204:	f7f7 ffde 	bl	80101c4 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018208:	b138      	cbz	r0, 801821a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 801820a:	9600      	str	r6, [sp, #0]
 801820c:	4623      	mov	r3, r4
 801820e:	aa02      	add	r2, sp, #8
 8018210:	4649      	mov	r1, r9
 8018212:	4638      	mov	r0, r7
 8018214:	f7ff fe50 	bl	8017eb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018218:	e7c5      	b.n	80181a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 801821a:	e9cd 6000 	strd	r6, r0, [sp]
 801821e:	f8da 3000 	ldr.w	r3, [sl]
 8018222:	aa02      	add	r2, sp, #8
 8018224:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8018228:	4639      	mov	r1, r7
 801822a:	462b      	mov	r3, r5
 801822c:	4650      	mov	r0, sl
 801822e:	47d8      	blx	fp
 8018230:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8018234:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018238:	4293      	cmp	r3, r2
 801823a:	dd13      	ble.n	8018264 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 801823c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018240:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018244:	f8ad 0018 	strh.w	r0, [sp, #24]
 8018248:	1a9b      	subs	r3, r3, r2
 801824a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801824e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018252:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018256:	9600      	str	r6, [sp, #0]
 8018258:	4643      	mov	r3, r8
 801825a:	aa02      	add	r2, sp, #8
 801825c:	4649      	mov	r1, r9
 801825e:	4638      	mov	r0, r7
 8018260:	f7ff fe2a 	bl	8017eb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018264:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8018268:	f9b4 2000 	ldrsh.w	r2, [r4]
 801826c:	4293      	cmp	r3, r2
 801826e:	dd13      	ble.n	8018298 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8018270:	1a9b      	subs	r3, r3, r2
 8018272:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8018276:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801827a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801827e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8018282:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018286:	f8ad 101e 	strh.w	r1, [sp, #30]
 801828a:	9600      	str	r6, [sp, #0]
 801828c:	4643      	mov	r3, r8
 801828e:	aa02      	add	r2, sp, #8
 8018290:	4649      	mov	r1, r9
 8018292:	4638      	mov	r0, r7
 8018294:	f7ff fe10 	bl	8017eb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8018298:	88a2      	ldrh	r2, [r4, #4]
 801829a:	8823      	ldrh	r3, [r4, #0]
 801829c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80182a0:	4413      	add	r3, r2
 80182a2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80182a6:	440a      	add	r2, r1
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	b292      	uxth	r2, r2
 80182ac:	b211      	sxth	r1, r2
 80182ae:	b218      	sxth	r0, r3
 80182b0:	4288      	cmp	r0, r1
 80182b2:	dd13      	ble.n	80182dc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 80182b4:	1a9b      	subs	r3, r3, r2
 80182b6:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80182ba:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80182be:	f8ad 1018 	strh.w	r1, [sp, #24]
 80182c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182c6:	f8ad 001e 	strh.w	r0, [sp, #30]
 80182ca:	9600      	str	r6, [sp, #0]
 80182cc:	4643      	mov	r3, r8
 80182ce:	aa02      	add	r2, sp, #8
 80182d0:	4649      	mov	r1, r9
 80182d2:	4638      	mov	r0, r7
 80182d4:	f8ad 501a 	strh.w	r5, [sp, #26]
 80182d8:	f7ff fdee 	bl	8017eb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80182dc:	88e2      	ldrh	r2, [r4, #6]
 80182de:	8863      	ldrh	r3, [r4, #2]
 80182e0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80182e4:	4413      	add	r3, r2
 80182e6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80182ea:	440a      	add	r2, r1
 80182ec:	b29b      	uxth	r3, r3
 80182ee:	b292      	uxth	r2, r2
 80182f0:	b211      	sxth	r1, r2
 80182f2:	b218      	sxth	r0, r3
 80182f4:	4288      	cmp	r0, r1
 80182f6:	f77f af56 	ble.w	80181a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80182fa:	f9b4 5000 	ldrsh.w	r5, [r4]
 80182fe:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018302:	f8ad 5018 	strh.w	r5, [sp, #24]
 8018306:	1a9b      	subs	r3, r3, r2
 8018308:	f8ad 301e 	strh.w	r3, [sp, #30]
 801830c:	f8ad 101a 	strh.w	r1, [sp, #26]
 8018310:	f8ad 001c 	strh.w	r0, [sp, #28]
 8018314:	9600      	str	r6, [sp, #0]
 8018316:	4643      	mov	r3, r8
 8018318:	e779      	b.n	801820e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 801831a:	bf00      	nop
 801831c:	08023b9f 	.word	0x08023b9f
 8018320:	080242aa 	.word	0x080242aa
 8018324:	08023d49 	.word	0x08023d49

08018328 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8018328:	b508      	push	{r3, lr}
 801832a:	b180      	cbz	r0, 801834e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 801832c:	2902      	cmp	r1, #2
 801832e:	d014      	beq.n	801835a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8018330:	2903      	cmp	r1, #3
 8018332:	d01d      	beq.n	8018370 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8018334:	2901      	cmp	r1, #1
 8018336:	d101      	bne.n	801833c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8018338:	2001      	movs	r0, #1
 801833a:	bd08      	pop	{r3, pc}
 801833c:	4b0e      	ldr	r3, [pc, #56]	; (8018378 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801833e:	8818      	ldrh	r0, [r3, #0]
 8018340:	b990      	cbnz	r0, 8018368 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8018342:	4b0e      	ldr	r3, [pc, #56]	; (801837c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8018344:	4a0e      	ldr	r2, [pc, #56]	; (8018380 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8018346:	480f      	ldr	r0, [pc, #60]	; (8018384 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8018348:	21d7      	movs	r1, #215	; 0xd7
 801834a:	f007 fe3d 	bl	801ffc8 <__assert_func>
 801834e:	2902      	cmp	r1, #2
 8018350:	d00e      	beq.n	8018370 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8018352:	2903      	cmp	r1, #3
 8018354:	d0f2      	beq.n	801833c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8018356:	2901      	cmp	r1, #1
 8018358:	d1ee      	bne.n	8018338 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 801835a:	4b07      	ldr	r3, [pc, #28]	; (8018378 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801835c:	8818      	ldrh	r0, [r3, #0]
 801835e:	2800      	cmp	r0, #0
 8018360:	d0ef      	beq.n	8018342 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8018362:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8018366:	e7e8      	b.n	801833a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8018368:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801836c:	4240      	negs	r0, r0
 801836e:	e7e4      	b.n	801833a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8018370:	f04f 30ff 	mov.w	r0, #4294967295
 8018374:	e7e1      	b.n	801833a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8018376:	bf00      	nop
 8018378:	20009ef6 	.word	0x20009ef6
 801837c:	08023ea3 	.word	0x08023ea3
 8018380:	08024427 	.word	0x08024427
 8018384:	08023ee5 	.word	0x08023ee5

08018388 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8018388:	b508      	push	{r3, lr}
 801838a:	b180      	cbz	r0, 80183ae <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 801838c:	2902      	cmp	r1, #2
 801838e:	d014      	beq.n	80183ba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8018390:	2903      	cmp	r1, #3
 8018392:	d018      	beq.n	80183c6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8018394:	2901      	cmp	r1, #1
 8018396:	d001      	beq.n	801839c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8018398:	2001      	movs	r0, #1
 801839a:	e013      	b.n	80183c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 801839c:	4b0e      	ldr	r3, [pc, #56]	; (80183d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801839e:	8818      	ldrh	r0, [r3, #0]
 80183a0:	b970      	cbnz	r0, 80183c0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 80183a2:	4b0e      	ldr	r3, [pc, #56]	; (80183dc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 80183a4:	4a0e      	ldr	r2, [pc, #56]	; (80183e0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 80183a6:	480f      	ldr	r0, [pc, #60]	; (80183e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 80183a8:	21d7      	movs	r1, #215	; 0xd7
 80183aa:	f007 fe0d 	bl	801ffc8 <__assert_func>
 80183ae:	2902      	cmp	r1, #2
 80183b0:	d009      	beq.n	80183c6 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 80183b2:	2903      	cmp	r1, #3
 80183b4:	d0f0      	beq.n	8018398 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 80183b6:	2901      	cmp	r1, #1
 80183b8:	d1f0      	bne.n	801839c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 80183ba:	f04f 30ff 	mov.w	r0, #4294967295
 80183be:	e001      	b.n	80183c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80183c0:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80183c4:	bd08      	pop	{r3, pc}
 80183c6:	4b04      	ldr	r3, [pc, #16]	; (80183d8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 80183c8:	8818      	ldrh	r0, [r3, #0]
 80183ca:	2800      	cmp	r0, #0
 80183cc:	d0e9      	beq.n	80183a2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 80183ce:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80183d2:	4240      	negs	r0, r0
 80183d4:	e7f6      	b.n	80183c4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 80183d6:	bf00      	nop
 80183d8:	20009ef6 	.word	0x20009ef6
 80183dc:	08023ea3 	.word	0x08023ea3
 80183e0:	08024427 	.word	0x08024427
 80183e4:	08023ee5 	.word	0x08023ee5

080183e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80183e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183ec:	b097      	sub	sp, #92	; 0x5c
 80183ee:	9109      	str	r1, [sp, #36]	; 0x24
 80183f0:	a912      	add	r1, sp, #72	; 0x48
 80183f2:	e881 000c 	stmia.w	r1, {r2, r3}
 80183f6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80183fa:	9306      	str	r3, [sp, #24]
 80183fc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8018400:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8018404:	930e      	str	r3, [sp, #56]	; 0x38
 8018406:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801840a:	930a      	str	r3, [sp, #40]	; 0x28
 801840c:	7b4b      	ldrb	r3, [r1, #13]
 801840e:	798f      	ldrb	r7, [r1, #6]
 8018410:	f9bd 4080 	ldrsh.w	r4, [sp, #128]	; 0x80
 8018414:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 8018418:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 801841c:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8018420:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8018424:	0158      	lsls	r0, r3, #5
 8018426:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801842a:	4338      	orrs	r0, r7
 801842c:	9008      	str	r0, [sp, #32]
 801842e:	f000 8149 	beq.w	80186c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8018432:	011b      	lsls	r3, r3, #4
 8018434:	79c8      	ldrb	r0, [r1, #7]
 8018436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801843a:	4303      	orrs	r3, r0
 801843c:	9307      	str	r3, [sp, #28]
 801843e:	f000 8141 	beq.w	80186c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8018442:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8018446:	b29b      	uxth	r3, r3
 8018448:	2e00      	cmp	r6, #0
 801844a:	f000 80e5 	beq.w	8018618 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x230>
 801844e:	1af6      	subs	r6, r6, r3
 8018450:	b2b6      	uxth	r6, r6
 8018452:	0433      	lsls	r3, r6, #16
 8018454:	d502      	bpl.n	801845c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8018456:	1ba4      	subs	r4, r4, r6
 8018458:	b224      	sxth	r4, r4
 801845a:	2600      	movs	r6, #0
 801845c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018460:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8018464:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8018468:	428c      	cmp	r4, r1
 801846a:	b28b      	uxth	r3, r1
 801846c:	bfbf      	itttt	lt
 801846e:	18f6      	addlt	r6, r6, r3
 8018470:	1b34      	sublt	r4, r6, r4
 8018472:	b2a6      	uxthlt	r6, r4
 8018474:	460c      	movlt	r4, r1
 8018476:	8891      	ldrh	r1, [r2, #4]
 8018478:	440b      	add	r3, r1
 801847a:	b21b      	sxth	r3, r3
 801847c:	930d      	str	r3, [sp, #52]	; 0x34
 801847e:	88d3      	ldrh	r3, [r2, #6]
 8018480:	9a06      	ldr	r2, [sp, #24]
 8018482:	449a      	add	sl, r3
 8018484:	fa0f f38a 	sxth.w	r3, sl
 8018488:	930c      	str	r3, [sp, #48]	; 0x30
 801848a:	4bb5      	ldr	r3, [pc, #724]	; (8018760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 801848c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8018490:	f893 9000 	ldrb.w	r9, [r3]
 8018494:	f109 3cff 	add.w	ip, r9, #4294967295
 8018498:	f1dc 0300 	rsbs	r3, ip, #0
 801849c:	eb43 030c 	adc.w	r3, r3, ip
 80184a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80184a2:	4621      	mov	r1, r4
 80184a4:	465b      	mov	r3, fp
 80184a6:	a812      	add	r0, sp, #72	; 0x48
 80184a8:	f7f9 fd5c 	bl	8011f64 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80184ac:	4621      	mov	r1, r4
 80184ae:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80184b2:	465b      	mov	r3, fp
 80184b4:	9a06      	ldr	r2, [sp, #24]
 80184b6:	a812      	add	r0, sp, #72	; 0x48
 80184b8:	f7f9 fd6c 	bl	8011f94 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80184bc:	a916      	add	r1, sp, #88	; 0x58
 80184be:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80184c2:	a815      	add	r0, sp, #84	; 0x54
 80184c4:	f7f9 fe48 	bl	8012158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80184c8:	f1bb 0f00 	cmp.w	fp, #0
 80184cc:	f040 80a7 	bne.w	801861e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x236>
 80184d0:	f1b9 0f01 	cmp.w	r9, #1
 80184d4:	f040 80ab 	bne.w	801862e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 80184d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184da:	2b00      	cmp	r3, #0
 80184dc:	f040 80f7 	bne.w	80186ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e6>
 80184e0:	4ba0      	ldr	r3, [pc, #640]	; (8018764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 80184e2:	6818      	ldr	r0, [r3, #0]
 80184e4:	6803      	ldr	r3, [r0, #0]
 80184e6:	6a1b      	ldr	r3, [r3, #32]
 80184e8:	4798      	blx	r3
 80184ea:	4a9f      	ldr	r2, [pc, #636]	; (8018768 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80184ec:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80184f0:	8811      	ldrh	r1, [r2, #0]
 80184f2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80184f6:	fb01 2303 	mla	r3, r1, r3, r2
 80184fa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80184fe:	f04f 0901 	mov.w	r9, #1
 8018502:	9307      	str	r3, [sp, #28]
 8018504:	fa09 f308 	lsl.w	r3, r9, r8
 8018508:	3b01      	subs	r3, #1
 801850a:	b2db      	uxtb	r3, r3
 801850c:	45c8      	cmp	r8, r9
 801850e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018510:	f000 80df 	beq.w	80186d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8018514:	f1b8 0f02 	cmp.w	r8, #2
 8018518:	f000 8153 	beq.w	80187c2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3da>
 801851c:	f1b8 0f04 	cmp.w	r8, #4
 8018520:	f000 8146 	beq.w	80187b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c8>
 8018524:	b906      	cbnz	r6, 8018528 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8018526:	b175      	cbz	r5, 8018546 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 8018528:	fb17 6305 	smlabb	r3, r7, r5, r6
 801852c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801852e:	fb13 f308 	smulbb	r3, r3, r8
 8018532:	b29b      	uxth	r3, r3
 8018534:	ebaa 0a05 	sub.w	sl, sl, r5
 8018538:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801853c:	9226      	str	r2, [sp, #152]	; 0x98
 801853e:	fa1f fa8a 	uxth.w	sl, sl
 8018542:	f003 0507 	and.w	r5, r3, #7
 8018546:	4659      	mov	r1, fp
 8018548:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801854a:	f7ff feed 	bl	8018328 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801854e:	4659      	mov	r1, fp
 8018550:	9010      	str	r0, [sp, #64]	; 0x40
 8018552:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018554:	f7ff ff18 	bl	8018388 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8018558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801855a:	9a06      	ldr	r2, [sp, #24]
 801855c:	1a9a      	subs	r2, r3, r2
 801855e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018560:	1ba4      	subs	r4, r4, r6
 8018562:	1b1c      	subs	r4, r3, r4
 8018564:	9b08      	ldr	r3, [sp, #32]
 8018566:	4592      	cmp	sl, r2
 8018568:	bfa8      	it	ge
 801856a:	4692      	movge	sl, r2
 801856c:	429c      	cmp	r4, r3
 801856e:	bfd4      	ite	le
 8018570:	ebc6 0604 	rsble	r6, r6, r4
 8018574:	ebc6 0603 	rsbgt	r6, r6, r3
 8018578:	1bbf      	subs	r7, r7, r6
 801857a:	fb08 f307 	mul.w	r3, r8, r7
 801857e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018580:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018582:	781a      	ldrb	r2, [r3, #0]
 8018584:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018586:	1219      	asrs	r1, r3, #8
 8018588:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 801858c:	930c      	str	r3, [sp, #48]	; 0x30
 801858e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018590:	f3c3 01cc 	ubfx	r1, r3, #3, #13
 8018594:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8018598:	930d      	str	r3, [sp, #52]	; 0x34
 801859a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801859c:	00d9      	lsls	r1, r3, #3
 801859e:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 80185a2:	930e      	str	r3, [sp, #56]	; 0x38
 80185a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185a6:	0059      	lsls	r1, r3, #1
 80185a8:	fb03 0016 	mls	r0, r3, r6, r0
 80185ac:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80185b0:	434b      	muls	r3, r1
 80185b2:	9106      	str	r1, [sp, #24]
 80185b4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80185b6:	412a      	asrs	r2, r5
 80185b8:	b289      	uxth	r1, r1
 80185ba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80185be:	b2d2      	uxtb	r2, r2
 80185c0:	9110      	str	r1, [sp, #64]	; 0x40
 80185c2:	9311      	str	r3, [sp, #68]	; 0x44
 80185c4:	f1ba 0f00 	cmp.w	sl, #0
 80185c8:	f340 80e4 	ble.w	8018794 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80185cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80185d0:	46b6      	mov	lr, r6
 80185d2:	f1be 0f00 	cmp.w	lr, #0
 80185d6:	f340 80c9 	ble.w	801876c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80185da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185dc:	4013      	ands	r3, r2
 80185de:	d009      	beq.n	80185f4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20c>
 80185e0:	fb13 f309 	smulbb	r3, r3, r9
 80185e4:	2bfe      	cmp	r3, #254	; 0xfe
 80185e6:	dd77      	ble.n	80186d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 80185e8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80185ea:	29ff      	cmp	r1, #255	; 0xff
 80185ec:	d174      	bne.n	80186d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 80185ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80185f0:	f8ac 0000 	strh.w	r0, [ip]
 80185f4:	4445      	add	r5, r8
 80185f6:	b2ad      	uxth	r5, r5
 80185f8:	2d07      	cmp	r5, #7
 80185fa:	bf81      	itttt	hi
 80185fc:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80185fe:	785a      	ldrbhi	r2, [r3, #1]
 8018600:	3301      	addhi	r3, #1
 8018602:	9326      	strhi	r3, [sp, #152]	; 0x98
 8018604:	9b06      	ldr	r3, [sp, #24]
 8018606:	bf9a      	itte	ls
 8018608:	fa42 f208 	asrls.w	r2, r2, r8
 801860c:	b2d2      	uxtbls	r2, r2
 801860e:	2500      	movhi	r5, #0
 8018610:	449c      	add	ip, r3
 8018612:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018616:	e7dc      	b.n	80185d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8018618:	441c      	add	r4, r3
 801861a:	b224      	sxth	r4, r4
 801861c:	e71e      	b.n	801845c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801861e:	f1bb 0f01 	cmp.w	fp, #1
 8018622:	f47f af59 	bne.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018626:	f1b9 0f01 	cmp.w	r9, #1
 801862a:	f47f af55 	bne.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801862e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8018764 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8018632:	f8d9 0000 	ldr.w	r0, [r9]
 8018636:	6803      	ldr	r3, [r0, #0]
 8018638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801863a:	4798      	blx	r3
 801863c:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8018640:	464a      	mov	r2, r9
 8018642:	d006      	beq.n	8018652 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8018644:	f1b8 0f04 	cmp.w	r8, #4
 8018648:	d13f      	bne.n	80186ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801864a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801864c:	3300      	adds	r3, #0
 801864e:	bf18      	it	ne
 8018650:	2301      	movne	r3, #1
 8018652:	05c0      	lsls	r0, r0, #23
 8018654:	f140 80a7 	bpl.w	80187a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8018658:	f1b8 0f08 	cmp.w	r8, #8
 801865c:	f040 80a3 	bne.w	80187a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8018660:	2b00      	cmp	r3, #0
 8018662:	bf0c      	ite	eq
 8018664:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8018668:	2180      	movne	r1, #128	; 0x80
 801866a:	2e00      	cmp	r6, #0
 801866c:	f47f af34 	bne.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018670:	2d00      	cmp	r5, #0
 8018672:	f47f af31 	bne.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018676:	9b08      	ldr	r3, [sp, #32]
 8018678:	980d      	ldr	r0, [sp, #52]	; 0x34
 801867a:	18e3      	adds	r3, r4, r3
 801867c:	4283      	cmp	r3, r0
 801867e:	f73f af2b 	bgt.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018682:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8018686:	4403      	add	r3, r0
 8018688:	980c      	ldr	r0, [sp, #48]	; 0x30
 801868a:	4283      	cmp	r3, r0
 801868c:	f73f af24 	bgt.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018690:	6810      	ldr	r0, [r2, #0]
 8018692:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8018696:	6804      	ldr	r4, [r0, #0]
 8018698:	9105      	str	r1, [sp, #20]
 801869a:	f1b8 0f08 	cmp.w	r8, #8
 801869e:	bf18      	it	ne
 80186a0:	3701      	addne	r7, #1
 80186a2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80186a4:	9104      	str	r1, [sp, #16]
 80186a6:	bf18      	it	ne
 80186a8:	f027 0701 	bicne.w	r7, r7, #1
 80186ac:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80186ae:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80186b2:	bf18      	it	ne
 80186b4:	b2bf      	uxthne	r7, r7
 80186b6:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80186ba:	e9cd 7a00 	strd	r7, sl, [sp]
 80186be:	9926      	ldr	r1, [sp, #152]	; 0x98
 80186c0:	6c24      	ldr	r4, [r4, #64]	; 0x40
 80186c2:	47a0      	blx	r4
 80186c4:	b017      	add	sp, #92	; 0x5c
 80186c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ca:	2300      	movs	r3, #0
 80186cc:	e7c1      	b.n	8018652 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 80186ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186d0:	e70b      	b.n	80184ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 80186d2:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80186d6:	e725      	b.n	8018524 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80186d8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80186da:	f8bc 4000 	ldrh.w	r4, [ip]
 80186de:	fb11 f303 	smulbb	r3, r1, r3
 80186e2:	b29b      	uxth	r3, r3
 80186e4:	1c59      	adds	r1, r3, #1
 80186e6:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80186ea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80186ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80186f0:	b29f      	uxth	r7, r3
 80186f2:	1220      	asrs	r0, r4, #8
 80186f4:	43db      	mvns	r3, r3
 80186f6:	b2db      	uxtb	r3, r3
 80186f8:	fb11 f107 	smulbb	r1, r1, r7
 80186fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018700:	fb00 1003 	mla	r0, r0, r3, r1
 8018704:	b281      	uxth	r1, r0
 8018706:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018708:	9108      	str	r1, [sp, #32]
 801870a:	fb17 fb00 	smulbb	fp, r7, r0
 801870e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018710:	10e1      	asrs	r1, r4, #3
 8018712:	00e4      	lsls	r4, r4, #3
 8018714:	fb17 f700 	smulbb	r7, r7, r0
 8018718:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801871c:	b2e4      	uxtb	r4, r4
 801871e:	fb01 b103 	mla	r1, r1, r3, fp
 8018722:	fb04 7703 	mla	r7, r4, r3, r7
 8018726:	9b08      	ldr	r3, [sp, #32]
 8018728:	9808      	ldr	r0, [sp, #32]
 801872a:	b2bf      	uxth	r7, r7
 801872c:	3301      	adds	r3, #1
 801872e:	f107 0b01 	add.w	fp, r7, #1
 8018732:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8018736:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801873a:	b289      	uxth	r1, r1
 801873c:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8018740:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8018744:	ea40 000b 	orr.w	r0, r0, fp
 8018748:	f101 0b01 	add.w	fp, r1, #1
 801874c:	eb0b 2b11 	add.w	fp, fp, r1, lsr #8
 8018750:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8018754:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018758:	ea40 000b 	orr.w	r0, r0, fp
 801875c:	e748      	b.n	80185f0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801875e:	bf00      	nop
 8018760:	20009ef4 	.word	0x20009ef4
 8018764:	20009efc 	.word	0x20009efc
 8018768:	20009ef6 	.word	0x20009ef6
 801876c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801876e:	b153      	cbz	r3, 8018786 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8018770:	441d      	add	r5, r3
 8018772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018774:	b2ad      	uxth	r5, r5
 8018776:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 801877a:	f005 0507 	and.w	r5, r5, #7
 801877e:	781a      	ldrb	r2, [r3, #0]
 8018780:	9326      	str	r3, [sp, #152]	; 0x98
 8018782:	412a      	asrs	r2, r5
 8018784:	b2d2      	uxtb	r2, r2
 8018786:	9b07      	ldr	r3, [sp, #28]
 8018788:	9911      	ldr	r1, [sp, #68]	; 0x44
 801878a:	440b      	add	r3, r1
 801878c:	9307      	str	r3, [sp, #28]
 801878e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018792:	e717      	b.n	80185c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1dc>
 8018794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018796:	2b00      	cmp	r3, #0
 8018798:	d194      	bne.n	80186c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 801879a:	4b0b      	ldr	r3, [pc, #44]	; (80187c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>)
 801879c:	6818      	ldr	r0, [r3, #0]
 801879e:	6803      	ldr	r3, [r0, #0]
 80187a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187a2:	4798      	blx	r3
 80187a4:	e78e      	b.n	80186c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	f43f ae96 	beq.w	80184d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187ac:	2180      	movs	r1, #128	; 0x80
 80187ae:	e75c      	b.n	801866a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 80187b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187b2:	b11b      	cbz	r3, 80187bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 80187b4:	07fb      	lsls	r3, r7, #31
 80187b6:	d501      	bpl.n	80187bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 80187b8:	3701      	adds	r7, #1
 80187ba:	b2bf      	uxth	r7, r7
 80187bc:	f04f 0911 	mov.w	r9, #17
 80187c0:	e6b0      	b.n	8018524 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80187c2:	f04f 0955 	mov.w	r9, #85	; 0x55
 80187c6:	e6ad      	b.n	8018524 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 80187c8:	20009efc 	.word	0x20009efc

080187cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80187cc:	b538      	push	{r3, r4, r5, lr}
 80187ce:	4c15      	ldr	r4, [pc, #84]	; (8018824 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80187d0:	7823      	ldrb	r3, [r4, #0]
 80187d2:	f3bf 8f5b 	dmb	ish
 80187d6:	07da      	lsls	r2, r3, #31
 80187d8:	4605      	mov	r5, r0
 80187da:	d40b      	bmi.n	80187f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80187dc:	4620      	mov	r0, r4
 80187de:	f007 fbc9 	bl	801ff74 <__cxa_guard_acquire>
 80187e2:	b138      	cbz	r0, 80187f4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 80187e4:	4620      	mov	r0, r4
 80187e6:	f007 fbd1 	bl	801ff8c <__cxa_guard_release>
 80187ea:	4a0f      	ldr	r2, [pc, #60]	; (8018828 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80187ec:	490f      	ldr	r1, [pc, #60]	; (801882c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80187ee:	4810      	ldr	r0, [pc, #64]	; (8018830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80187f0:	f007 fbb6 	bl	801ff60 <__aeabi_atexit>
 80187f4:	4c0f      	ldr	r4, [pc, #60]	; (8018834 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80187f6:	7823      	ldrb	r3, [r4, #0]
 80187f8:	f3bf 8f5b 	dmb	ish
 80187fc:	07db      	lsls	r3, r3, #31
 80187fe:	d40b      	bmi.n	8018818 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8018800:	4620      	mov	r0, r4
 8018802:	f007 fbb7 	bl	801ff74 <__cxa_guard_acquire>
 8018806:	b138      	cbz	r0, 8018818 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8018808:	4620      	mov	r0, r4
 801880a:	f007 fbbf 	bl	801ff8c <__cxa_guard_release>
 801880e:	4a06      	ldr	r2, [pc, #24]	; (8018828 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8018810:	4909      	ldr	r1, [pc, #36]	; (8018838 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8018812:	480a      	ldr	r0, [pc, #40]	; (801883c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8018814:	f007 fba4 	bl	801ff60 <__aeabi_atexit>
 8018818:	4b05      	ldr	r3, [pc, #20]	; (8018830 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801881a:	612b      	str	r3, [r5, #16]
 801881c:	4b07      	ldr	r3, [pc, #28]	; (801883c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801881e:	616b      	str	r3, [r5, #20]
 8018820:	bd38      	pop	{r3, r4, r5, pc}
 8018822:	bf00      	nop
 8018824:	20009fe8 	.word	0x20009fe8
 8018828:	20000000 	.word	0x20000000
 801882c:	08016e87 	.word	0x08016e87
 8018830:	200000d8 	.word	0x200000d8
 8018834:	20009fec 	.word	0x20009fec
 8018838:	08016e85 	.word	0x08016e85
 801883c:	200000dc 	.word	0x200000dc

08018840 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8018840:	b538      	push	{r3, r4, r5, lr}
 8018842:	4c15      	ldr	r4, [pc, #84]	; (8018898 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8018844:	7823      	ldrb	r3, [r4, #0]
 8018846:	f3bf 8f5b 	dmb	ish
 801884a:	07da      	lsls	r2, r3, #31
 801884c:	4605      	mov	r5, r0
 801884e:	d40b      	bmi.n	8018868 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8018850:	4620      	mov	r0, r4
 8018852:	f007 fb8f 	bl	801ff74 <__cxa_guard_acquire>
 8018856:	b138      	cbz	r0, 8018868 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8018858:	4620      	mov	r0, r4
 801885a:	f007 fb97 	bl	801ff8c <__cxa_guard_release>
 801885e:	4a0f      	ldr	r2, [pc, #60]	; (801889c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8018860:	490f      	ldr	r1, [pc, #60]	; (80188a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8018862:	4810      	ldr	r0, [pc, #64]	; (80188a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8018864:	f007 fb7c 	bl	801ff60 <__aeabi_atexit>
 8018868:	4c0f      	ldr	r4, [pc, #60]	; (80188a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801886a:	7823      	ldrb	r3, [r4, #0]
 801886c:	f3bf 8f5b 	dmb	ish
 8018870:	07db      	lsls	r3, r3, #31
 8018872:	d40b      	bmi.n	801888c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8018874:	4620      	mov	r0, r4
 8018876:	f007 fb7d 	bl	801ff74 <__cxa_guard_acquire>
 801887a:	b138      	cbz	r0, 801888c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801887c:	4620      	mov	r0, r4
 801887e:	f007 fb85 	bl	801ff8c <__cxa_guard_release>
 8018882:	4a06      	ldr	r2, [pc, #24]	; (801889c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8018884:	4909      	ldr	r1, [pc, #36]	; (80188ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8018886:	480a      	ldr	r0, [pc, #40]	; (80188b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8018888:	f007 fb6a 	bl	801ff60 <__aeabi_atexit>
 801888c:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801888e:	60ab      	str	r3, [r5, #8]
 8018890:	4b07      	ldr	r3, [pc, #28]	; (80188b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8018892:	60eb      	str	r3, [r5, #12]
 8018894:	bd38      	pop	{r3, r4, r5, pc}
 8018896:	bf00      	nop
 8018898:	20009fc0 	.word	0x20009fc0
 801889c:	20000000 	.word	0x20000000
 80188a0:	08016e8b 	.word	0x08016e8b
 80188a4:	200000b0 	.word	0x200000b0
 80188a8:	20009fc4 	.word	0x20009fc4
 80188ac:	08016e89 	.word	0x08016e89
 80188b0:	200000b4 	.word	0x200000b4

080188b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80188b4:	b510      	push	{r4, lr}
 80188b6:	4604      	mov	r4, r0
 80188b8:	f7ff ff88 	bl	80187cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80188bc:	4620      	mov	r0, r4
 80188be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188c2:	f7ff bfbd 	b.w	8018840 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080188c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80188c8:	b538      	push	{r3, r4, r5, lr}
 80188ca:	4c15      	ldr	r4, [pc, #84]	; (8018920 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80188cc:	7823      	ldrb	r3, [r4, #0]
 80188ce:	f3bf 8f5b 	dmb	ish
 80188d2:	07da      	lsls	r2, r3, #31
 80188d4:	4605      	mov	r5, r0
 80188d6:	d40b      	bmi.n	80188f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80188d8:	4620      	mov	r0, r4
 80188da:	f007 fb4b 	bl	801ff74 <__cxa_guard_acquire>
 80188de:	b138      	cbz	r0, 80188f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80188e0:	4620      	mov	r0, r4
 80188e2:	f007 fb53 	bl	801ff8c <__cxa_guard_release>
 80188e6:	4a0f      	ldr	r2, [pc, #60]	; (8018924 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80188e8:	490f      	ldr	r1, [pc, #60]	; (8018928 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80188ea:	4810      	ldr	r0, [pc, #64]	; (801892c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80188ec:	f007 fb38 	bl	801ff60 <__aeabi_atexit>
 80188f0:	4c0f      	ldr	r4, [pc, #60]	; (8018930 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80188f2:	7823      	ldrb	r3, [r4, #0]
 80188f4:	f3bf 8f5b 	dmb	ish
 80188f8:	07db      	lsls	r3, r3, #31
 80188fa:	d40b      	bmi.n	8018914 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80188fc:	4620      	mov	r0, r4
 80188fe:	f007 fb39 	bl	801ff74 <__cxa_guard_acquire>
 8018902:	b138      	cbz	r0, 8018914 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018904:	4620      	mov	r0, r4
 8018906:	f007 fb41 	bl	801ff8c <__cxa_guard_release>
 801890a:	4a06      	ldr	r2, [pc, #24]	; (8018924 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801890c:	4909      	ldr	r1, [pc, #36]	; (8018934 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801890e:	480a      	ldr	r0, [pc, #40]	; (8018938 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018910:	f007 fb26 	bl	801ff60 <__aeabi_atexit>
 8018914:	4b05      	ldr	r3, [pc, #20]	; (801892c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018916:	622b      	str	r3, [r5, #32]
 8018918:	4b07      	ldr	r3, [pc, #28]	; (8018938 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801891a:	626b      	str	r3, [r5, #36]	; 0x24
 801891c:	bd38      	pop	{r3, r4, r5, pc}
 801891e:	bf00      	nop
 8018920:	20009ff0 	.word	0x20009ff0
 8018924:	20000000 	.word	0x20000000
 8018928:	08016e7f 	.word	0x08016e7f
 801892c:	200000e0 	.word	0x200000e0
 8018930:	20009ff4 	.word	0x20009ff4
 8018934:	08016e7d 	.word	0x08016e7d
 8018938:	200000e4 	.word	0x200000e4

0801893c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801893c:	b538      	push	{r3, r4, r5, lr}
 801893e:	4c15      	ldr	r4, [pc, #84]	; (8018994 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018940:	7823      	ldrb	r3, [r4, #0]
 8018942:	f3bf 8f5b 	dmb	ish
 8018946:	07da      	lsls	r2, r3, #31
 8018948:	4605      	mov	r5, r0
 801894a:	d40b      	bmi.n	8018964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801894c:	4620      	mov	r0, r4
 801894e:	f007 fb11 	bl	801ff74 <__cxa_guard_acquire>
 8018952:	b138      	cbz	r0, 8018964 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018954:	4620      	mov	r0, r4
 8018956:	f007 fb19 	bl	801ff8c <__cxa_guard_release>
 801895a:	4a0f      	ldr	r2, [pc, #60]	; (8018998 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801895c:	490f      	ldr	r1, [pc, #60]	; (801899c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801895e:	4810      	ldr	r0, [pc, #64]	; (80189a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018960:	f007 fafe 	bl	801ff60 <__aeabi_atexit>
 8018964:	4c0f      	ldr	r4, [pc, #60]	; (80189a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018966:	7823      	ldrb	r3, [r4, #0]
 8018968:	f3bf 8f5b 	dmb	ish
 801896c:	07db      	lsls	r3, r3, #31
 801896e:	d40b      	bmi.n	8018988 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018970:	4620      	mov	r0, r4
 8018972:	f007 faff 	bl	801ff74 <__cxa_guard_acquire>
 8018976:	b138      	cbz	r0, 8018988 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018978:	4620      	mov	r0, r4
 801897a:	f007 fb07 	bl	801ff8c <__cxa_guard_release>
 801897e:	4a06      	ldr	r2, [pc, #24]	; (8018998 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018980:	4909      	ldr	r1, [pc, #36]	; (80189a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018982:	480a      	ldr	r0, [pc, #40]	; (80189ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018984:	f007 faec 	bl	801ff60 <__aeabi_atexit>
 8018988:	4b05      	ldr	r3, [pc, #20]	; (80189a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801898a:	61ab      	str	r3, [r5, #24]
 801898c:	4b07      	ldr	r3, [pc, #28]	; (80189ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801898e:	61eb      	str	r3, [r5, #28]
 8018990:	bd38      	pop	{r3, r4, r5, pc}
 8018992:	bf00      	nop
 8018994:	20009fc8 	.word	0x20009fc8
 8018998:	20000000 	.word	0x20000000
 801899c:	08016e83 	.word	0x08016e83
 80189a0:	200000b8 	.word	0x200000b8
 80189a4:	20009fcc 	.word	0x20009fcc
 80189a8:	08016e81 	.word	0x08016e81
 80189ac:	200000bc 	.word	0x200000bc

080189b0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80189b0:	b510      	push	{r4, lr}
 80189b2:	4604      	mov	r4, r0
 80189b4:	f7ff ff88 	bl	80188c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80189b8:	4620      	mov	r0, r4
 80189ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189be:	f7ff bfbd 	b.w	801893c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080189c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80189c4:	b538      	push	{r3, r4, r5, lr}
 80189c6:	4c15      	ldr	r4, [pc, #84]	; (8018a1c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80189c8:	7823      	ldrb	r3, [r4, #0]
 80189ca:	f3bf 8f5b 	dmb	ish
 80189ce:	07da      	lsls	r2, r3, #31
 80189d0:	4605      	mov	r5, r0
 80189d2:	d40b      	bmi.n	80189ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80189d4:	4620      	mov	r0, r4
 80189d6:	f007 facd 	bl	801ff74 <__cxa_guard_acquire>
 80189da:	b138      	cbz	r0, 80189ec <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80189dc:	4620      	mov	r0, r4
 80189de:	f007 fad5 	bl	801ff8c <__cxa_guard_release>
 80189e2:	4a0f      	ldr	r2, [pc, #60]	; (8018a20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80189e4:	490f      	ldr	r1, [pc, #60]	; (8018a24 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80189e6:	4810      	ldr	r0, [pc, #64]	; (8018a28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80189e8:	f007 faba 	bl	801ff60 <__aeabi_atexit>
 80189ec:	4c0f      	ldr	r4, [pc, #60]	; (8018a2c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80189ee:	7823      	ldrb	r3, [r4, #0]
 80189f0:	f3bf 8f5b 	dmb	ish
 80189f4:	07db      	lsls	r3, r3, #31
 80189f6:	d40b      	bmi.n	8018a10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80189f8:	4620      	mov	r0, r4
 80189fa:	f007 fabb 	bl	801ff74 <__cxa_guard_acquire>
 80189fe:	b138      	cbz	r0, 8018a10 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018a00:	4620      	mov	r0, r4
 8018a02:	f007 fac3 	bl	801ff8c <__cxa_guard_release>
 8018a06:	4a06      	ldr	r2, [pc, #24]	; (8018a20 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018a08:	4909      	ldr	r1, [pc, #36]	; (8018a30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018a0a:	480a      	ldr	r0, [pc, #40]	; (8018a34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018a0c:	f007 faa8 	bl	801ff60 <__aeabi_atexit>
 8018a10:	4b05      	ldr	r3, [pc, #20]	; (8018a28 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018a12:	632b      	str	r3, [r5, #48]	; 0x30
 8018a14:	4b07      	ldr	r3, [pc, #28]	; (8018a34 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018a16:	636b      	str	r3, [r5, #52]	; 0x34
 8018a18:	bd38      	pop	{r3, r4, r5, pc}
 8018a1a:	bf00      	nop
 8018a1c:	2000a000 	.word	0x2000a000
 8018a20:	20000000 	.word	0x20000000
 8018a24:	08016e77 	.word	0x08016e77
 8018a28:	200000f0 	.word	0x200000f0
 8018a2c:	2000a004 	.word	0x2000a004
 8018a30:	08016e75 	.word	0x08016e75
 8018a34:	200000f4 	.word	0x200000f4

08018a38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018a38:	b538      	push	{r3, r4, r5, lr}
 8018a3a:	4c15      	ldr	r4, [pc, #84]	; (8018a90 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8018a3c:	7823      	ldrb	r3, [r4, #0]
 8018a3e:	f3bf 8f5b 	dmb	ish
 8018a42:	07da      	lsls	r2, r3, #31
 8018a44:	4605      	mov	r5, r0
 8018a46:	d40b      	bmi.n	8018a60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a48:	4620      	mov	r0, r4
 8018a4a:	f007 fa93 	bl	801ff74 <__cxa_guard_acquire>
 8018a4e:	b138      	cbz	r0, 8018a60 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a50:	4620      	mov	r0, r4
 8018a52:	f007 fa9b 	bl	801ff8c <__cxa_guard_release>
 8018a56:	4a0f      	ldr	r2, [pc, #60]	; (8018a94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a58:	490f      	ldr	r1, [pc, #60]	; (8018a98 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018a5a:	4810      	ldr	r0, [pc, #64]	; (8018a9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018a5c:	f007 fa80 	bl	801ff60 <__aeabi_atexit>
 8018a60:	4c0f      	ldr	r4, [pc, #60]	; (8018aa0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018a62:	7823      	ldrb	r3, [r4, #0]
 8018a64:	f3bf 8f5b 	dmb	ish
 8018a68:	07db      	lsls	r3, r3, #31
 8018a6a:	d40b      	bmi.n	8018a84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f007 fa81 	bl	801ff74 <__cxa_guard_acquire>
 8018a72:	b138      	cbz	r0, 8018a84 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018a74:	4620      	mov	r0, r4
 8018a76:	f007 fa89 	bl	801ff8c <__cxa_guard_release>
 8018a7a:	4a06      	ldr	r2, [pc, #24]	; (8018a94 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a7c:	4909      	ldr	r1, [pc, #36]	; (8018aa4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8018a7e:	480a      	ldr	r0, [pc, #40]	; (8018aa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018a80:	f007 fa6e 	bl	801ff60 <__aeabi_atexit>
 8018a84:	4b05      	ldr	r3, [pc, #20]	; (8018a9c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018a86:	62ab      	str	r3, [r5, #40]	; 0x28
 8018a88:	4b07      	ldr	r3, [pc, #28]	; (8018aa8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018a8a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018a8c:	bd38      	pop	{r3, r4, r5, pc}
 8018a8e:	bf00      	nop
 8018a90:	20009fd0 	.word	0x20009fd0
 8018a94:	20000000 	.word	0x20000000
 8018a98:	08016e7b 	.word	0x08016e7b
 8018a9c:	200000c0 	.word	0x200000c0
 8018aa0:	20009fd4 	.word	0x20009fd4
 8018aa4:	08016e79 	.word	0x08016e79
 8018aa8:	200000c4 	.word	0x200000c4

08018aac <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018aac:	b510      	push	{r4, lr}
 8018aae:	4604      	mov	r4, r0
 8018ab0:	f7ff ff88 	bl	80189c4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8018ab4:	4620      	mov	r0, r4
 8018ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aba:	f7ff bfbd 	b.w	8018a38 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018ac0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8018ac0:	b538      	push	{r3, r4, r5, lr}
 8018ac2:	4c15      	ldr	r4, [pc, #84]	; (8018b18 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8018ac4:	7823      	ldrb	r3, [r4, #0]
 8018ac6:	f3bf 8f5b 	dmb	ish
 8018aca:	07da      	lsls	r2, r3, #31
 8018acc:	4605      	mov	r5, r0
 8018ace:	d40b      	bmi.n	8018ae8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8018ad0:	4620      	mov	r0, r4
 8018ad2:	f007 fa4f 	bl	801ff74 <__cxa_guard_acquire>
 8018ad6:	b138      	cbz	r0, 8018ae8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8018ad8:	4620      	mov	r0, r4
 8018ada:	f007 fa57 	bl	801ff8c <__cxa_guard_release>
 8018ade:	4a0f      	ldr	r2, [pc, #60]	; (8018b1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8018ae0:	490f      	ldr	r1, [pc, #60]	; (8018b20 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8018ae2:	4810      	ldr	r0, [pc, #64]	; (8018b24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8018ae4:	f007 fa3c 	bl	801ff60 <__aeabi_atexit>
 8018ae8:	4c0f      	ldr	r4, [pc, #60]	; (8018b28 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8018aea:	7823      	ldrb	r3, [r4, #0]
 8018aec:	f3bf 8f5b 	dmb	ish
 8018af0:	07db      	lsls	r3, r3, #31
 8018af2:	d40b      	bmi.n	8018b0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8018af4:	4620      	mov	r0, r4
 8018af6:	f007 fa3d 	bl	801ff74 <__cxa_guard_acquire>
 8018afa:	b138      	cbz	r0, 8018b0c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8018afc:	4620      	mov	r0, r4
 8018afe:	f007 fa45 	bl	801ff8c <__cxa_guard_release>
 8018b02:	4a06      	ldr	r2, [pc, #24]	; (8018b1c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8018b04:	4909      	ldr	r1, [pc, #36]	; (8018b2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8018b06:	480a      	ldr	r0, [pc, #40]	; (8018b30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8018b08:	f007 fa2a 	bl	801ff60 <__aeabi_atexit>
 8018b0c:	4b05      	ldr	r3, [pc, #20]	; (8018b24 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8018b0e:	652b      	str	r3, [r5, #80]	; 0x50
 8018b10:	4b07      	ldr	r3, [pc, #28]	; (8018b30 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8018b12:	656b      	str	r3, [r5, #84]	; 0x54
 8018b14:	bd38      	pop	{r3, r4, r5, pc}
 8018b16:	bf00      	nop
 8018b18:	2000a008 	.word	0x2000a008
 8018b1c:	20000000 	.word	0x20000000
 8018b20:	08016e67 	.word	0x08016e67
 8018b24:	200000f8 	.word	0x200000f8
 8018b28:	2000a00c 	.word	0x2000a00c
 8018b2c:	08016e65 	.word	0x08016e65
 8018b30:	200000fc 	.word	0x200000fc

08018b34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8018b34:	b538      	push	{r3, r4, r5, lr}
 8018b36:	4c15      	ldr	r4, [pc, #84]	; (8018b8c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8018b38:	7823      	ldrb	r3, [r4, #0]
 8018b3a:	f3bf 8f5b 	dmb	ish
 8018b3e:	07da      	lsls	r2, r3, #31
 8018b40:	4605      	mov	r5, r0
 8018b42:	d40b      	bmi.n	8018b5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8018b44:	4620      	mov	r0, r4
 8018b46:	f007 fa15 	bl	801ff74 <__cxa_guard_acquire>
 8018b4a:	b138      	cbz	r0, 8018b5c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f007 fa1d 	bl	801ff8c <__cxa_guard_release>
 8018b52:	4a0f      	ldr	r2, [pc, #60]	; (8018b90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8018b54:	490f      	ldr	r1, [pc, #60]	; (8018b94 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8018b56:	4810      	ldr	r0, [pc, #64]	; (8018b98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8018b58:	f007 fa02 	bl	801ff60 <__aeabi_atexit>
 8018b5c:	4c0f      	ldr	r4, [pc, #60]	; (8018b9c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8018b5e:	7823      	ldrb	r3, [r4, #0]
 8018b60:	f3bf 8f5b 	dmb	ish
 8018b64:	07db      	lsls	r3, r3, #31
 8018b66:	d40b      	bmi.n	8018b80 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8018b68:	4620      	mov	r0, r4
 8018b6a:	f007 fa03 	bl	801ff74 <__cxa_guard_acquire>
 8018b6e:	b138      	cbz	r0, 8018b80 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8018b70:	4620      	mov	r0, r4
 8018b72:	f007 fa0b 	bl	801ff8c <__cxa_guard_release>
 8018b76:	4a06      	ldr	r2, [pc, #24]	; (8018b90 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8018b78:	4909      	ldr	r1, [pc, #36]	; (8018ba0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8018b7a:	480a      	ldr	r0, [pc, #40]	; (8018ba4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8018b7c:	f007 f9f0 	bl	801ff60 <__aeabi_atexit>
 8018b80:	4b05      	ldr	r3, [pc, #20]	; (8018b98 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8018b82:	64ab      	str	r3, [r5, #72]	; 0x48
 8018b84:	4b07      	ldr	r3, [pc, #28]	; (8018ba4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8018b86:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018b88:	bd38      	pop	{r3, r4, r5, pc}
 8018b8a:	bf00      	nop
 8018b8c:	2000a010 	.word	0x2000a010
 8018b90:	20000000 	.word	0x20000000
 8018b94:	08016e6b 	.word	0x08016e6b
 8018b98:	20000100 	.word	0x20000100
 8018b9c:	2000a014 	.word	0x2000a014
 8018ba0:	08016e69 	.word	0x08016e69
 8018ba4:	20000104 	.word	0x20000104

08018ba8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8018ba8:	b538      	push	{r3, r4, r5, lr}
 8018baa:	4c15      	ldr	r4, [pc, #84]	; (8018c00 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8018bac:	7823      	ldrb	r3, [r4, #0]
 8018bae:	f3bf 8f5b 	dmb	ish
 8018bb2:	07da      	lsls	r2, r3, #31
 8018bb4:	4605      	mov	r5, r0
 8018bb6:	d40b      	bmi.n	8018bd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8018bb8:	4620      	mov	r0, r4
 8018bba:	f007 f9db 	bl	801ff74 <__cxa_guard_acquire>
 8018bbe:	b138      	cbz	r0, 8018bd0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f007 f9e3 	bl	801ff8c <__cxa_guard_release>
 8018bc6:	4a0f      	ldr	r2, [pc, #60]	; (8018c04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8018bc8:	490f      	ldr	r1, [pc, #60]	; (8018c08 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8018bca:	4810      	ldr	r0, [pc, #64]	; (8018c0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8018bcc:	f007 f9c8 	bl	801ff60 <__aeabi_atexit>
 8018bd0:	4c0f      	ldr	r4, [pc, #60]	; (8018c10 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 8018bd2:	7823      	ldrb	r3, [r4, #0]
 8018bd4:	f3bf 8f5b 	dmb	ish
 8018bd8:	07db      	lsls	r3, r3, #31
 8018bda:	d40b      	bmi.n	8018bf4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8018bdc:	4620      	mov	r0, r4
 8018bde:	f007 f9c9 	bl	801ff74 <__cxa_guard_acquire>
 8018be2:	b138      	cbz	r0, 8018bf4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8018be4:	4620      	mov	r0, r4
 8018be6:	f007 f9d1 	bl	801ff8c <__cxa_guard_release>
 8018bea:	4a06      	ldr	r2, [pc, #24]	; (8018c04 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8018bec:	4909      	ldr	r1, [pc, #36]	; (8018c14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8018bee:	480a      	ldr	r0, [pc, #40]	; (8018c18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8018bf0:	f007 f9b6 	bl	801ff60 <__aeabi_atexit>
 8018bf4:	4b05      	ldr	r3, [pc, #20]	; (8018c0c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8018bf6:	642b      	str	r3, [r5, #64]	; 0x40
 8018bf8:	4b07      	ldr	r3, [pc, #28]	; (8018c18 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8018bfa:	646b      	str	r3, [r5, #68]	; 0x44
 8018bfc:	bd38      	pop	{r3, r4, r5, pc}
 8018bfe:	bf00      	nop
 8018c00:	20009fd8 	.word	0x20009fd8
 8018c04:	20000000 	.word	0x20000000
 8018c08:	08016e6f 	.word	0x08016e6f
 8018c0c:	200000c8 	.word	0x200000c8
 8018c10:	20009fdc 	.word	0x20009fdc
 8018c14:	08016e6d 	.word	0x08016e6d
 8018c18:	200000cc 	.word	0x200000cc

08018c1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8018c1c:	b538      	push	{r3, r4, r5, lr}
 8018c1e:	4c15      	ldr	r4, [pc, #84]	; (8018c74 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8018c20:	7823      	ldrb	r3, [r4, #0]
 8018c22:	f3bf 8f5b 	dmb	ish
 8018c26:	07da      	lsls	r2, r3, #31
 8018c28:	4605      	mov	r5, r0
 8018c2a:	d40b      	bmi.n	8018c44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	f007 f9a1 	bl	801ff74 <__cxa_guard_acquire>
 8018c32:	b138      	cbz	r0, 8018c44 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8018c34:	4620      	mov	r0, r4
 8018c36:	f007 f9a9 	bl	801ff8c <__cxa_guard_release>
 8018c3a:	4a0f      	ldr	r2, [pc, #60]	; (8018c78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8018c3c:	490f      	ldr	r1, [pc, #60]	; (8018c7c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8018c3e:	4810      	ldr	r0, [pc, #64]	; (8018c80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8018c40:	f007 f98e 	bl	801ff60 <__aeabi_atexit>
 8018c44:	4c0f      	ldr	r4, [pc, #60]	; (8018c84 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8018c46:	7823      	ldrb	r3, [r4, #0]
 8018c48:	f3bf 8f5b 	dmb	ish
 8018c4c:	07db      	lsls	r3, r3, #31
 8018c4e:	d40b      	bmi.n	8018c68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8018c50:	4620      	mov	r0, r4
 8018c52:	f007 f98f 	bl	801ff74 <__cxa_guard_acquire>
 8018c56:	b138      	cbz	r0, 8018c68 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8018c58:	4620      	mov	r0, r4
 8018c5a:	f007 f997 	bl	801ff8c <__cxa_guard_release>
 8018c5e:	4a06      	ldr	r2, [pc, #24]	; (8018c78 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8018c60:	4909      	ldr	r1, [pc, #36]	; (8018c88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8018c62:	480a      	ldr	r0, [pc, #40]	; (8018c8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8018c64:	f007 f97c 	bl	801ff60 <__aeabi_atexit>
 8018c68:	4b05      	ldr	r3, [pc, #20]	; (8018c80 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8018c6a:	63ab      	str	r3, [r5, #56]	; 0x38
 8018c6c:	4b07      	ldr	r3, [pc, #28]	; (8018c8c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8018c6e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018c70:	bd38      	pop	{r3, r4, r5, pc}
 8018c72:	bf00      	nop
 8018c74:	20009ff8 	.word	0x20009ff8
 8018c78:	20000000 	.word	0x20000000
 8018c7c:	08016e73 	.word	0x08016e73
 8018c80:	200000e8 	.word	0x200000e8
 8018c84:	20009ffc 	.word	0x20009ffc
 8018c88:	08016e71 	.word	0x08016e71
 8018c8c:	200000ec 	.word	0x200000ec

08018c90 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8018c90:	b510      	push	{r4, lr}
 8018c92:	4604      	mov	r4, r0
 8018c94:	f7ff ff14 	bl	8018ac0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8018c98:	4620      	mov	r0, r4
 8018c9a:	f7ff ff85 	bl	8018ba8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8018c9e:	4620      	mov	r0, r4
 8018ca0:	f7ff ff48 	bl	8018b34 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018caa:	f7ff bfb7 	b.w	8018c1c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08018cb0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018cb0:	b538      	push	{r3, r4, r5, lr}
 8018cb2:	4c15      	ldr	r4, [pc, #84]	; (8018d08 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018cb4:	7823      	ldrb	r3, [r4, #0]
 8018cb6:	f3bf 8f5b 	dmb	ish
 8018cba:	07da      	lsls	r2, r3, #31
 8018cbc:	4605      	mov	r5, r0
 8018cbe:	d40b      	bmi.n	8018cd8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f007 f957 	bl	801ff74 <__cxa_guard_acquire>
 8018cc6:	b138      	cbz	r0, 8018cd8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018cc8:	4620      	mov	r0, r4
 8018cca:	f007 f95f 	bl	801ff8c <__cxa_guard_release>
 8018cce:	4a0f      	ldr	r2, [pc, #60]	; (8018d0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018cd0:	490f      	ldr	r1, [pc, #60]	; (8018d10 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018cd2:	4810      	ldr	r0, [pc, #64]	; (8018d14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018cd4:	f007 f944 	bl	801ff60 <__aeabi_atexit>
 8018cd8:	4c0f      	ldr	r4, [pc, #60]	; (8018d18 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018cda:	7823      	ldrb	r3, [r4, #0]
 8018cdc:	f3bf 8f5b 	dmb	ish
 8018ce0:	07db      	lsls	r3, r3, #31
 8018ce2:	d40b      	bmi.n	8018cfc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f007 f945 	bl	801ff74 <__cxa_guard_acquire>
 8018cea:	b138      	cbz	r0, 8018cfc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018cec:	4620      	mov	r0, r4
 8018cee:	f007 f94d 	bl	801ff8c <__cxa_guard_release>
 8018cf2:	4a06      	ldr	r2, [pc, #24]	; (8018d0c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018cf4:	4909      	ldr	r1, [pc, #36]	; (8018d1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018cf6:	480a      	ldr	r0, [pc, #40]	; (8018d20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018cf8:	f007 f932 	bl	801ff60 <__aeabi_atexit>
 8018cfc:	4b05      	ldr	r3, [pc, #20]	; (8018d14 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018cfe:	662b      	str	r3, [r5, #96]	; 0x60
 8018d00:	4b07      	ldr	r3, [pc, #28]	; (8018d20 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018d02:	666b      	str	r3, [r5, #100]	; 0x64
 8018d04:	bd38      	pop	{r3, r4, r5, pc}
 8018d06:	bf00      	nop
 8018d08:	20009fe0 	.word	0x20009fe0
 8018d0c:	20000000 	.word	0x20000000
 8018d10:	08016e5f 	.word	0x08016e5f
 8018d14:	200000d0 	.word	0x200000d0
 8018d18:	20009fe4 	.word	0x20009fe4
 8018d1c:	08016e5d 	.word	0x08016e5d
 8018d20:	200000d4 	.word	0x200000d4

08018d24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018d24:	b538      	push	{r3, r4, r5, lr}
 8018d26:	4c15      	ldr	r4, [pc, #84]	; (8018d7c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018d28:	7823      	ldrb	r3, [r4, #0]
 8018d2a:	f3bf 8f5b 	dmb	ish
 8018d2e:	07da      	lsls	r2, r3, #31
 8018d30:	4605      	mov	r5, r0
 8018d32:	d40b      	bmi.n	8018d4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018d34:	4620      	mov	r0, r4
 8018d36:	f007 f91d 	bl	801ff74 <__cxa_guard_acquire>
 8018d3a:	b138      	cbz	r0, 8018d4c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018d3c:	4620      	mov	r0, r4
 8018d3e:	f007 f925 	bl	801ff8c <__cxa_guard_release>
 8018d42:	4a0f      	ldr	r2, [pc, #60]	; (8018d80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018d44:	490f      	ldr	r1, [pc, #60]	; (8018d84 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018d46:	4810      	ldr	r0, [pc, #64]	; (8018d88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018d48:	f007 f90a 	bl	801ff60 <__aeabi_atexit>
 8018d4c:	4c0f      	ldr	r4, [pc, #60]	; (8018d8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018d4e:	7823      	ldrb	r3, [r4, #0]
 8018d50:	f3bf 8f5b 	dmb	ish
 8018d54:	07db      	lsls	r3, r3, #31
 8018d56:	d40b      	bmi.n	8018d70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018d58:	4620      	mov	r0, r4
 8018d5a:	f007 f90b 	bl	801ff74 <__cxa_guard_acquire>
 8018d5e:	b138      	cbz	r0, 8018d70 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018d60:	4620      	mov	r0, r4
 8018d62:	f007 f913 	bl	801ff8c <__cxa_guard_release>
 8018d66:	4a06      	ldr	r2, [pc, #24]	; (8018d80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018d68:	4909      	ldr	r1, [pc, #36]	; (8018d90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018d6a:	480a      	ldr	r0, [pc, #40]	; (8018d94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018d6c:	f007 f8f8 	bl	801ff60 <__aeabi_atexit>
 8018d70:	4b05      	ldr	r3, [pc, #20]	; (8018d88 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018d72:	65ab      	str	r3, [r5, #88]	; 0x58
 8018d74:	4b07      	ldr	r3, [pc, #28]	; (8018d94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018d76:	65eb      	str	r3, [r5, #92]	; 0x5c
 8018d78:	bd38      	pop	{r3, r4, r5, pc}
 8018d7a:	bf00      	nop
 8018d7c:	20009fb8 	.word	0x20009fb8
 8018d80:	20000000 	.word	0x20000000
 8018d84:	08016e63 	.word	0x08016e63
 8018d88:	200000a8 	.word	0x200000a8
 8018d8c:	20009fbc 	.word	0x20009fbc
 8018d90:	08016e61 	.word	0x08016e61
 8018d94:	200000ac 	.word	0x200000ac

08018d98 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8018d98:	b510      	push	{r4, lr}
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	f7ff ff88 	bl	8018cb0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018da0:	4620      	mov	r0, r4
 8018da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018da6:	f7ff bfbd 	b.w	8018d24 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018dac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018dac:	b538      	push	{r3, r4, r5, lr}
 8018dae:	4c15      	ldr	r4, [pc, #84]	; (8018e04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018db0:	7823      	ldrb	r3, [r4, #0]
 8018db2:	f3bf 8f5b 	dmb	ish
 8018db6:	07da      	lsls	r2, r3, #31
 8018db8:	4605      	mov	r5, r0
 8018dba:	d40b      	bmi.n	8018dd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018dbc:	4620      	mov	r0, r4
 8018dbe:	f007 f8d9 	bl	801ff74 <__cxa_guard_acquire>
 8018dc2:	b138      	cbz	r0, 8018dd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018dc4:	4620      	mov	r0, r4
 8018dc6:	f007 f8e1 	bl	801ff8c <__cxa_guard_release>
 8018dca:	4a0f      	ldr	r2, [pc, #60]	; (8018e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018dcc:	490f      	ldr	r1, [pc, #60]	; (8018e0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018dce:	4810      	ldr	r0, [pc, #64]	; (8018e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018dd0:	f007 f8c6 	bl	801ff60 <__aeabi_atexit>
 8018dd4:	4c0f      	ldr	r4, [pc, #60]	; (8018e14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018dd6:	7823      	ldrb	r3, [r4, #0]
 8018dd8:	f3bf 8f5b 	dmb	ish
 8018ddc:	07db      	lsls	r3, r3, #31
 8018dde:	d40b      	bmi.n	8018df8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018de0:	4620      	mov	r0, r4
 8018de2:	f007 f8c7 	bl	801ff74 <__cxa_guard_acquire>
 8018de6:	b138      	cbz	r0, 8018df8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018de8:	4620      	mov	r0, r4
 8018dea:	f007 f8cf 	bl	801ff8c <__cxa_guard_release>
 8018dee:	4a06      	ldr	r2, [pc, #24]	; (8018e08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018df0:	4909      	ldr	r1, [pc, #36]	; (8018e18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018df2:	480a      	ldr	r0, [pc, #40]	; (8018e1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018df4:	f007 f8b4 	bl	801ff60 <__aeabi_atexit>
 8018df8:	4b05      	ldr	r3, [pc, #20]	; (8018e10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018dfa:	672b      	str	r3, [r5, #112]	; 0x70
 8018dfc:	4b07      	ldr	r3, [pc, #28]	; (8018e1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018dfe:	676b      	str	r3, [r5, #116]	; 0x74
 8018e00:	bd38      	pop	{r3, r4, r5, pc}
 8018e02:	bf00      	nop
 8018e04:	20009fb0 	.word	0x20009fb0
 8018e08:	20000000 	.word	0x20000000
 8018e0c:	08016e57 	.word	0x08016e57
 8018e10:	200000a0 	.word	0x200000a0
 8018e14:	20009fb4 	.word	0x20009fb4
 8018e18:	08016e55 	.word	0x08016e55
 8018e1c:	200000a4 	.word	0x200000a4

08018e20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018e20:	b538      	push	{r3, r4, r5, lr}
 8018e22:	4c15      	ldr	r4, [pc, #84]	; (8018e78 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018e24:	7823      	ldrb	r3, [r4, #0]
 8018e26:	f3bf 8f5b 	dmb	ish
 8018e2a:	07da      	lsls	r2, r3, #31
 8018e2c:	4605      	mov	r5, r0
 8018e2e:	d40b      	bmi.n	8018e48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018e30:	4620      	mov	r0, r4
 8018e32:	f007 f89f 	bl	801ff74 <__cxa_guard_acquire>
 8018e36:	b138      	cbz	r0, 8018e48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018e38:	4620      	mov	r0, r4
 8018e3a:	f007 f8a7 	bl	801ff8c <__cxa_guard_release>
 8018e3e:	4a0f      	ldr	r2, [pc, #60]	; (8018e7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018e40:	490f      	ldr	r1, [pc, #60]	; (8018e80 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018e42:	4810      	ldr	r0, [pc, #64]	; (8018e84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018e44:	f007 f88c 	bl	801ff60 <__aeabi_atexit>
 8018e48:	4c0f      	ldr	r4, [pc, #60]	; (8018e88 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018e4a:	7823      	ldrb	r3, [r4, #0]
 8018e4c:	f3bf 8f5b 	dmb	ish
 8018e50:	07db      	lsls	r3, r3, #31
 8018e52:	d40b      	bmi.n	8018e6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018e54:	4620      	mov	r0, r4
 8018e56:	f007 f88d 	bl	801ff74 <__cxa_guard_acquire>
 8018e5a:	b138      	cbz	r0, 8018e6c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	f007 f895 	bl	801ff8c <__cxa_guard_release>
 8018e62:	4a06      	ldr	r2, [pc, #24]	; (8018e7c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018e64:	4909      	ldr	r1, [pc, #36]	; (8018e8c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018e66:	480a      	ldr	r0, [pc, #40]	; (8018e90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018e68:	f007 f87a 	bl	801ff60 <__aeabi_atexit>
 8018e6c:	4b05      	ldr	r3, [pc, #20]	; (8018e84 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018e6e:	66ab      	str	r3, [r5, #104]	; 0x68
 8018e70:	4b07      	ldr	r3, [pc, #28]	; (8018e90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018e72:	66eb      	str	r3, [r5, #108]	; 0x6c
 8018e74:	bd38      	pop	{r3, r4, r5, pc}
 8018e76:	bf00      	nop
 8018e78:	20009fa8 	.word	0x20009fa8
 8018e7c:	20000000 	.word	0x20000000
 8018e80:	08016e5b 	.word	0x08016e5b
 8018e84:	20000098 	.word	0x20000098
 8018e88:	20009fac 	.word	0x20009fac
 8018e8c:	08016e59 	.word	0x08016e59
 8018e90:	2000009c 	.word	0x2000009c

08018e94 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8018e94:	b510      	push	{r4, lr}
 8018e96:	4604      	mov	r4, r0
 8018e98:	f7ff ff88 	bl	8018dac <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018e9c:	4620      	mov	r0, r4
 8018e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ea2:	f7ff bfbd 	b.w	8018e20 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08018ea6 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8018ea6:	b510      	push	{r4, lr}
 8018ea8:	4604      	mov	r4, r0
 8018eaa:	f7ff fff3 	bl	8018e94 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8018eae:	4620      	mov	r0, r4
 8018eb0:	f7ff ff72 	bl	8018d98 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	f7ff fdf9 	bl	8018aac <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f7ff fcfa 	bl	80188b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8018ec0:	4620      	mov	r0, r4
 8018ec2:	f7ff fd75 	bl	80189b0 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8018ec6:	4620      	mov	r0, r4
 8018ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ecc:	f7ff bee0 	b.w	8018c90 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08018ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8018ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ed4:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8018ed8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8018edc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8018ee0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8018ee4:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8018ee8:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8018eec:	8808      	ldrh	r0, [r1, #0]
 8018eee:	fb0e 4708 	mla	r7, lr, r8, r4
 8018ef2:	f1be 0f00 	cmp.w	lr, #0
 8018ef6:	eb02 0a07 	add.w	sl, r2, r7
 8018efa:	db37      	blt.n	8018f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8018efc:	45f3      	cmp	fp, lr
 8018efe:	dd35      	ble.n	8018f6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8018f00:	2c00      	cmp	r4, #0
 8018f02:	db31      	blt.n	8018f68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8018f04:	45a0      	cmp	r8, r4
 8018f06:	dd2f      	ble.n	8018f68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8018f08:	5dd2      	ldrb	r2, [r2, r7]
 8018f0a:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8018f0e:	1c62      	adds	r2, r4, #1
 8018f10:	d42f      	bmi.n	8018f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8018f12:	4590      	cmp	r8, r2
 8018f14:	dd2d      	ble.n	8018f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8018f16:	b366      	cbz	r6, 8018f72 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8018f18:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8018f1c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8018f20:	f11e 0e01 	adds.w	lr, lr, #1
 8018f24:	d429      	bmi.n	8018f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8018f26:	45f3      	cmp	fp, lr
 8018f28:	dd27      	ble.n	8018f7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8018f2a:	f1bc 0f00 	cmp.w	ip, #0
 8018f2e:	f000 80a0 	beq.w	8019072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 8018f32:	2c00      	cmp	r4, #0
 8018f34:	db1f      	blt.n	8018f76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8018f36:	45a0      	cmp	r8, r4
 8018f38:	dd1d      	ble.n	8018f76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8018f3a:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8018f3e:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8018f42:	3401      	adds	r4, #1
 8018f44:	d41c      	bmi.n	8018f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8018f46:	45a0      	cmp	r8, r4
 8018f48:	dd1a      	ble.n	8018f80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8018f4a:	b1de      	cbz	r6, 8018f84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8018f4c:	44d0      	add	r8, sl
 8018f4e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018f52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8018f56:	2e0f      	cmp	r6, #15
 8018f58:	d915      	bls.n	8018f86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8018f5a:	4b49      	ldr	r3, [pc, #292]	; (8019080 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8018f5c:	4a49      	ldr	r2, [pc, #292]	; (8019084 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8018f5e:	484a      	ldr	r0, [pc, #296]	; (8019088 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8018f60:	f240 3155 	movw	r1, #853	; 0x355
 8018f64:	f007 f830 	bl	801ffc8 <__assert_func>
 8018f68:	4681      	mov	r9, r0
 8018f6a:	e7d0      	b.n	8018f0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8018f6c:	4607      	mov	r7, r0
 8018f6e:	4681      	mov	r9, r0
 8018f70:	e7d6      	b.n	8018f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8018f72:	4607      	mov	r7, r0
 8018f74:	e7d4      	b.n	8018f20 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8018f76:	4686      	mov	lr, r0
 8018f78:	e7e3      	b.n	8018f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8018f7a:	4603      	mov	r3, r0
 8018f7c:	4686      	mov	lr, r0
 8018f7e:	e7ea      	b.n	8018f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8018f80:	4603      	mov	r3, r0
 8018f82:	e7e8      	b.n	8018f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8018f84:	4603      	mov	r3, r0
 8018f86:	f1bc 0f0f 	cmp.w	ip, #15
 8018f8a:	d8e6      	bhi.n	8018f5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8018f8c:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8018f90:	fb16 f80c 	smulbb	r8, r6, ip
 8018f94:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8018f98:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8018f9c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8018fa0:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8018fa4:	ea44 0909 	orr.w	r9, r4, r9
 8018fa8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8018fac:	f1cc 0410 	rsb	r4, ip, #16
 8018fb0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8018fb4:	1ba4      	subs	r4, r4, r6
 8018fb6:	041a      	lsls	r2, r3, #16
 8018fb8:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8018fbc:	ea4a 0707 	orr.w	r7, sl, r7
 8018fc0:	4377      	muls	r7, r6
 8018fc2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8018fc6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8018fca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8018fce:	fb04 7409 	mla	r4, r4, r9, r7
 8018fd2:	4313      	orrs	r3, r2
 8018fd4:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8018fd8:	fb08 4303 	mla	r3, r8, r3, r4
 8018fdc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8018fe0:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8018fe4:	4322      	orrs	r2, r4
 8018fe6:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8018fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8018fee:	0d53      	lsrs	r3, r2, #21
 8018ff0:	0952      	lsrs	r2, r2, #5
 8018ff2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018ff6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8018ffa:	431a      	orrs	r2, r3
 8018ffc:	b293      	uxth	r3, r2
 8018ffe:	b2af      	uxth	r7, r5
 8019000:	1202      	asrs	r2, r0, #8
 8019002:	43ed      	mvns	r5, r5
 8019004:	b2ed      	uxtb	r5, r5
 8019006:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801900a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801900e:	fb12 f205 	smulbb	r2, r2, r5
 8019012:	10c6      	asrs	r6, r0, #3
 8019014:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019018:	fb0c 2c07 	mla	ip, ip, r7, r2
 801901c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019020:	10da      	asrs	r2, r3, #3
 8019022:	fb16 f605 	smulbb	r6, r6, r5
 8019026:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801902a:	fb02 6207 	mla	r2, r2, r7, r6
 801902e:	b296      	uxth	r6, r2
 8019030:	00c2      	lsls	r2, r0, #3
 8019032:	00dc      	lsls	r4, r3, #3
 8019034:	b2d2      	uxtb	r2, r2
 8019036:	b2e4      	uxtb	r4, r4
 8019038:	fb12 f205 	smulbb	r2, r2, r5
 801903c:	fb04 2207 	mla	r2, r4, r7, r2
 8019040:	fa1f fc8c 	uxth.w	ip, ip
 8019044:	b292      	uxth	r2, r2
 8019046:	f10c 0301 	add.w	r3, ip, #1
 801904a:	1c50      	adds	r0, r2, #1
 801904c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8019050:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019054:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019058:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801905c:	4313      	orrs	r3, r2
 801905e:	1c72      	adds	r2, r6, #1
 8019060:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8019064:	0952      	lsrs	r2, r2, #5
 8019066:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801906a:	4313      	orrs	r3, r2
 801906c:	800b      	strh	r3, [r1, #0]
 801906e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019072:	2e0f      	cmp	r6, #15
 8019074:	f63f af71 	bhi.w	8018f5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8019078:	4603      	mov	r3, r0
 801907a:	4686      	mov	lr, r0
 801907c:	e786      	b.n	8018f8c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801907e:	bf00      	nop
 8019080:	08023e5d 	.word	0x08023e5d
 8019084:	08024462 	.word	0x08024462
 8019088:	08023ee5 	.word	0x08023ee5

0801908c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801908c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019090:	ed2d 8b08 	vpush	{d8-d11}
 8019094:	b09b      	sub	sp, #108	; 0x6c
 8019096:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 801909a:	9309      	str	r3, [sp, #36]	; 0x24
 801909c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 80190a0:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 80190a2:	930a      	str	r3, [sp, #40]	; 0x28
 80190a4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 80190a8:	930e      	str	r3, [sp, #56]	; 0x38
 80190aa:	910d      	str	r1, [sp, #52]	; 0x34
 80190ac:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80190b0:	9018      	str	r0, [sp, #96]	; 0x60
 80190b2:	6870      	ldr	r0, [r6, #4]
 80190b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80190b6:	fb00 1303 	mla	r3, r0, r3, r1
 80190ba:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80190bc:	6831      	ldr	r1, [r6, #0]
 80190be:	6856      	ldr	r6, [r2, #4]
 80190c0:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 80190c4:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 80190c8:	6813      	ldr	r3, [r2, #0]
 80190ca:	930c      	str	r3, [sp, #48]	; 0x30
 80190cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80190ce:	43db      	mvns	r3, r3
 80190d0:	b2db      	uxtb	r3, r3
 80190d2:	eeb0 aa40 	vmov.f32	s20, s0
 80190d6:	eef0 9a60 	vmov.f32	s19, s1
 80190da:	eeb0 9a41 	vmov.f32	s18, s2
 80190de:	eeb0 8a62 	vmov.f32	s16, s5
 80190e2:	eef0 8a43 	vmov.f32	s17, s6
 80190e6:	eef0 ba44 	vmov.f32	s23, s8
 80190ea:	eeb0 ba64 	vmov.f32	s22, s9
 80190ee:	eef0 aa45 	vmov.f32	s21, s10
 80190f2:	3604      	adds	r6, #4
 80190f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80190f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	dc03      	bgt.n	8019104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80190fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80190fe:	2b00      	cmp	r3, #0
 8019100:	f340 8215 	ble.w	801952e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8019104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019106:	2b00      	cmp	r3, #0
 8019108:	f340 8102 	ble.w	8019310 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801910c:	ea5f 4229 	movs.w	r2, r9, asr #16
 8019110:	ea4f 4328 	mov.w	r3, r8, asr #16
 8019114:	d42c      	bmi.n	8019170 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 8019116:	1c51      	adds	r1, r2, #1
 8019118:	428c      	cmp	r4, r1
 801911a:	dd2c      	ble.n	8019176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801911c:	2b00      	cmp	r3, #0
 801911e:	db2a      	blt.n	8019176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8019120:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019122:	1c59      	adds	r1, r3, #1
 8019124:	4288      	cmp	r0, r1
 8019126:	dd26      	ble.n	8019176 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 8019128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801912a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801912c:	3b01      	subs	r3, #1
 801912e:	fb02 9203 	mla	r2, r2, r3, r9
 8019132:	1412      	asrs	r2, r2, #16
 8019134:	d429      	bmi.n	801918a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8019136:	3201      	adds	r2, #1
 8019138:	4294      	cmp	r4, r2
 801913a:	dd26      	ble.n	801918a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801913c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801913e:	fb02 8303 	mla	r3, r2, r3, r8
 8019142:	141b      	asrs	r3, r3, #16
 8019144:	d421      	bmi.n	801918a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8019146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019148:	3301      	adds	r3, #1
 801914a:	429a      	cmp	r2, r3
 801914c:	dd1d      	ble.n	801918a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801914e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019152:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8019156:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 801915a:	9312      	str	r3, [sp, #72]	; 0x48
 801915c:	f1be 0f00 	cmp.w	lr, #0
 8019160:	f300 8138 	bgt.w	80193d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 8019164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019166:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801916a:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801916e:	e0d1      	b.n	8019314 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 8019170:	1c51      	adds	r1, r2, #1
 8019172:	f040 80c3 	bne.w	80192fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019176:	42a2      	cmp	r2, r4
 8019178:	f280 80c0 	bge.w	80192fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801917c:	1c5f      	adds	r7, r3, #1
 801917e:	f2c0 80bd 	blt.w	80192fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8019182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019184:	4293      	cmp	r3, r2
 8019186:	f280 80b9 	bge.w	80192fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 801918a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801918e:	4657      	mov	r7, sl
 8019190:	f1bb 0f00 	cmp.w	fp, #0
 8019194:	dde6      	ble.n	8019164 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8019196:	ea5f 4229 	movs.w	r2, r9, asr #16
 801919a:	ea4f 4328 	mov.w	r3, r8, asr #16
 801919e:	f3c9 3003 	ubfx	r0, r9, #12, #4
 80191a2:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80191a6:	f100 80fc 	bmi.w	80193a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 80191aa:	f102 0c01 	add.w	ip, r2, #1
 80191ae:	4564      	cmp	r4, ip
 80191b0:	f340 80f9 	ble.w	80193a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	f2c0 80f6 	blt.w	80193a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80191ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80191bc:	f103 0c01 	add.w	ip, r3, #1
 80191c0:	4565      	cmp	r5, ip
 80191c2:	f340 80f0 	ble.w	80193a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 80191c6:	fb03 2304 	mla	r3, r3, r4, r2
 80191ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80191cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80191ce:	441a      	add	r2, r3
 80191d0:	5ceb      	ldrb	r3, [r5, r3]
 80191d2:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 80191d6:	2800      	cmp	r0, #0
 80191d8:	f000 80db 	beq.w	8019392 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 80191dc:	7853      	ldrb	r3, [r2, #1]
 80191de:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80191e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80191e4:	b141      	cbz	r1, 80191f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80191e6:	1913      	adds	r3, r2, r4
 80191e8:	5d12      	ldrb	r2, [r2, r4]
 80191ea:	785b      	ldrb	r3, [r3, #1]
 80191ec:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80191f0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80191f4:	9210      	str	r2, [sp, #64]	; 0x40
 80191f6:	9314      	str	r3, [sp, #80]	; 0x50
 80191f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80191fa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80191fc:	fb10 f201 	smulbb	r2, r0, r1
 8019200:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8019204:	10d2      	asrs	r2, r2, #3
 8019206:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801920a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801920e:	ea4c 0c03 	orr.w	ip, ip, r3
 8019212:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8019216:	930f      	str	r3, [sp, #60]	; 0x3c
 8019218:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801921a:	041b      	lsls	r3, r3, #16
 801921c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8019220:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8019224:	432b      	orrs	r3, r5
 8019226:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8019228:	4353      	muls	r3, r2
 801922a:	fb05 330c 	mla	r3, r5, ip, r3
 801922e:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8019232:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8019236:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801923a:	ea4c 0e0e 	orr.w	lr, ip, lr
 801923e:	f1c1 0c10 	rsb	ip, r1, #16
 8019242:	ebac 0c00 	sub.w	ip, ip, r0
 8019246:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801924a:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801924e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019250:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019252:	0418      	lsls	r0, r3, #16
 8019254:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8019258:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801925c:	4318      	orrs	r0, r3
 801925e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8019262:	fb02 c200 	mla	r2, r2, r0, ip
 8019266:	0d53      	lsrs	r3, r2, #21
 8019268:	0952      	lsrs	r2, r2, #5
 801926a:	f8b7 c000 	ldrh.w	ip, [r7]
 801926e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019272:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019276:	431a      	orrs	r2, r3
 8019278:	b292      	uxth	r2, r2
 801927a:	ea4f 212c 	mov.w	r1, ip, asr #8
 801927e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019282:	1210      	asrs	r0, r2, #8
 8019284:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8019288:	fb11 f105 	smulbb	r1, r1, r5
 801928c:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8019290:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8019294:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019298:	fb00 1003 	mla	r0, r0, r3, r1
 801929c:	fa5f fc8c 	uxtb.w	ip, ip
 80192a0:	10d1      	asrs	r1, r2, #3
 80192a2:	00d2      	lsls	r2, r2, #3
 80192a4:	fb1c fc05 	smulbb	ip, ip, r5
 80192a8:	b2d2      	uxtb	r2, r2
 80192aa:	fb02 c203 	mla	r2, r2, r3, ip
 80192ae:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80192b2:	b280      	uxth	r0, r0
 80192b4:	b292      	uxth	r2, r2
 80192b6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80192ba:	fb1e fe05 	smulbb	lr, lr, r5
 80192be:	fb01 e103 	mla	r1, r1, r3, lr
 80192c2:	f102 0c01 	add.w	ip, r2, #1
 80192c6:	1c43      	adds	r3, r0, #1
 80192c8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80192cc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80192d0:	b289      	uxth	r1, r1
 80192d2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80192d6:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80192da:	4313      	orrs	r3, r2
 80192dc:	1c4a      	adds	r2, r1, #1
 80192de:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80192e2:	0949      	lsrs	r1, r1, #5
 80192e4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80192e8:	430b      	orrs	r3, r1
 80192ea:	803b      	strh	r3, [r7, #0]
 80192ec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80192ee:	4499      	add	r9, r3
 80192f0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80192f2:	3702      	adds	r7, #2
 80192f4:	4498      	add	r8, r3
 80192f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80192fa:	e749      	b.n	8019190 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 80192fc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80192fe:	4499      	add	r9, r3
 8019300:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019302:	4498      	add	r8, r3
 8019304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019306:	3b01      	subs	r3, #1
 8019308:	9309      	str	r3, [sp, #36]	; 0x24
 801930a:	f10a 0a02 	add.w	sl, sl, #2
 801930e:	e6f9      	b.n	8019104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019310:	f47f af0a 	bne.w	8019128 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8019314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019316:	2b00      	cmp	r3, #0
 8019318:	f340 8109 	ble.w	801952e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801931c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019324:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019328:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801932a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801932e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019332:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019336:	eef0 6a48 	vmov.f32	s13, s16
 801933a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801933e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019342:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019346:	ee16 9a90 	vmov	r9, s13
 801934a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801934e:	eef0 6a68 	vmov.f32	s13, s17
 8019352:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019356:	ee18 2a10 	vmov	r2, s16
 801935a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801935e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019362:	ee18 2a90 	vmov	r2, s17
 8019366:	932f      	str	r3, [sp, #188]	; 0xbc
 8019368:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801936a:	fb92 f3f3 	sdiv	r3, r2, r3
 801936e:	9330      	str	r3, [sp, #192]	; 0xc0
 8019370:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019372:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8019374:	3b01      	subs	r3, #1
 8019376:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801937a:	930d      	str	r3, [sp, #52]	; 0x34
 801937c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801937e:	bf08      	it	eq
 8019380:	4613      	moveq	r3, r2
 8019382:	ee16 8a90 	vmov	r8, s13
 8019386:	9309      	str	r3, [sp, #36]	; 0x24
 8019388:	eef0 8a67 	vmov.f32	s17, s15
 801938c:	eeb0 8a47 	vmov.f32	s16, s14
 8019390:	e6b1      	b.n	80190f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019392:	2900      	cmp	r1, #0
 8019394:	f43f af30 	beq.w	80191f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8019398:	5d13      	ldrb	r3, [r2, r4]
 801939a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801939e:	9310      	str	r3, [sp, #64]	; 0x40
 80193a0:	e72a      	b.n	80191f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 80193a2:	1c55      	adds	r5, r2, #1
 80193a4:	d1a2      	bne.n	80192ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80193a6:	4294      	cmp	r4, r2
 80193a8:	dda0      	ble.n	80192ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80193aa:	1c5d      	adds	r5, r3, #1
 80193ac:	db9e      	blt.n	80192ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80193ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80193b0:	429d      	cmp	r5, r3
 80193b2:	dd9b      	ble.n	80192ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80193b4:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80193b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80193bc:	9202      	str	r2, [sp, #8]
 80193be:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80193c2:	e9cd 4300 	strd	r4, r3, [sp]
 80193c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193c8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80193ca:	4633      	mov	r3, r6
 80193cc:	4639      	mov	r1, r7
 80193ce:	f7ff fd7f 	bl	8018ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 80193d2:	e78b      	b.n	80192ec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 80193d4:	ea4f 4329 	mov.w	r3, r9, asr #16
 80193d8:	ea4f 4228 	mov.w	r2, r8, asr #16
 80193dc:	fb04 3202 	mla	r2, r4, r2, r3
 80193e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80193e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193e4:	4413      	add	r3, r2
 80193e6:	5c8a      	ldrb	r2, [r1, r2]
 80193e8:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 80193ec:	f3c8 3003 	ubfx	r0, r8, #12, #4
 80193f0:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 80193f4:	f1bc 0f00 	cmp.w	ip, #0
 80193f8:	f000 8091 	beq.w	801951e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 80193fc:	785a      	ldrb	r2, [r3, #1]
 80193fe:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8019402:	9215      	str	r2, [sp, #84]	; 0x54
 8019404:	b140      	cbz	r0, 8019418 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8019406:	191a      	adds	r2, r3, r4
 8019408:	5d1b      	ldrb	r3, [r3, r4]
 801940a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801940e:	9311      	str	r3, [sp, #68]	; 0x44
 8019410:	7853      	ldrb	r3, [r2, #1]
 8019412:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8019416:	9316      	str	r3, [sp, #88]	; 0x58
 8019418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801941a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801941c:	fb1c f200 	smulbb	r2, ip, r0
 8019420:	041f      	lsls	r7, r3, #16
 8019422:	10d2      	asrs	r2, r2, #3
 8019424:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8019428:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801942c:	431f      	orrs	r7, r3
 801942e:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8019432:	9319      	str	r3, [sp, #100]	; 0x64
 8019434:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019436:	041b      	lsls	r3, r3, #16
 8019438:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801943c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8019440:	ea43 030b 	orr.w	r3, r3, fp
 8019444:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8019446:	4353      	muls	r3, r2
 8019448:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801944c:	fb05 3707 	mla	r7, r5, r7, r3
 8019450:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019454:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8019458:	ea43 0b01 	orr.w	fp, r3, r1
 801945c:	f1c0 0110 	rsb	r1, r0, #16
 8019460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019462:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019464:	eba1 0c0c 	sub.w	ip, r1, ip
 8019468:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801946c:	fb0c 770b 	mla	r7, ip, fp, r7
 8019470:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8019474:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8019478:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801947c:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8019480:	ea4c 0c0b 	orr.w	ip, ip, fp
 8019484:	fb02 770c 	mla	r7, r2, ip, r7
 8019488:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801948a:	0d79      	lsrs	r1, r7, #21
 801948c:	8812      	ldrh	r2, [r2, #0]
 801948e:	097f      	lsrs	r7, r7, #5
 8019490:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019494:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8019498:	430f      	orrs	r7, r1
 801949a:	1211      	asrs	r1, r2, #8
 801949c:	b2bb      	uxth	r3, r7
 801949e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80194a2:	fb11 f105 	smulbb	r1, r1, r5
 80194a6:	1218      	asrs	r0, r3, #8
 80194a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80194aa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80194ae:	fb00 1005 	mla	r0, r0, r5, r1
 80194b2:	10d7      	asrs	r7, r2, #3
 80194b4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80194b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80194ba:	fb17 f705 	smulbb	r7, r7, r5
 80194be:	10d9      	asrs	r1, r3, #3
 80194c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80194c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80194c6:	fb01 7105 	mla	r1, r1, r5, r7
 80194ca:	00d2      	lsls	r2, r2, #3
 80194cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80194ce:	b2d2      	uxtb	r2, r2
 80194d0:	fb12 f205 	smulbb	r2, r2, r5
 80194d4:	00db      	lsls	r3, r3, #3
 80194d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	b280      	uxth	r0, r0
 80194dc:	fb03 2305 	mla	r3, r3, r5, r2
 80194e0:	b29b      	uxth	r3, r3
 80194e2:	b289      	uxth	r1, r1
 80194e4:	1c42      	adds	r2, r0, #1
 80194e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80194ea:	1c4f      	adds	r7, r1, #1
 80194ec:	1c5a      	adds	r2, r3, #1
 80194ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80194f2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80194f6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80194fa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80194fe:	0949      	lsrs	r1, r1, #5
 8019500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019502:	4310      	orrs	r0, r2
 8019504:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019508:	4308      	orrs	r0, r1
 801950a:	f823 0b02 	strh.w	r0, [r3], #2
 801950e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019510:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8019512:	4499      	add	r9, r3
 8019514:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019516:	f10e 3eff 	add.w	lr, lr, #4294967295
 801951a:	4498      	add	r8, r3
 801951c:	e61e      	b.n	801915c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801951e:	2800      	cmp	r0, #0
 8019520:	f43f af7a 	beq.w	8019418 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8019524:	5d1b      	ldrb	r3, [r3, r4]
 8019526:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801952a:	9311      	str	r3, [sp, #68]	; 0x44
 801952c:	e774      	b.n	8019418 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 801952e:	b01b      	add	sp, #108	; 0x6c
 8019530:	ecbd 8b08 	vpop	{d8-d11}
 8019534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8019538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801953c:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8019540:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8019544:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8019548:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 801954c:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8019550:	8808      	ldrh	r0, [r1, #0]
 8019552:	fb06 570e 	mla	r7, r6, lr, r5
 8019556:	2e00      	cmp	r6, #0
 8019558:	eb02 0807 	add.w	r8, r2, r7
 801955c:	db38      	blt.n	80195d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 801955e:	45b1      	cmp	r9, r6
 8019560:	dd36      	ble.n	80195d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8019562:	2d00      	cmp	r5, #0
 8019564:	db32      	blt.n	80195cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8019566:	45ae      	cmp	lr, r5
 8019568:	dd30      	ble.n	80195cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 801956a:	5dd2      	ldrb	r2, [r2, r7]
 801956c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8019570:	1c6a      	adds	r2, r5, #1
 8019572:	d430      	bmi.n	80195d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8019574:	4596      	cmp	lr, r2
 8019576:	dd2e      	ble.n	80195d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8019578:	b36c      	cbz	r4, 80195d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 801957a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801957e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8019582:	3601      	adds	r6, #1
 8019584:	d42b      	bmi.n	80195de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8019586:	45b1      	cmp	r9, r6
 8019588:	dd29      	ble.n	80195de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 801958a:	f1bc 0f00 	cmp.w	ip, #0
 801958e:	d028      	beq.n	80195e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8019590:	2d00      	cmp	r5, #0
 8019592:	db22      	blt.n	80195da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8019594:	45ae      	cmp	lr, r5
 8019596:	dd20      	ble.n	80195da <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8019598:	f818 600e 	ldrb.w	r6, [r8, lr]
 801959c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 80195a0:	3501      	adds	r5, #1
 80195a2:	d407      	bmi.n	80195b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80195a4:	45ae      	cmp	lr, r5
 80195a6:	dd05      	ble.n	80195b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80195a8:	b134      	cbz	r4, 80195b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80195aa:	44c6      	add	lr, r8
 80195ac:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80195b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80195b4:	2c0f      	cmp	r4, #15
 80195b6:	d802      	bhi.n	80195be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80195b8:	f1bc 0f0f 	cmp.w	ip, #15
 80195bc:	d914      	bls.n	80195e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 80195be:	4b26      	ldr	r3, [pc, #152]	; (8019658 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 80195c0:	4a26      	ldr	r2, [pc, #152]	; (801965c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 80195c2:	4827      	ldr	r0, [pc, #156]	; (8019660 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 80195c4:	f240 3155 	movw	r1, #853	; 0x355
 80195c8:	f006 fcfe 	bl	801ffc8 <__assert_func>
 80195cc:	4607      	mov	r7, r0
 80195ce:	e7cf      	b.n	8019570 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 80195d0:	4602      	mov	r2, r0
 80195d2:	4607      	mov	r7, r0
 80195d4:	e7d5      	b.n	8019582 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80195d6:	4602      	mov	r2, r0
 80195d8:	e7d3      	b.n	8019582 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 80195da:	4606      	mov	r6, r0
 80195dc:	e7e0      	b.n	80195a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 80195de:	4606      	mov	r6, r0
 80195e0:	e7e8      	b.n	80195b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 80195e2:	2c0f      	cmp	r4, #15
 80195e4:	d8eb      	bhi.n	80195be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80195e6:	4606      	mov	r6, r0
 80195e8:	043d      	lsls	r5, r7, #16
 80195ea:	fb14 f30c 	smulbb	r3, r4, ip
 80195ee:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 80195f2:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80195f6:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80195fa:	10db      	asrs	r3, r3, #3
 80195fc:	432f      	orrs	r7, r5
 80195fe:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8019602:	f1cc 0510 	rsb	r5, ip, #16
 8019606:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801960a:	1b2d      	subs	r5, r5, r4
 801960c:	ea4e 0202 	orr.w	r2, lr, r2
 8019610:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8019614:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8019618:	4354      	muls	r4, r2
 801961a:	fb05 4507 	mla	r5, r5, r7, r4
 801961e:	0404      	lsls	r4, r0, #16
 8019620:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8019624:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019628:	4320      	orrs	r0, r4
 801962a:	fb03 5400 	mla	r4, r3, r0, r5
 801962e:	0430      	lsls	r0, r6, #16
 8019630:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8019634:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8019638:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801963c:	4330      	orrs	r0, r6
 801963e:	fb03 4000 	mla	r0, r3, r0, r4
 8019642:	0d43      	lsrs	r3, r0, #21
 8019644:	0940      	lsrs	r0, r0, #5
 8019646:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801964a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801964e:	4318      	orrs	r0, r3
 8019650:	8008      	strh	r0, [r1, #0]
 8019652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019656:	bf00      	nop
 8019658:	08023e5d 	.word	0x08023e5d
 801965c:	08024462 	.word	0x08024462
 8019660:	08023ee5 	.word	0x08023ee5

08019664 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019668:	ed2d 8b0a 	vpush	{d8-d12}
 801966c:	b095      	sub	sp, #84	; 0x54
 801966e:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 8019672:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8019674:	9306      	str	r3, [sp, #24]
 8019676:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801967a:	9109      	str	r1, [sp, #36]	; 0x24
 801967c:	9307      	str	r3, [sp, #28]
 801967e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019682:	9012      	str	r0, [sp, #72]	; 0x48
 8019684:	6878      	ldr	r0, [r7, #4]
 8019686:	9211      	str	r2, [sp, #68]	; 0x44
 8019688:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801968a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801968e:	fb00 1303 	mla	r3, r0, r3, r1
 8019692:	6839      	ldr	r1, [r7, #0]
 8019694:	6857      	ldr	r7, [r2, #4]
 8019696:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 801969a:	6813      	ldr	r3, [r2, #0]
 801969c:	9308      	str	r3, [sp, #32]
 801969e:	eeb0 aa40 	vmov.f32	s20, s0
 80196a2:	eef0 9a60 	vmov.f32	s19, s1
 80196a6:	eeb0 9a41 	vmov.f32	s18, s2
 80196aa:	eeb0 8a62 	vmov.f32	s16, s5
 80196ae:	eef0 8a43 	vmov.f32	s17, s6
 80196b2:	eeb0 ca44 	vmov.f32	s24, s8
 80196b6:	eef0 ba64 	vmov.f32	s23, s9
 80196ba:	eeb0 ba45 	vmov.f32	s22, s10
 80196be:	3704      	adds	r7, #4
 80196c0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80196c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	dc03      	bgt.n	80196d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 80196ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	f340 819a 	ble.w	8019a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 80196d2:	9b06      	ldr	r3, [sp, #24]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	f340 80c4 	ble.w	8019862 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 80196da:	ea5f 4229 	movs.w	r2, r9, asr #16
 80196de:	ea4f 4326 	mov.w	r3, r6, asr #16
 80196e2:	d429      	bmi.n	8019738 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 80196e4:	1c51      	adds	r1, r2, #1
 80196e6:	428c      	cmp	r4, r1
 80196e8:	dd29      	ble.n	801973e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	db27      	blt.n	801973e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80196ee:	9807      	ldr	r0, [sp, #28]
 80196f0:	1c59      	adds	r1, r3, #1
 80196f2:	4288      	cmp	r0, r1
 80196f4:	dd23      	ble.n	801973e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 80196f6:	9b06      	ldr	r3, [sp, #24]
 80196f8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80196fa:	3b01      	subs	r3, #1
 80196fc:	fb02 9203 	mla	r2, r2, r3, r9
 8019700:	1412      	asrs	r2, r2, #16
 8019702:	d425      	bmi.n	8019750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8019704:	3201      	adds	r2, #1
 8019706:	4294      	cmp	r4, r2
 8019708:	dd22      	ble.n	8019750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801970a:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801970c:	fb02 6303 	mla	r3, r2, r3, r6
 8019710:	141b      	asrs	r3, r3, #16
 8019712:	d41d      	bmi.n	8019750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8019714:	9a07      	ldr	r2, [sp, #28]
 8019716:	3301      	adds	r3, #1
 8019718:	429a      	cmp	r2, r3
 801971a:	dd19      	ble.n	8019750 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801971c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019720:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8019724:	f1b8 0f00 	cmp.w	r8, #0
 8019728:	f300 80f8 	bgt.w	801991c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 801972c:	9b06      	ldr	r3, [sp, #24]
 801972e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8019732:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8019736:	e096      	b.n	8019866 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8019738:	1c51      	adds	r1, r2, #1
 801973a:	f040 8088 	bne.w	801984e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801973e:	42a2      	cmp	r2, r4
 8019740:	f280 8085 	bge.w	801984e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8019744:	1c5a      	adds	r2, r3, #1
 8019746:	f2c0 8082 	blt.w	801984e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801974a:	9a07      	ldr	r2, [sp, #28]
 801974c:	4293      	cmp	r3, r2
 801974e:	da7e      	bge.n	801984e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8019750:	f8dd b018 	ldr.w	fp, [sp, #24]
 8019754:	46d0      	mov	r8, sl
 8019756:	f1bb 0f00 	cmp.w	fp, #0
 801975a:	dde7      	ble.n	801972c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801975c:	ea5f 4229 	movs.w	r2, r9, asr #16
 8019760:	ea4f 4326 	mov.w	r3, r6, asr #16
 8019764:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8019768:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801976c:	f100 80c0 	bmi.w	80198f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 8019770:	f102 0c01 	add.w	ip, r2, #1
 8019774:	4564      	cmp	r4, ip
 8019776:	f340 80bd 	ble.w	80198f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801977a:	2b00      	cmp	r3, #0
 801977c:	f2c0 80ba 	blt.w	80198f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8019780:	9d07      	ldr	r5, [sp, #28]
 8019782:	f103 0c01 	add.w	ip, r3, #1
 8019786:	4565      	cmp	r5, ip
 8019788:	f340 80b4 	ble.w	80198f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801978c:	fb03 2304 	mla	r3, r3, r4, r2
 8019790:	9d08      	ldr	r5, [sp, #32]
 8019792:	9a08      	ldr	r2, [sp, #32]
 8019794:	441a      	add	r2, r3
 8019796:	5ceb      	ldrb	r3, [r5, r3]
 8019798:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 801979c:	2800      	cmp	r0, #0
 801979e:	f000 809f 	beq.w	80198e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 80197a2:	7853      	ldrb	r3, [r2, #1]
 80197a4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80197a8:	930d      	str	r3, [sp, #52]	; 0x34
 80197aa:	b141      	cbz	r1, 80197be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80197ac:	1913      	adds	r3, r2, r4
 80197ae:	5d12      	ldrb	r2, [r2, r4]
 80197b0:	785b      	ldrb	r3, [r3, #1]
 80197b2:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80197b6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80197ba:	920a      	str	r2, [sp, #40]	; 0x28
 80197bc:	930e      	str	r3, [sp, #56]	; 0x38
 80197be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80197c2:	fb10 f201 	smulbb	r2, r0, r1
 80197c6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80197ca:	10d2      	asrs	r2, r2, #3
 80197cc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80197d0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80197d4:	ea4c 0c03 	orr.w	ip, ip, r3
 80197d8:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 80197dc:	930c      	str	r3, [sp, #48]	; 0x30
 80197de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197e0:	041b      	lsls	r3, r3, #16
 80197e2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80197e6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80197ea:	432b      	orrs	r3, r5
 80197ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80197ee:	4353      	muls	r3, r2
 80197f0:	fb05 330c 	mla	r3, r5, ip, r3
 80197f4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80197f8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80197fc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8019800:	ea4c 0e0e 	orr.w	lr, ip, lr
 8019804:	f1c1 0c10 	rsb	ip, r1, #16
 8019808:	ebac 0c00 	sub.w	ip, ip, r0
 801980c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8019810:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8019814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019816:	0418      	lsls	r0, r3, #16
 8019818:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801981c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8019820:	4318      	orrs	r0, r3
 8019822:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8019826:	fb02 c200 	mla	r2, r2, r0, ip
 801982a:	0d53      	lsrs	r3, r2, #21
 801982c:	0952      	lsrs	r2, r2, #5
 801982e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019832:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019836:	431a      	orrs	r2, r3
 8019838:	f8a8 2000 	strh.w	r2, [r8]
 801983c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801983e:	4499      	add	r9, r3
 8019840:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019842:	f108 0802 	add.w	r8, r8, #2
 8019846:	441e      	add	r6, r3
 8019848:	f10b 3bff 	add.w	fp, fp, #4294967295
 801984c:	e783      	b.n	8019756 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801984e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019850:	4499      	add	r9, r3
 8019852:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019854:	441e      	add	r6, r3
 8019856:	9b06      	ldr	r3, [sp, #24]
 8019858:	3b01      	subs	r3, #1
 801985a:	9306      	str	r3, [sp, #24]
 801985c:	f10a 0a02 	add.w	sl, sl, #2
 8019860:	e737      	b.n	80196d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8019862:	f47f af48 	bne.w	80196f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8019866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019868:	2b00      	cmp	r3, #0
 801986a:	f340 80cc 	ble.w	8019a06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801986e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8019872:	ee79 9aab 	vadd.f32	s19, s19, s23
 8019876:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801987a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801987c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8019880:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019884:	eef0 6a48 	vmov.f32	s13, s16
 8019888:	ee69 7a27 	vmul.f32	s15, s18, s15
 801988c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019890:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019894:	ee16 9a90 	vmov	r9, s13
 8019898:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801989c:	eef0 6a68 	vmov.f32	s13, s17
 80198a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80198a4:	ee18 2a10 	vmov	r2, s16
 80198a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80198ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80198b0:	ee18 2a90 	vmov	r2, s17
 80198b4:	932b      	str	r3, [sp, #172]	; 0xac
 80198b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80198b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80198bc:	932c      	str	r3, [sp, #176]	; 0xb0
 80198be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80198c2:	3b01      	subs	r3, #1
 80198c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198c8:	9309      	str	r3, [sp, #36]	; 0x24
 80198ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80198cc:	bf08      	it	eq
 80198ce:	4613      	moveq	r3, r2
 80198d0:	ee16 6a90 	vmov	r6, s13
 80198d4:	9306      	str	r3, [sp, #24]
 80198d6:	eef0 8a67 	vmov.f32	s17, s15
 80198da:	eeb0 8a47 	vmov.f32	s16, s14
 80198de:	e6f1      	b.n	80196c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 80198e0:	2900      	cmp	r1, #0
 80198e2:	f43f af6c 	beq.w	80197be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80198e6:	5d13      	ldrb	r3, [r2, r4]
 80198e8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80198ec:	930a      	str	r3, [sp, #40]	; 0x28
 80198ee:	e766      	b.n	80197be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 80198f0:	1c55      	adds	r5, r2, #1
 80198f2:	d1a3      	bne.n	801983c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80198f4:	4294      	cmp	r4, r2
 80198f6:	dda1      	ble.n	801983c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80198f8:	1c5d      	adds	r5, r3, #1
 80198fa:	db9f      	blt.n	801983c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80198fc:	9d07      	ldr	r5, [sp, #28]
 80198fe:	429d      	cmp	r5, r3
 8019900:	dd9c      	ble.n	801983c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 8019902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019906:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801990a:	e9cd 4500 	strd	r4, r5, [sp]
 801990e:	463b      	mov	r3, r7
 8019910:	9a08      	ldr	r2, [sp, #32]
 8019912:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019914:	4641      	mov	r1, r8
 8019916:	f7ff fe0f 	bl	8019538 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801991a:	e78f      	b.n	801983c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 801991c:	ea4f 4329 	mov.w	r3, r9, asr #16
 8019920:	1432      	asrs	r2, r6, #16
 8019922:	fb04 3202 	mla	r2, r4, r2, r3
 8019926:	9908      	ldr	r1, [sp, #32]
 8019928:	9b08      	ldr	r3, [sp, #32]
 801992a:	4413      	add	r3, r2
 801992c:	5c8a      	ldrb	r2, [r1, r2]
 801992e:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 8019932:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019936:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 801993a:	f1be 0f00 	cmp.w	lr, #0
 801993e:	d05b      	beq.n	80199f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 8019940:	785a      	ldrb	r2, [r3, #1]
 8019942:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8019946:	920f      	str	r2, [sp, #60]	; 0x3c
 8019948:	b140      	cbz	r0, 801995c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801994a:	191a      	adds	r2, r3, r4
 801994c:	5d1b      	ldrb	r3, [r3, r4]
 801994e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8019952:	930b      	str	r3, [sp, #44]	; 0x2c
 8019954:	7853      	ldrb	r3, [r2, #1]
 8019956:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801995a:	9310      	str	r3, [sp, #64]	; 0x40
 801995c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801995e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019960:	fb1e f200 	smulbb	r2, lr, r0
 8019964:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8019968:	10d2      	asrs	r2, r2, #3
 801996a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801996e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8019972:	ea4c 0c03 	orr.w	ip, ip, r3
 8019976:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801997a:	9313      	str	r3, [sp, #76]	; 0x4c
 801997c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801997e:	041b      	lsls	r3, r3, #16
 8019980:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8019984:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8019988:	ea43 030b 	orr.w	r3, r3, fp
 801998c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801998e:	4353      	muls	r3, r2
 8019990:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8019994:	fb05 3c0c 	mla	ip, r5, ip, r3
 8019998:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801999c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80199a0:	ea43 0b01 	orr.w	fp, r3, r1
 80199a4:	f1c0 0110 	rsb	r1, r0, #16
 80199a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199aa:	eba1 0e0e 	sub.w	lr, r1, lr
 80199ae:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80199b2:	fb0e cc0b 	mla	ip, lr, fp, ip
 80199b6:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80199ba:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80199be:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80199c2:	ea4b 0e0e 	orr.w	lr, fp, lr
 80199c6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80199ca:	fb02 cc0e 	mla	ip, r2, lr, ip
 80199ce:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80199d2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80199d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80199da:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80199de:	ea43 0c0c 	orr.w	ip, r3, ip
 80199e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80199e4:	f823 cb02 	strh.w	ip, [r3], #2
 80199e8:	930c      	str	r3, [sp, #48]	; 0x30
 80199ea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80199ec:	4499      	add	r9, r3
 80199ee:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80199f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80199f4:	441e      	add	r6, r3
 80199f6:	e695      	b.n	8019724 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 80199f8:	2800      	cmp	r0, #0
 80199fa:	d0af      	beq.n	801995c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 80199fc:	5d1b      	ldrb	r3, [r3, r4]
 80199fe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8019a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8019a04:	e7aa      	b.n	801995c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8019a06:	b015      	add	sp, #84	; 0x54
 8019a08:	ecbd 8b0a 	vpop	{d8-d12}
 8019a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8019a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a14:	468b      	mov	fp, r1
 8019a16:	8809      	ldrh	r1, [r1, #0]
 8019a18:	b089      	sub	sp, #36	; 0x24
 8019a1a:	10cd      	asrs	r5, r1, #3
 8019a1c:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 8019a20:	ea4f 2921 	mov.w	r9, r1, asr #8
 8019a24:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019a28:	00c9      	lsls	r1, r1, #3
 8019a2a:	9500      	str	r5, [sp, #0]
 8019a2c:	b2c9      	uxtb	r1, r1
 8019a2e:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 8019a32:	9101      	str	r1, [sp, #4]
 8019a34:	9900      	ldr	r1, [sp, #0]
 8019a36:	9202      	str	r2, [sp, #8]
 8019a38:	fb04 650e 	mla	r5, r4, lr, r6
 8019a3c:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8019a40:	eb02 0805 	add.w	r8, r2, r5
 8019a44:	0209      	lsls	r1, r1, #8
 8019a46:	9a01      	ldr	r2, [sp, #4]
 8019a48:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8019a4c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8019a50:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8019a54:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8019a58:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8019a5c:	4311      	orrs	r1, r2
 8019a5e:	2c00      	cmp	r4, #0
 8019a60:	9107      	str	r1, [sp, #28]
 8019a62:	db43      	blt.n	8019aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8019a64:	45a2      	cmp	sl, r4
 8019a66:	dd41      	ble.n	8019aec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8019a68:	2e00      	cmp	r6, #0
 8019a6a:	db3d      	blt.n	8019ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8019a6c:	45b6      	cmp	lr, r6
 8019a6e:	dd3b      	ble.n	8019ae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8019a70:	9a02      	ldr	r2, [sp, #8]
 8019a72:	5d55      	ldrb	r5, [r2, r5]
 8019a74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a78:	441d      	add	r5, r3
 8019a7a:	1c72      	adds	r2, r6, #1
 8019a7c:	d439      	bmi.n	8019af2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8019a7e:	4596      	cmp	lr, r2
 8019a80:	dd37      	ble.n	8019af2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8019a82:	2f00      	cmp	r7, #0
 8019a84:	d035      	beq.n	8019af2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8019a86:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019a8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019a8e:	4419      	add	r1, r3
 8019a90:	3401      	adds	r4, #1
 8019a92:	d432      	bmi.n	8019afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8019a94:	45a2      	cmp	sl, r4
 8019a96:	dd30      	ble.n	8019afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8019a98:	b378      	cbz	r0, 8019afa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8019a9a:	2e00      	cmp	r6, #0
 8019a9c:	db2b      	blt.n	8019af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8019a9e:	45b6      	cmp	lr, r6
 8019aa0:	dd29      	ble.n	8019af6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 8019aa2:	f818 400e 	ldrb.w	r4, [r8, lr]
 8019aa6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019aaa:	441c      	add	r4, r3
 8019aac:	3601      	adds	r6, #1
 8019aae:	d427      	bmi.n	8019b00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8019ab0:	45b6      	cmp	lr, r6
 8019ab2:	dd25      	ble.n	8019b00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8019ab4:	b327      	cbz	r7, 8019b00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8019ab6:	44c6      	add	lr, r8
 8019ab8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019abc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019ac0:	4413      	add	r3, r2
 8019ac2:	782a      	ldrb	r2, [r5, #0]
 8019ac4:	9202      	str	r2, [sp, #8]
 8019ac6:	780a      	ldrb	r2, [r1, #0]
 8019ac8:	9203      	str	r2, [sp, #12]
 8019aca:	7822      	ldrb	r2, [r4, #0]
 8019acc:	9204      	str	r2, [sp, #16]
 8019ace:	2f0f      	cmp	r7, #15
 8019ad0:	781a      	ldrb	r2, [r3, #0]
 8019ad2:	9205      	str	r2, [sp, #20]
 8019ad4:	d801      	bhi.n	8019ada <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8019ad6:	280f      	cmp	r0, #15
 8019ad8:	d914      	bls.n	8019b04 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8019ada:	4b3f      	ldr	r3, [pc, #252]	; (8019bd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8019adc:	4a3f      	ldr	r2, [pc, #252]	; (8019bdc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 8019ade:	4840      	ldr	r0, [pc, #256]	; (8019be0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 8019ae0:	f240 3173 	movw	r1, #883	; 0x373
 8019ae4:	f006 fa70 	bl	801ffc8 <__assert_func>
 8019ae8:	ad07      	add	r5, sp, #28
 8019aea:	e7c6      	b.n	8019a7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8019aec:	a907      	add	r1, sp, #28
 8019aee:	460d      	mov	r5, r1
 8019af0:	e7ce      	b.n	8019a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8019af2:	a907      	add	r1, sp, #28
 8019af4:	e7cc      	b.n	8019a90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 8019af6:	ac07      	add	r4, sp, #28
 8019af8:	e7d8      	b.n	8019aac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 8019afa:	ab07      	add	r3, sp, #28
 8019afc:	461c      	mov	r4, r3
 8019afe:	e7e0      	b.n	8019ac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8019b00:	ab07      	add	r3, sp, #28
 8019b02:	e7de      	b.n	8019ac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 8019b04:	b2ba      	uxth	r2, r7
 8019b06:	b280      	uxth	r0, r0
 8019b08:	fb02 fa00 	mul.w	sl, r2, r0
 8019b0c:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8019b10:	0112      	lsls	r2, r2, #4
 8019b12:	b280      	uxth	r0, r0
 8019b14:	f891 8002 	ldrb.w	r8, [r1, #2]
 8019b18:	7849      	ldrb	r1, [r1, #1]
 8019b1a:	78ae      	ldrb	r6, [r5, #2]
 8019b1c:	786d      	ldrb	r5, [r5, #1]
 8019b1e:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8019b22:	eba2 020a 	sub.w	r2, r2, sl
 8019b26:	b292      	uxth	r2, r2
 8019b28:	ebae 0e00 	sub.w	lr, lr, r0
 8019b2c:	fa1f fe8e 	uxth.w	lr, lr
 8019b30:	4351      	muls	r1, r2
 8019b32:	fb02 f808 	mul.w	r8, r2, r8
 8019b36:	fb0e 8806 	mla	r8, lr, r6, r8
 8019b3a:	fb0e 1505 	mla	r5, lr, r5, r1
 8019b3e:	78a6      	ldrb	r6, [r4, #2]
 8019b40:	7861      	ldrb	r1, [r4, #1]
 8019b42:	fa1f f78c 	uxth.w	r7, ip
 8019b46:	fb00 8806 	mla	r8, r0, r6, r8
 8019b4a:	fb00 5501 	mla	r5, r0, r1, r5
 8019b4e:	789e      	ldrb	r6, [r3, #2]
 8019b50:	7859      	ldrb	r1, [r3, #1]
 8019b52:	9b00      	ldr	r3, [sp, #0]
 8019b54:	ea6f 0c0c 	mvn.w	ip, ip
 8019b58:	fa5f fc8c 	uxtb.w	ip, ip
 8019b5c:	fb0a 5101 	mla	r1, sl, r1, r5
 8019b60:	fb13 f50c 	smulbb	r5, r3, ip
 8019b64:	9b03      	ldr	r3, [sp, #12]
 8019b66:	435a      	muls	r2, r3
 8019b68:	9b02      	ldr	r3, [sp, #8]
 8019b6a:	fb0e 2203 	mla	r2, lr, r3, r2
 8019b6e:	9b04      	ldr	r3, [sp, #16]
 8019b70:	fb00 2003 	mla	r0, r0, r3, r2
 8019b74:	9b05      	ldr	r3, [sp, #20]
 8019b76:	fb0a 8606 	mla	r6, sl, r6, r8
 8019b7a:	fb0a 0a03 	mla	sl, sl, r3, r0
 8019b7e:	9b01      	ldr	r3, [sp, #4]
 8019b80:	fb19 f90c 	smulbb	r9, r9, ip
 8019b84:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8019b88:	fb13 fc0c 	smulbb	ip, r3, ip
 8019b8c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019b90:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019b94:	fb06 9607 	mla	r6, r6, r7, r9
 8019b98:	fb01 5107 	mla	r1, r1, r7, r5
 8019b9c:	fb0a c707 	mla	r7, sl, r7, ip
 8019ba0:	b2b6      	uxth	r6, r6
 8019ba2:	b289      	uxth	r1, r1
 8019ba4:	b2bf      	uxth	r7, r7
 8019ba6:	f106 0901 	add.w	r9, r6, #1
 8019baa:	f107 0c01 	add.w	ip, r7, #1
 8019bae:	1c4d      	adds	r5, r1, #1
 8019bb0:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8019bb4:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8019bb8:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8019bbc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019bc0:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8019bc4:	0949      	lsrs	r1, r1, #5
 8019bc6:	433e      	orrs	r6, r7
 8019bc8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019bcc:	430e      	orrs	r6, r1
 8019bce:	f8ab 6000 	strh.w	r6, [fp]
 8019bd2:	b009      	add	sp, #36	; 0x24
 8019bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd8:	08023e5d 	.word	0x08023e5d
 8019bdc:	080243b9 	.word	0x080243b9
 8019be0:	08023ee5 	.word	0x08023ee5

08019be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8019be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be8:	ed2d 8b08 	vpush	{d8-d11}
 8019bec:	b097      	sub	sp, #92	; 0x5c
 8019bee:	eeb0 aa40 	vmov.f32	s20, s0
 8019bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8019bf4:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8019bf8:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8019bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8019bfc:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8019c00:	9310      	str	r3, [sp, #64]	; 0x40
 8019c02:	910f      	str	r1, [sp, #60]	; 0x3c
 8019c04:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019c08:	9015      	str	r0, [sp, #84]	; 0x54
 8019c0a:	6860      	ldr	r0, [r4, #4]
 8019c0c:	9213      	str	r2, [sp, #76]	; 0x4c
 8019c0e:	fb00 1303 	mla	r3, r0, r3, r1
 8019c12:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8019c14:	6821      	ldr	r1, [r4, #0]
 8019c16:	6854      	ldr	r4, [r2, #4]
 8019c18:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 8019c1c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8019c20:	930a      	str	r3, [sp, #40]	; 0x28
 8019c22:	6813      	ldr	r3, [r2, #0]
 8019c24:	930e      	str	r3, [sp, #56]	; 0x38
 8019c26:	1d23      	adds	r3, r4, #4
 8019c28:	9308      	str	r3, [sp, #32]
 8019c2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019c2c:	43db      	mvns	r3, r3
 8019c2e:	b2db      	uxtb	r3, r3
 8019c30:	eef0 9a60 	vmov.f32	s19, s1
 8019c34:	eeb0 9a41 	vmov.f32	s18, s2
 8019c38:	eeb0 8a62 	vmov.f32	s16, s5
 8019c3c:	eef0 8a43 	vmov.f32	s17, s6
 8019c40:	eef0 ba44 	vmov.f32	s23, s8
 8019c44:	eeb0 ba64 	vmov.f32	s22, s9
 8019c48:	eef0 aa45 	vmov.f32	s21, s10
 8019c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8019c4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	dc03      	bgt.n	8019c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019c54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	f340 825c 	ble.w	801a114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8019c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	f340 8127 	ble.w	8019eb2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8019c64:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019c66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019c68:	1412      	asrs	r2, r2, #16
 8019c6a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019c6e:	d430      	bmi.n	8019cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 8019c70:	1c51      	adds	r1, r2, #1
 8019c72:	428d      	cmp	r5, r1
 8019c74:	dd30      	ble.n	8019cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	db2e      	blt.n	8019cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8019c7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019c7c:	1c59      	adds	r1, r3, #1
 8019c7e:	4288      	cmp	r0, r1
 8019c80:	dd2a      	ble.n	8019cd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8019c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c84:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019c86:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019c88:	3b01      	subs	r3, #1
 8019c8a:	fb02 1203 	mla	r2, r2, r3, r1
 8019c8e:	1412      	asrs	r2, r2, #16
 8019c90:	d42c      	bmi.n	8019cec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8019c92:	3201      	adds	r2, #1
 8019c94:	4295      	cmp	r5, r2
 8019c96:	dd29      	ble.n	8019cec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8019c98:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019c9a:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019c9c:	fb02 1303 	mla	r3, r2, r3, r1
 8019ca0:	141b      	asrs	r3, r3, #16
 8019ca2:	d423      	bmi.n	8019cec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8019ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019ca6:	3301      	adds	r3, #1
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	dd1f      	ble.n	8019cec <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8019cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cae:	9311      	str	r3, [sp, #68]	; 0x44
 8019cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cb2:	930d      	str	r3, [sp, #52]	; 0x34
 8019cb4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019cb8:	9312      	str	r3, [sp, #72]	; 0x48
 8019cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	f300 8161 	bgt.w	8019f84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 8019cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019cc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019cca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8019cce:	930a      	str	r3, [sp, #40]	; 0x28
 8019cd0:	e0f1      	b.n	8019eb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 8019cd2:	1c51      	adds	r1, r2, #1
 8019cd4:	f040 80de 	bne.w	8019e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8019cd8:	42aa      	cmp	r2, r5
 8019cda:	f280 80db 	bge.w	8019e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8019cde:	1c5f      	adds	r7, r3, #1
 8019ce0:	f2c0 80d8 	blt.w	8019e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8019ce4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019ce6:	4293      	cmp	r3, r2
 8019ce8:	f280 80d4 	bge.w	8019e94 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8019cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019cee:	9311      	str	r3, [sp, #68]	; 0x44
 8019cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019cf2:	930d      	str	r3, [sp, #52]	; 0x34
 8019cf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	dde3      	ble.n	8019cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8019cfa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019cfc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8019cfe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019d00:	141a      	asrs	r2, r3, #16
 8019d02:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019d04:	1400      	asrs	r0, r0, #16
 8019d06:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019d0a:	f3c1 3103 	ubfx	r1, r1, #12, #4
 8019d0e:	f100 8120 	bmi.w	8019f52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 8019d12:	1c46      	adds	r6, r0, #1
 8019d14:	42b5      	cmp	r5, r6
 8019d16:	f340 811e 	ble.w	8019f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8019d1a:	2a00      	cmp	r2, #0
 8019d1c:	f2c0 811b 	blt.w	8019f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8019d20:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8019d22:	1c56      	adds	r6, r2, #1
 8019d24:	42b7      	cmp	r7, r6
 8019d26:	f340 8116 	ble.w	8019f56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 8019d2a:	fb02 0005 	mla	r0, r2, r5, r0
 8019d2e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d32:	9c08      	ldr	r4, [sp, #32]
 8019d34:	4402      	add	r2, r0
 8019d36:	5c30      	ldrb	r0, [r6, r0]
 8019d38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019d3c:	9014      	str	r0, [sp, #80]	; 0x50
 8019d3e:	1826      	adds	r6, r4, r0
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	f000 80f7 	beq.w	8019f34 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 8019d46:	f892 e001 	ldrb.w	lr, [r2, #1]
 8019d4a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019d4e:	44a6      	add	lr, r4
 8019d50:	2900      	cmp	r1, #0
 8019d52:	f000 80f8 	beq.w	8019f46 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8019d56:	1950      	adds	r0, r2, r5
 8019d58:	5d52      	ldrb	r2, [r2, r5]
 8019d5a:	7840      	ldrb	r0, [r0, #1]
 8019d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019d60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019d64:	4422      	add	r2, r4
 8019d66:	4420      	add	r0, r4
 8019d68:	b29b      	uxth	r3, r3
 8019d6a:	b289      	uxth	r1, r1
 8019d6c:	fb03 fa01 	mul.w	sl, r3, r1
 8019d70:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8019d74:	011b      	lsls	r3, r3, #4
 8019d76:	b289      	uxth	r1, r1
 8019d78:	f89e c002 	ldrb.w	ip, [lr, #2]
 8019d7c:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019d80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019d82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019d84:	f8b7 8000 	ldrh.w	r8, [r7]
 8019d88:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8019d8c:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8019d90:	eba3 030a 	sub.w	r3, r3, sl
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	eba9 0901 	sub.w	r9, r9, r1
 8019d9a:	fa1f f989 	uxth.w	r9, r9
 8019d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8019da2:	fb09 cc0b 	mla	ip, r9, fp, ip
 8019da6:	f892 b002 	ldrb.w	fp, [r2, #2]
 8019daa:	fb01 cc0b 	mla	ip, r1, fp, ip
 8019dae:	f890 b002 	ldrb.w	fp, [r0, #2]
 8019db2:	fb0a cc0b 	mla	ip, sl, fp, ip
 8019db6:	ea4f 2b28 	mov.w	fp, r8, asr #8
 8019dba:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8019dbe:	fb1b fb04 	smulbb	fp, fp, r4
 8019dc2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019dc6:	fb0c bc07 	mla	ip, ip, r7, fp
 8019dca:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019dce:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8019dd2:	f89e e000 	ldrb.w	lr, [lr]
 8019dd6:	435e      	muls	r6, r3
 8019dd8:	fb09 660b 	mla	r6, r9, fp, r6
 8019ddc:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019de0:	fb01 660b 	mla	r6, r1, fp, r6
 8019de4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019de8:	fb0a 660b 	mla	r6, sl, fp, r6
 8019dec:	ea4f 0be8 	mov.w	fp, r8, asr #3
 8019df0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8019df4:	fb1b fb04 	smulbb	fp, fp, r4
 8019df8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8019dfc:	fb06 b607 	mla	r6, r6, r7, fp
 8019e00:	b2b4      	uxth	r4, r6
 8019e02:	9412      	str	r4, [sp, #72]	; 0x48
 8019e04:	9e08      	ldr	r6, [sp, #32]
 8019e06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019e08:	f816 b004 	ldrb.w	fp, [r6, r4]
 8019e0c:	fb03 f30e 	mul.w	r3, r3, lr
 8019e10:	f892 e000 	ldrb.w	lr, [r2]
 8019e14:	fb09 330b 	mla	r3, r9, fp, r3
 8019e18:	fb01 330e 	mla	r3, r1, lr, r3
 8019e1c:	f890 e000 	ldrb.w	lr, [r0]
 8019e20:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019e24:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8019e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e2a:	fa5f f888 	uxtb.w	r8, r8
 8019e2e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8019e32:	fb18 f803 	smulbb	r8, r8, r3
 8019e36:	fb0e 8807 	mla	r8, lr, r7, r8
 8019e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019e3c:	fa1f fc8c 	uxth.w	ip, ip
 8019e40:	fa1f f888 	uxth.w	r8, r8
 8019e44:	f103 0b01 	add.w	fp, r3, #1
 8019e48:	f10c 0201 	add.w	r2, ip, #1
 8019e4c:	f108 0e01 	add.w	lr, r8, #1
 8019e50:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 8019e54:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019e58:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 8019e5c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019e60:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 8019e64:	0976      	lsrs	r6, r6, #5
 8019e66:	ea4c 0c08 	orr.w	ip, ip, r8
 8019e6a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e70:	ea4c 0606 	orr.w	r6, ip, r6
 8019e74:	801e      	strh	r6, [r3, #0]
 8019e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e78:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019e7a:	3302      	adds	r3, #2
 8019e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8019e7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019e80:	4413      	add	r3, r2
 8019e82:	9329      	str	r3, [sp, #164]	; 0xa4
 8019e84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019e86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019e88:	4413      	add	r3, r2
 8019e8a:	932a      	str	r3, [sp, #168]	; 0xa8
 8019e8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e8e:	3b01      	subs	r3, #1
 8019e90:	9311      	str	r3, [sp, #68]	; 0x44
 8019e92:	e72f      	b.n	8019cf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8019e94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019e96:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019e98:	4413      	add	r3, r2
 8019e9a:	9329      	str	r3, [sp, #164]	; 0xa4
 8019e9c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019e9e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019ea0:	4413      	add	r3, r2
 8019ea2:	932a      	str	r3, [sp, #168]	; 0xa8
 8019ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ea6:	3b01      	subs	r3, #1
 8019ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8019eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eac:	3302      	adds	r3, #2
 8019eae:	930a      	str	r3, [sp, #40]	; 0x28
 8019eb0:	e6d4      	b.n	8019c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019eb2:	f47f aee6 	bne.w	8019c82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8019eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	f340 812b 	ble.w	801a114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8019ebe:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019ec6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019eca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019ecc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019ed0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019ed4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019ed8:	eef0 6a48 	vmov.f32	s13, s16
 8019edc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019ee0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ee4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019ee8:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8019eec:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019ef0:	eef0 6a68 	vmov.f32	s13, s17
 8019ef4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019ef8:	ee18 2a10 	vmov	r2, s16
 8019efc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019f00:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f04:	ee18 2a90 	vmov	r2, s17
 8019f08:	932b      	str	r3, [sp, #172]	; 0xac
 8019f0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f10:	932c      	str	r3, [sp, #176]	; 0xb0
 8019f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019f14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019f16:	3b01      	subs	r3, #1
 8019f18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019f1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019f20:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8019f24:	bf08      	it	eq
 8019f26:	4613      	moveq	r3, r2
 8019f28:	9309      	str	r3, [sp, #36]	; 0x24
 8019f2a:	eef0 8a67 	vmov.f32	s17, s15
 8019f2e:	eeb0 8a47 	vmov.f32	s16, s14
 8019f32:	e68c      	b.n	8019c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019f34:	b151      	cbz	r1, 8019f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 8019f36:	5d52      	ldrb	r2, [r2, r5]
 8019f38:	9808      	ldr	r0, [sp, #32]
 8019f3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019f3e:	4402      	add	r2, r0
 8019f40:	4630      	mov	r0, r6
 8019f42:	46b6      	mov	lr, r6
 8019f44:	e710      	b.n	8019d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019f46:	4630      	mov	r0, r6
 8019f48:	4632      	mov	r2, r6
 8019f4a:	e70d      	b.n	8019d68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 8019f4c:	4630      	mov	r0, r6
 8019f4e:	4632      	mov	r2, r6
 8019f50:	e7f7      	b.n	8019f42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 8019f52:	1c46      	adds	r6, r0, #1
 8019f54:	d18f      	bne.n	8019e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019f56:	4285      	cmp	r5, r0
 8019f58:	dd8d      	ble.n	8019e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019f5a:	1c54      	adds	r4, r2, #1
 8019f5c:	db8b      	blt.n	8019e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019f5e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019f60:	4294      	cmp	r4, r2
 8019f62:	dd88      	ble.n	8019e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019f64:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8019f68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f6c:	9002      	str	r0, [sp, #8]
 8019f6e:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8019f72:	e9cd 5300 	strd	r5, r3, [sp]
 8019f76:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8019f7a:	9b08      	ldr	r3, [sp, #32]
 8019f7c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019f7e:	f7ff fd47 	bl	8019a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8019f82:	e778      	b.n	8019e76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8019f84:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8019f86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019f8a:	1410      	asrs	r0, r2, #16
 8019f8c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019f90:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019f92:	1412      	asrs	r2, r2, #16
 8019f94:	fb05 2000 	mla	r0, r5, r0, r2
 8019f98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f9a:	f814 a000 	ldrb.w	sl, [r4, r0]
 8019f9e:	4402      	add	r2, r0
 8019fa0:	9808      	ldr	r0, [sp, #32]
 8019fa2:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8019fa6:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019faa:	eb00 060a 	add.w	r6, r0, sl
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	f000 80a1 	beq.w	801a0f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 8019fb4:	f892 c001 	ldrb.w	ip, [r2, #1]
 8019fb8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019fbc:	4484      	add	ip, r0
 8019fbe:	2900      	cmp	r1, #0
 8019fc0:	f000 80a2 	beq.w	801a108 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 8019fc4:	1950      	adds	r0, r2, r5
 8019fc6:	5d52      	ldrb	r2, [r2, r5]
 8019fc8:	7840      	ldrb	r0, [r0, #1]
 8019fca:	9c08      	ldr	r4, [sp, #32]
 8019fcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019fd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019fd4:	4422      	add	r2, r4
 8019fd6:	4420      	add	r0, r4
 8019fd8:	b29b      	uxth	r3, r3
 8019fda:	b289      	uxth	r1, r1
 8019fdc:	fb03 f901 	mul.w	r9, r3, r1
 8019fe0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019fe4:	011b      	lsls	r3, r3, #4
 8019fe6:	b289      	uxth	r1, r1
 8019fe8:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8019fec:	f896 b002 	ldrb.w	fp, [r6, #2]
 8019ff0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019ff2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8019ff6:	eba3 0309 	sub.w	r3, r3, r9
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	eba8 0801 	sub.w	r8, r8, r1
 801a000:	fa1f f888 	uxth.w	r8, r8
 801a004:	435f      	muls	r7, r3
 801a006:	fb08 770b 	mla	r7, r8, fp, r7
 801a00a:	f892 b002 	ldrb.w	fp, [r2, #2]
 801a00e:	f8b4 e000 	ldrh.w	lr, [r4]
 801a012:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a014:	fb01 770b 	mla	r7, r1, fp, r7
 801a018:	f890 b002 	ldrb.w	fp, [r0, #2]
 801a01c:	fb09 770b 	mla	r7, r9, fp, r7
 801a020:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801a024:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801a028:	fb1b fb04 	smulbb	fp, fp, r4
 801a02c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a02e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801a032:	fb07 b704 	mla	r7, r7, r4, fp
 801a036:	f896 b001 	ldrb.w	fp, [r6, #1]
 801a03a:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801a03e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a040:	f89c c000 	ldrb.w	ip, [ip]
 801a044:	435e      	muls	r6, r3
 801a046:	fb08 660b 	mla	r6, r8, fp, r6
 801a04a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801a04e:	fb01 660b 	mla	r6, r1, fp, r6
 801a052:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a056:	fb09 660b 	mla	r6, r9, fp, r6
 801a05a:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801a05e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801a062:	fb1b fb04 	smulbb	fp, fp, r4
 801a066:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a068:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a06c:	fb06 b604 	mla	r6, r6, r4, fp
 801a070:	9c08      	ldr	r4, [sp, #32]
 801a072:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801a076:	fb03 f30c 	mul.w	r3, r3, ip
 801a07a:	f892 c000 	ldrb.w	ip, [r2]
 801a07e:	fb08 330a 	mla	r3, r8, sl, r3
 801a082:	fb01 330c 	mla	r3, r1, ip, r3
 801a086:	f890 c000 	ldrb.w	ip, [r0]
 801a08a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801a08e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a092:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a094:	fa5f fe8e 	uxtb.w	lr, lr
 801a098:	fb1e fe03 	smulbb	lr, lr, r3
 801a09c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a09e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a0a2:	fb0c ec03 	mla	ip, ip, r3, lr
 801a0a6:	b2bf      	uxth	r7, r7
 801a0a8:	b2b6      	uxth	r6, r6
 801a0aa:	fa1f fc8c 	uxth.w	ip, ip
 801a0ae:	1c7b      	adds	r3, r7, #1
 801a0b0:	f10c 0201 	add.w	r2, ip, #1
 801a0b4:	f106 0b01 	add.w	fp, r6, #1
 801a0b8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a0bc:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801a0c0:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 801a0c4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a0c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a0cc:	0976      	lsrs	r6, r6, #5
 801a0ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0d0:	4317      	orrs	r7, r2
 801a0d2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a0d6:	4337      	orrs	r7, r6
 801a0d8:	f823 7b02 	strh.w	r7, [r3], #2
 801a0dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801a0de:	930d      	str	r3, [sp, #52]	; 0x34
 801a0e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a0e2:	4413      	add	r3, r2
 801a0e4:	9329      	str	r3, [sp, #164]	; 0xa4
 801a0e6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801a0e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a0ea:	4413      	add	r3, r2
 801a0ec:	932a      	str	r3, [sp, #168]	; 0xa8
 801a0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a0f0:	3b01      	subs	r3, #1
 801a0f2:	9311      	str	r3, [sp, #68]	; 0x44
 801a0f4:	e5e1      	b.n	8019cba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801a0f6:	b151      	cbz	r1, 801a10e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 801a0f8:	5d52      	ldrb	r2, [r2, r5]
 801a0fa:	9808      	ldr	r0, [sp, #32]
 801a0fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a100:	4402      	add	r2, r0
 801a102:	4630      	mov	r0, r6
 801a104:	46b4      	mov	ip, r6
 801a106:	e767      	b.n	8019fd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801a108:	4630      	mov	r0, r6
 801a10a:	4632      	mov	r2, r6
 801a10c:	e764      	b.n	8019fd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 801a10e:	4630      	mov	r0, r6
 801a110:	4632      	mov	r2, r6
 801a112:	e7f7      	b.n	801a104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 801a114:	b017      	add	sp, #92	; 0x5c
 801a116:	ecbd 8b08 	vpop	{d8-d11}
 801a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a124:	880e      	ldrh	r6, [r1, #0]
 801a126:	b085      	sub	sp, #20
 801a128:	0230      	lsls	r0, r6, #8
 801a12a:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 801a12e:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 801a132:	0170      	lsls	r0, r6, #5
 801a134:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801a138:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801a13c:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801a140:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 801a144:	00f6      	lsls	r6, r6, #3
 801a146:	ea4b 0000 	orr.w	r0, fp, r0
 801a14a:	b2f6      	uxtb	r6, r6
 801a14c:	4691      	mov	r9, r2
 801a14e:	fb05 7a0c 	mla	sl, r5, ip, r7
 801a152:	4306      	orrs	r6, r0
 801a154:	2d00      	cmp	r5, #0
 801a156:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801a15a:	9603      	str	r6, [sp, #12]
 801a15c:	eb09 0e0a 	add.w	lr, r9, sl
 801a160:	db42      	blt.n	801a1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801a162:	45a8      	cmp	r8, r5
 801a164:	dd40      	ble.n	801a1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 801a166:	2f00      	cmp	r7, #0
 801a168:	db3c      	blt.n	801a1e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801a16a:	45bc      	cmp	ip, r7
 801a16c:	dd3a      	ble.n	801a1e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 801a16e:	f819 600a 	ldrb.w	r6, [r9, sl]
 801a172:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a176:	441e      	add	r6, r3
 801a178:	1c78      	adds	r0, r7, #1
 801a17a:	d438      	bmi.n	801a1ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801a17c:	4584      	cmp	ip, r0
 801a17e:	dd36      	ble.n	801a1ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801a180:	b3aa      	cbz	r2, 801a1ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 801a182:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801a186:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a18a:	4418      	add	r0, r3
 801a18c:	3501      	adds	r5, #1
 801a18e:	d432      	bmi.n	801a1f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801a190:	45a8      	cmp	r8, r5
 801a192:	dd30      	ble.n	801a1f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801a194:	b37c      	cbz	r4, 801a1f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 801a196:	2f00      	cmp	r7, #0
 801a198:	db2b      	blt.n	801a1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801a19a:	45bc      	cmp	ip, r7
 801a19c:	dd29      	ble.n	801a1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 801a19e:	f81e 500c 	ldrb.w	r5, [lr, ip]
 801a1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a1a6:	441d      	add	r5, r3
 801a1a8:	3701      	adds	r7, #1
 801a1aa:	d427      	bmi.n	801a1fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801a1ac:	45bc      	cmp	ip, r7
 801a1ae:	dd25      	ble.n	801a1fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801a1b0:	b322      	cbz	r2, 801a1fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 801a1b2:	44f4      	add	ip, lr
 801a1b4:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801a1b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a1bc:	443b      	add	r3, r7
 801a1be:	781f      	ldrb	r7, [r3, #0]
 801a1c0:	f896 a000 	ldrb.w	sl, [r6]
 801a1c4:	f890 b000 	ldrb.w	fp, [r0]
 801a1c8:	f895 9000 	ldrb.w	r9, [r5]
 801a1cc:	9700      	str	r7, [sp, #0]
 801a1ce:	2a0f      	cmp	r2, #15
 801a1d0:	d801      	bhi.n	801a1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 801a1d2:	2c0f      	cmp	r4, #15
 801a1d4:	d914      	bls.n	801a200 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 801a1d6:	4b2c      	ldr	r3, [pc, #176]	; (801a288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 801a1d8:	4a2c      	ldr	r2, [pc, #176]	; (801a28c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 801a1da:	482d      	ldr	r0, [pc, #180]	; (801a290 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 801a1dc:	f240 3173 	movw	r1, #883	; 0x373
 801a1e0:	f005 fef2 	bl	801ffc8 <__assert_func>
 801a1e4:	ae03      	add	r6, sp, #12
 801a1e6:	e7c7      	b.n	801a178 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 801a1e8:	a803      	add	r0, sp, #12
 801a1ea:	4606      	mov	r6, r0
 801a1ec:	e7ce      	b.n	801a18c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801a1ee:	a803      	add	r0, sp, #12
 801a1f0:	e7cc      	b.n	801a18c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 801a1f2:	ad03      	add	r5, sp, #12
 801a1f4:	e7d8      	b.n	801a1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 801a1f6:	ab03      	add	r3, sp, #12
 801a1f8:	461d      	mov	r5, r3
 801a1fa:	e7e0      	b.n	801a1be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801a1fc:	ab03      	add	r3, sp, #12
 801a1fe:	e7de      	b.n	801a1be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 801a200:	b292      	uxth	r2, r2
 801a202:	b2a4      	uxth	r4, r4
 801a204:	fb02 f804 	mul.w	r8, r2, r4
 801a208:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 801a20c:	0112      	lsls	r2, r2, #4
 801a20e:	b2a4      	uxth	r4, r4
 801a210:	f890 e002 	ldrb.w	lr, [r0, #2]
 801a214:	78b7      	ldrb	r7, [r6, #2]
 801a216:	7840      	ldrb	r0, [r0, #1]
 801a218:	7876      	ldrb	r6, [r6, #1]
 801a21a:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801a21e:	eba2 0208 	sub.w	r2, r2, r8
 801a222:	b292      	uxth	r2, r2
 801a224:	ebac 0c04 	sub.w	ip, ip, r4
 801a228:	fa1f fc8c 	uxth.w	ip, ip
 801a22c:	fb02 fe0e 	mul.w	lr, r2, lr
 801a230:	fb0c ee07 	mla	lr, ip, r7, lr
 801a234:	78af      	ldrb	r7, [r5, #2]
 801a236:	fb04 ee07 	mla	lr, r4, r7, lr
 801a23a:	789f      	ldrb	r7, [r3, #2]
 801a23c:	785b      	ldrb	r3, [r3, #1]
 801a23e:	fb08 e707 	mla	r7, r8, r7, lr
 801a242:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801a246:	fb02 fe0b 	mul.w	lr, r2, fp
 801a24a:	4342      	muls	r2, r0
 801a24c:	7868      	ldrb	r0, [r5, #1]
 801a24e:	9701      	str	r7, [sp, #4]
 801a250:	fb0c ee0a 	mla	lr, ip, sl, lr
 801a254:	9f00      	ldr	r7, [sp, #0]
 801a256:	fb0c 2206 	mla	r2, ip, r6, r2
 801a25a:	fb04 ee09 	mla	lr, r4, r9, lr
 801a25e:	fb04 2400 	mla	r4, r4, r0, r2
 801a262:	fb08 ee07 	mla	lr, r8, r7, lr
 801a266:	9f01      	ldr	r7, [sp, #4]
 801a268:	fb08 4803 	mla	r8, r8, r3, r4
 801a26c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801a270:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a274:	ea47 070e 	orr.w	r7, r7, lr
 801a278:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a27c:	ea47 0708 	orr.w	r7, r7, r8
 801a280:	800f      	strh	r7, [r1, #0]
 801a282:	b005      	add	sp, #20
 801a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a288:	08023e5d 	.word	0x08023e5d
 801a28c:	080243b9 	.word	0x080243b9
 801a290:	08023ee5 	.word	0x08023ee5

0801a294 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a298:	ed2d 8b0a 	vpush	{d8-d12}
 801a29c:	b091      	sub	sp, #68	; 0x44
 801a29e:	eeb0 aa40 	vmov.f32	s20, s0
 801a2a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a2a4:	9307      	str	r3, [sp, #28]
 801a2a6:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 801a2aa:	910c      	str	r1, [sp, #48]	; 0x30
 801a2ac:	9309      	str	r3, [sp, #36]	; 0x24
 801a2ae:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a2b2:	900f      	str	r0, [sp, #60]	; 0x3c
 801a2b4:	6860      	ldr	r0, [r4, #4]
 801a2b6:	920e      	str	r2, [sp, #56]	; 0x38
 801a2b8:	fb00 1303 	mla	r3, r0, r3, r1
 801a2bc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801a2be:	6821      	ldr	r1, [r4, #0]
 801a2c0:	6854      	ldr	r4, [r2, #4]
 801a2c2:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 801a2c6:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 801a2ca:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a2ce:	9308      	str	r3, [sp, #32]
 801a2d0:	6813      	ldr	r3, [r2, #0]
 801a2d2:	930a      	str	r3, [sp, #40]	; 0x28
 801a2d4:	eef0 9a60 	vmov.f32	s19, s1
 801a2d8:	eeb0 9a41 	vmov.f32	s18, s2
 801a2dc:	eeb0 8a62 	vmov.f32	s16, s5
 801a2e0:	eef0 8a43 	vmov.f32	s17, s6
 801a2e4:	eeb0 ca44 	vmov.f32	s24, s8
 801a2e8:	eef0 ba64 	vmov.f32	s23, s9
 801a2ec:	eeb0 ba45 	vmov.f32	s22, s10
 801a2f0:	3404      	adds	r4, #4
 801a2f2:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801a2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	dc03      	bgt.n	801a304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	f340 81cb 	ble.w	801a69a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801a304:	9b07      	ldr	r3, [sp, #28]
 801a306:	2b00      	cmp	r3, #0
 801a308:	f340 80dd 	ble.w	801a4c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 801a30c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a30e:	1412      	asrs	r2, r2, #16
 801a310:	ea4f 432b 	mov.w	r3, fp, asr #16
 801a314:	d42c      	bmi.n	801a370 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801a316:	1c51      	adds	r1, r2, #1
 801a318:	428d      	cmp	r5, r1
 801a31a:	dd2c      	ble.n	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	db2a      	blt.n	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801a320:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a322:	1c59      	adds	r1, r3, #1
 801a324:	4288      	cmp	r0, r1
 801a326:	dd26      	ble.n	801a376 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801a328:	9b07      	ldr	r3, [sp, #28]
 801a32a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a32c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801a32e:	3b01      	subs	r3, #1
 801a330:	fb02 1203 	mla	r2, r2, r3, r1
 801a334:	1412      	asrs	r2, r2, #16
 801a336:	d428      	bmi.n	801a38a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801a338:	3201      	adds	r2, #1
 801a33a:	4295      	cmp	r5, r2
 801a33c:	dd25      	ble.n	801a38a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801a33e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a340:	fb02 b303 	mla	r3, r2, r3, fp
 801a344:	141b      	asrs	r3, r3, #16
 801a346:	d420      	bmi.n	801a38a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801a348:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a34a:	3301      	adds	r3, #1
 801a34c:	429a      	cmp	r2, r3
 801a34e:	dd1c      	ble.n	801a38a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 801a350:	9b07      	ldr	r3, [sp, #28]
 801a352:	930b      	str	r3, [sp, #44]	; 0x2c
 801a354:	9b08      	ldr	r3, [sp, #32]
 801a356:	930d      	str	r3, [sp, #52]	; 0x34
 801a358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f300 8116 	bgt.w	801a58c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 801a360:	9b07      	ldr	r3, [sp, #28]
 801a362:	9a08      	ldr	r2, [sp, #32]
 801a364:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a368:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801a36c:	9308      	str	r3, [sp, #32]
 801a36e:	e0ac      	b.n	801a4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 801a370:	1c51      	adds	r1, r2, #1
 801a372:	f040 809b 	bne.w	801a4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801a376:	42aa      	cmp	r2, r5
 801a378:	f280 8098 	bge.w	801a4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801a37c:	1c5a      	adds	r2, r3, #1
 801a37e:	f2c0 8095 	blt.w	801a4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801a382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a384:	4293      	cmp	r3, r2
 801a386:	f280 8091 	bge.w	801a4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 801a38a:	9b07      	ldr	r3, [sp, #28]
 801a38c:	930d      	str	r3, [sp, #52]	; 0x34
 801a38e:	9b08      	ldr	r3, [sp, #32]
 801a390:	930b      	str	r3, [sp, #44]	; 0x2c
 801a392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a394:	2b00      	cmp	r3, #0
 801a396:	dde3      	ble.n	801a360 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801a398:	9825      	ldr	r0, [sp, #148]	; 0x94
 801a39a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a39c:	1400      	asrs	r0, r0, #16
 801a39e:	ea4f 422b 	mov.w	r2, fp, asr #16
 801a3a2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801a3a6:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801a3aa:	f100 80d9 	bmi.w	801a560 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 801a3ae:	1c46      	adds	r6, r0, #1
 801a3b0:	42b5      	cmp	r5, r6
 801a3b2:	f340 80d7 	ble.w	801a564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801a3b6:	2a00      	cmp	r2, #0
 801a3b8:	f2c0 80d4 	blt.w	801a564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801a3bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a3be:	1c56      	adds	r6, r2, #1
 801a3c0:	42b7      	cmp	r7, r6
 801a3c2:	f340 80cf 	ble.w	801a564 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 801a3c6:	fb02 0005 	mla	r0, r2, r5, r0
 801a3ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a3cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3ce:	4402      	add	r2, r0
 801a3d0:	5c30      	ldrb	r0, [r6, r0]
 801a3d2:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801a3d6:	eb04 0c08 	add.w	ip, r4, r8
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	f000 80b2 	beq.w	801a544 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801a3e0:	7856      	ldrb	r6, [r2, #1]
 801a3e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a3e6:	4426      	add	r6, r4
 801a3e8:	2900      	cmp	r1, #0
 801a3ea:	f000 80b3 	beq.w	801a554 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801a3ee:	1950      	adds	r0, r2, r5
 801a3f0:	5d52      	ldrb	r2, [r2, r5]
 801a3f2:	7840      	ldrb	r0, [r0, #1]
 801a3f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a3f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a3fc:	4422      	add	r2, r4
 801a3fe:	4420      	add	r0, r4
 801a400:	b29b      	uxth	r3, r3
 801a402:	b289      	uxth	r1, r1
 801a404:	fb03 f901 	mul.w	r9, r3, r1
 801a408:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a40c:	011b      	lsls	r3, r3, #4
 801a40e:	b289      	uxth	r1, r1
 801a410:	78b7      	ldrb	r7, [r6, #2]
 801a412:	f89c a002 	ldrb.w	sl, [ip, #2]
 801a416:	f89c c001 	ldrb.w	ip, [ip, #1]
 801a41a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801a41e:	eba3 0309 	sub.w	r3, r3, r9
 801a422:	b29b      	uxth	r3, r3
 801a424:	ebae 0e01 	sub.w	lr, lr, r1
 801a428:	fa1f fe8e 	uxth.w	lr, lr
 801a42c:	435f      	muls	r7, r3
 801a42e:	fb0e 770a 	mla	r7, lr, sl, r7
 801a432:	f892 a002 	ldrb.w	sl, [r2, #2]
 801a436:	fb01 770a 	mla	r7, r1, sl, r7
 801a43a:	f890 a002 	ldrb.w	sl, [r0, #2]
 801a43e:	fb09 7a0a 	mla	sl, r9, sl, r7
 801a442:	f814 7008 	ldrb.w	r7, [r4, r8]
 801a446:	f896 8000 	ldrb.w	r8, [r6]
 801a44a:	7876      	ldrb	r6, [r6, #1]
 801a44c:	fb03 f808 	mul.w	r8, r3, r8
 801a450:	fb0e 8807 	mla	r8, lr, r7, r8
 801a454:	7817      	ldrb	r7, [r2, #0]
 801a456:	fb01 8807 	mla	r8, r1, r7, r8
 801a45a:	7807      	ldrb	r7, [r0, #0]
 801a45c:	fb09 8707 	mla	r7, r9, r7, r8
 801a460:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801a464:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a468:	ea4a 0707 	orr.w	r7, sl, r7
 801a46c:	4373      	muls	r3, r6
 801a46e:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a472:	fb0e 330c 	mla	r3, lr, ip, r3
 801a476:	fb01 310a 	mla	r1, r1, sl, r3
 801a47a:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a480:	fb09 1a0a 	mla	sl, r9, sl, r1
 801a484:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a488:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a48c:	ea47 070a 	orr.w	r7, r7, sl
 801a490:	801f      	strh	r7, [r3, #0]
 801a492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a494:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a496:	3302      	adds	r3, #2
 801a498:	930b      	str	r3, [sp, #44]	; 0x2c
 801a49a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a49c:	4413      	add	r3, r2
 801a49e:	9325      	str	r3, [sp, #148]	; 0x94
 801a4a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a4a2:	449b      	add	fp, r3
 801a4a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4a6:	3b01      	subs	r3, #1
 801a4a8:	930d      	str	r3, [sp, #52]	; 0x34
 801a4aa:	e772      	b.n	801a392 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801a4ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a4ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a4b0:	4413      	add	r3, r2
 801a4b2:	9325      	str	r3, [sp, #148]	; 0x94
 801a4b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a4b6:	449b      	add	fp, r3
 801a4b8:	9b07      	ldr	r3, [sp, #28]
 801a4ba:	3b01      	subs	r3, #1
 801a4bc:	9307      	str	r3, [sp, #28]
 801a4be:	9b08      	ldr	r3, [sp, #32]
 801a4c0:	3302      	adds	r3, #2
 801a4c2:	9308      	str	r3, [sp, #32]
 801a4c4:	e71e      	b.n	801a304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a4c6:	f47f af2f 	bne.w	801a328 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801a4ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	f340 80e4 	ble.w	801a69a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 801a4d2:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801a4d6:	ee79 9aab 	vadd.f32	s19, s19, s23
 801a4da:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801a4de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a4e0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801a4e4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a4e8:	eef0 6a48 	vmov.f32	s13, s16
 801a4ec:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a4f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a4f4:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a4f8:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801a4fc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a500:	eef0 6a68 	vmov.f32	s13, s17
 801a504:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a508:	ee18 2a10 	vmov	r2, s16
 801a50c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a510:	fb92 f3f3 	sdiv	r3, r2, r3
 801a514:	ee18 2a90 	vmov	r2, s17
 801a518:	9327      	str	r3, [sp, #156]	; 0x9c
 801a51a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a51c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a520:	9328      	str	r3, [sp, #160]	; 0xa0
 801a522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a524:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a526:	3b01      	subs	r3, #1
 801a528:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a52c:	930c      	str	r3, [sp, #48]	; 0x30
 801a52e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a530:	bf08      	it	eq
 801a532:	4613      	moveq	r3, r2
 801a534:	ee16 ba90 	vmov	fp, s13
 801a538:	9307      	str	r3, [sp, #28]
 801a53a:	eef0 8a67 	vmov.f32	s17, s15
 801a53e:	eeb0 8a47 	vmov.f32	s16, s14
 801a542:	e6d8      	b.n	801a2f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801a544:	b149      	cbz	r1, 801a55a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 801a546:	5d52      	ldrb	r2, [r2, r5]
 801a548:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a54c:	4422      	add	r2, r4
 801a54e:	4660      	mov	r0, ip
 801a550:	4666      	mov	r6, ip
 801a552:	e755      	b.n	801a400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801a554:	4660      	mov	r0, ip
 801a556:	4662      	mov	r2, ip
 801a558:	e752      	b.n	801a400 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 801a55a:	4660      	mov	r0, ip
 801a55c:	4662      	mov	r2, ip
 801a55e:	e7f7      	b.n	801a550 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801a560:	1c47      	adds	r7, r0, #1
 801a562:	d196      	bne.n	801a492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801a564:	4285      	cmp	r5, r0
 801a566:	dd94      	ble.n	801a492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801a568:	1c56      	adds	r6, r2, #1
 801a56a:	db92      	blt.n	801a492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801a56c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a56e:	4296      	cmp	r6, r2
 801a570:	dd8f      	ble.n	801a492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801a572:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801a576:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801a57a:	e9cd 5600 	strd	r5, r6, [sp]
 801a57e:	4623      	mov	r3, r4
 801a580:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 801a584:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a586:	f7ff fdcb 	bl	801a120 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801a58a:	e782      	b.n	801a492 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 801a58c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a58e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801a590:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a592:	1412      	asrs	r2, r2, #16
 801a594:	ea4f 402b 	mov.w	r0, fp, asr #16
 801a598:	fb05 2000 	mla	r0, r5, r0, r2
 801a59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a59e:	f816 8000 	ldrb.w	r8, [r6, r0]
 801a5a2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801a5a6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a5aa:	f3cb 3103 	ubfx	r1, fp, #12, #4
 801a5ae:	4402      	add	r2, r0
 801a5b0:	eb04 0c08 	add.w	ip, r4, r8
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d062      	beq.n	801a67e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 801a5b8:	7856      	ldrb	r6, [r2, #1]
 801a5ba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a5be:	4426      	add	r6, r4
 801a5c0:	2900      	cmp	r1, #0
 801a5c2:	d064      	beq.n	801a68e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 801a5c4:	1950      	adds	r0, r2, r5
 801a5c6:	5d52      	ldrb	r2, [r2, r5]
 801a5c8:	7840      	ldrb	r0, [r0, #1]
 801a5ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a5ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a5d2:	4422      	add	r2, r4
 801a5d4:	4420      	add	r0, r4
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	b289      	uxth	r1, r1
 801a5da:	fb03 f901 	mul.w	r9, r3, r1
 801a5de:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a5e2:	011b      	lsls	r3, r3, #4
 801a5e4:	b289      	uxth	r1, r1
 801a5e6:	78b7      	ldrb	r7, [r6, #2]
 801a5e8:	f89c a002 	ldrb.w	sl, [ip, #2]
 801a5ec:	f89c c001 	ldrb.w	ip, [ip, #1]
 801a5f0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801a5f4:	eba3 0309 	sub.w	r3, r3, r9
 801a5f8:	b29b      	uxth	r3, r3
 801a5fa:	ebae 0e01 	sub.w	lr, lr, r1
 801a5fe:	fa1f fe8e 	uxth.w	lr, lr
 801a602:	435f      	muls	r7, r3
 801a604:	fb0e 770a 	mla	r7, lr, sl, r7
 801a608:	f892 a002 	ldrb.w	sl, [r2, #2]
 801a60c:	fb01 770a 	mla	r7, r1, sl, r7
 801a610:	f890 a002 	ldrb.w	sl, [r0, #2]
 801a614:	fb09 7a0a 	mla	sl, r9, sl, r7
 801a618:	f814 7008 	ldrb.w	r7, [r4, r8]
 801a61c:	f896 8000 	ldrb.w	r8, [r6]
 801a620:	7876      	ldrb	r6, [r6, #1]
 801a622:	fb03 f808 	mul.w	r8, r3, r8
 801a626:	fb0e 8807 	mla	r8, lr, r7, r8
 801a62a:	7817      	ldrb	r7, [r2, #0]
 801a62c:	fb01 8807 	mla	r8, r1, r7, r8
 801a630:	7807      	ldrb	r7, [r0, #0]
 801a632:	fb09 8707 	mla	r7, r9, r7, r8
 801a636:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801a63a:	4373      	muls	r3, r6
 801a63c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801a640:	7856      	ldrb	r6, [r2, #1]
 801a642:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a644:	ea4a 0707 	orr.w	r7, sl, r7
 801a648:	fb0e 330c 	mla	r3, lr, ip, r3
 801a64c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a650:	fb01 3306 	mla	r3, r1, r6, r3
 801a654:	fb09 3a0a 	mla	sl, r9, sl, r3
 801a658:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a65e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a662:	ea47 070a 	orr.w	r7, r7, sl
 801a666:	f823 7b02 	strh.w	r7, [r3], #2
 801a66a:	930d      	str	r3, [sp, #52]	; 0x34
 801a66c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a66e:	4413      	add	r3, r2
 801a670:	9325      	str	r3, [sp, #148]	; 0x94
 801a672:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a674:	449b      	add	fp, r3
 801a676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a678:	3b01      	subs	r3, #1
 801a67a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a67c:	e66c      	b.n	801a358 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801a67e:	b149      	cbz	r1, 801a694 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 801a680:	5d52      	ldrb	r2, [r2, r5]
 801a682:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a686:	4422      	add	r2, r4
 801a688:	4660      	mov	r0, ip
 801a68a:	4666      	mov	r6, ip
 801a68c:	e7a3      	b.n	801a5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801a68e:	4660      	mov	r0, ip
 801a690:	4662      	mov	r2, ip
 801a692:	e7a0      	b.n	801a5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 801a694:	4660      	mov	r0, ip
 801a696:	4662      	mov	r2, ip
 801a698:	e7f7      	b.n	801a68a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 801a69a:	b011      	add	sp, #68	; 0x44
 801a69c:	ecbd 8b0a 	vpop	{d8-d12}
 801a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a6a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a8:	8808      	ldrh	r0, [r1, #0]
 801a6aa:	b085      	sub	sp, #20
 801a6ac:	1206      	asrs	r6, r0, #8
 801a6ae:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801a6b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801a6b6:	9600      	str	r6, [sp, #0]
 801a6b8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801a6bc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801a6c0:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801a6c4:	10c6      	asrs	r6, r0, #3
 801a6c6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a6ca:	9601      	str	r6, [sp, #4]
 801a6cc:	00c0      	lsls	r0, r0, #3
 801a6ce:	fb04 560c 	mla	r6, r4, ip, r5
 801a6d2:	b2c0      	uxtb	r0, r0
 801a6d4:	4692      	mov	sl, r2
 801a6d6:	eb02 0e06 	add.w	lr, r2, r6
 801a6da:	9a00      	ldr	r2, [sp, #0]
 801a6dc:	9002      	str	r0, [sp, #8]
 801a6de:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801a6e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801a6e6:	9a01      	ldr	r2, [sp, #4]
 801a6e8:	2c00      	cmp	r4, #0
 801a6ea:	4698      	mov	r8, r3
 801a6ec:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801a6f0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801a6f4:	db3e      	blt.n	801a774 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801a6f6:	45a1      	cmp	r9, r4
 801a6f8:	dd3c      	ble.n	801a774 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 801a6fa:	2d00      	cmp	r5, #0
 801a6fc:	db38      	blt.n	801a770 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801a6fe:	45ac      	cmp	ip, r5
 801a700:	dd36      	ble.n	801a770 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 801a702:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801a706:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801a70a:	1c6e      	adds	r6, r5, #1
 801a70c:	d435      	bmi.n	801a77a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801a70e:	45b4      	cmp	ip, r6
 801a710:	dd33      	ble.n	801a77a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801a712:	b393      	cbz	r3, 801a77a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 801a714:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801a718:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801a71c:	3401      	adds	r4, #1
 801a71e:	d430      	bmi.n	801a782 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801a720:	45a1      	cmp	r9, r4
 801a722:	dd2e      	ble.n	801a782 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801a724:	b36f      	cbz	r7, 801a782 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 801a726:	2d00      	cmp	r5, #0
 801a728:	db29      	blt.n	801a77e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801a72a:	45ac      	cmp	ip, r5
 801a72c:	dd27      	ble.n	801a77e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 801a72e:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801a732:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801a736:	3501      	adds	r5, #1
 801a738:	d407      	bmi.n	801a74a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801a73a:	45ac      	cmp	ip, r5
 801a73c:	dd05      	ble.n	801a74a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801a73e:	b123      	cbz	r3, 801a74a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801a740:	44f4      	add	ip, lr
 801a742:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801a746:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801a74a:	2b0f      	cmp	r3, #15
 801a74c:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a750:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a754:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a758:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801a75c:	d801      	bhi.n	801a762 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801a75e:	2f0f      	cmp	r7, #15
 801a760:	d911      	bls.n	801a786 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 801a762:	4b7f      	ldr	r3, [pc, #508]	; (801a960 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 801a764:	4a7f      	ldr	r2, [pc, #508]	; (801a964 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 801a766:	4880      	ldr	r0, [pc, #512]	; (801a968 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 801a768:	f240 3173 	movw	r1, #883	; 0x373
 801a76c:	f005 fc2c 	bl	801ffc8 <__assert_func>
 801a770:	4602      	mov	r2, r0
 801a772:	e7ca      	b.n	801a70a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 801a774:	4606      	mov	r6, r0
 801a776:	4602      	mov	r2, r0
 801a778:	e7d0      	b.n	801a71c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801a77a:	4606      	mov	r6, r0
 801a77c:	e7ce      	b.n	801a71c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801a77e:	4604      	mov	r4, r0
 801a780:	e7d9      	b.n	801a736 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 801a782:	4604      	mov	r4, r0
 801a784:	e7e1      	b.n	801a74a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 801a786:	b29b      	uxth	r3, r3
 801a788:	b2bf      	uxth	r7, r7
 801a78a:	fb03 fe07 	mul.w	lr, r3, r7
 801a78e:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a792:	011b      	lsls	r3, r3, #4
 801a794:	eba3 0c0e 	sub.w	ip, r3, lr
 801a798:	b2bf      	uxth	r7, r7
 801a79a:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801a79e:	fa1f fc8c 	uxth.w	ip, ip
 801a7a2:	1bed      	subs	r5, r5, r7
 801a7a4:	b2ad      	uxth	r5, r5
 801a7a6:	fb0c f30a 	mul.w	r3, ip, sl
 801a7aa:	fb05 330b 	mla	r3, r5, fp, r3
 801a7ae:	fb07 3309 	mla	r3, r7, r9, r3
 801a7b2:	fb0e 3308 	mla	r3, lr, r8, r3
 801a7b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a7ba:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a7be:	9303      	str	r3, [sp, #12]
 801a7c0:	d018      	beq.n	801a7f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 801a7c2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801a7c6:	fb0b f303 	mul.w	r3, fp, r3
 801a7ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a7ce:	fb0b fb02 	mul.w	fp, fp, r2
 801a7d2:	0a1a      	lsrs	r2, r3, #8
 801a7d4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a7d8:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801a7dc:	441a      	add	r2, r3
 801a7de:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801a7e2:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801a7e6:	0a12      	lsrs	r2, r2, #8
 801a7e8:	0a1b      	lsrs	r3, r3, #8
 801a7ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a7ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a7f2:	431a      	orrs	r2, r3
 801a7f4:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a7f8:	d019      	beq.n	801a82e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 801a7fa:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801a7fe:	fb0a fb0b 	mul.w	fp, sl, fp
 801a802:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a806:	fb0a fa06 	mul.w	sl, sl, r6
 801a80a:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801a80e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a812:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a816:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801a81a:	445e      	add	r6, fp
 801a81c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a820:	0a36      	lsrs	r6, r6, #8
 801a822:	0a1b      	lsrs	r3, r3, #8
 801a824:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a828:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a82c:	431e      	orrs	r6, r3
 801a82e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a832:	d019      	beq.n	801a868 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 801a834:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a838:	fb09 fa0a 	mul.w	sl, r9, sl
 801a83c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a840:	fb09 f904 	mul.w	r9, r9, r4
 801a844:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a848:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a84c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a850:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801a854:	4454      	add	r4, sl
 801a856:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801a85a:	0a24      	lsrs	r4, r4, #8
 801a85c:	0a1b      	lsrs	r3, r3, #8
 801a85e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a866:	431c      	orrs	r4, r3
 801a868:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a86c:	d019      	beq.n	801a8a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 801a86e:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801a872:	fb08 f909 	mul.w	r9, r8, r9
 801a876:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a87a:	fb08 f800 	mul.w	r8, r8, r0
 801a87e:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801a882:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a886:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a88a:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801a88e:	4448      	add	r0, r9
 801a890:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801a894:	0a00      	lsrs	r0, r0, #8
 801a896:	0a1b      	lsrs	r3, r3, #8
 801a898:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a89c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8a0:	4318      	orrs	r0, r3
 801a8a2:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801a8a6:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801a8aa:	fb0c f808 	mul.w	r8, ip, r8
 801a8ae:	fb05 8803 	mla	r8, r5, r3, r8
 801a8b2:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801a8b6:	fb07 8803 	mla	r8, r7, r3, r8
 801a8ba:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801a8be:	fb0e 8303 	mla	r3, lr, r3, r8
 801a8c2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a8c6:	fb0c f606 	mul.w	r6, ip, r6
 801a8ca:	0a1b      	lsrs	r3, r3, #8
 801a8cc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a8d0:	fb05 6202 	mla	r2, r5, r2, r6
 801a8d4:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801a8d8:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801a8dc:	fb07 2703 	mla	r7, r7, r3, r2
 801a8e0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 801a8e4:	b295      	uxth	r5, r2
 801a8e6:	9a03      	ldr	r2, [sp, #12]
 801a8e8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801a8ec:	436a      	muls	r2, r5
 801a8ee:	fb0e 7303 	mla	r3, lr, r3, r7
 801a8f2:	1c50      	adds	r0, r2, #1
 801a8f4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a8f8:	0a1b      	lsrs	r3, r3, #8
 801a8fa:	9a00      	ldr	r2, [sp, #0]
 801a8fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a900:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a904:	ea48 0303 	orr.w	r3, r8, r3
 801a908:	b2c0      	uxtb	r0, r0
 801a90a:	fb12 f200 	smulbb	r2, r2, r0
 801a90e:	0c1e      	lsrs	r6, r3, #16
 801a910:	fb06 2605 	mla	r6, r6, r5, r2
 801a914:	9a01      	ldr	r2, [sp, #4]
 801a916:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801a91a:	fb12 f200 	smulbb	r2, r2, r0
 801a91e:	fb04 2205 	mla	r2, r4, r5, r2
 801a922:	b294      	uxth	r4, r2
 801a924:	9a02      	ldr	r2, [sp, #8]
 801a926:	b2db      	uxtb	r3, r3
 801a928:	fb12 f200 	smulbb	r2, r2, r0
 801a92c:	fb03 2205 	mla	r2, r3, r5, r2
 801a930:	b2b6      	uxth	r6, r6
 801a932:	b292      	uxth	r2, r2
 801a934:	1c73      	adds	r3, r6, #1
 801a936:	1c50      	adds	r0, r2, #1
 801a938:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801a93c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a940:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a944:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801a948:	4313      	orrs	r3, r2
 801a94a:	1c62      	adds	r2, r4, #1
 801a94c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a950:	0952      	lsrs	r2, r2, #5
 801a952:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a956:	4313      	orrs	r3, r2
 801a958:	800b      	strh	r3, [r1, #0]
 801a95a:	b005      	add	sp, #20
 801a95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a960:	08023e5d 	.word	0x08023e5d
 801a964:	080243b9 	.word	0x080243b9
 801a968:	08023ee5 	.word	0x08023ee5

0801a96c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a970:	ed2d 8b08 	vpush	{d8-d11}
 801a974:	b09b      	sub	sp, #108	; 0x6c
 801a976:	eeb0 aa40 	vmov.f32	s20, s0
 801a97a:	9309      	str	r3, [sp, #36]	; 0x24
 801a97c:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801a980:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801a982:	9311      	str	r3, [sp, #68]	; 0x44
 801a984:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801a988:	9114      	str	r1, [sp, #80]	; 0x50
 801a98a:	9317      	str	r3, [sp, #92]	; 0x5c
 801a98c:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801a990:	9019      	str	r0, [sp, #100]	; 0x64
 801a992:	6868      	ldr	r0, [r5, #4]
 801a994:	9218      	str	r2, [sp, #96]	; 0x60
 801a996:	fb00 1303 	mla	r3, r0, r3, r1
 801a99a:	6829      	ldr	r1, [r5, #0]
 801a99c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801a99e:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801a9a2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a9a6:	930c      	str	r3, [sp, #48]	; 0x30
 801a9a8:	6813      	ldr	r3, [r2, #0]
 801a9aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801a9ac:	6853      	ldr	r3, [r2, #4]
 801a9ae:	3304      	adds	r3, #4
 801a9b0:	eef0 9a60 	vmov.f32	s19, s1
 801a9b4:	eeb0 9a41 	vmov.f32	s18, s2
 801a9b8:	eeb0 8a62 	vmov.f32	s16, s5
 801a9bc:	eef0 8a43 	vmov.f32	s17, s6
 801a9c0:	eef0 ba44 	vmov.f32	s23, s8
 801a9c4:	eeb0 ba64 	vmov.f32	s22, s9
 801a9c8:	eef0 aa45 	vmov.f32	s21, s10
 801a9cc:	9308      	str	r3, [sp, #32]
 801a9ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	dc03      	bgt.n	801a9dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801a9d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	f340 8363 	ble.w	801b0a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801a9dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	f340 81ad 	ble.w	801ad3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 801a9e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a9e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801a9e8:	1412      	asrs	r2, r2, #16
 801a9ea:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a9ee:	d42f      	bmi.n	801aa50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801a9f0:	1c51      	adds	r1, r2, #1
 801a9f2:	428c      	cmp	r4, r1
 801a9f4:	dd2f      	ble.n	801aa56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	db2d      	blt.n	801aa56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801a9fa:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a9fc:	1c59      	adds	r1, r3, #1
 801a9fe:	4288      	cmp	r0, r1
 801aa00:	dd29      	ble.n	801aa56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801aa02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa04:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801aa06:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801aa08:	3b01      	subs	r3, #1
 801aa0a:	fb02 1203 	mla	r2, r2, r3, r1
 801aa0e:	1412      	asrs	r2, r2, #16
 801aa10:	d42b      	bmi.n	801aa6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801aa12:	3201      	adds	r2, #1
 801aa14:	4294      	cmp	r4, r2
 801aa16:	dd28      	ble.n	801aa6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801aa18:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801aa1a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801aa1c:	fb02 1303 	mla	r3, r2, r3, r1
 801aa20:	141b      	asrs	r3, r3, #16
 801aa22:	d422      	bmi.n	801aa6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801aa24:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa26:	3301      	adds	r3, #1
 801aa28:	429a      	cmp	r2, r3
 801aa2a:	dd1e      	ble.n	801aa6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801aa2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa2e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801aa32:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 801aa36:	9312      	str	r3, [sp, #72]	; 0x48
 801aa38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	f300 81ea 	bgt.w	801ae14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 801aa40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa48:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801aa4c:	930c      	str	r3, [sp, #48]	; 0x30
 801aa4e:	e178      	b.n	801ad42 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 801aa50:	1c51      	adds	r1, r2, #1
 801aa52:	f040 8165 	bne.w	801ad20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801aa56:	42a2      	cmp	r2, r4
 801aa58:	f280 8162 	bge.w	801ad20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801aa5c:	1c5f      	adds	r7, r3, #1
 801aa5e:	f2c0 815f 	blt.w	801ad20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801aa62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aa64:	4293      	cmp	r3, r2
 801aa66:	f280 815b 	bge.w	801ad20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801aa6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa6c:	9316      	str	r3, [sp, #88]	; 0x58
 801aa6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa70:	9312      	str	r3, [sp, #72]	; 0x48
 801aa72:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 801aa76:	9315      	str	r3, [sp, #84]	; 0x54
 801aa78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	dde0      	ble.n	801aa40 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801aa7e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801aa80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801aa82:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801aa86:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801aa88:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801aa8c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801aa8e:	1412      	asrs	r2, r2, #16
 801aa90:	ea4f 4323 	mov.w	r3, r3, asr #16
 801aa94:	f100 81a5 	bmi.w	801ade2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 801aa98:	1c55      	adds	r5, r2, #1
 801aa9a:	42ac      	cmp	r4, r5
 801aa9c:	f340 81a3 	ble.w	801ade6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	f2c0 81a0 	blt.w	801ade6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801aaa6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801aaa8:	1c5d      	adds	r5, r3, #1
 801aaaa:	42af      	cmp	r7, r5
 801aaac:	f340 819b 	ble.w	801ade6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801aab0:	fb03 2304 	mla	r3, r3, r4, r2
 801aab4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aab6:	18d5      	adds	r5, r2, r3
 801aab8:	5cd3      	ldrb	r3, [r2, r3]
 801aaba:	9a08      	ldr	r2, [sp, #32]
 801aabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aac0:	0e1f      	lsrs	r7, r3, #24
 801aac2:	2800      	cmp	r0, #0
 801aac4:	f000 817c 	beq.w	801adc0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 801aac8:	786a      	ldrb	r2, [r5, #1]
 801aaca:	9e08      	ldr	r6, [sp, #32]
 801aacc:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801aad0:	920d      	str	r2, [sp, #52]	; 0x34
 801aad2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801aad6:	2900      	cmp	r1, #0
 801aad8:	f000 817d 	beq.w	801add6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 801aadc:	192a      	adds	r2, r5, r4
 801aade:	5d2d      	ldrb	r5, [r5, r4]
 801aae0:	7852      	ldrb	r2, [r2, #1]
 801aae2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801aae6:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801aaea:	950a      	str	r5, [sp, #40]	; 0x28
 801aaec:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801aaf0:	920e      	str	r2, [sp, #56]	; 0x38
 801aaf2:	0e15      	lsrs	r5, r2, #24
 801aaf4:	b280      	uxth	r0, r0
 801aaf6:	b289      	uxth	r1, r1
 801aaf8:	fb00 fa01 	mul.w	sl, r0, r1
 801aafc:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 801ab00:	0100      	lsls	r0, r0, #4
 801ab02:	eba0 080a 	sub.w	r8, r0, sl
 801ab06:	b289      	uxth	r1, r1
 801ab08:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801ab0c:	fa1f f888 	uxth.w	r8, r8
 801ab10:	1a52      	subs	r2, r2, r1
 801ab12:	b292      	uxth	r2, r2
 801ab14:	fb08 f00e 	mul.w	r0, r8, lr
 801ab18:	fb02 0007 	mla	r0, r2, r7, r0
 801ab1c:	fb01 0009 	mla	r0, r1, r9, r0
 801ab20:	fb0a 0005 	mla	r0, sl, r5, r0
 801ab24:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ab28:	2800      	cmp	r0, #0
 801ab2a:	f000 80ea 	beq.w	801ad02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801ab2e:	2fff      	cmp	r7, #255	; 0xff
 801ab30:	d01a      	beq.n	801ab68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 801ab32:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ab36:	fb07 fc0c 	mul.w	ip, r7, ip
 801ab3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ab3e:	435f      	muls	r7, r3
 801ab40:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ab44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ab48:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ab4c:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 801ab50:	4463      	add	r3, ip
 801ab52:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 801ab56:	0a1b      	lsrs	r3, r3, #8
 801ab58:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ab5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ab60:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801ab64:	ea43 030b 	orr.w	r3, r3, fp
 801ab68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ab6c:	d01e      	beq.n	801abac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801ab6e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801ab70:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801ab74:	fb0e fb0b 	mul.w	fp, lr, fp
 801ab78:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801ab7c:	fb0e fe07 	mul.w	lr, lr, r7
 801ab80:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801ab84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ab8c:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ab90:	44dc      	add	ip, fp
 801ab92:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ab96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ab9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aba2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801aba6:	ea4c 060e 	orr.w	r6, ip, lr
 801abaa:	960d      	str	r6, [sp, #52]	; 0x34
 801abac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801abb0:	d01e      	beq.n	801abf0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801abb2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801abb4:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801abb8:	fb09 fe0e 	mul.w	lr, r9, lr
 801abbc:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801abc0:	fb09 f907 	mul.w	r9, r9, r7
 801abc4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801abc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801abcc:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801abd0:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801abd4:	44f4      	add	ip, lr
 801abd6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801abda:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801abde:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801abe2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801abe6:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801abea:	ea4c 0609 	orr.w	r6, ip, r9
 801abee:	960a      	str	r6, [sp, #40]	; 0x28
 801abf0:	2dff      	cmp	r5, #255	; 0xff
 801abf2:	d01c      	beq.n	801ac2e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 801abf4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801abf6:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801abfa:	fb05 fe0e 	mul.w	lr, r5, lr
 801abfe:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801ac02:	437d      	muls	r5, r7
 801ac04:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ac08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac0c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ac10:	f505 7780 	add.w	r7, r5, #256	; 0x100
 801ac14:	44f4      	add	ip, lr
 801ac16:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 801ac1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac1e:	0a2d      	lsrs	r5, r5, #8
 801ac20:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac24:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ac28:	ea4c 0505 	orr.w	r5, ip, r5
 801ac2c:	950e      	str	r5, [sp, #56]	; 0x38
 801ac2e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ac30:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ac32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ac36:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ac3a:	fb08 f505 	mul.w	r5, r8, r5
 801ac3e:	fb02 5507 	mla	r5, r2, r7, r5
 801ac42:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801ac46:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801ac48:	fb01 5507 	mla	r5, r1, r7, r5
 801ac4c:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 801ac50:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801ac52:	fb0a 5507 	mla	r5, sl, r7, r5
 801ac56:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801ac5a:	fb08 f807 	mul.w	r8, r8, r7
 801ac5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ac62:	fb02 8303 	mla	r3, r2, r3, r8
 801ac66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801ac6a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801ac6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac70:	fb01 330c 	mla	r3, r1, ip, r3
 801ac74:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801ac78:	fb0a 3a01 	mla	sl, sl, r1, r3
 801ac7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ac7e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ac80:	881f      	ldrh	r7, [r3, #0]
 801ac82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ac84:	0a2d      	lsrs	r5, r5, #8
 801ac86:	4343      	muls	r3, r0
 801ac88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ac8c:	1c58      	adds	r0, r3, #1
 801ac8e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ac92:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ac96:	ea45 050a 	orr.w	r5, r5, sl
 801ac9a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ac9e:	0c29      	lsrs	r1, r5, #16
 801aca0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801aca4:	123b      	asrs	r3, r7, #8
 801aca6:	b2c0      	uxtb	r0, r0
 801aca8:	fb11 f102 	smulbb	r1, r1, r2
 801acac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801acb0:	fb03 1300 	mla	r3, r3, r0, r1
 801acb4:	b299      	uxth	r1, r3
 801acb6:	10fa      	asrs	r2, r7, #3
 801acb8:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801acbc:	fb13 f306 	smulbb	r3, r3, r6
 801acc0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801acc4:	fb02 3200 	mla	r2, r2, r0, r3
 801acc8:	b2ed      	uxtb	r5, r5
 801acca:	00fb      	lsls	r3, r7, #3
 801accc:	b2db      	uxtb	r3, r3
 801acce:	fb15 f506 	smulbb	r5, r5, r6
 801acd2:	fb03 5500 	mla	r5, r3, r0, r5
 801acd6:	b292      	uxth	r2, r2
 801acd8:	b2ad      	uxth	r5, r5
 801acda:	1c4b      	adds	r3, r1, #1
 801acdc:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ace0:	1c68      	adds	r0, r5, #1
 801ace2:	1c51      	adds	r1, r2, #1
 801ace4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801ace8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801acec:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801acf0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801acf4:	0952      	lsrs	r2, r2, #5
 801acf6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801acfa:	432b      	orrs	r3, r5
 801acfc:	4313      	orrs	r3, r2
 801acfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ad00:	8013      	strh	r3, [r2, #0]
 801ad02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ad04:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ad06:	3302      	adds	r3, #2
 801ad08:	9312      	str	r3, [sp, #72]	; 0x48
 801ad0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ad0c:	4413      	add	r3, r2
 801ad0e:	932d      	str	r3, [sp, #180]	; 0xb4
 801ad10:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ad12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad14:	4413      	add	r3, r2
 801ad16:	932e      	str	r3, [sp, #184]	; 0xb8
 801ad18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ad1a:	3b01      	subs	r3, #1
 801ad1c:	9316      	str	r3, [sp, #88]	; 0x58
 801ad1e:	e6ab      	b.n	801aa78 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 801ad20:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ad22:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801ad24:	4413      	add	r3, r2
 801ad26:	932d      	str	r3, [sp, #180]	; 0xb4
 801ad28:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801ad2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ad2c:	4413      	add	r3, r2
 801ad2e:	932e      	str	r3, [sp, #184]	; 0xb8
 801ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad32:	3b01      	subs	r3, #1
 801ad34:	9309      	str	r3, [sp, #36]	; 0x24
 801ad36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad38:	3302      	adds	r3, #2
 801ad3a:	930c      	str	r3, [sp, #48]	; 0x30
 801ad3c:	e64e      	b.n	801a9dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801ad3e:	f47f ae60 	bne.w	801aa02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801ad42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	f340 81ac 	ble.w	801b0a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 801ad4a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ad4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ad56:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ad58:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ad5c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ad60:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ad64:	eef0 6a48 	vmov.f32	s13, s16
 801ad68:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ad6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad70:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ad74:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801ad78:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ad7c:	eef0 6a68 	vmov.f32	s13, s17
 801ad80:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ad84:	ee18 2a10 	vmov	r2, s16
 801ad88:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ad8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad90:	ee18 2a90 	vmov	r2, s17
 801ad94:	932f      	str	r3, [sp, #188]	; 0xbc
 801ad96:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ad98:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad9c:	9330      	str	r3, [sp, #192]	; 0xc0
 801ad9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ada0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ada2:	3b01      	subs	r3, #1
 801ada4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ada8:	9314      	str	r3, [sp, #80]	; 0x50
 801adaa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801adac:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801adb0:	bf08      	it	eq
 801adb2:	4613      	moveq	r3, r2
 801adb4:	9309      	str	r3, [sp, #36]	; 0x24
 801adb6:	eef0 8a67 	vmov.f32	s17, s15
 801adba:	eeb0 8a47 	vmov.f32	s16, s14
 801adbe:	e606      	b.n	801a9ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801adc0:	b161      	cbz	r1, 801addc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801adc2:	5d2a      	ldrb	r2, [r5, r4]
 801adc4:	9d08      	ldr	r5, [sp, #32]
 801adc6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801adca:	920a      	str	r2, [sp, #40]	; 0x28
 801adcc:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801add0:	25ff      	movs	r5, #255	; 0xff
 801add2:	46ae      	mov	lr, r5
 801add4:	e68e      	b.n	801aaf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801add6:	25ff      	movs	r5, #255	; 0xff
 801add8:	46a9      	mov	r9, r5
 801adda:	e68b      	b.n	801aaf4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 801addc:	25ff      	movs	r5, #255	; 0xff
 801adde:	46a9      	mov	r9, r5
 801ade0:	e7f7      	b.n	801add2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801ade2:	1c56      	adds	r6, r2, #1
 801ade4:	d18d      	bne.n	801ad02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801ade6:	4294      	cmp	r4, r2
 801ade8:	dd8b      	ble.n	801ad02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801adea:	1c5d      	adds	r5, r3, #1
 801adec:	db89      	blt.n	801ad02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801adee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801adf0:	429d      	cmp	r5, r3
 801adf2:	dd86      	ble.n	801ad02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801adf4:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801adf8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801adfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801adfc:	9202      	str	r2, [sp, #8]
 801adfe:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801ae02:	e9cd 4300 	strd	r4, r3, [sp]
 801ae06:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 801ae0a:	9b08      	ldr	r3, [sp, #32]
 801ae0c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ae0e:	f7ff fc49 	bl	801a6a4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801ae12:	e776      	b.n	801ad02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801ae14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ae16:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ae18:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801ae1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ae1e:	1412      	asrs	r2, r2, #16
 801ae20:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801ae24:	141b      	asrs	r3, r3, #16
 801ae26:	fb04 2303 	mla	r3, r4, r3, r2
 801ae2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ae2c:	18d5      	adds	r5, r2, r3
 801ae2e:	5cd3      	ldrb	r3, [r2, r3]
 801ae30:	9a08      	ldr	r2, [sp, #32]
 801ae32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ae36:	0e1e      	lsrs	r6, r3, #24
 801ae38:	2900      	cmp	r1, #0
 801ae3a:	f000 8121 	beq.w	801b080 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801ae3e:	786a      	ldrb	r2, [r5, #1]
 801ae40:	9f08      	ldr	r7, [sp, #32]
 801ae42:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801ae46:	920f      	str	r2, [sp, #60]	; 0x3c
 801ae48:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801ae4c:	2800      	cmp	r0, #0
 801ae4e:	f000 8122 	beq.w	801b096 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 801ae52:	192a      	adds	r2, r5, r4
 801ae54:	5d2d      	ldrb	r5, [r5, r4]
 801ae56:	7852      	ldrb	r2, [r2, #1]
 801ae58:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801ae5c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801ae60:	950b      	str	r5, [sp, #44]	; 0x2c
 801ae62:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ae66:	9210      	str	r2, [sp, #64]	; 0x40
 801ae68:	0e15      	lsrs	r5, r2, #24
 801ae6a:	b289      	uxth	r1, r1
 801ae6c:	b280      	uxth	r0, r0
 801ae6e:	fb01 f900 	mul.w	r9, r1, r0
 801ae72:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ae76:	0109      	lsls	r1, r1, #4
 801ae78:	eba1 0e09 	sub.w	lr, r1, r9
 801ae7c:	b280      	uxth	r0, r0
 801ae7e:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801ae82:	fa1f fe8e 	uxth.w	lr, lr
 801ae86:	1a12      	subs	r2, r2, r0
 801ae88:	b292      	uxth	r2, r2
 801ae8a:	fb0e f10c 	mul.w	r1, lr, ip
 801ae8e:	fb02 1106 	mla	r1, r2, r6, r1
 801ae92:	fb00 1108 	mla	r1, r0, r8, r1
 801ae96:	fb09 1105 	mla	r1, r9, r5, r1
 801ae9a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ae9e:	2900      	cmp	r1, #0
 801aea0:	f000 80e0 	beq.w	801b064 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 801aea4:	2eff      	cmp	r6, #255	; 0xff
 801aea6:	d016      	beq.n	801aed6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 801aea8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801aeac:	4377      	muls	r7, r6
 801aeae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801aeb2:	435e      	muls	r6, r3
 801aeb4:	0a3b      	lsrs	r3, r7, #8
 801aeb6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aeba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aebe:	443b      	add	r3, r7
 801aec0:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801aec4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801aec8:	0a1b      	lsrs	r3, r3, #8
 801aeca:	0a3f      	lsrs	r7, r7, #8
 801aecc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aed0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801aed4:	433b      	orrs	r3, r7
 801aed6:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801aeda:	d01d      	beq.n	801af18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 801aedc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801aede:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801aee0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801aee4:	fb0c f606 	mul.w	r6, ip, r6
 801aee8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801aeec:	fb0c fc07 	mul.w	ip, ip, r7
 801aef0:	0a37      	lsrs	r7, r6, #8
 801aef2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801aef6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801aefa:	4437      	add	r7, r6
 801aefc:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801af00:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801af04:	0a3f      	lsrs	r7, r7, #8
 801af06:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801af0e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801af12:	ea47 060c 	orr.w	r6, r7, ip
 801af16:	960f      	str	r6, [sp, #60]	; 0x3c
 801af18:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801af1c:	d01d      	beq.n	801af5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 801af1e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801af20:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801af24:	fb08 fc0c 	mul.w	ip, r8, ip
 801af28:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801af2c:	fb08 f806 	mul.w	r8, r8, r6
 801af30:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801af34:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801af38:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801af3c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af40:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801af44:	4467      	add	r7, ip
 801af46:	0a3f      	lsrs	r7, r7, #8
 801af48:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801af4c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801af50:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801af54:	ea47 0608 	orr.w	r6, r7, r8
 801af58:	960b      	str	r6, [sp, #44]	; 0x2c
 801af5a:	2dff      	cmp	r5, #255	; 0xff
 801af5c:	d01a      	beq.n	801af94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801af5e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801af60:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801af64:	fb05 fc0c 	mul.w	ip, r5, ip
 801af68:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801af6c:	4375      	muls	r5, r6
 801af6e:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801af72:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801af76:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801af7a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801af7e:	4467      	add	r7, ip
 801af80:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801af84:	0a3f      	lsrs	r7, r7, #8
 801af86:	0a2d      	lsrs	r5, r5, #8
 801af88:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801af8c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801af90:	433d      	orrs	r5, r7
 801af92:	9510      	str	r5, [sp, #64]	; 0x40
 801af94:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801af96:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801af9a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801af9e:	fb0e f505 	mul.w	r5, lr, r5
 801afa2:	fb02 5506 	mla	r5, r2, r6, r5
 801afa6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801afa8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801afac:	fb00 5506 	mla	r5, r0, r6, r5
 801afb0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801afb2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801afb6:	fb09 5506 	mla	r5, r9, r6, r5
 801afba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801afbc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801afc0:	fb0e fe06 	mul.w	lr, lr, r6
 801afc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801afc8:	fb02 e303 	mla	r3, r2, r3, lr
 801afcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afce:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801afd2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801afd4:	fb00 3307 	mla	r3, r0, r7, r3
 801afd8:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801afdc:	fb09 3c0c 	mla	ip, r9, ip, r3
 801afe0:	fb01 f10b 	mul.w	r1, r1, fp
 801afe4:	0a2d      	lsrs	r5, r5, #8
 801afe6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801afea:	f8ba 0000 	ldrh.w	r0, [sl]
 801afee:	1c4b      	adds	r3, r1, #1
 801aff0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801aff4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801aff8:	ea45 050c 	orr.w	r5, r5, ip
 801affc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801b000:	1202      	asrs	r2, r0, #8
 801b002:	0c2b      	lsrs	r3, r5, #16
 801b004:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b008:	b2c9      	uxtb	r1, r1
 801b00a:	fb13 f30b 	smulbb	r3, r3, fp
 801b00e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801b012:	fb02 3201 	mla	r2, r2, r1, r3
 801b016:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801b01a:	10c3      	asrs	r3, r0, #3
 801b01c:	b2ed      	uxtb	r5, r5
 801b01e:	00c0      	lsls	r0, r0, #3
 801b020:	b2c0      	uxtb	r0, r0
 801b022:	fb15 f50b 	smulbb	r5, r5, fp
 801b026:	fb00 5001 	mla	r0, r0, r1, r5
 801b02a:	b292      	uxth	r2, r2
 801b02c:	fb16 f60b 	smulbb	r6, r6, fp
 801b030:	b280      	uxth	r0, r0
 801b032:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801b036:	fb03 6301 	mla	r3, r3, r1, r6
 801b03a:	1c51      	adds	r1, r2, #1
 801b03c:	1c46      	adds	r6, r0, #1
 801b03e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b042:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801b046:	b29b      	uxth	r3, r3
 801b048:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801b04c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801b050:	4332      	orrs	r2, r6
 801b052:	1c5e      	adds	r6, r3, #1
 801b054:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b058:	095b      	lsrs	r3, r3, #5
 801b05a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b05e:	431a      	orrs	r2, r3
 801b060:	f8aa 2000 	strh.w	r2, [sl]
 801b064:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801b066:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801b068:	4413      	add	r3, r2
 801b06a:	932d      	str	r3, [sp, #180]	; 0xb4
 801b06c:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801b06e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b070:	4413      	add	r3, r2
 801b072:	932e      	str	r3, [sp, #184]	; 0xb8
 801b074:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b076:	3b01      	subs	r3, #1
 801b078:	f10a 0a02 	add.w	sl, sl, #2
 801b07c:	9312      	str	r3, [sp, #72]	; 0x48
 801b07e:	e4db      	b.n	801aa38 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801b080:	b160      	cbz	r0, 801b09c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801b082:	5d2a      	ldrb	r2, [r5, r4]
 801b084:	9d08      	ldr	r5, [sp, #32]
 801b086:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b08a:	920b      	str	r2, [sp, #44]	; 0x2c
 801b08c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b090:	25ff      	movs	r5, #255	; 0xff
 801b092:	46ac      	mov	ip, r5
 801b094:	e6e9      	b.n	801ae6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801b096:	25ff      	movs	r5, #255	; 0xff
 801b098:	46a8      	mov	r8, r5
 801b09a:	e6e6      	b.n	801ae6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 801b09c:	25ff      	movs	r5, #255	; 0xff
 801b09e:	46a8      	mov	r8, r5
 801b0a0:	e7f7      	b.n	801b092 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 801b0a2:	b01b      	add	sp, #108	; 0x6c
 801b0a4:	ecbd 8b08 	vpop	{d8-d11}
 801b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b0:	8808      	ldrh	r0, [r1, #0]
 801b0b2:	b085      	sub	sp, #20
 801b0b4:	1206      	asrs	r6, r0, #8
 801b0b6:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 801b0ba:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b0be:	9600      	str	r6, [sp, #0]
 801b0c0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801b0c4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801b0c8:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801b0cc:	10c6      	asrs	r6, r0, #3
 801b0ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b0d2:	9601      	str	r6, [sp, #4]
 801b0d4:	00c0      	lsls	r0, r0, #3
 801b0d6:	fb04 560c 	mla	r6, r4, ip, r5
 801b0da:	b2c0      	uxtb	r0, r0
 801b0dc:	4692      	mov	sl, r2
 801b0de:	eb02 0e06 	add.w	lr, r2, r6
 801b0e2:	9a00      	ldr	r2, [sp, #0]
 801b0e4:	9002      	str	r0, [sp, #8]
 801b0e6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801b0ea:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801b0ee:	9a01      	ldr	r2, [sp, #4]
 801b0f0:	2c00      	cmp	r4, #0
 801b0f2:	4698      	mov	r8, r3
 801b0f4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801b0f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b0fc:	db3e      	blt.n	801b17c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801b0fe:	45a1      	cmp	r9, r4
 801b100:	dd3c      	ble.n	801b17c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 801b102:	2d00      	cmp	r5, #0
 801b104:	db38      	blt.n	801b178 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801b106:	45ac      	cmp	ip, r5
 801b108:	dd36      	ble.n	801b178 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 801b10a:	f81a 2006 	ldrb.w	r2, [sl, r6]
 801b10e:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801b112:	1c6e      	adds	r6, r5, #1
 801b114:	d435      	bmi.n	801b182 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801b116:	45b4      	cmp	ip, r6
 801b118:	dd33      	ble.n	801b182 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801b11a:	b393      	cbz	r3, 801b182 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 801b11c:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801b120:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 801b124:	3401      	adds	r4, #1
 801b126:	d430      	bmi.n	801b18a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801b128:	45a1      	cmp	r9, r4
 801b12a:	dd2e      	ble.n	801b18a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801b12c:	b36f      	cbz	r7, 801b18a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 801b12e:	2d00      	cmp	r5, #0
 801b130:	db29      	blt.n	801b186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801b132:	45ac      	cmp	ip, r5
 801b134:	dd27      	ble.n	801b186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 801b136:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801b13a:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801b13e:	3501      	adds	r5, #1
 801b140:	d407      	bmi.n	801b152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801b142:	45ac      	cmp	ip, r5
 801b144:	dd05      	ble.n	801b152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801b146:	b123      	cbz	r3, 801b152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801b148:	44f4      	add	ip, lr
 801b14a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801b14e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801b152:	2b0f      	cmp	r3, #15
 801b154:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801b158:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b15c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b160:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801b164:	d801      	bhi.n	801b16a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 801b166:	2f0f      	cmp	r7, #15
 801b168:	d911      	bls.n	801b18e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 801b16a:	4b79      	ldr	r3, [pc, #484]	; (801b350 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 801b16c:	4a79      	ldr	r2, [pc, #484]	; (801b354 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 801b16e:	487a      	ldr	r0, [pc, #488]	; (801b358 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 801b170:	f240 3173 	movw	r1, #883	; 0x373
 801b174:	f004 ff28 	bl	801ffc8 <__assert_func>
 801b178:	4602      	mov	r2, r0
 801b17a:	e7ca      	b.n	801b112 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 801b17c:	4606      	mov	r6, r0
 801b17e:	4602      	mov	r2, r0
 801b180:	e7d0      	b.n	801b124 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801b182:	4606      	mov	r6, r0
 801b184:	e7ce      	b.n	801b124 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 801b186:	4604      	mov	r4, r0
 801b188:	e7d9      	b.n	801b13e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 801b18a:	4604      	mov	r4, r0
 801b18c:	e7e1      	b.n	801b152 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 801b18e:	b29b      	uxth	r3, r3
 801b190:	b2bf      	uxth	r7, r7
 801b192:	fb03 fe07 	mul.w	lr, r3, r7
 801b196:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801b19a:	011b      	lsls	r3, r3, #4
 801b19c:	eba3 0c0e 	sub.w	ip, r3, lr
 801b1a0:	b2bf      	uxth	r7, r7
 801b1a2:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801b1a6:	fa1f fc8c 	uxth.w	ip, ip
 801b1aa:	1bed      	subs	r5, r5, r7
 801b1ac:	b2ad      	uxth	r5, r5
 801b1ae:	fb0c f30a 	mul.w	r3, ip, sl
 801b1b2:	fb05 330b 	mla	r3, r5, fp, r3
 801b1b6:	fb07 3309 	mla	r3, r7, r9, r3
 801b1ba:	fb0e 3308 	mla	r3, lr, r8, r3
 801b1be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b1c2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b1c6:	9303      	str	r3, [sp, #12]
 801b1c8:	d018      	beq.n	801b1fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 801b1ca:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b1ce:	fb0b f303 	mul.w	r3, fp, r3
 801b1d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b1d6:	fb0b fb02 	mul.w	fp, fp, r2
 801b1da:	0a1a      	lsrs	r2, r3, #8
 801b1dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b1e0:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801b1e4:	441a      	add	r2, r3
 801b1e6:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801b1ea:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801b1ee:	0a12      	lsrs	r2, r2, #8
 801b1f0:	0a1b      	lsrs	r3, r3, #8
 801b1f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b1f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b1fa:	431a      	orrs	r2, r3
 801b1fc:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b200:	d019      	beq.n	801b236 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 801b202:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801b206:	fb0a fb0b 	mul.w	fp, sl, fp
 801b20a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b20e:	fb0a fa06 	mul.w	sl, sl, r6
 801b212:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801b216:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b21a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b21e:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801b222:	445e      	add	r6, fp
 801b224:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b228:	0a36      	lsrs	r6, r6, #8
 801b22a:	0a1b      	lsrs	r3, r3, #8
 801b22c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b230:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b234:	431e      	orrs	r6, r3
 801b236:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b23a:	d019      	beq.n	801b270 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 801b23c:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801b240:	fb09 fa0a 	mul.w	sl, r9, sl
 801b244:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b248:	fb09 f904 	mul.w	r9, r9, r4
 801b24c:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801b250:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b254:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b258:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801b25c:	4454      	add	r4, sl
 801b25e:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801b262:	0a24      	lsrs	r4, r4, #8
 801b264:	0a1b      	lsrs	r3, r3, #8
 801b266:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b26a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b26e:	431c      	orrs	r4, r3
 801b270:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b274:	d019      	beq.n	801b2aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 801b276:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801b27a:	fb08 f909 	mul.w	r9, r8, r9
 801b27e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b282:	fb08 f800 	mul.w	r8, r8, r0
 801b286:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801b28a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b28e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801b292:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801b296:	4448      	add	r0, r9
 801b298:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801b29c:	0a00      	lsrs	r0, r0, #8
 801b29e:	0a1b      	lsrs	r3, r3, #8
 801b2a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b2a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b2a8:	4318      	orrs	r0, r3
 801b2aa:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b2ae:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b2b2:	fb0c f808 	mul.w	r8, ip, r8
 801b2b6:	fb05 8803 	mla	r8, r5, r3, r8
 801b2ba:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801b2be:	fb07 8803 	mla	r8, r7, r3, r8
 801b2c2:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801b2c6:	fb0e 8303 	mla	r3, lr, r3, r8
 801b2ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b2ce:	0a1b      	lsrs	r3, r3, #8
 801b2d0:	fb0c f606 	mul.w	r6, ip, r6
 801b2d4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b2d8:	fb05 6202 	mla	r2, r5, r2, r6
 801b2dc:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 801b2e0:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 801b2e4:	fb07 2703 	mla	r7, r7, r3, r2
 801b2e8:	9a03      	ldr	r2, [sp, #12]
 801b2ea:	9c02      	ldr	r4, [sp, #8]
 801b2ec:	9d01      	ldr	r5, [sp, #4]
 801b2ee:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801b2f2:	fb0e 7303 	mla	r3, lr, r3, r7
 801b2f6:	43d0      	mvns	r0, r2
 801b2f8:	9a00      	ldr	r2, [sp, #0]
 801b2fa:	b2c0      	uxtb	r0, r0
 801b2fc:	0a1b      	lsrs	r3, r3, #8
 801b2fe:	4342      	muls	r2, r0
 801b300:	4344      	muls	r4, r0
 801b302:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b306:	ea48 0303 	orr.w	r3, r8, r3
 801b30a:	4345      	muls	r5, r0
 801b30c:	4620      	mov	r0, r4
 801b30e:	1c54      	adds	r4, r2, #1
 801b310:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801b314:	0c1a      	lsrs	r2, r3, #16
 801b316:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801b31a:	4a10      	ldr	r2, [pc, #64]	; (801b35c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 801b31c:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 801b320:	1c44      	adds	r4, r0, #1
 801b322:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 801b326:	b2d8      	uxtb	r0, r3
 801b328:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 801b32c:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 801b330:	1c68      	adds	r0, r5, #1
 801b332:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 801b336:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b33a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801b33e:	00db      	lsls	r3, r3, #3
 801b340:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b344:	4313      	orrs	r3, r2
 801b346:	800b      	strh	r3, [r1, #0]
 801b348:	b005      	add	sp, #20
 801b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b34e:	bf00      	nop
 801b350:	08023e5d 	.word	0x08023e5d
 801b354:	080243b9 	.word	0x080243b9
 801b358:	08023ee5 	.word	0x08023ee5
 801b35c:	fffff800 	.word	0xfffff800

0801b360 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b364:	ed2d 8b08 	vpush	{d8-d11}
 801b368:	b097      	sub	sp, #92	; 0x5c
 801b36a:	eeb0 aa40 	vmov.f32	s20, s0
 801b36e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 801b370:	9307      	str	r3, [sp, #28]
 801b372:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801b376:	9112      	str	r1, [sp, #72]	; 0x48
 801b378:	930f      	str	r3, [sp, #60]	; 0x3c
 801b37a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801b37e:	9015      	str	r0, [sp, #84]	; 0x54
 801b380:	6868      	ldr	r0, [r5, #4]
 801b382:	9214      	str	r2, [sp, #80]	; 0x50
 801b384:	fb00 1303 	mla	r3, r0, r3, r1
 801b388:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801b38a:	6829      	ldr	r1, [r5, #0]
 801b38c:	6855      	ldr	r5, [r2, #4]
 801b38e:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 801b392:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801b396:	930a      	str	r3, [sp, #40]	; 0x28
 801b398:	6813      	ldr	r3, [r2, #0]
 801b39a:	9311      	str	r3, [sp, #68]	; 0x44
 801b39c:	eef0 9a60 	vmov.f32	s19, s1
 801b3a0:	eeb0 9a41 	vmov.f32	s18, s2
 801b3a4:	eeb0 8a62 	vmov.f32	s16, s5
 801b3a8:	eef0 8a43 	vmov.f32	s17, s6
 801b3ac:	eef0 ba44 	vmov.f32	s23, s8
 801b3b0:	eeb0 ba64 	vmov.f32	s22, s9
 801b3b4:	eef0 aa45 	vmov.f32	s21, s10
 801b3b8:	3504      	adds	r5, #4
 801b3ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	dc03      	bgt.n	801b3c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801b3c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	f340 834d 	ble.w	801ba62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 801b3c8:	9b07      	ldr	r3, [sp, #28]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	f340 819c 	ble.w	801b708 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 801b3d0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b3d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b3d4:	1412      	asrs	r2, r2, #16
 801b3d6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b3da:	d42d      	bmi.n	801b438 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b3dc:	1c51      	adds	r1, r2, #1
 801b3de:	428c      	cmp	r4, r1
 801b3e0:	dd2d      	ble.n	801b43e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	db2b      	blt.n	801b43e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b3e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b3e8:	1c59      	adds	r1, r3, #1
 801b3ea:	4288      	cmp	r0, r1
 801b3ec:	dd27      	ble.n	801b43e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801b3ee:	9b07      	ldr	r3, [sp, #28]
 801b3f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b3f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b3f4:	3b01      	subs	r3, #1
 801b3f6:	fb02 1203 	mla	r2, r2, r3, r1
 801b3fa:	1412      	asrs	r2, r2, #16
 801b3fc:	d429      	bmi.n	801b452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801b3fe:	3201      	adds	r2, #1
 801b400:	4294      	cmp	r4, r2
 801b402:	dd26      	ble.n	801b452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801b404:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b406:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b408:	fb02 1303 	mla	r3, r2, r3, r1
 801b40c:	141b      	asrs	r3, r3, #16
 801b40e:	d420      	bmi.n	801b452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801b410:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b412:	3301      	adds	r3, #1
 801b414:	429a      	cmp	r2, r3
 801b416:	dd1c      	ble.n	801b452 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801b418:	9b07      	ldr	r3, [sp, #28]
 801b41a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 801b41e:	9310      	str	r3, [sp, #64]	; 0x40
 801b420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b422:	2b00      	cmp	r3, #0
 801b424:	f300 81da 	bgt.w	801b7dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 801b428:	9b07      	ldr	r3, [sp, #28]
 801b42a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b42c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b430:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b434:	930a      	str	r3, [sp, #40]	; 0x28
 801b436:	e169      	b.n	801b70c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801b438:	1c51      	adds	r1, r2, #1
 801b43a:	f040 8156 	bne.w	801b6ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801b43e:	42a2      	cmp	r2, r4
 801b440:	f280 8153 	bge.w	801b6ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801b444:	1c5a      	adds	r2, r3, #1
 801b446:	f2c0 8150 	blt.w	801b6ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801b44a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b44c:	4293      	cmp	r3, r2
 801b44e:	f280 814c 	bge.w	801b6ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 801b452:	9b07      	ldr	r3, [sp, #28]
 801b454:	9313      	str	r3, [sp, #76]	; 0x4c
 801b456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b458:	9310      	str	r3, [sp, #64]	; 0x40
 801b45a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b45c:	2b00      	cmp	r3, #0
 801b45e:	dde3      	ble.n	801b428 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801b460:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b462:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b464:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b468:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b46a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801b46e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b470:	1412      	asrs	r2, r2, #16
 801b472:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b476:	f100 8198 	bmi.w	801b7aa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 801b47a:	1c56      	adds	r6, r2, #1
 801b47c:	42b4      	cmp	r4, r6
 801b47e:	f340 8196 	ble.w	801b7ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801b482:	2b00      	cmp	r3, #0
 801b484:	f2c0 8193 	blt.w	801b7ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801b488:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b48a:	1c5e      	adds	r6, r3, #1
 801b48c:	42b7      	cmp	r7, r6
 801b48e:	f340 818e 	ble.w	801b7ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801b492:	fb03 2304 	mla	r3, r3, r4, r2
 801b496:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b498:	18d6      	adds	r6, r2, r3
 801b49a:	5cd3      	ldrb	r3, [r2, r3]
 801b49c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b4a0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b4a4:	2900      	cmp	r1, #0
 801b4a6:	f000 8170 	beq.w	801b78a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 801b4aa:	7872      	ldrb	r2, [r6, #1]
 801b4ac:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b4b0:	920b      	str	r2, [sp, #44]	; 0x2c
 801b4b2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b4b6:	2800      	cmp	r0, #0
 801b4b8:	f000 8171 	beq.w	801b79e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 801b4bc:	1932      	adds	r2, r6, r4
 801b4be:	5d36      	ldrb	r6, [r6, r4]
 801b4c0:	7852      	ldrb	r2, [r2, #1]
 801b4c2:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b4c6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b4ca:	9608      	str	r6, [sp, #32]
 801b4cc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b4d0:	920c      	str	r2, [sp, #48]	; 0x30
 801b4d2:	0e16      	lsrs	r6, r2, #24
 801b4d4:	b289      	uxth	r1, r1
 801b4d6:	b280      	uxth	r0, r0
 801b4d8:	fb01 fb00 	mul.w	fp, r1, r0
 801b4dc:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801b4e0:	0109      	lsls	r1, r1, #4
 801b4e2:	eba1 090b 	sub.w	r9, r1, fp
 801b4e6:	b280      	uxth	r0, r0
 801b4e8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801b4ec:	fa1f f989 	uxth.w	r9, r9
 801b4f0:	1a12      	subs	r2, r2, r0
 801b4f2:	b292      	uxth	r2, r2
 801b4f4:	fb09 f108 	mul.w	r1, r9, r8
 801b4f8:	fb02 110c 	mla	r1, r2, ip, r1
 801b4fc:	fb00 110a 	mla	r1, r0, sl, r1
 801b500:	fb0b 1106 	mla	r1, fp, r6, r1
 801b504:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b508:	2900      	cmp	r1, #0
 801b50a:	f000 80df 	beq.w	801b6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801b50e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b512:	d01b      	beq.n	801b54c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 801b514:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b518:	fb0c fe0e 	mul.w	lr, ip, lr
 801b51c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b520:	fb0c fc03 	mul.w	ip, ip, r3
 801b524:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801b528:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b52c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b530:	4473      	add	r3, lr
 801b532:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801b536:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801b53a:	0a1b      	lsrs	r3, r3, #8
 801b53c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b540:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b544:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b548:	ea43 030e 	orr.w	r3, r3, lr
 801b54c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b550:	d01e      	beq.n	801b590 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801b552:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b554:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801b558:	fb08 fc0c 	mul.w	ip, r8, ip
 801b55c:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 801b560:	fb08 f80e 	mul.w	r8, r8, lr
 801b564:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b568:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b56c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b570:	44e6      	add	lr, ip
 801b572:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801b576:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801b57a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b57e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b582:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b586:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b58a:	ea4e 0708 	orr.w	r7, lr, r8
 801b58e:	970b      	str	r7, [sp, #44]	; 0x2c
 801b590:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b594:	d01e      	beq.n	801b5d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801b596:	9f08      	ldr	r7, [sp, #32]
 801b598:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801b59c:	fb0a f808 	mul.w	r8, sl, r8
 801b5a0:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801b5a4:	fb0a fa0c 	mul.w	sl, sl, ip
 801b5a8:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b5ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b5b0:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b5b4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b5b8:	44c6      	add	lr, r8
 801b5ba:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b5be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b5c2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b5c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b5ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b5ce:	ea4e 070a 	orr.w	r7, lr, sl
 801b5d2:	9708      	str	r7, [sp, #32]
 801b5d4:	2eff      	cmp	r6, #255	; 0xff
 801b5d6:	d01d      	beq.n	801b614 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801b5d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b5da:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 801b5de:	fb06 f808 	mul.w	r8, r6, r8
 801b5e2:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801b5e6:	fb06 f60c 	mul.w	r6, r6, ip
 801b5ea:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b5ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b5f2:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b5f6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b5fa:	44c6      	add	lr, r8
 801b5fc:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b600:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b604:	0a36      	lsrs	r6, r6, #8
 801b606:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b60a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b60e:	ea4e 0606 	orr.w	r6, lr, r6
 801b612:	960c      	str	r6, [sp, #48]	; 0x30
 801b614:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b616:	9f08      	ldr	r7, [sp, #32]
 801b618:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b61c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b620:	fb09 f606 	mul.w	r6, r9, r6
 801b624:	fb02 660c 	mla	r6, r2, ip, r6
 801b628:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801b62c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b62e:	fb00 660c 	mla	r6, r0, ip, r6
 801b632:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801b636:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b638:	fb0b 660c 	mla	r6, fp, ip, r6
 801b63c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 801b640:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b644:	fb09 f90c 	mul.w	r9, r9, ip
 801b648:	fb02 9303 	mla	r3, r2, r3, r9
 801b64c:	9a08      	ldr	r2, [sp, #32]
 801b64e:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801b652:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b654:	fb00 330e 	mla	r3, r0, lr, r3
 801b658:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801b65c:	fb0b 3b00 	mla	fp, fp, r0, r3
 801b660:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b662:	881b      	ldrh	r3, [r3, #0]
 801b664:	43c9      	mvns	r1, r1
 801b666:	1218      	asrs	r0, r3, #8
 801b668:	b2c9      	uxtb	r1, r1
 801b66a:	10da      	asrs	r2, r3, #3
 801b66c:	0a36      	lsrs	r6, r6, #8
 801b66e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801b672:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b676:	00db      	lsls	r3, r3, #3
 801b678:	4348      	muls	r0, r1
 801b67a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b67e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801b682:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b686:	b2db      	uxtb	r3, r3
 801b688:	434b      	muls	r3, r1
 801b68a:	ea46 060b 	orr.w	r6, r6, fp
 801b68e:	434a      	muls	r2, r1
 801b690:	1c41      	adds	r1, r0, #1
 801b692:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801b696:	0c30      	lsrs	r0, r6, #16
 801b698:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801b69c:	494e      	ldr	r1, [pc, #312]	; (801b7d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 801b69e:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801b6a2:	1c59      	adds	r1, r3, #1
 801b6a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b6a8:	b2f3      	uxtb	r3, r6
 801b6aa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801b6ae:	1c51      	adds	r1, r2, #1
 801b6b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801b6b4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b6b8:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801b6bc:	00f6      	lsls	r6, r6, #3
 801b6be:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 801b6c2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b6c6:	431e      	orrs	r6, r3
 801b6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b6ca:	801e      	strh	r6, [r3, #0]
 801b6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b6ce:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b6d0:	3302      	adds	r3, #2
 801b6d2:	9310      	str	r3, [sp, #64]	; 0x40
 801b6d4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b6d6:	4413      	add	r3, r2
 801b6d8:	9329      	str	r3, [sp, #164]	; 0xa4
 801b6da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b6dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b6de:	4413      	add	r3, r2
 801b6e0:	932a      	str	r3, [sp, #168]	; 0xa8
 801b6e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b6e4:	3b01      	subs	r3, #1
 801b6e6:	9313      	str	r3, [sp, #76]	; 0x4c
 801b6e8:	e6b7      	b.n	801b45a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801b6ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b6ec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b6ee:	4413      	add	r3, r2
 801b6f0:	9329      	str	r3, [sp, #164]	; 0xa4
 801b6f2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801b6f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b6f6:	4413      	add	r3, r2
 801b6f8:	932a      	str	r3, [sp, #168]	; 0xa8
 801b6fa:	9b07      	ldr	r3, [sp, #28]
 801b6fc:	3b01      	subs	r3, #1
 801b6fe:	9307      	str	r3, [sp, #28]
 801b700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b702:	3302      	adds	r3, #2
 801b704:	930a      	str	r3, [sp, #40]	; 0x28
 801b706:	e65f      	b.n	801b3c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801b708:	f47f ae71 	bne.w	801b3ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 801b70c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b70e:	2b00      	cmp	r3, #0
 801b710:	f340 81a7 	ble.w	801ba62 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 801b714:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b71c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b720:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b722:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b726:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b72a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b72e:	eef0 6a48 	vmov.f32	s13, s16
 801b732:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b736:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b73a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b73e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801b742:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b746:	eef0 6a68 	vmov.f32	s13, s17
 801b74a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b74e:	ee18 2a10 	vmov	r2, s16
 801b752:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b756:	fb92 f3f3 	sdiv	r3, r2, r3
 801b75a:	ee18 2a90 	vmov	r2, s17
 801b75e:	932b      	str	r3, [sp, #172]	; 0xac
 801b760:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b762:	fb92 f3f3 	sdiv	r3, r2, r3
 801b766:	932c      	str	r3, [sp, #176]	; 0xb0
 801b768:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b76a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b76c:	3b01      	subs	r3, #1
 801b76e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b772:	9312      	str	r3, [sp, #72]	; 0x48
 801b774:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b776:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 801b77a:	bf08      	it	eq
 801b77c:	4613      	moveq	r3, r2
 801b77e:	9307      	str	r3, [sp, #28]
 801b780:	eef0 8a67 	vmov.f32	s17, s15
 801b784:	eeb0 8a47 	vmov.f32	s16, s14
 801b788:	e617      	b.n	801b3ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 801b78a:	b158      	cbz	r0, 801b7a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 801b78c:	5d32      	ldrb	r2, [r6, r4]
 801b78e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801b792:	9208      	str	r2, [sp, #32]
 801b794:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801b798:	26ff      	movs	r6, #255	; 0xff
 801b79a:	46b0      	mov	r8, r6
 801b79c:	e69a      	b.n	801b4d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801b79e:	26ff      	movs	r6, #255	; 0xff
 801b7a0:	46b2      	mov	sl, r6
 801b7a2:	e697      	b.n	801b4d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801b7a4:	26ff      	movs	r6, #255	; 0xff
 801b7a6:	46b2      	mov	sl, r6
 801b7a8:	e7f7      	b.n	801b79a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 801b7aa:	1c57      	adds	r7, r2, #1
 801b7ac:	d18e      	bne.n	801b6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801b7ae:	4294      	cmp	r4, r2
 801b7b0:	dd8c      	ble.n	801b6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801b7b2:	1c5e      	adds	r6, r3, #1
 801b7b4:	db8a      	blt.n	801b6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801b7b6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801b7b8:	429e      	cmp	r6, r3
 801b7ba:	dd87      	ble.n	801b6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801b7bc:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801b7c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b7c4:	e9cd 4600 	strd	r4, r6, [sp]
 801b7c8:	462b      	mov	r3, r5
 801b7ca:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 801b7ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b7d0:	f7ff fc6c 	bl	801b0ac <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801b7d4:	e77a      	b.n	801b6cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801b7d6:	bf00      	nop
 801b7d8:	fffff800 	.word	0xfffff800
 801b7dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b7de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801b7e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b7e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b7e6:	1409      	asrs	r1, r1, #16
 801b7e8:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801b7ec:	141b      	asrs	r3, r3, #16
 801b7ee:	fb04 1303 	mla	r3, r4, r3, r1
 801b7f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b7f4:	18ce      	adds	r6, r1, r3
 801b7f6:	5ccb      	ldrb	r3, [r1, r3]
 801b7f8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801b7fc:	0e1f      	lsrs	r7, r3, #24
 801b7fe:	2a00      	cmp	r2, #0
 801b800:	f000 811f 	beq.w	801ba42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 801b804:	7871      	ldrb	r1, [r6, #1]
 801b806:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801b80a:	910d      	str	r1, [sp, #52]	; 0x34
 801b80c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801b810:	2800      	cmp	r0, #0
 801b812:	f000 8120 	beq.w	801ba56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801b816:	1931      	adds	r1, r6, r4
 801b818:	5d36      	ldrb	r6, [r6, r4]
 801b81a:	7849      	ldrb	r1, [r1, #1]
 801b81c:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 801b820:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801b824:	9609      	str	r6, [sp, #36]	; 0x24
 801b826:	ea4f 6916 	mov.w	r9, r6, lsr #24
 801b82a:	910e      	str	r1, [sp, #56]	; 0x38
 801b82c:	0e0e      	lsrs	r6, r1, #24
 801b82e:	b292      	uxth	r2, r2
 801b830:	b280      	uxth	r0, r0
 801b832:	fb02 fa00 	mul.w	sl, r2, r0
 801b836:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801b83a:	0112      	lsls	r2, r2, #4
 801b83c:	eba2 080a 	sub.w	r8, r2, sl
 801b840:	b280      	uxth	r0, r0
 801b842:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801b846:	fa1f f888 	uxth.w	r8, r8
 801b84a:	1a09      	subs	r1, r1, r0
 801b84c:	b289      	uxth	r1, r1
 801b84e:	fb08 f20e 	mul.w	r2, r8, lr
 801b852:	fb01 2207 	mla	r2, r1, r7, r2
 801b856:	fb00 2209 	mla	r2, r0, r9, r2
 801b85a:	fb0a 2206 	mla	r2, sl, r6, r2
 801b85e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801b862:	9213      	str	r2, [sp, #76]	; 0x4c
 801b864:	2a00      	cmp	r2, #0
 801b866:	f000 80de 	beq.w	801ba26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 801b86a:	2fff      	cmp	r7, #255	; 0xff
 801b86c:	d01a      	beq.n	801b8a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 801b86e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b872:	fb07 fc0c 	mul.w	ip, r7, ip
 801b876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b87a:	435f      	muls	r7, r3
 801b87c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801b880:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b884:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b888:	4463      	add	r3, ip
 801b88a:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801b88e:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801b892:	0a1b      	lsrs	r3, r3, #8
 801b894:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b898:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b89c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b8a0:	ea43 030c 	orr.w	r3, r3, ip
 801b8a4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b8a8:	d01f      	beq.n	801b8ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 801b8aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801b8ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b8ae:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b8b2:	fb0e f707 	mul.w	r7, lr, r7
 801b8b6:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b8ba:	fb0e fe0c 	mul.w	lr, lr, ip
 801b8be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b8c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b8c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b8ca:	44bc      	add	ip, r7
 801b8cc:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801b8d0:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801b8d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b8d8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b8e0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b8e4:	ea4c 020e 	orr.w	r2, ip, lr
 801b8e8:	920d      	str	r2, [sp, #52]	; 0x34
 801b8ea:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b8ee:	d01e      	beq.n	801b92e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 801b8f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8f2:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b8f6:	fb09 fe0e 	mul.w	lr, r9, lr
 801b8fa:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801b8fe:	fb09 f907 	mul.w	r9, r9, r7
 801b902:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b906:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b90a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b90e:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801b912:	44f4      	add	ip, lr
 801b914:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801b918:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b91c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b920:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b924:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b928:	ea4c 0209 	orr.w	r2, ip, r9
 801b92c:	9209      	str	r2, [sp, #36]	; 0x24
 801b92e:	2eff      	cmp	r6, #255	; 0xff
 801b930:	d01c      	beq.n	801b96c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 801b932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b934:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b938:	fb06 fe0e 	mul.w	lr, r6, lr
 801b93c:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801b940:	437e      	muls	r6, r7
 801b942:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b946:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b94a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b94e:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801b952:	44f4      	add	ip, lr
 801b954:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801b958:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b95c:	0a36      	lsrs	r6, r6, #8
 801b95e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b962:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b966:	ea4c 0206 	orr.w	r2, ip, r6
 801b96a:	920e      	str	r2, [sp, #56]	; 0x38
 801b96c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b96e:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801b972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b974:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801b978:	fb08 f606 	mul.w	r6, r8, r6
 801b97c:	fb01 6607 	mla	r6, r1, r7, r6
 801b980:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801b984:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b986:	fb00 6607 	mla	r6, r0, r7, r6
 801b98a:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801b98e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b990:	fb0a 6607 	mla	r6, sl, r7, r6
 801b994:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801b998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b99a:	fb08 f807 	mul.w	r8, r8, r7
 801b99e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b9a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b9a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b9a8:	fb01 8303 	mla	r3, r1, r3, r8
 801b9ac:	fb00 330c 	mla	r3, r0, ip, r3
 801b9b0:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801b9b4:	fb0a 3e0e 	mla	lr, sl, lr, r3
 801b9b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b9ba:	f8bb 3000 	ldrh.w	r3, [fp]
 801b9be:	43d2      	mvns	r2, r2
 801b9c0:	1218      	asrs	r0, r3, #8
 801b9c2:	b2d2      	uxtb	r2, r2
 801b9c4:	0a36      	lsrs	r6, r6, #8
 801b9c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b9ca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b9ce:	4350      	muls	r0, r2
 801b9d0:	10d9      	asrs	r1, r3, #3
 801b9d2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b9d6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b9da:	00db      	lsls	r3, r3, #3
 801b9dc:	ea46 060e 	orr.w	r6, r6, lr
 801b9e0:	1c47      	adds	r7, r0, #1
 801b9e2:	b2db      	uxtb	r3, r3
 801b9e4:	4353      	muls	r3, r2
 801b9e6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b9ea:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b9ee:	0c37      	lsrs	r7, r6, #16
 801b9f0:	4351      	muls	r1, r2
 801b9f2:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b9f6:	4a1d      	ldr	r2, [pc, #116]	; (801ba6c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 801b9f8:	1c5f      	adds	r7, r3, #1
 801b9fa:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801b9fe:	b2f7      	uxtb	r7, r6
 801ba00:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801ba04:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801ba08:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801ba0c:	1c4b      	adds	r3, r1, #1
 801ba0e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801ba12:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ba16:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801ba1a:	00f6      	lsls	r6, r6, #3
 801ba1c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ba20:	4330      	orrs	r0, r6
 801ba22:	f8ab 0000 	strh.w	r0, [fp]
 801ba26:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ba28:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ba2a:	4413      	add	r3, r2
 801ba2c:	9329      	str	r3, [sp, #164]	; 0xa4
 801ba2e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801ba30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba32:	4413      	add	r3, r2
 801ba34:	932a      	str	r3, [sp, #168]	; 0xa8
 801ba36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ba38:	3b01      	subs	r3, #1
 801ba3a:	f10b 0b02 	add.w	fp, fp, #2
 801ba3e:	9310      	str	r3, [sp, #64]	; 0x40
 801ba40:	e4ee      	b.n	801b420 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 801ba42:	b158      	cbz	r0, 801ba5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 801ba44:	5d31      	ldrb	r1, [r6, r4]
 801ba46:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 801ba4a:	9109      	str	r1, [sp, #36]	; 0x24
 801ba4c:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801ba50:	26ff      	movs	r6, #255	; 0xff
 801ba52:	46b6      	mov	lr, r6
 801ba54:	e6eb      	b.n	801b82e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 801ba56:	26ff      	movs	r6, #255	; 0xff
 801ba58:	46b1      	mov	r9, r6
 801ba5a:	e6e8      	b.n	801b82e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 801ba5c:	26ff      	movs	r6, #255	; 0xff
 801ba5e:	46b1      	mov	r9, r6
 801ba60:	e7f7      	b.n	801ba52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 801ba62:	b017      	add	sp, #92	; 0x5c
 801ba64:	ecbd 8b08 	vpop	{d8-d11}
 801ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba6c:	fffff800 	.word	0xfffff800

0801ba70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801ba70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba74:	b087      	sub	sp, #28
 801ba76:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 801ba7a:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 801ba7e:	9105      	str	r1, [sp, #20]
 801ba80:	fb00 e604 	mla	r6, r0, r4, lr
 801ba84:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 801ba88:	9102      	str	r1, [sp, #8]
 801ba8a:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 801ba8e:	9103      	str	r1, [sp, #12]
 801ba90:	9905      	ldr	r1, [sp, #20]
 801ba92:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 801ba96:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801ba9a:	8809      	ldrh	r1, [r1, #0]
 801ba9c:	2800      	cmp	r0, #0
 801ba9e:	eb03 0a06 	add.w	sl, r3, r6
 801baa2:	f2c0 80ca 	blt.w	801bc3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 801baa6:	4287      	cmp	r7, r0
 801baa8:	f340 80c7 	ble.w	801bc3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 801baac:	f1be 0f00 	cmp.w	lr, #0
 801bab0:	f2c0 80bf 	blt.w	801bc32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 801bab4:	4574      	cmp	r4, lr
 801bab6:	f340 80bc 	ble.w	801bc32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 801baba:	f813 c006 	ldrb.w	ip, [r3, r6]
 801babe:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 801bac2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bac6:	d01c      	beq.n	801bb02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 801bac8:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 801bacc:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801bad0:	4372      	muls	r2, r6
 801bad2:	f64f 081f 	movw	r8, #63519	; 0xf81f
 801bad6:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 801bada:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bade:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801bae2:	fb0c f609 	mul.w	r6, ip, r9
 801bae6:	eb03 0902 	add.w	r9, r3, r2
 801baea:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801baee:	f106 0820 	add.w	r8, r6, #32
 801baf2:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801baf6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bafa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801bafe:	ea49 0908 	orr.w	r9, r9, r8
 801bb02:	fa1f f989 	uxth.w	r9, r9
 801bb06:	f11e 0301 	adds.w	r3, lr, #1
 801bb0a:	f100 809b 	bmi.w	801bc44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 801bb0e:	429c      	cmp	r4, r3
 801bb10:	f340 8098 	ble.w	801bc44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 801bb14:	2d00      	cmp	r5, #0
 801bb16:	f000 8095 	beq.w	801bc44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 801bb1a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801bb1e:	9b03      	ldr	r3, [sp, #12]
 801bb20:	2eff      	cmp	r6, #255	; 0xff
 801bb22:	885b      	ldrh	r3, [r3, #2]
 801bb24:	d01b      	beq.n	801bb5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 801bb26:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801bb2a:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801bb2e:	fb08 f202 	mul.w	r2, r8, r2
 801bb32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bb36:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801bb3a:	fb06 f803 	mul.w	r8, r6, r3
 801bb3e:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801bb42:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801bb46:	441a      	add	r2, r3
 801bb48:	f108 0320 	add.w	r3, r8, #32
 801bb4c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801bb50:	0a1b      	lsrs	r3, r3, #8
 801bb52:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801bb56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bb5a:	ea4b 0303 	orr.w	r3, fp, r3
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	9301      	str	r3, [sp, #4]
 801bb62:	3001      	adds	r0, #1
 801bb64:	d474      	bmi.n	801bc50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801bb66:	4287      	cmp	r7, r0
 801bb68:	dd72      	ble.n	801bc50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 801bb6a:	9a02      	ldr	r2, [sp, #8]
 801bb6c:	2a00      	cmp	r2, #0
 801bb6e:	f000 8121 	beq.w	801bdb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 801bb72:	f1be 0f00 	cmp.w	lr, #0
 801bb76:	db68      	blt.n	801bc4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 801bb78:	4574      	cmp	r4, lr
 801bb7a:	dd66      	ble.n	801bc4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 801bb7c:	f81a 7004 	ldrb.w	r7, [sl, r4]
 801bb80:	9a03      	ldr	r2, [sp, #12]
 801bb82:	2fff      	cmp	r7, #255	; 0xff
 801bb84:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801bb88:	d01c      	beq.n	801bbc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 801bb8a:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 801bb8e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801bb92:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bb96:	fb07 fb00 	mul.w	fp, r7, r0
 801bb9a:	fb08 f802 	mul.w	r8, r8, r2
 801bb9e:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801bba2:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 801bba6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801bbaa:	4490      	add	r8, r2
 801bbac:	f10b 0220 	add.w	r2, fp, #32
 801bbb0:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801bbb4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bbb8:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 801bbbc:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801bbc0:	ea40 000b 	orr.w	r0, r0, fp
 801bbc4:	b280      	uxth	r0, r0
 801bbc6:	f11e 0e01 	adds.w	lr, lr, #1
 801bbca:	d446      	bmi.n	801bc5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 801bbcc:	4574      	cmp	r4, lr
 801bbce:	dd44      	ble.n	801bc5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 801bbd0:	2d00      	cmp	r5, #0
 801bbd2:	d045      	beq.n	801bc60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 801bbd4:	1c62      	adds	r2, r4, #1
 801bbd6:	9b03      	ldr	r3, [sp, #12]
 801bbd8:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801bbdc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801bbe0:	2cff      	cmp	r4, #255	; 0xff
 801bbe2:	d01c      	beq.n	801bc1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 801bbe4:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 801bbe8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801bbec:	fb08 fe0e 	mul.w	lr, r8, lr
 801bbf0:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801bbf4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bbf8:	fb04 f802 	mul.w	r8, r4, r2
 801bbfc:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801bc00:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801bc04:	4472      	add	r2, lr
 801bc06:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801bc0a:	f108 0a20 	add.w	sl, r8, #32
 801bc0e:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801bc12:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc16:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801bc1a:	ea42 020a 	orr.w	r2, r2, sl
 801bc1e:	b292      	uxth	r2, r2
 801bc20:	2d0f      	cmp	r5, #15
 801bc22:	d91f      	bls.n	801bc64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 801bc24:	4b67      	ldr	r3, [pc, #412]	; (801bdc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 801bc26:	4a68      	ldr	r2, [pc, #416]	; (801bdc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 801bc28:	4868      	ldr	r0, [pc, #416]	; (801bdcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 801bc2a:	f240 3173 	movw	r1, #883	; 0x373
 801bc2e:	f004 f9cb 	bl	801ffc8 <__assert_func>
 801bc32:	4689      	mov	r9, r1
 801bc34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801bc38:	e765      	b.n	801bb06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 801bc3a:	26ff      	movs	r6, #255	; 0xff
 801bc3c:	9101      	str	r1, [sp, #4]
 801bc3e:	4689      	mov	r9, r1
 801bc40:	46b4      	mov	ip, r6
 801bc42:	e78e      	b.n	801bb62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 801bc44:	9101      	str	r1, [sp, #4]
 801bc46:	26ff      	movs	r6, #255	; 0xff
 801bc48:	e78b      	b.n	801bb62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 801bc4a:	4608      	mov	r0, r1
 801bc4c:	27ff      	movs	r7, #255	; 0xff
 801bc4e:	e7ba      	b.n	801bbc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 801bc50:	24ff      	movs	r4, #255	; 0xff
 801bc52:	460a      	mov	r2, r1
 801bc54:	4608      	mov	r0, r1
 801bc56:	4627      	mov	r7, r4
 801bc58:	e7e2      	b.n	801bc20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801bc5a:	460a      	mov	r2, r1
 801bc5c:	24ff      	movs	r4, #255	; 0xff
 801bc5e:	e7df      	b.n	801bc20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801bc60:	460a      	mov	r2, r1
 801bc62:	24ff      	movs	r4, #255	; 0xff
 801bc64:	9b02      	ldr	r3, [sp, #8]
 801bc66:	2b0f      	cmp	r3, #15
 801bc68:	d8dc      	bhi.n	801bc24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 801bc6a:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801bc6e:	fa1f f885 	uxth.w	r8, r5
 801bc72:	fb08 fa0e 	mul.w	sl, r8, lr
 801bc76:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801bc7a:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801bc7e:	9303      	str	r3, [sp, #12]
 801bc80:	fa1f f38e 	uxth.w	r3, lr
 801bc84:	9304      	str	r3, [sp, #16]
 801bc86:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801bc8a:	9b02      	ldr	r3, [sp, #8]
 801bc8c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801bc90:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801bc94:	fb15 fe03 	smulbb	lr, r5, r3
 801bc98:	ea48 0809 	orr.w	r8, r8, r9
 801bc9c:	f1c3 0910 	rsb	r9, r3, #16
 801bca0:	9b01      	ldr	r3, [sp, #4]
 801bca2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801bca6:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801bcaa:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801bcae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801bcb2:	eba9 0905 	sub.w	r9, r9, r5
 801bcb6:	ea4b 0303 	orr.w	r3, fp, r3
 801bcba:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801bcbe:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801bcc2:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801bcc6:	436b      	muls	r3, r5
 801bcc8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801bccc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801bcd0:	ea4b 0202 	orr.w	r2, fp, r2
 801bcd4:	fb09 3308 	mla	r3, r9, r8, r3
 801bcd8:	fb0e 3302 	mla	r3, lr, r2, r3
 801bcdc:	0402      	lsls	r2, r0, #16
 801bcde:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801bce2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801bce6:	4310      	orrs	r0, r2
 801bce8:	9a02      	ldr	r2, [sp, #8]
 801bcea:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801bcee:	fb0e 3e00 	mla	lr, lr, r0, r3
 801bcf2:	9803      	ldr	r0, [sp, #12]
 801bcf4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 801bcf8:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801bcfc:	9804      	ldr	r0, [sp, #16]
 801bcfe:	1a2d      	subs	r5, r5, r0
 801bd00:	9803      	ldr	r0, [sp, #12]
 801bd02:	eba0 000a 	sub.w	r0, r0, sl
 801bd06:	b280      	uxth	r0, r0
 801bd08:	b2ad      	uxth	r5, r5
 801bd0a:	4346      	muls	r6, r0
 801bd0c:	9804      	ldr	r0, [sp, #16]
 801bd0e:	fb0c 6605 	mla	r6, ip, r5, r6
 801bd12:	fb00 6707 	mla	r7, r0, r7, r6
 801bd16:	fb0a 7404 	mla	r4, sl, r4, r7
 801bd1a:	b292      	uxth	r2, r2
 801bd1c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801bd20:	4354      	muls	r4, r2
 801bd22:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801bd26:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801bd2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bd2e:	f104 0a01 	add.w	sl, r4, #1
 801bd32:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801bd36:	ea43 0e0e 	orr.w	lr, r3, lr
 801bd3a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801bd3e:	fa1f f38e 	uxth.w	r3, lr
 801bd42:	1208      	asrs	r0, r1, #8
 801bd44:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 801bd48:	b2e4      	uxtb	r4, r4
 801bd4a:	121d      	asrs	r5, r3, #8
 801bd4c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bd50:	fb10 f004 	smulbb	r0, r0, r4
 801bd54:	10ce      	asrs	r6, r1, #3
 801bd56:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801bd5a:	00c9      	lsls	r1, r1, #3
 801bd5c:	fb05 0502 	mla	r5, r5, r2, r0
 801bd60:	b2c9      	uxtb	r1, r1
 801bd62:	10d8      	asrs	r0, r3, #3
 801bd64:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801bd68:	00db      	lsls	r3, r3, #3
 801bd6a:	fb16 f604 	smulbb	r6, r6, r4
 801bd6e:	b2db      	uxtb	r3, r3
 801bd70:	fb11 f404 	smulbb	r4, r1, r4
 801bd74:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801bd78:	fb00 6002 	mla	r0, r0, r2, r6
 801bd7c:	fb03 4202 	mla	r2, r3, r2, r4
 801bd80:	b2ad      	uxth	r5, r5
 801bd82:	b292      	uxth	r2, r2
 801bd84:	1c6b      	adds	r3, r5, #1
 801bd86:	1c51      	adds	r1, r2, #1
 801bd88:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801bd8c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bd90:	b280      	uxth	r0, r0
 801bd92:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801bd96:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801bd9a:	4313      	orrs	r3, r2
 801bd9c:	1c42      	adds	r2, r0, #1
 801bd9e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801bda2:	0940      	lsrs	r0, r0, #5
 801bda4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801bda8:	9a05      	ldr	r2, [sp, #20]
 801bdaa:	4303      	orrs	r3, r0
 801bdac:	8013      	strh	r3, [r2, #0]
 801bdae:	b007      	add	sp, #28
 801bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb4:	2d0f      	cmp	r5, #15
 801bdb6:	f63f af35 	bhi.w	801bc24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 801bdba:	24ff      	movs	r4, #255	; 0xff
 801bdbc:	460a      	mov	r2, r1
 801bdbe:	4608      	mov	r0, r1
 801bdc0:	4627      	mov	r7, r4
 801bdc2:	e752      	b.n	801bc6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 801bdc4:	08023e5d 	.word	0x08023e5d
 801bdc8:	080243b9 	.word	0x080243b9
 801bdcc:	08023ee5 	.word	0x08023ee5

0801bdd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd4:	ed2d 8b08 	vpush	{d8-d11}
 801bdd8:	b099      	sub	sp, #100	; 0x64
 801bdda:	eeb0 aa40 	vmov.f32	s20, s0
 801bdde:	9308      	str	r3, [sp, #32]
 801bde0:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801bde4:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 801bde6:	930b      	str	r3, [sp, #44]	; 0x2c
 801bde8:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801bdec:	9314      	str	r3, [sp, #80]	; 0x50
 801bdee:	9113      	str	r1, [sp, #76]	; 0x4c
 801bdf0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801bdf4:	9017      	str	r0, [sp, #92]	; 0x5c
 801bdf6:	6870      	ldr	r0, [r6, #4]
 801bdf8:	9216      	str	r2, [sp, #88]	; 0x58
 801bdfa:	fb00 1303 	mla	r3, r0, r3, r1
 801bdfe:	6831      	ldr	r1, [r6, #0]
 801be00:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 801be02:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 801be06:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801be0a:	9309      	str	r3, [sp, #36]	; 0x24
 801be0c:	6813      	ldr	r3, [r2, #0]
 801be0e:	930c      	str	r3, [sp, #48]	; 0x30
 801be10:	6853      	ldr	r3, [r2, #4]
 801be12:	930d      	str	r3, [sp, #52]	; 0x34
 801be14:	006b      	lsls	r3, r5, #1
 801be16:	9312      	str	r3, [sp, #72]	; 0x48
 801be18:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801be1c:	930a      	str	r3, [sp, #40]	; 0x28
 801be1e:	eef0 9a60 	vmov.f32	s19, s1
 801be22:	eeb0 9a41 	vmov.f32	s18, s2
 801be26:	eeb0 8a62 	vmov.f32	s16, s5
 801be2a:	eef0 8a43 	vmov.f32	s17, s6
 801be2e:	eef0 ba44 	vmov.f32	s23, s8
 801be32:	eeb0 ba64 	vmov.f32	s22, s9
 801be36:	eef0 aa45 	vmov.f32	s21, s10
 801be3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	dc03      	bgt.n	801be48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801be40:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801be42:	2b00      	cmp	r3, #0
 801be44:	f340 83bf 	ble.w	801c5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 801be48:	9b08      	ldr	r3, [sp, #32]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	f340 81cb 	ble.w	801c1e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 801be50:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801be52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801be54:	1412      	asrs	r2, r2, #16
 801be56:	ea4f 4323 	mov.w	r3, r3, asr #16
 801be5a:	d42f      	bmi.n	801bebc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 801be5c:	1c51      	adds	r1, r2, #1
 801be5e:	428d      	cmp	r5, r1
 801be60:	dd2f      	ble.n	801bec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801be62:	2b00      	cmp	r3, #0
 801be64:	db2d      	blt.n	801bec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801be66:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801be68:	1c59      	adds	r1, r3, #1
 801be6a:	4288      	cmp	r0, r1
 801be6c:	dd29      	ble.n	801bec2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801be6e:	9b08      	ldr	r3, [sp, #32]
 801be70:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801be72:	992b      	ldr	r1, [sp, #172]	; 0xac
 801be74:	3b01      	subs	r3, #1
 801be76:	fb02 1203 	mla	r2, r2, r3, r1
 801be7a:	1412      	asrs	r2, r2, #16
 801be7c:	d42b      	bmi.n	801bed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801be7e:	3201      	adds	r2, #1
 801be80:	4295      	cmp	r5, r2
 801be82:	dd28      	ble.n	801bed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801be84:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801be86:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801be88:	fb02 1303 	mla	r3, r2, r3, r1
 801be8c:	141b      	asrs	r3, r3, #16
 801be8e:	d422      	bmi.n	801bed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801be90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801be92:	3301      	adds	r3, #1
 801be94:	429a      	cmp	r2, r3
 801be96:	dd1e      	ble.n	801bed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801be98:	9b08      	ldr	r3, [sp, #32]
 801be9a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801be9e:	9315      	str	r3, [sp, #84]	; 0x54
 801bea0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801bea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	f300 8217 	bgt.w	801c2da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 801beac:	9b08      	ldr	r3, [sp, #32]
 801beae:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801beb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801beb4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801beb8:	9309      	str	r3, [sp, #36]	; 0x24
 801beba:	e196      	b.n	801c1ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801bebc:	1c57      	adds	r7, r2, #1
 801bebe:	f040 8183 	bne.w	801c1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801bec2:	42aa      	cmp	r2, r5
 801bec4:	f280 8180 	bge.w	801c1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801bec8:	1c5e      	adds	r6, r3, #1
 801beca:	f2c0 817d 	blt.w	801c1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801bece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bed0:	4293      	cmp	r3, r2
 801bed2:	f280 8179 	bge.w	801c1c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801bed6:	9b08      	ldr	r3, [sp, #32]
 801bed8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801beda:	9315      	str	r3, [sp, #84]	; 0x54
 801bedc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801bee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	dde2      	ble.n	801beac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801bee6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bee8:	1419      	asrs	r1, r3, #16
 801beea:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801beec:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bef0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801bef2:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801bef6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bef8:	141b      	asrs	r3, r3, #16
 801befa:	f100 81d3 	bmi.w	801c2a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 801befe:	1c58      	adds	r0, r3, #1
 801bf00:	4285      	cmp	r5, r0
 801bf02:	f340 81d1 	ble.w	801c2a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801bf06:	2900      	cmp	r1, #0
 801bf08:	f2c0 81ce 	blt.w	801c2a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801bf0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bf0e:	1c48      	adds	r0, r1, #1
 801bf10:	4284      	cmp	r4, r0
 801bf12:	f340 81c9 	ble.w	801c2a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 801bf16:	fb01 3105 	mla	r1, r1, r5, r3
 801bf1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf1c:	fa1f fe82 	uxth.w	lr, r2
 801bf20:	eb03 0a01 	add.w	sl, r3, r1
 801bf24:	ea4f 100e 	mov.w	r0, lr, lsl #4
 801bf28:	f813 9001 	ldrb.w	r9, [r3, r1]
 801bf2c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801bf30:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bf34:	b29b      	uxth	r3, r3
 801bf36:	f1bc 0f00 	cmp.w	ip, #0
 801bf3a:	f000 8195 	beq.w	801c268 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 801bf3e:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801bf42:	940e      	str	r4, [sp, #56]	; 0x38
 801bf44:	eb0a 0b05 	add.w	fp, sl, r5
 801bf48:	fa1f fa8c 	uxth.w	sl, ip
 801bf4c:	fb0a fe0e 	mul.w	lr, sl, lr
 801bf50:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801bf54:	fa1f fa8a 	uxth.w	sl, sl
 801bf58:	eba0 000e 	sub.w	r0, r0, lr
 801bf5c:	eba3 030a 	sub.w	r3, r3, sl
 801bf60:	b280      	uxth	r0, r0
 801bf62:	fb08 f000 	mul.w	r0, r8, r0
 801bf66:	b29b      	uxth	r3, r3
 801bf68:	fb09 0303 	mla	r3, r9, r3, r0
 801bf6c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bf6e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801bf72:	940f      	str	r4, [sp, #60]	; 0x3c
 801bf74:	fb0a 3300 	mla	r3, sl, r0, r3
 801bf78:	fb0e 3304 	mla	r3, lr, r4, r3
 801bf7c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	f000 8114 	beq.w	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801bf86:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bf88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bf8a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bf8e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801bf92:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801bf96:	f000 816c 	beq.w	801c272 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 801bf9a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801bf9e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801bfa2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bfa6:	fb09 f101 	mul.w	r1, r9, r1
 801bfaa:	fb0a fe0e 	mul.w	lr, sl, lr
 801bfae:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801bfb2:	f101 0b20 	add.w	fp, r1, #32
 801bfb6:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801bfba:	44ce      	add	lr, r9
 801bfbc:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801bfc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bfc4:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801bfc8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bfcc:	ea4e 0909 	orr.w	r9, lr, r9
 801bfd0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bfd4:	8841      	ldrh	r1, [r0, #2]
 801bfd6:	d019      	beq.n	801c00c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801bfd8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801bfdc:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801bfe0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801bfe4:	fb0a fe0e 	mul.w	lr, sl, lr
 801bfe8:	fb08 f801 	mul.w	r8, r8, r1
 801bfec:	f108 0b20 	add.w	fp, r8, #32
 801bff0:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 801bff4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801bff8:	448e      	add	lr, r1
 801bffa:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 801bffe:	0a09      	lsrs	r1, r1, #8
 801c000:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 801c004:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c008:	ea4a 0101 	orr.w	r1, sl, r1
 801c00c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801c010:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c014:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c018:	ea4e 0909 	orr.w	r9, lr, r9
 801c01c:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801c020:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c024:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c028:	ea4e 0e01 	orr.w	lr, lr, r1
 801c02c:	f1bc 0f00 	cmp.w	ip, #0
 801c030:	f000 8121 	beq.w	801c276 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 801c034:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c036:	eb00 0801 	add.w	r8, r0, r1
 801c03a:	5a41      	ldrh	r1, [r0, r1]
 801c03c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801c03e:	28ff      	cmp	r0, #255	; 0xff
 801c040:	d019      	beq.n	801c076 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 801c042:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c044:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801c048:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c04c:	fb04 fb01 	mul.w	fp, r4, r1
 801c050:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801c054:	fb0a fa00 	mul.w	sl, sl, r0
 801c058:	f10b 0020 	add.w	r0, fp, #32
 801c05c:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801c060:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801c064:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801c068:	4451      	add	r1, sl
 801c06a:	0a00      	lsrs	r0, r0, #8
 801c06c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801c070:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c074:	4301      	orrs	r1, r0
 801c076:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c078:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801c07c:	2cff      	cmp	r4, #255	; 0xff
 801c07e:	d01a      	beq.n	801c0b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 801c080:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 801c084:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c088:	fb04 fb00 	mul.w	fp, r4, r0
 801c08c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801c090:	fb0a fa08 	mul.w	sl, sl, r8
 801c094:	f10b 0820 	add.w	r8, fp, #32
 801c098:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 801c09c:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801c0a0:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801c0a4:	4450      	add	r0, sl
 801c0a6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c0aa:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801c0ae:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c0b2:	ea40 0008 	orr.w	r0, r0, r8
 801c0b6:	fb1c f802 	smulbb	r8, ip, r2
 801c0ba:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801c0be:	f1cc 0a10 	rsb	sl, ip, #16
 801c0c2:	ebaa 0a02 	sub.w	sl, sl, r2
 801c0c6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801c0ca:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801c0ce:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801c0d2:	fb0e f202 	mul.w	r2, lr, r2
 801c0d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c0da:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801c0de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c0e2:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801c0e6:	fb09 220a 	mla	r2, r9, sl, r2
 801c0ea:	ea4b 0101 	orr.w	r1, fp, r1
 801c0ee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801c0f2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c0f6:	fb0c 2201 	mla	r2, ip, r1, r2
 801c0fa:	ea4e 0000 	orr.w	r0, lr, r0
 801c0fe:	fb08 2800 	mla	r8, r8, r0, r2
 801c102:	ea4f 5258 	mov.w	r2, r8, lsr #21
 801c106:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801c10a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c10e:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c112:	ea42 0808 	orr.w	r8, r2, r8
 801c116:	fa1f f288 	uxth.w	r2, r8
 801c11a:	2bff      	cmp	r3, #255	; 0xff
 801c11c:	d103      	bne.n	801c126 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 801c11e:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c120:	29ff      	cmp	r1, #255	; 0xff
 801c122:	f000 80bd 	beq.w	801c2a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 801c126:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c128:	f8b7 c000 	ldrh.w	ip, [r7]
 801c12c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c12e:	434b      	muls	r3, r1
 801c130:	f103 0e01 	add.w	lr, r3, #1
 801c134:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 801c138:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 801c13c:	ea4f 202c 	mov.w	r0, ip, asr #8
 801c140:	fa5f fe8e 	uxtb.w	lr, lr
 801c144:	1213      	asrs	r3, r2, #8
 801c146:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c14a:	fb10 f00e 	smulbb	r0, r0, lr
 801c14e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801c152:	fb03 0301 	mla	r3, r3, r1, r0
 801c156:	b298      	uxth	r0, r3
 801c158:	ea4f 03ec 	mov.w	r3, ip, asr #3
 801c15c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801c160:	10d1      	asrs	r1, r2, #3
 801c162:	fa5f fc8c 	uxtb.w	ip, ip
 801c166:	00d2      	lsls	r2, r2, #3
 801c168:	fb1c fc0e 	smulbb	ip, ip, lr
 801c16c:	b2d2      	uxtb	r2, r2
 801c16e:	fb02 c204 	mla	r2, r2, r4, ip
 801c172:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801c176:	fb13 f30e 	smulbb	r3, r3, lr
 801c17a:	b292      	uxth	r2, r2
 801c17c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c180:	fb01 3104 	mla	r1, r1, r4, r3
 801c184:	f102 0c01 	add.w	ip, r2, #1
 801c188:	1c43      	adds	r3, r0, #1
 801c18a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c18e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c192:	b289      	uxth	r1, r1
 801c194:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c198:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801c19c:	4313      	orrs	r3, r2
 801c19e:	1c4a      	adds	r2, r1, #1
 801c1a0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c1a4:	0949      	lsrs	r1, r1, #5
 801c1a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c1aa:	430b      	orrs	r3, r1
 801c1ac:	803b      	strh	r3, [r7, #0]
 801c1ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c1b0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c1b2:	4413      	add	r3, r2
 801c1b4:	932b      	str	r3, [sp, #172]	; 0xac
 801c1b6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801c1b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c1ba:	441a      	add	r2, r3
 801c1bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c1be:	922c      	str	r2, [sp, #176]	; 0xb0
 801c1c0:	3b01      	subs	r3, #1
 801c1c2:	3702      	adds	r7, #2
 801c1c4:	9315      	str	r3, [sp, #84]	; 0x54
 801c1c6:	e68b      	b.n	801bee0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801c1c8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c1ca:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c1cc:	4413      	add	r3, r2
 801c1ce:	932b      	str	r3, [sp, #172]	; 0xac
 801c1d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801c1d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c1d4:	441a      	add	r2, r3
 801c1d6:	9b08      	ldr	r3, [sp, #32]
 801c1d8:	922c      	str	r2, [sp, #176]	; 0xb0
 801c1da:	3b01      	subs	r3, #1
 801c1dc:	9308      	str	r3, [sp, #32]
 801c1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1e0:	3302      	adds	r3, #2
 801c1e2:	9309      	str	r3, [sp, #36]	; 0x24
 801c1e4:	e630      	b.n	801be48 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801c1e6:	f47f ae42 	bne.w	801be6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 801c1ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	f340 81ea 	ble.w	801c5c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 801c1f2:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c1f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c1fa:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c1fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c200:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c204:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c208:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c20c:	eef0 6a48 	vmov.f32	s13, s16
 801c210:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c214:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c218:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c21c:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801c220:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c224:	eef0 6a68 	vmov.f32	s13, s17
 801c228:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c22c:	ee18 2a10 	vmov	r2, s16
 801c230:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c234:	fb92 f3f3 	sdiv	r3, r2, r3
 801c238:	ee18 2a90 	vmov	r2, s17
 801c23c:	932d      	str	r3, [sp, #180]	; 0xb4
 801c23e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c240:	fb92 f3f3 	sdiv	r3, r2, r3
 801c244:	932e      	str	r3, [sp, #184]	; 0xb8
 801c246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c248:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c24a:	3b01      	subs	r3, #1
 801c24c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c250:	9313      	str	r3, [sp, #76]	; 0x4c
 801c252:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c254:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 801c258:	bf08      	it	eq
 801c25a:	4613      	moveq	r3, r2
 801c25c:	9308      	str	r3, [sp, #32]
 801c25e:	eef0 8a67 	vmov.f32	s17, s15
 801c262:	eeb0 8a47 	vmov.f32	s16, s14
 801c266:	e5e8      	b.n	801be3a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801c268:	fb08 f000 	mul.w	r0, r8, r0
 801c26c:	fb09 0303 	mla	r3, r9, r3, r0
 801c270:	e684      	b.n	801bf7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 801c272:	4689      	mov	r9, r1
 801c274:	e6ac      	b.n	801bfd0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 801c276:	f1c2 0010 	rsb	r0, r2, #16
 801c27a:	fb0e f202 	mul.w	r2, lr, r2
 801c27e:	fb09 2900 	mla	r9, r9, r0, r2
 801c282:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c286:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801c28a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801c28e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c292:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c296:	ea42 0909 	orr.w	r9, r2, r9
 801c29a:	fa1f f289 	uxth.w	r2, r9
 801c29e:	e73c      	b.n	801c11a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801c2a0:	803a      	strh	r2, [r7, #0]
 801c2a2:	e784      	b.n	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801c2a4:	1c5c      	adds	r4, r3, #1
 801c2a6:	d182      	bne.n	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801c2a8:	429d      	cmp	r5, r3
 801c2aa:	dd80      	ble.n	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801c2ac:	1c48      	adds	r0, r1, #1
 801c2ae:	f6ff af7e 	blt.w	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801c2b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c2b4:	4288      	cmp	r0, r1
 801c2b6:	f77f af7a 	ble.w	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801c2ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 801c2bc:	9302      	str	r3, [sp, #8]
 801c2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c2c0:	e9cd 1203 	strd	r1, r2, [sp, #12]
 801c2c4:	e9cd c005 	strd	ip, r0, [sp, #20]
 801c2c8:	e9cd 5300 	strd	r5, r3, [sp]
 801c2cc:	4639      	mov	r1, r7
 801c2ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801c2d2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c2d4:	f7ff fbcc 	bl	801ba70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801c2d8:	e769      	b.n	801c1ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 801c2da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c2dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c2e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c2e2:	141f      	asrs	r7, r3, #16
 801c2e4:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801c2e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c2ea:	141b      	asrs	r3, r3, #16
 801c2ec:	fb05 3707 	mla	r7, r5, r7, r3
 801c2f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2f2:	fa1f fc82 	uxth.w	ip, r2
 801c2f6:	eb03 0a07 	add.w	sl, r3, r7
 801c2fa:	ea4f 110c 	mov.w	r1, ip, lsl #4
 801c2fe:	f813 9007 	ldrb.w	r9, [r3, r7]
 801c302:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801c306:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 801c30a:	b29b      	uxth	r3, r3
 801c30c:	2800      	cmp	r0, #0
 801c30e:	f000 813f 	beq.w	801c590 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 801c312:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801c316:	9410      	str	r4, [sp, #64]	; 0x40
 801c318:	eb0a 0b05 	add.w	fp, sl, r5
 801c31c:	fa1f fa80 	uxth.w	sl, r0
 801c320:	fb0a fc0c 	mul.w	ip, sl, ip
 801c324:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801c328:	fa1f fa8a 	uxth.w	sl, sl
 801c32c:	eba1 010c 	sub.w	r1, r1, ip
 801c330:	eba3 030a 	sub.w	r3, r3, sl
 801c334:	b289      	uxth	r1, r1
 801c336:	fb08 f101 	mul.w	r1, r8, r1
 801c33a:	b29b      	uxth	r3, r3
 801c33c:	fb09 1303 	mla	r3, r9, r3, r1
 801c340:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c342:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801c346:	9411      	str	r4, [sp, #68]	; 0x44
 801c348:	fb0a 3301 	mla	r3, sl, r1, r3
 801c34c:	fb0c 3304 	mla	r3, ip, r4, r3
 801c350:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c354:	2b00      	cmp	r3, #0
 801c356:	f000 810d 	beq.w	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 801c35a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c35c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c35e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c362:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801c366:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801c36a:	f000 8116 	beq.w	801c59a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 801c36e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801c372:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801c376:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c37a:	fb09 f707 	mul.w	r7, r9, r7
 801c37e:	fb0a fc0c 	mul.w	ip, sl, ip
 801c382:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801c386:	f107 0b20 	add.w	fp, r7, #32
 801c38a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801c38e:	44cc      	add	ip, r9
 801c390:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801c394:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c398:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801c39c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c3a0:	ea4c 0909 	orr.w	r9, ip, r9
 801c3a4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c3a8:	884f      	ldrh	r7, [r1, #2]
 801c3aa:	d019      	beq.n	801c3e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 801c3ac:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801c3b0:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801c3b4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c3b8:	fb08 f807 	mul.w	r8, r8, r7
 801c3bc:	fb0a fc0c 	mul.w	ip, sl, ip
 801c3c0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801c3c4:	f108 0b20 	add.w	fp, r8, #32
 801c3c8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801c3cc:	44bc      	add	ip, r7
 801c3ce:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801c3d2:	0a3f      	lsrs	r7, r7, #8
 801c3d4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801c3d8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801c3dc:	ea4c 0707 	orr.w	r7, ip, r7
 801c3e0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801c3e4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801c3e8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c3ec:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c3f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801c3f4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801c3f8:	ea4c 0909 	orr.w	r9, ip, r9
 801c3fc:	ea4a 0707 	orr.w	r7, sl, r7
 801c400:	2800      	cmp	r0, #0
 801c402:	f000 80cc 	beq.w	801c59e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 801c406:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c408:	eb01 0c04 	add.w	ip, r1, r4
 801c40c:	f831 8004 	ldrh.w	r8, [r1, r4]
 801c410:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c412:	29ff      	cmp	r1, #255	; 0xff
 801c414:	d01a      	beq.n	801c44c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 801c416:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c418:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801c41c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c420:	fb04 fb08 	mul.w	fp, r4, r8
 801c424:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801c428:	fb0a fa01 	mul.w	sl, sl, r1
 801c42c:	f10b 0120 	add.w	r1, fp, #32
 801c430:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801c434:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801c438:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801c43c:	44d0      	add	r8, sl
 801c43e:	0a09      	lsrs	r1, r1, #8
 801c440:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801c444:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c448:	ea48 0801 	orr.w	r8, r8, r1
 801c44c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c44e:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801c452:	2cff      	cmp	r4, #255	; 0xff
 801c454:	d01a      	beq.n	801c48c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 801c456:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801c45a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c45e:	fb04 fb01 	mul.w	fp, r4, r1
 801c462:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801c466:	fb0a fa0c 	mul.w	sl, sl, ip
 801c46a:	f10b 0c20 	add.w	ip, fp, #32
 801c46e:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801c472:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801c476:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801c47a:	4451      	add	r1, sl
 801c47c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c480:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801c484:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801c488:	ea41 010c 	orr.w	r1, r1, ip
 801c48c:	fb10 fc02 	smulbb	ip, r0, r2
 801c490:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801c494:	f1c0 0a10 	rsb	sl, r0, #16
 801c498:	ebaa 0a02 	sub.w	sl, sl, r2
 801c49c:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801c4a0:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801c4a4:	437a      	muls	r2, r7
 801c4a6:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801c4aa:	040f      	lsls	r7, r1, #16
 801c4ac:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c4b0:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c4b4:	fb09 220a 	mla	r2, r9, sl, r2
 801c4b8:	ea4b 0808 	orr.w	r8, fp, r8
 801c4bc:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801c4c0:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801c4c4:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801c4c8:	fb00 2208 	mla	r2, r0, r8, r2
 801c4cc:	4339      	orrs	r1, r7
 801c4ce:	fb0c 2201 	mla	r2, ip, r1, r2
 801c4d2:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801c4d6:	0952      	lsrs	r2, r2, #5
 801c4d8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c4dc:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c4e0:	ea49 0202 	orr.w	r2, r9, r2
 801c4e4:	2bff      	cmp	r3, #255	; 0xff
 801c4e6:	b292      	uxth	r2, r2
 801c4e8:	d102      	bne.n	801c4f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 801c4ea:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c4ec:	29ff      	cmp	r1, #255	; 0xff
 801c4ee:	d067      	beq.n	801c5c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 801c4f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c4f2:	f8be 0000 	ldrh.w	r0, [lr]
 801c4f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c4f8:	434b      	muls	r3, r1
 801c4fa:	1c59      	adds	r1, r3, #1
 801c4fc:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801c500:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801c504:	1201      	asrs	r1, r0, #8
 801c506:	b2db      	uxtb	r3, r3
 801c508:	1217      	asrs	r7, r2, #8
 801c50a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c50e:	fb11 f103 	smulbb	r1, r1, r3
 801c512:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 801c516:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c51a:	00c0      	lsls	r0, r0, #3
 801c51c:	fb07 1704 	mla	r7, r7, r4, r1
 801c520:	b2c0      	uxtb	r0, r0
 801c522:	10d1      	asrs	r1, r2, #3
 801c524:	00d2      	lsls	r2, r2, #3
 801c526:	fb10 f003 	smulbb	r0, r0, r3
 801c52a:	b2d2      	uxtb	r2, r2
 801c52c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801c530:	fb02 0204 	mla	r2, r2, r4, r0
 801c534:	fb1c fc03 	smulbb	ip, ip, r3
 801c538:	b2bf      	uxth	r7, r7
 801c53a:	b292      	uxth	r2, r2
 801c53c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c540:	fb01 c104 	mla	r1, r1, r4, ip
 801c544:	1c7b      	adds	r3, r7, #1
 801c546:	f102 0c01 	add.w	ip, r2, #1
 801c54a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801c54e:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801c552:	b289      	uxth	r1, r1
 801c554:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801c558:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801c55c:	ea47 070c 	orr.w	r7, r7, ip
 801c560:	f101 0c01 	add.w	ip, r1, #1
 801c564:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801c568:	0949      	lsrs	r1, r1, #5
 801c56a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c56e:	430f      	orrs	r7, r1
 801c570:	f8ae 7000 	strh.w	r7, [lr]
 801c574:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c576:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c578:	4413      	add	r3, r2
 801c57a:	932b      	str	r3, [sp, #172]	; 0xac
 801c57c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801c57e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c580:	441a      	add	r2, r3
 801c582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c584:	922c      	str	r2, [sp, #176]	; 0xb0
 801c586:	3b01      	subs	r3, #1
 801c588:	f10e 0e02 	add.w	lr, lr, #2
 801c58c:	9315      	str	r3, [sp, #84]	; 0x54
 801c58e:	e489      	b.n	801bea4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801c590:	fb08 f101 	mul.w	r1, r8, r1
 801c594:	fb09 1303 	mla	r3, r9, r3, r1
 801c598:	e6da      	b.n	801c350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 801c59a:	46b9      	mov	r9, r7
 801c59c:	e702      	b.n	801c3a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 801c59e:	f1c2 0110 	rsb	r1, r2, #16
 801c5a2:	437a      	muls	r2, r7
 801c5a4:	fb09 2901 	mla	r9, r9, r1, r2
 801c5a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801c5ac:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801c5b0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801c5b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c5b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c5bc:	4302      	orrs	r2, r0
 801c5be:	e791      	b.n	801c4e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801c5c0:	f8ae 2000 	strh.w	r2, [lr]
 801c5c4:	e7d6      	b.n	801c574 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 801c5c6:	b019      	add	sp, #100	; 0x64
 801c5c8:	ecbd 8b08 	vpop	{d8-d11}
 801c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d4:	b087      	sub	sp, #28
 801c5d6:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 801c5da:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 801c5de:	9105      	str	r1, [sp, #20]
 801c5e0:	fb00 e604 	mla	r6, r0, r4, lr
 801c5e4:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 801c5e8:	9102      	str	r1, [sp, #8]
 801c5ea:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 801c5ee:	9103      	str	r1, [sp, #12]
 801c5f0:	9905      	ldr	r1, [sp, #20]
 801c5f2:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 801c5f6:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801c5fa:	8809      	ldrh	r1, [r1, #0]
 801c5fc:	2800      	cmp	r0, #0
 801c5fe:	eb02 0a06 	add.w	sl, r2, r6
 801c602:	f2c0 80ca 	blt.w	801c79a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 801c606:	4287      	cmp	r7, r0
 801c608:	f340 80c7 	ble.w	801c79a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 801c60c:	f1be 0f00 	cmp.w	lr, #0
 801c610:	f2c0 80bf 	blt.w	801c792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 801c614:	4574      	cmp	r4, lr
 801c616:	f340 80bc 	ble.w	801c792 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 801c61a:	f812 c006 	ldrb.w	ip, [r2, r6]
 801c61e:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 801c622:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c626:	d01c      	beq.n	801c662 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 801c628:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 801c62c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801c630:	4372      	muls	r2, r6
 801c632:	f64f 081f 	movw	r8, #63519	; 0xf81f
 801c636:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 801c63a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801c63e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801c642:	fb0c f609 	mul.w	r6, ip, r9
 801c646:	eb03 0902 	add.w	r9, r3, r2
 801c64a:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801c64e:	f106 0820 	add.w	r8, r6, #32
 801c652:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801c656:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c65a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801c65e:	ea49 0908 	orr.w	r9, r9, r8
 801c662:	fa1f f989 	uxth.w	r9, r9
 801c666:	f11e 0301 	adds.w	r3, lr, #1
 801c66a:	f100 809b 	bmi.w	801c7a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801c66e:	429c      	cmp	r4, r3
 801c670:	f340 8098 	ble.w	801c7a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801c674:	2d00      	cmp	r5, #0
 801c676:	f000 8095 	beq.w	801c7a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 801c67a:	f89a 6001 	ldrb.w	r6, [sl, #1]
 801c67e:	9b03      	ldr	r3, [sp, #12]
 801c680:	2eff      	cmp	r6, #255	; 0xff
 801c682:	885b      	ldrh	r3, [r3, #2]
 801c684:	d01b      	beq.n	801c6be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 801c686:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 801c68a:	ea4f 08e6 	mov.w	r8, r6, asr #3
 801c68e:	fb08 f202 	mul.w	r2, r8, r2
 801c692:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c696:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801c69a:	fb06 f803 	mul.w	r8, r6, r3
 801c69e:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 801c6a2:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801c6a6:	441a      	add	r2, r3
 801c6a8:	f108 0320 	add.w	r3, r8, #32
 801c6ac:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801c6b0:	0a1b      	lsrs	r3, r3, #8
 801c6b2:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 801c6b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c6ba:	ea4b 0303 	orr.w	r3, fp, r3
 801c6be:	b29b      	uxth	r3, r3
 801c6c0:	9301      	str	r3, [sp, #4]
 801c6c2:	3001      	adds	r0, #1
 801c6c4:	d474      	bmi.n	801c7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801c6c6:	4287      	cmp	r7, r0
 801c6c8:	dd72      	ble.n	801c7b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 801c6ca:	9a02      	ldr	r2, [sp, #8]
 801c6cc:	2a00      	cmp	r2, #0
 801c6ce:	f000 8111 	beq.w	801c8f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 801c6d2:	f1be 0f00 	cmp.w	lr, #0
 801c6d6:	db68      	blt.n	801c7aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 801c6d8:	4574      	cmp	r4, lr
 801c6da:	dd66      	ble.n	801c7aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 801c6dc:	f81a 7004 	ldrb.w	r7, [sl, r4]
 801c6e0:	9a03      	ldr	r2, [sp, #12]
 801c6e2:	2fff      	cmp	r7, #255	; 0xff
 801c6e4:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 801c6e8:	d01c      	beq.n	801c724 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 801c6ea:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 801c6ee:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801c6f2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801c6f6:	fb07 fb00 	mul.w	fp, r7, r0
 801c6fa:	fb08 f802 	mul.w	r8, r8, r2
 801c6fe:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801c702:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 801c706:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801c70a:	4490      	add	r8, r2
 801c70c:	f10b 0220 	add.w	r2, fp, #32
 801c710:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 801c714:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c718:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 801c71c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801c720:	ea40 000b 	orr.w	r0, r0, fp
 801c724:	b280      	uxth	r0, r0
 801c726:	f11e 0e01 	adds.w	lr, lr, #1
 801c72a:	d446      	bmi.n	801c7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801c72c:	4574      	cmp	r4, lr
 801c72e:	dd44      	ble.n	801c7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 801c730:	2d00      	cmp	r5, #0
 801c732:	d045      	beq.n	801c7c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 801c734:	1c62      	adds	r2, r4, #1
 801c736:	9b03      	ldr	r3, [sp, #12]
 801c738:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801c73c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801c740:	2cff      	cmp	r4, #255	; 0xff
 801c742:	d01c      	beq.n	801c77e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 801c744:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 801c748:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801c74c:	fb08 fe0e 	mul.w	lr, r8, lr
 801c750:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801c754:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c758:	fb04 f802 	mul.w	r8, r4, r2
 801c75c:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801c760:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801c764:	4472      	add	r2, lr
 801c766:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801c76a:	f108 0a20 	add.w	sl, r8, #32
 801c76e:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801c772:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c776:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c77a:	ea42 020a 	orr.w	r2, r2, sl
 801c77e:	b292      	uxth	r2, r2
 801c780:	2d0f      	cmp	r5, #15
 801c782:	d91f      	bls.n	801c7c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 801c784:	4b5f      	ldr	r3, [pc, #380]	; (801c904 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 801c786:	4a60      	ldr	r2, [pc, #384]	; (801c908 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 801c788:	4860      	ldr	r0, [pc, #384]	; (801c90c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 801c78a:	f240 3173 	movw	r1, #883	; 0x373
 801c78e:	f003 fc1b 	bl	801ffc8 <__assert_func>
 801c792:	4689      	mov	r9, r1
 801c794:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801c798:	e765      	b.n	801c666 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 801c79a:	26ff      	movs	r6, #255	; 0xff
 801c79c:	9101      	str	r1, [sp, #4]
 801c79e:	4689      	mov	r9, r1
 801c7a0:	46b4      	mov	ip, r6
 801c7a2:	e78e      	b.n	801c6c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801c7a4:	9101      	str	r1, [sp, #4]
 801c7a6:	26ff      	movs	r6, #255	; 0xff
 801c7a8:	e78b      	b.n	801c6c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801c7aa:	4608      	mov	r0, r1
 801c7ac:	27ff      	movs	r7, #255	; 0xff
 801c7ae:	e7ba      	b.n	801c726 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 801c7b0:	24ff      	movs	r4, #255	; 0xff
 801c7b2:	460a      	mov	r2, r1
 801c7b4:	4608      	mov	r0, r1
 801c7b6:	4627      	mov	r7, r4
 801c7b8:	e7e2      	b.n	801c780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801c7ba:	460a      	mov	r2, r1
 801c7bc:	24ff      	movs	r4, #255	; 0xff
 801c7be:	e7df      	b.n	801c780 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801c7c0:	460a      	mov	r2, r1
 801c7c2:	24ff      	movs	r4, #255	; 0xff
 801c7c4:	9b02      	ldr	r3, [sp, #8]
 801c7c6:	2b0f      	cmp	r3, #15
 801c7c8:	d8dc      	bhi.n	801c784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801c7ca:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801c7ce:	fa1f f885 	uxth.w	r8, r5
 801c7d2:	fb08 fa0e 	mul.w	sl, r8, lr
 801c7d6:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801c7da:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801c7de:	9303      	str	r3, [sp, #12]
 801c7e0:	fa1f f38e 	uxth.w	r3, lr
 801c7e4:	9304      	str	r3, [sp, #16]
 801c7e6:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801c7ea:	9b02      	ldr	r3, [sp, #8]
 801c7ec:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801c7f0:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801c7f4:	fb15 fe03 	smulbb	lr, r5, r3
 801c7f8:	ea48 0809 	orr.w	r8, r8, r9
 801c7fc:	f1c3 0910 	rsb	r9, r3, #16
 801c800:	9b01      	ldr	r3, [sp, #4]
 801c802:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801c806:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801c80a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c80e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c812:	eba9 0905 	sub.w	r9, r9, r5
 801c816:	ea4b 0303 	orr.w	r3, fp, r3
 801c81a:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801c81e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801c822:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801c826:	436b      	muls	r3, r5
 801c828:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801c82c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c830:	ea4b 0202 	orr.w	r2, fp, r2
 801c834:	fb09 3308 	mla	r3, r9, r8, r3
 801c838:	fb0e 3302 	mla	r3, lr, r2, r3
 801c83c:	0402      	lsls	r2, r0, #16
 801c83e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c842:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801c846:	4310      	orrs	r0, r2
 801c848:	9a02      	ldr	r2, [sp, #8]
 801c84a:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801c84e:	9a03      	ldr	r2, [sp, #12]
 801c850:	fb0e 3e00 	mla	lr, lr, r0, r3
 801c854:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801c858:	9a04      	ldr	r2, [sp, #16]
 801c85a:	1a80      	subs	r0, r0, r2
 801c85c:	9a03      	ldr	r2, [sp, #12]
 801c85e:	eba2 020a 	sub.w	r2, r2, sl
 801c862:	b292      	uxth	r2, r2
 801c864:	b280      	uxth	r0, r0
 801c866:	4356      	muls	r6, r2
 801c868:	9a04      	ldr	r2, [sp, #16]
 801c86a:	fb0c 6600 	mla	r6, ip, r0, r6
 801c86e:	fb02 6707 	mla	r7, r2, r7, r6
 801c872:	fb0a 7404 	mla	r4, sl, r4, r7
 801c876:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801c87a:	1208      	asrs	r0, r1, #8
 801c87c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801c880:	ea6f 2424 	mvn.w	r4, r4, asr #8
 801c884:	b2e4      	uxtb	r4, r4
 801c886:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c88a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c88e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c892:	4360      	muls	r0, r4
 801c894:	ea43 0e0e 	orr.w	lr, r3, lr
 801c898:	fa1f f38e 	uxth.w	r3, lr
 801c89c:	1c42      	adds	r2, r0, #1
 801c89e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c8a2:	1218      	asrs	r0, r3, #8
 801c8a4:	10cd      	asrs	r5, r1, #3
 801c8a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c8aa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c8ae:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c8b2:	4a17      	ldr	r2, [pc, #92]	; (801c910 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 801c8b4:	4365      	muls	r5, r4
 801c8b6:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801c8ba:	1c6a      	adds	r2, r5, #1
 801c8bc:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801c8c0:	00c9      	lsls	r1, r1, #3
 801c8c2:	10da      	asrs	r2, r3, #3
 801c8c4:	b2c9      	uxtb	r1, r1
 801c8c6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c8ca:	434c      	muls	r4, r1
 801c8cc:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801c8d0:	1c61      	adds	r1, r4, #1
 801c8d2:	00d2      	lsls	r2, r2, #3
 801c8d4:	00db      	lsls	r3, r3, #3
 801c8d6:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 801c8da:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c8de:	b2db      	uxtb	r3, r3
 801c8e0:	4302      	orrs	r2, r0
 801c8e2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801c8e6:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 801c8ea:	9a05      	ldr	r2, [sp, #20]
 801c8ec:	8013      	strh	r3, [r2, #0]
 801c8ee:	b007      	add	sp, #28
 801c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8f4:	2d0f      	cmp	r5, #15
 801c8f6:	f63f af45 	bhi.w	801c784 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801c8fa:	24ff      	movs	r4, #255	; 0xff
 801c8fc:	460a      	mov	r2, r1
 801c8fe:	4608      	mov	r0, r1
 801c900:	4627      	mov	r7, r4
 801c902:	e762      	b.n	801c7ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 801c904:	08023e5d 	.word	0x08023e5d
 801c908:	080243b9 	.word	0x080243b9
 801c90c:	08023ee5 	.word	0x08023ee5
 801c910:	fffff800 	.word	0xfffff800

0801c914 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c918:	ed2d 8b08 	vpush	{d8-d11}
 801c91c:	b095      	sub	sp, #84	; 0x54
 801c91e:	eeb0 aa40 	vmov.f32	s20, s0
 801c922:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801c924:	9306      	str	r3, [sp, #24]
 801c926:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801c92a:	9110      	str	r1, [sp, #64]	; 0x40
 801c92c:	9308      	str	r3, [sp, #32]
 801c92e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801c932:	9013      	str	r0, [sp, #76]	; 0x4c
 801c934:	6870      	ldr	r0, [r6, #4]
 801c936:	9212      	str	r2, [sp, #72]	; 0x48
 801c938:	fb00 1303 	mla	r3, r0, r3, r1
 801c93c:	6831      	ldr	r1, [r6, #0]
 801c93e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801c940:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801c944:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801c948:	9307      	str	r3, [sp, #28]
 801c94a:	6813      	ldr	r3, [r2, #0]
 801c94c:	9309      	str	r3, [sp, #36]	; 0x24
 801c94e:	6853      	ldr	r3, [r2, #4]
 801c950:	930a      	str	r3, [sp, #40]	; 0x28
 801c952:	006b      	lsls	r3, r5, #1
 801c954:	eef0 9a60 	vmov.f32	s19, s1
 801c958:	eeb0 9a41 	vmov.f32	s18, s2
 801c95c:	eeb0 8a62 	vmov.f32	s16, s5
 801c960:	eef0 8a43 	vmov.f32	s17, s6
 801c964:	eef0 ba44 	vmov.f32	s23, s8
 801c968:	eeb0 ba64 	vmov.f32	s22, s9
 801c96c:	eef0 aa45 	vmov.f32	s21, s10
 801c970:	930f      	str	r3, [sp, #60]	; 0x3c
 801c972:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c974:	2b00      	cmp	r3, #0
 801c976:	dc03      	bgt.n	801c980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801c978:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	f340 83a3 	ble.w	801d0c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801c980:	9b06      	ldr	r3, [sp, #24]
 801c982:	2b00      	cmp	r3, #0
 801c984:	f340 81bc 	ble.w	801cd00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 801c988:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c98a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c98c:	1412      	asrs	r2, r2, #16
 801c98e:	ea4f 4323 	mov.w	r3, r3, asr #16
 801c992:	d42f      	bmi.n	801c9f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801c994:	1c51      	adds	r1, r2, #1
 801c996:	428d      	cmp	r5, r1
 801c998:	dd2f      	ble.n	801c9fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801c99a:	2b00      	cmp	r3, #0
 801c99c:	db2d      	blt.n	801c9fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801c99e:	9808      	ldr	r0, [sp, #32]
 801c9a0:	1c59      	adds	r1, r3, #1
 801c9a2:	4288      	cmp	r0, r1
 801c9a4:	dd29      	ble.n	801c9fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801c9a6:	9b06      	ldr	r3, [sp, #24]
 801c9a8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c9aa:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801c9ac:	3b01      	subs	r3, #1
 801c9ae:	fb02 1203 	mla	r2, r2, r3, r1
 801c9b2:	1412      	asrs	r2, r2, #16
 801c9b4:	d42b      	bmi.n	801ca0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9b6:	3201      	adds	r2, #1
 801c9b8:	4295      	cmp	r5, r2
 801c9ba:	dd28      	ble.n	801ca0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9bc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c9be:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801c9c0:	fb02 1303 	mla	r3, r2, r3, r1
 801c9c4:	141b      	asrs	r3, r3, #16
 801c9c6:	d422      	bmi.n	801ca0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9c8:	9a08      	ldr	r2, [sp, #32]
 801c9ca:	3301      	adds	r3, #1
 801c9cc:	429a      	cmp	r2, r3
 801c9ce:	dd1e      	ble.n	801ca0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c9d0:	9b06      	ldr	r3, [sp, #24]
 801c9d2:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801c9d6:	9311      	str	r3, [sp, #68]	; 0x44
 801c9d8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801c9dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c9de:	2b00      	cmp	r3, #0
 801c9e0:	f300 8208 	bgt.w	801cdf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 801c9e4:	9b06      	ldr	r3, [sp, #24]
 801c9e6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c9ea:	9b07      	ldr	r3, [sp, #28]
 801c9ec:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801c9f0:	9307      	str	r3, [sp, #28]
 801c9f2:	e187      	b.n	801cd04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 801c9f4:	1c57      	adds	r7, r2, #1
 801c9f6:	f040 8174 	bne.w	801cce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801c9fa:	42aa      	cmp	r2, r5
 801c9fc:	f280 8171 	bge.w	801cce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ca00:	1c5e      	adds	r6, r3, #1
 801ca02:	f2c0 816e 	blt.w	801cce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ca06:	9a08      	ldr	r2, [sp, #32]
 801ca08:	4293      	cmp	r3, r2
 801ca0a:	f280 816a 	bge.w	801cce2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801ca0e:	9b06      	ldr	r3, [sp, #24]
 801ca10:	9f07      	ldr	r7, [sp, #28]
 801ca12:	9311      	str	r3, [sp, #68]	; 0x44
 801ca14:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801ca18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	dde2      	ble.n	801c9e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801ca1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca20:	1419      	asrs	r1, r3, #16
 801ca22:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ca24:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ca28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ca2a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801ca2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ca30:	141b      	asrs	r3, r3, #16
 801ca32:	f100 81c4 	bmi.w	801cdbe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 801ca36:	1c58      	adds	r0, r3, #1
 801ca38:	4285      	cmp	r5, r0
 801ca3a:	f340 81c2 	ble.w	801cdc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801ca3e:	2900      	cmp	r1, #0
 801ca40:	f2c0 81bf 	blt.w	801cdc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801ca44:	9c08      	ldr	r4, [sp, #32]
 801ca46:	1c48      	adds	r0, r1, #1
 801ca48:	4284      	cmp	r4, r0
 801ca4a:	f340 81ba 	ble.w	801cdc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801ca4e:	fb01 3105 	mla	r1, r1, r5, r3
 801ca52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca54:	fa1f fe82 	uxth.w	lr, r2
 801ca58:	eb03 0a01 	add.w	sl, r3, r1
 801ca5c:	ea4f 100e 	mov.w	r0, lr, lsl #4
 801ca60:	f813 9001 	ldrb.w	r9, [r3, r1]
 801ca64:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ca68:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	f1bc 0f00 	cmp.w	ip, #0
 801ca72:	f000 8186 	beq.w	801cd82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 801ca76:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801ca7a:	940b      	str	r4, [sp, #44]	; 0x2c
 801ca7c:	eb0a 0b05 	add.w	fp, sl, r5
 801ca80:	fa1f fa8c 	uxth.w	sl, ip
 801ca84:	fb0a fe0e 	mul.w	lr, sl, lr
 801ca88:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801ca8c:	fa1f fa8a 	uxth.w	sl, sl
 801ca90:	eba0 000e 	sub.w	r0, r0, lr
 801ca94:	eba3 030a 	sub.w	r3, r3, sl
 801ca98:	b280      	uxth	r0, r0
 801ca9a:	fb08 f000 	mul.w	r0, r8, r0
 801ca9e:	b29b      	uxth	r3, r3
 801caa0:	fb09 0303 	mla	r3, r9, r3, r0
 801caa4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801caa6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801caaa:	940c      	str	r4, [sp, #48]	; 0x30
 801caac:	fb0a 3300 	mla	r3, sl, r0, r3
 801cab0:	fb0e 3304 	mla	r3, lr, r4, r3
 801cab4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cab8:	2b00      	cmp	r3, #0
 801caba:	f000 8105 	beq.w	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cabe:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cac0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801cac2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801cac6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801caca:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801cace:	f000 815d 	beq.w	801cd8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 801cad2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801cad6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801cada:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cade:	fb09 f101 	mul.w	r1, r9, r1
 801cae2:	fb0a fe0e 	mul.w	lr, sl, lr
 801cae6:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801caea:	f101 0b20 	add.w	fp, r1, #32
 801caee:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801caf2:	44ce      	add	lr, r9
 801caf4:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801caf8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cafc:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801cb00:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cb04:	ea4e 0909 	orr.w	r9, lr, r9
 801cb08:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cb0c:	8841      	ldrh	r1, [r0, #2]
 801cb0e:	d019      	beq.n	801cb44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801cb10:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801cb14:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801cb18:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cb1c:	fb0a fe0e 	mul.w	lr, sl, lr
 801cb20:	fb08 f801 	mul.w	r8, r8, r1
 801cb24:	f108 0b20 	add.w	fp, r8, #32
 801cb28:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 801cb2c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801cb30:	448e      	add	lr, r1
 801cb32:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 801cb36:	0a09      	lsrs	r1, r1, #8
 801cb38:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 801cb3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cb40:	ea4a 0101 	orr.w	r1, sl, r1
 801cb44:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801cb48:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801cb4c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801cb50:	ea4e 0909 	orr.w	r9, lr, r9
 801cb54:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801cb58:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801cb5c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cb60:	ea4e 0e01 	orr.w	lr, lr, r1
 801cb64:	f1bc 0f00 	cmp.w	ip, #0
 801cb68:	f000 8112 	beq.w	801cd90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 801cb6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cb6e:	eb00 0801 	add.w	r8, r0, r1
 801cb72:	5a41      	ldrh	r1, [r0, r1]
 801cb74:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801cb76:	28ff      	cmp	r0, #255	; 0xff
 801cb78:	d019      	beq.n	801cbae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 801cb7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cb7c:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801cb80:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cb84:	fb04 fb01 	mul.w	fp, r4, r1
 801cb88:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801cb8c:	fb0a fa00 	mul.w	sl, sl, r0
 801cb90:	f10b 0020 	add.w	r0, fp, #32
 801cb94:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801cb98:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801cb9c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801cba0:	4451      	add	r1, sl
 801cba2:	0a00      	lsrs	r0, r0, #8
 801cba4:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801cba8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cbac:	4301      	orrs	r1, r0
 801cbae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cbb0:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801cbb4:	2cff      	cmp	r4, #255	; 0xff
 801cbb6:	d01a      	beq.n	801cbee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801cbb8:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 801cbbc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801cbc0:	fb04 fb00 	mul.w	fp, r4, r0
 801cbc4:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801cbc8:	fb0a fa08 	mul.w	sl, sl, r8
 801cbcc:	f10b 0820 	add.w	r8, fp, #32
 801cbd0:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 801cbd4:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801cbd8:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801cbdc:	4450      	add	r0, sl
 801cbde:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cbe2:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801cbe6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801cbea:	ea40 0008 	orr.w	r0, r0, r8
 801cbee:	fb1c f802 	smulbb	r8, ip, r2
 801cbf2:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801cbf6:	f1cc 0a10 	rsb	sl, ip, #16
 801cbfa:	ebaa 0a02 	sub.w	sl, sl, r2
 801cbfe:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cc02:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801cc06:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801cc0a:	fb0e f202 	mul.w	r2, lr, r2
 801cc0e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cc12:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801cc16:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cc1a:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801cc1e:	fb09 220a 	mla	r2, r9, sl, r2
 801cc22:	ea4b 0101 	orr.w	r1, fp, r1
 801cc26:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801cc2a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cc2e:	fb0c 2201 	mla	r2, ip, r1, r2
 801cc32:	ea4e 0000 	orr.w	r0, lr, r0
 801cc36:	fb08 2800 	mla	r8, r8, r0, r2
 801cc3a:	ea4f 5258 	mov.w	r2, r8, lsr #21
 801cc3e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801cc42:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cc46:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801cc4a:	ea42 0808 	orr.w	r8, r2, r8
 801cc4e:	fa1f f288 	uxth.w	r2, r8
 801cc52:	2bff      	cmp	r3, #255	; 0xff
 801cc54:	f000 80b1 	beq.w	801cdba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 801cc58:	f8b7 8000 	ldrh.w	r8, [r7]
 801cc5c:	43db      	mvns	r3, r3
 801cc5e:	ea4f 2028 	mov.w	r0, r8, asr #8
 801cc62:	fa5f fe83 	uxtb.w	lr, r3
 801cc66:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cc6a:	fb00 f00e 	mul.w	r0, r0, lr
 801cc6e:	1c41      	adds	r1, r0, #1
 801cc70:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801cc74:	1210      	asrs	r0, r2, #8
 801cc76:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801cc7a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cc7e:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801cc82:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cc86:	495a      	ldr	r1, [pc, #360]	; (801cdf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 801cc88:	fb0c fc0e 	mul.w	ip, ip, lr
 801cc8c:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801cc90:	f10c 0101 	add.w	r1, ip, #1
 801cc94:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801cc98:	10d1      	asrs	r1, r2, #3
 801cc9a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cc9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801cca2:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801cca6:	b2db      	uxtb	r3, r3
 801cca8:	00c9      	lsls	r1, r1, #3
 801ccaa:	fb03 f30e 	mul.w	r3, r3, lr
 801ccae:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ccb2:	4301      	orrs	r1, r0
 801ccb4:	1c58      	adds	r0, r3, #1
 801ccb6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801ccba:	00d3      	lsls	r3, r2, #3
 801ccbc:	b2db      	uxtb	r3, r3
 801ccbe:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ccc2:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801ccc6:	803b      	strh	r3, [r7, #0]
 801ccc8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ccca:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cccc:	4413      	add	r3, r2
 801ccce:	9327      	str	r3, [sp, #156]	; 0x9c
 801ccd0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ccd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ccd4:	441a      	add	r2, r3
 801ccd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ccd8:	9228      	str	r2, [sp, #160]	; 0xa0
 801ccda:	3b01      	subs	r3, #1
 801ccdc:	3702      	adds	r7, #2
 801ccde:	9311      	str	r3, [sp, #68]	; 0x44
 801cce0:	e69a      	b.n	801ca18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801cce2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cce4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cce6:	4413      	add	r3, r2
 801cce8:	9327      	str	r3, [sp, #156]	; 0x9c
 801ccea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801ccec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ccee:	441a      	add	r2, r3
 801ccf0:	9b06      	ldr	r3, [sp, #24]
 801ccf2:	9228      	str	r2, [sp, #160]	; 0xa0
 801ccf4:	3b01      	subs	r3, #1
 801ccf6:	9306      	str	r3, [sp, #24]
 801ccf8:	9b07      	ldr	r3, [sp, #28]
 801ccfa:	3302      	adds	r3, #2
 801ccfc:	9307      	str	r3, [sp, #28]
 801ccfe:	e63f      	b.n	801c980 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801cd00:	f47f ae51 	bne.w	801c9a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801cd04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	f340 81dd 	ble.w	801d0c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801cd0c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cd10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd14:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cd18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cd1a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cd1e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cd22:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cd26:	eef0 6a48 	vmov.f32	s13, s16
 801cd2a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cd2e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd32:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cd36:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801cd3a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801cd3e:	eef0 6a68 	vmov.f32	s13, s17
 801cd42:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801cd46:	ee18 2a10 	vmov	r2, s16
 801cd4a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801cd4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd52:	ee18 2a90 	vmov	r2, s17
 801cd56:	9329      	str	r3, [sp, #164]	; 0xa4
 801cd58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cd5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd5e:	932a      	str	r3, [sp, #168]	; 0xa8
 801cd60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cd62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cd64:	3b01      	subs	r3, #1
 801cd66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd6a:	9310      	str	r3, [sp, #64]	; 0x40
 801cd6c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cd6e:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801cd72:	bf08      	it	eq
 801cd74:	4613      	moveq	r3, r2
 801cd76:	9306      	str	r3, [sp, #24]
 801cd78:	eef0 8a67 	vmov.f32	s17, s15
 801cd7c:	eeb0 8a47 	vmov.f32	s16, s14
 801cd80:	e5f7      	b.n	801c972 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801cd82:	fb08 f000 	mul.w	r0, r8, r0
 801cd86:	fb09 0303 	mla	r3, r9, r3, r0
 801cd8a:	e693      	b.n	801cab4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 801cd8c:	4689      	mov	r9, r1
 801cd8e:	e6bb      	b.n	801cb08 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 801cd90:	f1c2 0010 	rsb	r0, r2, #16
 801cd94:	fb0e f202 	mul.w	r2, lr, r2
 801cd98:	fb09 2900 	mla	r9, r9, r0, r2
 801cd9c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801cda0:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801cda4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801cda8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cdac:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801cdb0:	ea42 0909 	orr.w	r9, r2, r9
 801cdb4:	fa1f f289 	uxth.w	r2, r9
 801cdb8:	e74b      	b.n	801cc52 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801cdba:	803a      	strh	r2, [r7, #0]
 801cdbc:	e784      	b.n	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cdbe:	1c5c      	adds	r4, r3, #1
 801cdc0:	d182      	bne.n	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cdc2:	429d      	cmp	r5, r3
 801cdc4:	dd80      	ble.n	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cdc6:	1c48      	adds	r0, r1, #1
 801cdc8:	f6ff af7e 	blt.w	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cdcc:	9808      	ldr	r0, [sp, #32]
 801cdce:	4288      	cmp	r0, r1
 801cdd0:	f77f af7a 	ble.w	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cdd4:	e9cd 3102 	strd	r3, r1, [sp, #8]
 801cdd8:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 801cddc:	e9cd 5000 	strd	r5, r0, [sp]
 801cde0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801cde4:	4639      	mov	r1, r7
 801cde6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801cde8:	f7ff fbf2 	bl	801c5d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801cdec:	e76c      	b.n	801ccc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801cdee:	bf00      	nop
 801cdf0:	fffff800 	.word	0xfffff800
 801cdf4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801cdf6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cdfa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cdfc:	141f      	asrs	r7, r3, #16
 801cdfe:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801ce02:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ce04:	141b      	asrs	r3, r3, #16
 801ce06:	fb05 3707 	mla	r7, r5, r7, r3
 801ce0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce0c:	fa1f fc82 	uxth.w	ip, r2
 801ce10:	eb03 0a07 	add.w	sl, r3, r7
 801ce14:	ea4f 110c 	mov.w	r1, ip, lsl #4
 801ce18:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ce1c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ce20:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 801ce24:	b29b      	uxth	r3, r3
 801ce26:	2800      	cmp	r0, #0
 801ce28:	f000 8132 	beq.w	801d090 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 801ce2c:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801ce30:	940d      	str	r4, [sp, #52]	; 0x34
 801ce32:	eb0a 0b05 	add.w	fp, sl, r5
 801ce36:	fa1f fa80 	uxth.w	sl, r0
 801ce3a:	fb0a fc0c 	mul.w	ip, sl, ip
 801ce3e:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801ce42:	fa1f fa8a 	uxth.w	sl, sl
 801ce46:	eba1 010c 	sub.w	r1, r1, ip
 801ce4a:	eba3 030a 	sub.w	r3, r3, sl
 801ce4e:	b289      	uxth	r1, r1
 801ce50:	fb08 f101 	mul.w	r1, r8, r1
 801ce54:	b29b      	uxth	r3, r3
 801ce56:	fb09 1303 	mla	r3, r9, r3, r1
 801ce5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ce5c:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801ce60:	940e      	str	r4, [sp, #56]	; 0x38
 801ce62:	fb0a 3301 	mla	r3, sl, r1, r3
 801ce66:	fb0c 3304 	mla	r3, ip, r4, r3
 801ce6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	f000 8100 	beq.w	801d074 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801ce74:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ce76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ce78:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ce7c:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801ce80:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801ce84:	f000 8109 	beq.w	801d09a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 801ce88:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ce8c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ce90:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ce94:	fb09 f707 	mul.w	r7, r9, r7
 801ce98:	fb0a fc0c 	mul.w	ip, sl, ip
 801ce9c:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801cea0:	f107 0b20 	add.w	fp, r7, #32
 801cea4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801cea8:	44cc      	add	ip, r9
 801ceaa:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801ceae:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ceb2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801ceb6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ceba:	ea4c 0909 	orr.w	r9, ip, r9
 801cebe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801cec2:	884f      	ldrh	r7, [r1, #2]
 801cec4:	d019      	beq.n	801cefa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 801cec6:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801ceca:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801cece:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ced2:	fb08 f807 	mul.w	r8, r8, r7
 801ced6:	fb0a fc0c 	mul.w	ip, sl, ip
 801ceda:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801cede:	f108 0b20 	add.w	fp, r8, #32
 801cee2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801cee6:	44bc      	add	ip, r7
 801cee8:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801ceec:	0a3f      	lsrs	r7, r7, #8
 801ceee:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801cef2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801cef6:	ea4c 0707 	orr.w	r7, ip, r7
 801cefa:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801cefe:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801cf02:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cf06:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801cf0a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801cf0e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cf12:	ea4c 0909 	orr.w	r9, ip, r9
 801cf16:	ea4a 0707 	orr.w	r7, sl, r7
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	f000 80bf 	beq.w	801d09e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 801cf20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801cf22:	eb01 0c04 	add.w	ip, r1, r4
 801cf26:	f831 8004 	ldrh.w	r8, [r1, r4]
 801cf2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801cf2c:	29ff      	cmp	r1, #255	; 0xff
 801cf2e:	d01a      	beq.n	801cf66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 801cf30:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cf32:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801cf36:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801cf3a:	fb04 fb08 	mul.w	fp, r4, r8
 801cf3e:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801cf42:	fb0a fa01 	mul.w	sl, sl, r1
 801cf46:	f10b 0120 	add.w	r1, fp, #32
 801cf4a:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801cf4e:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801cf52:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801cf56:	44d0      	add	r8, sl
 801cf58:	0a09      	lsrs	r1, r1, #8
 801cf5a:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801cf5e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cf62:	ea48 0801 	orr.w	r8, r8, r1
 801cf66:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cf68:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801cf6c:	2cff      	cmp	r4, #255	; 0xff
 801cf6e:	d01a      	beq.n	801cfa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 801cf70:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801cf74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cf78:	fb04 fb01 	mul.w	fp, r4, r1
 801cf7c:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801cf80:	fb0a fa0c 	mul.w	sl, sl, ip
 801cf84:	f10b 0c20 	add.w	ip, fp, #32
 801cf88:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801cf8c:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801cf90:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801cf94:	4451      	add	r1, sl
 801cf96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf9a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801cf9e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801cfa2:	ea41 010c 	orr.w	r1, r1, ip
 801cfa6:	fb10 fc02 	smulbb	ip, r0, r2
 801cfaa:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801cfae:	f1c0 0a10 	rsb	sl, r0, #16
 801cfb2:	ebaa 0a02 	sub.w	sl, sl, r2
 801cfb6:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801cfba:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801cfbe:	437a      	muls	r2, r7
 801cfc0:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801cfc4:	040f      	lsls	r7, r1, #16
 801cfc6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801cfca:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801cfce:	fb09 220a 	mla	r2, r9, sl, r2
 801cfd2:	ea4b 0808 	orr.w	r8, fp, r8
 801cfd6:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801cfda:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801cfde:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cfe2:	fb00 2208 	mla	r2, r0, r8, r2
 801cfe6:	4339      	orrs	r1, r7
 801cfe8:	fb0c 2201 	mla	r2, ip, r1, r2
 801cfec:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801cff0:	0952      	lsrs	r2, r2, #5
 801cff2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801cff6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cffa:	ea49 0202 	orr.w	r2, r9, r2
 801cffe:	2bff      	cmp	r3, #255	; 0xff
 801d000:	b292      	uxth	r2, r2
 801d002:	d05d      	beq.n	801d0c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 801d004:	f8be 8000 	ldrh.w	r8, [lr]
 801d008:	4c31      	ldr	r4, [pc, #196]	; (801d0d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 801d00a:	43db      	mvns	r3, r3
 801d00c:	ea4f 2028 	mov.w	r0, r8, asr #8
 801d010:	fa5f fc83 	uxtb.w	ip, r3
 801d014:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d018:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801d01c:	fb00 f00c 	mul.w	r0, r0, ip
 801d020:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d024:	fb07 f10c 	mul.w	r1, r7, ip
 801d028:	1c47      	adds	r7, r0, #1
 801d02a:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801d02e:	1217      	asrs	r7, r2, #8
 801d030:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d034:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801d038:	1c4f      	adds	r7, r1, #1
 801d03a:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801d03e:	10d1      	asrs	r1, r2, #3
 801d040:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d044:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801d048:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801d04c:	b2db      	uxtb	r3, r3
 801d04e:	00c9      	lsls	r1, r1, #3
 801d050:	fb03 f30c 	mul.w	r3, r3, ip
 801d054:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d058:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801d05c:	4308      	orrs	r0, r1
 801d05e:	00d2      	lsls	r2, r2, #3
 801d060:	1c59      	adds	r1, r3, #1
 801d062:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d066:	b2d2      	uxtb	r2, r2
 801d068:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d06c:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801d070:	f8ae 0000 	strh.w	r0, [lr]
 801d074:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d076:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d078:	4413      	add	r3, r2
 801d07a:	9327      	str	r3, [sp, #156]	; 0x9c
 801d07c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801d07e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d080:	441a      	add	r2, r3
 801d082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d084:	9228      	str	r2, [sp, #160]	; 0xa0
 801d086:	3b01      	subs	r3, #1
 801d088:	f10e 0e02 	add.w	lr, lr, #2
 801d08c:	9311      	str	r3, [sp, #68]	; 0x44
 801d08e:	e4a5      	b.n	801c9dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d090:	fb08 f101 	mul.w	r1, r8, r1
 801d094:	fb09 1303 	mla	r3, r9, r3, r1
 801d098:	e6e7      	b.n	801ce6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801d09a:	46b9      	mov	r9, r7
 801d09c:	e70f      	b.n	801cebe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 801d09e:	f1c2 0110 	rsb	r1, r2, #16
 801d0a2:	437a      	muls	r2, r7
 801d0a4:	fb09 2901 	mla	r9, r9, r1, r2
 801d0a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d0ac:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801d0b0:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801d0b4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d0b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d0bc:	4302      	orrs	r2, r0
 801d0be:	e79e      	b.n	801cffe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801d0c0:	f8ae 2000 	strh.w	r2, [lr]
 801d0c4:	e7d6      	b.n	801d074 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801d0c6:	b015      	add	sp, #84	; 0x54
 801d0c8:	ecbd 8b08 	vpop	{d8-d11}
 801d0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0d0:	fffff800 	.word	0xfffff800

0801d0d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801d0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0d8:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801d0dc:	fb0c 4e03 	mla	lr, ip, r3, r4
 801d0e0:	f1bc 0f00 	cmp.w	ip, #0
 801d0e4:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801d0e8:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801d0ec:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801d0f0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801d0f4:	8808      	ldrh	r0, [r1, #0]
 801d0f6:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801d0fa:	db2f      	blt.n	801d15c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801d0fc:	45e2      	cmp	sl, ip
 801d0fe:	dd2d      	ble.n	801d15c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801d100:	2c00      	cmp	r4, #0
 801d102:	db29      	blt.n	801d158 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801d104:	42a3      	cmp	r3, r4
 801d106:	dd27      	ble.n	801d158 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801d108:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801d10c:	1c62      	adds	r2, r4, #1
 801d10e:	d428      	bmi.n	801d162 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801d110:	4293      	cmp	r3, r2
 801d112:	dd26      	ble.n	801d162 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801d114:	b32f      	cbz	r7, 801d162 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801d116:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801d11a:	f11c 0c01 	adds.w	ip, ip, #1
 801d11e:	d424      	bmi.n	801d16a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801d120:	45e2      	cmp	sl, ip
 801d122:	dd22      	ble.n	801d16a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801d124:	2e00      	cmp	r6, #0
 801d126:	f000 809c 	beq.w	801d262 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 801d12a:	2c00      	cmp	r4, #0
 801d12c:	db1b      	blt.n	801d166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801d12e:	42a3      	cmp	r3, r4
 801d130:	dd19      	ble.n	801d166 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801d132:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801d136:	3401      	adds	r4, #1
 801d138:	d41a      	bmi.n	801d170 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801d13a:	42a3      	cmp	r3, r4
 801d13c:	dd18      	ble.n	801d170 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801d13e:	b1cf      	cbz	r7, 801d174 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801d140:	3301      	adds	r3, #1
 801d142:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801d146:	2f0f      	cmp	r7, #15
 801d148:	d915      	bls.n	801d176 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801d14a:	4b49      	ldr	r3, [pc, #292]	; (801d270 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801d14c:	4a49      	ldr	r2, [pc, #292]	; (801d274 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801d14e:	484a      	ldr	r0, [pc, #296]	; (801d278 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801d150:	f240 3155 	movw	r1, #853	; 0x355
 801d154:	f002 ff38 	bl	801ffc8 <__assert_func>
 801d158:	4681      	mov	r9, r0
 801d15a:	e7d7      	b.n	801d10c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801d15c:	4686      	mov	lr, r0
 801d15e:	4681      	mov	r9, r0
 801d160:	e7db      	b.n	801d11a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801d162:	4686      	mov	lr, r0
 801d164:	e7d9      	b.n	801d11a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801d166:	4684      	mov	ip, r0
 801d168:	e7e5      	b.n	801d136 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801d16a:	4603      	mov	r3, r0
 801d16c:	4684      	mov	ip, r0
 801d16e:	e7ea      	b.n	801d146 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801d170:	4603      	mov	r3, r0
 801d172:	e7e8      	b.n	801d146 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801d174:	4603      	mov	r3, r0
 801d176:	2e0f      	cmp	r6, #15
 801d178:	d8e7      	bhi.n	801d14a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801d17a:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801d17e:	fb17 f806 	smulbb	r8, r7, r6
 801d182:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d186:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801d18a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801d18e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801d192:	ea44 0909 	orr.w	r9, r4, r9
 801d196:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d19a:	f1c6 0410 	rsb	r4, r6, #16
 801d19e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d1a2:	1be4      	subs	r4, r4, r7
 801d1a4:	041a      	lsls	r2, r3, #16
 801d1a6:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801d1aa:	ea4a 0e0e 	orr.w	lr, sl, lr
 801d1ae:	fb07 fe0e 	mul.w	lr, r7, lr
 801d1b2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d1b6:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801d1ba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d1be:	fb04 e409 	mla	r4, r4, r9, lr
 801d1c2:	4313      	orrs	r3, r2
 801d1c4:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801d1c8:	fb08 4303 	mla	r3, r8, r3, r4
 801d1cc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801d1d0:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801d1d4:	4322      	orrs	r2, r4
 801d1d6:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801d1da:	fb06 3202 	mla	r2, r6, r2, r3
 801d1de:	0d53      	lsrs	r3, r2, #21
 801d1e0:	0952      	lsrs	r2, r2, #5
 801d1e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d1e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d1ea:	431a      	orrs	r2, r3
 801d1ec:	b293      	uxth	r3, r2
 801d1ee:	b2af      	uxth	r7, r5
 801d1f0:	1202      	asrs	r2, r0, #8
 801d1f2:	43ed      	mvns	r5, r5
 801d1f4:	b2ed      	uxtb	r5, r5
 801d1f6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801d1fa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d1fe:	fb12 f205 	smulbb	r2, r2, r5
 801d202:	10c6      	asrs	r6, r0, #3
 801d204:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801d208:	fb0c 2c07 	mla	ip, ip, r7, r2
 801d20c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801d210:	10da      	asrs	r2, r3, #3
 801d212:	fb16 f605 	smulbb	r6, r6, r5
 801d216:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801d21a:	fb02 6207 	mla	r2, r2, r7, r6
 801d21e:	b296      	uxth	r6, r2
 801d220:	00c2      	lsls	r2, r0, #3
 801d222:	00dc      	lsls	r4, r3, #3
 801d224:	b2d2      	uxtb	r2, r2
 801d226:	b2e4      	uxtb	r4, r4
 801d228:	fb12 f205 	smulbb	r2, r2, r5
 801d22c:	fb04 2207 	mla	r2, r4, r7, r2
 801d230:	fa1f fc8c 	uxth.w	ip, ip
 801d234:	b292      	uxth	r2, r2
 801d236:	f10c 0301 	add.w	r3, ip, #1
 801d23a:	1c50      	adds	r0, r2, #1
 801d23c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801d240:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801d244:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d248:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d24c:	4313      	orrs	r3, r2
 801d24e:	1c72      	adds	r2, r6, #1
 801d250:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801d254:	0952      	lsrs	r2, r2, #5
 801d256:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d25a:	4313      	orrs	r3, r2
 801d25c:	800b      	strh	r3, [r1, #0]
 801d25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d262:	2f0f      	cmp	r7, #15
 801d264:	f63f af71 	bhi.w	801d14a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801d268:	4603      	mov	r3, r0
 801d26a:	4684      	mov	ip, r0
 801d26c:	e785      	b.n	801d17a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801d26e:	bf00      	nop
 801d270:	08023e5d 	.word	0x08023e5d
 801d274:	08024462 	.word	0x08024462
 801d278:	08023ee5 	.word	0x08023ee5

0801d27c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d280:	ed2d 8b08 	vpush	{d8-d11}
 801d284:	b095      	sub	sp, #84	; 0x54
 801d286:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801d28a:	9306      	str	r3, [sp, #24]
 801d28c:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801d290:	9212      	str	r2, [sp, #72]	; 0x48
 801d292:	9307      	str	r3, [sp, #28]
 801d294:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d296:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801d29a:	930c      	str	r3, [sp, #48]	; 0x30
 801d29c:	910b      	str	r1, [sp, #44]	; 0x2c
 801d29e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d2a2:	9013      	str	r0, [sp, #76]	; 0x4c
 801d2a4:	6850      	ldr	r0, [r2, #4]
 801d2a6:	6812      	ldr	r2, [r2, #0]
 801d2a8:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 801d2ac:	fb00 1303 	mla	r3, r0, r3, r1
 801d2b0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801d2b4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	9309      	str	r3, [sp, #36]	; 0x24
 801d2ba:	007b      	lsls	r3, r7, #1
 801d2bc:	930a      	str	r3, [sp, #40]	; 0x28
 801d2be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d2c0:	43db      	mvns	r3, r3
 801d2c2:	b2db      	uxtb	r3, r3
 801d2c4:	eeb0 aa40 	vmov.f32	s20, s0
 801d2c8:	eef0 9a60 	vmov.f32	s19, s1
 801d2cc:	eeb0 9a41 	vmov.f32	s18, s2
 801d2d0:	eeb0 8a62 	vmov.f32	s16, s5
 801d2d4:	eef0 8a43 	vmov.f32	s17, s6
 801d2d8:	eef0 ba44 	vmov.f32	s23, s8
 801d2dc:	eeb0 ba64 	vmov.f32	s22, s9
 801d2e0:	eef0 aa45 	vmov.f32	s21, s10
 801d2e4:	9308      	str	r3, [sp, #32]
 801d2e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	dc03      	bgt.n	801d2f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d2ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	f340 81f3 	ble.w	801d6da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801d2f4:	9b06      	ldr	r3, [sp, #24]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	f340 80fa 	ble.w	801d4f0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801d2fc:	1422      	asrs	r2, r4, #16
 801d2fe:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d302:	d42b      	bmi.n	801d35c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801d304:	1c51      	adds	r1, r2, #1
 801d306:	428f      	cmp	r7, r1
 801d308:	dd2b      	ble.n	801d362 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	db29      	blt.n	801d362 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801d30e:	9807      	ldr	r0, [sp, #28]
 801d310:	1c59      	adds	r1, r3, #1
 801d312:	4288      	cmp	r0, r1
 801d314:	dd25      	ble.n	801d362 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801d316:	9b06      	ldr	r3, [sp, #24]
 801d318:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d31a:	3b01      	subs	r3, #1
 801d31c:	fb02 4203 	mla	r2, r2, r3, r4
 801d320:	1412      	asrs	r2, r2, #16
 801d322:	d428      	bmi.n	801d376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801d324:	3201      	adds	r2, #1
 801d326:	4297      	cmp	r7, r2
 801d328:	dd25      	ble.n	801d376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801d32a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d32c:	fb02 6303 	mla	r3, r2, r3, r6
 801d330:	141b      	asrs	r3, r3, #16
 801d332:	d420      	bmi.n	801d376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801d334:	9a07      	ldr	r2, [sp, #28]
 801d336:	3301      	adds	r3, #1
 801d338:	429a      	cmp	r2, r3
 801d33a:	dd1c      	ble.n	801d376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801d33c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801d340:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801d344:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801d348:	f1b8 0f00 	cmp.w	r8, #0
 801d34c:	f300 8129 	bgt.w	801d5a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 801d350:	9b06      	ldr	r3, [sp, #24]
 801d352:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801d356:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801d35a:	e0cb      	b.n	801d4f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801d35c:	1c51      	adds	r1, r2, #1
 801d35e:	f040 80bd 	bne.w	801d4dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801d362:	42ba      	cmp	r2, r7
 801d364:	f280 80ba 	bge.w	801d4dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801d368:	1c5a      	adds	r2, r3, #1
 801d36a:	f2c0 80b7 	blt.w	801d4dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801d36e:	9a07      	ldr	r2, [sp, #28]
 801d370:	4293      	cmp	r3, r2
 801d372:	f280 80b3 	bge.w	801d4dc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801d376:	f8dd b018 	ldr.w	fp, [sp, #24]
 801d37a:	46c8      	mov	r8, r9
 801d37c:	f1bb 0f00 	cmp.w	fp, #0
 801d380:	dde6      	ble.n	801d350 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801d382:	1421      	asrs	r1, r4, #16
 801d384:	ea4f 4226 	mov.w	r2, r6, asr #16
 801d388:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d38c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d390:	f100 80ef 	bmi.w	801d572 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801d394:	f101 0c01 	add.w	ip, r1, #1
 801d398:	4567      	cmp	r7, ip
 801d39a:	f340 80ec 	ble.w	801d576 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801d39e:	2a00      	cmp	r2, #0
 801d3a0:	f2c0 80e9 	blt.w	801d576 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801d3a4:	9d07      	ldr	r5, [sp, #28]
 801d3a6:	f102 0c01 	add.w	ip, r2, #1
 801d3aa:	4565      	cmp	r5, ip
 801d3ac:	f340 80e3 	ble.w	801d576 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801d3b0:	fb02 1207 	mla	r2, r2, r7, r1
 801d3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d3b6:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801d3ba:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801d3be:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801d3c2:	b138      	cbz	r0, 801d3d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 801d3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d3c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d3c8:	4472      	add	r2, lr
 801d3ca:	f83e 5005 	ldrh.w	r5, [lr, r5]
 801d3ce:	8852      	ldrh	r2, [r2, #2]
 801d3d0:	950e      	str	r5, [sp, #56]	; 0x38
 801d3d2:	920f      	str	r2, [sp, #60]	; 0x3c
 801d3d4:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801d3d8:	fb13 f200 	smulbb	r2, r3, r0
 801d3dc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d3e0:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801d3e4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d3e8:	10d2      	asrs	r2, r2, #3
 801d3ea:	ea4e 0c0c 	orr.w	ip, lr, ip
 801d3ee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d3f2:	f1c0 0e10 	rsb	lr, r0, #16
 801d3f6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d3fa:	ebae 0e03 	sub.w	lr, lr, r3
 801d3fe:	ea4a 0101 	orr.w	r1, sl, r1
 801d402:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801d406:	4359      	muls	r1, r3
 801d408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d40a:	9d08      	ldr	r5, [sp, #32]
 801d40c:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801d410:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801d414:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d418:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d41c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d420:	ea4c 0c03 	orr.w	ip, ip, r3
 801d424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d426:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d428:	041b      	lsls	r3, r3, #16
 801d42a:	fb02 ec0c 	mla	ip, r2, ip, lr
 801d42e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801d432:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801d436:	ea43 030e 	orr.w	r3, r3, lr
 801d43a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801d43e:	fb02 c203 	mla	r2, r2, r3, ip
 801d442:	0d53      	lsrs	r3, r2, #21
 801d444:	0952      	lsrs	r2, r2, #5
 801d446:	f8b8 c000 	ldrh.w	ip, [r8]
 801d44a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d44e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d452:	431a      	orrs	r2, r3
 801d454:	b292      	uxth	r2, r2
 801d456:	ea4f 212c 	mov.w	r1, ip, asr #8
 801d45a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801d45e:	1210      	asrs	r0, r2, #8
 801d460:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d464:	fb11 f105 	smulbb	r1, r1, r5
 801d468:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801d46c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d470:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d474:	fb00 1003 	mla	r0, r0, r3, r1
 801d478:	fa5f fc8c 	uxtb.w	ip, ip
 801d47c:	10d1      	asrs	r1, r2, #3
 801d47e:	00d2      	lsls	r2, r2, #3
 801d480:	fb1c fc05 	smulbb	ip, ip, r5
 801d484:	b2d2      	uxtb	r2, r2
 801d486:	fb02 c203 	mla	r2, r2, r3, ip
 801d48a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d48e:	b280      	uxth	r0, r0
 801d490:	b292      	uxth	r2, r2
 801d492:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d496:	fb1e fe05 	smulbb	lr, lr, r5
 801d49a:	fb01 e103 	mla	r1, r1, r3, lr
 801d49e:	f102 0c01 	add.w	ip, r2, #1
 801d4a2:	1c43      	adds	r3, r0, #1
 801d4a4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d4a8:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d4ac:	b289      	uxth	r1, r1
 801d4ae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d4b2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801d4b6:	4313      	orrs	r3, r2
 801d4b8:	1c4a      	adds	r2, r1, #1
 801d4ba:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d4be:	0949      	lsrs	r1, r1, #5
 801d4c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d4c4:	430b      	orrs	r3, r1
 801d4c6:	f8a8 3000 	strh.w	r3, [r8]
 801d4ca:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d4cc:	441c      	add	r4, r3
 801d4ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d4d0:	f108 0802 	add.w	r8, r8, #2
 801d4d4:	441e      	add	r6, r3
 801d4d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d4da:	e74f      	b.n	801d37c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801d4dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d4de:	441c      	add	r4, r3
 801d4e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d4e2:	441e      	add	r6, r3
 801d4e4:	9b06      	ldr	r3, [sp, #24]
 801d4e6:	3b01      	subs	r3, #1
 801d4e8:	9306      	str	r3, [sp, #24]
 801d4ea:	f109 0902 	add.w	r9, r9, #2
 801d4ee:	e701      	b.n	801d2f4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801d4f0:	f47f af11 	bne.w	801d316 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801d4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	f340 80ef 	ble.w	801d6da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801d4fc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d504:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d508:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d50a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d50e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d512:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d516:	eef0 6a48 	vmov.f32	s13, s16
 801d51a:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d51e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d522:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d526:	ee16 4a90 	vmov	r4, s13
 801d52a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d52e:	eef0 6a68 	vmov.f32	s13, s17
 801d532:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d536:	ee18 2a10 	vmov	r2, s16
 801d53a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d53e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d542:	ee18 2a90 	vmov	r2, s17
 801d546:	9329      	str	r3, [sp, #164]	; 0xa4
 801d548:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d54a:	fb92 f3f3 	sdiv	r3, r2, r3
 801d54e:	932a      	str	r3, [sp, #168]	; 0xa8
 801d550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d552:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d554:	3b01      	subs	r3, #1
 801d556:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d55a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d55c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d55e:	bf08      	it	eq
 801d560:	4613      	moveq	r3, r2
 801d562:	ee16 6a90 	vmov	r6, s13
 801d566:	9306      	str	r3, [sp, #24]
 801d568:	eef0 8a67 	vmov.f32	s17, s15
 801d56c:	eeb0 8a47 	vmov.f32	s16, s14
 801d570:	e6b9      	b.n	801d2e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801d572:	1c4d      	adds	r5, r1, #1
 801d574:	d1a9      	bne.n	801d4ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d576:	428f      	cmp	r7, r1
 801d578:	dda7      	ble.n	801d4ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d57a:	1c55      	adds	r5, r2, #1
 801d57c:	dba5      	blt.n	801d4ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d57e:	9d07      	ldr	r5, [sp, #28]
 801d580:	4295      	cmp	r5, r2
 801d582:	dda2      	ble.n	801d4ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d584:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801d586:	9101      	str	r1, [sp, #4]
 801d588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801d58c:	9b07      	ldr	r3, [sp, #28]
 801d58e:	9300      	str	r3, [sp, #0]
 801d590:	e9cd 0504 	strd	r0, r5, [sp, #16]
 801d594:	463b      	mov	r3, r7
 801d596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d598:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d59a:	4641      	mov	r1, r8
 801d59c:	f7ff fd9a 	bl	801d0d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801d5a0:	e793      	b.n	801d4ca <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801d5a2:	1422      	asrs	r2, r4, #16
 801d5a4:	1431      	asrs	r1, r6, #16
 801d5a6:	fb07 2101 	mla	r1, r7, r1, r2
 801d5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d5ae:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801d5b2:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801d5b6:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801d5ba:	8851      	ldrh	r1, [r2, #2]
 801d5bc:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d5c0:	f1be 0f00 	cmp.w	lr, #0
 801d5c4:	d006      	beq.n	801d5d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801d5c6:	980a      	ldr	r0, [sp, #40]	; 0x28
 801d5c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801d5ca:	1810      	adds	r0, r2, r0
 801d5cc:	5b52      	ldrh	r2, [r2, r5]
 801d5ce:	9210      	str	r2, [sp, #64]	; 0x40
 801d5d0:	8842      	ldrh	r2, [r0, #2]
 801d5d2:	9211      	str	r2, [sp, #68]	; 0x44
 801d5d4:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801d5d8:	fb13 f20e 	smulbb	r2, r3, lr
 801d5dc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d5e0:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801d5e4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801d5e8:	10d2      	asrs	r2, r2, #3
 801d5ea:	ea40 000c 	orr.w	r0, r0, ip
 801d5ee:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d5f2:	f1ce 0c10 	rsb	ip, lr, #16
 801d5f6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d5fa:	ebac 0c03 	sub.w	ip, ip, r3
 801d5fe:	ea4b 0101 	orr.w	r1, fp, r1
 801d602:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801d606:	4359      	muls	r1, r3
 801d608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d60a:	9d08      	ldr	r5, [sp, #32]
 801d60c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801d610:	fb0c 1c00 	mla	ip, ip, r0, r1
 801d614:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801d618:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801d61c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d61e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d622:	ea4b 0000 	orr.w	r0, fp, r0
 801d626:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801d62a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d62e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d632:	fb02 c000 	mla	r0, r2, r0, ip
 801d636:	ea4b 0b03 	orr.w	fp, fp, r3
 801d63a:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801d63e:	fb02 0b0b 	mla	fp, r2, fp, r0
 801d642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d644:	ea4f 515b 	mov.w	r1, fp, lsr #21
 801d648:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801d64c:	8812      	ldrh	r2, [r2, #0]
 801d64e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d652:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801d656:	ea41 0b0b 	orr.w	fp, r1, fp
 801d65a:	fa1f f38b 	uxth.w	r3, fp
 801d65e:	1211      	asrs	r1, r2, #8
 801d660:	1218      	asrs	r0, r3, #8
 801d662:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d666:	fb11 f105 	smulbb	r1, r1, r5
 801d66a:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801d66e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d672:	00d2      	lsls	r2, r2, #3
 801d674:	fb00 100a 	mla	r0, r0, sl, r1
 801d678:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d67c:	10d9      	asrs	r1, r3, #3
 801d67e:	b2d2      	uxtb	r2, r2
 801d680:	00db      	lsls	r3, r3, #3
 801d682:	fb1c fc05 	smulbb	ip, ip, r5
 801d686:	fb12 f205 	smulbb	r2, r2, r5
 801d68a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d68e:	b2db      	uxtb	r3, r3
 801d690:	b280      	uxth	r0, r0
 801d692:	fb01 c10a 	mla	r1, r1, sl, ip
 801d696:	fb03 230a 	mla	r3, r3, sl, r2
 801d69a:	b29b      	uxth	r3, r3
 801d69c:	b289      	uxth	r1, r1
 801d69e:	1c42      	adds	r2, r0, #1
 801d6a0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d6a4:	f101 0c01 	add.w	ip, r1, #1
 801d6a8:	1c5a      	adds	r2, r3, #1
 801d6aa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801d6ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d6b2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d6b6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d6ba:	0949      	lsrs	r1, r1, #5
 801d6bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d6be:	4310      	orrs	r0, r2
 801d6c0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d6c4:	4308      	orrs	r0, r1
 801d6c6:	f823 0b02 	strh.w	r0, [r3], #2
 801d6ca:	930d      	str	r3, [sp, #52]	; 0x34
 801d6cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d6ce:	441c      	add	r4, r3
 801d6d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d6d2:	f108 38ff 	add.w	r8, r8, #4294967295
 801d6d6:	441e      	add	r6, r3
 801d6d8:	e636      	b.n	801d348 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801d6da:	b015      	add	sp, #84	; 0x54
 801d6dc:	ecbd 8b08 	vpop	{d8-d11}
 801d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801d6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6e8:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801d6ec:	fb06 5c03 	mla	ip, r6, r3, r5
 801d6f0:	2e00      	cmp	r6, #0
 801d6f2:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 801d6f6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801d6fa:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801d6fe:	8808      	ldrh	r0, [r1, #0]
 801d700:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801d704:	db2e      	blt.n	801d764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801d706:	45b0      	cmp	r8, r6
 801d708:	dd2c      	ble.n	801d764 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801d70a:	2d00      	cmp	r5, #0
 801d70c:	db28      	blt.n	801d760 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801d70e:	42ab      	cmp	r3, r5
 801d710:	dd26      	ble.n	801d760 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801d712:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 801d716:	1c6a      	adds	r2, r5, #1
 801d718:	d427      	bmi.n	801d76a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801d71a:	4293      	cmp	r3, r2
 801d71c:	dd25      	ble.n	801d76a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801d71e:	b324      	cbz	r4, 801d76a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801d720:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d724:	3601      	adds	r6, #1
 801d726:	d424      	bmi.n	801d772 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801d728:	45b0      	cmp	r8, r6
 801d72a:	dd22      	ble.n	801d772 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801d72c:	b31f      	cbz	r7, 801d776 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 801d72e:	2d00      	cmp	r5, #0
 801d730:	db1d      	blt.n	801d76e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801d732:	42ab      	cmp	r3, r5
 801d734:	dd1b      	ble.n	801d76e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801d736:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 801d73a:	3501      	adds	r5, #1
 801d73c:	d405      	bmi.n	801d74a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801d73e:	42ab      	cmp	r3, r5
 801d740:	dd03      	ble.n	801d74a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801d742:	b124      	cbz	r4, 801d74e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 801d744:	3301      	adds	r3, #1
 801d746:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 801d74a:	2c0f      	cmp	r4, #15
 801d74c:	d801      	bhi.n	801d752 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801d74e:	2f0f      	cmp	r7, #15
 801d750:	d914      	bls.n	801d77c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 801d752:	4b27      	ldr	r3, [pc, #156]	; (801d7f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 801d754:	4a27      	ldr	r2, [pc, #156]	; (801d7f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801d756:	4828      	ldr	r0, [pc, #160]	; (801d7f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801d758:	f240 3155 	movw	r1, #853	; 0x355
 801d75c:	f002 fc34 	bl	801ffc8 <__assert_func>
 801d760:	4684      	mov	ip, r0
 801d762:	e7d8      	b.n	801d716 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 801d764:	4602      	mov	r2, r0
 801d766:	4684      	mov	ip, r0
 801d768:	e7dc      	b.n	801d724 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801d76a:	4602      	mov	r2, r0
 801d76c:	e7da      	b.n	801d724 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801d76e:	4606      	mov	r6, r0
 801d770:	e7e3      	b.n	801d73a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 801d772:	4606      	mov	r6, r0
 801d774:	e7e9      	b.n	801d74a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801d776:	2c0f      	cmp	r4, #15
 801d778:	d8eb      	bhi.n	801d752 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801d77a:	4606      	mov	r6, r0
 801d77c:	ea4f 450c 	mov.w	r5, ip, lsl #16
 801d780:	fb14 f307 	smulbb	r3, r4, r7
 801d784:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801d788:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801d78c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d790:	10db      	asrs	r3, r3, #3
 801d792:	ea45 0c0c 	orr.w	ip, r5, ip
 801d796:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d79a:	f1c7 0510 	rsb	r5, r7, #16
 801d79e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d7a2:	1b2d      	subs	r5, r5, r4
 801d7a4:	ea4e 0202 	orr.w	r2, lr, r2
 801d7a8:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801d7ac:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801d7b0:	4354      	muls	r4, r2
 801d7b2:	fb05 450c 	mla	r5, r5, ip, r4
 801d7b6:	0404      	lsls	r4, r0, #16
 801d7b8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d7bc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d7c0:	4320      	orrs	r0, r4
 801d7c2:	fb03 5400 	mla	r4, r3, r0, r5
 801d7c6:	0430      	lsls	r0, r6, #16
 801d7c8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801d7cc:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801d7d0:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801d7d4:	4330      	orrs	r0, r6
 801d7d6:	fb07 4000 	mla	r0, r7, r0, r4
 801d7da:	0d43      	lsrs	r3, r0, #21
 801d7dc:	0940      	lsrs	r0, r0, #5
 801d7de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d7e2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d7e6:	4318      	orrs	r0, r3
 801d7e8:	8008      	strh	r0, [r1, #0]
 801d7ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7ee:	bf00      	nop
 801d7f0:	08023e5d 	.word	0x08023e5d
 801d7f4:	08024462 	.word	0x08024462
 801d7f8:	08023ee5 	.word	0x08023ee5

0801d7fc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d800:	ed2d 8b0a 	vpush	{d8-d12}
 801d804:	b093      	sub	sp, #76	; 0x4c
 801d806:	461d      	mov	r5, r3
 801d808:	9210      	str	r2, [sp, #64]	; 0x40
 801d80a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d80c:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 801d810:	9208      	str	r2, [sp, #32]
 801d812:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 801d816:	910b      	str	r1, [sp, #44]	; 0x2c
 801d818:	6859      	ldr	r1, [r3, #4]
 801d81a:	681b      	ldr	r3, [r3, #0]
 801d81c:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 801d820:	9011      	str	r0, [sp, #68]	; 0x44
 801d822:	fb01 2707 	mla	r7, r1, r7, r2
 801d826:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801d82a:	9307      	str	r3, [sp, #28]
 801d82c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d82e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	9309      	str	r3, [sp, #36]	; 0x24
 801d836:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801d83a:	eeb0 aa40 	vmov.f32	s20, s0
 801d83e:	eef0 9a60 	vmov.f32	s19, s1
 801d842:	eeb0 9a41 	vmov.f32	s18, s2
 801d846:	eeb0 8a62 	vmov.f32	s16, s5
 801d84a:	eef0 8a43 	vmov.f32	s17, s6
 801d84e:	eeb0 ca44 	vmov.f32	s24, s8
 801d852:	eef0 ba64 	vmov.f32	s23, s9
 801d856:	eeb0 ba45 	vmov.f32	s22, s10
 801d85a:	930a      	str	r3, [sp, #40]	; 0x28
 801d85c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801d860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d862:	2b00      	cmp	r3, #0
 801d864:	dc03      	bgt.n	801d86e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d868:	2b00      	cmp	r3, #0
 801d86a:	f340 816c 	ble.w	801db46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801d86e:	2d00      	cmp	r5, #0
 801d870:	f340 80b6 	ble.w	801d9e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801d874:	1422      	asrs	r2, r4, #16
 801d876:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d87a:	d428      	bmi.n	801d8ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801d87c:	1c51      	adds	r1, r2, #1
 801d87e:	4588      	cmp	r8, r1
 801d880:	dd27      	ble.n	801d8d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801d882:	2b00      	cmp	r3, #0
 801d884:	db25      	blt.n	801d8d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801d886:	9808      	ldr	r0, [sp, #32]
 801d888:	1c59      	adds	r1, r3, #1
 801d88a:	4288      	cmp	r0, r1
 801d88c:	dd21      	ble.n	801d8d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801d88e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d890:	1e6b      	subs	r3, r5, #1
 801d892:	fb02 4203 	mla	r2, r2, r3, r4
 801d896:	1412      	asrs	r2, r2, #16
 801d898:	d422      	bmi.n	801d8e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d89a:	3201      	adds	r2, #1
 801d89c:	4590      	cmp	r8, r2
 801d89e:	dd1f      	ble.n	801d8e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d8a0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d8a2:	fb02 6303 	mla	r3, r2, r3, r6
 801d8a6:	141b      	asrs	r3, r3, #16
 801d8a8:	d41a      	bmi.n	801d8e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d8aa:	9a08      	ldr	r2, [sp, #32]
 801d8ac:	3301      	adds	r3, #1
 801d8ae:	429a      	cmp	r2, r3
 801d8b0:	dd16      	ble.n	801d8e0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801d8b2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d8b6:	46a9      	mov	r9, r5
 801d8b8:	f1b9 0f00 	cmp.w	r9, #0
 801d8bc:	f300 80e4 	bgt.w	801da88 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801d8c0:	9b07      	ldr	r3, [sp, #28]
 801d8c2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801d8c6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801d8ca:	9307      	str	r3, [sp, #28]
 801d8cc:	e08a      	b.n	801d9e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801d8ce:	1c51      	adds	r1, r2, #1
 801d8d0:	d17d      	bne.n	801d9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801d8d2:	4542      	cmp	r2, r8
 801d8d4:	da7b      	bge.n	801d9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801d8d6:	1c5a      	adds	r2, r3, #1
 801d8d8:	db79      	blt.n	801d9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801d8da:	9a08      	ldr	r2, [sp, #32]
 801d8dc:	4293      	cmp	r3, r2
 801d8de:	da76      	bge.n	801d9ce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801d8e0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801d8e4:	46aa      	mov	sl, r5
 801d8e6:	f1ba 0f00 	cmp.w	sl, #0
 801d8ea:	dde9      	ble.n	801d8c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801d8ec:	1421      	asrs	r1, r4, #16
 801d8ee:	ea4f 4226 	mov.w	r2, r6, asr #16
 801d8f2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801d8f6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d8fa:	f100 80b0 	bmi.w	801da5e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801d8fe:	f101 0c01 	add.w	ip, r1, #1
 801d902:	45e0      	cmp	r8, ip
 801d904:	f340 80ad 	ble.w	801da62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d908:	2a00      	cmp	r2, #0
 801d90a:	f2c0 80aa 	blt.w	801da62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d90e:	9f08      	ldr	r7, [sp, #32]
 801d910:	f102 0c01 	add.w	ip, r2, #1
 801d914:	4567      	cmp	r7, ip
 801d916:	f340 80a4 	ble.w	801da62 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801d91a:	fb02 1208 	mla	r2, r2, r8, r1
 801d91e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d920:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801d924:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801d928:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801d92c:	b138      	cbz	r0, 801d93e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801d92e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d930:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d932:	4472      	add	r2, lr
 801d934:	f83e 7007 	ldrh.w	r7, [lr, r7]
 801d938:	8852      	ldrh	r2, [r2, #2]
 801d93a:	970c      	str	r7, [sp, #48]	; 0x30
 801d93c:	920d      	str	r2, [sp, #52]	; 0x34
 801d93e:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801d942:	fb13 f200 	smulbb	r2, r3, r0
 801d946:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801d94a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801d94e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d952:	10d2      	asrs	r2, r2, #3
 801d954:	ea4e 0c0c 	orr.w	ip, lr, ip
 801d958:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d95c:	f1c0 0e10 	rsb	lr, r0, #16
 801d960:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801d964:	ebae 0e03 	sub.w	lr, lr, r3
 801d968:	ea4b 0101 	orr.w	r1, fp, r1
 801d96c:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801d970:	4359      	muls	r1, r3
 801d972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d974:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801d978:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801d97c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801d980:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801d984:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801d988:	ea4c 0c03 	orr.w	ip, ip, r3
 801d98c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d98e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d990:	041b      	lsls	r3, r3, #16
 801d992:	fb02 ec0c 	mla	ip, r2, ip, lr
 801d996:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801d99a:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801d99e:	ea43 030e 	orr.w	r3, r3, lr
 801d9a2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801d9a6:	fb02 c203 	mla	r2, r2, r3, ip
 801d9aa:	0d53      	lsrs	r3, r2, #21
 801d9ac:	0952      	lsrs	r2, r2, #5
 801d9ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d9b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d9b6:	431a      	orrs	r2, r3
 801d9b8:	f8a9 2000 	strh.w	r2, [r9]
 801d9bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d9be:	441c      	add	r4, r3
 801d9c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d9c2:	f109 0902 	add.w	r9, r9, #2
 801d9c6:	441e      	add	r6, r3
 801d9c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d9cc:	e78b      	b.n	801d8e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801d9ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d9d0:	441c      	add	r4, r3
 801d9d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d9d4:	441e      	add	r6, r3
 801d9d6:	9b07      	ldr	r3, [sp, #28]
 801d9d8:	3302      	adds	r3, #2
 801d9da:	3d01      	subs	r5, #1
 801d9dc:	9307      	str	r3, [sp, #28]
 801d9de:	e746      	b.n	801d86e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801d9e0:	f47f af55 	bne.w	801d88e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801d9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	f340 80ad 	ble.w	801db46 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801d9ec:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801d9f0:	ee79 9aab 	vadd.f32	s19, s19, s23
 801d9f4:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801d9f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d9fa:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801d9fe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801da02:	eef0 6a48 	vmov.f32	s13, s16
 801da06:	ee69 7a27 	vmul.f32	s15, s18, s15
 801da0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da0e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801da12:	ee16 4a90 	vmov	r4, s13
 801da16:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801da1a:	eef0 6a68 	vmov.f32	s13, s17
 801da1e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801da22:	ee18 2a10 	vmov	r2, s16
 801da26:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801da2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801da2e:	ee18 2a90 	vmov	r2, s17
 801da32:	9329      	str	r3, [sp, #164]	; 0xa4
 801da34:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801da36:	fb92 f3f3 	sdiv	r3, r2, r3
 801da3a:	932a      	str	r3, [sp, #168]	; 0xa8
 801da3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da40:	3b01      	subs	r3, #1
 801da42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801da46:	930b      	str	r3, [sp, #44]	; 0x2c
 801da48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801da4a:	ee16 6a90 	vmov	r6, s13
 801da4e:	bf14      	ite	ne
 801da50:	461d      	movne	r5, r3
 801da52:	4615      	moveq	r5, r2
 801da54:	eef0 8a67 	vmov.f32	s17, s15
 801da58:	eeb0 8a47 	vmov.f32	s16, s14
 801da5c:	e700      	b.n	801d860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801da5e:	1c4f      	adds	r7, r1, #1
 801da60:	d1ac      	bne.n	801d9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801da62:	4588      	cmp	r8, r1
 801da64:	ddaa      	ble.n	801d9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801da66:	1c57      	adds	r7, r2, #1
 801da68:	dba8      	blt.n	801d9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801da6a:	9f08      	ldr	r7, [sp, #32]
 801da6c:	4297      	cmp	r7, r2
 801da6e:	dda5      	ble.n	801d9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801da70:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801da74:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801da78:	9700      	str	r7, [sp, #0]
 801da7a:	4643      	mov	r3, r8
 801da7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801da80:	4649      	mov	r1, r9
 801da82:	f7ff fe2f 	bl	801d6e4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801da86:	e799      	b.n	801d9bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801da88:	1422      	asrs	r2, r4, #16
 801da8a:	1431      	asrs	r1, r6, #16
 801da8c:	fb08 2101 	mla	r1, r8, r1, r2
 801da90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da92:	9809      	ldr	r0, [sp, #36]	; 0x24
 801da94:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801da98:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801da9c:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801daa0:	8851      	ldrh	r1, [r2, #2]
 801daa2:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801daa6:	f1be 0f00 	cmp.w	lr, #0
 801daaa:	d006      	beq.n	801daba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801daac:	980a      	ldr	r0, [sp, #40]	; 0x28
 801daae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dab0:	1810      	adds	r0, r2, r0
 801dab2:	5bd2      	ldrh	r2, [r2, r7]
 801dab4:	920e      	str	r2, [sp, #56]	; 0x38
 801dab6:	8842      	ldrh	r2, [r0, #2]
 801dab8:	920f      	str	r2, [sp, #60]	; 0x3c
 801daba:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801dabe:	fb13 f20e 	smulbb	r2, r3, lr
 801dac2:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801dac6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801daca:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801dace:	10d2      	asrs	r2, r2, #3
 801dad0:	ea40 000c 	orr.w	r0, r0, ip
 801dad4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dad8:	f1ce 0c10 	rsb	ip, lr, #16
 801dadc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801dae0:	ebac 0c03 	sub.w	ip, ip, r3
 801dae4:	ea4a 0101 	orr.w	r1, sl, r1
 801dae8:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801daec:	4359      	muls	r1, r3
 801daee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801daf0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801daf4:	fb0c 1c00 	mla	ip, ip, r0, r1
 801daf8:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801dafc:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801db00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db02:	990e      	ldr	r1, [sp, #56]	; 0x38
 801db04:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801db08:	041b      	lsls	r3, r3, #16
 801db0a:	ea4a 0000 	orr.w	r0, sl, r0
 801db0e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801db12:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 801db16:	fb02 c000 	mla	r0, r2, r0, ip
 801db1a:	ea43 0a0a 	orr.w	sl, r3, sl
 801db1e:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801db22:	fb02 000a 	mla	r0, r2, sl, r0
 801db26:	0d43      	lsrs	r3, r0, #21
 801db28:	0940      	lsrs	r0, r0, #5
 801db2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801db2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801db32:	4318      	orrs	r0, r3
 801db34:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801db36:	f82b 0b02 	strh.w	r0, [fp], #2
 801db3a:	441c      	add	r4, r3
 801db3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801db3e:	f109 39ff 	add.w	r9, r9, #4294967295
 801db42:	441e      	add	r6, r3
 801db44:	e6b8      	b.n	801d8b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 801db46:	b013      	add	sp, #76	; 0x4c
 801db48:	ecbd 8b0a 	vpop	{d8-d12}
 801db4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801db50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db54:	8808      	ldrh	r0, [r1, #0]
 801db56:	b085      	sub	sp, #20
 801db58:	1206      	asrs	r6, r0, #8
 801db5a:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801db5e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801db62:	9600      	str	r6, [sp, #0]
 801db64:	10c6      	asrs	r6, r0, #3
 801db66:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801db6a:	9601      	str	r6, [sp, #4]
 801db6c:	00c0      	lsls	r0, r0, #3
 801db6e:	fb04 c603 	mla	r6, r4, r3, ip
 801db72:	b2c0      	uxtb	r0, r0
 801db74:	4691      	mov	r9, r2
 801db76:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801db7a:	9a00      	ldr	r2, [sp, #0]
 801db7c:	9002      	str	r0, [sp, #8]
 801db7e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801db82:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801db86:	9a01      	ldr	r2, [sp, #4]
 801db88:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801db8c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801db90:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801db94:	2c00      	cmp	r4, #0
 801db96:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801db9a:	db3a      	blt.n	801dc12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801db9c:	45a0      	cmp	r8, r4
 801db9e:	dd38      	ble.n	801dc12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801dba0:	f1bc 0f00 	cmp.w	ip, #0
 801dba4:	db33      	blt.n	801dc0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801dba6:	4563      	cmp	r3, ip
 801dba8:	dd31      	ble.n	801dc0e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801dbaa:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801dbae:	f11c 0601 	adds.w	r6, ip, #1
 801dbb2:	d431      	bmi.n	801dc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801dbb4:	42b3      	cmp	r3, r6
 801dbb6:	dd2f      	ble.n	801dc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801dbb8:	b375      	cbz	r5, 801dc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801dbba:	f8de 6004 	ldr.w	r6, [lr, #4]
 801dbbe:	3401      	adds	r4, #1
 801dbc0:	d42e      	bmi.n	801dc20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801dbc2:	45a0      	cmp	r8, r4
 801dbc4:	dd2c      	ble.n	801dc20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801dbc6:	b35f      	cbz	r7, 801dc20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801dbc8:	f1bc 0f00 	cmp.w	ip, #0
 801dbcc:	db26      	blt.n	801dc1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801dbce:	4563      	cmp	r3, ip
 801dbd0:	dd24      	ble.n	801dc1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801dbd2:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801dbd6:	f11c 0c01 	adds.w	ip, ip, #1
 801dbda:	d405      	bmi.n	801dbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801dbdc:	4563      	cmp	r3, ip
 801dbde:	dd03      	ble.n	801dbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801dbe0:	b115      	cbz	r5, 801dbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801dbe2:	3301      	adds	r3, #1
 801dbe4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801dbe8:	2d0f      	cmp	r5, #15
 801dbea:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801dbee:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801dbf2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801dbf6:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801dbfa:	d801      	bhi.n	801dc00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 801dbfc:	2f0f      	cmp	r7, #15
 801dbfe:	d911      	bls.n	801dc24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 801dc00:	4b82      	ldr	r3, [pc, #520]	; (801de0c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 801dc02:	4a83      	ldr	r2, [pc, #524]	; (801de10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 801dc04:	4883      	ldr	r0, [pc, #524]	; (801de14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 801dc06:	f240 3173 	movw	r1, #883	; 0x373
 801dc0a:	f002 f9dd 	bl	801ffc8 <__assert_func>
 801dc0e:	4602      	mov	r2, r0
 801dc10:	e7cd      	b.n	801dbae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801dc12:	4606      	mov	r6, r0
 801dc14:	4602      	mov	r2, r0
 801dc16:	e7d2      	b.n	801dbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801dc18:	4606      	mov	r6, r0
 801dc1a:	e7d0      	b.n	801dbbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801dc1c:	4604      	mov	r4, r0
 801dc1e:	e7da      	b.n	801dbd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 801dc20:	4604      	mov	r4, r0
 801dc22:	e7e1      	b.n	801dbe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801dc24:	b2ab      	uxth	r3, r5
 801dc26:	b2bf      	uxth	r7, r7
 801dc28:	fb03 fe07 	mul.w	lr, r3, r7
 801dc2c:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801dc30:	011b      	lsls	r3, r3, #4
 801dc32:	eba3 0c0e 	sub.w	ip, r3, lr
 801dc36:	b2bf      	uxth	r7, r7
 801dc38:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801dc3c:	fa1f fc8c 	uxth.w	ip, ip
 801dc40:	1bed      	subs	r5, r5, r7
 801dc42:	b2ad      	uxth	r5, r5
 801dc44:	fb0c f30a 	mul.w	r3, ip, sl
 801dc48:	fb05 330b 	mla	r3, r5, fp, r3
 801dc4c:	fb07 3309 	mla	r3, r7, r9, r3
 801dc50:	fb0e 3308 	mla	r3, lr, r8, r3
 801dc54:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dc58:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801dc5c:	9303      	str	r3, [sp, #12]
 801dc5e:	d018      	beq.n	801dc92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 801dc60:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801dc64:	fb0b f303 	mul.w	r3, fp, r3
 801dc68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dc6c:	fb0b fb02 	mul.w	fp, fp, r2
 801dc70:	0a1a      	lsrs	r2, r3, #8
 801dc72:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dc76:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801dc7a:	441a      	add	r2, r3
 801dc7c:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801dc80:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801dc84:	0a12      	lsrs	r2, r2, #8
 801dc86:	0a1b      	lsrs	r3, r3, #8
 801dc88:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801dc8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dc90:	431a      	orrs	r2, r3
 801dc92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801dc96:	d019      	beq.n	801dccc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 801dc98:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801dc9c:	fb0a fb0b 	mul.w	fp, sl, fp
 801dca0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dca4:	fb0a fa06 	mul.w	sl, sl, r6
 801dca8:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801dcac:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dcb0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801dcb4:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801dcb8:	445e      	add	r6, fp
 801dcba:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801dcbe:	0a36      	lsrs	r6, r6, #8
 801dcc0:	0a1b      	lsrs	r3, r3, #8
 801dcc2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dcc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dcca:	431e      	orrs	r6, r3
 801dccc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dcd0:	d019      	beq.n	801dd06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 801dcd2:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801dcd6:	fb09 fa0a 	mul.w	sl, r9, sl
 801dcda:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dcde:	fb09 f904 	mul.w	r9, r9, r4
 801dce2:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801dce6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dcea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801dcee:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801dcf2:	4454      	add	r4, sl
 801dcf4:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801dcf8:	0a24      	lsrs	r4, r4, #8
 801dcfa:	0a1b      	lsrs	r3, r3, #8
 801dcfc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dd00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd04:	431c      	orrs	r4, r3
 801dd06:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dd0a:	d019      	beq.n	801dd40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 801dd0c:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801dd10:	fb08 f909 	mul.w	r9, r8, r9
 801dd14:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dd18:	fb08 f800 	mul.w	r8, r8, r0
 801dd1c:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801dd20:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dd24:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801dd28:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801dd2c:	4448      	add	r0, r9
 801dd2e:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801dd32:	0a00      	lsrs	r0, r0, #8
 801dd34:	0a1b      	lsrs	r3, r3, #8
 801dd36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dd3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dd3e:	4318      	orrs	r0, r3
 801dd40:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801dd44:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801dd48:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801dd4c:	fb0c f808 	mul.w	r8, ip, r8
 801dd50:	fb0c f606 	mul.w	r6, ip, r6
 801dd54:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dd58:	fb05 6202 	mla	r2, r5, r2, r6
 801dd5c:	fb05 8803 	mla	r8, r5, r3, r8
 801dd60:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801dd64:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dd68:	fb07 8803 	mla	r8, r7, r3, r8
 801dd6c:	fb07 2704 	mla	r7, r7, r4, r2
 801dd70:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801dd74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dd78:	fb0e 8303 	mla	r3, lr, r3, r8
 801dd7c:	fb0e 7e00 	mla	lr, lr, r0, r7
 801dd80:	0a1b      	lsrs	r3, r3, #8
 801dd82:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dd8a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801dd8e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801dd92:	ea43 0e0e 	orr.w	lr, r3, lr
 801dd96:	9b03      	ldr	r3, [sp, #12]
 801dd98:	b2a4      	uxth	r4, r4
 801dd9a:	4363      	muls	r3, r4
 801dd9c:	1c5a      	adds	r2, r3, #1
 801dd9e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dda2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801dda6:	9b00      	ldr	r3, [sp, #0]
 801dda8:	b2d2      	uxtb	r2, r2
 801ddaa:	ea4f 451e 	mov.w	r5, lr, lsr #16
 801ddae:	fb13 f302 	smulbb	r3, r3, r2
 801ddb2:	fb05 3304 	mla	r3, r5, r4, r3
 801ddb6:	b29d      	uxth	r5, r3
 801ddb8:	9b01      	ldr	r3, [sp, #4]
 801ddba:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801ddbe:	fb13 f302 	smulbb	r3, r3, r2
 801ddc2:	fb00 3004 	mla	r0, r0, r4, r3
 801ddc6:	9b02      	ldr	r3, [sp, #8]
 801ddc8:	fa5f fe8e 	uxtb.w	lr, lr
 801ddcc:	fb13 f202 	smulbb	r2, r3, r2
 801ddd0:	fb0e 2e04 	mla	lr, lr, r4, r2
 801ddd4:	fa1f fe8e 	uxth.w	lr, lr
 801ddd8:	b280      	uxth	r0, r0
 801ddda:	f10e 0201 	add.w	r2, lr, #1
 801ddde:	1c6b      	adds	r3, r5, #1
 801dde0:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801dde4:	1c42      	adds	r2, r0, #1
 801dde6:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801ddea:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801ddee:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ddf2:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ddf6:	0952      	lsrs	r2, r2, #5
 801ddf8:	ea43 030e 	orr.w	r3, r3, lr
 801ddfc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801de00:	4313      	orrs	r3, r2
 801de02:	800b      	strh	r3, [r1, #0]
 801de04:	b005      	add	sp, #20
 801de06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de0a:	bf00      	nop
 801de0c:	08023e5d 	.word	0x08023e5d
 801de10:	080243b9 	.word	0x080243b9
 801de14:	08023ee5 	.word	0x08023ee5

0801de18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801de18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de1c:	ed2d 8b08 	vpush	{d8-d11}
 801de20:	b099      	sub	sp, #100	; 0x64
 801de22:	eeb0 aa40 	vmov.f32	s20, s0
 801de26:	9306      	str	r3, [sp, #24]
 801de28:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801de2c:	9307      	str	r3, [sp, #28]
 801de2e:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801de32:	9216      	str	r2, [sp, #88]	; 0x58
 801de34:	9310      	str	r3, [sp, #64]	; 0x40
 801de36:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801de38:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801de3c:	9113      	str	r1, [sp, #76]	; 0x4c
 801de3e:	9315      	str	r3, [sp, #84]	; 0x54
 801de40:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801de44:	9017      	str	r0, [sp, #92]	; 0x5c
 801de46:	6850      	ldr	r0, [r2, #4]
 801de48:	6812      	ldr	r2, [r2, #0]
 801de4a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801de4c:	fb00 1303 	mla	r3, r0, r3, r1
 801de50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801de54:	930a      	str	r3, [sp, #40]	; 0x28
 801de56:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	9312      	str	r3, [sp, #72]	; 0x48
 801de5c:	9b07      	ldr	r3, [sp, #28]
 801de5e:	009b      	lsls	r3, r3, #2
 801de60:	eef0 9a60 	vmov.f32	s19, s1
 801de64:	eeb0 9a41 	vmov.f32	s18, s2
 801de68:	eeb0 8a62 	vmov.f32	s16, s5
 801de6c:	eef0 8a43 	vmov.f32	s17, s6
 801de70:	eef0 ba44 	vmov.f32	s23, s8
 801de74:	eeb0 ba64 	vmov.f32	s22, s9
 801de78:	eef0 aa45 	vmov.f32	s21, s10
 801de7c:	930e      	str	r3, [sp, #56]	; 0x38
 801de7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de80:	2b00      	cmp	r3, #0
 801de82:	dc03      	bgt.n	801de8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801de84:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801de86:	2b00      	cmp	r3, #0
 801de88:	f340 8352 	ble.w	801e530 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801de8c:	9b06      	ldr	r3, [sp, #24]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	f340 81a8 	ble.w	801e1e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 801de94:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801de96:	1412      	asrs	r2, r2, #16
 801de98:	ea4f 4324 	mov.w	r3, r4, asr #16
 801de9c:	d430      	bmi.n	801df00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801de9e:	9807      	ldr	r0, [sp, #28]
 801dea0:	1c51      	adds	r1, r2, #1
 801dea2:	4288      	cmp	r0, r1
 801dea4:	dd2f      	ble.n	801df06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	db2d      	blt.n	801df06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801deaa:	9810      	ldr	r0, [sp, #64]	; 0x40
 801deac:	1c59      	adds	r1, r3, #1
 801deae:	4288      	cmp	r0, r1
 801deb0:	dd29      	ble.n	801df06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801deb2:	9b06      	ldr	r3, [sp, #24]
 801deb4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801deb6:	992b      	ldr	r1, [sp, #172]	; 0xac
 801deb8:	3b01      	subs	r3, #1
 801deba:	fb02 1203 	mla	r2, r2, r3, r1
 801debe:	1412      	asrs	r2, r2, #16
 801dec0:	d42c      	bmi.n	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801dec2:	9907      	ldr	r1, [sp, #28]
 801dec4:	3201      	adds	r2, #1
 801dec6:	4291      	cmp	r1, r2
 801dec8:	dd28      	ble.n	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801deca:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801decc:	fb02 4303 	mla	r3, r2, r3, r4
 801ded0:	141b      	asrs	r3, r3, #16
 801ded2:	d423      	bmi.n	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801ded4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ded6:	3301      	adds	r3, #1
 801ded8:	429a      	cmp	r2, r3
 801deda:	dd1f      	ble.n	801df1c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801dedc:	9b06      	ldr	r3, [sp, #24]
 801dede:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801dee2:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801dee6:	9311      	str	r3, [sp, #68]	; 0x44
 801dee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deea:	2b00      	cmp	r3, #0
 801deec:	f300 81e3 	bgt.w	801e2b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 801def0:	9b06      	ldr	r3, [sp, #24]
 801def2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801def6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801def8:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801defc:	930a      	str	r3, [sp, #40]	; 0x28
 801defe:	e173      	b.n	801e1e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801df00:	1c51      	adds	r1, r2, #1
 801df02:	f040 8162 	bne.w	801e1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801df06:	9907      	ldr	r1, [sp, #28]
 801df08:	428a      	cmp	r2, r1
 801df0a:	f280 815e 	bge.w	801e1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801df0e:	1c5f      	adds	r7, r3, #1
 801df10:	f2c0 815b 	blt.w	801e1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801df14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801df16:	4293      	cmp	r3, r2
 801df18:	f280 8157 	bge.w	801e1ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801df1c:	9b06      	ldr	r3, [sp, #24]
 801df1e:	9314      	str	r3, [sp, #80]	; 0x50
 801df20:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801df24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df26:	9311      	str	r3, [sp, #68]	; 0x44
 801df28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	dde0      	ble.n	801def0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801df2e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801df30:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801df34:	1412      	asrs	r2, r2, #16
 801df36:	ea4f 4324 	mov.w	r3, r4, asr #16
 801df3a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801df3e:	f100 81a1 	bmi.w	801e284 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 801df42:	9e07      	ldr	r6, [sp, #28]
 801df44:	1c55      	adds	r5, r2, #1
 801df46:	42ae      	cmp	r6, r5
 801df48:	f340 819e 	ble.w	801e288 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	f2c0 819b 	blt.w	801e288 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801df52:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801df54:	1c5d      	adds	r5, r3, #1
 801df56:	42ae      	cmp	r6, r5
 801df58:	f340 8196 	ble.w	801e288 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801df5c:	9d07      	ldr	r5, [sp, #28]
 801df5e:	fb03 2305 	mla	r3, r3, r5, r2
 801df62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801df64:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801df68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801df6c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801df70:	2800      	cmp	r0, #0
 801df72:	f000 8178 	beq.w	801e266 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801df76:	686a      	ldr	r2, [r5, #4]
 801df78:	920b      	str	r2, [sp, #44]	; 0x2c
 801df7a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801df7e:	2900      	cmp	r1, #0
 801df80:	f000 817a 	beq.w	801e278 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801df84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801df86:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801df88:	18aa      	adds	r2, r5, r2
 801df8a:	59ad      	ldr	r5, [r5, r6]
 801df8c:	6852      	ldr	r2, [r2, #4]
 801df8e:	9508      	str	r5, [sp, #32]
 801df90:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801df94:	920c      	str	r2, [sp, #48]	; 0x30
 801df96:	0e15      	lsrs	r5, r2, #24
 801df98:	b280      	uxth	r0, r0
 801df9a:	b289      	uxth	r1, r1
 801df9c:	fb00 fb01 	mul.w	fp, r0, r1
 801dfa0:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801dfa4:	0100      	lsls	r0, r0, #4
 801dfa6:	eba0 090b 	sub.w	r9, r0, fp
 801dfaa:	b289      	uxth	r1, r1
 801dfac:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801dfb0:	fa1f f989 	uxth.w	r9, r9
 801dfb4:	1a52      	subs	r2, r2, r1
 801dfb6:	b292      	uxth	r2, r2
 801dfb8:	fb09 f008 	mul.w	r0, r9, r8
 801dfbc:	fb02 000c 	mla	r0, r2, ip, r0
 801dfc0:	fb01 000a 	mla	r0, r1, sl, r0
 801dfc4:	fb0b 0005 	mla	r0, fp, r5, r0
 801dfc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801dfcc:	2800      	cmp	r0, #0
 801dfce:	f000 80ef 	beq.w	801e1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801dfd2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801dfd6:	d01b      	beq.n	801e010 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 801dfd8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801dfdc:	fb0c fe0e 	mul.w	lr, ip, lr
 801dfe0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dfe4:	fb0c fc03 	mul.w	ip, ip, r3
 801dfe8:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801dfec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dff0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801dff4:	4473      	add	r3, lr
 801dff6:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801dffa:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801dffe:	0a1b      	lsrs	r3, r3, #8
 801e000:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e004:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e008:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e00c:	ea43 030e 	orr.w	r3, r3, lr
 801e010:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e014:	d01e      	beq.n	801e054 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801e016:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e018:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e01c:	fb08 fc0c 	mul.w	ip, r8, ip
 801e020:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 801e024:	fb08 f80e 	mul.w	r8, r8, lr
 801e028:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e02c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e030:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e034:	44e6      	add	lr, ip
 801e036:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801e03a:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801e03e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e042:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e046:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e04a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e04e:	ea4e 0608 	orr.w	r6, lr, r8
 801e052:	960b      	str	r6, [sp, #44]	; 0x2c
 801e054:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e058:	d01e      	beq.n	801e098 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801e05a:	9e08      	ldr	r6, [sp, #32]
 801e05c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e060:	fb0a f808 	mul.w	r8, sl, r8
 801e064:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801e068:	fb0a fa0c 	mul.w	sl, sl, ip
 801e06c:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e070:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e074:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e078:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e07c:	44c6      	add	lr, r8
 801e07e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e082:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e086:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e08a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e08e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e092:	ea4e 060a 	orr.w	r6, lr, sl
 801e096:	9608      	str	r6, [sp, #32]
 801e098:	2dff      	cmp	r5, #255	; 0xff
 801e09a:	d01d      	beq.n	801e0d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801e09c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e09e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e0a2:	fb05 f808 	mul.w	r8, r5, r8
 801e0a6:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801e0aa:	fb05 f50c 	mul.w	r5, r5, ip
 801e0ae:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801e0b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e0b6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801e0ba:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801e0be:	44c6      	add	lr, r8
 801e0c0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801e0c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0c8:	0a2d      	lsrs	r5, r5, #8
 801e0ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e0ce:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e0d2:	ea4e 0505 	orr.w	r5, lr, r5
 801e0d6:	950c      	str	r5, [sp, #48]	; 0x30
 801e0d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801e0da:	9e08      	ldr	r6, [sp, #32]
 801e0dc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e0e0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e0e4:	fb09 f505 	mul.w	r5, r9, r5
 801e0e8:	fb02 550c 	mla	r5, r2, ip, r5
 801e0ec:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e0f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e0f2:	fb01 550c 	mla	r5, r1, ip, r5
 801e0f6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e0fa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e0fc:	fb0b 550c 	mla	r5, fp, ip, r5
 801e100:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801e104:	fb09 f90c 	mul.w	r9, r9, ip
 801e108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e10c:	fb02 9303 	mla	r3, r2, r3, r9
 801e110:	9a08      	ldr	r2, [sp, #32]
 801e112:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801e116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e118:	fb01 330e 	mla	r3, r1, lr, r3
 801e11c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e120:	fb0b 3b01 	mla	fp, fp, r1, r3
 801e124:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e126:	0a2d      	lsrs	r5, r5, #8
 801e128:	f8b3 c000 	ldrh.w	ip, [r3]
 801e12c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801e130:	fb00 f307 	mul.w	r3, r0, r7
 801e134:	1c58      	adds	r0, r3, #1
 801e136:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e13a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801e13e:	ea45 050b 	orr.w	r5, r5, fp
 801e142:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e146:	0c29      	lsrs	r1, r5, #16
 801e148:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e14c:	ea4f 232c 	mov.w	r3, ip, asr #8
 801e150:	b2c0      	uxtb	r0, r0
 801e152:	fb11 f107 	smulbb	r1, r1, r7
 801e156:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e15a:	fb03 1300 	mla	r3, r3, r0, r1
 801e15e:	b299      	uxth	r1, r3
 801e160:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e164:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801e168:	fb13 f307 	smulbb	r3, r3, r7
 801e16c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e170:	fb02 3200 	mla	r2, r2, r0, r3
 801e174:	b2ed      	uxtb	r5, r5
 801e176:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801e17a:	b2db      	uxtb	r3, r3
 801e17c:	fb15 f507 	smulbb	r5, r5, r7
 801e180:	fb03 5500 	mla	r5, r3, r0, r5
 801e184:	b292      	uxth	r2, r2
 801e186:	b2ad      	uxth	r5, r5
 801e188:	1c4b      	adds	r3, r1, #1
 801e18a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e18e:	1c68      	adds	r0, r5, #1
 801e190:	1c51      	adds	r1, r2, #1
 801e192:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801e196:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e19a:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e19e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e1a2:	0952      	lsrs	r2, r2, #5
 801e1a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e1a8:	432b      	orrs	r3, r5
 801e1aa:	4313      	orrs	r3, r2
 801e1ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e1ae:	8013      	strh	r3, [r2, #0]
 801e1b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e1b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e1b4:	3302      	adds	r3, #2
 801e1b6:	9311      	str	r3, [sp, #68]	; 0x44
 801e1b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e1ba:	4413      	add	r3, r2
 801e1bc:	932b      	str	r3, [sp, #172]	; 0xac
 801e1be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e1c0:	441c      	add	r4, r3
 801e1c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1c4:	3b01      	subs	r3, #1
 801e1c6:	9314      	str	r3, [sp, #80]	; 0x50
 801e1c8:	e6ae      	b.n	801df28 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801e1ca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e1cc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e1ce:	4413      	add	r3, r2
 801e1d0:	932b      	str	r3, [sp, #172]	; 0xac
 801e1d2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e1d4:	441c      	add	r4, r3
 801e1d6:	9b06      	ldr	r3, [sp, #24]
 801e1d8:	3b01      	subs	r3, #1
 801e1da:	9306      	str	r3, [sp, #24]
 801e1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e1de:	3302      	adds	r3, #2
 801e1e0:	930a      	str	r3, [sp, #40]	; 0x28
 801e1e2:	e653      	b.n	801de8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801e1e4:	f47f ae65 	bne.w	801deb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801e1e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	f340 81a0 	ble.w	801e530 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801e1f0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801e1f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e1f8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801e1fc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e1fe:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801e202:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801e206:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801e20a:	eef0 6a48 	vmov.f32	s13, s16
 801e20e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801e212:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e216:	ee37 8a48 	vsub.f32	s16, s14, s16
 801e21a:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801e21e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801e222:	eef0 6a68 	vmov.f32	s13, s17
 801e226:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801e22a:	ee18 2a10 	vmov	r2, s16
 801e22e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801e232:	fb92 f3f3 	sdiv	r3, r2, r3
 801e236:	ee18 2a90 	vmov	r2, s17
 801e23a:	932d      	str	r3, [sp, #180]	; 0xb4
 801e23c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e23e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e242:	932e      	str	r3, [sp, #184]	; 0xb8
 801e244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e246:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801e248:	3b01      	subs	r3, #1
 801e24a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e24e:	9313      	str	r3, [sp, #76]	; 0x4c
 801e250:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801e252:	bf08      	it	eq
 801e254:	4613      	moveq	r3, r2
 801e256:	ee16 4a90 	vmov	r4, s13
 801e25a:	9306      	str	r3, [sp, #24]
 801e25c:	eef0 8a67 	vmov.f32	s17, s15
 801e260:	eeb0 8a47 	vmov.f32	s16, s14
 801e264:	e60b      	b.n	801de7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801e266:	b151      	cbz	r1, 801e27e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e26a:	58aa      	ldr	r2, [r5, r2]
 801e26c:	9208      	str	r2, [sp, #32]
 801e26e:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801e272:	25ff      	movs	r5, #255	; 0xff
 801e274:	46a8      	mov	r8, r5
 801e276:	e68f      	b.n	801df98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801e278:	25ff      	movs	r5, #255	; 0xff
 801e27a:	46aa      	mov	sl, r5
 801e27c:	e68c      	b.n	801df98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801e27e:	25ff      	movs	r5, #255	; 0xff
 801e280:	46aa      	mov	sl, r5
 801e282:	e7f7      	b.n	801e274 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801e284:	1c56      	adds	r6, r2, #1
 801e286:	d193      	bne.n	801e1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801e288:	9d07      	ldr	r5, [sp, #28]
 801e28a:	4295      	cmp	r5, r2
 801e28c:	dd90      	ble.n	801e1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801e28e:	1c5d      	adds	r5, r3, #1
 801e290:	db8e      	blt.n	801e1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801e292:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801e294:	429d      	cmp	r5, r3
 801e296:	dd8b      	ble.n	801e1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801e298:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e29a:	9201      	str	r2, [sp, #4]
 801e29c:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801e2a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2a2:	9300      	str	r3, [sp, #0]
 801e2a4:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801e2a8:	9b07      	ldr	r3, [sp, #28]
 801e2aa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e2ac:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 801e2b0:	f7ff fc4e 	bl	801db50 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801e2b4:	e77c      	b.n	801e1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801e2b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e2b8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e2ba:	9d07      	ldr	r5, [sp, #28]
 801e2bc:	1412      	asrs	r2, r2, #16
 801e2be:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e2c2:	1423      	asrs	r3, r4, #16
 801e2c4:	fb05 2303 	mla	r3, r5, r3, r2
 801e2c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e2ca:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801e2ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e2d2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801e2d6:	0e1e      	lsrs	r6, r3, #24
 801e2d8:	2900      	cmp	r1, #0
 801e2da:	f000 811a 	beq.w	801e512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 801e2de:	686a      	ldr	r2, [r5, #4]
 801e2e0:	920d      	str	r2, [sp, #52]	; 0x34
 801e2e2:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801e2e6:	2800      	cmp	r0, #0
 801e2e8:	f000 811c 	beq.w	801e524 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 801e2ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e2ee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801e2f0:	18aa      	adds	r2, r5, r2
 801e2f2:	59ed      	ldr	r5, [r5, r7]
 801e2f4:	6852      	ldr	r2, [r2, #4]
 801e2f6:	9509      	str	r5, [sp, #36]	; 0x24
 801e2f8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e2fc:	920f      	str	r2, [sp, #60]	; 0x3c
 801e2fe:	0e15      	lsrs	r5, r2, #24
 801e300:	b289      	uxth	r1, r1
 801e302:	b280      	uxth	r0, r0
 801e304:	fb01 f900 	mul.w	r9, r1, r0
 801e308:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e30c:	0109      	lsls	r1, r1, #4
 801e30e:	eba1 0e09 	sub.w	lr, r1, r9
 801e312:	b280      	uxth	r0, r0
 801e314:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801e318:	fa1f fe8e 	uxth.w	lr, lr
 801e31c:	1a12      	subs	r2, r2, r0
 801e31e:	b292      	uxth	r2, r2
 801e320:	fb0e f10c 	mul.w	r1, lr, ip
 801e324:	fb02 1106 	mla	r1, r2, r6, r1
 801e328:	fb00 1108 	mla	r1, r0, r8, r1
 801e32c:	fb09 1105 	mla	r1, r9, r5, r1
 801e330:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e334:	2900      	cmp	r1, #0
 801e336:	f000 80e0 	beq.w	801e4fa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 801e33a:	2eff      	cmp	r6, #255	; 0xff
 801e33c:	d016      	beq.n	801e36c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 801e33e:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801e342:	4377      	muls	r7, r6
 801e344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e348:	435e      	muls	r6, r3
 801e34a:	0a3b      	lsrs	r3, r7, #8
 801e34c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e350:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e354:	443b      	add	r3, r7
 801e356:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801e35a:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801e35e:	0a1b      	lsrs	r3, r3, #8
 801e360:	0a3f      	lsrs	r7, r7, #8
 801e362:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e366:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e36a:	433b      	orrs	r3, r7
 801e36c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e370:	d01d      	beq.n	801e3ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801e372:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e374:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801e376:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e37a:	fb0c f606 	mul.w	r6, ip, r6
 801e37e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e382:	fb0c fc07 	mul.w	ip, ip, r7
 801e386:	0a37      	lsrs	r7, r6, #8
 801e388:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e38c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801e390:	4437      	add	r7, r6
 801e392:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801e396:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801e39a:	0a3f      	lsrs	r7, r7, #8
 801e39c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e3a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e3a4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e3a8:	ea47 060c 	orr.w	r6, r7, ip
 801e3ac:	960d      	str	r6, [sp, #52]	; 0x34
 801e3ae:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e3b2:	d01d      	beq.n	801e3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 801e3b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e3b6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e3ba:	fb08 fc0c 	mul.w	ip, r8, ip
 801e3be:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e3c2:	fb08 f806 	mul.w	r8, r8, r6
 801e3c6:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e3ca:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801e3ce:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e3d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e3d6:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801e3da:	4467      	add	r7, ip
 801e3dc:	0a3f      	lsrs	r7, r7, #8
 801e3de:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801e3e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e3e6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801e3ea:	ea47 0608 	orr.w	r6, r7, r8
 801e3ee:	9609      	str	r6, [sp, #36]	; 0x24
 801e3f0:	2dff      	cmp	r5, #255	; 0xff
 801e3f2:	d01a      	beq.n	801e42a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 801e3f4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e3f6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801e3fa:	fb05 fc0c 	mul.w	ip, r5, ip
 801e3fe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e402:	4375      	muls	r5, r6
 801e404:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801e408:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e40c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e410:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801e414:	4467      	add	r7, ip
 801e416:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e41a:	0a3f      	lsrs	r7, r7, #8
 801e41c:	0a2d      	lsrs	r5, r5, #8
 801e41e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e422:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e426:	433d      	orrs	r5, r7
 801e428:	950f      	str	r5, [sp, #60]	; 0x3c
 801e42a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801e42c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e430:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801e434:	fb0e f505 	mul.w	r5, lr, r5
 801e438:	fb02 5506 	mla	r5, r2, r6, r5
 801e43c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801e43e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e442:	fb00 5506 	mla	r5, r0, r6, r5
 801e446:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e448:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e44c:	fb09 5506 	mla	r5, r9, r6, r5
 801e450:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801e452:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e456:	fb0e fe06 	mul.w	lr, lr, r6
 801e45a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e45e:	fb02 e303 	mla	r3, r2, r3, lr
 801e462:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e464:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801e468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e46a:	fb00 3307 	mla	r3, r0, r7, r3
 801e46e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e472:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e476:	fb01 f10b 	mul.w	r1, r1, fp
 801e47a:	0a2d      	lsrs	r5, r5, #8
 801e47c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e480:	f8ba 0000 	ldrh.w	r0, [sl]
 801e484:	1c4b      	adds	r3, r1, #1
 801e486:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e48a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e48e:	ea45 050c 	orr.w	r5, r5, ip
 801e492:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e496:	1202      	asrs	r2, r0, #8
 801e498:	0c2b      	lsrs	r3, r5, #16
 801e49a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e49e:	b2c9      	uxtb	r1, r1
 801e4a0:	fb13 f30b 	smulbb	r3, r3, fp
 801e4a4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e4a8:	fb02 3201 	mla	r2, r2, r1, r3
 801e4ac:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801e4b0:	10c3      	asrs	r3, r0, #3
 801e4b2:	b2ed      	uxtb	r5, r5
 801e4b4:	00c0      	lsls	r0, r0, #3
 801e4b6:	b2c0      	uxtb	r0, r0
 801e4b8:	fb15 f50b 	smulbb	r5, r5, fp
 801e4bc:	fb00 5001 	mla	r0, r0, r1, r5
 801e4c0:	b292      	uxth	r2, r2
 801e4c2:	fb16 f60b 	smulbb	r6, r6, fp
 801e4c6:	b280      	uxth	r0, r0
 801e4c8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e4cc:	fb03 6301 	mla	r3, r3, r1, r6
 801e4d0:	1c51      	adds	r1, r2, #1
 801e4d2:	1c46      	adds	r6, r0, #1
 801e4d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e4d8:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801e4dc:	b29b      	uxth	r3, r3
 801e4de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801e4e2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801e4e6:	4332      	orrs	r2, r6
 801e4e8:	1c5e      	adds	r6, r3, #1
 801e4ea:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801e4ee:	095b      	lsrs	r3, r3, #5
 801e4f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e4f4:	431a      	orrs	r2, r3
 801e4f6:	f8aa 2000 	strh.w	r2, [sl]
 801e4fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e4fc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e4fe:	4413      	add	r3, r2
 801e500:	932b      	str	r3, [sp, #172]	; 0xac
 801e502:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801e504:	441c      	add	r4, r3
 801e506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e508:	3b01      	subs	r3, #1
 801e50a:	f10a 0a02 	add.w	sl, sl, #2
 801e50e:	9311      	str	r3, [sp, #68]	; 0x44
 801e510:	e4ea      	b.n	801dee8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801e512:	b150      	cbz	r0, 801e52a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 801e514:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e516:	58aa      	ldr	r2, [r5, r2]
 801e518:	9209      	str	r2, [sp, #36]	; 0x24
 801e51a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801e51e:	25ff      	movs	r5, #255	; 0xff
 801e520:	46ac      	mov	ip, r5
 801e522:	e6ed      	b.n	801e300 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801e524:	25ff      	movs	r5, #255	; 0xff
 801e526:	46a8      	mov	r8, r5
 801e528:	e6ea      	b.n	801e300 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801e52a:	25ff      	movs	r5, #255	; 0xff
 801e52c:	46a8      	mov	r8, r5
 801e52e:	e7f7      	b.n	801e520 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801e530:	b019      	add	sp, #100	; 0x64
 801e532:	ecbd 8b08 	vpop	{d8-d11}
 801e536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e53c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801e53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e540:	8808      	ldrh	r0, [r1, #0]
 801e542:	b085      	sub	sp, #20
 801e544:	1206      	asrs	r6, r0, #8
 801e546:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801e54a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e54e:	9600      	str	r6, [sp, #0]
 801e550:	10c6      	asrs	r6, r0, #3
 801e552:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e556:	9601      	str	r6, [sp, #4]
 801e558:	00c0      	lsls	r0, r0, #3
 801e55a:	fb04 c603 	mla	r6, r4, r3, ip
 801e55e:	b2c0      	uxtb	r0, r0
 801e560:	4691      	mov	r9, r2
 801e562:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801e566:	9a00      	ldr	r2, [sp, #0]
 801e568:	9002      	str	r0, [sp, #8]
 801e56a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801e56e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801e572:	9a01      	ldr	r2, [sp, #4]
 801e574:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801e578:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801e57c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801e580:	2c00      	cmp	r4, #0
 801e582:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801e586:	db3a      	blt.n	801e5fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801e588:	45a0      	cmp	r8, r4
 801e58a:	dd38      	ble.n	801e5fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801e58c:	f1bc 0f00 	cmp.w	ip, #0
 801e590:	db33      	blt.n	801e5fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801e592:	4563      	cmp	r3, ip
 801e594:	dd31      	ble.n	801e5fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801e596:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801e59a:	f11c 0601 	adds.w	r6, ip, #1
 801e59e:	d431      	bmi.n	801e604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801e5a0:	42b3      	cmp	r3, r6
 801e5a2:	dd2f      	ble.n	801e604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801e5a4:	b375      	cbz	r5, 801e604 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801e5a6:	f8de 6004 	ldr.w	r6, [lr, #4]
 801e5aa:	3401      	adds	r4, #1
 801e5ac:	d42e      	bmi.n	801e60c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801e5ae:	45a0      	cmp	r8, r4
 801e5b0:	dd2c      	ble.n	801e60c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801e5b2:	b35f      	cbz	r7, 801e60c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801e5b4:	f1bc 0f00 	cmp.w	ip, #0
 801e5b8:	db26      	blt.n	801e608 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801e5ba:	4563      	cmp	r3, ip
 801e5bc:	dd24      	ble.n	801e608 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801e5be:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801e5c2:	f11c 0c01 	adds.w	ip, ip, #1
 801e5c6:	d405      	bmi.n	801e5d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801e5c8:	4563      	cmp	r3, ip
 801e5ca:	dd03      	ble.n	801e5d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801e5cc:	b115      	cbz	r5, 801e5d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801e5ce:	3301      	adds	r3, #1
 801e5d0:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801e5d4:	2d0f      	cmp	r5, #15
 801e5d6:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801e5da:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e5de:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801e5e2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801e5e6:	d801      	bhi.n	801e5ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 801e5e8:	2f0f      	cmp	r7, #15
 801e5ea:	d911      	bls.n	801e610 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 801e5ec:	4b7b      	ldr	r3, [pc, #492]	; (801e7dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 801e5ee:	4a7c      	ldr	r2, [pc, #496]	; (801e7e0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 801e5f0:	487c      	ldr	r0, [pc, #496]	; (801e7e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 801e5f2:	f240 3173 	movw	r1, #883	; 0x373
 801e5f6:	f001 fce7 	bl	801ffc8 <__assert_func>
 801e5fa:	4602      	mov	r2, r0
 801e5fc:	e7cd      	b.n	801e59a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801e5fe:	4606      	mov	r6, r0
 801e600:	4602      	mov	r2, r0
 801e602:	e7d2      	b.n	801e5aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801e604:	4606      	mov	r6, r0
 801e606:	e7d0      	b.n	801e5aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801e608:	4604      	mov	r4, r0
 801e60a:	e7da      	b.n	801e5c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 801e60c:	4604      	mov	r4, r0
 801e60e:	e7e1      	b.n	801e5d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801e610:	b2ab      	uxth	r3, r5
 801e612:	b2bf      	uxth	r7, r7
 801e614:	fb03 fe07 	mul.w	lr, r3, r7
 801e618:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801e61c:	011b      	lsls	r3, r3, #4
 801e61e:	eba3 0c0e 	sub.w	ip, r3, lr
 801e622:	b2bf      	uxth	r7, r7
 801e624:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801e628:	fa1f fc8c 	uxth.w	ip, ip
 801e62c:	1bed      	subs	r5, r5, r7
 801e62e:	b2ad      	uxth	r5, r5
 801e630:	fb0c f30a 	mul.w	r3, ip, sl
 801e634:	fb05 330b 	mla	r3, r5, fp, r3
 801e638:	fb07 3309 	mla	r3, r7, r9, r3
 801e63c:	fb0e 3308 	mla	r3, lr, r8, r3
 801e640:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e644:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801e648:	9303      	str	r3, [sp, #12]
 801e64a:	d018      	beq.n	801e67e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 801e64c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e650:	fb0b f303 	mul.w	r3, fp, r3
 801e654:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e658:	fb0b fb02 	mul.w	fp, fp, r2
 801e65c:	0a1a      	lsrs	r2, r3, #8
 801e65e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e662:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e666:	441a      	add	r2, r3
 801e668:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801e66c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801e670:	0a12      	lsrs	r2, r2, #8
 801e672:	0a1b      	lsrs	r3, r3, #8
 801e674:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801e678:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e67c:	431a      	orrs	r2, r3
 801e67e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801e682:	d019      	beq.n	801e6b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 801e684:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801e688:	fb0a fb0b 	mul.w	fp, sl, fp
 801e68c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e690:	fb0a fa06 	mul.w	sl, sl, r6
 801e694:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801e698:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e69c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e6a0:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801e6a4:	445e      	add	r6, fp
 801e6a6:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801e6aa:	0a36      	lsrs	r6, r6, #8
 801e6ac:	0a1b      	lsrs	r3, r3, #8
 801e6ae:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801e6b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e6b6:	431e      	orrs	r6, r3
 801e6b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e6bc:	d019      	beq.n	801e6f2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 801e6be:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801e6c2:	fb09 fa0a 	mul.w	sl, r9, sl
 801e6c6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e6ca:	fb09 f904 	mul.w	r9, r9, r4
 801e6ce:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801e6d2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e6d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e6da:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801e6de:	4454      	add	r4, sl
 801e6e0:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801e6e4:	0a24      	lsrs	r4, r4, #8
 801e6e6:	0a1b      	lsrs	r3, r3, #8
 801e6e8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801e6ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e6f0:	431c      	orrs	r4, r3
 801e6f2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e6f6:	d019      	beq.n	801e72c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 801e6f8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801e6fc:	fb08 f909 	mul.w	r9, r8, r9
 801e700:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e704:	fb08 f800 	mul.w	r8, r8, r0
 801e708:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801e70c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e710:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801e714:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801e718:	4448      	add	r0, r9
 801e71a:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801e71e:	0a00      	lsrs	r0, r0, #8
 801e720:	0a1b      	lsrs	r3, r3, #8
 801e722:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e726:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e72a:	4318      	orrs	r0, r3
 801e72c:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801e730:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e734:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801e738:	fb0c f808 	mul.w	r8, ip, r8
 801e73c:	fb0c f606 	mul.w	r6, ip, r6
 801e740:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801e744:	fb05 8803 	mla	r8, r5, r3, r8
 801e748:	fb05 6202 	mla	r2, r5, r2, r6
 801e74c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801e750:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e754:	fb07 8803 	mla	r8, r7, r3, r8
 801e758:	fb07 2704 	mla	r7, r7, r4, r2
 801e75c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801e760:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e764:	fb0e 8303 	mla	r3, lr, r3, r8
 801e768:	fb0e 7e00 	mla	lr, lr, r0, r7
 801e76c:	0a1b      	lsrs	r3, r3, #8
 801e76e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e772:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e776:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e77a:	ea43 0e0e 	orr.w	lr, r3, lr
 801e77e:	9b03      	ldr	r3, [sp, #12]
 801e780:	9800      	ldr	r0, [sp, #0]
 801e782:	9c01      	ldr	r4, [sp, #4]
 801e784:	9a02      	ldr	r2, [sp, #8]
 801e786:	43db      	mvns	r3, r3
 801e788:	b2db      	uxtb	r3, r3
 801e78a:	4358      	muls	r0, r3
 801e78c:	435c      	muls	r4, r3
 801e78e:	435a      	muls	r2, r3
 801e790:	1c43      	adds	r3, r0, #1
 801e792:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e796:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801e79a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e79e:	4b12      	ldr	r3, [pc, #72]	; (801e7e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 801e7a0:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 801e7a4:	1c50      	adds	r0, r2, #1
 801e7a6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e7aa:	fa5f f28e 	uxtb.w	r2, lr
 801e7ae:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e7b2:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801e7b6:	1c62      	adds	r2, r4, #1
 801e7b8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801e7bc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801e7c0:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801e7c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e7c8:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e7cc:	ea43 0e0e 	orr.w	lr, r3, lr
 801e7d0:	f8a1 e000 	strh.w	lr, [r1]
 801e7d4:	b005      	add	sp, #20
 801e7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7da:	bf00      	nop
 801e7dc:	08023e5d 	.word	0x08023e5d
 801e7e0:	080243b9 	.word	0x080243b9
 801e7e4:	08023ee5 	.word	0x08023ee5
 801e7e8:	fffff800 	.word	0xfffff800

0801e7ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801e7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7f0:	ed2d 8b08 	vpush	{d8-d11}
 801e7f4:	b097      	sub	sp, #92	; 0x5c
 801e7f6:	eeb0 aa40 	vmov.f32	s20, s0
 801e7fa:	9306      	str	r3, [sp, #24]
 801e7fc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801e800:	9307      	str	r3, [sp, #28]
 801e802:	9214      	str	r2, [sp, #80]	; 0x50
 801e804:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801e808:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801e80a:	9112      	str	r1, [sp, #72]	; 0x48
 801e80c:	9310      	str	r3, [sp, #64]	; 0x40
 801e80e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801e812:	9015      	str	r0, [sp, #84]	; 0x54
 801e814:	6850      	ldr	r0, [r2, #4]
 801e816:	6812      	ldr	r2, [r2, #0]
 801e818:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801e81a:	fb00 1303 	mla	r3, r0, r3, r1
 801e81e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e822:	930a      	str	r3, [sp, #40]	; 0x28
 801e824:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	9311      	str	r3, [sp, #68]	; 0x44
 801e82a:	9b07      	ldr	r3, [sp, #28]
 801e82c:	009b      	lsls	r3, r3, #2
 801e82e:	eef0 9a60 	vmov.f32	s19, s1
 801e832:	eeb0 9a41 	vmov.f32	s18, s2
 801e836:	eeb0 8a62 	vmov.f32	s16, s5
 801e83a:	eef0 8a43 	vmov.f32	s17, s6
 801e83e:	eef0 ba44 	vmov.f32	s23, s8
 801e842:	eeb0 ba64 	vmov.f32	s22, s9
 801e846:	eef0 aa45 	vmov.f32	s21, s10
 801e84a:	930e      	str	r3, [sp, #56]	; 0x38
 801e84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e84e:	2b00      	cmp	r3, #0
 801e850:	dc03      	bgt.n	801e85a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801e852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e854:	2b00      	cmp	r3, #0
 801e856:	f340 8361 	ble.w	801ef1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801e85a:	9b06      	ldr	r3, [sp, #24]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	f340 819b 	ble.w	801eb98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801e862:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e864:	1412      	asrs	r2, r2, #16
 801e866:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e86a:	d42e      	bmi.n	801e8ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801e86c:	9807      	ldr	r0, [sp, #28]
 801e86e:	1c51      	adds	r1, r2, #1
 801e870:	4288      	cmp	r0, r1
 801e872:	dd2d      	ble.n	801e8d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e874:	2b00      	cmp	r3, #0
 801e876:	db2b      	blt.n	801e8d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e878:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e87a:	1c59      	adds	r1, r3, #1
 801e87c:	4288      	cmp	r0, r1
 801e87e:	dd27      	ble.n	801e8d0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801e880:	9b06      	ldr	r3, [sp, #24]
 801e882:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801e884:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e886:	3b01      	subs	r3, #1
 801e888:	fb02 1203 	mla	r2, r2, r3, r1
 801e88c:	1412      	asrs	r2, r2, #16
 801e88e:	d42a      	bmi.n	801e8e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801e890:	9907      	ldr	r1, [sp, #28]
 801e892:	3201      	adds	r2, #1
 801e894:	4291      	cmp	r1, r2
 801e896:	dd26      	ble.n	801e8e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801e898:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801e89a:	fb02 5303 	mla	r3, r2, r3, r5
 801e89e:	141b      	asrs	r3, r3, #16
 801e8a0:	d421      	bmi.n	801e8e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801e8a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8a4:	3301      	adds	r3, #1
 801e8a6:	429a      	cmp	r2, r3
 801e8a8:	dd1d      	ble.n	801e8e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801e8aa:	9b06      	ldr	r3, [sp, #24]
 801e8ac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801e8b0:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	f300 81e3 	bgt.w	801ec80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801e8ba:	9b06      	ldr	r3, [sp, #24]
 801e8bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8c2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e8c6:	930a      	str	r3, [sp, #40]	; 0x28
 801e8c8:	e168      	b.n	801eb9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801e8ca:	1c51      	adds	r1, r2, #1
 801e8cc:	f040 8157 	bne.w	801eb7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e8d0:	9907      	ldr	r1, [sp, #28]
 801e8d2:	428a      	cmp	r2, r1
 801e8d4:	f280 8153 	bge.w	801eb7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e8d8:	1c5f      	adds	r7, r3, #1
 801e8da:	f2c0 8150 	blt.w	801eb7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e8de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8e0:	4293      	cmp	r3, r2
 801e8e2:	f280 814c 	bge.w	801eb7e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801e8e6:	9b06      	ldr	r3, [sp, #24]
 801e8e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e8ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e8ee:	2b00      	cmp	r3, #0
 801e8f0:	dde3      	ble.n	801e8ba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801e8f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801e8f4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e8f6:	1409      	asrs	r1, r1, #16
 801e8f8:	ea4f 4325 	mov.w	r3, r5, asr #16
 801e8fc:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801e900:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e904:	f100 81a3 	bmi.w	801ec4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801e908:	9c07      	ldr	r4, [sp, #28]
 801e90a:	1c4e      	adds	r6, r1, #1
 801e90c:	42b4      	cmp	r4, r6
 801e90e:	f340 81a0 	ble.w	801ec52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e912:	2b00      	cmp	r3, #0
 801e914:	f2c0 819d 	blt.w	801ec52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e918:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e91a:	1c5e      	adds	r6, r3, #1
 801e91c:	42b4      	cmp	r4, r6
 801e91e:	f340 8198 	ble.w	801ec52 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801e922:	9c07      	ldr	r4, [sp, #28]
 801e924:	fb03 1304 	mla	r3, r3, r4, r1
 801e928:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e92a:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801e92e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e932:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e936:	2a00      	cmp	r2, #0
 801e938:	f000 816f 	beq.w	801ec1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801e93c:	6871      	ldr	r1, [r6, #4]
 801e93e:	910b      	str	r1, [sp, #44]	; 0x2c
 801e940:	ea4f 6811 	mov.w	r8, r1, lsr #24
 801e944:	2800      	cmp	r0, #0
 801e946:	f000 8171 	beq.w	801ec2c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801e94a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e94c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e94e:	1871      	adds	r1, r6, r1
 801e950:	5934      	ldr	r4, [r6, r4]
 801e952:	6849      	ldr	r1, [r1, #4]
 801e954:	9408      	str	r4, [sp, #32]
 801e956:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801e95a:	910c      	str	r1, [sp, #48]	; 0x30
 801e95c:	0e0e      	lsrs	r6, r1, #24
 801e95e:	b292      	uxth	r2, r2
 801e960:	b280      	uxth	r0, r0
 801e962:	fb02 fb00 	mul.w	fp, r2, r0
 801e966:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801e96a:	0112      	lsls	r2, r2, #4
 801e96c:	eba2 090b 	sub.w	r9, r2, fp
 801e970:	b280      	uxth	r0, r0
 801e972:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801e976:	fa1f f989 	uxth.w	r9, r9
 801e97a:	1a09      	subs	r1, r1, r0
 801e97c:	b289      	uxth	r1, r1
 801e97e:	fb09 f208 	mul.w	r2, r9, r8
 801e982:	fb01 220c 	mla	r2, r1, ip, r2
 801e986:	fb00 220a 	mla	r2, r0, sl, r2
 801e98a:	fb0b 2206 	mla	r2, fp, r6, r2
 801e98e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e992:	2a00      	cmp	r2, #0
 801e994:	f000 80e8 	beq.w	801eb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801e998:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e99c:	d01b      	beq.n	801e9d6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801e99e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e9a2:	fb0c fe0e 	mul.w	lr, ip, lr
 801e9a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e9aa:	fb0c fc03 	mul.w	ip, ip, r3
 801e9ae:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801e9b2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e9b6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801e9ba:	4473      	add	r3, lr
 801e9bc:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801e9c0:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e9c4:	0a1b      	lsrs	r3, r3, #8
 801e9c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e9ca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e9ce:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e9d2:	ea43 030e 	orr.w	r3, r3, lr
 801e9d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e9da:	d01e      	beq.n	801ea1a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801e9dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e9de:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e9e2:	fb08 fc0c 	mul.w	ip, r8, ip
 801e9e6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e9ea:	fb08 f80e 	mul.w	r8, r8, lr
 801e9ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e9f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e9f6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e9fa:	44e6      	add	lr, ip
 801e9fc:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801ea00:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801ea04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea08:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801ea0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea10:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801ea14:	ea4e 0408 	orr.w	r4, lr, r8
 801ea18:	940b      	str	r4, [sp, #44]	; 0x2c
 801ea1a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801ea1e:	d01e      	beq.n	801ea5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801ea20:	9c08      	ldr	r4, [sp, #32]
 801ea22:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801ea26:	fb0a f808 	mul.w	r8, sl, r8
 801ea2a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ea2e:	fb0a fa0c 	mul.w	sl, sl, ip
 801ea32:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801ea36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea3a:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801ea3e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea42:	44c6      	add	lr, r8
 801ea44:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea4c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ea50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea54:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ea58:	ea4e 040a 	orr.w	r4, lr, sl
 801ea5c:	9408      	str	r4, [sp, #32]
 801ea5e:	2eff      	cmp	r6, #255	; 0xff
 801ea60:	d01d      	beq.n	801ea9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801ea62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ea64:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801ea68:	fb06 f808 	mul.w	r8, r6, r8
 801ea6c:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ea70:	fb06 f60c 	mul.w	r6, r6, ip
 801ea74:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801ea78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea7c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801ea80:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ea84:	44c6      	add	lr, r8
 801ea86:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ea8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea8e:	0a36      	lsrs	r6, r6, #8
 801ea90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ea98:	ea4e 0406 	orr.w	r4, lr, r6
 801ea9c:	940c      	str	r4, [sp, #48]	; 0x30
 801ea9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eaa0:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801eaa4:	9c08      	ldr	r4, [sp, #32]
 801eaa6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801eaaa:	fb09 f606 	mul.w	r6, r9, r6
 801eaae:	fb01 660c 	mla	r6, r1, ip, r6
 801eab2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801eab6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eab8:	fb00 660c 	mla	r6, r0, ip, r6
 801eabc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801eac0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eac2:	fb0b 660c 	mla	r6, fp, ip, r6
 801eac6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801eaca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eace:	fb09 f90c 	mul.w	r9, r9, ip
 801ead2:	fb01 9303 	mla	r3, r1, r3, r9
 801ead6:	9908      	ldr	r1, [sp, #32]
 801ead8:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801eadc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eade:	fb00 330e 	mla	r3, r0, lr, r3
 801eae2:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801eae6:	fb0b 3b00 	mla	fp, fp, r0, r3
 801eaea:	0a36      	lsrs	r6, r6, #8
 801eaec:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801eaf0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801eaf4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801eaf8:	ea46 060b 	orr.w	r6, r6, fp
 801eafc:	2aff      	cmp	r2, #255	; 0xff
 801eafe:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801eb02:	f000 8099 	beq.w	801ec38 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801eb06:	8839      	ldrh	r1, [r7, #0]
 801eb08:	43d2      	mvns	r2, r2
 801eb0a:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801eb0e:	fa5f fe82 	uxtb.w	lr, r2
 801eb12:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eb16:	fb0c fc0e 	mul.w	ip, ip, lr
 801eb1a:	10c8      	asrs	r0, r1, #3
 801eb1c:	00ca      	lsls	r2, r1, #3
 801eb1e:	f10c 0101 	add.w	r1, ip, #1
 801eb22:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801eb26:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 801eb2a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801eb2e:	b2d2      	uxtb	r2, r2
 801eb30:	4952      	ldr	r1, [pc, #328]	; (801ec7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 801eb32:	fb02 f20e 	mul.w	r2, r2, lr
 801eb36:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801eb3a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801eb3e:	1c51      	adds	r1, r2, #1
 801eb40:	fb00 f00e 	mul.w	r0, r0, lr
 801eb44:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801eb48:	b2f6      	uxtb	r6, r6
 801eb4a:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801eb4e:	1c42      	adds	r2, r0, #1
 801eb50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801eb54:	b2db      	uxtb	r3, r3
 801eb56:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801eb5a:	00db      	lsls	r3, r3, #3
 801eb5c:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 801eb60:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801eb64:	431e      	orrs	r6, r3
 801eb66:	803e      	strh	r6, [r7, #0]
 801eb68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801eb6a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb6c:	441a      	add	r2, r3
 801eb6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb70:	9229      	str	r2, [sp, #164]	; 0xa4
 801eb72:	441d      	add	r5, r3
 801eb74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eb76:	3b01      	subs	r3, #1
 801eb78:	3702      	adds	r7, #2
 801eb7a:	9313      	str	r3, [sp, #76]	; 0x4c
 801eb7c:	e6b6      	b.n	801e8ec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801eb7e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801eb80:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eb82:	441a      	add	r2, r3
 801eb84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eb86:	9229      	str	r2, [sp, #164]	; 0xa4
 801eb88:	441d      	add	r5, r3
 801eb8a:	9b06      	ldr	r3, [sp, #24]
 801eb8c:	3b01      	subs	r3, #1
 801eb8e:	9306      	str	r3, [sp, #24]
 801eb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb92:	3302      	adds	r3, #2
 801eb94:	930a      	str	r3, [sp, #40]	; 0x28
 801eb96:	e660      	b.n	801e85a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801eb98:	f47f ae72 	bne.w	801e880 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801eb9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	f340 81bc 	ble.w	801ef1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801eba4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801eba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ebac:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ebb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ebb2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ebb6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ebba:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ebbe:	eef0 6a48 	vmov.f32	s13, s16
 801ebc2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ebc6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ebca:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ebce:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801ebd2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ebd6:	eef0 6a68 	vmov.f32	s13, s17
 801ebda:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ebde:	ee18 2a10 	vmov	r2, s16
 801ebe2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ebe6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebea:	ee18 2a90 	vmov	r2, s17
 801ebee:	932b      	str	r3, [sp, #172]	; 0xac
 801ebf0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ebf2:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebf6:	932c      	str	r3, [sp, #176]	; 0xb0
 801ebf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ebfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ebfc:	3b01      	subs	r3, #1
 801ebfe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ec02:	9312      	str	r3, [sp, #72]	; 0x48
 801ec04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec06:	bf08      	it	eq
 801ec08:	4613      	moveq	r3, r2
 801ec0a:	ee16 5a90 	vmov	r5, s13
 801ec0e:	9306      	str	r3, [sp, #24]
 801ec10:	eef0 8a67 	vmov.f32	s17, s15
 801ec14:	eeb0 8a47 	vmov.f32	s16, s14
 801ec18:	e618      	b.n	801e84c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801ec1a:	b150      	cbz	r0, 801ec32 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801ec1c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ec1e:	5871      	ldr	r1, [r6, r1]
 801ec20:	9108      	str	r1, [sp, #32]
 801ec22:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801ec26:	26ff      	movs	r6, #255	; 0xff
 801ec28:	46b0      	mov	r8, r6
 801ec2a:	e698      	b.n	801e95e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801ec2c:	26ff      	movs	r6, #255	; 0xff
 801ec2e:	46b2      	mov	sl, r6
 801ec30:	e695      	b.n	801e95e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801ec32:	26ff      	movs	r6, #255	; 0xff
 801ec34:	46b2      	mov	sl, r6
 801ec36:	e7f7      	b.n	801ec28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801ec38:	0972      	lsrs	r2, r6, #5
 801ec3a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ec3e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec42:	f023 0307 	bic.w	r3, r3, #7
 801ec46:	4313      	orrs	r3, r2
 801ec48:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ec4c:	e78a      	b.n	801eb64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 801ec4e:	1c4e      	adds	r6, r1, #1
 801ec50:	d18a      	bne.n	801eb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ec52:	9c07      	ldr	r4, [sp, #28]
 801ec54:	428c      	cmp	r4, r1
 801ec56:	dd87      	ble.n	801eb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ec58:	1c5c      	adds	r4, r3, #1
 801ec5a:	db85      	blt.n	801eb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ec5c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ec5e:	429c      	cmp	r4, r3
 801ec60:	dd82      	ble.n	801eb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ec62:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801ec66:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801ec6a:	9400      	str	r4, [sp, #0]
 801ec6c:	9b07      	ldr	r3, [sp, #28]
 801ec6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ec70:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ec72:	4639      	mov	r1, r7
 801ec74:	f7ff fc62 	bl	801e53c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801ec78:	e776      	b.n	801eb68 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801ec7a:	bf00      	nop
 801ec7c:	fffff800 	.word	0xfffff800
 801ec80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ec82:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801ec84:	9c07      	ldr	r4, [sp, #28]
 801ec86:	1409      	asrs	r1, r1, #16
 801ec88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ec8c:	142b      	asrs	r3, r5, #16
 801ec8e:	fb04 1303 	mla	r3, r4, r3, r1
 801ec92:	9911      	ldr	r1, [sp, #68]	; 0x44
 801ec94:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801ec98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ec9c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801eca0:	0e1f      	lsrs	r7, r3, #24
 801eca2:	2a00      	cmp	r2, #0
 801eca4:	f000 811d 	beq.w	801eee2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801eca8:	6871      	ldr	r1, [r6, #4]
 801ecaa:	910d      	str	r1, [sp, #52]	; 0x34
 801ecac:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801ecb0:	2800      	cmp	r0, #0
 801ecb2:	f000 811f 	beq.w	801eef4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801ecb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ecb8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ecba:	1871      	adds	r1, r6, r1
 801ecbc:	5934      	ldr	r4, [r6, r4]
 801ecbe:	6849      	ldr	r1, [r1, #4]
 801ecc0:	9409      	str	r4, [sp, #36]	; 0x24
 801ecc2:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ecc6:	910f      	str	r1, [sp, #60]	; 0x3c
 801ecc8:	0e0e      	lsrs	r6, r1, #24
 801ecca:	b292      	uxth	r2, r2
 801eccc:	b280      	uxth	r0, r0
 801ecce:	fb02 fb00 	mul.w	fp, r2, r0
 801ecd2:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801ecd6:	0112      	lsls	r2, r2, #4
 801ecd8:	eba2 080b 	sub.w	r8, r2, fp
 801ecdc:	b280      	uxth	r0, r0
 801ecde:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ece2:	fa1f f888 	uxth.w	r8, r8
 801ece6:	1a09      	subs	r1, r1, r0
 801ece8:	b289      	uxth	r1, r1
 801ecea:	fb08 f20e 	mul.w	r2, r8, lr
 801ecee:	fb01 2207 	mla	r2, r1, r7, r2
 801ecf2:	fb00 2209 	mla	r2, r0, r9, r2
 801ecf6:	fb0b 2206 	mla	r2, fp, r6, r2
 801ecfa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ecfe:	2a00      	cmp	r2, #0
 801ed00:	f000 80e3 	beq.w	801eeca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801ed04:	2fff      	cmp	r7, #255	; 0xff
 801ed06:	d01a      	beq.n	801ed3e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 801ed08:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ed0c:	fb07 fc0c 	mul.w	ip, r7, ip
 801ed10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ed14:	435f      	muls	r7, r3
 801ed16:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ed1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed1e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ed22:	4463      	add	r3, ip
 801ed24:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801ed28:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801ed2c:	0a1b      	lsrs	r3, r3, #8
 801ed2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed32:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ed36:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ed3a:	ea43 030c 	orr.w	r3, r3, ip
 801ed3e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ed42:	d01e      	beq.n	801ed82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801ed44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ed46:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ed4a:	fb0e f707 	mul.w	r7, lr, r7
 801ed4e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ed52:	fb0e fe0c 	mul.w	lr, lr, ip
 801ed56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ed5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ed62:	44bc      	add	ip, r7
 801ed64:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801ed68:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801ed6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed70:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ed78:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ed7c:	ea4c 040e 	orr.w	r4, ip, lr
 801ed80:	940d      	str	r4, [sp, #52]	; 0x34
 801ed82:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ed86:	d01e      	beq.n	801edc6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801ed88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ed8a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ed8e:	fb09 fe0e 	mul.w	lr, r9, lr
 801ed92:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801ed96:	fb09 f907 	mul.w	r9, r9, r7
 801ed9a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ed9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eda2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801eda6:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801edaa:	44f4      	add	ip, lr
 801edac:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801edb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edb4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801edb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edbc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801edc0:	ea4c 0409 	orr.w	r4, ip, r9
 801edc4:	9409      	str	r4, [sp, #36]	; 0x24
 801edc6:	2eff      	cmp	r6, #255	; 0xff
 801edc8:	d01c      	beq.n	801ee04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 801edca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801edcc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801edd0:	fb06 fe0e 	mul.w	lr, r6, lr
 801edd4:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801edd8:	437e      	muls	r6, r7
 801edda:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801edde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ede2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ede6:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801edea:	44f4      	add	ip, lr
 801edec:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801edf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801edf4:	0a36      	lsrs	r6, r6, #8
 801edf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801edfa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801edfe:	ea4c 0406 	orr.w	r4, ip, r6
 801ee02:	940f      	str	r4, [sp, #60]	; 0x3c
 801ee04:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee06:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801ee0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee0c:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801ee10:	fb08 f606 	mul.w	r6, r8, r6
 801ee14:	fb01 6607 	mla	r6, r1, r7, r6
 801ee18:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ee1e:	fb00 6607 	mla	r6, r0, r7, r6
 801ee22:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee26:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee28:	fb0b 6607 	mla	r6, fp, r7, r6
 801ee2c:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801ee30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee34:	fb08 f807 	mul.w	r8, r8, r7
 801ee38:	fb01 8303 	mla	r3, r1, r3, r8
 801ee3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ee3e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ee42:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ee44:	fb00 330c 	mla	r3, r0, ip, r3
 801ee48:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801ee4c:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801ee50:	0a36      	lsrs	r6, r6, #8
 801ee52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ee56:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801ee5a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ee5e:	ea46 060e 	orr.w	r6, r6, lr
 801ee62:	2aff      	cmp	r2, #255	; 0xff
 801ee64:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801ee68:	d04a      	beq.n	801ef00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801ee6a:	f8ba 1000 	ldrh.w	r1, [sl]
 801ee6e:	43d2      	mvns	r2, r2
 801ee70:	120f      	asrs	r7, r1, #8
 801ee72:	fa5f fc82 	uxtb.w	ip, r2
 801ee76:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ee7a:	fb07 f70c 	mul.w	r7, r7, ip
 801ee7e:	10c8      	asrs	r0, r1, #3
 801ee80:	00ca      	lsls	r2, r1, #3
 801ee82:	1c79      	adds	r1, r7, #1
 801ee84:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801ee88:	0c37      	lsrs	r7, r6, #16
 801ee8a:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801ee8e:	b2d2      	uxtb	r2, r2
 801ee90:	4925      	ldr	r1, [pc, #148]	; (801ef28 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 801ee92:	fb02 f20c 	mul.w	r2, r2, ip
 801ee96:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 801ee9a:	1c51      	adds	r1, r2, #1
 801ee9c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801eea0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801eea4:	b2f6      	uxtb	r6, r6
 801eea6:	fb00 f00c 	mul.w	r0, r0, ip
 801eeaa:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801eeae:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 801eeb2:	1c46      	adds	r6, r0, #1
 801eeb4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801eeb8:	b2de      	uxtb	r6, r3
 801eeba:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801eebe:	00f6      	lsls	r6, r6, #3
 801eec0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801eec4:	4337      	orrs	r7, r6
 801eec6:	f8aa 7000 	strh.w	r7, [sl]
 801eeca:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801eecc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801eece:	441a      	add	r2, r3
 801eed0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801eed2:	9229      	str	r2, [sp, #164]	; 0xa4
 801eed4:	441d      	add	r5, r3
 801eed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801eed8:	3b01      	subs	r3, #1
 801eeda:	f10a 0a02 	add.w	sl, sl, #2
 801eede:	9313      	str	r3, [sp, #76]	; 0x4c
 801eee0:	e4e7      	b.n	801e8b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 801eee2:	b150      	cbz	r0, 801eefa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 801eee4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801eee6:	5871      	ldr	r1, [r6, r1]
 801eee8:	9109      	str	r1, [sp, #36]	; 0x24
 801eeea:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801eeee:	26ff      	movs	r6, #255	; 0xff
 801eef0:	46b6      	mov	lr, r6
 801eef2:	e6ea      	b.n	801ecca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801eef4:	26ff      	movs	r6, #255	; 0xff
 801eef6:	46b1      	mov	r9, r6
 801eef8:	e6e7      	b.n	801ecca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801eefa:	26ff      	movs	r6, #255	; 0xff
 801eefc:	46b1      	mov	r9, r6
 801eefe:	e7f7      	b.n	801eef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 801ef00:	0972      	lsrs	r2, r6, #5
 801ef02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801ef06:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ef0a:	f023 0307 	bic.w	r3, r3, #7
 801ef0e:	4313      	orrs	r3, r2
 801ef10:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801ef14:	431e      	orrs	r6, r3
 801ef16:	f8aa 6000 	strh.w	r6, [sl]
 801ef1a:	e7d6      	b.n	801eeca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801ef1c:	b017      	add	sp, #92	; 0x5c
 801ef1e:	ecbd 8b08 	vpop	{d8-d11}
 801ef22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef26:	bf00      	nop
 801ef28:	fffff800 	.word	0xfffff800

0801ef2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801ef2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef30:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801ef34:	2c00      	cmp	r4, #0
 801ef36:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801ef3a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ef3e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801ef42:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801ef46:	fb04 ce03 	mla	lr, r4, r3, ip
 801ef4a:	db60      	blt.n	801f00e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801ef4c:	45a1      	cmp	r9, r4
 801ef4e:	dd5e      	ble.n	801f00e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801ef50:	f1bc 0f00 	cmp.w	ip, #0
 801ef54:	db59      	blt.n	801f00a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801ef56:	45e0      	cmp	r8, ip
 801ef58:	dd57      	ble.n	801f00a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801ef5a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801ef5e:	f01e 0f01 	tst.w	lr, #1
 801ef62:	5c16      	ldrb	r6, [r2, r0]
 801ef64:	bf0c      	ite	eq
 801ef66:	f006 060f 	andeq.w	r6, r6, #15
 801ef6a:	1136      	asrne	r6, r6, #4
 801ef6c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ef70:	b2f6      	uxtb	r6, r6
 801ef72:	f11c 0001 	adds.w	r0, ip, #1
 801ef76:	d44d      	bmi.n	801f014 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801ef78:	4580      	cmp	r8, r0
 801ef7a:	dd4b      	ble.n	801f014 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801ef7c:	2d00      	cmp	r5, #0
 801ef7e:	d04b      	beq.n	801f018 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 801ef80:	f10e 0a01 	add.w	sl, lr, #1
 801ef84:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801ef88:	f01a 0f01 	tst.w	sl, #1
 801ef8c:	5c10      	ldrb	r0, [r2, r0]
 801ef8e:	bf0c      	ite	eq
 801ef90:	f000 000f 	andeq.w	r0, r0, #15
 801ef94:	1100      	asrne	r0, r0, #4
 801ef96:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ef9a:	b2c0      	uxtb	r0, r0
 801ef9c:	3401      	adds	r4, #1
 801ef9e:	d43f      	bmi.n	801f020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801efa0:	45a1      	cmp	r9, r4
 801efa2:	dd3d      	ble.n	801f020 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801efa4:	2f00      	cmp	r7, #0
 801efa6:	f000 80a0 	beq.w	801f0ea <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1be>
 801efaa:	f1bc 0f00 	cmp.w	ip, #0
 801efae:	db35      	blt.n	801f01c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801efb0:	45e0      	cmp	r8, ip
 801efb2:	dd33      	ble.n	801f01c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801efb4:	eb03 090e 	add.w	r9, r3, lr
 801efb8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801efbc:	f019 0f01 	tst.w	r9, #1
 801efc0:	5d14      	ldrb	r4, [r2, r4]
 801efc2:	bf0c      	ite	eq
 801efc4:	f004 040f 	andeq.w	r4, r4, #15
 801efc8:	1124      	asrne	r4, r4, #4
 801efca:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801efce:	b2e4      	uxtb	r4, r4
 801efd0:	f11c 0c01 	adds.w	ip, ip, #1
 801efd4:	d427      	bmi.n	801f026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801efd6:	45e0      	cmp	r8, ip
 801efd8:	dd25      	ble.n	801f026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801efda:	b335      	cbz	r5, 801f02a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 801efdc:	3301      	adds	r3, #1
 801efde:	449e      	add	lr, r3
 801efe0:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801efe4:	f01e 0f01 	tst.w	lr, #1
 801efe8:	5cd2      	ldrb	r2, [r2, r3]
 801efea:	bf0c      	ite	eq
 801efec:	f002 020f 	andeq.w	r2, r2, #15
 801eff0:	1112      	asrne	r2, r2, #4
 801eff2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801eff6:	b2d3      	uxtb	r3, r2
 801eff8:	2d0f      	cmp	r5, #15
 801effa:	d917      	bls.n	801f02c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 801effc:	4b3d      	ldr	r3, [pc, #244]	; (801f0f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801effe:	4a3e      	ldr	r2, [pc, #248]	; (801f0f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801f000:	483e      	ldr	r0, [pc, #248]	; (801f0fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 801f002:	f240 3173 	movw	r1, #883	; 0x373
 801f006:	f000 ffdf 	bl	801ffc8 <__assert_func>
 801f00a:	2600      	movs	r6, #0
 801f00c:	e7b1      	b.n	801ef72 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 801f00e:	2000      	movs	r0, #0
 801f010:	4606      	mov	r6, r0
 801f012:	e7c3      	b.n	801ef9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801f014:	2000      	movs	r0, #0
 801f016:	e7c1      	b.n	801ef9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801f018:	4628      	mov	r0, r5
 801f01a:	e7bf      	b.n	801ef9c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801f01c:	2400      	movs	r4, #0
 801f01e:	e7d7      	b.n	801efd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 801f020:	2300      	movs	r3, #0
 801f022:	461c      	mov	r4, r3
 801f024:	e7e8      	b.n	801eff8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801f026:	2300      	movs	r3, #0
 801f028:	e7e6      	b.n	801eff8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801f02a:	462b      	mov	r3, r5
 801f02c:	2f0f      	cmp	r7, #15
 801f02e:	d8e5      	bhi.n	801effc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801f030:	b2ad      	uxth	r5, r5
 801f032:	b2bf      	uxth	r7, r7
 801f034:	fb05 fc07 	mul.w	ip, r5, r7
 801f038:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801f03c:	012d      	lsls	r5, r5, #4
 801f03e:	b2bf      	uxth	r7, r7
 801f040:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801f044:	eba5 050c 	sub.w	r5, r5, ip
 801f048:	1bd2      	subs	r2, r2, r7
 801f04a:	b2ad      	uxth	r5, r5
 801f04c:	b292      	uxth	r2, r2
 801f04e:	4368      	muls	r0, r5
 801f050:	fb06 0002 	mla	r0, r6, r2, r0
 801f054:	fb07 0404 	mla	r4, r7, r4, r0
 801f058:	fb0c 4303 	mla	r3, ip, r3, r4
 801f05c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f060:	2b00      	cmp	r3, #0
 801f062:	d040      	beq.n	801f0e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 801f064:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801f068:	4a25      	ldr	r2, [pc, #148]	; (801f100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d4>)
 801f06a:	4343      	muls	r3, r0
 801f06c:	1c58      	adds	r0, r3, #1
 801f06e:	6816      	ldr	r6, [r2, #0]
 801f070:	880a      	ldrh	r2, [r1, #0]
 801f072:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f076:	1200      	asrs	r0, r0, #8
 801f078:	b284      	uxth	r4, r0
 801f07a:	1215      	asrs	r5, r2, #8
 801f07c:	43c0      	mvns	r0, r0
 801f07e:	b2c3      	uxtb	r3, r0
 801f080:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f084:	1230      	asrs	r0, r6, #8
 801f086:	fb15 f503 	smulbb	r5, r5, r3
 801f08a:	10d7      	asrs	r7, r2, #3
 801f08c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f090:	fb00 5004 	mla	r0, r0, r4, r5
 801f094:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f098:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801f09c:	00d2      	lsls	r2, r2, #3
 801f09e:	fb17 f703 	smulbb	r7, r7, r3
 801f0a2:	b2d2      	uxtb	r2, r2
 801f0a4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f0a8:	00f6      	lsls	r6, r6, #3
 801f0aa:	fb05 7504 	mla	r5, r5, r4, r7
 801f0ae:	fb12 f303 	smulbb	r3, r2, r3
 801f0b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f0b6:	fb06 3304 	mla	r3, r6, r4, r3
 801f0ba:	b2ad      	uxth	r5, r5
 801f0bc:	b29a      	uxth	r2, r3
 801f0be:	b280      	uxth	r0, r0
 801f0c0:	1c6b      	adds	r3, r5, #1
 801f0c2:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801f0c6:	1c44      	adds	r4, r0, #1
 801f0c8:	095b      	lsrs	r3, r3, #5
 801f0ca:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801f0ce:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f0d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f0d6:	4303      	orrs	r3, r0
 801f0d8:	1c50      	adds	r0, r2, #1
 801f0da:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801f0de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f0e2:	4313      	orrs	r3, r2
 801f0e4:	800b      	strh	r3, [r1, #0]
 801f0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0ea:	2d0f      	cmp	r5, #15
 801f0ec:	d886      	bhi.n	801effc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801f0ee:	463b      	mov	r3, r7
 801f0f0:	463c      	mov	r4, r7
 801f0f2:	e79d      	b.n	801f030 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 801f0f4:	08023e5d 	.word	0x08023e5d
 801f0f8:	080243b9 	.word	0x080243b9
 801f0fc:	08023ee5 	.word	0x08023ee5
 801f100:	20009f04 	.word	0x20009f04

0801f104 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f108:	ed2d 8b08 	vpush	{d8-d11}
 801f10c:	b099      	sub	sp, #100	; 0x64
 801f10e:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 801f112:	9309      	str	r3, [sp, #36]	; 0x24
 801f114:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801f118:	930a      	str	r3, [sp, #40]	; 0x28
 801f11a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801f11e:	9216      	str	r2, [sp, #88]	; 0x58
 801f120:	930b      	str	r3, [sp, #44]	; 0x2c
 801f122:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801f124:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801f128:	910f      	str	r1, [sp, #60]	; 0x3c
 801f12a:	9310      	str	r3, [sp, #64]	; 0x40
 801f12c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801f130:	9017      	str	r0, [sp, #92]	; 0x5c
 801f132:	6850      	ldr	r0, [r2, #4]
 801f134:	6812      	ldr	r2, [r2, #0]
 801f136:	fb00 1303 	mla	r3, r0, r3, r1
 801f13a:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 801f13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f140:	3301      	adds	r3, #1
 801f142:	f023 0301 	bic.w	r3, r3, #1
 801f146:	930c      	str	r3, [sp, #48]	; 0x30
 801f148:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801f14a:	681f      	ldr	r7, [r3, #0]
 801f14c:	eeb0 aa40 	vmov.f32	s20, s0
 801f150:	eef0 9a60 	vmov.f32	s19, s1
 801f154:	eeb0 9a41 	vmov.f32	s18, s2
 801f158:	eeb0 8a62 	vmov.f32	s16, s5
 801f15c:	eef0 8a43 	vmov.f32	s17, s6
 801f160:	eef0 ba44 	vmov.f32	s23, s8
 801f164:	eeb0 ba64 	vmov.f32	s22, s9
 801f168:	eef0 aa45 	vmov.f32	s21, s10
 801f16c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f16e:	2b00      	cmp	r3, #0
 801f170:	dc03      	bgt.n	801f17a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f172:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f174:	2b00      	cmp	r3, #0
 801f176:	f340 826b 	ble.w	801f650 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801f17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f17c:	2b00      	cmp	r3, #0
 801f17e:	f340 811f 	ble.w	801f3c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801f182:	1422      	asrs	r2, r4, #16
 801f184:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f188:	d42d      	bmi.n	801f1e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f18a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801f18c:	1c51      	adds	r1, r2, #1
 801f18e:	4288      	cmp	r0, r1
 801f190:	dd2c      	ble.n	801f1ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f192:	2b00      	cmp	r3, #0
 801f194:	db2a      	blt.n	801f1ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f196:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f198:	1c59      	adds	r1, r3, #1
 801f19a:	4288      	cmp	r0, r1
 801f19c:	dd26      	ble.n	801f1ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801f19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801f1a2:	3b01      	subs	r3, #1
 801f1a4:	fb02 4203 	mla	r2, r2, r3, r4
 801f1a8:	1412      	asrs	r2, r2, #16
 801f1aa:	d42a      	bmi.n	801f202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f1ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f1ae:	3201      	adds	r2, #1
 801f1b0:	4291      	cmp	r1, r2
 801f1b2:	dd26      	ble.n	801f202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f1b4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801f1b6:	fb02 6303 	mla	r3, r2, r3, r6
 801f1ba:	141b      	asrs	r3, r3, #16
 801f1bc:	d421      	bmi.n	801f202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f1be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1c0:	3301      	adds	r3, #1
 801f1c2:	429a      	cmp	r2, r3
 801f1c4:	dd1d      	ble.n	801f202 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801f1c6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801f1ca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801f1ce:	9311      	str	r3, [sp, #68]	; 0x44
 801f1d0:	46d1      	mov	r9, sl
 801f1d2:	f1bb 0f00 	cmp.w	fp, #0
 801f1d6:	f300 8163 	bgt.w	801f4a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39c>
 801f1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1dc:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f1e0:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801f1e4:	e0ee      	b.n	801f3c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801f1e6:	1c51      	adds	r1, r2, #1
 801f1e8:	f040 80e0 	bne.w	801f3ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f1ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f1ee:	4291      	cmp	r1, r2
 801f1f0:	f340 80dc 	ble.w	801f3ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f1f4:	1c5a      	adds	r2, r3, #1
 801f1f6:	f2c0 80d9 	blt.w	801f3ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f1fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f1fc:	4293      	cmp	r3, r2
 801f1fe:	f280 80d5 	bge.w	801f3ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801f202:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801f206:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f20a:	9311      	str	r3, [sp, #68]	; 0x44
 801f20c:	46d0      	mov	r8, sl
 801f20e:	f1b9 0f00 	cmp.w	r9, #0
 801f212:	dde2      	ble.n	801f1da <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801f214:	1420      	asrs	r0, r4, #16
 801f216:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f21a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f21e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f222:	f100 8122 	bmi.w	801f46a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 801f226:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f228:	f100 0c01 	add.w	ip, r0, #1
 801f22c:	4565      	cmp	r5, ip
 801f22e:	f340 811e 	ble.w	801f46e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801f232:	2b00      	cmp	r3, #0
 801f234:	f2c0 811b 	blt.w	801f46e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801f238:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f23a:	f103 0c01 	add.w	ip, r3, #1
 801f23e:	4565      	cmp	r5, ip
 801f240:	f340 8115 	ble.w	801f46e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801f244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f246:	fb03 0305 	mla	r3, r3, r5, r0
 801f24a:	0858      	lsrs	r0, r3, #1
 801f24c:	07dd      	lsls	r5, r3, #31
 801f24e:	5c38      	ldrb	r0, [r7, r0]
 801f250:	bf54      	ite	pl
 801f252:	f000 000f 	andpl.w	r0, r0, #15
 801f256:	1100      	asrmi	r0, r0, #4
 801f258:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f25c:	b2c0      	uxtb	r0, r0
 801f25e:	2a00      	cmp	r2, #0
 801f260:	f000 80ef 	beq.w	801f442 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801f264:	f103 0e01 	add.w	lr, r3, #1
 801f268:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801f26c:	f01e 0f01 	tst.w	lr, #1
 801f270:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f274:	bf0c      	ite	eq
 801f276:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f27a:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f27e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f282:	fa5f f58c 	uxtb.w	r5, ip
 801f286:	9512      	str	r5, [sp, #72]	; 0x48
 801f288:	b1f9      	cbz	r1, 801f2ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801f28a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f28c:	442b      	add	r3, r5
 801f28e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f292:	07dd      	lsls	r5, r3, #31
 801f294:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f298:	bf54      	ite	pl
 801f29a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f29e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f2a2:	3301      	adds	r3, #1
 801f2a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f2a8:	fa5f f58c 	uxtb.w	r5, ip
 801f2ac:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f2b0:	950d      	str	r5, [sp, #52]	; 0x34
 801f2b2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f2b6:	07dd      	lsls	r5, r3, #31
 801f2b8:	bf54      	ite	pl
 801f2ba:	f00c 030f 	andpl.w	r3, ip, #15
 801f2be:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801f2c2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f2c6:	b2db      	uxtb	r3, r3
 801f2c8:	9313      	str	r3, [sp, #76]	; 0x4c
 801f2ca:	b292      	uxth	r2, r2
 801f2cc:	b289      	uxth	r1, r1
 801f2ce:	fb02 f301 	mul.w	r3, r2, r1
 801f2d2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f2d6:	0112      	lsls	r2, r2, #4
 801f2d8:	b289      	uxth	r1, r1
 801f2da:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801f2de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f2e0:	1ad2      	subs	r2, r2, r3
 801f2e2:	ebac 0c01 	sub.w	ip, ip, r1
 801f2e6:	b292      	uxth	r2, r2
 801f2e8:	436a      	muls	r2, r5
 801f2ea:	fa1f fc8c 	uxth.w	ip, ip
 801f2ee:	fb00 200c 	mla	r0, r0, ip, r2
 801f2f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f2f4:	fb01 0102 	mla	r1, r1, r2, r0
 801f2f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f2fa:	fb03 1302 	mla	r3, r3, r2, r1
 801f2fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f302:	2b00      	cmp	r3, #0
 801f304:	d049      	beq.n	801f39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f306:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f308:	4ac5      	ldr	r2, [pc, #788]	; (801f620 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801f30a:	4dc6      	ldr	r5, [pc, #792]	; (801f624 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801f30c:	f8d2 e000 	ldr.w	lr, [r2]
 801f310:	f8b8 2000 	ldrh.w	r2, [r8]
 801f314:	434b      	muls	r3, r1
 801f316:	1c59      	adds	r1, r3, #1
 801f318:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f31c:	121b      	asrs	r3, r3, #8
 801f31e:	b299      	uxth	r1, r3
 801f320:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f324:	43db      	mvns	r3, r3
 801f326:	b2db      	uxtb	r3, r3
 801f328:	ea4f 202e 	mov.w	r0, lr, asr #8
 801f32c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f330:	fb1c fc03 	smulbb	ip, ip, r3
 801f334:	ea4f 0be2 	mov.w	fp, r2, asr #3
 801f338:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f33c:	fb00 c001 	mla	r0, r0, r1, ip
 801f340:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801f344:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801f348:	fb1b fb03 	smulbb	fp, fp, r3
 801f34c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f350:	00d2      	lsls	r2, r2, #3
 801f352:	fb0c bc01 	mla	ip, ip, r1, fp
 801f356:	b2d2      	uxtb	r2, r2
 801f358:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801f35c:	fb12 f303 	smulbb	r3, r2, r3
 801f360:	fa1f fc8c 	uxth.w	ip, ip
 801f364:	fa5f fe8e 	uxtb.w	lr, lr
 801f368:	b280      	uxth	r0, r0
 801f36a:	fb0e 3101 	mla	r1, lr, r1, r3
 801f36e:	f10c 0201 	add.w	r2, ip, #1
 801f372:	b289      	uxth	r1, r1
 801f374:	1c43      	adds	r3, r0, #1
 801f376:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801f37a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801f37e:	0952      	lsrs	r2, r2, #5
 801f380:	1c4b      	adds	r3, r1, #1
 801f382:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f386:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f38a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801f38e:	4310      	orrs	r0, r2
 801f390:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801f394:	4308      	orrs	r0, r1
 801f396:	f8a8 0000 	strh.w	r0, [r8]
 801f39a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f39c:	441c      	add	r4, r3
 801f39e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f3a0:	f108 0802 	add.w	r8, r8, #2
 801f3a4:	441e      	add	r6, r3
 801f3a6:	f109 39ff 	add.w	r9, r9, #4294967295
 801f3aa:	e730      	b.n	801f20e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801f3ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f3ae:	441c      	add	r4, r3
 801f3b0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f3b2:	441e      	add	r6, r3
 801f3b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f3b6:	3b01      	subs	r3, #1
 801f3b8:	9309      	str	r3, [sp, #36]	; 0x24
 801f3ba:	f10a 0a02 	add.w	sl, sl, #2
 801f3be:	e6dc      	b.n	801f17a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801f3c0:	f47f aeed 	bne.w	801f19e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801f3c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	f340 8142 	ble.w	801f650 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801f3cc:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801f3d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f3d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801f3d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f3da:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801f3de:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801f3e2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801f3e6:	eef0 6a48 	vmov.f32	s13, s16
 801f3ea:	ee69 7a27 	vmul.f32	s15, s18, s15
 801f3ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f3f2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801f3f6:	ee16 4a90 	vmov	r4, s13
 801f3fa:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801f3fe:	eef0 6a68 	vmov.f32	s13, s17
 801f402:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801f406:	ee18 2a10 	vmov	r2, s16
 801f40a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801f40e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f412:	ee18 2a90 	vmov	r2, s17
 801f416:	932d      	str	r3, [sp, #180]	; 0xb4
 801f418:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f41a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f41e:	932e      	str	r3, [sp, #184]	; 0xb8
 801f420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f422:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801f424:	3b01      	subs	r3, #1
 801f426:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f42a:	930f      	str	r3, [sp, #60]	; 0x3c
 801f42c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801f42e:	bf08      	it	eq
 801f430:	4613      	moveq	r3, r2
 801f432:	ee16 6a90 	vmov	r6, s13
 801f436:	9309      	str	r3, [sp, #36]	; 0x24
 801f438:	eef0 8a67 	vmov.f32	s17, s15
 801f43c:	eeb0 8a47 	vmov.f32	s16, s14
 801f440:	e694      	b.n	801f16c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801f442:	2900      	cmp	r1, #0
 801f444:	f43f af41 	beq.w	801f2ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801f448:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f44a:	442b      	add	r3, r5
 801f44c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f450:	07db      	lsls	r3, r3, #31
 801f452:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f456:	bf54      	ite	pl
 801f458:	f00c 030f 	andpl.w	r3, ip, #15
 801f45c:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801f460:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f464:	b2db      	uxtb	r3, r3
 801f466:	930d      	str	r3, [sp, #52]	; 0x34
 801f468:	e72f      	b.n	801f2ca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801f46a:	1c45      	adds	r5, r0, #1
 801f46c:	d195      	bne.n	801f39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f46e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801f470:	4285      	cmp	r5, r0
 801f472:	dd92      	ble.n	801f39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f474:	1c5d      	adds	r5, r3, #1
 801f476:	db90      	blt.n	801f39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f478:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801f47a:	429d      	cmp	r5, r3
 801f47c:	dd8d      	ble.n	801f39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f47e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801f482:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801f484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f486:	9301      	str	r3, [sp, #4]
 801f488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f48a:	9002      	str	r0, [sp, #8]
 801f48c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801f490:	9300      	str	r3, [sp, #0]
 801f492:	463a      	mov	r2, r7
 801f494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f496:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f498:	4641      	mov	r1, r8
 801f49a:	f7ff fd47 	bl	801ef2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801f49e:	e77c      	b.n	801f39a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801f4a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f4a2:	1422      	asrs	r2, r4, #16
 801f4a4:	1433      	asrs	r3, r6, #16
 801f4a6:	fb05 2303 	mla	r3, r5, r3, r2
 801f4aa:	085a      	lsrs	r2, r3, #1
 801f4ac:	07dd      	lsls	r5, r3, #31
 801f4ae:	5cba      	ldrb	r2, [r7, r2]
 801f4b0:	bf54      	ite	pl
 801f4b2:	f002 020f 	andpl.w	r2, r2, #15
 801f4b6:	1112      	asrmi	r2, r2, #4
 801f4b8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f4bc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801f4c0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f4c4:	b2d2      	uxtb	r2, r2
 801f4c6:	2900      	cmp	r1, #0
 801f4c8:	f000 80ae 	beq.w	801f628 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801f4cc:	f103 0e01 	add.w	lr, r3, #1
 801f4d0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801f4d4:	f01e 0f01 	tst.w	lr, #1
 801f4d8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f4dc:	bf0c      	ite	eq
 801f4de:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f4e2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f4e6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f4ea:	fa5f f58c 	uxtb.w	r5, ip
 801f4ee:	9514      	str	r5, [sp, #80]	; 0x50
 801f4f0:	b300      	cbz	r0, 801f534 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801f4f2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f4f4:	442b      	add	r3, r5
 801f4f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f4fa:	07dd      	lsls	r5, r3, #31
 801f4fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f500:	bf54      	ite	pl
 801f502:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f506:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f50a:	3301      	adds	r3, #1
 801f50c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f510:	fa5f f58c 	uxtb.w	r5, ip
 801f514:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f518:	950e      	str	r5, [sp, #56]	; 0x38
 801f51a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f51e:	07dd      	lsls	r5, r3, #31
 801f520:	bf54      	ite	pl
 801f522:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f526:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f52a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f52e:	fa5f f38c 	uxtb.w	r3, ip
 801f532:	9315      	str	r3, [sp, #84]	; 0x54
 801f534:	b289      	uxth	r1, r1
 801f536:	b280      	uxth	r0, r0
 801f538:	fb01 f300 	mul.w	r3, r1, r0
 801f53c:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801f540:	0109      	lsls	r1, r1, #4
 801f542:	b280      	uxth	r0, r0
 801f544:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801f548:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f54a:	1ac9      	subs	r1, r1, r3
 801f54c:	ebac 0c00 	sub.w	ip, ip, r0
 801f550:	b289      	uxth	r1, r1
 801f552:	4369      	muls	r1, r5
 801f554:	fa1f fc8c 	uxth.w	ip, ip
 801f558:	fb02 120c 	mla	r2, r2, ip, r1
 801f55c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801f55e:	fb00 2001 	mla	r0, r0, r1, r2
 801f562:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801f564:	fb03 0302 	mla	r3, r3, r2, r0
 801f568:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	d04d      	beq.n	801f60c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x508>
 801f570:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f572:	4a2b      	ldr	r2, [pc, #172]	; (801f620 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801f574:	4d2b      	ldr	r5, [pc, #172]	; (801f624 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801f576:	f8d2 e000 	ldr.w	lr, [r2]
 801f57a:	f8b9 2000 	ldrh.w	r2, [r9]
 801f57e:	434b      	muls	r3, r1
 801f580:	1c59      	adds	r1, r3, #1
 801f582:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f586:	121b      	asrs	r3, r3, #8
 801f588:	b299      	uxth	r1, r3
 801f58a:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801f58e:	43db      	mvns	r3, r3
 801f590:	b2db      	uxtb	r3, r3
 801f592:	ea4f 202e 	mov.w	r0, lr, asr #8
 801f596:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f59a:	fb1c fc03 	smulbb	ip, ip, r3
 801f59e:	ea4f 08e2 	mov.w	r8, r2, asr #3
 801f5a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f5a6:	fb00 c001 	mla	r0, r0, r1, ip
 801f5aa:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f5ae:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801f5b2:	fb18 f803 	smulbb	r8, r8, r3
 801f5b6:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f5ba:	00d2      	lsls	r2, r2, #3
 801f5bc:	fb0c 8c01 	mla	ip, ip, r1, r8
 801f5c0:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801f5c4:	b2d2      	uxtb	r2, r2
 801f5c6:	fa1f fc8c 	uxth.w	ip, ip
 801f5ca:	fa5f fe8e 	uxtb.w	lr, lr
 801f5ce:	fb12 f203 	smulbb	r2, r2, r3
 801f5d2:	b280      	uxth	r0, r0
 801f5d4:	fb0e 2201 	mla	r2, lr, r1, r2
 801f5d8:	f10c 0801 	add.w	r8, ip, #1
 801f5dc:	b292      	uxth	r2, r2
 801f5de:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801f5e2:	f100 0801 	add.w	r8, r0, #1
 801f5e6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f5ea:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801f5ee:	1c51      	adds	r1, r2, #1
 801f5f0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f5f4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f5f8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801f5fc:	ea4c 0c00 	orr.w	ip, ip, r0
 801f600:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f604:	ea4c 0c02 	orr.w	ip, ip, r2
 801f608:	f8a9 c000 	strh.w	ip, [r9]
 801f60c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801f60e:	441c      	add	r4, r3
 801f610:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f612:	f109 0902 	add.w	r9, r9, #2
 801f616:	441e      	add	r6, r3
 801f618:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f61c:	e5d9      	b.n	801f1d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801f61e:	bf00      	nop
 801f620:	20009f04 	.word	0x20009f04
 801f624:	0007fff8 	.word	0x0007fff8
 801f628:	2800      	cmp	r0, #0
 801f62a:	d083      	beq.n	801f534 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801f62c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f62e:	442b      	add	r3, r5
 801f630:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f634:	07db      	lsls	r3, r3, #31
 801f636:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f63a:	bf54      	ite	pl
 801f63c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f640:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f644:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f648:	fa5f f38c 	uxtb.w	r3, ip
 801f64c:	930e      	str	r3, [sp, #56]	; 0x38
 801f64e:	e771      	b.n	801f534 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801f650:	b019      	add	sp, #100	; 0x64
 801f652:	ecbd 8b08 	vpop	{d8-d11}
 801f656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f65a:	bf00      	nop

0801f65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801f65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f660:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801f664:	2c00      	cmp	r4, #0
 801f666:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801f66a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801f66e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f672:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801f676:	fb04 ce03 	mla	lr, r4, r3, ip
 801f67a:	db60      	blt.n	801f73e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801f67c:	45a1      	cmp	r9, r4
 801f67e:	dd5e      	ble.n	801f73e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801f680:	f1bc 0f00 	cmp.w	ip, #0
 801f684:	db59      	blt.n	801f73a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801f686:	45e0      	cmp	r8, ip
 801f688:	dd57      	ble.n	801f73a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801f68a:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801f68e:	f01e 0f01 	tst.w	lr, #1
 801f692:	5c16      	ldrb	r6, [r2, r0]
 801f694:	bf0c      	ite	eq
 801f696:	f006 060f 	andeq.w	r6, r6, #15
 801f69a:	1136      	asrne	r6, r6, #4
 801f69c:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f6a0:	b2f6      	uxtb	r6, r6
 801f6a2:	f11c 0001 	adds.w	r0, ip, #1
 801f6a6:	d44d      	bmi.n	801f744 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801f6a8:	4580      	cmp	r8, r0
 801f6aa:	dd4b      	ble.n	801f744 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801f6ac:	2d00      	cmp	r5, #0
 801f6ae:	d04b      	beq.n	801f748 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801f6b0:	f10e 0a01 	add.w	sl, lr, #1
 801f6b4:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801f6b8:	f01a 0f01 	tst.w	sl, #1
 801f6bc:	5c10      	ldrb	r0, [r2, r0]
 801f6be:	bf0c      	ite	eq
 801f6c0:	f000 000f 	andeq.w	r0, r0, #15
 801f6c4:	1100      	asrne	r0, r0, #4
 801f6c6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f6ca:	b2c0      	uxtb	r0, r0
 801f6cc:	3401      	adds	r4, #1
 801f6ce:	d43f      	bmi.n	801f750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801f6d0:	45a1      	cmp	r9, r4
 801f6d2:	dd3d      	ble.n	801f750 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801f6d4:	2f00      	cmp	r7, #0
 801f6d6:	f000 8099 	beq.w	801f80c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>
 801f6da:	f1bc 0f00 	cmp.w	ip, #0
 801f6de:	db35      	blt.n	801f74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801f6e0:	45e0      	cmp	r8, ip
 801f6e2:	dd33      	ble.n	801f74c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801f6e4:	eb03 090e 	add.w	r9, r3, lr
 801f6e8:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801f6ec:	f019 0f01 	tst.w	r9, #1
 801f6f0:	5d14      	ldrb	r4, [r2, r4]
 801f6f2:	bf0c      	ite	eq
 801f6f4:	f004 040f 	andeq.w	r4, r4, #15
 801f6f8:	1124      	asrne	r4, r4, #4
 801f6fa:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f6fe:	b2e4      	uxtb	r4, r4
 801f700:	f11c 0c01 	adds.w	ip, ip, #1
 801f704:	d427      	bmi.n	801f756 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801f706:	45e0      	cmp	r8, ip
 801f708:	dd25      	ble.n	801f756 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801f70a:	b335      	cbz	r5, 801f75a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801f70c:	3301      	adds	r3, #1
 801f70e:	449e      	add	lr, r3
 801f710:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f714:	f01e 0f01 	tst.w	lr, #1
 801f718:	5cd2      	ldrb	r2, [r2, r3]
 801f71a:	bf0c      	ite	eq
 801f71c:	f002 020f 	andeq.w	r2, r2, #15
 801f720:	1112      	asrne	r2, r2, #4
 801f722:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f726:	b2d3      	uxtb	r3, r2
 801f728:	2d0f      	cmp	r5, #15
 801f72a:	d917      	bls.n	801f75c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801f72c:	4b3a      	ldr	r3, [pc, #232]	; (801f818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801f72e:	4a3b      	ldr	r2, [pc, #236]	; (801f81c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 801f730:	483b      	ldr	r0, [pc, #236]	; (801f820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 801f732:	f240 3173 	movw	r1, #883	; 0x373
 801f736:	f000 fc47 	bl	801ffc8 <__assert_func>
 801f73a:	2600      	movs	r6, #0
 801f73c:	e7b1      	b.n	801f6a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801f73e:	2000      	movs	r0, #0
 801f740:	4606      	mov	r6, r0
 801f742:	e7c3      	b.n	801f6cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801f744:	2000      	movs	r0, #0
 801f746:	e7c1      	b.n	801f6cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801f748:	4628      	mov	r0, r5
 801f74a:	e7bf      	b.n	801f6cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801f74c:	2400      	movs	r4, #0
 801f74e:	e7d7      	b.n	801f700 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801f750:	2300      	movs	r3, #0
 801f752:	461c      	mov	r4, r3
 801f754:	e7e8      	b.n	801f728 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801f756:	2300      	movs	r3, #0
 801f758:	e7e6      	b.n	801f728 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801f75a:	462b      	mov	r3, r5
 801f75c:	2f0f      	cmp	r7, #15
 801f75e:	d8e5      	bhi.n	801f72c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801f760:	b2ad      	uxth	r5, r5
 801f762:	b2bf      	uxth	r7, r7
 801f764:	fb05 fc07 	mul.w	ip, r5, r7
 801f768:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801f76c:	012d      	lsls	r5, r5, #4
 801f76e:	b2bf      	uxth	r7, r7
 801f770:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801f774:	eba5 050c 	sub.w	r5, r5, ip
 801f778:	1bd2      	subs	r2, r2, r7
 801f77a:	b2ad      	uxth	r5, r5
 801f77c:	b292      	uxth	r2, r2
 801f77e:	4368      	muls	r0, r5
 801f780:	fb06 0002 	mla	r0, r6, r2, r0
 801f784:	fb07 0404 	mla	r4, r7, r4, r0
 801f788:	fb0c 4303 	mla	r3, ip, r3, r4
 801f78c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f790:	2b00      	cmp	r3, #0
 801f792:	d039      	beq.n	801f808 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 801f794:	4a23      	ldr	r2, [pc, #140]	; (801f824 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c8>)
 801f796:	6816      	ldr	r6, [r2, #0]
 801f798:	880a      	ldrh	r2, [r1, #0]
 801f79a:	b298      	uxth	r0, r3
 801f79c:	1215      	asrs	r5, r2, #8
 801f79e:	43db      	mvns	r3, r3
 801f7a0:	b2db      	uxtb	r3, r3
 801f7a2:	1234      	asrs	r4, r6, #8
 801f7a4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f7a8:	fb15 f503 	smulbb	r5, r5, r3
 801f7ac:	10d7      	asrs	r7, r2, #3
 801f7ae:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f7b2:	fb04 5400 	mla	r4, r4, r0, r5
 801f7b6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f7ba:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801f7be:	fb17 f703 	smulbb	r7, r7, r3
 801f7c2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f7c6:	00d2      	lsls	r2, r2, #3
 801f7c8:	fb05 7500 	mla	r5, r5, r0, r7
 801f7cc:	b2d2      	uxtb	r2, r2
 801f7ce:	00f6      	lsls	r6, r6, #3
 801f7d0:	fb12 f303 	smulbb	r3, r2, r3
 801f7d4:	b2ad      	uxth	r5, r5
 801f7d6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f7da:	b2a4      	uxth	r4, r4
 801f7dc:	fb06 3000 	mla	r0, r6, r0, r3
 801f7e0:	1c6b      	adds	r3, r5, #1
 801f7e2:	b280      	uxth	r0, r0
 801f7e4:	1c62      	adds	r2, r4, #1
 801f7e6:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801f7ea:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801f7ee:	095b      	lsrs	r3, r3, #5
 801f7f0:	1c42      	adds	r2, r0, #1
 801f7f2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f7f6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f7fa:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f7fe:	4323      	orrs	r3, r4
 801f800:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801f804:	4303      	orrs	r3, r0
 801f806:	800b      	strh	r3, [r1, #0]
 801f808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f80c:	2d0f      	cmp	r5, #15
 801f80e:	d88d      	bhi.n	801f72c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801f810:	463b      	mov	r3, r7
 801f812:	463c      	mov	r4, r7
 801f814:	e7a4      	b.n	801f760 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801f816:	bf00      	nop
 801f818:	08023e5d 	.word	0x08023e5d
 801f81c:	080243b9 	.word	0x080243b9
 801f820:	08023ee5 	.word	0x08023ee5
 801f824:	20009f04 	.word	0x20009f04

0801f828 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801f828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f82c:	ed2d 8b08 	vpush	{d8-d11}
 801f830:	b095      	sub	sp, #84	; 0x54
 801f832:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801f836:	9306      	str	r3, [sp, #24]
 801f838:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801f83c:	9307      	str	r3, [sp, #28]
 801f83e:	920d      	str	r2, [sp, #52]	; 0x34
 801f840:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801f844:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f846:	910a      	str	r1, [sp, #40]	; 0x28
 801f848:	9308      	str	r3, [sp, #32]
 801f84a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f84e:	9013      	str	r0, [sp, #76]	; 0x4c
 801f850:	6850      	ldr	r0, [r2, #4]
 801f852:	6812      	ldr	r2, [r2, #0]
 801f854:	fb00 1303 	mla	r3, r0, r3, r1
 801f858:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801f85c:	9b07      	ldr	r3, [sp, #28]
 801f85e:	3301      	adds	r3, #1
 801f860:	f023 0301 	bic.w	r3, r3, #1
 801f864:	9309      	str	r3, [sp, #36]	; 0x24
 801f866:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801f868:	681f      	ldr	r7, [r3, #0]
 801f86a:	eeb0 aa40 	vmov.f32	s20, s0
 801f86e:	eef0 9a60 	vmov.f32	s19, s1
 801f872:	eeb0 9a41 	vmov.f32	s18, s2
 801f876:	eeb0 8a62 	vmov.f32	s16, s5
 801f87a:	eef0 8a43 	vmov.f32	s17, s6
 801f87e:	eef0 ba44 	vmov.f32	s23, s8
 801f882:	eeb0 ba64 	vmov.f32	s22, s9
 801f886:	eef0 aa45 	vmov.f32	s21, s10
 801f88a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f88c:	2b00      	cmp	r3, #0
 801f88e:	dc03      	bgt.n	801f898 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801f890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f892:	2b00      	cmp	r3, #0
 801f894:	f340 8260 	ble.w	801fd58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801f898:	9b06      	ldr	r3, [sp, #24]
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	f340 811c 	ble.w	801fad8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801f8a0:	1422      	asrs	r2, r4, #16
 801f8a2:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f8a6:	d42d      	bmi.n	801f904 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801f8a8:	9807      	ldr	r0, [sp, #28]
 801f8aa:	1c51      	adds	r1, r2, #1
 801f8ac:	4288      	cmp	r0, r1
 801f8ae:	dd2c      	ble.n	801f90a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f8b0:	2b00      	cmp	r3, #0
 801f8b2:	db2a      	blt.n	801f90a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f8b4:	9808      	ldr	r0, [sp, #32]
 801f8b6:	1c59      	adds	r1, r3, #1
 801f8b8:	4288      	cmp	r0, r1
 801f8ba:	dd26      	ble.n	801f90a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801f8bc:	9b06      	ldr	r3, [sp, #24]
 801f8be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801f8c0:	3b01      	subs	r3, #1
 801f8c2:	fb02 4203 	mla	r2, r2, r3, r4
 801f8c6:	1412      	asrs	r2, r2, #16
 801f8c8:	d42a      	bmi.n	801f920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f8ca:	9907      	ldr	r1, [sp, #28]
 801f8cc:	3201      	adds	r2, #1
 801f8ce:	4291      	cmp	r1, r2
 801f8d0:	dd26      	ble.n	801f920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f8d2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801f8d4:	fb02 6303 	mla	r3, r2, r3, r6
 801f8d8:	141b      	asrs	r3, r3, #16
 801f8da:	d421      	bmi.n	801f920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f8dc:	9a08      	ldr	r2, [sp, #32]
 801f8de:	3301      	adds	r3, #1
 801f8e0:	429a      	cmp	r2, r3
 801f8e2:	dd1d      	ble.n	801f920 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801f8e4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f8e8:	f8dd a018 	ldr.w	sl, [sp, #24]
 801f8ec:	930e      	str	r3, [sp, #56]	; 0x38
 801f8ee:	46d8      	mov	r8, fp
 801f8f0:	f1ba 0f00 	cmp.w	sl, #0
 801f8f4:	f300 8164 	bgt.w	801fbc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801f8f8:	9b06      	ldr	r3, [sp, #24]
 801f8fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801f8fe:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 801f902:	e0eb      	b.n	801fadc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801f904:	1c51      	adds	r1, r2, #1
 801f906:	f040 80dd 	bne.w	801fac4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801f90a:	9907      	ldr	r1, [sp, #28]
 801f90c:	4291      	cmp	r1, r2
 801f90e:	f340 80d9 	ble.w	801fac4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801f912:	1c5a      	adds	r2, r3, #1
 801f914:	f2c0 80d6 	blt.w	801fac4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801f918:	9a08      	ldr	r2, [sp, #32]
 801f91a:	4293      	cmp	r3, r2
 801f91c:	f280 80d2 	bge.w	801fac4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801f920:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801f924:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801f928:	46d8      	mov	r8, fp
 801f92a:	f1b9 0f00 	cmp.w	r9, #0
 801f92e:	dde3      	ble.n	801f8f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801f930:	1420      	asrs	r0, r4, #16
 801f932:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f936:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f93a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f93e:	f100 8127 	bmi.w	801fb90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801f942:	9d07      	ldr	r5, [sp, #28]
 801f944:	f100 0c01 	add.w	ip, r0, #1
 801f948:	4565      	cmp	r5, ip
 801f94a:	f340 8123 	ble.w	801fb94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801f94e:	2b00      	cmp	r3, #0
 801f950:	f2c0 8120 	blt.w	801fb94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801f954:	9d08      	ldr	r5, [sp, #32]
 801f956:	f103 0c01 	add.w	ip, r3, #1
 801f95a:	4565      	cmp	r5, ip
 801f95c:	f340 811a 	ble.w	801fb94 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801f960:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801f962:	fb03 0305 	mla	r3, r3, r5, r0
 801f966:	0858      	lsrs	r0, r3, #1
 801f968:	07dd      	lsls	r5, r3, #31
 801f96a:	5c38      	ldrb	r0, [r7, r0]
 801f96c:	bf54      	ite	pl
 801f96e:	f000 000f 	andpl.w	r0, r0, #15
 801f972:	1100      	asrmi	r0, r0, #4
 801f974:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f978:	b2c0      	uxtb	r0, r0
 801f97a:	2a00      	cmp	r2, #0
 801f97c:	f000 80ed 	beq.w	801fb5a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x332>
 801f980:	f103 0e01 	add.w	lr, r3, #1
 801f984:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801f988:	f01e 0f01 	tst.w	lr, #1
 801f98c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f990:	bf0c      	ite	eq
 801f992:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f996:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f99a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f99e:	fa5f fc8c 	uxtb.w	ip, ip
 801f9a2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801f9a6:	b1f9      	cbz	r1, 801f9e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801f9a8:	4453      	add	r3, sl
 801f9aa:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f9ae:	07dd      	lsls	r5, r3, #31
 801f9b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f9b4:	bf54      	ite	pl
 801f9b6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f9ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f9be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f9c2:	3301      	adds	r3, #1
 801f9c4:	fa5f fc8c 	uxtb.w	ip, ip
 801f9c8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801f9cc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f9d0:	07dd      	lsls	r5, r3, #31
 801f9d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f9d6:	bf54      	ite	pl
 801f9d8:	f00c 030f 	andpl.w	r3, ip, #15
 801f9dc:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801f9e0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f9e4:	b2db      	uxtb	r3, r3
 801f9e6:	9310      	str	r3, [sp, #64]	; 0x40
 801f9e8:	b292      	uxth	r2, r2
 801f9ea:	b289      	uxth	r1, r1
 801f9ec:	fb02 f301 	mul.w	r3, r2, r1
 801f9f0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801f9f4:	0112      	lsls	r2, r2, #4
 801f9f6:	b289      	uxth	r1, r1
 801f9f8:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801f9fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801f9fe:	1ad2      	subs	r2, r2, r3
 801fa00:	ebac 0c01 	sub.w	ip, ip, r1
 801fa04:	b292      	uxth	r2, r2
 801fa06:	436a      	muls	r2, r5
 801fa08:	fa1f fc8c 	uxth.w	ip, ip
 801fa0c:	fb00 200c 	mla	r0, r0, ip, r2
 801fa10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fa12:	fb01 0102 	mla	r1, r1, r2, r0
 801fa16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fa18:	fb03 1302 	mla	r3, r3, r2, r1
 801fa1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d046      	beq.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fa24:	4ac7      	ldr	r2, [pc, #796]	; (801fd44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801fa26:	49c8      	ldr	r1, [pc, #800]	; (801fd48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801fa28:	6812      	ldr	r2, [r2, #0]
 801fa2a:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801fa2e:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801fa32:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801fa36:	b2d2      	uxtb	r2, r2
 801fa38:	2bff      	cmp	r3, #255	; 0xff
 801fa3a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fa3e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fa42:	4615      	mov	r5, r2
 801fa44:	f000 809c 	beq.w	801fb80 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801fa48:	f8b8 0000 	ldrh.w	r0, [r8]
 801fa4c:	b29a      	uxth	r2, r3
 801fa4e:	1201      	asrs	r1, r0, #8
 801fa50:	43db      	mvns	r3, r3
 801fa52:	b2db      	uxtb	r3, r3
 801fa54:	fb1e fe02 	smulbb	lr, lr, r2
 801fa58:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fa5c:	fb01 e103 	mla	r1, r1, r3, lr
 801fa60:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fa64:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fa68:	fb1c fc02 	smulbb	ip, ip, r2
 801fa6c:	fb0e cc03 	mla	ip, lr, r3, ip
 801fa70:	00c0      	lsls	r0, r0, #3
 801fa72:	fa1f fc8c 	uxth.w	ip, ip
 801fa76:	fb15 f202 	smulbb	r2, r5, r2
 801fa7a:	b2c0      	uxtb	r0, r0
 801fa7c:	b289      	uxth	r1, r1
 801fa7e:	fb00 2303 	mla	r3, r0, r3, r2
 801fa82:	f10c 0e01 	add.w	lr, ip, #1
 801fa86:	b29b      	uxth	r3, r3
 801fa88:	1c4a      	adds	r2, r1, #1
 801fa8a:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801fa8e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fa92:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fa96:	1c5a      	adds	r2, r3, #1
 801fa98:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fa9c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801faa0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801faa4:	ea4c 0101 	orr.w	r1, ip, r1
 801faa8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801faac:	4319      	orrs	r1, r3
 801faae:	f8a8 1000 	strh.w	r1, [r8]
 801fab2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fab4:	441c      	add	r4, r3
 801fab6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fab8:	f108 0802 	add.w	r8, r8, #2
 801fabc:	441e      	add	r6, r3
 801fabe:	f109 39ff 	add.w	r9, r9, #4294967295
 801fac2:	e732      	b.n	801f92a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801fac4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fac6:	441c      	add	r4, r3
 801fac8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801faca:	441e      	add	r6, r3
 801facc:	9b06      	ldr	r3, [sp, #24]
 801face:	3b01      	subs	r3, #1
 801fad0:	9306      	str	r3, [sp, #24]
 801fad2:	f10b 0b02 	add.w	fp, fp, #2
 801fad6:	e6df      	b.n	801f898 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801fad8:	f47f aef0 	bne.w	801f8bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801fadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fade:	2b00      	cmp	r3, #0
 801fae0:	f340 813a 	ble.w	801fd58 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801fae4:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801fae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801faec:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801faf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801faf2:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801faf6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801fafa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801fafe:	eef0 6a48 	vmov.f32	s13, s16
 801fb02:	ee69 7a27 	vmul.f32	s15, s18, s15
 801fb06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb0a:	ee37 8a48 	vsub.f32	s16, s14, s16
 801fb0e:	ee16 4a90 	vmov	r4, s13
 801fb12:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801fb16:	eef0 6a68 	vmov.f32	s13, s17
 801fb1a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801fb1e:	ee18 2a10 	vmov	r2, s16
 801fb22:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801fb26:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb2a:	ee18 2a90 	vmov	r2, s17
 801fb2e:	9329      	str	r3, [sp, #164]	; 0xa4
 801fb30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb32:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb36:	932a      	str	r3, [sp, #168]	; 0xa8
 801fb38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fb3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fb3c:	3b01      	subs	r3, #1
 801fb3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fb42:	930a      	str	r3, [sp, #40]	; 0x28
 801fb44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fb46:	bf08      	it	eq
 801fb48:	4613      	moveq	r3, r2
 801fb4a:	ee16 6a90 	vmov	r6, s13
 801fb4e:	9306      	str	r3, [sp, #24]
 801fb50:	eef0 8a67 	vmov.f32	s17, s15
 801fb54:	eeb0 8a47 	vmov.f32	s16, s14
 801fb58:	e697      	b.n	801f88a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801fb5a:	2900      	cmp	r1, #0
 801fb5c:	f43f af44 	beq.w	801f9e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801fb60:	4453      	add	r3, sl
 801fb62:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801fb66:	07db      	lsls	r3, r3, #31
 801fb68:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fb6c:	bf54      	ite	pl
 801fb6e:	f00c 030f 	andpl.w	r3, ip, #15
 801fb72:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801fb76:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fb7a:	b2db      	uxtb	r3, r3
 801fb7c:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb7e:	e733      	b.n	801f9e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801fb80:	08d2      	lsrs	r2, r2, #3
 801fb82:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801fb86:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801fb8a:	f8a8 c000 	strh.w	ip, [r8]
 801fb8e:	e790      	b.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fb90:	1c45      	adds	r5, r0, #1
 801fb92:	d18e      	bne.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fb94:	9d07      	ldr	r5, [sp, #28]
 801fb96:	4285      	cmp	r5, r0
 801fb98:	dd8b      	ble.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fb9a:	1c5d      	adds	r5, r3, #1
 801fb9c:	db89      	blt.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fb9e:	9d08      	ldr	r5, [sp, #32]
 801fba0:	429d      	cmp	r5, r3
 801fba2:	dd86      	ble.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fba4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801fba8:	9b07      	ldr	r3, [sp, #28]
 801fbaa:	9300      	str	r3, [sp, #0]
 801fbac:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801fbb0:	9501      	str	r5, [sp, #4]
 801fbb2:	4653      	mov	r3, sl
 801fbb4:	463a      	mov	r2, r7
 801fbb6:	4641      	mov	r1, r8
 801fbb8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fbba:	f7ff fd4f 	bl	801f65c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801fbbe:	e778      	b.n	801fab2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801fbc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fbc2:	1422      	asrs	r2, r4, #16
 801fbc4:	1433      	asrs	r3, r6, #16
 801fbc6:	fb01 2303 	mla	r3, r1, r3, r2
 801fbca:	085a      	lsrs	r2, r3, #1
 801fbcc:	07d9      	lsls	r1, r3, #31
 801fbce:	5cba      	ldrb	r2, [r7, r2]
 801fbd0:	bf54      	ite	pl
 801fbd2:	f002 020f 	andpl.w	r2, r2, #15
 801fbd6:	1112      	asrmi	r2, r2, #4
 801fbd8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fbdc:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fbe0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801fbe4:	b2d2      	uxtb	r2, r2
 801fbe6:	2800      	cmp	r0, #0
 801fbe8:	f000 809b 	beq.w	801fd22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fa>
 801fbec:	f103 0e01 	add.w	lr, r3, #1
 801fbf0:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801fbf4:	f01e 0f01 	tst.w	lr, #1
 801fbf8:	5c79      	ldrb	r1, [r7, r1]
 801fbfa:	bf0c      	ite	eq
 801fbfc:	f001 010f 	andeq.w	r1, r1, #15
 801fc00:	1109      	asrne	r1, r1, #4
 801fc02:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fc06:	b2c9      	uxtb	r1, r1
 801fc08:	9111      	str	r1, [sp, #68]	; 0x44
 801fc0a:	f1bc 0f00 	cmp.w	ip, #0
 801fc0e:	d018      	beq.n	801fc42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801fc10:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fc12:	440b      	add	r3, r1
 801fc14:	0859      	lsrs	r1, r3, #1
 801fc16:	07dd      	lsls	r5, r3, #31
 801fc18:	5c79      	ldrb	r1, [r7, r1]
 801fc1a:	bf54      	ite	pl
 801fc1c:	f001 010f 	andpl.w	r1, r1, #15
 801fc20:	1109      	asrmi	r1, r1, #4
 801fc22:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fc26:	b2c9      	uxtb	r1, r1
 801fc28:	3301      	adds	r3, #1
 801fc2a:	910c      	str	r1, [sp, #48]	; 0x30
 801fc2c:	0859      	lsrs	r1, r3, #1
 801fc2e:	07dd      	lsls	r5, r3, #31
 801fc30:	5c79      	ldrb	r1, [r7, r1]
 801fc32:	bf54      	ite	pl
 801fc34:	f001 010f 	andpl.w	r1, r1, #15
 801fc38:	1109      	asrmi	r1, r1, #4
 801fc3a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fc3e:	b2c9      	uxtb	r1, r1
 801fc40:	9112      	str	r1, [sp, #72]	; 0x48
 801fc42:	b280      	uxth	r0, r0
 801fc44:	fa1f fc8c 	uxth.w	ip, ip
 801fc48:	fb00 f30c 	mul.w	r3, r0, ip
 801fc4c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801fc50:	0100      	lsls	r0, r0, #4
 801fc52:	fa1f fc8c 	uxth.w	ip, ip
 801fc56:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801fc5a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fc5c:	1ac0      	subs	r0, r0, r3
 801fc5e:	eba1 010c 	sub.w	r1, r1, ip
 801fc62:	b280      	uxth	r0, r0
 801fc64:	b289      	uxth	r1, r1
 801fc66:	4368      	muls	r0, r5
 801fc68:	fb02 0201 	mla	r2, r2, r1, r0
 801fc6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fc6e:	fb0c 2c01 	mla	ip, ip, r1, r2
 801fc72:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fc74:	fb03 c302 	mla	r3, r3, r2, ip
 801fc78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d047      	beq.n	801fd10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801fc80:	4a30      	ldr	r2, [pc, #192]	; (801fd44 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801fc82:	4931      	ldr	r1, [pc, #196]	; (801fd48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801fc84:	6812      	ldr	r2, [r2, #0]
 801fc86:	2bff      	cmp	r3, #255	; 0xff
 801fc88:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801fc8c:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801fc90:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801fc94:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fc98:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fc9c:	b2d2      	uxtb	r2, r2
 801fc9e:	d055      	beq.n	801fd4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801fca0:	f8b8 0000 	ldrh.w	r0, [r8]
 801fca4:	fa1f f983 	uxth.w	r9, r3
 801fca8:	1201      	asrs	r1, r0, #8
 801fcaa:	43db      	mvns	r3, r3
 801fcac:	b2db      	uxtb	r3, r3
 801fcae:	fb1e fe09 	smulbb	lr, lr, r9
 801fcb2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fcb6:	fb01 e103 	mla	r1, r1, r3, lr
 801fcba:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801fcbe:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801fcc2:	fb1c fc09 	smulbb	ip, ip, r9
 801fcc6:	fb0e cc03 	mla	ip, lr, r3, ip
 801fcca:	00c0      	lsls	r0, r0, #3
 801fccc:	fa1f fc8c 	uxth.w	ip, ip
 801fcd0:	b2c0      	uxtb	r0, r0
 801fcd2:	fb12 f209 	smulbb	r2, r2, r9
 801fcd6:	b289      	uxth	r1, r1
 801fcd8:	fb00 2203 	mla	r2, r0, r3, r2
 801fcdc:	f10c 0e01 	add.w	lr, ip, #1
 801fce0:	b292      	uxth	r2, r2
 801fce2:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801fce6:	f101 0e01 	add.w	lr, r1, #1
 801fcea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fcee:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801fcf2:	1c53      	adds	r3, r2, #1
 801fcf4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fcf8:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801fcfc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801fd00:	ea4c 0c01 	orr.w	ip, ip, r1
 801fd04:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801fd08:	ea4c 0c02 	orr.w	ip, ip, r2
 801fd0c:	f8a8 c000 	strh.w	ip, [r8]
 801fd10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd12:	441c      	add	r4, r3
 801fd14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd16:	f108 0802 	add.w	r8, r8, #2
 801fd1a:	441e      	add	r6, r3
 801fd1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fd20:	e5e6      	b.n	801f8f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801fd22:	f1bc 0f00 	cmp.w	ip, #0
 801fd26:	d08c      	beq.n	801fc42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801fd28:	990e      	ldr	r1, [sp, #56]	; 0x38
 801fd2a:	440b      	add	r3, r1
 801fd2c:	0859      	lsrs	r1, r3, #1
 801fd2e:	07db      	lsls	r3, r3, #31
 801fd30:	5c79      	ldrb	r1, [r7, r1]
 801fd32:	bf54      	ite	pl
 801fd34:	f001 010f 	andpl.w	r1, r1, #15
 801fd38:	1109      	asrmi	r1, r1, #4
 801fd3a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fd3e:	b2c9      	uxtb	r1, r1
 801fd40:	910c      	str	r1, [sp, #48]	; 0x30
 801fd42:	e77e      	b.n	801fc42 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801fd44:	20009f04 	.word	0x20009f04
 801fd48:	0007fff8 	.word	0x0007fff8
 801fd4c:	08d2      	lsrs	r2, r2, #3
 801fd4e:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801fd52:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801fd56:	e7d9      	b.n	801fd0c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e4>
 801fd58:	b015      	add	sp, #84	; 0x54
 801fd5a:	ecbd 8b08 	vpop	{d8-d11}
 801fd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd62:	bf00      	nop

0801fd64 <CRC_Lock>:
 801fd64:	b530      	push	{r4, r5, lr}
 801fd66:	4a1d      	ldr	r2, [pc, #116]	; (801fddc <CRC_Lock+0x78>)
 801fd68:	6813      	ldr	r3, [r2, #0]
 801fd6a:	f023 0301 	bic.w	r3, r3, #1
 801fd6e:	6013      	str	r3, [r2, #0]
 801fd70:	4b1b      	ldr	r3, [pc, #108]	; (801fde0 <CRC_Lock+0x7c>)
 801fd72:	681a      	ldr	r2, [r3, #0]
 801fd74:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801fd78:	4022      	ands	r2, r4
 801fd7a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801fd7e:	42aa      	cmp	r2, r5
 801fd80:	d005      	beq.n	801fd8e <CRC_Lock+0x2a>
 801fd82:	681b      	ldr	r3, [r3, #0]
 801fd84:	f24c 2270 	movw	r2, #49776	; 0xc270
 801fd88:	4023      	ands	r3, r4
 801fd8a:	4293      	cmp	r3, r2
 801fd8c:	d11d      	bne.n	801fdca <CRC_Lock+0x66>
 801fd8e:	4b15      	ldr	r3, [pc, #84]	; (801fde4 <CRC_Lock+0x80>)
 801fd90:	681b      	ldr	r3, [r3, #0]
 801fd92:	b9d3      	cbnz	r3, 801fdca <CRC_Lock+0x66>
 801fd94:	4a14      	ldr	r2, [pc, #80]	; (801fde8 <CRC_Lock+0x84>)
 801fd96:	6813      	ldr	r3, [r2, #0]
 801fd98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fd9c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801fda0:	d006      	beq.n	801fdb0 <CRC_Lock+0x4c>
 801fda2:	6813      	ldr	r3, [r2, #0]
 801fda4:	f240 4283 	movw	r2, #1155	; 0x483
 801fda8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801fdac:	4293      	cmp	r3, r2
 801fdae:	d10c      	bne.n	801fdca <CRC_Lock+0x66>
 801fdb0:	4b0e      	ldr	r3, [pc, #56]	; (801fdec <CRC_Lock+0x88>)
 801fdb2:	2201      	movs	r2, #1
 801fdb4:	601a      	str	r2, [r3, #0]
 801fdb6:	681a      	ldr	r2, [r3, #0]
 801fdb8:	2a00      	cmp	r2, #0
 801fdba:	d1fc      	bne.n	801fdb6 <CRC_Lock+0x52>
 801fdbc:	4b0c      	ldr	r3, [pc, #48]	; (801fdf0 <CRC_Lock+0x8c>)
 801fdbe:	6018      	str	r0, [r3, #0]
 801fdc0:	6818      	ldr	r0, [r3, #0]
 801fdc2:	1a43      	subs	r3, r0, r1
 801fdc4:	4258      	negs	r0, r3
 801fdc6:	4158      	adcs	r0, r3
 801fdc8:	bd30      	pop	{r4, r5, pc}
 801fdca:	4b0a      	ldr	r3, [pc, #40]	; (801fdf4 <CRC_Lock+0x90>)
 801fdcc:	2201      	movs	r2, #1
 801fdce:	601a      	str	r2, [r3, #0]
 801fdd0:	681a      	ldr	r2, [r3, #0]
 801fdd2:	2a00      	cmp	r2, #0
 801fdd4:	d1fc      	bne.n	801fdd0 <CRC_Lock+0x6c>
 801fdd6:	4b08      	ldr	r3, [pc, #32]	; (801fdf8 <CRC_Lock+0x94>)
 801fdd8:	e7f1      	b.n	801fdbe <CRC_Lock+0x5a>
 801fdda:	bf00      	nop
 801fddc:	e0002000 	.word	0xe0002000
 801fde0:	e000ed00 	.word	0xe000ed00
 801fde4:	e0042000 	.word	0xe0042000
 801fde8:	5c001000 	.word	0x5c001000
 801fdec:	58024c08 	.word	0x58024c08
 801fdf0:	58024c00 	.word	0x58024c00
 801fdf4:	40023008 	.word	0x40023008
 801fdf8:	40023000 	.word	0x40023000

0801fdfc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801fdfc:	6101      	str	r1, [r0, #16]
 801fdfe:	4770      	bx	lr

0801fe00 <_ZN8touchgfx8Gestures4tickEv>:
 801fe00:	7b83      	ldrb	r3, [r0, #14]
 801fe02:	b14b      	cbz	r3, 801fe18 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801fe04:	8903      	ldrh	r3, [r0, #8]
 801fe06:	3301      	adds	r3, #1
 801fe08:	b29b      	uxth	r3, r3
 801fe0a:	2b07      	cmp	r3, #7
 801fe0c:	8103      	strh	r3, [r0, #8]
 801fe0e:	bf81      	itttt	hi
 801fe10:	2300      	movhi	r3, #0
 801fe12:	8143      	strhhi	r3, [r0, #10]
 801fe14:	8183      	strhhi	r3, [r0, #12]
 801fe16:	7383      	strbhi	r3, [r0, #14]
 801fe18:	4770      	bx	lr
	...

0801fe1c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801fe1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801fe20:	4604      	mov	r4, r0
 801fe22:	8880      	ldrh	r0, [r0, #4]
 801fe24:	f8ad 0006 	strh.w	r0, [sp, #6]
 801fe28:	4698      	mov	r8, r3
 801fe2a:	eba8 0000 	sub.w	r0, r8, r0
 801fe2e:	4b1c      	ldr	r3, [pc, #112]	; (801fea0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801fe30:	9300      	str	r3, [sp, #0]
 801fe32:	b280      	uxth	r0, r0
 801fe34:	2300      	movs	r3, #0
 801fe36:	f88d 3004 	strb.w	r3, [sp, #4]
 801fe3a:	b203      	sxth	r3, r0
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	bfb8      	it	lt
 801fe40:	4240      	neglt	r0, r0
 801fe42:	4617      	mov	r7, r2
 801fe44:	8aa2      	ldrh	r2, [r4, #20]
 801fe46:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801fe4a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801fe4e:	bfb8      	it	lt
 801fe50:	b203      	sxthlt	r3, r0
 801fe52:	460e      	mov	r6, r1
 801fe54:	4293      	cmp	r3, r2
 801fe56:	88e1      	ldrh	r1, [r4, #6]
 801fe58:	f8ad 1008 	strh.w	r1, [sp, #8]
 801fe5c:	f8ad 500c 	strh.w	r5, [sp, #12]
 801fe60:	dc08      	bgt.n	801fe74 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801fe62:	1a69      	subs	r1, r5, r1
 801fe64:	b289      	uxth	r1, r1
 801fe66:	b20b      	sxth	r3, r1
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	bfbc      	itt	lt
 801fe6c:	4249      	neglt	r1, r1
 801fe6e:	b20b      	sxthlt	r3, r1
 801fe70:	429a      	cmp	r2, r3
 801fe72:	da13      	bge.n	801fe9c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801fe74:	6920      	ldr	r0, [r4, #16]
 801fe76:	6803      	ldr	r3, [r0, #0]
 801fe78:	4669      	mov	r1, sp
 801fe7a:	685b      	ldr	r3, [r3, #4]
 801fe7c:	4798      	blx	r3
 801fe7e:	eba8 0606 	sub.w	r6, r8, r6
 801fe82:	2300      	movs	r3, #0
 801fe84:	1bef      	subs	r7, r5, r7
 801fe86:	2001      	movs	r0, #1
 801fe88:	8123      	strh	r3, [r4, #8]
 801fe8a:	8166      	strh	r6, [r4, #10]
 801fe8c:	81a7      	strh	r7, [r4, #12]
 801fe8e:	f8a4 8004 	strh.w	r8, [r4, #4]
 801fe92:	80e5      	strh	r5, [r4, #6]
 801fe94:	73a0      	strb	r0, [r4, #14]
 801fe96:	b004      	add	sp, #16
 801fe98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe9c:	2000      	movs	r0, #0
 801fe9e:	e7fa      	b.n	801fe96 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801fea0:	0802308c 	.word	0x0802308c

0801fea4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801fea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fea6:	461e      	mov	r6, r3
 801fea8:	1e4b      	subs	r3, r1, #1
 801feaa:	2b01      	cmp	r3, #1
 801feac:	b085      	sub	sp, #20
 801feae:	4604      	mov	r4, r0
 801feb0:	460d      	mov	r5, r1
 801feb2:	4617      	mov	r7, r2
 801feb4:	d84b      	bhi.n	801ff4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801feb6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801feba:	1cd3      	adds	r3, r2, #3
 801febc:	b29b      	uxth	r3, r3
 801febe:	2b06      	cmp	r3, #6
 801fec0:	d916      	bls.n	801fef0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801fec2:	f8df c098 	ldr.w	ip, [pc, #152]	; 801ff5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801fec6:	f8cd c004 	str.w	ip, [sp, #4]
 801feca:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fece:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801fed2:	6900      	ldr	r0, [r0, #16]
 801fed4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801fed8:	f04f 0c00 	mov.w	ip, #0
 801fedc:	f88d c008 	strb.w	ip, [sp, #8]
 801fee0:	f8ad 200a 	strh.w	r2, [sp, #10]
 801fee4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801fee8:	6803      	ldr	r3, [r0, #0]
 801feea:	a901      	add	r1, sp, #4
 801feec:	689b      	ldr	r3, [r3, #8]
 801feee:	4798      	blx	r3
 801fef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fef4:	1cd3      	adds	r3, r2, #3
 801fef6:	b29b      	uxth	r3, r3
 801fef8:	2b06      	cmp	r3, #6
 801fefa:	d916      	bls.n	801ff2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801fefc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801ff5c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801ff00:	f8cd c004 	str.w	ip, [sp, #4]
 801ff04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ff08:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ff0c:	6920      	ldr	r0, [r4, #16]
 801ff0e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801ff12:	f04f 0c01 	mov.w	ip, #1
 801ff16:	f88d c008 	strb.w	ip, [sp, #8]
 801ff1a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801ff1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ff22:	6803      	ldr	r3, [r0, #0]
 801ff24:	a901      	add	r1, sp, #4
 801ff26:	689b      	ldr	r3, [r3, #8]
 801ff28:	4798      	blx	r3
 801ff2a:	4b0b      	ldr	r3, [pc, #44]	; (801ff58 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 801ff2c:	9301      	str	r3, [sp, #4]
 801ff2e:	6920      	ldr	r0, [r4, #16]
 801ff30:	f88d 5008 	strb.w	r5, [sp, #8]
 801ff34:	2300      	movs	r3, #0
 801ff36:	f8ad 700a 	strh.w	r7, [sp, #10]
 801ff3a:	f8ad 600c 	strh.w	r6, [sp, #12]
 801ff3e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ff42:	6803      	ldr	r3, [r0, #0]
 801ff44:	a901      	add	r1, sp, #4
 801ff46:	681b      	ldr	r3, [r3, #0]
 801ff48:	4798      	blx	r3
 801ff4a:	b005      	add	sp, #20
 801ff4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff4e:	2900      	cmp	r1, #0
 801ff50:	d1eb      	bne.n	801ff2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ff52:	80a2      	strh	r2, [r4, #4]
 801ff54:	80c6      	strh	r6, [r0, #6]
 801ff56:	e7e8      	b.n	801ff2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801ff58:	08023078 	.word	0x08023078
 801ff5c:	080230a0 	.word	0x080230a0

0801ff60 <__aeabi_atexit>:
 801ff60:	460b      	mov	r3, r1
 801ff62:	4601      	mov	r1, r0
 801ff64:	4618      	mov	r0, r3
 801ff66:	f000 b853 	b.w	8020010 <__cxa_atexit>

0801ff6a <__cxa_pure_virtual>:
 801ff6a:	b508      	push	{r3, lr}
 801ff6c:	f000 f820 	bl	801ffb0 <_ZSt9terminatev>

0801ff70 <_ZdlPvj>:
 801ff70:	f000 b80f 	b.w	801ff92 <_ZdlPv>

0801ff74 <__cxa_guard_acquire>:
 801ff74:	6803      	ldr	r3, [r0, #0]
 801ff76:	07db      	lsls	r3, r3, #31
 801ff78:	d406      	bmi.n	801ff88 <__cxa_guard_acquire+0x14>
 801ff7a:	7843      	ldrb	r3, [r0, #1]
 801ff7c:	b103      	cbz	r3, 801ff80 <__cxa_guard_acquire+0xc>
 801ff7e:	deff      	udf	#255	; 0xff
 801ff80:	2301      	movs	r3, #1
 801ff82:	7043      	strb	r3, [r0, #1]
 801ff84:	4618      	mov	r0, r3
 801ff86:	4770      	bx	lr
 801ff88:	2000      	movs	r0, #0
 801ff8a:	4770      	bx	lr

0801ff8c <__cxa_guard_release>:
 801ff8c:	2301      	movs	r3, #1
 801ff8e:	6003      	str	r3, [r0, #0]
 801ff90:	4770      	bx	lr

0801ff92 <_ZdlPv>:
 801ff92:	f000 b88f 	b.w	80200b4 <free>

0801ff96 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801ff96:	b508      	push	{r3, lr}
 801ff98:	4780      	blx	r0
 801ff9a:	f000 f80e 	bl	801ffba <abort>
	...

0801ffa0 <_ZSt13get_terminatev>:
 801ffa0:	4b02      	ldr	r3, [pc, #8]	; (801ffac <_ZSt13get_terminatev+0xc>)
 801ffa2:	6818      	ldr	r0, [r3, #0]
 801ffa4:	f3bf 8f5b 	dmb	ish
 801ffa8:	4770      	bx	lr
 801ffaa:	bf00      	nop
 801ffac:	20000108 	.word	0x20000108

0801ffb0 <_ZSt9terminatev>:
 801ffb0:	b508      	push	{r3, lr}
 801ffb2:	f7ff fff5 	bl	801ffa0 <_ZSt13get_terminatev>
 801ffb6:	f7ff ffee 	bl	801ff96 <_ZN10__cxxabiv111__terminateEPFvvE>

0801ffba <abort>:
 801ffba:	b508      	push	{r3, lr}
 801ffbc:	2006      	movs	r0, #6
 801ffbe:	f000 fc3d 	bl	802083c <raise>
 801ffc2:	2001      	movs	r0, #1
 801ffc4:	f7e2 f972 	bl	80022ac <_exit>

0801ffc8 <__assert_func>:
 801ffc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ffca:	461c      	mov	r4, r3
 801ffcc:	4b09      	ldr	r3, [pc, #36]	; (801fff4 <__assert_func+0x2c>)
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	4605      	mov	r5, r0
 801ffd2:	68d8      	ldr	r0, [r3, #12]
 801ffd4:	b152      	cbz	r2, 801ffec <__assert_func+0x24>
 801ffd6:	4b08      	ldr	r3, [pc, #32]	; (801fff8 <__assert_func+0x30>)
 801ffd8:	9100      	str	r1, [sp, #0]
 801ffda:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801ffde:	4907      	ldr	r1, [pc, #28]	; (801fffc <__assert_func+0x34>)
 801ffe0:	462b      	mov	r3, r5
 801ffe2:	4622      	mov	r2, r4
 801ffe4:	f000 f828 	bl	8020038 <fiprintf>
 801ffe8:	f7ff ffe7 	bl	801ffba <abort>
 801ffec:	4b04      	ldr	r3, [pc, #16]	; (8020000 <__assert_func+0x38>)
 801ffee:	461a      	mov	r2, r3
 801fff0:	e7f2      	b.n	801ffd8 <__assert_func+0x10>
 801fff2:	bf00      	nop
 801fff4:	2000010c 	.word	0x2000010c
 801fff8:	080245f4 	.word	0x080245f4
 801fffc:	08024601 	.word	0x08024601
 8020000:	0802462f 	.word	0x0802462f

08020004 <atexit>:
 8020004:	2300      	movs	r3, #0
 8020006:	4601      	mov	r1, r0
 8020008:	461a      	mov	r2, r3
 802000a:	4618      	mov	r0, r3
 802000c:	f000 bcf2 	b.w	80209f4 <__register_exitproc>

08020010 <__cxa_atexit>:
 8020010:	b510      	push	{r4, lr}
 8020012:	4c05      	ldr	r4, [pc, #20]	; (8020028 <__cxa_atexit+0x18>)
 8020014:	4613      	mov	r3, r2
 8020016:	b12c      	cbz	r4, 8020024 <__cxa_atexit+0x14>
 8020018:	460a      	mov	r2, r1
 802001a:	4601      	mov	r1, r0
 802001c:	2002      	movs	r0, #2
 802001e:	f000 fce9 	bl	80209f4 <__register_exitproc>
 8020022:	bd10      	pop	{r4, pc}
 8020024:	4620      	mov	r0, r4
 8020026:	e7fc      	b.n	8020022 <__cxa_atexit+0x12>
 8020028:	080209f5 	.word	0x080209f5

0802002c <__errno>:
 802002c:	4b01      	ldr	r3, [pc, #4]	; (8020034 <__errno+0x8>)
 802002e:	6818      	ldr	r0, [r3, #0]
 8020030:	4770      	bx	lr
 8020032:	bf00      	nop
 8020034:	2000010c 	.word	0x2000010c

08020038 <fiprintf>:
 8020038:	b40e      	push	{r1, r2, r3}
 802003a:	b503      	push	{r0, r1, lr}
 802003c:	4601      	mov	r1, r0
 802003e:	ab03      	add	r3, sp, #12
 8020040:	4805      	ldr	r0, [pc, #20]	; (8020058 <fiprintf+0x20>)
 8020042:	f853 2b04 	ldr.w	r2, [r3], #4
 8020046:	6800      	ldr	r0, [r0, #0]
 8020048:	9301      	str	r3, [sp, #4]
 802004a:	f000 f921 	bl	8020290 <_vfiprintf_r>
 802004e:	b002      	add	sp, #8
 8020050:	f85d eb04 	ldr.w	lr, [sp], #4
 8020054:	b003      	add	sp, #12
 8020056:	4770      	bx	lr
 8020058:	2000010c 	.word	0x2000010c

0802005c <__libc_init_array>:
 802005c:	b570      	push	{r4, r5, r6, lr}
 802005e:	4e0d      	ldr	r6, [pc, #52]	; (8020094 <__libc_init_array+0x38>)
 8020060:	4c0d      	ldr	r4, [pc, #52]	; (8020098 <__libc_init_array+0x3c>)
 8020062:	1ba4      	subs	r4, r4, r6
 8020064:	10a4      	asrs	r4, r4, #2
 8020066:	2500      	movs	r5, #0
 8020068:	42a5      	cmp	r5, r4
 802006a:	d109      	bne.n	8020080 <__libc_init_array+0x24>
 802006c:	4e0b      	ldr	r6, [pc, #44]	; (802009c <__libc_init_array+0x40>)
 802006e:	4c0c      	ldr	r4, [pc, #48]	; (80200a0 <__libc_init_array+0x44>)
 8020070:	f000 ffb0 	bl	8020fd4 <_init>
 8020074:	1ba4      	subs	r4, r4, r6
 8020076:	10a4      	asrs	r4, r4, #2
 8020078:	2500      	movs	r5, #0
 802007a:	42a5      	cmp	r5, r4
 802007c:	d105      	bne.n	802008a <__libc_init_array+0x2e>
 802007e:	bd70      	pop	{r4, r5, r6, pc}
 8020080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020084:	4798      	blx	r3
 8020086:	3501      	adds	r5, #1
 8020088:	e7ee      	b.n	8020068 <__libc_init_array+0xc>
 802008a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802008e:	4798      	blx	r3
 8020090:	3501      	adds	r5, #1
 8020092:	e7f2      	b.n	802007a <__libc_init_array+0x1e>
 8020094:	08096184 	.word	0x08096184
 8020098:	08096184 	.word	0x08096184
 802009c:	08096184 	.word	0x08096184
 80200a0:	08096198 	.word	0x08096198

080200a4 <malloc>:
 80200a4:	4b02      	ldr	r3, [pc, #8]	; (80200b0 <malloc+0xc>)
 80200a6:	4601      	mov	r1, r0
 80200a8:	6818      	ldr	r0, [r3, #0]
 80200aa:	f000 b86d 	b.w	8020188 <_malloc_r>
 80200ae:	bf00      	nop
 80200b0:	2000010c 	.word	0x2000010c

080200b4 <free>:
 80200b4:	4b02      	ldr	r3, [pc, #8]	; (80200c0 <free+0xc>)
 80200b6:	4601      	mov	r1, r0
 80200b8:	6818      	ldr	r0, [r3, #0]
 80200ba:	f000 b817 	b.w	80200ec <_free_r>
 80200be:	bf00      	nop
 80200c0:	2000010c 	.word	0x2000010c

080200c4 <memcpy>:
 80200c4:	b510      	push	{r4, lr}
 80200c6:	1e43      	subs	r3, r0, #1
 80200c8:	440a      	add	r2, r1
 80200ca:	4291      	cmp	r1, r2
 80200cc:	d100      	bne.n	80200d0 <memcpy+0xc>
 80200ce:	bd10      	pop	{r4, pc}
 80200d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80200d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80200d8:	e7f7      	b.n	80200ca <memcpy+0x6>

080200da <memset>:
 80200da:	4402      	add	r2, r0
 80200dc:	4603      	mov	r3, r0
 80200de:	4293      	cmp	r3, r2
 80200e0:	d100      	bne.n	80200e4 <memset+0xa>
 80200e2:	4770      	bx	lr
 80200e4:	f803 1b01 	strb.w	r1, [r3], #1
 80200e8:	e7f9      	b.n	80200de <memset+0x4>
	...

080200ec <_free_r>:
 80200ec:	b538      	push	{r3, r4, r5, lr}
 80200ee:	4605      	mov	r5, r0
 80200f0:	2900      	cmp	r1, #0
 80200f2:	d045      	beq.n	8020180 <_free_r+0x94>
 80200f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80200f8:	1f0c      	subs	r4, r1, #4
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	bfb8      	it	lt
 80200fe:	18e4      	addlt	r4, r4, r3
 8020100:	f000 feba 	bl	8020e78 <__malloc_lock>
 8020104:	4a1f      	ldr	r2, [pc, #124]	; (8020184 <_free_r+0x98>)
 8020106:	6813      	ldr	r3, [r2, #0]
 8020108:	4610      	mov	r0, r2
 802010a:	b933      	cbnz	r3, 802011a <_free_r+0x2e>
 802010c:	6063      	str	r3, [r4, #4]
 802010e:	6014      	str	r4, [r2, #0]
 8020110:	4628      	mov	r0, r5
 8020112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020116:	f000 beb0 	b.w	8020e7a <__malloc_unlock>
 802011a:	42a3      	cmp	r3, r4
 802011c:	d90c      	bls.n	8020138 <_free_r+0x4c>
 802011e:	6821      	ldr	r1, [r4, #0]
 8020120:	1862      	adds	r2, r4, r1
 8020122:	4293      	cmp	r3, r2
 8020124:	bf04      	itt	eq
 8020126:	681a      	ldreq	r2, [r3, #0]
 8020128:	685b      	ldreq	r3, [r3, #4]
 802012a:	6063      	str	r3, [r4, #4]
 802012c:	bf04      	itt	eq
 802012e:	1852      	addeq	r2, r2, r1
 8020130:	6022      	streq	r2, [r4, #0]
 8020132:	6004      	str	r4, [r0, #0]
 8020134:	e7ec      	b.n	8020110 <_free_r+0x24>
 8020136:	4613      	mov	r3, r2
 8020138:	685a      	ldr	r2, [r3, #4]
 802013a:	b10a      	cbz	r2, 8020140 <_free_r+0x54>
 802013c:	42a2      	cmp	r2, r4
 802013e:	d9fa      	bls.n	8020136 <_free_r+0x4a>
 8020140:	6819      	ldr	r1, [r3, #0]
 8020142:	1858      	adds	r0, r3, r1
 8020144:	42a0      	cmp	r0, r4
 8020146:	d10b      	bne.n	8020160 <_free_r+0x74>
 8020148:	6820      	ldr	r0, [r4, #0]
 802014a:	4401      	add	r1, r0
 802014c:	1858      	adds	r0, r3, r1
 802014e:	4282      	cmp	r2, r0
 8020150:	6019      	str	r1, [r3, #0]
 8020152:	d1dd      	bne.n	8020110 <_free_r+0x24>
 8020154:	6810      	ldr	r0, [r2, #0]
 8020156:	6852      	ldr	r2, [r2, #4]
 8020158:	605a      	str	r2, [r3, #4]
 802015a:	4401      	add	r1, r0
 802015c:	6019      	str	r1, [r3, #0]
 802015e:	e7d7      	b.n	8020110 <_free_r+0x24>
 8020160:	d902      	bls.n	8020168 <_free_r+0x7c>
 8020162:	230c      	movs	r3, #12
 8020164:	602b      	str	r3, [r5, #0]
 8020166:	e7d3      	b.n	8020110 <_free_r+0x24>
 8020168:	6820      	ldr	r0, [r4, #0]
 802016a:	1821      	adds	r1, r4, r0
 802016c:	428a      	cmp	r2, r1
 802016e:	bf04      	itt	eq
 8020170:	6811      	ldreq	r1, [r2, #0]
 8020172:	6852      	ldreq	r2, [r2, #4]
 8020174:	6062      	str	r2, [r4, #4]
 8020176:	bf04      	itt	eq
 8020178:	1809      	addeq	r1, r1, r0
 802017a:	6021      	streq	r1, [r4, #0]
 802017c:	605c      	str	r4, [r3, #4]
 802017e:	e7c7      	b.n	8020110 <_free_r+0x24>
 8020180:	bd38      	pop	{r3, r4, r5, pc}
 8020182:	bf00      	nop
 8020184:	2000a018 	.word	0x2000a018

08020188 <_malloc_r>:
 8020188:	b570      	push	{r4, r5, r6, lr}
 802018a:	1ccd      	adds	r5, r1, #3
 802018c:	f025 0503 	bic.w	r5, r5, #3
 8020190:	3508      	adds	r5, #8
 8020192:	2d0c      	cmp	r5, #12
 8020194:	bf38      	it	cc
 8020196:	250c      	movcc	r5, #12
 8020198:	2d00      	cmp	r5, #0
 802019a:	4606      	mov	r6, r0
 802019c:	db01      	blt.n	80201a2 <_malloc_r+0x1a>
 802019e:	42a9      	cmp	r1, r5
 80201a0:	d903      	bls.n	80201aa <_malloc_r+0x22>
 80201a2:	230c      	movs	r3, #12
 80201a4:	6033      	str	r3, [r6, #0]
 80201a6:	2000      	movs	r0, #0
 80201a8:	bd70      	pop	{r4, r5, r6, pc}
 80201aa:	f000 fe65 	bl	8020e78 <__malloc_lock>
 80201ae:	4a21      	ldr	r2, [pc, #132]	; (8020234 <_malloc_r+0xac>)
 80201b0:	6814      	ldr	r4, [r2, #0]
 80201b2:	4621      	mov	r1, r4
 80201b4:	b991      	cbnz	r1, 80201dc <_malloc_r+0x54>
 80201b6:	4c20      	ldr	r4, [pc, #128]	; (8020238 <_malloc_r+0xb0>)
 80201b8:	6823      	ldr	r3, [r4, #0]
 80201ba:	b91b      	cbnz	r3, 80201c4 <_malloc_r+0x3c>
 80201bc:	4630      	mov	r0, r6
 80201be:	f000 fb05 	bl	80207cc <_sbrk_r>
 80201c2:	6020      	str	r0, [r4, #0]
 80201c4:	4629      	mov	r1, r5
 80201c6:	4630      	mov	r0, r6
 80201c8:	f000 fb00 	bl	80207cc <_sbrk_r>
 80201cc:	1c43      	adds	r3, r0, #1
 80201ce:	d124      	bne.n	802021a <_malloc_r+0x92>
 80201d0:	230c      	movs	r3, #12
 80201d2:	6033      	str	r3, [r6, #0]
 80201d4:	4630      	mov	r0, r6
 80201d6:	f000 fe50 	bl	8020e7a <__malloc_unlock>
 80201da:	e7e4      	b.n	80201a6 <_malloc_r+0x1e>
 80201dc:	680b      	ldr	r3, [r1, #0]
 80201de:	1b5b      	subs	r3, r3, r5
 80201e0:	d418      	bmi.n	8020214 <_malloc_r+0x8c>
 80201e2:	2b0b      	cmp	r3, #11
 80201e4:	d90f      	bls.n	8020206 <_malloc_r+0x7e>
 80201e6:	600b      	str	r3, [r1, #0]
 80201e8:	50cd      	str	r5, [r1, r3]
 80201ea:	18cc      	adds	r4, r1, r3
 80201ec:	4630      	mov	r0, r6
 80201ee:	f000 fe44 	bl	8020e7a <__malloc_unlock>
 80201f2:	f104 000b 	add.w	r0, r4, #11
 80201f6:	1d23      	adds	r3, r4, #4
 80201f8:	f020 0007 	bic.w	r0, r0, #7
 80201fc:	1ac3      	subs	r3, r0, r3
 80201fe:	d0d3      	beq.n	80201a8 <_malloc_r+0x20>
 8020200:	425a      	negs	r2, r3
 8020202:	50e2      	str	r2, [r4, r3]
 8020204:	e7d0      	b.n	80201a8 <_malloc_r+0x20>
 8020206:	428c      	cmp	r4, r1
 8020208:	684b      	ldr	r3, [r1, #4]
 802020a:	bf16      	itet	ne
 802020c:	6063      	strne	r3, [r4, #4]
 802020e:	6013      	streq	r3, [r2, #0]
 8020210:	460c      	movne	r4, r1
 8020212:	e7eb      	b.n	80201ec <_malloc_r+0x64>
 8020214:	460c      	mov	r4, r1
 8020216:	6849      	ldr	r1, [r1, #4]
 8020218:	e7cc      	b.n	80201b4 <_malloc_r+0x2c>
 802021a:	1cc4      	adds	r4, r0, #3
 802021c:	f024 0403 	bic.w	r4, r4, #3
 8020220:	42a0      	cmp	r0, r4
 8020222:	d005      	beq.n	8020230 <_malloc_r+0xa8>
 8020224:	1a21      	subs	r1, r4, r0
 8020226:	4630      	mov	r0, r6
 8020228:	f000 fad0 	bl	80207cc <_sbrk_r>
 802022c:	3001      	adds	r0, #1
 802022e:	d0cf      	beq.n	80201d0 <_malloc_r+0x48>
 8020230:	6025      	str	r5, [r4, #0]
 8020232:	e7db      	b.n	80201ec <_malloc_r+0x64>
 8020234:	2000a018 	.word	0x2000a018
 8020238:	2000a01c 	.word	0x2000a01c

0802023c <__sfputc_r>:
 802023c:	6893      	ldr	r3, [r2, #8]
 802023e:	3b01      	subs	r3, #1
 8020240:	2b00      	cmp	r3, #0
 8020242:	b410      	push	{r4}
 8020244:	6093      	str	r3, [r2, #8]
 8020246:	da08      	bge.n	802025a <__sfputc_r+0x1e>
 8020248:	6994      	ldr	r4, [r2, #24]
 802024a:	42a3      	cmp	r3, r4
 802024c:	db01      	blt.n	8020252 <__sfputc_r+0x16>
 802024e:	290a      	cmp	r1, #10
 8020250:	d103      	bne.n	802025a <__sfputc_r+0x1e>
 8020252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020256:	f000 bb0d 	b.w	8020874 <__swbuf_r>
 802025a:	6813      	ldr	r3, [r2, #0]
 802025c:	1c58      	adds	r0, r3, #1
 802025e:	6010      	str	r0, [r2, #0]
 8020260:	7019      	strb	r1, [r3, #0]
 8020262:	4608      	mov	r0, r1
 8020264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020268:	4770      	bx	lr

0802026a <__sfputs_r>:
 802026a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802026c:	4606      	mov	r6, r0
 802026e:	460f      	mov	r7, r1
 8020270:	4614      	mov	r4, r2
 8020272:	18d5      	adds	r5, r2, r3
 8020274:	42ac      	cmp	r4, r5
 8020276:	d101      	bne.n	802027c <__sfputs_r+0x12>
 8020278:	2000      	movs	r0, #0
 802027a:	e007      	b.n	802028c <__sfputs_r+0x22>
 802027c:	463a      	mov	r2, r7
 802027e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020282:	4630      	mov	r0, r6
 8020284:	f7ff ffda 	bl	802023c <__sfputc_r>
 8020288:	1c43      	adds	r3, r0, #1
 802028a:	d1f3      	bne.n	8020274 <__sfputs_r+0xa>
 802028c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020290 <_vfiprintf_r>:
 8020290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020294:	460c      	mov	r4, r1
 8020296:	b09d      	sub	sp, #116	; 0x74
 8020298:	4617      	mov	r7, r2
 802029a:	461d      	mov	r5, r3
 802029c:	4606      	mov	r6, r0
 802029e:	b118      	cbz	r0, 80202a8 <_vfiprintf_r+0x18>
 80202a0:	6983      	ldr	r3, [r0, #24]
 80202a2:	b90b      	cbnz	r3, 80202a8 <_vfiprintf_r+0x18>
 80202a4:	f000 fcfa 	bl	8020c9c <__sinit>
 80202a8:	4b7c      	ldr	r3, [pc, #496]	; (802049c <_vfiprintf_r+0x20c>)
 80202aa:	429c      	cmp	r4, r3
 80202ac:	d158      	bne.n	8020360 <_vfiprintf_r+0xd0>
 80202ae:	6874      	ldr	r4, [r6, #4]
 80202b0:	89a3      	ldrh	r3, [r4, #12]
 80202b2:	0718      	lsls	r0, r3, #28
 80202b4:	d55e      	bpl.n	8020374 <_vfiprintf_r+0xe4>
 80202b6:	6923      	ldr	r3, [r4, #16]
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	d05b      	beq.n	8020374 <_vfiprintf_r+0xe4>
 80202bc:	2300      	movs	r3, #0
 80202be:	9309      	str	r3, [sp, #36]	; 0x24
 80202c0:	2320      	movs	r3, #32
 80202c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80202c6:	2330      	movs	r3, #48	; 0x30
 80202c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80202cc:	9503      	str	r5, [sp, #12]
 80202ce:	f04f 0b01 	mov.w	fp, #1
 80202d2:	46b8      	mov	r8, r7
 80202d4:	4645      	mov	r5, r8
 80202d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80202da:	b10b      	cbz	r3, 80202e0 <_vfiprintf_r+0x50>
 80202dc:	2b25      	cmp	r3, #37	; 0x25
 80202de:	d154      	bne.n	802038a <_vfiprintf_r+0xfa>
 80202e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80202e4:	d00b      	beq.n	80202fe <_vfiprintf_r+0x6e>
 80202e6:	4653      	mov	r3, sl
 80202e8:	463a      	mov	r2, r7
 80202ea:	4621      	mov	r1, r4
 80202ec:	4630      	mov	r0, r6
 80202ee:	f7ff ffbc 	bl	802026a <__sfputs_r>
 80202f2:	3001      	adds	r0, #1
 80202f4:	f000 80c2 	beq.w	802047c <_vfiprintf_r+0x1ec>
 80202f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202fa:	4453      	add	r3, sl
 80202fc:	9309      	str	r3, [sp, #36]	; 0x24
 80202fe:	f898 3000 	ldrb.w	r3, [r8]
 8020302:	2b00      	cmp	r3, #0
 8020304:	f000 80ba 	beq.w	802047c <_vfiprintf_r+0x1ec>
 8020308:	2300      	movs	r3, #0
 802030a:	f04f 32ff 	mov.w	r2, #4294967295
 802030e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020312:	9304      	str	r3, [sp, #16]
 8020314:	9307      	str	r3, [sp, #28]
 8020316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802031a:	931a      	str	r3, [sp, #104]	; 0x68
 802031c:	46a8      	mov	r8, r5
 802031e:	2205      	movs	r2, #5
 8020320:	f818 1b01 	ldrb.w	r1, [r8], #1
 8020324:	485e      	ldr	r0, [pc, #376]	; (80204a0 <_vfiprintf_r+0x210>)
 8020326:	f7df ff63 	bl	80001f0 <memchr>
 802032a:	9b04      	ldr	r3, [sp, #16]
 802032c:	bb78      	cbnz	r0, 802038e <_vfiprintf_r+0xfe>
 802032e:	06d9      	lsls	r1, r3, #27
 8020330:	bf44      	itt	mi
 8020332:	2220      	movmi	r2, #32
 8020334:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020338:	071a      	lsls	r2, r3, #28
 802033a:	bf44      	itt	mi
 802033c:	222b      	movmi	r2, #43	; 0x2b
 802033e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020342:	782a      	ldrb	r2, [r5, #0]
 8020344:	2a2a      	cmp	r2, #42	; 0x2a
 8020346:	d02a      	beq.n	802039e <_vfiprintf_r+0x10e>
 8020348:	9a07      	ldr	r2, [sp, #28]
 802034a:	46a8      	mov	r8, r5
 802034c:	2000      	movs	r0, #0
 802034e:	250a      	movs	r5, #10
 8020350:	4641      	mov	r1, r8
 8020352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020356:	3b30      	subs	r3, #48	; 0x30
 8020358:	2b09      	cmp	r3, #9
 802035a:	d969      	bls.n	8020430 <_vfiprintf_r+0x1a0>
 802035c:	b360      	cbz	r0, 80203b8 <_vfiprintf_r+0x128>
 802035e:	e024      	b.n	80203aa <_vfiprintf_r+0x11a>
 8020360:	4b50      	ldr	r3, [pc, #320]	; (80204a4 <_vfiprintf_r+0x214>)
 8020362:	429c      	cmp	r4, r3
 8020364:	d101      	bne.n	802036a <_vfiprintf_r+0xda>
 8020366:	68b4      	ldr	r4, [r6, #8]
 8020368:	e7a2      	b.n	80202b0 <_vfiprintf_r+0x20>
 802036a:	4b4f      	ldr	r3, [pc, #316]	; (80204a8 <_vfiprintf_r+0x218>)
 802036c:	429c      	cmp	r4, r3
 802036e:	bf08      	it	eq
 8020370:	68f4      	ldreq	r4, [r6, #12]
 8020372:	e79d      	b.n	80202b0 <_vfiprintf_r+0x20>
 8020374:	4621      	mov	r1, r4
 8020376:	4630      	mov	r0, r6
 8020378:	f000 face 	bl	8020918 <__swsetup_r>
 802037c:	2800      	cmp	r0, #0
 802037e:	d09d      	beq.n	80202bc <_vfiprintf_r+0x2c>
 8020380:	f04f 30ff 	mov.w	r0, #4294967295
 8020384:	b01d      	add	sp, #116	; 0x74
 8020386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802038a:	46a8      	mov	r8, r5
 802038c:	e7a2      	b.n	80202d4 <_vfiprintf_r+0x44>
 802038e:	4a44      	ldr	r2, [pc, #272]	; (80204a0 <_vfiprintf_r+0x210>)
 8020390:	1a80      	subs	r0, r0, r2
 8020392:	fa0b f000 	lsl.w	r0, fp, r0
 8020396:	4318      	orrs	r0, r3
 8020398:	9004      	str	r0, [sp, #16]
 802039a:	4645      	mov	r5, r8
 802039c:	e7be      	b.n	802031c <_vfiprintf_r+0x8c>
 802039e:	9a03      	ldr	r2, [sp, #12]
 80203a0:	1d11      	adds	r1, r2, #4
 80203a2:	6812      	ldr	r2, [r2, #0]
 80203a4:	9103      	str	r1, [sp, #12]
 80203a6:	2a00      	cmp	r2, #0
 80203a8:	db01      	blt.n	80203ae <_vfiprintf_r+0x11e>
 80203aa:	9207      	str	r2, [sp, #28]
 80203ac:	e004      	b.n	80203b8 <_vfiprintf_r+0x128>
 80203ae:	4252      	negs	r2, r2
 80203b0:	f043 0302 	orr.w	r3, r3, #2
 80203b4:	9207      	str	r2, [sp, #28]
 80203b6:	9304      	str	r3, [sp, #16]
 80203b8:	f898 3000 	ldrb.w	r3, [r8]
 80203bc:	2b2e      	cmp	r3, #46	; 0x2e
 80203be:	d10e      	bne.n	80203de <_vfiprintf_r+0x14e>
 80203c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80203c4:	2b2a      	cmp	r3, #42	; 0x2a
 80203c6:	d138      	bne.n	802043a <_vfiprintf_r+0x1aa>
 80203c8:	9b03      	ldr	r3, [sp, #12]
 80203ca:	1d1a      	adds	r2, r3, #4
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	9203      	str	r2, [sp, #12]
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	bfb8      	it	lt
 80203d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80203d8:	f108 0802 	add.w	r8, r8, #2
 80203dc:	9305      	str	r3, [sp, #20]
 80203de:	4d33      	ldr	r5, [pc, #204]	; (80204ac <_vfiprintf_r+0x21c>)
 80203e0:	f898 1000 	ldrb.w	r1, [r8]
 80203e4:	2203      	movs	r2, #3
 80203e6:	4628      	mov	r0, r5
 80203e8:	f7df ff02 	bl	80001f0 <memchr>
 80203ec:	b140      	cbz	r0, 8020400 <_vfiprintf_r+0x170>
 80203ee:	2340      	movs	r3, #64	; 0x40
 80203f0:	1b40      	subs	r0, r0, r5
 80203f2:	fa03 f000 	lsl.w	r0, r3, r0
 80203f6:	9b04      	ldr	r3, [sp, #16]
 80203f8:	4303      	orrs	r3, r0
 80203fa:	f108 0801 	add.w	r8, r8, #1
 80203fe:	9304      	str	r3, [sp, #16]
 8020400:	f898 1000 	ldrb.w	r1, [r8]
 8020404:	482a      	ldr	r0, [pc, #168]	; (80204b0 <_vfiprintf_r+0x220>)
 8020406:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802040a:	2206      	movs	r2, #6
 802040c:	f108 0701 	add.w	r7, r8, #1
 8020410:	f7df feee 	bl	80001f0 <memchr>
 8020414:	2800      	cmp	r0, #0
 8020416:	d037      	beq.n	8020488 <_vfiprintf_r+0x1f8>
 8020418:	4b26      	ldr	r3, [pc, #152]	; (80204b4 <_vfiprintf_r+0x224>)
 802041a:	bb1b      	cbnz	r3, 8020464 <_vfiprintf_r+0x1d4>
 802041c:	9b03      	ldr	r3, [sp, #12]
 802041e:	3307      	adds	r3, #7
 8020420:	f023 0307 	bic.w	r3, r3, #7
 8020424:	3308      	adds	r3, #8
 8020426:	9303      	str	r3, [sp, #12]
 8020428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802042a:	444b      	add	r3, r9
 802042c:	9309      	str	r3, [sp, #36]	; 0x24
 802042e:	e750      	b.n	80202d2 <_vfiprintf_r+0x42>
 8020430:	fb05 3202 	mla	r2, r5, r2, r3
 8020434:	2001      	movs	r0, #1
 8020436:	4688      	mov	r8, r1
 8020438:	e78a      	b.n	8020350 <_vfiprintf_r+0xc0>
 802043a:	2300      	movs	r3, #0
 802043c:	f108 0801 	add.w	r8, r8, #1
 8020440:	9305      	str	r3, [sp, #20]
 8020442:	4619      	mov	r1, r3
 8020444:	250a      	movs	r5, #10
 8020446:	4640      	mov	r0, r8
 8020448:	f810 2b01 	ldrb.w	r2, [r0], #1
 802044c:	3a30      	subs	r2, #48	; 0x30
 802044e:	2a09      	cmp	r2, #9
 8020450:	d903      	bls.n	802045a <_vfiprintf_r+0x1ca>
 8020452:	2b00      	cmp	r3, #0
 8020454:	d0c3      	beq.n	80203de <_vfiprintf_r+0x14e>
 8020456:	9105      	str	r1, [sp, #20]
 8020458:	e7c1      	b.n	80203de <_vfiprintf_r+0x14e>
 802045a:	fb05 2101 	mla	r1, r5, r1, r2
 802045e:	2301      	movs	r3, #1
 8020460:	4680      	mov	r8, r0
 8020462:	e7f0      	b.n	8020446 <_vfiprintf_r+0x1b6>
 8020464:	ab03      	add	r3, sp, #12
 8020466:	9300      	str	r3, [sp, #0]
 8020468:	4622      	mov	r2, r4
 802046a:	4b13      	ldr	r3, [pc, #76]	; (80204b8 <_vfiprintf_r+0x228>)
 802046c:	a904      	add	r1, sp, #16
 802046e:	4630      	mov	r0, r6
 8020470:	f3af 8000 	nop.w
 8020474:	f1b0 3fff 	cmp.w	r0, #4294967295
 8020478:	4681      	mov	r9, r0
 802047a:	d1d5      	bne.n	8020428 <_vfiprintf_r+0x198>
 802047c:	89a3      	ldrh	r3, [r4, #12]
 802047e:	065b      	lsls	r3, r3, #25
 8020480:	f53f af7e 	bmi.w	8020380 <_vfiprintf_r+0xf0>
 8020484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020486:	e77d      	b.n	8020384 <_vfiprintf_r+0xf4>
 8020488:	ab03      	add	r3, sp, #12
 802048a:	9300      	str	r3, [sp, #0]
 802048c:	4622      	mov	r2, r4
 802048e:	4b0a      	ldr	r3, [pc, #40]	; (80204b8 <_vfiprintf_r+0x228>)
 8020490:	a904      	add	r1, sp, #16
 8020492:	4630      	mov	r0, r6
 8020494:	f000 f888 	bl	80205a8 <_printf_i>
 8020498:	e7ec      	b.n	8020474 <_vfiprintf_r+0x1e4>
 802049a:	bf00      	nop
 802049c:	0802468c 	.word	0x0802468c
 80204a0:	08024634 	.word	0x08024634
 80204a4:	080246ac 	.word	0x080246ac
 80204a8:	0802466c 	.word	0x0802466c
 80204ac:	0802463a 	.word	0x0802463a
 80204b0:	0802463e 	.word	0x0802463e
 80204b4:	00000000 	.word	0x00000000
 80204b8:	0802026b 	.word	0x0802026b

080204bc <_printf_common>:
 80204bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204c0:	4691      	mov	r9, r2
 80204c2:	461f      	mov	r7, r3
 80204c4:	688a      	ldr	r2, [r1, #8]
 80204c6:	690b      	ldr	r3, [r1, #16]
 80204c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80204cc:	4293      	cmp	r3, r2
 80204ce:	bfb8      	it	lt
 80204d0:	4613      	movlt	r3, r2
 80204d2:	f8c9 3000 	str.w	r3, [r9]
 80204d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80204da:	4606      	mov	r6, r0
 80204dc:	460c      	mov	r4, r1
 80204de:	b112      	cbz	r2, 80204e6 <_printf_common+0x2a>
 80204e0:	3301      	adds	r3, #1
 80204e2:	f8c9 3000 	str.w	r3, [r9]
 80204e6:	6823      	ldr	r3, [r4, #0]
 80204e8:	0699      	lsls	r1, r3, #26
 80204ea:	bf42      	ittt	mi
 80204ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80204f0:	3302      	addmi	r3, #2
 80204f2:	f8c9 3000 	strmi.w	r3, [r9]
 80204f6:	6825      	ldr	r5, [r4, #0]
 80204f8:	f015 0506 	ands.w	r5, r5, #6
 80204fc:	d107      	bne.n	802050e <_printf_common+0x52>
 80204fe:	f104 0a19 	add.w	sl, r4, #25
 8020502:	68e3      	ldr	r3, [r4, #12]
 8020504:	f8d9 2000 	ldr.w	r2, [r9]
 8020508:	1a9b      	subs	r3, r3, r2
 802050a:	42ab      	cmp	r3, r5
 802050c:	dc28      	bgt.n	8020560 <_printf_common+0xa4>
 802050e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8020512:	6822      	ldr	r2, [r4, #0]
 8020514:	3300      	adds	r3, #0
 8020516:	bf18      	it	ne
 8020518:	2301      	movne	r3, #1
 802051a:	0692      	lsls	r2, r2, #26
 802051c:	d42d      	bmi.n	802057a <_printf_common+0xbe>
 802051e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020522:	4639      	mov	r1, r7
 8020524:	4630      	mov	r0, r6
 8020526:	47c0      	blx	r8
 8020528:	3001      	adds	r0, #1
 802052a:	d020      	beq.n	802056e <_printf_common+0xb2>
 802052c:	6823      	ldr	r3, [r4, #0]
 802052e:	68e5      	ldr	r5, [r4, #12]
 8020530:	f8d9 2000 	ldr.w	r2, [r9]
 8020534:	f003 0306 	and.w	r3, r3, #6
 8020538:	2b04      	cmp	r3, #4
 802053a:	bf08      	it	eq
 802053c:	1aad      	subeq	r5, r5, r2
 802053e:	68a3      	ldr	r3, [r4, #8]
 8020540:	6922      	ldr	r2, [r4, #16]
 8020542:	bf0c      	ite	eq
 8020544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020548:	2500      	movne	r5, #0
 802054a:	4293      	cmp	r3, r2
 802054c:	bfc4      	itt	gt
 802054e:	1a9b      	subgt	r3, r3, r2
 8020550:	18ed      	addgt	r5, r5, r3
 8020552:	f04f 0900 	mov.w	r9, #0
 8020556:	341a      	adds	r4, #26
 8020558:	454d      	cmp	r5, r9
 802055a:	d11a      	bne.n	8020592 <_printf_common+0xd6>
 802055c:	2000      	movs	r0, #0
 802055e:	e008      	b.n	8020572 <_printf_common+0xb6>
 8020560:	2301      	movs	r3, #1
 8020562:	4652      	mov	r2, sl
 8020564:	4639      	mov	r1, r7
 8020566:	4630      	mov	r0, r6
 8020568:	47c0      	blx	r8
 802056a:	3001      	adds	r0, #1
 802056c:	d103      	bne.n	8020576 <_printf_common+0xba>
 802056e:	f04f 30ff 	mov.w	r0, #4294967295
 8020572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020576:	3501      	adds	r5, #1
 8020578:	e7c3      	b.n	8020502 <_printf_common+0x46>
 802057a:	18e1      	adds	r1, r4, r3
 802057c:	1c5a      	adds	r2, r3, #1
 802057e:	2030      	movs	r0, #48	; 0x30
 8020580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020584:	4422      	add	r2, r4
 8020586:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802058a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802058e:	3302      	adds	r3, #2
 8020590:	e7c5      	b.n	802051e <_printf_common+0x62>
 8020592:	2301      	movs	r3, #1
 8020594:	4622      	mov	r2, r4
 8020596:	4639      	mov	r1, r7
 8020598:	4630      	mov	r0, r6
 802059a:	47c0      	blx	r8
 802059c:	3001      	adds	r0, #1
 802059e:	d0e6      	beq.n	802056e <_printf_common+0xb2>
 80205a0:	f109 0901 	add.w	r9, r9, #1
 80205a4:	e7d8      	b.n	8020558 <_printf_common+0x9c>
	...

080205a8 <_printf_i>:
 80205a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80205ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80205b0:	460c      	mov	r4, r1
 80205b2:	7e09      	ldrb	r1, [r1, #24]
 80205b4:	b085      	sub	sp, #20
 80205b6:	296e      	cmp	r1, #110	; 0x6e
 80205b8:	4617      	mov	r7, r2
 80205ba:	4606      	mov	r6, r0
 80205bc:	4698      	mov	r8, r3
 80205be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80205c0:	f000 80b3 	beq.w	802072a <_printf_i+0x182>
 80205c4:	d822      	bhi.n	802060c <_printf_i+0x64>
 80205c6:	2963      	cmp	r1, #99	; 0x63
 80205c8:	d036      	beq.n	8020638 <_printf_i+0x90>
 80205ca:	d80a      	bhi.n	80205e2 <_printf_i+0x3a>
 80205cc:	2900      	cmp	r1, #0
 80205ce:	f000 80b9 	beq.w	8020744 <_printf_i+0x19c>
 80205d2:	2958      	cmp	r1, #88	; 0x58
 80205d4:	f000 8083 	beq.w	80206de <_printf_i+0x136>
 80205d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80205dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80205e0:	e032      	b.n	8020648 <_printf_i+0xa0>
 80205e2:	2964      	cmp	r1, #100	; 0x64
 80205e4:	d001      	beq.n	80205ea <_printf_i+0x42>
 80205e6:	2969      	cmp	r1, #105	; 0x69
 80205e8:	d1f6      	bne.n	80205d8 <_printf_i+0x30>
 80205ea:	6820      	ldr	r0, [r4, #0]
 80205ec:	6813      	ldr	r3, [r2, #0]
 80205ee:	0605      	lsls	r5, r0, #24
 80205f0:	f103 0104 	add.w	r1, r3, #4
 80205f4:	d52a      	bpl.n	802064c <_printf_i+0xa4>
 80205f6:	681b      	ldr	r3, [r3, #0]
 80205f8:	6011      	str	r1, [r2, #0]
 80205fa:	2b00      	cmp	r3, #0
 80205fc:	da03      	bge.n	8020606 <_printf_i+0x5e>
 80205fe:	222d      	movs	r2, #45	; 0x2d
 8020600:	425b      	negs	r3, r3
 8020602:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8020606:	486f      	ldr	r0, [pc, #444]	; (80207c4 <_printf_i+0x21c>)
 8020608:	220a      	movs	r2, #10
 802060a:	e039      	b.n	8020680 <_printf_i+0xd8>
 802060c:	2973      	cmp	r1, #115	; 0x73
 802060e:	f000 809d 	beq.w	802074c <_printf_i+0x1a4>
 8020612:	d808      	bhi.n	8020626 <_printf_i+0x7e>
 8020614:	296f      	cmp	r1, #111	; 0x6f
 8020616:	d020      	beq.n	802065a <_printf_i+0xb2>
 8020618:	2970      	cmp	r1, #112	; 0x70
 802061a:	d1dd      	bne.n	80205d8 <_printf_i+0x30>
 802061c:	6823      	ldr	r3, [r4, #0]
 802061e:	f043 0320 	orr.w	r3, r3, #32
 8020622:	6023      	str	r3, [r4, #0]
 8020624:	e003      	b.n	802062e <_printf_i+0x86>
 8020626:	2975      	cmp	r1, #117	; 0x75
 8020628:	d017      	beq.n	802065a <_printf_i+0xb2>
 802062a:	2978      	cmp	r1, #120	; 0x78
 802062c:	d1d4      	bne.n	80205d8 <_printf_i+0x30>
 802062e:	2378      	movs	r3, #120	; 0x78
 8020630:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020634:	4864      	ldr	r0, [pc, #400]	; (80207c8 <_printf_i+0x220>)
 8020636:	e055      	b.n	80206e4 <_printf_i+0x13c>
 8020638:	6813      	ldr	r3, [r2, #0]
 802063a:	1d19      	adds	r1, r3, #4
 802063c:	681b      	ldr	r3, [r3, #0]
 802063e:	6011      	str	r1, [r2, #0]
 8020640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020648:	2301      	movs	r3, #1
 802064a:	e08c      	b.n	8020766 <_printf_i+0x1be>
 802064c:	681b      	ldr	r3, [r3, #0]
 802064e:	6011      	str	r1, [r2, #0]
 8020650:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020654:	bf18      	it	ne
 8020656:	b21b      	sxthne	r3, r3
 8020658:	e7cf      	b.n	80205fa <_printf_i+0x52>
 802065a:	6813      	ldr	r3, [r2, #0]
 802065c:	6825      	ldr	r5, [r4, #0]
 802065e:	1d18      	adds	r0, r3, #4
 8020660:	6010      	str	r0, [r2, #0]
 8020662:	0628      	lsls	r0, r5, #24
 8020664:	d501      	bpl.n	802066a <_printf_i+0xc2>
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	e002      	b.n	8020670 <_printf_i+0xc8>
 802066a:	0668      	lsls	r0, r5, #25
 802066c:	d5fb      	bpl.n	8020666 <_printf_i+0xbe>
 802066e:	881b      	ldrh	r3, [r3, #0]
 8020670:	4854      	ldr	r0, [pc, #336]	; (80207c4 <_printf_i+0x21c>)
 8020672:	296f      	cmp	r1, #111	; 0x6f
 8020674:	bf14      	ite	ne
 8020676:	220a      	movne	r2, #10
 8020678:	2208      	moveq	r2, #8
 802067a:	2100      	movs	r1, #0
 802067c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020680:	6865      	ldr	r5, [r4, #4]
 8020682:	60a5      	str	r5, [r4, #8]
 8020684:	2d00      	cmp	r5, #0
 8020686:	f2c0 8095 	blt.w	80207b4 <_printf_i+0x20c>
 802068a:	6821      	ldr	r1, [r4, #0]
 802068c:	f021 0104 	bic.w	r1, r1, #4
 8020690:	6021      	str	r1, [r4, #0]
 8020692:	2b00      	cmp	r3, #0
 8020694:	d13d      	bne.n	8020712 <_printf_i+0x16a>
 8020696:	2d00      	cmp	r5, #0
 8020698:	f040 808e 	bne.w	80207b8 <_printf_i+0x210>
 802069c:	4665      	mov	r5, ip
 802069e:	2a08      	cmp	r2, #8
 80206a0:	d10b      	bne.n	80206ba <_printf_i+0x112>
 80206a2:	6823      	ldr	r3, [r4, #0]
 80206a4:	07db      	lsls	r3, r3, #31
 80206a6:	d508      	bpl.n	80206ba <_printf_i+0x112>
 80206a8:	6923      	ldr	r3, [r4, #16]
 80206aa:	6862      	ldr	r2, [r4, #4]
 80206ac:	429a      	cmp	r2, r3
 80206ae:	bfde      	ittt	le
 80206b0:	2330      	movle	r3, #48	; 0x30
 80206b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80206b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80206ba:	ebac 0305 	sub.w	r3, ip, r5
 80206be:	6123      	str	r3, [r4, #16]
 80206c0:	f8cd 8000 	str.w	r8, [sp]
 80206c4:	463b      	mov	r3, r7
 80206c6:	aa03      	add	r2, sp, #12
 80206c8:	4621      	mov	r1, r4
 80206ca:	4630      	mov	r0, r6
 80206cc:	f7ff fef6 	bl	80204bc <_printf_common>
 80206d0:	3001      	adds	r0, #1
 80206d2:	d14d      	bne.n	8020770 <_printf_i+0x1c8>
 80206d4:	f04f 30ff 	mov.w	r0, #4294967295
 80206d8:	b005      	add	sp, #20
 80206da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80206de:	4839      	ldr	r0, [pc, #228]	; (80207c4 <_printf_i+0x21c>)
 80206e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80206e4:	6813      	ldr	r3, [r2, #0]
 80206e6:	6821      	ldr	r1, [r4, #0]
 80206e8:	1d1d      	adds	r5, r3, #4
 80206ea:	681b      	ldr	r3, [r3, #0]
 80206ec:	6015      	str	r5, [r2, #0]
 80206ee:	060a      	lsls	r2, r1, #24
 80206f0:	d50b      	bpl.n	802070a <_printf_i+0x162>
 80206f2:	07ca      	lsls	r2, r1, #31
 80206f4:	bf44      	itt	mi
 80206f6:	f041 0120 	orrmi.w	r1, r1, #32
 80206fa:	6021      	strmi	r1, [r4, #0]
 80206fc:	b91b      	cbnz	r3, 8020706 <_printf_i+0x15e>
 80206fe:	6822      	ldr	r2, [r4, #0]
 8020700:	f022 0220 	bic.w	r2, r2, #32
 8020704:	6022      	str	r2, [r4, #0]
 8020706:	2210      	movs	r2, #16
 8020708:	e7b7      	b.n	802067a <_printf_i+0xd2>
 802070a:	064d      	lsls	r5, r1, #25
 802070c:	bf48      	it	mi
 802070e:	b29b      	uxthmi	r3, r3
 8020710:	e7ef      	b.n	80206f2 <_printf_i+0x14a>
 8020712:	4665      	mov	r5, ip
 8020714:	fbb3 f1f2 	udiv	r1, r3, r2
 8020718:	fb02 3311 	mls	r3, r2, r1, r3
 802071c:	5cc3      	ldrb	r3, [r0, r3]
 802071e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8020722:	460b      	mov	r3, r1
 8020724:	2900      	cmp	r1, #0
 8020726:	d1f5      	bne.n	8020714 <_printf_i+0x16c>
 8020728:	e7b9      	b.n	802069e <_printf_i+0xf6>
 802072a:	6813      	ldr	r3, [r2, #0]
 802072c:	6825      	ldr	r5, [r4, #0]
 802072e:	6961      	ldr	r1, [r4, #20]
 8020730:	1d18      	adds	r0, r3, #4
 8020732:	6010      	str	r0, [r2, #0]
 8020734:	0628      	lsls	r0, r5, #24
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	d501      	bpl.n	802073e <_printf_i+0x196>
 802073a:	6019      	str	r1, [r3, #0]
 802073c:	e002      	b.n	8020744 <_printf_i+0x19c>
 802073e:	066a      	lsls	r2, r5, #25
 8020740:	d5fb      	bpl.n	802073a <_printf_i+0x192>
 8020742:	8019      	strh	r1, [r3, #0]
 8020744:	2300      	movs	r3, #0
 8020746:	6123      	str	r3, [r4, #16]
 8020748:	4665      	mov	r5, ip
 802074a:	e7b9      	b.n	80206c0 <_printf_i+0x118>
 802074c:	6813      	ldr	r3, [r2, #0]
 802074e:	1d19      	adds	r1, r3, #4
 8020750:	6011      	str	r1, [r2, #0]
 8020752:	681d      	ldr	r5, [r3, #0]
 8020754:	6862      	ldr	r2, [r4, #4]
 8020756:	2100      	movs	r1, #0
 8020758:	4628      	mov	r0, r5
 802075a:	f7df fd49 	bl	80001f0 <memchr>
 802075e:	b108      	cbz	r0, 8020764 <_printf_i+0x1bc>
 8020760:	1b40      	subs	r0, r0, r5
 8020762:	6060      	str	r0, [r4, #4]
 8020764:	6863      	ldr	r3, [r4, #4]
 8020766:	6123      	str	r3, [r4, #16]
 8020768:	2300      	movs	r3, #0
 802076a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802076e:	e7a7      	b.n	80206c0 <_printf_i+0x118>
 8020770:	6923      	ldr	r3, [r4, #16]
 8020772:	462a      	mov	r2, r5
 8020774:	4639      	mov	r1, r7
 8020776:	4630      	mov	r0, r6
 8020778:	47c0      	blx	r8
 802077a:	3001      	adds	r0, #1
 802077c:	d0aa      	beq.n	80206d4 <_printf_i+0x12c>
 802077e:	6823      	ldr	r3, [r4, #0]
 8020780:	079b      	lsls	r3, r3, #30
 8020782:	d413      	bmi.n	80207ac <_printf_i+0x204>
 8020784:	68e0      	ldr	r0, [r4, #12]
 8020786:	9b03      	ldr	r3, [sp, #12]
 8020788:	4298      	cmp	r0, r3
 802078a:	bfb8      	it	lt
 802078c:	4618      	movlt	r0, r3
 802078e:	e7a3      	b.n	80206d8 <_printf_i+0x130>
 8020790:	2301      	movs	r3, #1
 8020792:	464a      	mov	r2, r9
 8020794:	4639      	mov	r1, r7
 8020796:	4630      	mov	r0, r6
 8020798:	47c0      	blx	r8
 802079a:	3001      	adds	r0, #1
 802079c:	d09a      	beq.n	80206d4 <_printf_i+0x12c>
 802079e:	3501      	adds	r5, #1
 80207a0:	68e3      	ldr	r3, [r4, #12]
 80207a2:	9a03      	ldr	r2, [sp, #12]
 80207a4:	1a9b      	subs	r3, r3, r2
 80207a6:	42ab      	cmp	r3, r5
 80207a8:	dcf2      	bgt.n	8020790 <_printf_i+0x1e8>
 80207aa:	e7eb      	b.n	8020784 <_printf_i+0x1dc>
 80207ac:	2500      	movs	r5, #0
 80207ae:	f104 0919 	add.w	r9, r4, #25
 80207b2:	e7f5      	b.n	80207a0 <_printf_i+0x1f8>
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d1ac      	bne.n	8020712 <_printf_i+0x16a>
 80207b8:	7803      	ldrb	r3, [r0, #0]
 80207ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80207be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80207c2:	e76c      	b.n	802069e <_printf_i+0xf6>
 80207c4:	08024645 	.word	0x08024645
 80207c8:	08024656 	.word	0x08024656

080207cc <_sbrk_r>:
 80207cc:	b538      	push	{r3, r4, r5, lr}
 80207ce:	4c06      	ldr	r4, [pc, #24]	; (80207e8 <_sbrk_r+0x1c>)
 80207d0:	2300      	movs	r3, #0
 80207d2:	4605      	mov	r5, r0
 80207d4:	4608      	mov	r0, r1
 80207d6:	6023      	str	r3, [r4, #0]
 80207d8:	f7e1 fde0 	bl	800239c <_sbrk>
 80207dc:	1c43      	adds	r3, r0, #1
 80207de:	d102      	bne.n	80207e6 <_sbrk_r+0x1a>
 80207e0:	6823      	ldr	r3, [r4, #0]
 80207e2:	b103      	cbz	r3, 80207e6 <_sbrk_r+0x1a>
 80207e4:	602b      	str	r3, [r5, #0]
 80207e6:	bd38      	pop	{r3, r4, r5, pc}
 80207e8:	2000a500 	.word	0x2000a500

080207ec <_raise_r>:
 80207ec:	291f      	cmp	r1, #31
 80207ee:	b538      	push	{r3, r4, r5, lr}
 80207f0:	4604      	mov	r4, r0
 80207f2:	460d      	mov	r5, r1
 80207f4:	d904      	bls.n	8020800 <_raise_r+0x14>
 80207f6:	2316      	movs	r3, #22
 80207f8:	6003      	str	r3, [r0, #0]
 80207fa:	f04f 30ff 	mov.w	r0, #4294967295
 80207fe:	bd38      	pop	{r3, r4, r5, pc}
 8020800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020802:	b112      	cbz	r2, 802080a <_raise_r+0x1e>
 8020804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020808:	b94b      	cbnz	r3, 802081e <_raise_r+0x32>
 802080a:	4620      	mov	r0, r4
 802080c:	f000 f830 	bl	8020870 <_getpid_r>
 8020810:	462a      	mov	r2, r5
 8020812:	4601      	mov	r1, r0
 8020814:	4620      	mov	r0, r4
 8020816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802081a:	f000 b817 	b.w	802084c <_kill_r>
 802081e:	2b01      	cmp	r3, #1
 8020820:	d00a      	beq.n	8020838 <_raise_r+0x4c>
 8020822:	1c59      	adds	r1, r3, #1
 8020824:	d103      	bne.n	802082e <_raise_r+0x42>
 8020826:	2316      	movs	r3, #22
 8020828:	6003      	str	r3, [r0, #0]
 802082a:	2001      	movs	r0, #1
 802082c:	e7e7      	b.n	80207fe <_raise_r+0x12>
 802082e:	2400      	movs	r4, #0
 8020830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020834:	4628      	mov	r0, r5
 8020836:	4798      	blx	r3
 8020838:	2000      	movs	r0, #0
 802083a:	e7e0      	b.n	80207fe <_raise_r+0x12>

0802083c <raise>:
 802083c:	4b02      	ldr	r3, [pc, #8]	; (8020848 <raise+0xc>)
 802083e:	4601      	mov	r1, r0
 8020840:	6818      	ldr	r0, [r3, #0]
 8020842:	f7ff bfd3 	b.w	80207ec <_raise_r>
 8020846:	bf00      	nop
 8020848:	2000010c 	.word	0x2000010c

0802084c <_kill_r>:
 802084c:	b538      	push	{r3, r4, r5, lr}
 802084e:	4c07      	ldr	r4, [pc, #28]	; (802086c <_kill_r+0x20>)
 8020850:	2300      	movs	r3, #0
 8020852:	4605      	mov	r5, r0
 8020854:	4608      	mov	r0, r1
 8020856:	4611      	mov	r1, r2
 8020858:	6023      	str	r3, [r4, #0]
 802085a:	f7e1 fd17 	bl	800228c <_kill>
 802085e:	1c43      	adds	r3, r0, #1
 8020860:	d102      	bne.n	8020868 <_kill_r+0x1c>
 8020862:	6823      	ldr	r3, [r4, #0]
 8020864:	b103      	cbz	r3, 8020868 <_kill_r+0x1c>
 8020866:	602b      	str	r3, [r5, #0]
 8020868:	bd38      	pop	{r3, r4, r5, pc}
 802086a:	bf00      	nop
 802086c:	2000a500 	.word	0x2000a500

08020870 <_getpid_r>:
 8020870:	f7e1 bd04 	b.w	800227c <_getpid>

08020874 <__swbuf_r>:
 8020874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020876:	460e      	mov	r6, r1
 8020878:	4614      	mov	r4, r2
 802087a:	4605      	mov	r5, r0
 802087c:	b118      	cbz	r0, 8020886 <__swbuf_r+0x12>
 802087e:	6983      	ldr	r3, [r0, #24]
 8020880:	b90b      	cbnz	r3, 8020886 <__swbuf_r+0x12>
 8020882:	f000 fa0b 	bl	8020c9c <__sinit>
 8020886:	4b21      	ldr	r3, [pc, #132]	; (802090c <__swbuf_r+0x98>)
 8020888:	429c      	cmp	r4, r3
 802088a:	d12a      	bne.n	80208e2 <__swbuf_r+0x6e>
 802088c:	686c      	ldr	r4, [r5, #4]
 802088e:	69a3      	ldr	r3, [r4, #24]
 8020890:	60a3      	str	r3, [r4, #8]
 8020892:	89a3      	ldrh	r3, [r4, #12]
 8020894:	071a      	lsls	r2, r3, #28
 8020896:	d52e      	bpl.n	80208f6 <__swbuf_r+0x82>
 8020898:	6923      	ldr	r3, [r4, #16]
 802089a:	b363      	cbz	r3, 80208f6 <__swbuf_r+0x82>
 802089c:	6923      	ldr	r3, [r4, #16]
 802089e:	6820      	ldr	r0, [r4, #0]
 80208a0:	1ac0      	subs	r0, r0, r3
 80208a2:	6963      	ldr	r3, [r4, #20]
 80208a4:	b2f6      	uxtb	r6, r6
 80208a6:	4283      	cmp	r3, r0
 80208a8:	4637      	mov	r7, r6
 80208aa:	dc04      	bgt.n	80208b6 <__swbuf_r+0x42>
 80208ac:	4621      	mov	r1, r4
 80208ae:	4628      	mov	r0, r5
 80208b0:	f000 f98a 	bl	8020bc8 <_fflush_r>
 80208b4:	bb28      	cbnz	r0, 8020902 <__swbuf_r+0x8e>
 80208b6:	68a3      	ldr	r3, [r4, #8]
 80208b8:	3b01      	subs	r3, #1
 80208ba:	60a3      	str	r3, [r4, #8]
 80208bc:	6823      	ldr	r3, [r4, #0]
 80208be:	1c5a      	adds	r2, r3, #1
 80208c0:	6022      	str	r2, [r4, #0]
 80208c2:	701e      	strb	r6, [r3, #0]
 80208c4:	6963      	ldr	r3, [r4, #20]
 80208c6:	3001      	adds	r0, #1
 80208c8:	4283      	cmp	r3, r0
 80208ca:	d004      	beq.n	80208d6 <__swbuf_r+0x62>
 80208cc:	89a3      	ldrh	r3, [r4, #12]
 80208ce:	07db      	lsls	r3, r3, #31
 80208d0:	d519      	bpl.n	8020906 <__swbuf_r+0x92>
 80208d2:	2e0a      	cmp	r6, #10
 80208d4:	d117      	bne.n	8020906 <__swbuf_r+0x92>
 80208d6:	4621      	mov	r1, r4
 80208d8:	4628      	mov	r0, r5
 80208da:	f000 f975 	bl	8020bc8 <_fflush_r>
 80208de:	b190      	cbz	r0, 8020906 <__swbuf_r+0x92>
 80208e0:	e00f      	b.n	8020902 <__swbuf_r+0x8e>
 80208e2:	4b0b      	ldr	r3, [pc, #44]	; (8020910 <__swbuf_r+0x9c>)
 80208e4:	429c      	cmp	r4, r3
 80208e6:	d101      	bne.n	80208ec <__swbuf_r+0x78>
 80208e8:	68ac      	ldr	r4, [r5, #8]
 80208ea:	e7d0      	b.n	802088e <__swbuf_r+0x1a>
 80208ec:	4b09      	ldr	r3, [pc, #36]	; (8020914 <__swbuf_r+0xa0>)
 80208ee:	429c      	cmp	r4, r3
 80208f0:	bf08      	it	eq
 80208f2:	68ec      	ldreq	r4, [r5, #12]
 80208f4:	e7cb      	b.n	802088e <__swbuf_r+0x1a>
 80208f6:	4621      	mov	r1, r4
 80208f8:	4628      	mov	r0, r5
 80208fa:	f000 f80d 	bl	8020918 <__swsetup_r>
 80208fe:	2800      	cmp	r0, #0
 8020900:	d0cc      	beq.n	802089c <__swbuf_r+0x28>
 8020902:	f04f 37ff 	mov.w	r7, #4294967295
 8020906:	4638      	mov	r0, r7
 8020908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802090a:	bf00      	nop
 802090c:	0802468c 	.word	0x0802468c
 8020910:	080246ac 	.word	0x080246ac
 8020914:	0802466c 	.word	0x0802466c

08020918 <__swsetup_r>:
 8020918:	4b32      	ldr	r3, [pc, #200]	; (80209e4 <__swsetup_r+0xcc>)
 802091a:	b570      	push	{r4, r5, r6, lr}
 802091c:	681d      	ldr	r5, [r3, #0]
 802091e:	4606      	mov	r6, r0
 8020920:	460c      	mov	r4, r1
 8020922:	b125      	cbz	r5, 802092e <__swsetup_r+0x16>
 8020924:	69ab      	ldr	r3, [r5, #24]
 8020926:	b913      	cbnz	r3, 802092e <__swsetup_r+0x16>
 8020928:	4628      	mov	r0, r5
 802092a:	f000 f9b7 	bl	8020c9c <__sinit>
 802092e:	4b2e      	ldr	r3, [pc, #184]	; (80209e8 <__swsetup_r+0xd0>)
 8020930:	429c      	cmp	r4, r3
 8020932:	d10f      	bne.n	8020954 <__swsetup_r+0x3c>
 8020934:	686c      	ldr	r4, [r5, #4]
 8020936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802093a:	b29a      	uxth	r2, r3
 802093c:	0715      	lsls	r5, r2, #28
 802093e:	d42c      	bmi.n	802099a <__swsetup_r+0x82>
 8020940:	06d0      	lsls	r0, r2, #27
 8020942:	d411      	bmi.n	8020968 <__swsetup_r+0x50>
 8020944:	2209      	movs	r2, #9
 8020946:	6032      	str	r2, [r6, #0]
 8020948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802094c:	81a3      	strh	r3, [r4, #12]
 802094e:	f04f 30ff 	mov.w	r0, #4294967295
 8020952:	e03e      	b.n	80209d2 <__swsetup_r+0xba>
 8020954:	4b25      	ldr	r3, [pc, #148]	; (80209ec <__swsetup_r+0xd4>)
 8020956:	429c      	cmp	r4, r3
 8020958:	d101      	bne.n	802095e <__swsetup_r+0x46>
 802095a:	68ac      	ldr	r4, [r5, #8]
 802095c:	e7eb      	b.n	8020936 <__swsetup_r+0x1e>
 802095e:	4b24      	ldr	r3, [pc, #144]	; (80209f0 <__swsetup_r+0xd8>)
 8020960:	429c      	cmp	r4, r3
 8020962:	bf08      	it	eq
 8020964:	68ec      	ldreq	r4, [r5, #12]
 8020966:	e7e6      	b.n	8020936 <__swsetup_r+0x1e>
 8020968:	0751      	lsls	r1, r2, #29
 802096a:	d512      	bpl.n	8020992 <__swsetup_r+0x7a>
 802096c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802096e:	b141      	cbz	r1, 8020982 <__swsetup_r+0x6a>
 8020970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020974:	4299      	cmp	r1, r3
 8020976:	d002      	beq.n	802097e <__swsetup_r+0x66>
 8020978:	4630      	mov	r0, r6
 802097a:	f7ff fbb7 	bl	80200ec <_free_r>
 802097e:	2300      	movs	r3, #0
 8020980:	6363      	str	r3, [r4, #52]	; 0x34
 8020982:	89a3      	ldrh	r3, [r4, #12]
 8020984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020988:	81a3      	strh	r3, [r4, #12]
 802098a:	2300      	movs	r3, #0
 802098c:	6063      	str	r3, [r4, #4]
 802098e:	6923      	ldr	r3, [r4, #16]
 8020990:	6023      	str	r3, [r4, #0]
 8020992:	89a3      	ldrh	r3, [r4, #12]
 8020994:	f043 0308 	orr.w	r3, r3, #8
 8020998:	81a3      	strh	r3, [r4, #12]
 802099a:	6923      	ldr	r3, [r4, #16]
 802099c:	b94b      	cbnz	r3, 80209b2 <__swsetup_r+0x9a>
 802099e:	89a3      	ldrh	r3, [r4, #12]
 80209a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80209a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80209a8:	d003      	beq.n	80209b2 <__swsetup_r+0x9a>
 80209aa:	4621      	mov	r1, r4
 80209ac:	4630      	mov	r0, r6
 80209ae:	f000 fa23 	bl	8020df8 <__smakebuf_r>
 80209b2:	89a2      	ldrh	r2, [r4, #12]
 80209b4:	f012 0301 	ands.w	r3, r2, #1
 80209b8:	d00c      	beq.n	80209d4 <__swsetup_r+0xbc>
 80209ba:	2300      	movs	r3, #0
 80209bc:	60a3      	str	r3, [r4, #8]
 80209be:	6963      	ldr	r3, [r4, #20]
 80209c0:	425b      	negs	r3, r3
 80209c2:	61a3      	str	r3, [r4, #24]
 80209c4:	6923      	ldr	r3, [r4, #16]
 80209c6:	b953      	cbnz	r3, 80209de <__swsetup_r+0xc6>
 80209c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80209cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80209d0:	d1ba      	bne.n	8020948 <__swsetup_r+0x30>
 80209d2:	bd70      	pop	{r4, r5, r6, pc}
 80209d4:	0792      	lsls	r2, r2, #30
 80209d6:	bf58      	it	pl
 80209d8:	6963      	ldrpl	r3, [r4, #20]
 80209da:	60a3      	str	r3, [r4, #8]
 80209dc:	e7f2      	b.n	80209c4 <__swsetup_r+0xac>
 80209de:	2000      	movs	r0, #0
 80209e0:	e7f7      	b.n	80209d2 <__swsetup_r+0xba>
 80209e2:	bf00      	nop
 80209e4:	2000010c 	.word	0x2000010c
 80209e8:	0802468c 	.word	0x0802468c
 80209ec:	080246ac 	.word	0x080246ac
 80209f0:	0802466c 	.word	0x0802466c

080209f4 <__register_exitproc>:
 80209f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209f8:	4d2c      	ldr	r5, [pc, #176]	; (8020aac <__register_exitproc+0xb8>)
 80209fa:	682c      	ldr	r4, [r5, #0]
 80209fc:	4607      	mov	r7, r0
 80209fe:	460e      	mov	r6, r1
 8020a00:	4691      	mov	r9, r2
 8020a02:	4698      	mov	r8, r3
 8020a04:	b934      	cbnz	r4, 8020a14 <__register_exitproc+0x20>
 8020a06:	4b2a      	ldr	r3, [pc, #168]	; (8020ab0 <__register_exitproc+0xbc>)
 8020a08:	4c2a      	ldr	r4, [pc, #168]	; (8020ab4 <__register_exitproc+0xc0>)
 8020a0a:	602c      	str	r4, [r5, #0]
 8020a0c:	b113      	cbz	r3, 8020a14 <__register_exitproc+0x20>
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8020a14:	6863      	ldr	r3, [r4, #4]
 8020a16:	2b1f      	cmp	r3, #31
 8020a18:	dd3d      	ble.n	8020a96 <__register_exitproc+0xa2>
 8020a1a:	4b27      	ldr	r3, [pc, #156]	; (8020ab8 <__register_exitproc+0xc4>)
 8020a1c:	b91b      	cbnz	r3, 8020a26 <__register_exitproc+0x32>
 8020a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8020a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a26:	208c      	movs	r0, #140	; 0x8c
 8020a28:	f7ff fb3c 	bl	80200a4 <malloc>
 8020a2c:	4604      	mov	r4, r0
 8020a2e:	2800      	cmp	r0, #0
 8020a30:	d0f5      	beq.n	8020a1e <__register_exitproc+0x2a>
 8020a32:	2300      	movs	r3, #0
 8020a34:	682a      	ldr	r2, [r5, #0]
 8020a36:	6002      	str	r2, [r0, #0]
 8020a38:	6043      	str	r3, [r0, #4]
 8020a3a:	6028      	str	r0, [r5, #0]
 8020a3c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8020a40:	b30f      	cbz	r7, 8020a86 <__register_exitproc+0x92>
 8020a42:	f44f 7084 	mov.w	r0, #264	; 0x108
 8020a46:	f7ff fb2d 	bl	80200a4 <malloc>
 8020a4a:	2800      	cmp	r0, #0
 8020a4c:	d0e7      	beq.n	8020a1e <__register_exitproc+0x2a>
 8020a4e:	2300      	movs	r3, #0
 8020a50:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8020a54:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8020a58:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8020a5c:	6862      	ldr	r2, [r4, #4]
 8020a5e:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8020a62:	2301      	movs	r3, #1
 8020a64:	4093      	lsls	r3, r2
 8020a66:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8020a6a:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8020a6e:	431a      	orrs	r2, r3
 8020a70:	2f02      	cmp	r7, #2
 8020a72:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8020a76:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8020a7a:	bf02      	ittt	eq
 8020a7c:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8020a80:	4313      	orreq	r3, r2
 8020a82:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8020a86:	6863      	ldr	r3, [r4, #4]
 8020a88:	1c5a      	adds	r2, r3, #1
 8020a8a:	3302      	adds	r3, #2
 8020a8c:	6062      	str	r2, [r4, #4]
 8020a8e:	2000      	movs	r0, #0
 8020a90:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8020a94:	e7c5      	b.n	8020a22 <__register_exitproc+0x2e>
 8020a96:	2f00      	cmp	r7, #0
 8020a98:	d0f5      	beq.n	8020a86 <__register_exitproc+0x92>
 8020a9a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020a9e:	2800      	cmp	r0, #0
 8020aa0:	d1dc      	bne.n	8020a5c <__register_exitproc+0x68>
 8020aa2:	4b05      	ldr	r3, [pc, #20]	; (8020ab8 <__register_exitproc+0xc4>)
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	d0ba      	beq.n	8020a1e <__register_exitproc+0x2a>
 8020aa8:	e7cb      	b.n	8020a42 <__register_exitproc+0x4e>
 8020aaa:	bf00      	nop
 8020aac:	2000a1b4 	.word	0x2000a1b4
 8020ab0:	08024668 	.word	0x08024668
 8020ab4:	2000a128 	.word	0x2000a128
 8020ab8:	080200a5 	.word	0x080200a5

08020abc <__sflush_r>:
 8020abc:	898a      	ldrh	r2, [r1, #12]
 8020abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ac2:	4605      	mov	r5, r0
 8020ac4:	0710      	lsls	r0, r2, #28
 8020ac6:	460c      	mov	r4, r1
 8020ac8:	d458      	bmi.n	8020b7c <__sflush_r+0xc0>
 8020aca:	684b      	ldr	r3, [r1, #4]
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	dc05      	bgt.n	8020adc <__sflush_r+0x20>
 8020ad0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020ad2:	2b00      	cmp	r3, #0
 8020ad4:	dc02      	bgt.n	8020adc <__sflush_r+0x20>
 8020ad6:	2000      	movs	r0, #0
 8020ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0f9      	beq.n	8020ad6 <__sflush_r+0x1a>
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020ae8:	682f      	ldr	r7, [r5, #0]
 8020aea:	6a21      	ldr	r1, [r4, #32]
 8020aec:	602b      	str	r3, [r5, #0]
 8020aee:	d032      	beq.n	8020b56 <__sflush_r+0x9a>
 8020af0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020af2:	89a3      	ldrh	r3, [r4, #12]
 8020af4:	075a      	lsls	r2, r3, #29
 8020af6:	d505      	bpl.n	8020b04 <__sflush_r+0x48>
 8020af8:	6863      	ldr	r3, [r4, #4]
 8020afa:	1ac0      	subs	r0, r0, r3
 8020afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020afe:	b10b      	cbz	r3, 8020b04 <__sflush_r+0x48>
 8020b00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020b02:	1ac0      	subs	r0, r0, r3
 8020b04:	2300      	movs	r3, #0
 8020b06:	4602      	mov	r2, r0
 8020b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020b0a:	6a21      	ldr	r1, [r4, #32]
 8020b0c:	4628      	mov	r0, r5
 8020b0e:	47b0      	blx	r6
 8020b10:	1c43      	adds	r3, r0, #1
 8020b12:	89a3      	ldrh	r3, [r4, #12]
 8020b14:	d106      	bne.n	8020b24 <__sflush_r+0x68>
 8020b16:	6829      	ldr	r1, [r5, #0]
 8020b18:	291d      	cmp	r1, #29
 8020b1a:	d848      	bhi.n	8020bae <__sflush_r+0xf2>
 8020b1c:	4a29      	ldr	r2, [pc, #164]	; (8020bc4 <__sflush_r+0x108>)
 8020b1e:	40ca      	lsrs	r2, r1
 8020b20:	07d6      	lsls	r6, r2, #31
 8020b22:	d544      	bpl.n	8020bae <__sflush_r+0xf2>
 8020b24:	2200      	movs	r2, #0
 8020b26:	6062      	str	r2, [r4, #4]
 8020b28:	04d9      	lsls	r1, r3, #19
 8020b2a:	6922      	ldr	r2, [r4, #16]
 8020b2c:	6022      	str	r2, [r4, #0]
 8020b2e:	d504      	bpl.n	8020b3a <__sflush_r+0x7e>
 8020b30:	1c42      	adds	r2, r0, #1
 8020b32:	d101      	bne.n	8020b38 <__sflush_r+0x7c>
 8020b34:	682b      	ldr	r3, [r5, #0]
 8020b36:	b903      	cbnz	r3, 8020b3a <__sflush_r+0x7e>
 8020b38:	6560      	str	r0, [r4, #84]	; 0x54
 8020b3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020b3c:	602f      	str	r7, [r5, #0]
 8020b3e:	2900      	cmp	r1, #0
 8020b40:	d0c9      	beq.n	8020ad6 <__sflush_r+0x1a>
 8020b42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b46:	4299      	cmp	r1, r3
 8020b48:	d002      	beq.n	8020b50 <__sflush_r+0x94>
 8020b4a:	4628      	mov	r0, r5
 8020b4c:	f7ff face 	bl	80200ec <_free_r>
 8020b50:	2000      	movs	r0, #0
 8020b52:	6360      	str	r0, [r4, #52]	; 0x34
 8020b54:	e7c0      	b.n	8020ad8 <__sflush_r+0x1c>
 8020b56:	2301      	movs	r3, #1
 8020b58:	4628      	mov	r0, r5
 8020b5a:	47b0      	blx	r6
 8020b5c:	1c41      	adds	r1, r0, #1
 8020b5e:	d1c8      	bne.n	8020af2 <__sflush_r+0x36>
 8020b60:	682b      	ldr	r3, [r5, #0]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d0c5      	beq.n	8020af2 <__sflush_r+0x36>
 8020b66:	2b1d      	cmp	r3, #29
 8020b68:	d001      	beq.n	8020b6e <__sflush_r+0xb2>
 8020b6a:	2b16      	cmp	r3, #22
 8020b6c:	d101      	bne.n	8020b72 <__sflush_r+0xb6>
 8020b6e:	602f      	str	r7, [r5, #0]
 8020b70:	e7b1      	b.n	8020ad6 <__sflush_r+0x1a>
 8020b72:	89a3      	ldrh	r3, [r4, #12]
 8020b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b78:	81a3      	strh	r3, [r4, #12]
 8020b7a:	e7ad      	b.n	8020ad8 <__sflush_r+0x1c>
 8020b7c:	690f      	ldr	r7, [r1, #16]
 8020b7e:	2f00      	cmp	r7, #0
 8020b80:	d0a9      	beq.n	8020ad6 <__sflush_r+0x1a>
 8020b82:	0793      	lsls	r3, r2, #30
 8020b84:	680e      	ldr	r6, [r1, #0]
 8020b86:	bf08      	it	eq
 8020b88:	694b      	ldreq	r3, [r1, #20]
 8020b8a:	600f      	str	r7, [r1, #0]
 8020b8c:	bf18      	it	ne
 8020b8e:	2300      	movne	r3, #0
 8020b90:	eba6 0807 	sub.w	r8, r6, r7
 8020b94:	608b      	str	r3, [r1, #8]
 8020b96:	f1b8 0f00 	cmp.w	r8, #0
 8020b9a:	dd9c      	ble.n	8020ad6 <__sflush_r+0x1a>
 8020b9c:	4643      	mov	r3, r8
 8020b9e:	463a      	mov	r2, r7
 8020ba0:	6a21      	ldr	r1, [r4, #32]
 8020ba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020ba4:	4628      	mov	r0, r5
 8020ba6:	47b0      	blx	r6
 8020ba8:	2800      	cmp	r0, #0
 8020baa:	dc06      	bgt.n	8020bba <__sflush_r+0xfe>
 8020bac:	89a3      	ldrh	r3, [r4, #12]
 8020bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020bb2:	81a3      	strh	r3, [r4, #12]
 8020bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8020bb8:	e78e      	b.n	8020ad8 <__sflush_r+0x1c>
 8020bba:	4407      	add	r7, r0
 8020bbc:	eba8 0800 	sub.w	r8, r8, r0
 8020bc0:	e7e9      	b.n	8020b96 <__sflush_r+0xda>
 8020bc2:	bf00      	nop
 8020bc4:	20400001 	.word	0x20400001

08020bc8 <_fflush_r>:
 8020bc8:	b538      	push	{r3, r4, r5, lr}
 8020bca:	690b      	ldr	r3, [r1, #16]
 8020bcc:	4605      	mov	r5, r0
 8020bce:	460c      	mov	r4, r1
 8020bd0:	b1db      	cbz	r3, 8020c0a <_fflush_r+0x42>
 8020bd2:	b118      	cbz	r0, 8020bdc <_fflush_r+0x14>
 8020bd4:	6983      	ldr	r3, [r0, #24]
 8020bd6:	b90b      	cbnz	r3, 8020bdc <_fflush_r+0x14>
 8020bd8:	f000 f860 	bl	8020c9c <__sinit>
 8020bdc:	4b0c      	ldr	r3, [pc, #48]	; (8020c10 <_fflush_r+0x48>)
 8020bde:	429c      	cmp	r4, r3
 8020be0:	d109      	bne.n	8020bf6 <_fflush_r+0x2e>
 8020be2:	686c      	ldr	r4, [r5, #4]
 8020be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020be8:	b17b      	cbz	r3, 8020c0a <_fflush_r+0x42>
 8020bea:	4621      	mov	r1, r4
 8020bec:	4628      	mov	r0, r5
 8020bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020bf2:	f7ff bf63 	b.w	8020abc <__sflush_r>
 8020bf6:	4b07      	ldr	r3, [pc, #28]	; (8020c14 <_fflush_r+0x4c>)
 8020bf8:	429c      	cmp	r4, r3
 8020bfa:	d101      	bne.n	8020c00 <_fflush_r+0x38>
 8020bfc:	68ac      	ldr	r4, [r5, #8]
 8020bfe:	e7f1      	b.n	8020be4 <_fflush_r+0x1c>
 8020c00:	4b05      	ldr	r3, [pc, #20]	; (8020c18 <_fflush_r+0x50>)
 8020c02:	429c      	cmp	r4, r3
 8020c04:	bf08      	it	eq
 8020c06:	68ec      	ldreq	r4, [r5, #12]
 8020c08:	e7ec      	b.n	8020be4 <_fflush_r+0x1c>
 8020c0a:	2000      	movs	r0, #0
 8020c0c:	bd38      	pop	{r3, r4, r5, pc}
 8020c0e:	bf00      	nop
 8020c10:	0802468c 	.word	0x0802468c
 8020c14:	080246ac 	.word	0x080246ac
 8020c18:	0802466c 	.word	0x0802466c

08020c1c <std>:
 8020c1c:	2300      	movs	r3, #0
 8020c1e:	b510      	push	{r4, lr}
 8020c20:	4604      	mov	r4, r0
 8020c22:	e9c0 3300 	strd	r3, r3, [r0]
 8020c26:	6083      	str	r3, [r0, #8]
 8020c28:	8181      	strh	r1, [r0, #12]
 8020c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8020c2c:	81c2      	strh	r2, [r0, #14]
 8020c2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020c32:	6183      	str	r3, [r0, #24]
 8020c34:	4619      	mov	r1, r3
 8020c36:	2208      	movs	r2, #8
 8020c38:	305c      	adds	r0, #92	; 0x5c
 8020c3a:	f7ff fa4e 	bl	80200da <memset>
 8020c3e:	4b05      	ldr	r3, [pc, #20]	; (8020c54 <std+0x38>)
 8020c40:	6263      	str	r3, [r4, #36]	; 0x24
 8020c42:	4b05      	ldr	r3, [pc, #20]	; (8020c58 <std+0x3c>)
 8020c44:	62a3      	str	r3, [r4, #40]	; 0x28
 8020c46:	4b05      	ldr	r3, [pc, #20]	; (8020c5c <std+0x40>)
 8020c48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020c4a:	4b05      	ldr	r3, [pc, #20]	; (8020c60 <std+0x44>)
 8020c4c:	6224      	str	r4, [r4, #32]
 8020c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8020c50:	bd10      	pop	{r4, pc}
 8020c52:	bf00      	nop
 8020c54:	08020e7d 	.word	0x08020e7d
 8020c58:	08020e9f 	.word	0x08020e9f
 8020c5c:	08020ed7 	.word	0x08020ed7
 8020c60:	08020efb 	.word	0x08020efb

08020c64 <_cleanup_r>:
 8020c64:	4901      	ldr	r1, [pc, #4]	; (8020c6c <_cleanup_r+0x8>)
 8020c66:	f000 b885 	b.w	8020d74 <_fwalk_reent>
 8020c6a:	bf00      	nop
 8020c6c:	08020bc9 	.word	0x08020bc9

08020c70 <__sfmoreglue>:
 8020c70:	b570      	push	{r4, r5, r6, lr}
 8020c72:	1e4a      	subs	r2, r1, #1
 8020c74:	2568      	movs	r5, #104	; 0x68
 8020c76:	4355      	muls	r5, r2
 8020c78:	460e      	mov	r6, r1
 8020c7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8020c7e:	f7ff fa83 	bl	8020188 <_malloc_r>
 8020c82:	4604      	mov	r4, r0
 8020c84:	b140      	cbz	r0, 8020c98 <__sfmoreglue+0x28>
 8020c86:	2100      	movs	r1, #0
 8020c88:	e9c0 1600 	strd	r1, r6, [r0]
 8020c8c:	300c      	adds	r0, #12
 8020c8e:	60a0      	str	r0, [r4, #8]
 8020c90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020c94:	f7ff fa21 	bl	80200da <memset>
 8020c98:	4620      	mov	r0, r4
 8020c9a:	bd70      	pop	{r4, r5, r6, pc}

08020c9c <__sinit>:
 8020c9c:	6983      	ldr	r3, [r0, #24]
 8020c9e:	b510      	push	{r4, lr}
 8020ca0:	4604      	mov	r4, r0
 8020ca2:	bb33      	cbnz	r3, 8020cf2 <__sinit+0x56>
 8020ca4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8020ca8:	6503      	str	r3, [r0, #80]	; 0x50
 8020caa:	4b12      	ldr	r3, [pc, #72]	; (8020cf4 <__sinit+0x58>)
 8020cac:	4a12      	ldr	r2, [pc, #72]	; (8020cf8 <__sinit+0x5c>)
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	6282      	str	r2, [r0, #40]	; 0x28
 8020cb2:	4298      	cmp	r0, r3
 8020cb4:	bf04      	itt	eq
 8020cb6:	2301      	moveq	r3, #1
 8020cb8:	6183      	streq	r3, [r0, #24]
 8020cba:	f000 f81f 	bl	8020cfc <__sfp>
 8020cbe:	6060      	str	r0, [r4, #4]
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	f000 f81b 	bl	8020cfc <__sfp>
 8020cc6:	60a0      	str	r0, [r4, #8]
 8020cc8:	4620      	mov	r0, r4
 8020cca:	f000 f817 	bl	8020cfc <__sfp>
 8020cce:	2200      	movs	r2, #0
 8020cd0:	60e0      	str	r0, [r4, #12]
 8020cd2:	2104      	movs	r1, #4
 8020cd4:	6860      	ldr	r0, [r4, #4]
 8020cd6:	f7ff ffa1 	bl	8020c1c <std>
 8020cda:	2201      	movs	r2, #1
 8020cdc:	2109      	movs	r1, #9
 8020cde:	68a0      	ldr	r0, [r4, #8]
 8020ce0:	f7ff ff9c 	bl	8020c1c <std>
 8020ce4:	2202      	movs	r2, #2
 8020ce6:	2112      	movs	r1, #18
 8020ce8:	68e0      	ldr	r0, [r4, #12]
 8020cea:	f7ff ff97 	bl	8020c1c <std>
 8020cee:	2301      	movs	r3, #1
 8020cf0:	61a3      	str	r3, [r4, #24]
 8020cf2:	bd10      	pop	{r4, pc}
 8020cf4:	08024630 	.word	0x08024630
 8020cf8:	08020c65 	.word	0x08020c65

08020cfc <__sfp>:
 8020cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020cfe:	4b1b      	ldr	r3, [pc, #108]	; (8020d6c <__sfp+0x70>)
 8020d00:	681e      	ldr	r6, [r3, #0]
 8020d02:	69b3      	ldr	r3, [r6, #24]
 8020d04:	4607      	mov	r7, r0
 8020d06:	b913      	cbnz	r3, 8020d0e <__sfp+0x12>
 8020d08:	4630      	mov	r0, r6
 8020d0a:	f7ff ffc7 	bl	8020c9c <__sinit>
 8020d0e:	3648      	adds	r6, #72	; 0x48
 8020d10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020d14:	3b01      	subs	r3, #1
 8020d16:	d503      	bpl.n	8020d20 <__sfp+0x24>
 8020d18:	6833      	ldr	r3, [r6, #0]
 8020d1a:	b133      	cbz	r3, 8020d2a <__sfp+0x2e>
 8020d1c:	6836      	ldr	r6, [r6, #0]
 8020d1e:	e7f7      	b.n	8020d10 <__sfp+0x14>
 8020d20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020d24:	b16d      	cbz	r5, 8020d42 <__sfp+0x46>
 8020d26:	3468      	adds	r4, #104	; 0x68
 8020d28:	e7f4      	b.n	8020d14 <__sfp+0x18>
 8020d2a:	2104      	movs	r1, #4
 8020d2c:	4638      	mov	r0, r7
 8020d2e:	f7ff ff9f 	bl	8020c70 <__sfmoreglue>
 8020d32:	6030      	str	r0, [r6, #0]
 8020d34:	2800      	cmp	r0, #0
 8020d36:	d1f1      	bne.n	8020d1c <__sfp+0x20>
 8020d38:	230c      	movs	r3, #12
 8020d3a:	603b      	str	r3, [r7, #0]
 8020d3c:	4604      	mov	r4, r0
 8020d3e:	4620      	mov	r0, r4
 8020d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020d42:	4b0b      	ldr	r3, [pc, #44]	; (8020d70 <__sfp+0x74>)
 8020d44:	6665      	str	r5, [r4, #100]	; 0x64
 8020d46:	e9c4 5500 	strd	r5, r5, [r4]
 8020d4a:	60a5      	str	r5, [r4, #8]
 8020d4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8020d50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8020d54:	2208      	movs	r2, #8
 8020d56:	4629      	mov	r1, r5
 8020d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8020d5c:	f7ff f9bd 	bl	80200da <memset>
 8020d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020d68:	e7e9      	b.n	8020d3e <__sfp+0x42>
 8020d6a:	bf00      	nop
 8020d6c:	08024630 	.word	0x08024630
 8020d70:	ffff0001 	.word	0xffff0001

08020d74 <_fwalk_reent>:
 8020d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020d78:	4680      	mov	r8, r0
 8020d7a:	4689      	mov	r9, r1
 8020d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020d80:	2600      	movs	r6, #0
 8020d82:	b914      	cbnz	r4, 8020d8a <_fwalk_reent+0x16>
 8020d84:	4630      	mov	r0, r6
 8020d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020d8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8020d8e:	3f01      	subs	r7, #1
 8020d90:	d501      	bpl.n	8020d96 <_fwalk_reent+0x22>
 8020d92:	6824      	ldr	r4, [r4, #0]
 8020d94:	e7f5      	b.n	8020d82 <_fwalk_reent+0xe>
 8020d96:	89ab      	ldrh	r3, [r5, #12]
 8020d98:	2b01      	cmp	r3, #1
 8020d9a:	d907      	bls.n	8020dac <_fwalk_reent+0x38>
 8020d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020da0:	3301      	adds	r3, #1
 8020da2:	d003      	beq.n	8020dac <_fwalk_reent+0x38>
 8020da4:	4629      	mov	r1, r5
 8020da6:	4640      	mov	r0, r8
 8020da8:	47c8      	blx	r9
 8020daa:	4306      	orrs	r6, r0
 8020dac:	3568      	adds	r5, #104	; 0x68
 8020dae:	e7ee      	b.n	8020d8e <_fwalk_reent+0x1a>

08020db0 <__swhatbuf_r>:
 8020db0:	b570      	push	{r4, r5, r6, lr}
 8020db2:	460e      	mov	r6, r1
 8020db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020db8:	2900      	cmp	r1, #0
 8020dba:	b096      	sub	sp, #88	; 0x58
 8020dbc:	4614      	mov	r4, r2
 8020dbe:	461d      	mov	r5, r3
 8020dc0:	da07      	bge.n	8020dd2 <__swhatbuf_r+0x22>
 8020dc2:	2300      	movs	r3, #0
 8020dc4:	602b      	str	r3, [r5, #0]
 8020dc6:	89b3      	ldrh	r3, [r6, #12]
 8020dc8:	061a      	lsls	r2, r3, #24
 8020dca:	d410      	bmi.n	8020dee <__swhatbuf_r+0x3e>
 8020dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020dd0:	e00e      	b.n	8020df0 <__swhatbuf_r+0x40>
 8020dd2:	466a      	mov	r2, sp
 8020dd4:	f000 f8b8 	bl	8020f48 <_fstat_r>
 8020dd8:	2800      	cmp	r0, #0
 8020dda:	dbf2      	blt.n	8020dc2 <__swhatbuf_r+0x12>
 8020ddc:	9a01      	ldr	r2, [sp, #4]
 8020dde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020de2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020de6:	425a      	negs	r2, r3
 8020de8:	415a      	adcs	r2, r3
 8020dea:	602a      	str	r2, [r5, #0]
 8020dec:	e7ee      	b.n	8020dcc <__swhatbuf_r+0x1c>
 8020dee:	2340      	movs	r3, #64	; 0x40
 8020df0:	2000      	movs	r0, #0
 8020df2:	6023      	str	r3, [r4, #0]
 8020df4:	b016      	add	sp, #88	; 0x58
 8020df6:	bd70      	pop	{r4, r5, r6, pc}

08020df8 <__smakebuf_r>:
 8020df8:	898b      	ldrh	r3, [r1, #12]
 8020dfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020dfc:	079d      	lsls	r5, r3, #30
 8020dfe:	4606      	mov	r6, r0
 8020e00:	460c      	mov	r4, r1
 8020e02:	d507      	bpl.n	8020e14 <__smakebuf_r+0x1c>
 8020e04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020e08:	6023      	str	r3, [r4, #0]
 8020e0a:	6123      	str	r3, [r4, #16]
 8020e0c:	2301      	movs	r3, #1
 8020e0e:	6163      	str	r3, [r4, #20]
 8020e10:	b002      	add	sp, #8
 8020e12:	bd70      	pop	{r4, r5, r6, pc}
 8020e14:	ab01      	add	r3, sp, #4
 8020e16:	466a      	mov	r2, sp
 8020e18:	f7ff ffca 	bl	8020db0 <__swhatbuf_r>
 8020e1c:	9900      	ldr	r1, [sp, #0]
 8020e1e:	4605      	mov	r5, r0
 8020e20:	4630      	mov	r0, r6
 8020e22:	f7ff f9b1 	bl	8020188 <_malloc_r>
 8020e26:	b948      	cbnz	r0, 8020e3c <__smakebuf_r+0x44>
 8020e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020e2c:	059a      	lsls	r2, r3, #22
 8020e2e:	d4ef      	bmi.n	8020e10 <__smakebuf_r+0x18>
 8020e30:	f023 0303 	bic.w	r3, r3, #3
 8020e34:	f043 0302 	orr.w	r3, r3, #2
 8020e38:	81a3      	strh	r3, [r4, #12]
 8020e3a:	e7e3      	b.n	8020e04 <__smakebuf_r+0xc>
 8020e3c:	4b0d      	ldr	r3, [pc, #52]	; (8020e74 <__smakebuf_r+0x7c>)
 8020e3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8020e40:	89a3      	ldrh	r3, [r4, #12]
 8020e42:	6020      	str	r0, [r4, #0]
 8020e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020e48:	81a3      	strh	r3, [r4, #12]
 8020e4a:	9b00      	ldr	r3, [sp, #0]
 8020e4c:	6163      	str	r3, [r4, #20]
 8020e4e:	9b01      	ldr	r3, [sp, #4]
 8020e50:	6120      	str	r0, [r4, #16]
 8020e52:	b15b      	cbz	r3, 8020e6c <__smakebuf_r+0x74>
 8020e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020e58:	4630      	mov	r0, r6
 8020e5a:	f000 f887 	bl	8020f6c <_isatty_r>
 8020e5e:	b128      	cbz	r0, 8020e6c <__smakebuf_r+0x74>
 8020e60:	89a3      	ldrh	r3, [r4, #12]
 8020e62:	f023 0303 	bic.w	r3, r3, #3
 8020e66:	f043 0301 	orr.w	r3, r3, #1
 8020e6a:	81a3      	strh	r3, [r4, #12]
 8020e6c:	89a3      	ldrh	r3, [r4, #12]
 8020e6e:	431d      	orrs	r5, r3
 8020e70:	81a5      	strh	r5, [r4, #12]
 8020e72:	e7cd      	b.n	8020e10 <__smakebuf_r+0x18>
 8020e74:	08020c65 	.word	0x08020c65

08020e78 <__malloc_lock>:
 8020e78:	4770      	bx	lr

08020e7a <__malloc_unlock>:
 8020e7a:	4770      	bx	lr

08020e7c <__sread>:
 8020e7c:	b510      	push	{r4, lr}
 8020e7e:	460c      	mov	r4, r1
 8020e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020e84:	f000 f894 	bl	8020fb0 <_read_r>
 8020e88:	2800      	cmp	r0, #0
 8020e8a:	bfab      	itete	ge
 8020e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8020e90:	181b      	addge	r3, r3, r0
 8020e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020e96:	bfac      	ite	ge
 8020e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8020e9a:	81a3      	strhlt	r3, [r4, #12]
 8020e9c:	bd10      	pop	{r4, pc}

08020e9e <__swrite>:
 8020e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ea2:	461f      	mov	r7, r3
 8020ea4:	898b      	ldrh	r3, [r1, #12]
 8020ea6:	05db      	lsls	r3, r3, #23
 8020ea8:	4605      	mov	r5, r0
 8020eaa:	460c      	mov	r4, r1
 8020eac:	4616      	mov	r6, r2
 8020eae:	d505      	bpl.n	8020ebc <__swrite+0x1e>
 8020eb0:	2302      	movs	r3, #2
 8020eb2:	2200      	movs	r2, #0
 8020eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020eb8:	f000 f868 	bl	8020f8c <_lseek_r>
 8020ebc:	89a3      	ldrh	r3, [r4, #12]
 8020ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020ec6:	81a3      	strh	r3, [r4, #12]
 8020ec8:	4632      	mov	r2, r6
 8020eca:	463b      	mov	r3, r7
 8020ecc:	4628      	mov	r0, r5
 8020ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020ed2:	f000 b817 	b.w	8020f04 <_write_r>

08020ed6 <__sseek>:
 8020ed6:	b510      	push	{r4, lr}
 8020ed8:	460c      	mov	r4, r1
 8020eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ede:	f000 f855 	bl	8020f8c <_lseek_r>
 8020ee2:	1c43      	adds	r3, r0, #1
 8020ee4:	89a3      	ldrh	r3, [r4, #12]
 8020ee6:	bf15      	itete	ne
 8020ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8020eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020ef2:	81a3      	strheq	r3, [r4, #12]
 8020ef4:	bf18      	it	ne
 8020ef6:	81a3      	strhne	r3, [r4, #12]
 8020ef8:	bd10      	pop	{r4, pc}

08020efa <__sclose>:
 8020efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020efe:	f000 b813 	b.w	8020f28 <_close_r>
	...

08020f04 <_write_r>:
 8020f04:	b538      	push	{r3, r4, r5, lr}
 8020f06:	4c07      	ldr	r4, [pc, #28]	; (8020f24 <_write_r+0x20>)
 8020f08:	4605      	mov	r5, r0
 8020f0a:	4608      	mov	r0, r1
 8020f0c:	4611      	mov	r1, r2
 8020f0e:	2200      	movs	r2, #0
 8020f10:	6022      	str	r2, [r4, #0]
 8020f12:	461a      	mov	r2, r3
 8020f14:	f7e1 f9f1 	bl	80022fa <_write>
 8020f18:	1c43      	adds	r3, r0, #1
 8020f1a:	d102      	bne.n	8020f22 <_write_r+0x1e>
 8020f1c:	6823      	ldr	r3, [r4, #0]
 8020f1e:	b103      	cbz	r3, 8020f22 <_write_r+0x1e>
 8020f20:	602b      	str	r3, [r5, #0]
 8020f22:	bd38      	pop	{r3, r4, r5, pc}
 8020f24:	2000a500 	.word	0x2000a500

08020f28 <_close_r>:
 8020f28:	b538      	push	{r3, r4, r5, lr}
 8020f2a:	4c06      	ldr	r4, [pc, #24]	; (8020f44 <_close_r+0x1c>)
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	4605      	mov	r5, r0
 8020f30:	4608      	mov	r0, r1
 8020f32:	6023      	str	r3, [r4, #0]
 8020f34:	f7e1 f9fd 	bl	8002332 <_close>
 8020f38:	1c43      	adds	r3, r0, #1
 8020f3a:	d102      	bne.n	8020f42 <_close_r+0x1a>
 8020f3c:	6823      	ldr	r3, [r4, #0]
 8020f3e:	b103      	cbz	r3, 8020f42 <_close_r+0x1a>
 8020f40:	602b      	str	r3, [r5, #0]
 8020f42:	bd38      	pop	{r3, r4, r5, pc}
 8020f44:	2000a500 	.word	0x2000a500

08020f48 <_fstat_r>:
 8020f48:	b538      	push	{r3, r4, r5, lr}
 8020f4a:	4c07      	ldr	r4, [pc, #28]	; (8020f68 <_fstat_r+0x20>)
 8020f4c:	2300      	movs	r3, #0
 8020f4e:	4605      	mov	r5, r0
 8020f50:	4608      	mov	r0, r1
 8020f52:	4611      	mov	r1, r2
 8020f54:	6023      	str	r3, [r4, #0]
 8020f56:	f7e1 f9f8 	bl	800234a <_fstat>
 8020f5a:	1c43      	adds	r3, r0, #1
 8020f5c:	d102      	bne.n	8020f64 <_fstat_r+0x1c>
 8020f5e:	6823      	ldr	r3, [r4, #0]
 8020f60:	b103      	cbz	r3, 8020f64 <_fstat_r+0x1c>
 8020f62:	602b      	str	r3, [r5, #0]
 8020f64:	bd38      	pop	{r3, r4, r5, pc}
 8020f66:	bf00      	nop
 8020f68:	2000a500 	.word	0x2000a500

08020f6c <_isatty_r>:
 8020f6c:	b538      	push	{r3, r4, r5, lr}
 8020f6e:	4c06      	ldr	r4, [pc, #24]	; (8020f88 <_isatty_r+0x1c>)
 8020f70:	2300      	movs	r3, #0
 8020f72:	4605      	mov	r5, r0
 8020f74:	4608      	mov	r0, r1
 8020f76:	6023      	str	r3, [r4, #0]
 8020f78:	f7e1 f9f7 	bl	800236a <_isatty>
 8020f7c:	1c43      	adds	r3, r0, #1
 8020f7e:	d102      	bne.n	8020f86 <_isatty_r+0x1a>
 8020f80:	6823      	ldr	r3, [r4, #0]
 8020f82:	b103      	cbz	r3, 8020f86 <_isatty_r+0x1a>
 8020f84:	602b      	str	r3, [r5, #0]
 8020f86:	bd38      	pop	{r3, r4, r5, pc}
 8020f88:	2000a500 	.word	0x2000a500

08020f8c <_lseek_r>:
 8020f8c:	b538      	push	{r3, r4, r5, lr}
 8020f8e:	4c07      	ldr	r4, [pc, #28]	; (8020fac <_lseek_r+0x20>)
 8020f90:	4605      	mov	r5, r0
 8020f92:	4608      	mov	r0, r1
 8020f94:	4611      	mov	r1, r2
 8020f96:	2200      	movs	r2, #0
 8020f98:	6022      	str	r2, [r4, #0]
 8020f9a:	461a      	mov	r2, r3
 8020f9c:	f7e1 f9f0 	bl	8002380 <_lseek>
 8020fa0:	1c43      	adds	r3, r0, #1
 8020fa2:	d102      	bne.n	8020faa <_lseek_r+0x1e>
 8020fa4:	6823      	ldr	r3, [r4, #0]
 8020fa6:	b103      	cbz	r3, 8020faa <_lseek_r+0x1e>
 8020fa8:	602b      	str	r3, [r5, #0]
 8020faa:	bd38      	pop	{r3, r4, r5, pc}
 8020fac:	2000a500 	.word	0x2000a500

08020fb0 <_read_r>:
 8020fb0:	b538      	push	{r3, r4, r5, lr}
 8020fb2:	4c07      	ldr	r4, [pc, #28]	; (8020fd0 <_read_r+0x20>)
 8020fb4:	4605      	mov	r5, r0
 8020fb6:	4608      	mov	r0, r1
 8020fb8:	4611      	mov	r1, r2
 8020fba:	2200      	movs	r2, #0
 8020fbc:	6022      	str	r2, [r4, #0]
 8020fbe:	461a      	mov	r2, r3
 8020fc0:	f7e1 f97e 	bl	80022c0 <_read>
 8020fc4:	1c43      	adds	r3, r0, #1
 8020fc6:	d102      	bne.n	8020fce <_read_r+0x1e>
 8020fc8:	6823      	ldr	r3, [r4, #0]
 8020fca:	b103      	cbz	r3, 8020fce <_read_r+0x1e>
 8020fcc:	602b      	str	r3, [r5, #0]
 8020fce:	bd38      	pop	{r3, r4, r5, pc}
 8020fd0:	2000a500 	.word	0x2000a500

08020fd4 <_init>:
 8020fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fd6:	bf00      	nop
 8020fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020fda:	bc08      	pop	{r3}
 8020fdc:	469e      	mov	lr, r3
 8020fde:	4770      	bx	lr

08020fe0 <_fini>:
 8020fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fe2:	bf00      	nop
 8020fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020fe6:	bc08      	pop	{r3}
 8020fe8:	469e      	mov	lr, r3
 8020fea:	4770      	bx	lr
