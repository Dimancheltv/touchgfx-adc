
doctor0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e6e8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003494  0801e898  0801e898  0002e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000003b6  08021d2c  08021d2c  00031d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 0002f000  080220e4  080220e4  000320e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000001c  080510e4  080510e4  000610e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08051100  08051100  00070170  2**0
                  CONTENTS
  7 .ARM          00000008  08051100  08051100  00061100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08051108  08051108  00070170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08051108  08051108  00061108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0805111c  0805111c  0006111c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000170  20000000  08051124  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a2b0  20000170  08051294  00070170  2**2
                  ALLOC
 13 ._user_heap_stack 00001400  2000a420  08051294  0007a420  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00070170  2**0
                  CONTENTS, READONLY
 15 TouchGFX_Framebuffer 0004b000  d0000000  d0000000  00080000  2**2
                  ALLOC
 16 .debug_info   00046398  00000000  00000000  000701a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 0000b6ff  00000000  00000000  000b6538  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000031a0  00000000  00000000  000c1c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00002d88  00000000  00000000  000c4dd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  0000d994  00000000  00000000  000c7b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0002d040  00000000  00000000  000d54f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    000fb537  00000000  00000000  00102534  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      000000fa  00000000  00000000  001fda6b  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000d7f0  00000000  00000000  001fdb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000170 	.word	0x20000170
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801e880 	.word	0x0801e880

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000174 	.word	0x20000174
 80001ec:	0801e880 	.word	0x0801e880

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 fdc0 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f824 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa48 	bl	8000a30 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a0:	f000 f8a4 	bl	80006ec <MX_CRC_Init>
  MX_I2C3_Init();
 80005a4:	f000 f8e8 	bl	8000778 <MX_I2C3_Init>
  MX_SPI5_Init();
 80005a8:	f000 f9b4 	bl	8000914 <MX_SPI5_Init>
  MX_FMC_Init();
 80005ac:	f000 f9e8 	bl	8000980 <MX_FMC_Init>
  MX_LTDC_Init();
 80005b0:	f000 f922 	bl	80007f8 <MX_LTDC_Init>
  MX_DMA2D_Init();
 80005b4:	f000 f8ae 	bl	8000714 <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80005b8:	f009 fc10 	bl	8009ddc <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005bc:	f006 f852 	bl	8006664 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80005c0:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <main+0x48>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0x4c>)
 80005c6:	f006 f8b7 	bl	8006738 <osThreadNew>
 80005ca:	4602      	mov	r2, r0
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <main+0x50>)
 80005ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f006 f87c 	bl	80066cc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x44>
 80005d6:	bf00      	nop
 80005d8:	0801ed8c 	.word	0x0801ed8c
 80005dc:	08009de9 	.word	0x08009de9
 80005e0:	2000a320 	.word	0x2000a320

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0a0      	sub	sp, #128	; 0x80
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f01d f9c7 	bl	801d986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2230      	movs	r2, #48	; 0x30
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f01d f9b8 	bl	801d986 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <SystemClock_Config+0x100>)
 800061c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061e:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <SystemClock_Config+0x100>)
 8000620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000624:	6413      	str	r3, [r2, #64]	; 0x40
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <SystemClock_Config+0x100>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	2300      	movs	r3, #0
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <SystemClock_Config+0x104>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <SystemClock_Config+0x104>)
 800063c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000640:	6013      	str	r3, [r2, #0]
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0x104>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064e:	2301      	movs	r3, #1
 8000650:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000656:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	2302      	movs	r3, #2
 800065a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000660:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000662:	2308      	movs	r3, #8
 8000664:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000666:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000678:	4618      	mov	r0, r3
 800067a:	f004 f85b 	bl	8004734 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000684:	f000 fc98 	bl	8000fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fab4 	bl	8004c14 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006b2:	f000 fc81 	bl	8000fb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80006b6:	2308      	movs	r3, #8
 80006b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006ba:	23c0      	movs	r3, #192	; 0xc0
 80006bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80006be:	2304      	movs	r3, #4
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80006c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fcb1 	bl	8005034 <HAL_RCCEx_PeriphCLKConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80006d8:	f000 fc6e 	bl	8000fb8 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3780      	adds	r7, #128	; 0x80
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_CRC_Init+0x20>)
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <MX_CRC_Init+0x24>)
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_CRC_Init+0x20>)
 80006f8:	f001 fe84 	bl	8002404 <HAL_CRC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000702:	f000 fc59 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	2000a270 	.word	0x2000a270
 8000710:	40023000 	.word	0x40023000

08000714 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_DMA2D_Init+0x5c>)
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <MX_DMA2D_Init+0x60>)
 800071c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_DMA2D_Init+0x5c>)
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_DMA2D_Init+0x5c>)
 8000726:	2202      	movs	r2, #2
 8000728:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_DMA2D_Init+0x5c>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_DMA2D_Init+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_DMA2D_Init+0x5c>)
 8000738:	2202      	movs	r2, #2
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_DMA2D_Init+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_DMA2D_Init+0x5c>)
 8000744:	2200      	movs	r2, #0
 8000746:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000748:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_DMA2D_Init+0x5c>)
 800074a:	f001 fe77 	bl	800243c <HAL_DMA2D_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000754:	f000 fc30 	bl	8000fb8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000758:	2101      	movs	r1, #1
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_DMA2D_Init+0x5c>)
 800075c:	f002 f938 	bl	80029d0 <HAL_DMA2D_ConfigLayer>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000766:	f000 fc27 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000a324 	.word	0x2000a324
 8000774:	4002b000 	.word	0x4002b000

08000778 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800077c:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_I2C3_Init+0x74>)
 800077e:	4a1c      	ldr	r2, [pc, #112]	; (80007f0 <MX_I2C3_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_I2C3_Init+0x74>)
 8000784:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_I2C3_Init+0x7c>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <MX_I2C3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_I2C3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_I2C3_Init+0x74>)
 8000796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_I2C3_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_I2C3_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_I2C3_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_I2C3_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_I2C3_Init+0x74>)
 80007b6:	f002 fbfd 	bl	8002fb4 <HAL_I2C_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 fbfa 	bl	8000fb8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80007c4:	2110      	movs	r1, #16
 80007c6:	4809      	ldr	r0, [pc, #36]	; (80007ec <MX_I2C3_Init+0x74>)
 80007c8:	f003 fba3 	bl	8003f12 <HAL_I2CEx_ConfigAnalogFilter>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007d2:	f000 fbf1 	bl	8000fb8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_I2C3_Init+0x74>)
 80007da:	f003 fbd6 	bl	8003f8a <HAL_I2CEx_ConfigDigitalFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007e4:	f000 fbe8 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000a1c4 	.word	0x2000a1c4
 80007f0:	40005c00 	.word	0x40005c00
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	; 0x38
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2234      	movs	r2, #52	; 0x34
 8000802:	2100      	movs	r1, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f01d f8be 	bl	801d986 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800080a:	4b3e      	ldr	r3, [pc, #248]	; (8000904 <MX_LTDC_Init+0x10c>)
 800080c:	4a3e      	ldr	r2, [pc, #248]	; (8000908 <MX_LTDC_Init+0x110>)
 800080e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000810:	4b3c      	ldr	r3, [pc, #240]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800081c:	4b39      	ldr	r3, [pc, #228]	; (8000904 <MX_LTDC_Init+0x10c>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000828:	4b36      	ldr	r3, [pc, #216]	; (8000904 <MX_LTDC_Init+0x10c>)
 800082a:	2209      	movs	r2, #9
 800082c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800082e:	4b35      	ldr	r3, [pc, #212]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000830:	2201      	movs	r2, #1
 8000832:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000834:	4b33      	ldr	r3, [pc, #204]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000836:	221d      	movs	r2, #29
 8000838:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800083a:	4b32      	ldr	r3, [pc, #200]	; (8000904 <MX_LTDC_Init+0x10c>)
 800083c:	2203      	movs	r2, #3
 800083e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000842:	f240 120d 	movw	r2, #269	; 0x10d
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <MX_LTDC_Init+0x10c>)
 800084a:	f240 1243 	movw	r2, #323	; 0x143
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000852:	f240 1217 	movw	r2, #279	; 0x117
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <MX_LTDC_Init+0x10c>)
 800085a:	f240 1247 	movw	r2, #327	; 0x147
 800085e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <MX_LTDC_Init+0x10c>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000870:	4b24      	ldr	r3, [pc, #144]	; (8000904 <MX_LTDC_Init+0x10c>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_LTDC_Init+0x10c>)
 800087a:	f003 fbc5 	bl	8004008 <HAL_LTDC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000884:	f000 fb98 	bl	8000fb8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800088c:	23f0      	movs	r3, #240	; 0xf0
 800088e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000894:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000898:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800089a:	2302      	movs	r3, #2
 800089c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800089e:	23ff      	movs	r3, #255	; 0xff
 80008a0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008ac:	2305      	movs	r3, #5
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008b4:	23f0      	movs	r3, #240	; 0xf0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	480b      	ldr	r0, [pc, #44]	; (8000904 <MX_LTDC_Init+0x10c>)
 80008d8:	f003 fd1e 	bl	8004318 <HAL_LTDC_ConfigLayer>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 80008e2:	f000 fb69 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */
    /*Select the device */
  LcdDrv = &ili9341_drv;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_LTDC_Init+0x114>)
 80008e8:	4a09      	ldr	r2, [pc, #36]	; (8000910 <MX_LTDC_Init+0x118>)
 80008ea:	601a      	str	r2, [r3, #0]
  /* LCD Init */
  LcdDrv->Init();
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_LTDC_Init+0x114>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4798      	blx	r3
  
  LcdDrv->DisplayOff();
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <MX_LTDC_Init+0x114>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	4798      	blx	r3
  /* USER CODE END LTDC_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3738      	adds	r7, #56	; 0x38
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000a278 	.word	0x2000a278
 8000908:	40016800 	.word	0x40016800
 800090c:	2000018c 	.word	0x2000018c
 8000910:	20000010 	.word	0x20000010

08000914 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI5_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI5_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI5_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI5_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI5_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI5_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI5_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI5_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI5_Init+0x64>)
 8000948:	2218      	movs	r2, #24
 800094a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI5_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI5_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI5_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI5_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI5_Init+0x64>)
 8000966:	f004 fda2 	bl	80054ae <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 fb22 	bl	8000fb8 <Error_Handler>
  
  

  /* USER CODE END SPI5_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000a218 	.word	0x2000a218
 800097c:	40015000 	.word	0x40015000

08000980 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_FMC_Init+0xa8>)
 800099c:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <MX_FMC_Init+0xac>)
 800099e:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009a0:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009ae:	2204      	movs	r2, #4
 80009b0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009b4:	2210      	movs	r2, #16
 80009b6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009ba:	2240      	movs	r2, #64	; 0x40
 80009bc:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009c0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009c4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d2:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009d4:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <MX_FMC_Init+0xa8>)
 80009dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009e6:	2307      	movs	r3, #7
 80009e8:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 80009ee:	2307      	movs	r3, #7
 80009f0:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 80009f2:	2303      	movs	r3, #3
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <MX_FMC_Init+0xa8>)
 8000a06:	f004 fcd3 	bl	80053b0 <HAL_SDRAM_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_FMC_Init+0x94>
  {
    Error_Handler( );
 8000a10:	f000 fad2 	bl	8000fb8 <Error_Handler>
  /* USER CODE BEGIN FMC_Init 2 */
  
  FMC_SDRAM_CommandTypeDef command;
  
  /* Program the SDRAM external device */
  BSP_SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4803      	ldr	r0, [pc, #12]	; (8000a28 <MX_FMC_Init+0xa8>)
 8000a1a:	f000 f8b7 	bl	8000b8c <BSP_SDRAM_Initialization_Sequence>
  /* USER CODE END FMC_Init 2 */
}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000a364 	.word	0x2000a364
 8000a2c:	a0000140 	.word	0xa0000140

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08e      	sub	sp, #56	; 0x38
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
 8000a4a:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a4c      	ldr	r2, [pc, #304]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b4a      	ldr	r3, [pc, #296]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	623b      	str	r3, [r7, #32]
 8000a60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a45      	ldr	r2, [pc, #276]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a3e      	ldr	r2, [pc, #248]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a37      	ldr	r2, [pc, #220]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b31      	ldr	r3, [pc, #196]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a22      	ldr	r2, [pc, #136]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000af8:	f043 0310 	orr.w	r3, r3, #16
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_GPIO_Init+0x150>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0308 	and.w	r3, r3, #8
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2104      	movs	r1, #4
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_GPIO_Init+0x154>)
 8000b2c:	f002 fa28 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b36:	4814      	ldr	r0, [pc, #80]	; (8000b88 <MX_GPIO_Init+0x158>)
 8000b38:	f002 fa22 	bl	8002f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b50:	4619      	mov	r1, r3
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <MX_GPIO_Init+0x154>)
 8000b54:	f002 f86a 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b58:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	2302      	movs	r3, #2
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_GPIO_Init+0x158>)
 8000b72:	f002 f85b 	bl	8002c2c <HAL_GPIO_Init>

}
 8000b76:	bf00      	nop
 8000b78:	3738      	adds	r7, #56	; 0x38
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020800 	.word	0x40020800
 8000b88:	40020c00 	.word	0x40020c00

08000b8c <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
 __IO uint32_t tmpmrd =0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f004 fc2d 	bl	8005418 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f001 faec 	bl	800219c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_PALL;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2208      	movs	r2, #8
 8000bce:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  
 8000bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f004 fc18 	bl	8005418 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command->CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2203      	movs	r2, #3
 8000bec:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 4;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = 0;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f004 fc06 	bl	8005418 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000c0c:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000c10:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2204      	movs	r2, #4
 8000c16:	601a      	str	r2, [r3, #0]
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber       = 1;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2201      	movs	r2, #1
 8000c22:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition  = tmpmrd;
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	6839      	ldr	r1, [r7, #0]
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f004 fbf1 	bl	8005418 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT); 
 8000c36:	f240 516a 	movw	r1, #1386	; 0x56a
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f004 fc17 	bl	800546e <HAL_SDRAM_ProgramRefreshRate>
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup the i2c.
  //This is done with cubmx and is therfore not done here.
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  //Dummy function called when initializing to stmpe811 to setup interupt for the i2c.
  //The interupt is not used in our case, therefore nothing is done here.
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	4613      	mov	r3, r2
 8000c74:	717b      	strb	r3, [r7, #5]
  I2C3_WriteData(Addr, Reg, Value);
 8000c76:	797a      	ldrb	r2, [r7, #5]
 8000c78:	79b9      	ldrb	r1, [r7, #6]
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 f839 	bl	8000cf4 <I2C3_WriteData>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	460a      	mov	r2, r1
 8000c94:	71fb      	strb	r3, [r7, #7]
 8000c96:	4613      	mov	r3, r2
 8000c98:	71bb      	strb	r3, [r7, #6]
  return I2C3_ReadData(Addr, Reg);
 8000c9a:	79ba      	ldrb	r2, [r7, #6]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f84b 	bl	8000d3c <I2C3_ReadData>
 8000ca6:	4603      	mov	r3, r0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	603a      	str	r2, [r7, #0]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	80bb      	strh	r3, [r7, #4]
 return I2C3_ReadBuffer(Addr, Reg, pBuffer, Length);
 8000cc6:	88bb      	ldrh	r3, [r7, #4]
 8000cc8:	79b9      	ldrb	r1, [r7, #6]
 8000cca:	79f8      	ldrb	r0, [r7, #7]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	f000 f85d 	bl	8000d8c <I2C3_ReadBuffer>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29b      	uxth	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f001 fa58 	bl	800219c <HAL_Delay>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <I2C3_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2C3_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	460b      	mov	r3, r1
 8000d00:	71bb      	strb	r3, [r7, #6]
 8000d02:	4613      	mov	r3, r2
 8000d04:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout); 
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	b299      	uxth	r1, r3
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <I2C3_WriteData+0x40>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	1d7b      	adds	r3, r7, #5
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	4805      	ldr	r0, [pc, #20]	; (8000d38 <I2C3_WriteData+0x44>)
 8000d24:	f002 fa7e 	bl	8003224 <HAL_I2C_Mem_Write>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  }        
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000004 	.word	0x20000004
 8000d38:	2000a1c4 	.word	0x2000a1c4

08000d3c <I2C3_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2C3_ReadData(uint8_t Addr, uint8_t Reg)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	4603      	mov	r3, r0
 8000d44:	460a      	mov	r2, r1
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	b299      	uxth	r1, r3
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <I2C3_ReadData+0x48>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	2301      	movs	r3, #1
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	f107 030e 	add.w	r3, r7, #14
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <I2C3_ReadData+0x4c>)
 8000d70:	f002 fb52 	bl	8003418 <HAL_I2C_Mem_Read>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();
  
  }
  return value;
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000004 	.word	0x20000004
 8000d88:	2000a1c4 	.word	0x2000a1c4

08000d8c <I2C3_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2C3_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af04      	add	r7, sp, #16
 8000d92:	603a      	str	r2, [r7, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	71bb      	strb	r3, [r7, #6]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	b299      	uxth	r1, r3
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <I2C3_ReadBuffer+0x50>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	9302      	str	r3, [sp, #8]
 8000db4:	88bb      	ldrh	r3, [r7, #4]
 8000db6:	9301      	str	r3, [sp, #4]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	4808      	ldr	r0, [pc, #32]	; (8000de0 <I2C3_ReadBuffer+0x54>)
 8000dc0:	f002 fb2a 	bl	8003418 <HAL_I2C_Mem_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <I2C3_ReadBuffer+0x46>
  {
    return 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <I2C3_ReadBuffer+0x48>
  else
  {
    /* Re-Initialize the BUS */
    //I2Cx_Error();

    return 1;
 8000dd2:	2301      	movs	r3, #1
  }
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	2000a1c4 	.word	0x2000a1c4

08000de4 <SPI5_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPI5_Read(uint8_t ReadSize)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <SPI5_Read+0x38>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f107 0108 	add.w	r1, r7, #8
 8000dfe:	4808      	ldr	r0, [pc, #32]	; (8000e20 <SPI5_Read+0x3c>)
 8000e00:	f004 fced 	bl	80057de <HAL_SPI_Receive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SPI5_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 8000e0e:	f000 f827 	bl	8000e60 <SPI5_Error>
  }
  
  return readvalue;
 8000e12:	68bb      	ldr	r3, [r7, #8]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	2000a218 	.word	0x2000a218

08000e24 <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <SPI5_Write+0x34>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1db9      	adds	r1, r7, #6
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <SPI5_Write+0x38>)
 8000e3c:	f004 fb9b 	bl	8005576 <HAL_SPI_Transmit>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SPI5_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
 8000e4a:	f000 f809 	bl	8000e60 <SPI5_Error>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	2000a218 	.word	0x2000a218

08000e60 <SPI5_Error>:

/**
  * @brief  SPI5 error treatment function.
  */
static void SPI5_Error(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  //HAL_SPI_DeInit(&SpiHandle);
  
  /* Re- Initialize the SPI communication BUS */
  //SPIx_Init();
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <LCD_IO_Init>:

void LCD_IO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Set or Reset the control line */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <LCD_IO_Init+0x1c>)
 8000e7a:	f002 f881 	bl	8002f80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2104      	movs	r1, #4
 8000e82:	4802      	ldr	r0, [pc, #8]	; (8000e8c <LCD_IO_Init+0x1c>)
 8000e84:	f002 f87c 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40020800 	.word	0x40020800

08000e90 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	480a      	ldr	r0, [pc, #40]	; (8000ecc <LCD_IO_WriteData+0x3c>)
 8000ea2:	f002 f86d 	bl	8002f80 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <LCD_IO_WriteData+0x40>)
 8000eac:	f002 f868 	bl	8002f80 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ffb6 	bl	8000e24 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2104      	movs	r1, #4
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <LCD_IO_WriteData+0x40>)
 8000ebe:	f002 f85f 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <LCD_IO_WriteReg+0x3c>)
 8000ee6:	f002 f84b 	bl	8002f80 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2104      	movs	r1, #4
 8000eee:	4809      	ldr	r0, [pc, #36]	; (8000f14 <LCD_IO_WriteReg+0x40>)
 8000ef0:	f002 f846 	bl	8002f80 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff93 	bl	8000e24 <SPI5_Write>
  
  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2104      	movs	r1, #4
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <LCD_IO_WriteReg+0x40>)
 8000f04:	f002 f83c 	bl	8002f80 <HAL_GPIO_WritePin>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020c00 	.word	0x40020c00
 8000f14:	40020800 	.word	0x40020800

08000f18 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	80fb      	strh	r3, [r7, #6]
 8000f24:	4613      	mov	r3, r2
 8000f26:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4810      	ldr	r0, [pc, #64]	; (8000f74 <LCD_IO_ReadData+0x5c>)
 8000f32:	f002 f825 	bl	8002f80 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <LCD_IO_ReadData+0x60>)
 8000f3e:	f002 f81f 	bl	8002f80 <HAL_GPIO_WritePin>
  
  SPI5_Write(RegValue);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff6d 	bl	8000e24 <SPI5_Write>
  
  readvalue = SPI5_Read(ReadSize);
 8000f4a:	797b      	ldrb	r3, [r7, #5]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff49 	bl	8000de4 <SPI5_Read>
 8000f52:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <LCD_IO_ReadData+0x60>)
 8000f5c:	f002 f810 	bl	8002f80 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2104      	movs	r1, #4
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <LCD_IO_ReadData+0x5c>)
 8000f66:	f002 f80b 	bl	8002f80 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00

08000f7c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f001 f909 	bl	800219c <HAL_Delay>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fa6:	f001 f8d9 	bl	800215c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40001000 	.word	0x40001000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_MspInit+0x54>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <HAL_MspInit+0x54>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x54>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <HAL_MspInit+0x54>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_MspInit+0x54>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_MspInit+0x54>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	210f      	movs	r1, #15
 800100a:	f06f 0001 	mvn.w	r0, #1
 800100e:	f001 f9c1 	bl	8002394 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_CRC_MspInit+0x3c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d10d      	bne.n	800104e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <HAL_CRC_MspInit+0x40>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_CRC_MspInit+0x40>)
 800103c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_CRC_MspInit+0x40>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023000 	.word	0x40023000
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_DMA2D_MspInit+0x48>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d115      	bne.n	80010a2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_DMA2D_MspInit+0x4c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <HAL_DMA2D_MspInit+0x4c>)
 8001080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_DMA2D_MspInit+0x4c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2105      	movs	r1, #5
 8001096:	205a      	movs	r0, #90	; 0x5a
 8001098:	f001 f97c 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800109c:	205a      	movs	r0, #90	; 0x5a
 800109e:	f001 f995 	bl	80023cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	4002b000 	.word	0x4002b000
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_DMA2D_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* hdma2d)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_DMA2D_MspDeInit+0x2c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d108      	bne.n	80010d8 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <HAL_DMA2D_MspDeInit+0x30>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <HAL_DMA2D_MspDeInit+0x30>)
 80010cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30

    /* DMA2D interrupt DeInit */
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 80010d2:	205a      	movs	r0, #90	; 0x5a
 80010d4:	f001 f988 	bl	80023e8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	4002b000 	.word	0x4002b000
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_I2C_MspInit+0xc4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d14b      	bne.n	80011a2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a27      	ldr	r2, [pc, #156]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a20      	ldr	r2, [pc, #128]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001154:	2304      	movs	r3, #4
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <HAL_I2C_MspInit+0xcc>)
 8001160:	f001 fd64 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001164:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116a:	2312      	movs	r3, #18
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001176:	2304      	movs	r3, #4
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <HAL_I2C_MspInit+0xd0>)
 8001182:	f001 fd53 	bl	8002c2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 8001190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_I2C_MspInit+0xc8>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40005c00 	.word	0x40005c00
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020000 	.word	0x40020000

080011bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	; 0x38
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a7b      	ldr	r2, [pc, #492]	; (80013c8 <HAL_LTDC_MspInit+0x20c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	f040 80ef 	bne.w	80013be <HAL_LTDC_MspInit+0x202>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	4a78      	ldr	r2, [pc, #480]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 80011ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011ee:	6453      	str	r3, [r2, #68]	; 0x44
 80011f0:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	4b72      	ldr	r3, [pc, #456]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a71      	ldr	r2, [pc, #452]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b6f      	ldr	r3, [pc, #444]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0320 	and.w	r3, r3, #32
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	4a6a      	ldr	r2, [pc, #424]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
 8001228:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	4b64      	ldr	r3, [pc, #400]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	4a63      	ldr	r2, [pc, #396]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800123e:	f043 0302 	orr.w	r3, r3, #2
 8001242:	6313      	str	r3, [r2, #48]	; 0x30
 8001244:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a5c      	ldr	r2, [pc, #368]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800125a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b5a      	ldr	r3, [pc, #360]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	4b56      	ldr	r3, [pc, #344]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a55      	ldr	r2, [pc, #340]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b53      	ldr	r3, [pc, #332]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b4f      	ldr	r3, [pc, #316]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	4a4e      	ldr	r2, [pc, #312]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6313      	str	r3, [r2, #48]	; 0x30
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_LTDC_MspInit+0x210>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	2302      	movs	r3, #2
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b6:	230e      	movs	r3, #14
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4843      	ldr	r0, [pc, #268]	; (80013d0 <HAL_LTDC_MspInit+0x214>)
 80012c2:	f001 fcb3 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 80012c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d4:	2302      	movs	r3, #2
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012d8:	230e      	movs	r3, #14
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e0:	4619      	mov	r1, r3
 80012e2:	483c      	ldr	r0, [pc, #240]	; (80013d4 <HAL_LTDC_MspInit+0x218>)
 80012e4:	f001 fca2 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012e8:	2303      	movs	r3, #3
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f4:	2302      	movs	r3, #2
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012f8:	2309      	movs	r3, #9
 80012fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	4619      	mov	r1, r3
 8001302:	4835      	ldr	r0, [pc, #212]	; (80013d8 <HAL_LTDC_MspInit+0x21c>)
 8001304:	f001 fc92 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001308:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001316:	2302      	movs	r3, #2
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800131a:	230e      	movs	r3, #14
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	482c      	ldr	r0, [pc, #176]	; (80013d8 <HAL_LTDC_MspInit+0x21c>)
 8001326:	f001 fc81 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 800132a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001338:	2302      	movs	r3, #2
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800133c:	230e      	movs	r3, #14
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <HAL_LTDC_MspInit+0x220>)
 8001348:	f001 fc70 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800135c:	230e      	movs	r3, #14
 800135e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4619      	mov	r1, r3
 8001366:	481e      	ldr	r0, [pc, #120]	; (80013e0 <HAL_LTDC_MspInit+0x224>)
 8001368:	f001 fc60 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800136c:	2308      	movs	r3, #8
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2302      	movs	r3, #2
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800137c:	230e      	movs	r3, #14
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001384:	4619      	mov	r1, r3
 8001386:	4817      	ldr	r0, [pc, #92]	; (80013e4 <HAL_LTDC_MspInit+0x228>)
 8001388:	f001 fc50 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800138c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2302      	movs	r3, #2
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800139e:	2309      	movs	r3, #9
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <HAL_LTDC_MspInit+0x220>)
 80013aa:	f001 fc3f 	bl	8002c2c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2105      	movs	r1, #5
 80013b2:	2058      	movs	r0, #88	; 0x58
 80013b4:	f000 ffee 	bl	8002394 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013b8:	2058      	movs	r0, #88	; 0x58
 80013ba:	f001 f807 	bl	80023cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3738      	adds	r7, #56	; 0x38
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40016800 	.word	0x40016800
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40021400 	.word	0x40021400
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40021800 	.word	0x40021800
 80013e0:	40020800 	.word	0x40020800
 80013e4:	40020c00 	.word	0x40020c00

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <HAL_SPI_MspInit+0x84>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d12c      	bne.n	8001464 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_SPI_MspInit+0x88>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_SPI_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_SPI_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001442:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001454:	2305      	movs	r3, #5
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_SPI_MspInit+0x8c>)
 8001460:	f001 fbe4 	bl	8002c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40015000 	.word	0x40015000
 8001470:	40023800 	.word	0x40023800
 8001474:	40021400 	.word	0x40021400

08001478 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800148c:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_FMC_MspInit+0x104>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d16f      	bne.n	8001574 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_FMC_MspInit+0x104>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b38      	ldr	r3, [pc, #224]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a37      	ldr	r2, [pc, #220]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6393      	str	r3, [r2, #56]	; 0x38
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_FMC_MspInit+0x108>)
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80014b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80014ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c8:	230c      	movs	r3, #12
 80014ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	482c      	ldr	r0, [pc, #176]	; (8001584 <HAL_FMC_MspInit+0x10c>)
 80014d2:	f001 fbab 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e6:	230c      	movs	r3, #12
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4826      	ldr	r0, [pc, #152]	; (8001588 <HAL_FMC_MspInit+0x110>)
 80014f0:	f001 fb9c 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80014f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80014f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	481f      	ldr	r0, [pc, #124]	; (800158c <HAL_FMC_MspInit+0x114>)
 8001510:	f001 fb8c 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 8001514:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001518:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001526:	230c      	movs	r3, #12
 8001528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4818      	ldr	r0, [pc, #96]	; (8001590 <HAL_FMC_MspInit+0x118>)
 8001530:	f001 fb7c 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 8001534:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001538:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001546:	230c      	movs	r3, #12
 8001548:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <HAL_FMC_MspInit+0x11c>)
 8001550:	f001 fb6c 	bl	8002c2c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001554:	2360      	movs	r3, #96	; 0x60
 8001556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001564:	230c      	movs	r3, #12
 8001566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_FMC_MspInit+0x120>)
 800156e:	f001 fb5d 	bl	8002c2c <HAL_GPIO_Init>
 8001572:	e000      	b.n	8001576 <HAL_FMC_MspInit+0xfe>
    return;
 8001574:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000190 	.word	0x20000190
 8001580:	40023800 	.word	0x40023800
 8001584:	40021400 	.word	0x40021400
 8001588:	40020800 	.word	0x40020800
 800158c:	40021800 	.word	0x40021800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020400 	.word	0x40020400

0800159c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015a4:	f7ff ff68 	bl	8001478 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2036      	movs	r0, #54	; 0x36
 80015c6:	f000 fee5 	bl	8002394 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80015ca:	2036      	movs	r0, #54	; 0x36
 80015cc:	f000 fefe 	bl	80023cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_InitTick+0xa4>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_InitTick+0xa4>)
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_InitTick+0xa4>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	f003 0310 	and.w	r3, r3, #16
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fcea 	bl	8004fd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80015fc:	f003 fcd4 	bl	8004fa8 <HAL_RCC_GetPCLK1Freq>
 8001600:	4603      	mov	r3, r0
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_InitTick+0xa8>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_InitTick+0xac>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_InitTick+0xb0>)
 8001618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_InitTick+0xac>)
 800161c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_InitTick+0xac>)
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_InitTick+0xac>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_InitTick+0xac>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_InitTick+0xac>)
 8001636:	f004 fc8f 	bl	8005f58 <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <HAL_InitTick+0xac>)
 8001642:	f004 fcbe 	bl	8005fc2 <HAL_TIM_Base_Start_IT>
 8001646:	4603      	mov	r3, r0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	431bde83 	.word	0x431bde83
 800165c:	2000a398 	.word	0x2000a398
 8001660:	40001000 	.word	0x40001000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM6_DAC_IRQHandler+0x10>)
 800169e:	f004 fcb4 	bl	800600a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000a398 	.word	0x2000a398

080016ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <LTDC_IRQHandler+0x10>)
 80016b2:	f002 fd79 	bl	80041a8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000a278 	.word	0x2000a278

080016c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <DMA2D_IRQHandler+0x10>)
 80016c6:	f001 f872 	bl	80027ae <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000a324 	.word	0x2000a324

080016d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
	return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ee:	f01c f8f3 	bl	801d8d8 <__errno>
 80016f2:	4602      	mov	r2, r0
 80016f4:	2316      	movs	r3, #22
 80016f6:	6013      	str	r3, [r2, #0]
	return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_exit>:

void _exit (int status)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001716:	e7fe      	b.n	8001716 <_exit+0x12>

08001718 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e00a      	b.n	8001740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172a:	f3af 8000 	nop.w
 800172e:	4601      	mov	r1, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	60ba      	str	r2, [r7, #8]
 8001736:	b2ca      	uxtb	r2, r1
 8001738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3301      	adds	r3, #1
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	429a      	cmp	r2, r3
 8001746:	dbf0      	blt.n	800172a <_read+0x12>
	}

return len;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e009      	b.n	8001778 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	60ba      	str	r2, [r7, #8]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf1      	blt.n	8001764 <_write+0x12>
	}
	return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_close>:

int _close(int file)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
	return -1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b2:	605a      	str	r2, [r3, #4]
	return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_isatty>:

int _isatty(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
	return 0;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_sbrk+0x50>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <_sbrk+0x16>
		heap_end = &end;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <_sbrk+0x50>)
 8001806:	4a10      	ldr	r2, [pc, #64]	; (8001848 <_sbrk+0x54>)
 8001808:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <_sbrk+0x50>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <_sbrk+0x50>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	466a      	mov	r2, sp
 800181a:	4293      	cmp	r3, r2
 800181c:	d907      	bls.n	800182e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800181e:	f01c f85b 	bl	801d8d8 <__errno>
 8001822:	4602      	mov	r2, r0
 8001824:	230c      	movs	r3, #12
 8001826:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	e006      	b.n	800183c <_sbrk+0x48>
	}

	heap_end += incr;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <_sbrk+0x50>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a03      	ldr	r2, [pc, #12]	; (8001844 <_sbrk+0x50>)
 8001838:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000194 	.word	0x20000194
 8001848:	2000a420 	.word	0x2000a420

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <SystemInit+0x28>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <SystemInit+0x28>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SystemInit+0x28>)
 8001862:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001866:	609a      	str	r2, [r3, #8]
#endif
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800187c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800187e:	e003      	b.n	8001888 <LoopCopyDataInit>

08001880 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001882:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001884:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001886:	3104      	adds	r1, #4

08001888 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001888:	480b      	ldr	r0, [pc, #44]	; (80018b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800188c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800188e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001890:	d3f6      	bcc.n	8001880 <CopyDataInit>
  ldr  r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001894:	e002      	b.n	800189c <LoopFillZerobss>

08001896 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001896:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001898:	f842 3b04 	str.w	r3, [r2], #4

0800189c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800189e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018a0:	d3f9      	bcc.n	8001896 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018a2:	f7ff ffd3 	bl	800184c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f01c f82f 	bl	801d908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018aa:	f7fe fe71 	bl	8000590 <main>
  bx  lr    
 80018ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018b0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018b4:	08051124 	.word	0x08051124
  ldr  r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018bc:	20000170 	.word	0x20000170
  ldr  r2, =_sbss
 80018c0:	20000170 	.word	0x20000170
  ldr  r3, = _ebss
 80018c4:	2000a420 	.word	0x2000a420

080018c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC_IRQHandler>

080018ca <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018ce:	f7ff facf 	bl	8000e70 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018d2:	20ca      	movs	r0, #202	; 0xca
 80018d4:	f000 f95d 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80018d8:	20c3      	movs	r0, #195	; 0xc3
 80018da:	f000 f967 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80018de:	2008      	movs	r0, #8
 80018e0:	f000 f964 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80018e4:	2050      	movs	r0, #80	; 0x50
 80018e6:	f000 f961 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80018ea:	20cf      	movs	r0, #207	; 0xcf
 80018ec:	f000 f951 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 f95b 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80018f6:	20c1      	movs	r0, #193	; 0xc1
 80018f8:	f000 f958 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80018fc:	2030      	movs	r0, #48	; 0x30
 80018fe:	f000 f955 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001902:	20ed      	movs	r0, #237	; 0xed
 8001904:	f000 f945 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001908:	2064      	movs	r0, #100	; 0x64
 800190a:	f000 f94f 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800190e:	2003      	movs	r0, #3
 8001910:	f000 f94c 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001914:	2012      	movs	r0, #18
 8001916:	f000 f949 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800191a:	2081      	movs	r0, #129	; 0x81
 800191c:	f000 f946 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001920:	20e8      	movs	r0, #232	; 0xe8
 8001922:	f000 f936 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001926:	2085      	movs	r0, #133	; 0x85
 8001928:	f000 f940 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800192c:	2000      	movs	r0, #0
 800192e:	f000 f93d 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001932:	2078      	movs	r0, #120	; 0x78
 8001934:	f000 f93a 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001938:	20cb      	movs	r0, #203	; 0xcb
 800193a:	f000 f92a 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800193e:	2039      	movs	r0, #57	; 0x39
 8001940:	f000 f934 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001944:	202c      	movs	r0, #44	; 0x2c
 8001946:	f000 f931 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f92e 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001950:	2034      	movs	r0, #52	; 0x34
 8001952:	f000 f92b 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001956:	2002      	movs	r0, #2
 8001958:	f000 f928 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800195c:	20f7      	movs	r0, #247	; 0xf7
 800195e:	f000 f918 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001962:	2020      	movs	r0, #32
 8001964:	f000 f922 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001968:	20ea      	movs	r0, #234	; 0xea
 800196a:	f000 f912 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f91c 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f919 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800197a:	20b1      	movs	r0, #177	; 0xb1
 800197c:	f000 f909 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f913 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001986:	201b      	movs	r0, #27
 8001988:	f000 f910 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800198c:	20b6      	movs	r0, #182	; 0xb6
 800198e:	f000 f900 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001992:	200a      	movs	r0, #10
 8001994:	f000 f90a 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001998:	20a2      	movs	r0, #162	; 0xa2
 800199a:	f000 f907 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800199e:	20c0      	movs	r0, #192	; 0xc0
 80019a0:	f000 f8f7 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019a4:	2010      	movs	r0, #16
 80019a6:	f000 f901 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80019aa:	20c1      	movs	r0, #193	; 0xc1
 80019ac:	f000 f8f1 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019b0:	2010      	movs	r0, #16
 80019b2:	f000 f8fb 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80019b6:	20c5      	movs	r0, #197	; 0xc5
 80019b8:	f000 f8eb 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80019bc:	2045      	movs	r0, #69	; 0x45
 80019be:	f000 f8f5 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019c2:	2015      	movs	r0, #21
 80019c4:	f000 f8f2 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019c8:	20c7      	movs	r0, #199	; 0xc7
 80019ca:	f000 f8e2 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019ce:	2090      	movs	r0, #144	; 0x90
 80019d0:	f000 f8ec 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019d4:	2036      	movs	r0, #54	; 0x36
 80019d6:	f000 f8dc 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80019da:	20c8      	movs	r0, #200	; 0xc8
 80019dc:	f000 f8e6 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80019e0:	20f2      	movs	r0, #242	; 0xf2
 80019e2:	f000 f8d6 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f8e0 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80019ec:	20b0      	movs	r0, #176	; 0xb0
 80019ee:	f000 f8d0 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80019f2:	20c2      	movs	r0, #194	; 0xc2
 80019f4:	f000 f8da 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80019f8:	20b6      	movs	r0, #182	; 0xb6
 80019fa:	f000 f8ca 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80019fe:	200a      	movs	r0, #10
 8001a00:	f000 f8d4 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a04:	20a7      	movs	r0, #167	; 0xa7
 8001a06:	f000 f8d1 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a0a:	2027      	movs	r0, #39	; 0x27
 8001a0c:	f000 f8ce 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a10:	2004      	movs	r0, #4
 8001a12:	f000 f8cb 	bl	8001bac <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a16:	202a      	movs	r0, #42	; 0x2a
 8001a18:	f000 f8bb 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f000 f8c5 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f000 f8c2 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f8bf 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a2e:	20ef      	movs	r0, #239	; 0xef
 8001a30:	f000 f8bc 	bl	8001bac <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a34:	202b      	movs	r0, #43	; 0x2b
 8001a36:	f000 f8ac 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 f8b6 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f000 f8b3 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 f8b0 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a4c:	203f      	movs	r0, #63	; 0x3f
 8001a4e:	f000 f8ad 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a52:	20f6      	movs	r0, #246	; 0xf6
 8001a54:	f000 f89d 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f000 f8a7 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f8a4 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a64:	2006      	movs	r0, #6
 8001a66:	f000 f8a1 	bl	8001bac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a6a:	202c      	movs	r0, #44	; 0x2c
 8001a6c:	f000 f891 	bl	8001b92 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a70:	20c8      	movs	r0, #200	; 0xc8
 8001a72:	f7ff fa83 	bl	8000f7c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a76:	2026      	movs	r0, #38	; 0x26
 8001a78:	f000 f88b 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f000 f895 	bl	8001bac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001a82:	20e0      	movs	r0, #224	; 0xe0
 8001a84:	f000 f885 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f000 f88f 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001a8e:	2029      	movs	r0, #41	; 0x29
 8001a90:	f000 f88c 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001a94:	2024      	movs	r0, #36	; 0x24
 8001a96:	f000 f889 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a9a:	200c      	movs	r0, #12
 8001a9c:	f000 f886 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001aa0:	200e      	movs	r0, #14
 8001aa2:	f000 f883 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001aa6:	2009      	movs	r0, #9
 8001aa8:	f000 f880 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001aac:	204e      	movs	r0, #78	; 0x4e
 8001aae:	f000 f87d 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001ab2:	2078      	movs	r0, #120	; 0x78
 8001ab4:	f000 f87a 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ab8:	203c      	movs	r0, #60	; 0x3c
 8001aba:	f000 f877 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001abe:	2009      	movs	r0, #9
 8001ac0:	f000 f874 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ac4:	2013      	movs	r0, #19
 8001ac6:	f000 f871 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001aca:	2005      	movs	r0, #5
 8001acc:	f000 f86e 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ad0:	2017      	movs	r0, #23
 8001ad2:	f000 f86b 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ad6:	2011      	movs	r0, #17
 8001ad8:	f000 f868 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f865 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001ae2:	20e1      	movs	r0, #225	; 0xe1
 8001ae4:	f000 f855 	bl	8001b92 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f85f 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001aee:	2016      	movs	r0, #22
 8001af0:	f000 f85c 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001af4:	201b      	movs	r0, #27
 8001af6:	f000 f859 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001afa:	2004      	movs	r0, #4
 8001afc:	f000 f856 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b00:	2011      	movs	r0, #17
 8001b02:	f000 f853 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b06:	2007      	movs	r0, #7
 8001b08:	f000 f850 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b0c:	2031      	movs	r0, #49	; 0x31
 8001b0e:	f000 f84d 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b12:	2033      	movs	r0, #51	; 0x33
 8001b14:	f000 f84a 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b18:	2042      	movs	r0, #66	; 0x42
 8001b1a:	f000 f847 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b1e:	2005      	movs	r0, #5
 8001b20:	f000 f844 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b24:	200c      	movs	r0, #12
 8001b26:	f000 f841 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b2a:	200a      	movs	r0, #10
 8001b2c:	f000 f83e 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b30:	2028      	movs	r0, #40	; 0x28
 8001b32:	f000 f83b 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b36:	202f      	movs	r0, #47	; 0x2f
 8001b38:	f000 f838 	bl	8001bac <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b3c:	200f      	movs	r0, #15
 8001b3e:	f000 f835 	bl	8001bac <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b42:	2011      	movs	r0, #17
 8001b44:	f000 f825 	bl	8001b92 <ili9341_WriteReg>
  LCD_Delay(200);
 8001b48:	20c8      	movs	r0, #200	; 0xc8
 8001b4a:	f7ff fa17 	bl	8000f7c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b4e:	2029      	movs	r0, #41	; 0x29
 8001b50:	f000 f81f 	bl	8001b92 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b54:	202c      	movs	r0, #44	; 0x2c
 8001b56:	f000 f81c 	bl	8001b92 <ili9341_WriteReg>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b62:	f7ff f985 	bl	8000e70 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b66:	2103      	movs	r1, #3
 8001b68:	20d3      	movs	r0, #211	; 0xd3
 8001b6a:	f000 f82c 	bl	8001bc6 <ili9341_ReadData>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b29b      	uxth	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b7a:	2029      	movs	r0, #41	; 0x29
 8001b7c:	f000 f809 	bl	8001b92 <ili9341_WriteReg>
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001b88:	2028      	movs	r0, #40	; 0x28
 8001b8a:	f000 f802 	bl	8001b92 <ili9341_WriteReg>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f998 	bl	8000ed4 <LCD_IO_WriteReg>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f969 	bl	8000e90 <LCD_IO_WriteData>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	460a      	mov	r2, r1
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001bd6:	797a      	ldrb	r2, [r7, #5]
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	4611      	mov	r1, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f99b 	bl	8000f18 <LCD_IO_ReadData>
 8001be2:	4603      	mov	r3, r0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001bf0:	23f0      	movs	r3, #240	; 0xf0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c00:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 fa59 	bl	80020d4 <stmpe811_GetInstance>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2bff      	cmp	r3, #255	; 0xff
 8001c2a:	d112      	bne.n	8001c52 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f000 fa51 	bl	80020d4 <stmpe811_GetInstance>
 8001c32:	4603      	mov	r3, r0
 8001c34:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d80a      	bhi.n	8001c52 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001c3c:	7bbb      	ldrb	r3, [r7, #14]
 8001c3e:	88fa      	ldrh	r2, [r7, #6]
 8001c40:	b2d1      	uxtb	r1, r2
 8001c42:	4a06      	ldr	r2, [pc, #24]	; (8001c5c <stmpe811_Init+0x4c>)
 8001c44:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001c46:	f7fe ffff 	bl	8000c48 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001c4a:	88fb      	ldrh	r3, [r7, #6]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 f807 	bl	8001c60 <stmpe811_Reset>
    }
  }
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000198 	.word	0x20000198

08001c60 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2202      	movs	r2, #2
 8001c70:	2103      	movs	r1, #3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fff6 	bl	8000c64 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f7ff f830 	bl	8000cde <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2200      	movs	r2, #0
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe ffec 	bl	8000c64 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001c8c:	2002      	movs	r0, #2
 8001c8e:	f7ff f826 	bl	8000cde <IOE_Delay>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001c9a:	b590      	push	{r4, r7, lr}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001ca4:	f7fe ffd0 	bl	8000c48 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe ffeb 	bl	8000c8a <IOE_Read>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe ffe2 	bl	8000c8a <IOE_Read>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cca:	4323      	orrs	r3, r4
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	b29b      	uxth	r3, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}

08001cd8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2109      	movs	r1, #9
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe ffcc 	bl	8000c8a <IOE_Read>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	7bfa      	ldrb	r2, [r7, #15]
 8001d04:	2109      	movs	r1, #9
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe ffac 	bl	8000c64 <IOE_Write>
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2109      	movs	r1, #9
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ffae 	bl	8000c8a <IOE_Read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001d3a:	88fb      	ldrh	r3, [r7, #6]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	2109      	movs	r1, #9
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe ff8e 	bl	8000c64 <IOE_Write>
    
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	460a      	mov	r2, r1
 8001d5a:	80fb      	strh	r3, [r7, #6]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	210a      	movs	r1, #10
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe ff8d 	bl	8000c8a <IOE_Read>
 8001d70:	4603      	mov	r3, r0
 8001d72:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001d74:	7bfa      	ldrb	r2, [r7, #15]
 8001d76:	797b      	ldrb	r3, [r7, #5]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	210a      	movs	r1, #10
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe ff6d 	bl	8000c64 <IOE_Write>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460a      	mov	r2, r1
 8001d9c:	80fb      	strh	r3, [r7, #6]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	210a      	movs	r1, #10
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ff6c 	bl	8000c8a <IOE_Read>
 8001db2:	4603      	mov	r3, r0
 8001db4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001db6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	b25b      	sxtb	r3, r3
 8001dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	210a      	movs	r1, #10
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe ff47 	bl	8000c64 <IOE_Write>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	4603      	mov	r3, r0
 8001de6:	460a      	mov	r2, r1
 8001de8:	80fb      	strh	r3, [r7, #6]
 8001dea:	4613      	mov	r3, r2
 8001dec:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	210b      	movs	r1, #11
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ff48 	bl	8000c8a <IOE_Read>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	797b      	ldrb	r3, [r7, #5]
 8001e00:	4013      	ands	r3, r2
 8001e02:	b2db      	uxtb	r3, r3
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	460a      	mov	r2, r1
 8001e16:	80fb      	strh	r3, [r7, #6]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	797a      	ldrb	r2, [r7, #5]
 8001e22:	210b      	movs	r1, #11
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe ff1d 	bl	8000c64 <IOE_Write>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	6039      	str	r1, [r7, #0]
 8001e3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2117      	movs	r1, #23
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff1e 	bl	8000c8a <IOE_Read>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b25b      	sxtb	r3, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	b25a      	sxtb	r2, r3
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	2117      	movs	r1, #23
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fef9 	bl	8000c64 <IOE_Write>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2104      	movs	r1, #4
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fefd 	bl	8000c8a <IOE_Read>
 8001e90:	4603      	mov	r3, r0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	f023 0304 	bic.w	r3, r3, #4
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fedd 	bl	8000c64 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	21f0      	movs	r1, #240	; 0xf0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ffbf 	bl	8001e32 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fecd 	bl	8000c64 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2249      	movs	r2, #73	; 0x49
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fec6 	bl	8000c64 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7fe ff00 	bl	8000cde <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2121      	movs	r1, #33	; 0x21
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe febc 	bl	8000c64 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	229a      	movs	r2, #154	; 0x9a
 8001ef2:	2141      	movs	r1, #65	; 0x41
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe feb5 	bl	8000c64 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001efa:	88fb      	ldrh	r3, [r7, #6]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2201      	movs	r2, #1
 8001f00:	214a      	movs	r1, #74	; 0x4a
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe feae 	bl	8000c64 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	214b      	movs	r1, #75	; 0x4b
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fea7 	bl	8000c64 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	214b      	movs	r1, #75	; 0x4b
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fea0 	bl	8000c64 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2156      	movs	r1, #86	; 0x56
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fe99 	bl	8000c64 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2201      	movs	r2, #1
 8001f38:	2158      	movs	r1, #88	; 0x58
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fe92 	bl	8000c64 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	2140      	movs	r1, #64	; 0x40
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fe8b 	bl	8000c64 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	210b      	movs	r1, #11
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fe84 	bl	8000c64 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f7fe febe 	bl	8000cde <IOE_Delay>
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4603      	mov	r3, r0
 8001f72:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2140      	movs	r1, #64	; 0x40
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fe83 	bl	8000c8a <IOE_Read>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8a:	2b80      	cmp	r3, #128	; 0x80
 8001f8c:	bf0c      	ite	eq
 8001f8e:	2301      	moveq	r3, #1
 8001f90:	2300      	movne	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001f96:	7bbb      	ldrb	r3, [r7, #14]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	214c      	movs	r1, #76	; 0x4c
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fe71 	bl	8000c8a <IOE_Read>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d010      	beq.n	8001fd0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e00d      	b.n	8001fd0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2201      	movs	r2, #1
 8001fba:	214b      	movs	r1, #75	; 0x4b
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe51 	bl	8000c64 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	214b      	movs	r1, #75	; 0x4b
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe4a 	bl	8000c64 <IOE_Write>
  }
  
  return ret;
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001fe8:	89fb      	ldrh	r3, [r7, #14]
 8001fea:	b2d8      	uxtb	r0, r3
 8001fec:	f107 0210 	add.w	r2, r7, #16
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	21d7      	movs	r1, #215	; 0xd7
 8001ff4:	f7fe fe5c 	bl	8000cb0 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001ff8:	7c3b      	ldrb	r3, [r7, #16]
 8001ffa:	061a      	lsls	r2, r3, #24
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	041b      	lsls	r3, r3, #16
 8002000:	431a      	orrs	r2, r3
 8002002:	7cbb      	ldrb	r3, [r7, #18]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	4313      	orrs	r3, r2
 8002008:	7cfa      	ldrb	r2, [r7, #19]
 800200a:	4313      	orrs	r3, r2
 800200c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	b29a      	uxth	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	0a1b      	lsrs	r3, r3, #8
 800201c:	b29b      	uxth	r3, r3
 800201e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002028:	89fb      	ldrh	r3, [r7, #14]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2201      	movs	r2, #1
 800202e:	214b      	movs	r1, #75	; 0x4b
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe17 	bl	8000c64 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002036:	89fb      	ldrh	r3, [r7, #14]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2200      	movs	r2, #0
 800203c:	214b      	movs	r1, #75	; 0x4b
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fe10 	bl	8000c64 <IOE_Write>
}
 8002044:	bf00      	nop
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002056:	f7fe fdfe 	bl	8000c56 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	211f      	movs	r1, #31
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fe76 	bl	8001d50 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe36 	bl	8001cd8 <stmpe811_EnableGlobalIT>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fe47 	bl	8001d14 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	211f      	movs	r1, #31
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe81 	bl	8001d92 <stmpe811_DisableITSource>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	211f      	movs	r1, #31
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fe99 	bl	8001dde <stmpe811_ReadGITStatus>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	211f      	movs	r1, #31
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff fea1 	bl	8001e0c <stmpe811_ClearGlobalIT>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e00b      	b.n	8002100 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <stmpe811_GetInstance+0x40>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	88fa      	ldrh	r2, [r7, #6]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d101      	bne.n	80020fa <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	e006      	b.n	8002108 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	3301      	adds	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d9f0      	bls.n	80020e8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002106:	23ff      	movs	r3, #255	; 0xff
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000198 	.word	0x20000198

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0d      	ldr	r2, [pc, #52]	; (8002158 <HAL_Init+0x40>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_Init+0x40>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	; (8002158 <HAL_Init+0x40>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f91c 	bl	800237e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff fa32 	bl	80015b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7fe ff3c 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000074 	.word	0x20000074
 8002180:	2000a3d8 	.word	0x2000a3d8

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000a3d8 	.word	0x2000a3d8

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff ffee 	bl	8002184 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_Delay+0x40>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffde 	bl	8002184 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000074 	.word	0x20000074

080021e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021fc:	4013      	ands	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800220c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002212:	4a04      	ldr	r2, [pc, #16]	; (8002224 <__NVIC_SetPriorityGrouping+0x44>)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	60d3      	str	r3, [r2, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222c:	4b04      	ldr	r3, [pc, #16]	; (8002240 <__NVIC_GetPriorityGrouping+0x18>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	0a1b      	lsrs	r3, r3, #8
 8002232:	f003 0307 	and.w	r3, r3, #7
}
 8002236:	4618      	mov	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	db0b      	blt.n	800226e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	f003 021f 	and.w	r2, r3, #31
 800225c:	4907      	ldr	r1, [pc, #28]	; (800227c <__NVIC_EnableIRQ+0x38>)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	2001      	movs	r0, #1
 8002266:	fa00 f202 	lsl.w	r2, r0, r2
 800226a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	2b00      	cmp	r3, #0
 8002290:	db10      	blt.n	80022b4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4909      	ldr	r1, [pc, #36]	; (80022c0 <__NVIC_DisableIRQ+0x40>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	2001      	movs	r0, #1
 80022a2:	fa00 f202 	lsl.w	r2, r0, r2
 80022a6:	3320      	adds	r3, #32
 80022a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022b0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff2a 	bl	80021e0 <__NVIC_SetPriorityGrouping>
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a6:	f7ff ff3f 	bl	8002228 <__NVIC_GetPriorityGrouping>
 80023aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	68b9      	ldr	r1, [r7, #8]
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f7ff ffb1 	bl	8002318 <NVIC_EncodePriority>
 80023b6:	4602      	mov	r2, r0
 80023b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff80 	bl	80022c4 <__NVIC_SetPriority>
}
 80023c4:	bf00      	nop
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff32 	bl	8002244 <__NVIC_EnableIRQ>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff42 	bl	8002280 <__NVIC_DisableIRQ>
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00e      	b.n	8002434 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	795b      	ldrb	r3, [r3, #5]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d105      	bne.n	800242c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fe fdfa 	bl	8001020 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e03b      	b.n	80024c6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7fe fdfe 	bl	8001064 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	f023 0107 	bic.w	r1, r3, #7
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d1      	ldr	r1, [r2, #12]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	430b      	orrs	r3, r1
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e05f      	b.n	80025a2 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 80024e2:	4b32      	ldr	r3, [pc, #200]	; (80025ac <HAL_DMA2D_DeInit+0xdc>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02e      	beq.n	800254c <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f8c1 	bl	8002684 <HAL_DMA2D_Abort>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d021      	beq.n	800254c <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04a      	b.n	80025a2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	f003 0320 	and.w	r3, r3, #32
 8002516:	2b20      	cmp	r3, #32
 8002518:	d108      	bne.n	800252c <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800251a:	2100      	movs	r1, #0
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8f7 	bl	8002710 <HAL_DMA2D_CLUTLoading_Abort>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d011      	beq.n	800254c <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e03a      	b.n	80025a2 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d108      	bne.n	800254c <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800253a:	2101      	movs	r1, #1
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f8e7 	bl	8002710 <HAL_DMA2D_CLUTLoading_Abort>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e02a      	b.n	80025a2 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	223f      	movs	r2, #63	; 0x3f
 800255a:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2200      	movs	r2, #0
 8002572:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7fe fd95 	bl	80010b4 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800

080025b0 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_DMA2D_Start_IT+0x1c>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e020      	b.n	800260e <HAL_DMA2D_Start_IT+0x5e>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	68b9      	ldr	r1, [r7, #8]
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 fa84 	bl	8002af4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80025fa:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af02      	add	r7, sp, #8
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_DMA2D_BlendingStart_IT+0x1c>
 800262e:	2302      	movs	r3, #2
 8002630:	e024      	b.n	800267c <HAL_DMA2D_BlendingStart_IT+0x66>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	68b9      	ldr	r1, [r7, #8]
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fa4d 	bl	8002af4 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8002668:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 0201 	orr.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 0205 	bic.w	r2, r3, #5
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0204 	orr.w	r2, r2, #4
 800269e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a0:	f7ff fd70 	bl	8002184 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80026a6:	e017      	b.n	80026d8 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80026a8:	f7ff fd6c 	bl	8002184 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026b6:	d90f      	bls.n	80026d8 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2203      	movs	r2, #3
 80026c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e017      	b.n	8002708 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1e0      	bne.n	80026a8 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 80026f4:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3324      	adds	r3, #36	; 0x24
 8002720:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0204 	orr.w	r2, r2, #4
 8002730:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d103      	bne.n	8002740 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	331c      	adds	r3, #28
 800273e:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8002740:	f7ff fd20 	bl	8002184 <HAL_GetTick>
 8002744:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002746:	e017      	b.n	8002778 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8002748:	f7ff fd1c 	bl	8002184 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002756:	d90f      	bls.n	8002778 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2203      	movs	r2, #3
 8002768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e016      	b.n	80027a6 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e1      	bne.n	8002748 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8002792:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d026      	beq.n	800281e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d021      	beq.n	800281e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027e8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2204      	movs	r2, #4
 8002802:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d026      	beq.n	8002876 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d021      	beq.n	8002876 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	f043 0202 	orr.w	r2, r3, #2
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2204      	movs	r2, #4
 800285a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f003 0308 	and.w	r3, r3, #8
 800287c:	2b00      	cmp	r3, #0
 800287e:	d026      	beq.n	80028ce <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002886:	2b00      	cmp	r3, #0
 8002888:	d021      	beq.n	80028ce <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002898:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2208      	movs	r2, #8
 80028a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	f043 0204 	orr.w	r2, r3, #4
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2204      	movs	r2, #4
 80028b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00e      	beq.n	8002900 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2204      	movs	r2, #4
 80028f8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f853 	bl	80029a6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d024      	beq.n	8002954 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01f      	beq.n	8002954 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2202      	movs	r2, #2
 800292a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01f      	beq.n	800299e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01a      	beq.n	800299e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002976:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2210      	movs	r2, #16
 800297e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f80e 	bl	80029ba <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_DMA2D_ConfigLayer+0x20>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e079      	b.n	8002ae4 <HAL_DMA2D_ConfigLayer+0x114>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	3318      	adds	r3, #24
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	041b      	lsls	r3, r3, #16
 8002a16:	4313      	orrs	r3, r2
 8002a18:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002a1a:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <HAL_DMA2D_ConfigLayer+0x120>)
 8002a1c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b0a      	cmp	r3, #10
 8002a24:	d003      	beq.n	8002a2e <HAL_DMA2D_ConfigLayer+0x5e>
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b09      	cmp	r3, #9
 8002a2c:	d107      	bne.n	8002a3e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	e005      	b.n	8002a4a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	061b      	lsls	r3, r3, #24
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d120      	bne.n	8002a92 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	ea02 0103 	and.w	r1, r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d003      	beq.n	8002a82 <HAL_DMA2D_ConfigLayer+0xb2>
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	d127      	bne.n	8002ad2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	e01f      	b.n	8002ad2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	ea02 0103 	and.w	r1, r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	6812      	ldr	r2, [r2, #0]
 8002ab2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b0a      	cmp	r3, #10
 8002aba:	d003      	beq.n	8002ac4 <HAL_DMA2D_ConfigLayer+0xf4>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d106      	bne.n	8002ad2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ad0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	ff03000f 	.word	0xff03000f

08002af4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b08b      	sub	sp, #44	; 0x2c
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	041a      	lsls	r2, r3, #16
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	431a      	orrs	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b2c:	d174      	bne.n	8002c18 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002b34:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b3c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b44:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e053      	b.n	8002c0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d106      	bne.n	8002b7c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7a:	e048      	b.n	8002c0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d111      	bne.n	8002ba8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	0cdb      	lsrs	r3, r3, #19
 8002b88:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	0a9b      	lsrs	r3, r3, #10
 8002b8e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08db      	lsrs	r3, r3, #3
 8002b94:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	02db      	lsls	r3, r3, #11
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e032      	b.n	8002c0e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d117      	bne.n	8002be0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	0fdb      	lsrs	r3, r3, #31
 8002bb4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	0cdb      	lsrs	r3, r3, #19
 8002bba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	0adb      	lsrs	r3, r3, #11
 8002bc0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	08db      	lsrs	r3, r3, #3
 8002bc6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	6a3b      	ldr	r3, [r7, #32]
 8002bd4:	03db      	lsls	r3, r3, #15
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	e016      	b.n	8002c0e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	0f1b      	lsrs	r3, r3, #28
 8002be4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	0d1b      	lsrs	r3, r3, #20
 8002bea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	0b1b      	lsrs	r3, r3, #12
 8002bf0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	011a      	lsls	r2, r3, #4
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	431a      	orrs	r2, r3
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	031b      	lsls	r3, r3, #12
 8002c06:	4313      	orrs	r3, r2
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002c16:	e003      	b.n	8002c20 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
}
 8002c20:	bf00      	nop
 8002c22:	372c      	adds	r7, #44	; 0x2c
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e177      	b.n	8002f38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	f040 8166 	bne.w	8002f32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d00b      	beq.n	8002c86 <HAL_GPIO_Init+0x5a>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c7a:	2b11      	cmp	r3, #17
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b12      	cmp	r3, #18
 8002c84:	d130      	bne.n	8002ce8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 0201 	and.w	r2, r3, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0xfc>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b12      	cmp	r3, #18
 8002d26:	d123      	bne.n	8002d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	08da      	lsrs	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3208      	adds	r2, #8
 8002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	220f      	movs	r2, #15
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	08da      	lsrs	r2, r3, #3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3208      	adds	r2, #8
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0203 	and.w	r2, r3, #3
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80c0 	beq.w	8002f32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b65      	ldr	r3, [pc, #404]	; (8002f4c <HAL_GPIO_Init+0x320>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a64      	ldr	r2, [pc, #400]	; (8002f4c <HAL_GPIO_Init+0x320>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <HAL_GPIO_Init+0x320>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dce:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_GPIO_Init+0x328>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d037      	beq.n	8002e6a <HAL_GPIO_Init+0x23e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_GPIO_Init+0x32c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_GPIO_Init+0x23a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a55      	ldr	r2, [pc, #340]	; (8002f5c <HAL_GPIO_Init+0x330>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x236>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a54      	ldr	r2, [pc, #336]	; (8002f60 <HAL_GPIO_Init+0x334>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x232>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a53      	ldr	r2, [pc, #332]	; (8002f64 <HAL_GPIO_Init+0x338>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x22e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a52      	ldr	r2, [pc, #328]	; (8002f68 <HAL_GPIO_Init+0x33c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x22a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a51      	ldr	r2, [pc, #324]	; (8002f6c <HAL_GPIO_Init+0x340>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x226>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_GPIO_Init+0x344>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x222>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_GPIO_Init+0x348>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x21e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_GPIO_Init+0x34c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x21a>
 8002e42:	2309      	movs	r3, #9
 8002e44:	e012      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e46:	230a      	movs	r3, #10
 8002e48:	e010      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e00e      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e7c:	4934      	ldr	r1, [pc, #208]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eae:	4a33      	ldr	r2, [pc, #204]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed8:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ae84 	bls.w	8002c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	3724      	adds	r7, #36	; 0x24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40021c00 	.word	0x40021c00
 8002f74:	40022000 	.word	0x40022000
 8002f78:	40022400 	.word	0x40022400
 8002f7c:	40013c00 	.word	0x40013c00

08002f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	460b      	mov	r3, r1
 8002f8a:	807b      	strh	r3, [r7, #2]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f90:	787b      	ldrb	r3, [r7, #1]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f9c:	e003      	b.n	8002fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f9e:	887b      	ldrh	r3, [r7, #2]
 8002fa0:	041a      	lsls	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	619a      	str	r2, [r3, #24]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e11f      	b.n	8003206 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe f884 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003018:	f001 ffc6 	bl	8004fa8 <HAL_RCC_GetPCLK1Freq>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <HAL_I2C_Init+0x25c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d807      	bhi.n	8003038 <HAL_I2C_Init+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <HAL_I2C_Init+0x260>)
 800302c:	4293      	cmp	r3, r2
 800302e:	bf94      	ite	ls
 8003030:	2301      	movls	r3, #1
 8003032:	2300      	movhi	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e006      	b.n	8003046 <HAL_I2C_Init+0x92>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a77      	ldr	r2, [pc, #476]	; (8003218 <HAL_I2C_Init+0x264>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0db      	b.n	8003206 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a72      	ldr	r2, [pc, #456]	; (800321c <HAL_I2C_Init+0x268>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9b      	lsrs	r3, r3, #18
 8003058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a64      	ldr	r2, [pc, #400]	; (8003210 <HAL_I2C_Init+0x25c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d802      	bhi.n	8003088 <HAL_I2C_Init+0xd4>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	e009      	b.n	800309c <HAL_I2C_Init+0xe8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_I2C_Init+0x26c>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	3301      	adds	r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4956      	ldr	r1, [pc, #344]	; (8003210 <HAL_I2C_Init+0x25c>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d80d      	bhi.n	80030d8 <HAL_I2C_Init+0x124>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e59      	subs	r1, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	bf38      	it	cc
 80030d4:	2304      	movcc	r3, #4
 80030d6:	e04f      	b.n	8003178 <HAL_I2C_Init+0x1c4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <HAL_I2C_Init+0x150>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e012      	b.n	800312a <HAL_I2C_Init+0x176>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x17e>
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_I2C_Init+0x1c4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10e      	bne.n	8003158 <HAL_I2C_Init+0x1a4>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e58      	subs	r0, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	440b      	add	r3, r1
 8003148:	fbb0 f3f3 	udiv	r3, r0, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	e00f      	b.n	8003178 <HAL_I2C_Init+0x1c4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6809      	ldr	r1, [r1, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6911      	ldr	r1, [r2, #16]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68d2      	ldr	r2, [r2, #12]
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	000186a0 	.word	0x000186a0
 8003214:	001e847f 	.word	0x001e847f
 8003218:	003d08ff 	.word	0x003d08ff
 800321c:	431bde83 	.word	0x431bde83
 8003220:	10624dd3 	.word	0x10624dd3

08003224 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7fe ffa1 	bl	8002184 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	f040 80d9 	bne.w	8003404 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2319      	movs	r3, #25
 8003258:	2201      	movs	r2, #1
 800325a:	496d      	ldr	r1, [pc, #436]	; (8003410 <HAL_I2C_Mem_Write+0x1ec>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fc7b 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e0cc      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2C_Mem_Write+0x56>
 8003276:	2302      	movs	r3, #2
 8003278:	e0c5      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d007      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2221      	movs	r2, #33	; 0x21
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_I2C_Mem_Write+0x1f0>)
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e2:	88f8      	ldrh	r0, [r7, #6]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fab6 	bl	8003864 <I2C_RequestMemoryWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d052      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e081      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fcfc 	bl	8003d04 <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x180>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1aa      	bne.n	8003302 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fce8 	bl	8003d86 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d107      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e016      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003432:	f7fe fea7 	bl	8002184 <HAL_GetTick>
 8003436:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	f040 8208 	bne.w	8003856 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2319      	movs	r3, #25
 800344c:	2201      	movs	r2, #1
 800344e:	497b      	ldr	r1, [pc, #492]	; (800363c <HAL_I2C_Mem_Read+0x224>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fb81 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	e1fb      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_I2C_Mem_Read+0x56>
 800346a:	2302      	movs	r3, #2
 800346c:	e1f4      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2222      	movs	r2, #34	; 0x22
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a5b      	ldr	r2, [pc, #364]	; (8003640 <HAL_I2C_Mem_Read+0x228>)
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d6:	88f8      	ldrh	r0, [r7, #6]
 80034d8:	893a      	ldrh	r2, [r7, #8]
 80034da:	8979      	ldrh	r1, [r7, #10]
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4603      	mov	r3, r0
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fa50 	bl	800398c <I2C_RequestMemoryRead>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e1b0      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d113      	bne.n	8003526 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e184      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	2b01      	cmp	r3, #1
 800352c:	d11b      	bne.n	8003566 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e164      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b02      	cmp	r3, #2
 800356c:	d11b      	bne.n	80035a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	e144      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035bc:	e138      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	f200 80f1 	bhi.w	80037aa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d123      	bne.n	8003618 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f000 fc17 	bl	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e139      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b01      	subs	r3, #1
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003616:	e10b      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	2b02      	cmp	r3, #2
 800361e:	d14e      	bne.n	80036be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003626:	2200      	movs	r2, #0
 8003628:	4906      	ldr	r1, [pc, #24]	; (8003644 <HAL_I2C_Mem_Read+0x22c>)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fa94 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e10e      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
 800363a:	bf00      	nop
 800363c:	00100002 	.word	0x00100002
 8003640:	ffff0000 	.word	0xffff0000
 8003644:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036bc:	e0b8      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	2200      	movs	r2, #0
 80036c6:	4966      	ldr	r1, [pc, #408]	; (8003860 <HAL_I2C_Mem_Read+0x448>)
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 fa45 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0bf      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691a      	ldr	r2, [r3, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	2200      	movs	r2, #0
 8003722:	494f      	ldr	r1, [pc, #316]	; (8003860 <HAL_I2C_Mem_Read+0x448>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fa17 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e091      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	691a      	ldr	r2, [r3, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037a8:	e042      	b.n	8003830 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb2a 	bl	8003e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e04c      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d118      	bne.n	8003830 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003834:	2b00      	cmp	r3, #0
 8003836:	f47f aec2 	bne.w	80035be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	; 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	00010004 	.word	0x00010004

08003864 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	2200      	movs	r2, #0
 8003896:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f95c 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00c      	beq.n	80038c0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e05f      	b.n	8003980 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	6a3a      	ldr	r2, [r7, #32]
 80038d4:	492c      	ldr	r1, [pc, #176]	; (8003988 <I2C_RequestMemoryWrite+0x124>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f995 	bl	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e04c      	b.n	8003980 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fe:	6a39      	ldr	r1, [r7, #32]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 f9ff 	bl	8003d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00d      	beq.n	8003928 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	2b04      	cmp	r3, #4
 8003912:	d107      	bne.n	8003924 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e02b      	b.n	8003980 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d105      	bne.n	800393a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800392e:	893b      	ldrh	r3, [r7, #8]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	611a      	str	r2, [r3, #16]
 8003938:	e021      	b.n	800397e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800393a:	893b      	ldrh	r3, [r7, #8]
 800393c:	0a1b      	lsrs	r3, r3, #8
 800393e:	b29b      	uxth	r3, r3
 8003940:	b2da      	uxtb	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	6a39      	ldr	r1, [r7, #32]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f9d9 	bl	8003d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00d      	beq.n	8003974 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2b04      	cmp	r3, #4
 800395e:	d107      	bne.n	8003970 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e005      	b.n	8003980 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003974:	893b      	ldrh	r3, [r7, #8]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	00010002 	.word	0x00010002

0800398c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	4608      	mov	r0, r1
 8003996:	4611      	mov	r1, r2
 8003998:	461a      	mov	r2, r3
 800399a:	4603      	mov	r3, r0
 800399c:	817b      	strh	r3, [r7, #10]
 800399e:	460b      	mov	r3, r1
 80039a0:	813b      	strh	r3, [r7, #8]
 80039a2:	4613      	mov	r3, r2
 80039a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f8c0 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00c      	beq.n	80039f8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0a9      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039f8:	897b      	ldrh	r3, [r7, #10]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	6a3a      	ldr	r2, [r7, #32]
 8003a0c:	4951      	ldr	r1, [pc, #324]	; (8003b54 <I2C_RequestMemoryRead+0x1c8>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f8f9 	bl	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e096      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f963 	bl	8003d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d107      	bne.n	8003a5c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e075      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a66:	893b      	ldrh	r3, [r7, #8]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	611a      	str	r2, [r3, #16]
 8003a70:	e021      	b.n	8003ab6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a72:	893b      	ldrh	r3, [r7, #8]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a82:	6a39      	ldr	r1, [r7, #32]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 f93d 	bl	8003d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d107      	bne.n	8003aa8 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e04f      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aac:	893b      	ldrh	r3, [r7, #8]
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6a39      	ldr	r1, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f922 	bl	8003d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d107      	bne.n	8003ade <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e034      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003af0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f82a 	bl	8003b58 <I2C_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e013      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b24:	897b      	ldrh	r3, [r7, #10]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	6a3a      	ldr	r2, [r7, #32]
 8003b38:	4906      	ldr	r1, [pc, #24]	; (8003b54 <I2C_RequestMemoryRead+0x1c8>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f863 	bl	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e000      	b.n	8003b4c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3718      	adds	r7, #24
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00010002 	.word	0x00010002

08003b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b68:	e025      	b.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d021      	beq.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fb07 	bl	8002184 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e023      	b.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d10d      	bne.n	8003bdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	bf0c      	ite	eq
 8003bd2:	2301      	moveq	r3, #1
 8003bd4:	2300      	movne	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	461a      	mov	r2, r3
 8003bda:	e00c      	b.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d0b6      	beq.n	8003b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c14:	e051      	b.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c24:	d123      	bne.n	8003c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0204 	orr.w	r2, r3, #4
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e046      	b.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d021      	beq.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fe fa85 	bl	8002184 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d116      	bne.n	8003cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f043 0220 	orr.w	r2, r3, #32
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e020      	b.n	8003cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	0c1b      	lsrs	r3, r3, #16
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10c      	bne.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	e00b      	b.n	8003cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	43da      	mvns	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d18d      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d10:	e02d      	b.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f8ce 	bl	8003eb4 <I2C_IsAcknowledgeFailed>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e02d      	b.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d28:	d021      	beq.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2a:	f7fe fa2b 	bl	8002184 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d302      	bcc.n	8003d40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d116      	bne.n	8003d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f043 0220 	orr.w	r2, r3, #32
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e007      	b.n	8003d7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	2b80      	cmp	r3, #128	; 0x80
 8003d7a:	d1ca      	bne.n	8003d12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d92:	e02d      	b.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f88d 	bl	8003eb4 <I2C_IsAcknowledgeFailed>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e02d      	b.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003daa:	d021      	beq.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dac:	f7fe f9ea 	bl	8002184 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f043 0220 	orr.w	r2, r3, #32
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e007      	b.n	8003e00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d1ca      	bne.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e14:	e042      	b.n	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d119      	bne.n	8003e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0210 	mvn.w	r2, #16
 8003e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e029      	b.n	8003eac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e58:	f7fe f994 	bl	8002184 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d302      	bcc.n	8003e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d116      	bne.n	8003e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0220 	orr.w	r2, r3, #32
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e007      	b.n	8003eac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea6:	2b40      	cmp	r3, #64	; 0x40
 8003ea8:	d1b5      	bne.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d11b      	bne.n	8003f04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ed4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	f043 0204 	orr.w	r2, r3, #4
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d129      	bne.n	8003f7c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0210 	bic.w	r2, r2, #16
 8003f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d12a      	bne.n	8003ffa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003fc4:	89fb      	ldrh	r3, [r7, #14]
 8003fc6:	f023 030f 	bic.w	r3, r3, #15
 8003fca:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	89fb      	ldrh	r3, [r7, #14]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	89fa      	ldrh	r2, [r7, #14]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e000      	b.n	8003ffc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ffa:	2302      	movs	r3, #2
  }
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0bf      	b.n	800419a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd f8c4 	bl	80011bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800404a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6999      	ldr	r1, [r3, #24]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004060:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6899      	ldr	r1, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_LTDC_Init+0x19c>)
 800407c:	400b      	ands	r3, r1
 800407e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68d9      	ldr	r1, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b3e      	ldr	r3, [pc, #248]	; (80041a4 <HAL_LTDC_Init+0x19c>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68d9      	ldr	r1, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6919      	ldr	r1, [r3, #16]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b33      	ldr	r3, [pc, #204]	; (80041a4 <HAL_LTDC_Init+0x19c>)
 80040d8:	400b      	ands	r3, r1
 80040da:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	041b      	lsls	r3, r3, #16
 80040e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6919      	ldr	r1, [r3, #16]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6959      	ldr	r1, [r3, #20]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_LTDC_Init+0x19c>)
 8004106:	400b      	ands	r3, r1
 8004108:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6959      	ldr	r1, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800414a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0206 	orr.w	r2, r2, #6
 8004176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f042 0201 	orr.w	r2, r2, #1
 8004186:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	f000f800 	.word	0xf000f800

080041a8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0304 	and.w	r3, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d023      	beq.n	8004212 <HAL_LTDC_IRQHandler+0x6a>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01e      	beq.n	8004212 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2204      	movs	r2, #4
 80041ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2204      	movs	r2, #4
 8004200:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f86f 	bl	80042f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d023      	beq.n	8004264 <HAL_LTDC_IRQHandler+0xbc>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f003 0302 	and.w	r3, r3, #2
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01e      	beq.n	8004264 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0202 	bic.w	r2, r2, #2
 8004234:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2202      	movs	r2, #2
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004244:	f043 0202 	orr.w	r2, r3, #2
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2204      	movs	r2, #4
 8004252:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f846 	bl	80042f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01b      	beq.n	80042a6 <HAL_LTDC_IRQHandler+0xfe>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0201 	bic.w	r2, r2, #1
 8004286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2201      	movs	r2, #1
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f009 fc73 	bl	800db8c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01b      	beq.n	80042e8 <HAL_LTDC_IRQHandler+0x140>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0208 	bic.w	r2, r2, #8
 80042c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2208      	movs	r2, #8
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f80e 	bl	8004304 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004318:	b5b0      	push	{r4, r5, r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_LTDC_ConfigLayer+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e02c      	b.n	800438c <HAL_LTDC_ConfigLayer+0x74>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2134      	movs	r1, #52	; 0x34
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4614      	mov	r4, r2
 8004356:	461d      	mov	r5, r3
 8004358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800435c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f849 	bl	8004404 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2201      	movs	r2, #1
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bdb0      	pop	{r4, r5, r7, pc}

08004394 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_LTDC_ProgramLineEvent+0x18>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e023      	b.n	80043f4 <HAL_LTDC_ProgramLineEvent+0x60>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80043cc:	4a0c      	ldr	r2, [pc, #48]	; (8004400 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40016800 	.word	0x40016800

08004404 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	4413      	add	r3, r2
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	01db      	lsls	r3, r3, #7
 8004430:	4413      	add	r3, r2
 8004432:	3384      	adds	r3, #132	; 0x84
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	4611      	mov	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	01d2      	lsls	r2, r2, #7
 8004440:	440a      	add	r2, r1
 8004442:	3284      	adds	r2, #132	; 0x84
 8004444:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004448:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	4413      	add	r3, r2
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4619      	mov	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	01db      	lsls	r3, r3, #7
 8004468:	440b      	add	r3, r1
 800446a:	3384      	adds	r3, #132	; 0x84
 800446c:	4619      	mov	r1, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4313      	orrs	r3, r2
 8004472:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004482:	4413      	add	r3, r2
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461a      	mov	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	01db      	lsls	r3, r3, #7
 8004492:	4413      	add	r3, r2
 8004494:	3384      	adds	r3, #132	; 0x84
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	4611      	mov	r1, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	01d2      	lsls	r2, r2, #7
 80044a2:	440a      	add	r2, r1
 80044a4:	3284      	adds	r2, #132	; 0x84
 80044a6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ba:	4413      	add	r3, r2
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4619      	mov	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	01db      	lsls	r3, r3, #7
 80044c8:	440b      	add	r3, r1
 80044ca:	3384      	adds	r3, #132	; 0x84
 80044cc:	4619      	mov	r1, r3
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	01db      	lsls	r3, r3, #7
 80044de:	4413      	add	r3, r2
 80044e0:	3384      	adds	r3, #132	; 0x84
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	4611      	mov	r1, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	01d2      	lsls	r2, r2, #7
 80044ee:	440a      	add	r2, r1
 80044f0:	3284      	adds	r2, #132	; 0x84
 80044f2:	f023 0307 	bic.w	r3, r3, #7
 80044f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	461a      	mov	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	01db      	lsls	r3, r3, #7
 8004502:	4413      	add	r3, r2
 8004504:	3384      	adds	r3, #132	; 0x84
 8004506:	461a      	mov	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800451e:	041b      	lsls	r3, r3, #16
 8004520:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	01db      	lsls	r3, r3, #7
 8004534:	4413      	add	r3, r2
 8004536:	3384      	adds	r3, #132	; 0x84
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	01db      	lsls	r3, r3, #7
 8004544:	4413      	add	r3, r2
 8004546:	3384      	adds	r3, #132	; 0x84
 8004548:	461a      	mov	r2, r3
 800454a:	2300      	movs	r3, #0
 800454c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004554:	461a      	mov	r2, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	431a      	orrs	r2, r3
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	01db      	lsls	r3, r3, #7
 8004568:	440b      	add	r3, r1
 800456a:	3384      	adds	r3, #132	; 0x84
 800456c:	4619      	mov	r1, r3
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	461a      	mov	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	01db      	lsls	r3, r3, #7
 800457e:	4413      	add	r3, r2
 8004580:	3384      	adds	r3, #132	; 0x84
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	4611      	mov	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	01d2      	lsls	r2, r2, #7
 800458e:	440a      	add	r2, r1
 8004590:	3284      	adds	r2, #132	; 0x84
 8004592:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004596:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	01db      	lsls	r3, r3, #7
 80045a2:	4413      	add	r3, r2
 80045a4:	3384      	adds	r3, #132	; 0x84
 80045a6:	461a      	mov	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	01db      	lsls	r3, r3, #7
 80045b8:	4413      	add	r3, r2
 80045ba:	3384      	adds	r3, #132	; 0x84
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	6812      	ldr	r2, [r2, #0]
 80045c2:	4611      	mov	r1, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	01d2      	lsls	r2, r2, #7
 80045c8:	440a      	add	r2, r1
 80045ca:	3284      	adds	r2, #132	; 0x84
 80045cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	69da      	ldr	r2, [r3, #28]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	6809      	ldr	r1, [r1, #0]
 80045e2:	4608      	mov	r0, r1
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	01c9      	lsls	r1, r1, #7
 80045e8:	4401      	add	r1, r0
 80045ea:	3184      	adds	r1, #132	; 0x84
 80045ec:	4313      	orrs	r3, r2
 80045ee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	01db      	lsls	r3, r3, #7
 80045fa:	4413      	add	r3, r2
 80045fc:	3384      	adds	r3, #132	; 0x84
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	01db      	lsls	r3, r3, #7
 800460a:	4413      	add	r3, r2
 800460c:	3384      	adds	r3, #132	; 0x84
 800460e:	461a      	mov	r2, r3
 8004610:	2300      	movs	r3, #0
 8004612:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	01db      	lsls	r3, r3, #7
 800461e:	4413      	add	r3, r2
 8004620:	3384      	adds	r3, #132	; 0x84
 8004622:	461a      	mov	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004632:	2304      	movs	r3, #4
 8004634:	61fb      	str	r3, [r7, #28]
 8004636:	e01b      	b.n	8004670 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d102      	bne.n	8004646 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004640:	2303      	movs	r3, #3
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	e014      	b.n	8004670 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b04      	cmp	r3, #4
 800464c:	d00b      	beq.n	8004666 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004652:	2b02      	cmp	r3, #2
 8004654:	d007      	beq.n	8004666 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800465a:	2b03      	cmp	r3, #3
 800465c:	d003      	beq.n	8004666 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004662:	2b07      	cmp	r3, #7
 8004664:	d102      	bne.n	800466c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004666:	2302      	movs	r3, #2
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e001      	b.n	8004670 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800466c:	2301      	movs	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	01db      	lsls	r3, r3, #7
 800467a:	4413      	add	r3, r2
 800467c:	3384      	adds	r3, #132	; 0x84
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	6812      	ldr	r2, [r2, #0]
 8004684:	4611      	mov	r1, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	01d2      	lsls	r2, r2, #7
 800468a:	440a      	add	r2, r1
 800468c:	3284      	adds	r2, #132	; 0x84
 800468e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004692:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	69fa      	ldr	r2, [r7, #28]
 800469a:	fb02 f303 	mul.w	r3, r2, r3
 800469e:	041a      	lsls	r2, r3, #16
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	1acb      	subs	r3, r1, r3
 80046aa:	69f9      	ldr	r1, [r7, #28]
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	3303      	adds	r3, #3
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	6809      	ldr	r1, [r1, #0]
 80046b6:	4608      	mov	r0, r1
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	01c9      	lsls	r1, r1, #7
 80046bc:	4401      	add	r1, r0
 80046be:	3184      	adds	r1, #132	; 0x84
 80046c0:	4313      	orrs	r3, r2
 80046c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	01db      	lsls	r3, r3, #7
 80046ce:	4413      	add	r3, r2
 80046d0:	3384      	adds	r3, #132	; 0x84
 80046d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	4611      	mov	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	01d2      	lsls	r2, r2, #7
 80046de:	440a      	add	r2, r1
 80046e0:	3284      	adds	r2, #132	; 0x84
 80046e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	01db      	lsls	r3, r3, #7
 80046f6:	4413      	add	r3, r2
 80046f8:	3384      	adds	r3, #132	; 0x84
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	01db      	lsls	r3, r3, #7
 800470c:	4413      	add	r3, r2
 800470e:	3384      	adds	r3, #132	; 0x84
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	4611      	mov	r1, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	01d2      	lsls	r2, r2, #7
 800471c:	440a      	add	r2, r1
 800471e:	3284      	adds	r2, #132	; 0x84
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6013      	str	r3, [r2, #0]
}
 8004726:	bf00      	nop
 8004728:	3724      	adds	r7, #36	; 0x24
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e25b      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d075      	beq.n	800483e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004752:	4ba3      	ldr	r3, [pc, #652]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b04      	cmp	r3, #4
 800475c:	d00c      	beq.n	8004778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800475e:	4ba0      	ldr	r3, [pc, #640]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004766:	2b08      	cmp	r3, #8
 8004768:	d112      	bne.n	8004790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476a:	4b9d      	ldr	r3, [pc, #628]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004776:	d10b      	bne.n	8004790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	4b99      	ldr	r3, [pc, #612]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d05b      	beq.n	800483c <HAL_RCC_OscConfig+0x108>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d157      	bne.n	800483c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e236      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004798:	d106      	bne.n	80047a8 <HAL_RCC_OscConfig+0x74>
 800479a:	4b91      	ldr	r3, [pc, #580]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a90      	ldr	r2, [pc, #576]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e01d      	b.n	80047e4 <HAL_RCC_OscConfig+0xb0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x98>
 80047b2:	4b8b      	ldr	r3, [pc, #556]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a8a      	ldr	r2, [pc, #552]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b88      	ldr	r3, [pc, #544]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a87      	ldr	r2, [pc, #540]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0xb0>
 80047cc:	4b84      	ldr	r3, [pc, #528]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a83      	ldr	r2, [pc, #524]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b81      	ldr	r3, [pc, #516]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a80      	ldr	r2, [pc, #512]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80047de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ec:	f7fd fcca 	bl	8002184 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fd fcc6 	bl	8002184 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	; 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e1fb      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	4b76      	ldr	r3, [pc, #472]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0xc0>
 8004812:	e014      	b.n	800483e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fd fcb6 	bl	8002184 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481c:	f7fd fcb2 	bl	8002184 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	; 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e1e7      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800482e:	4b6c      	ldr	r3, [pc, #432]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0xe8>
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d063      	beq.n	8004912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004856:	4b62      	ldr	r3, [pc, #392]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800485e:	2b08      	cmp	r3, #8
 8004860:	d11c      	bne.n	800489c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004862:	4b5f      	ldr	r3, [pc, #380]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d116      	bne.n	800489c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	4b5c      	ldr	r3, [pc, #368]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x152>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d001      	beq.n	8004886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e1bb      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004886:	4b56      	ldr	r3, [pc, #344]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	4952      	ldr	r1, [pc, #328]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489a:	e03a      	b.n	8004912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d020      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048a4:	4b4f      	ldr	r3, [pc, #316]	; (80049e4 <HAL_RCC_OscConfig+0x2b0>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fd fc6b 	bl	8002184 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b2:	f7fd fc67 	bl	8002184 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e19c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c4:	4b46      	ldr	r3, [pc, #280]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0f0      	beq.n	80048b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048d0:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4940      	ldr	r1, [pc, #256]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
 80048e4:	e015      	b.n	8004912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048e6:	4b3f      	ldr	r3, [pc, #252]	; (80049e4 <HAL_RCC_OscConfig+0x2b0>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ec:	f7fd fc4a 	bl	8002184 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048f4:	f7fd fc46 	bl	8002184 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e17b      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004906:	4b36      	ldr	r3, [pc, #216]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d030      	beq.n	8004980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <HAL_RCC_OscConfig+0x2b4>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492c:	f7fd fc2a 	bl	8002184 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004934:	f7fd fc26 	bl	8002184 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e15b      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x200>
 8004952:	e015      	b.n	8004980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004954:	4b24      	ldr	r3, [pc, #144]	; (80049e8 <HAL_RCC_OscConfig+0x2b4>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800495a:	f7fd fc13 	bl	8002184 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004962:	f7fd fc0f 	bl	8002184 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e144      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f0      	bne.n	8004962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0304 	and.w	r3, r3, #4
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a0 	beq.w	8004ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10f      	bne.n	80049be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	4a0e      	ldr	r2, [pc, #56]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6413      	str	r3, [r2, #64]	; 0x40
 80049ae:	4b0c      	ldr	r3, [pc, #48]	; (80049e0 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ba:	2301      	movs	r3, #1
 80049bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b0b      	ldr	r3, [pc, #44]	; (80049ec <HAL_RCC_OscConfig+0x2b8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d121      	bne.n	8004a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <HAL_RCC_OscConfig+0x2b8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a07      	ldr	r2, [pc, #28]	; (80049ec <HAL_RCC_OscConfig+0x2b8>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049d6:	f7fd fbd5 	bl	8002184 <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	e011      	b.n	8004a02 <HAL_RCC_OscConfig+0x2ce>
 80049de:	bf00      	nop
 80049e0:	40023800 	.word	0x40023800
 80049e4:	42470000 	.word	0x42470000
 80049e8:	42470e80 	.word	0x42470e80
 80049ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fd fbc8 	bl	8002184 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0fd      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a02:	4b81      	ldr	r3, [pc, #516]	; (8004c08 <HAL_RCC_OscConfig+0x4d4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x2f0>
 8004a16:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	; 0x70
 8004a22:	e01c      	b.n	8004a5e <HAL_RCC_OscConfig+0x32a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d10c      	bne.n	8004a46 <HAL_RCC_OscConfig+0x312>
 8004a2c:	4b77      	ldr	r3, [pc, #476]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a76      	ldr	r2, [pc, #472]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
 8004a38:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	4a73      	ldr	r2, [pc, #460]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	6713      	str	r3, [r2, #112]	; 0x70
 8004a44:	e00b      	b.n	8004a5e <HAL_RCC_OscConfig+0x32a>
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a70      	ldr	r2, [pc, #448]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	4b6e      	ldr	r3, [pc, #440]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a6d      	ldr	r2, [pc, #436]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7fd fb8d 	bl	8002184 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fd fb89 	bl	8002184 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e0bc      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ee      	beq.n	8004a6e <HAL_RCC_OscConfig+0x33a>
 8004a90:	e014      	b.n	8004abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fd fb77 	bl	8002184 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7fd fb73 	bl	8002184 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e0a6      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab0:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d105      	bne.n	8004ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac2:	4b52      	ldr	r3, [pc, #328]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	4a51      	ldr	r2, [pc, #324]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8092 	beq.w	8004bfc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ad8:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d05c      	beq.n	8004b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d141      	bne.n	8004b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aec:	4b48      	ldr	r3, [pc, #288]	; (8004c10 <HAL_RCC_OscConfig+0x4dc>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af2:	f7fd fb47 	bl	8002184 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004afa:	f7fd fb43 	bl	8002184 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e078      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0c:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f0      	bne.n	8004afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69da      	ldr	r2, [r3, #28]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	019b      	lsls	r3, r3, #6
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	3b01      	subs	r3, #1
 8004b32:	041b      	lsls	r3, r3, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	061b      	lsls	r3, r3, #24
 8004b3c:	4933      	ldr	r1, [pc, #204]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b42:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <HAL_RCC_OscConfig+0x4dc>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd fb1c 	bl	8002184 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fd fb18 	bl	8002184 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04d      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x41c>
 8004b6e:	e045      	b.n	8004bfc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <HAL_RCC_OscConfig+0x4dc>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b76:	f7fd fb05 	bl	8002184 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7e:	f7fd fb01 	bl	8002184 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e036      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <HAL_RCC_OscConfig+0x44a>
 8004b9c:	e02e      	b.n	8004bfc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e029      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_RCC_OscConfig+0x4d8>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d11c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d115      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40007000 	.word	0x40007000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	42470060 	.word	0x42470060

08004c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0cc      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c28:	4b68      	ldr	r3, [pc, #416]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d90c      	bls.n	8004c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b63      	ldr	r3, [pc, #396]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0b8      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d020      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0304 	and.w	r3, r3, #4
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c68:	4b59      	ldr	r3, [pc, #356]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	4a58      	ldr	r2, [pc, #352]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c80:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	4a52      	ldr	r2, [pc, #328]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c8c:	4b50      	ldr	r3, [pc, #320]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	494d      	ldr	r1, [pc, #308]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d044      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb2:	4b47      	ldr	r3, [pc, #284]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d119      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e07f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d003      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d107      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b3f      	ldr	r3, [pc, #252]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e067      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cf2:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f023 0203 	bic.w	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	4934      	ldr	r1, [pc, #208]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d04:	f7fd fa3e 	bl	8002184 <HAL_GetTick>
 8004d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d0c:	f7fd fa3a 	bl	8002184 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e04f      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d22:	4b2b      	ldr	r3, [pc, #172]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 020c 	and.w	r2, r3, #12
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d1eb      	bne.n	8004d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d34:	4b25      	ldr	r3, [pc, #148]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 030f 	and.w	r3, r3, #15
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d20c      	bcs.n	8004d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d42:	4b22      	ldr	r3, [pc, #136]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d4a:	4b20      	ldr	r3, [pc, #128]	; (8004dcc <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 030f 	and.w	r3, r3, #15
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e032      	b.n	8004dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4916      	ldr	r1, [pc, #88]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d86:	4b12      	ldr	r3, [pc, #72]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	490e      	ldr	r1, [pc, #56]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d9a:	f000 f821 	bl	8004de0 <HAL_RCC_GetSysClockFreq>
 8004d9e:	4601      	mov	r1, r0
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4a0a      	ldr	r2, [pc, #40]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8004dac:	5cd3      	ldrb	r3, [r2, r3]
 8004dae:	fa21 f303 	lsr.w	r3, r1, r3
 8004db2:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <HAL_RCC_ClockConfig+0x1c8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fc fbf8 	bl	80015b0 <HAL_InitTick>

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023c00 	.word	0x40023c00
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	0801edb0 	.word	0x0801edb0
 8004dd8:	2000000c 	.word	0x2000000c
 8004ddc:	20000070 	.word	0x20000070

08004de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	2300      	movs	r3, #0
 8004df0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df6:	4b63      	ldr	r3, [pc, #396]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 030c 	and.w	r3, r3, #12
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d007      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x32>
 8004e02:	2b08      	cmp	r3, #8
 8004e04:	d008      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x38>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 80b4 	bne.w	8004f74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b5e      	ldr	r3, [pc, #376]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e0e:	60bb      	str	r3, [r7, #8]
       break;
 8004e10:	e0b3      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b5e      	ldr	r3, [pc, #376]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004e14:	60bb      	str	r3, [r7, #8]
      break;
 8004e16:	e0b0      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b5a      	ldr	r3, [pc, #360]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04a      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b55      	ldr	r3, [pc, #340]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	f04f 0400 	mov.w	r4, #0
 8004e38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	ea03 0501 	and.w	r5, r3, r1
 8004e44:	ea04 0602 	and.w	r6, r4, r2
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	f04f 0400 	mov.w	r4, #0
 8004e54:	0154      	lsls	r4, r2, #5
 8004e56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e5a:	014b      	lsls	r3, r1, #5
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4622      	mov	r2, r4
 8004e60:	1b49      	subs	r1, r1, r5
 8004e62:	eb62 0206 	sbc.w	r2, r2, r6
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	f04f 0400 	mov.w	r4, #0
 8004e6e:	0194      	lsls	r4, r2, #6
 8004e70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e74:	018b      	lsls	r3, r1, #6
 8004e76:	1a5b      	subs	r3, r3, r1
 8004e78:	eb64 0402 	sbc.w	r4, r4, r2
 8004e7c:	f04f 0100 	mov.w	r1, #0
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	00e2      	lsls	r2, r4, #3
 8004e86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e8a:	00d9      	lsls	r1, r3, #3
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4614      	mov	r4, r2
 8004e90:	195b      	adds	r3, r3, r5
 8004e92:	eb44 0406 	adc.w	r4, r4, r6
 8004e96:	f04f 0100 	mov.w	r1, #0
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	0262      	lsls	r2, r4, #9
 8004ea0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004ea4:	0259      	lsls	r1, r3, #9
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4614      	mov	r4, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	4621      	mov	r1, r4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	f7fb f9ea 	bl	8000290 <__aeabi_uldivmod>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e049      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec4:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	099b      	lsrs	r3, r3, #6
 8004eca:	f04f 0400 	mov.w	r4, #0
 8004ece:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	ea03 0501 	and.w	r5, r3, r1
 8004eda:	ea04 0602 	and.w	r6, r4, r2
 8004ede:	4629      	mov	r1, r5
 8004ee0:	4632      	mov	r2, r6
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	f04f 0400 	mov.w	r4, #0
 8004eea:	0154      	lsls	r4, r2, #5
 8004eec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ef0:	014b      	lsls	r3, r1, #5
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	1b49      	subs	r1, r1, r5
 8004ef8:	eb62 0206 	sbc.w	r2, r2, r6
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	f04f 0400 	mov.w	r4, #0
 8004f04:	0194      	lsls	r4, r2, #6
 8004f06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f0a:	018b      	lsls	r3, r1, #6
 8004f0c:	1a5b      	subs	r3, r3, r1
 8004f0e:	eb64 0402 	sbc.w	r4, r4, r2
 8004f12:	f04f 0100 	mov.w	r1, #0
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	00e2      	lsls	r2, r4, #3
 8004f1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f20:	00d9      	lsls	r1, r3, #3
 8004f22:	460b      	mov	r3, r1
 8004f24:	4614      	mov	r4, r2
 8004f26:	195b      	adds	r3, r3, r5
 8004f28:	eb44 0406 	adc.w	r4, r4, r6
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	02a2      	lsls	r2, r4, #10
 8004f36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f3a:	0299      	lsls	r1, r3, #10
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4614      	mov	r4, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	4621      	mov	r1, r4
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f04f 0400 	mov.w	r4, #0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4623      	mov	r3, r4
 8004f4e:	f7fb f99f 	bl	8000290 <__aeabi_uldivmod>
 8004f52:	4603      	mov	r3, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	3301      	adds	r3, #1
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	60bb      	str	r3, [r7, #8]
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f76:	60bb      	str	r3, [r7, #8]
      break;
 8004f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f84:	40023800 	.word	0x40023800
 8004f88:	00f42400 	.word	0x00f42400
 8004f8c:	007a1200 	.word	0x007a1200

08004f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f96:	681b      	ldr	r3, [r3, #0]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	2000000c 	.word	0x2000000c

08004fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fac:	f7ff fff0 	bl	8004f90 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4601      	mov	r1, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0a9b      	lsrs	r3, r3, #10
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0801edc0 	.word	0x0801edc0

08004fd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	220f      	movs	r2, #15
 8004fde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fe0:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <HAL_RCC_GetClockConfig+0x60>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 020f 	and.w	r2, r3, #15
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40023c00 	.word	0x40023c00

08005034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005064:	2b00      	cmp	r3, #0
 8005066:	d075      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005068:	4bad      	ldr	r3, [pc, #692]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800506e:	f7fd f889 	bl	8002184 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005076:	f7fd f885 	bl	8002184 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e18b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005088:	4ba6      	ldr	r3, [pc, #664]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d009      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	019a      	lsls	r2, r3, #6
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	071b      	lsls	r3, r3, #28
 80050ac:	499d      	ldr	r1, [pc, #628]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01f      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050c0:	4b98      	ldr	r3, [pc, #608]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c6:	0f1b      	lsrs	r3, r3, #28
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	019a      	lsls	r2, r3, #6
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	431a      	orrs	r2, r3
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	071b      	lsls	r3, r3, #28
 80050e0:	4990      	ldr	r1, [pc, #576]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050e8:	4b8e      	ldr	r3, [pc, #568]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ee:	f023 021f 	bic.w	r2, r3, #31
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	498a      	ldr	r1, [pc, #552]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	019a      	lsls	r2, r3, #6
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	061b      	lsls	r3, r3, #24
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	071b      	lsls	r3, r3, #28
 8005120:	4980      	ldr	r1, [pc, #512]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005128:	4b7d      	ldr	r3, [pc, #500]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800512a:	2201      	movs	r2, #1
 800512c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800512e:	f7fd f829 	bl	8002184 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005134:	e008      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005136:	f7fd f825 	bl	8002184 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e12b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005148:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d105      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005168:	2b00      	cmp	r3, #0
 800516a:	d079      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800516c:	4b6e      	ldr	r3, [pc, #440]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005172:	f7fd f807 	bl	8002184 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005178:	e008      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800517a:	f7fd f803 	bl	8002184 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e109      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800518c:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005198:	d0ef      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d020      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051a6:	4b5f      	ldr	r3, [pc, #380]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ac:	0f1b      	lsrs	r3, r3, #28
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	019a      	lsls	r2, r3, #6
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	4957      	ldr	r1, [pc, #348]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051ce:	4b55      	ldr	r3, [pc, #340]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	3b01      	subs	r3, #1
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	4950      	ldr	r1, [pc, #320]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01e      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051f4:	4b4b      	ldr	r3, [pc, #300]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80051f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fa:	0e1b      	lsrs	r3, r3, #24
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	019a      	lsls	r2, r3, #6
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	061b      	lsls	r3, r3, #24
 800520c:	431a      	orrs	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	071b      	lsls	r3, r3, #28
 8005214:	4943      	ldr	r1, [pc, #268]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800521c:	4b41      	ldr	r3, [pc, #260]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800521e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005222:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	493e      	ldr	r1, [pc, #248]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005232:	4b3d      	ldr	r3, [pc, #244]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005234:	2201      	movs	r2, #1
 8005236:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005238:	f7fc ffa4 	bl	8002184 <HAL_GetTick>
 800523c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005240:	f7fc ffa0 	bl	8002184 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0a6      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005252:	4b34      	ldr	r3, [pc, #208]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800525a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800525e:	d1ef      	bne.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 808d 	beq.w	8005388 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6413      	str	r3, [r2, #64]	; 0x40
 800527e:	4b29      	ldr	r3, [pc, #164]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800528a:	4b28      	ldr	r3, [pc, #160]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a27      	ldr	r2, [pc, #156]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005294:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005296:	f7fc ff75 	bl	8002184 <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800529e:	f7fc ff71 	bl	8002184 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e077      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b0:	4b1e      	ldr	r3, [pc, #120]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052bc:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d039      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d032      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052da:	4b12      	ldr	r3, [pc, #72]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052e4:	4b12      	ldr	r3, [pc, #72]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ea:	4b11      	ldr	r3, [pc, #68]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052f0:	4a0c      	ldr	r2, [pc, #48]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d11e      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005302:	f7fc ff3f 	bl	8002184 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005308:	e014      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530a:	f7fc ff3b 	bl	8002184 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	f241 3288 	movw	r2, #5000	; 0x1388
 8005318:	4293      	cmp	r3, r2
 800531a:	d90b      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e03f      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005320:	42470068 	.word	0x42470068
 8005324:	40023800 	.word	0x40023800
 8005328:	42470070 	.word	0x42470070
 800532c:	40007000 	.word	0x40007000
 8005330:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005334:	4b1c      	ldr	r3, [pc, #112]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0e4      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005348:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800534c:	d10d      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800534e:	4b16      	ldr	r3, [pc, #88]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800535e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005362:	4911      	ldr	r1, [pc, #68]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005364:	4313      	orrs	r3, r2
 8005366:	608b      	str	r3, [r1, #8]
 8005368:	e005      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	4a0e      	ldr	r2, [pc, #56]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005370:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005374:	6093      	str	r3, [r2, #8]
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005378:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005382:	4909      	ldr	r1, [pc, #36]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005384:	4313      	orrs	r3, r2
 8005386:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0310 	and.w	r3, r3, #16
 8005390:	2b00      	cmp	r3, #0
 8005392:	d004      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800539c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40023800 	.word	0x40023800
 80053ac:	424711e0 	.word	0x424711e0

080053b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e025      	b.n	8005410 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d106      	bne.n	80053de <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc f8df 	bl	800159c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f000 ffef 	bl	80063d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	461a      	mov	r2, r3
 8005400:	6839      	ldr	r1, [r7, #0]
 8005402:	f001 f85a 	bl	80064ba <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d101      	bne.n	8005434 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
 8005432:	e018      	b.n	8005466 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	4618      	mov	r0, r3
 8005446:	f001 f8b7 	bl	80065b8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d104      	bne.n	800545c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2205      	movs	r2, #5
 8005456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800545a:	e003      	b.n	8005464 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b082      	sub	sp, #8
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d101      	bne.n	8005488 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	e00e      	b.n	80054a6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6839      	ldr	r1, [r7, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f001 f8ca 	bl	8006630 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e056      	b.n	800556e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb ff84 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	431a      	orrs	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	ea42 0103 	orr.w	r1, r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	f003 0104 	and.w	r1, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800555c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b088      	sub	sp, #32
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	4613      	mov	r3, r2
 8005584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_SPI_Transmit+0x22>
 8005594:	2302      	movs	r3, #2
 8005596:	e11e      	b.n	80057d6 <HAL_SPI_Transmit+0x260>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a0:	f7fc fdf0 	bl	8002184 <HAL_GetTick>
 80055a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d002      	beq.n	80055bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
 80055b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055ba:	e103      	b.n	80057c4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Transmit+0x52>
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055cc:	e0fa      	b.n	80057c4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2203      	movs	r2, #3
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	88fa      	ldrh	r2, [r7, #6]
 80055e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	88fa      	ldrh	r2, [r7, #6]
 80055ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005614:	d107      	bne.n	8005626 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005624:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d007      	beq.n	8005644 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d14b      	bne.n	80056e6 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <HAL_SPI_Transmit+0xe6>
 8005656:	8afb      	ldrh	r3, [r7, #22]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d13e      	bne.n	80056da <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566c:	1c9a      	adds	r2, r3, #2
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005680:	e02b      	b.n	80056da <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d112      	bne.n	80056b6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	881a      	ldrh	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	1c9a      	adds	r2, r3, #2
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	3b01      	subs	r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80056b4:	e011      	b.n	80056da <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056b6:	f7fc fd65 	bl	8002184 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d803      	bhi.n	80056ce <HAL_SPI_Transmit+0x158>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056cc:	d102      	bne.n	80056d4 <HAL_SPI_Transmit+0x15e>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056d8:	e074      	b.n	80057c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ce      	bne.n	8005682 <HAL_SPI_Transmit+0x10c>
 80056e4:	e04c      	b.n	8005780 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_Transmit+0x17e>
 80056ee:	8afb      	ldrh	r3, [r7, #22]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d140      	bne.n	8005776 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	7812      	ldrb	r2, [r2, #0]
 8005700:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	1c5a      	adds	r2, r3, #1
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005710:	b29b      	uxth	r3, r3
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800571a:	e02c      	b.n	8005776 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d113      	bne.n	8005752 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	7812      	ldrb	r2, [r2, #0]
 8005736:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	1c5a      	adds	r2, r3, #1
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005750:	e011      	b.n	8005776 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005752:	f7fc fd17 	bl	8002184 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d803      	bhi.n	800576a <HAL_SPI_Transmit+0x1f4>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d102      	bne.n	8005770 <HAL_SPI_Transmit+0x1fa>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005774:	e026      	b.n	80057c4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1cd      	bne.n	800571c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 fba5 	bl	8005ed4 <SPI_EndRxTxTransaction>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e000      	b.n	80057c4 <HAL_SPI_Transmit+0x24e>
  }

error:
 80057c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3720      	adds	r7, #32
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b088      	sub	sp, #32
 80057e2:	af02      	add	r7, sp, #8
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	603b      	str	r3, [r7, #0]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057fa:	d112      	bne.n	8005822 <HAL_SPI_Receive+0x44>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10e      	bne.n	8005822 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2204      	movs	r2, #4
 8005808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f8e9 	bl	80059f0 <HAL_SPI_TransmitReceive>
 800581e:	4603      	mov	r3, r0
 8005820:	e0e2      	b.n	80059e8 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_SPI_Receive+0x52>
 800582c:	2302      	movs	r3, #2
 800582e:	e0db      	b.n	80059e8 <HAL_SPI_Receive+0x20a>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005838:	f7fc fca4 	bl	8002184 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800584e:	e0c2      	b.n	80059d6 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_SPI_Receive+0x7e>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005860:	e0b9      	b.n	80059d6 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2204      	movs	r2, #4
 8005866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a8:	d107      	bne.n	80058ba <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d007      	beq.n	80058d8 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d162      	bne.n	80059a6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80058e0:	e02e      	b.n	8005940 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d115      	bne.n	800591c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f103 020c 	add.w	r2, r3, #12
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	87da      	strh	r2, [r3, #62]	; 0x3e
 800591a:	e011      	b.n	8005940 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591c:	f7fc fc32 	bl	8002184 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d803      	bhi.n	8005934 <HAL_SPI_Receive+0x156>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d102      	bne.n	800593a <HAL_SPI_Receive+0x15c>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800593e:	e04a      	b.n	80059d6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1cb      	bne.n	80058e2 <HAL_SPI_Receive+0x104>
 800594a:	e031      	b.n	80059b0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b01      	cmp	r3, #1
 8005958:	d113      	bne.n	8005982 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	b292      	uxth	r2, r2
 8005966:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596c:	1c9a      	adds	r2, r3, #2
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005980:	e011      	b.n	80059a6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005982:	f7fc fbff 	bl	8002184 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d803      	bhi.n	800599a <HAL_SPI_Receive+0x1bc>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d102      	bne.n	80059a0 <HAL_SPI_Receive+0x1c2>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d102      	bne.n	80059a6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059a4:	e017      	b.n	80059d6 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1cd      	bne.n	800594c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fa27 	bl	8005e08 <SPI_EndRxTransaction>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	75fb      	strb	r3, [r7, #23]
 80059d2:	e000      	b.n	80059d6 <HAL_SPI_Receive+0x1f8>
  }

error :
 80059d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	; 0x30
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059fe:	2301      	movs	r3, #1
 8005a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x26>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e18a      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x33c>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1e:	f7fc fbb1 	bl	8002184 <HAL_GetTick>
 8005a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a34:	887b      	ldrh	r3, [r7, #2]
 8005a36:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d00f      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x70>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a46:	d107      	bne.n	8005a58 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d103      	bne.n	8005a58 <HAL_SPI_TransmitReceive+0x68>
 8005a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d003      	beq.n	8005a60 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a5e:	e15b      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x82>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_TransmitReceive+0x82>
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a78:	e14e      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d003      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2205      	movs	r2, #5
 8005a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	887a      	ldrh	r2, [r7, #2]
 8005a9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	887a      	ldrh	r2, [r7, #2]
 8005ab0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	887a      	ldrh	r2, [r7, #2]
 8005ab6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d007      	beq.n	8005ae2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ae0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aea:	d178      	bne.n	8005bde <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <HAL_SPI_TransmitReceive+0x10a>
 8005af4:	8b7b      	ldrh	r3, [r7, #26]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d166      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1e:	e053      	b.n	8005bc8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d11b      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x176>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d016      	beq.n	8005b66 <HAL_SPI_TransmitReceive+0x176>
 8005b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d113      	bne.n	8005b66 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	1c9a      	adds	r2, r3, #2
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d119      	bne.n	8005ba8 <HAL_SPI_TransmitReceive+0x1b8>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d014      	beq.n	8005ba8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ba8:	f7fc faec 	bl	8002184 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d807      	bhi.n	8005bc8 <HAL_SPI_TransmitReceive+0x1d8>
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d003      	beq.n	8005bc8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bc6:	e0a7      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1a6      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x130>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1a1      	bne.n	8005b20 <HAL_SPI_TransmitReceive+0x130>
 8005bdc:	e07c      	b.n	8005cd8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_TransmitReceive+0x1fc>
 8005be6:	8b7b      	ldrh	r3, [r7, #26]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d16b      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c12:	e057      	b.n	8005cc4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d11c      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x26c>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d017      	beq.n	8005c5c <HAL_SPI_TransmitReceive+0x26c>
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d114      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	7812      	ldrb	r2, [r2, #0]
 8005c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d119      	bne.n	8005c9e <HAL_SPI_TransmitReceive+0x2ae>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d014      	beq.n	8005c9e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c9e:	f7fc fa71 	bl	8002184 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d803      	bhi.n	8005cb6 <HAL_SPI_TransmitReceive+0x2c6>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d102      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x2cc>
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d103      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005cc2:	e029      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1a2      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x224>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d19d      	bne.n	8005c14 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f000 f8f9 	bl	8005ed4 <SPI_EndRxTxTransaction>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d006      	beq.n	8005cf6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005cf4:	e010      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10b      	bne.n	8005d16 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	617b      	str	r3, [r7, #20]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	e000      	b.n	8005d18 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3730      	adds	r7, #48	; 0x30
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d44:	e04c      	b.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d048      	beq.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d4e:	f7fc fa19 	bl	8002184 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d902      	bls.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d13d      	bne.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7c:	d111      	bne.n	8005da2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d86:	d004      	beq.n	8005d92 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d90:	d107      	bne.n	8005da2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005da0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005daa:	d10f      	bne.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e00f      	b.n	8005e00 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4013      	ands	r3, r2
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	bf0c      	ite	eq
 8005df0:	2301      	moveq	r3, #1
 8005df2:	2300      	movne	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d1a3      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1c:	d111      	bne.n	8005e42 <SPI_EndRxTransaction+0x3a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	d004      	beq.n	8005e32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d107      	bne.n	8005e42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e4a:	d12a      	bne.n	8005ea2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e54:	d012      	beq.n	8005e7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f7ff ff67 	bl	8005d34 <SPI_WaitFlagStateUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d02d      	beq.n	8005ec8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e70:	f043 0220 	orr.w	r2, r3, #32
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e026      	b.n	8005eca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2200      	movs	r2, #0
 8005e84:	2101      	movs	r1, #1
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff ff54 	bl	8005d34 <SPI_WaitFlagStateUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d01a      	beq.n	8005ec8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	f043 0220 	orr.w	r2, r3, #32
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e013      	b.n	8005eca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2101      	movs	r1, #1
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff ff41 	bl	8005d34 <SPI_WaitFlagStateUntilTimeout>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ebc:	f043 0220 	orr.w	r2, r3, #32
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e000      	b.n	8005eca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <SPI_EndRxTxTransaction+0x7c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <SPI_EndRxTxTransaction+0x80>)
 8005ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eea:	0d5b      	lsrs	r3, r3, #21
 8005eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ef0:	fb02 f303 	mul.w	r3, r2, r3
 8005ef4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005efe:	d112      	bne.n	8005f26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f7ff ff12 	bl	8005d34 <SPI_WaitFlagStateUntilTimeout>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d016      	beq.n	8005f44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e00f      	b.n	8005f46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d0f2      	beq.n	8005f26 <SPI_EndRxTxTransaction+0x52>
 8005f40:	e000      	b.n	8005f44 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f42:	bf00      	nop
  }

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	2000000c 	.word	0x2000000c
 8005f54:	165e9f81 	.word	0x165e9f81

08005f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e01d      	b.n	8005fa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f815 	bl	8005fae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 f968 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b085      	sub	sp, #20
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b06      	cmp	r3, #6
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b02      	cmp	r3, #2
 800601e:	d122      	bne.n	8006066 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d11b      	bne.n	8006066 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0202 	mvn.w	r2, #2
 8006036:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f8ee 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 8006052:	e005      	b.n	8006060 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f8e0 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f8f1 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b04      	cmp	r3, #4
 8006072:	d122      	bne.n	80060ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d11b      	bne.n	80060ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f06f 0204 	mvn.w	r2, #4
 800608a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f8c4 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 80060a6:	e005      	b.n	80060b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f8b6 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f8c7 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d122      	bne.n	800610e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d11b      	bne.n	800610e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f06f 0208 	mvn.w	r2, #8
 80060de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2204      	movs	r2, #4
 80060e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d003      	beq.n	80060fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f89a 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 80060fa:	e005      	b.n	8006108 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f88c 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f89d 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	2b10      	cmp	r3, #16
 800611a:	d122      	bne.n	8006162 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f003 0310 	and.w	r3, r3, #16
 8006126:	2b10      	cmp	r3, #16
 8006128:	d11b      	bne.n	8006162 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f06f 0210 	mvn.w	r2, #16
 8006132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2208      	movs	r2, #8
 8006138:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f870 	bl	800622e <HAL_TIM_IC_CaptureCallback>
 800614e:	e005      	b.n	800615c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f862 	bl	800621a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f873 	bl	8006242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b01      	cmp	r3, #1
 800616e:	d10e      	bne.n	800618e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b01      	cmp	r3, #1
 800617c:	d107      	bne.n	800618e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f06f 0201 	mvn.w	r2, #1
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fa ff03 	bl	8000f94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006198:	2b80      	cmp	r3, #128	; 0x80
 800619a:	d10e      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a6:	2b80      	cmp	r3, #128	; 0x80
 80061a8:	d107      	bne.n	80061ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f903 	bl	80063c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d10e      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d107      	bne.n	80061e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f838 	bl	8006256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d10e      	bne.n	8006212 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d107      	bne.n	8006212 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f06f 0220 	mvn.w	r2, #32
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8cd 	bl	80063ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006212:	bf00      	nop
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621a:	b480      	push	{r7}
 800621c:	b083      	sub	sp, #12
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006222:	bf00      	nop
 8006224:	370c      	adds	r7, #12
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624a:	bf00      	nop
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a40      	ldr	r2, [pc, #256]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d00f      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3d      	ldr	r2, [pc, #244]	; (8006384 <TIM_Base_SetConfig+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3b      	ldr	r2, [pc, #236]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <TIM_Base_SetConfig+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02b      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d027      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <TIM_Base_SetConfig+0x118>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d023      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01f      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01b      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d017      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a28      	ldr	r2, [pc, #160]	; (8006394 <TIM_Base_SetConfig+0x128>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <TIM_Base_SetConfig+0x12c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00f      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a26      	ldr	r2, [pc, #152]	; (800639c <TIM_Base_SetConfig+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00b      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <TIM_Base_SetConfig+0x134>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d007      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a24      	ldr	r2, [pc, #144]	; (80063a4 <TIM_Base_SetConfig+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a23      	ldr	r2, [pc, #140]	; (80063a8 <TIM_Base_SetConfig+0x13c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d108      	bne.n	8006330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <TIM_Base_SetConfig+0x124>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	615a      	str	r2, [r3, #20]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800
 80063a0:	40001800 	.word	0x40001800
 80063a4:	40001c00 	.word	0x40001c00
 80063a8:	40002000 	.word	0x40002000

080063ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d029      	beq.n	8006442 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80063fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063fe:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006408:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800640e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006414:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800641a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006420:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006426:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800642c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006432:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e034      	b.n	80064ac <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800644e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006458:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800645e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006472:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006476:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006480:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006486:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800648c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006492:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006498:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	4313      	orrs	r3, r2
 800649e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b087      	sub	sp, #28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d02e      	beq.n	8006532 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80064e0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80064f0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80064fa:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	3b01      	subs	r3, #1
 8006502:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006504:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	3b01      	subs	r3, #1
 800650c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800650e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	3b01      	subs	r3, #1
 8006516:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006518:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	3b01      	subs	r3, #1
 8006520:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006522:	4313      	orrs	r3, r2
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	e03b      	b.n	80065aa <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800653e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006542:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	3b01      	subs	r3, #1
 800654a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	3b01      	subs	r3, #1
 8006552:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006554:	4313      	orrs	r3, r2
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006568:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	3b01      	subs	r3, #1
 8006576:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006578:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	3b01      	subs	r3, #1
 8006580:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006582:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	3b01      	subs	r3, #1
 800658a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800658c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	3b01      	subs	r3, #1
 8006594:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006596:	4313      	orrs	r3, r2
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065d4:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	3b01      	subs	r3, #1
 80065dc:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80065de:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80065e6:	4313      	orrs	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80065f0:	f7fb fdc8 	bl	8002184 <HAL_GetTick>
 80065f4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80065f6:	e010      	b.n	800661a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fe:	d00c      	beq.n	800661a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <FMC_SDRAM_SendCommand+0x5e>
 8006606:	f7fb fdbd 	bl	8002184 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	d201      	bcs.n	800661a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e006      	b.n	8006628 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b20      	cmp	r3, #32
 8006624:	d0e8      	beq.n	80065f8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006656:	b480      	push	{r7}
 8006658:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800666a:	f3ef 8305 	mrs	r3, IPSR
 800666e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10f      	bne.n	8006696 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006676:	f3ef 8310 	mrs	r3, PRIMASK
 800667a:	607b      	str	r3, [r7, #4]
  return(result);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d105      	bne.n	800668e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006682:	f3ef 8311 	mrs	r3, BASEPRI
 8006686:	603b      	str	r3, [r7, #0]
  return(result);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <osKernelInitialize+0x3a>
 800668e:	4b0e      	ldr	r3, [pc, #56]	; (80066c8 <osKernelInitialize+0x64>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d103      	bne.n	800669e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006696:	f06f 0305 	mvn.w	r3, #5
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e00c      	b.n	80066b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800669e:	4b0a      	ldr	r3, [pc, #40]	; (80066c8 <osKernelInitialize+0x64>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066a6:	4b08      	ldr	r3, [pc, #32]	; (80066c8 <osKernelInitialize+0x64>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e002      	b.n	80066b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80066b2:	f04f 33ff 	mov.w	r3, #4294967295
 80066b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80066b8:	68fb      	ldr	r3, [r7, #12]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	2000019c 	.word	0x2000019c

080066cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d2:	f3ef 8305 	mrs	r3, IPSR
 80066d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80066d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10f      	bne.n	80066fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066de:	f3ef 8310 	mrs	r3, PRIMASK
 80066e2:	607b      	str	r3, [r7, #4]
  return(result);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066ea:	f3ef 8311 	mrs	r3, BASEPRI
 80066ee:	603b      	str	r3, [r7, #0]
  return(result);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <osKernelStart+0x3a>
 80066f6:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <osKernelStart+0x68>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d103      	bne.n	8006706 <osKernelStart+0x3a>
    stat = osErrorISR;
 80066fe:	f06f 0305 	mvn.w	r3, #5
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e010      	b.n	8006728 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006706:	4b0b      	ldr	r3, [pc, #44]	; (8006734 <osKernelStart+0x68>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d109      	bne.n	8006722 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800670e:	f7ff ffa2 	bl	8006656 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006712:	4b08      	ldr	r3, [pc, #32]	; (8006734 <osKernelStart+0x68>)
 8006714:	2202      	movs	r2, #2
 8006716:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006718:	f001 fdf2 	bl	8008300 <vTaskStartScheduler>
      stat = osOK;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	e002      	b.n	8006728 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006722:	f04f 33ff 	mov.w	r3, #4294967295
 8006726:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	2000019c 	.word	0x2000019c

08006738 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b090      	sub	sp, #64	; 0x40
 800673c:	af04      	add	r7, sp, #16
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006748:	f3ef 8305 	mrs	r3, IPSR
 800674c:	61fb      	str	r3, [r7, #28]
  return(result);
 800674e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 808f 	bne.w	8006874 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006756:	f3ef 8310 	mrs	r3, PRIMASK
 800675a:	61bb      	str	r3, [r7, #24]
  return(result);
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006762:	f3ef 8311 	mrs	r3, BASEPRI
 8006766:	617b      	str	r3, [r7, #20]
  return(result);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <osThreadNew+0x3e>
 800676e:	4b44      	ldr	r3, [pc, #272]	; (8006880 <osThreadNew+0x148>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b02      	cmp	r3, #2
 8006774:	d07e      	beq.n	8006874 <osThreadNew+0x13c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d07b      	beq.n	8006874 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800677c:	2380      	movs	r3, #128	; 0x80
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006780:	2318      	movs	r3, #24
 8006782:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006784:	2300      	movs	r3, #0
 8006786:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006788:	f04f 33ff 	mov.w	r3, #4294967295
 800678c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d045      	beq.n	8006820 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <osThreadNew+0x6a>
        name = attr->name;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d008      	beq.n	80067c8 <osThreadNew+0x90>
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	2b38      	cmp	r3, #56	; 0x38
 80067ba:	d805      	bhi.n	80067c8 <osThreadNew+0x90>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <osThreadNew+0x94>
        return (NULL);
 80067c8:	2300      	movs	r3, #0
 80067ca:	e054      	b.n	8006876 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	089b      	lsrs	r3, r3, #2
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00e      	beq.n	8006802 <osThreadNew+0xca>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	2b5f      	cmp	r3, #95	; 0x5f
 80067ea:	d90a      	bls.n	8006802 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <osThreadNew+0xca>
        mem = 1;
 80067fc:	2301      	movs	r3, #1
 80067fe:	623b      	str	r3, [r7, #32]
 8006800:	e010      	b.n	8006824 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <osThreadNew+0xec>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d108      	bne.n	8006824 <osThreadNew+0xec>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d104      	bne.n	8006824 <osThreadNew+0xec>
          mem = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	623b      	str	r3, [r7, #32]
 800681e:	e001      	b.n	8006824 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d110      	bne.n	800684c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006832:	9202      	str	r2, [sp, #8]
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800683e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f001 fbbd 	bl	8007fc0 <xTaskCreateStatic>
 8006846:	4603      	mov	r3, r0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e013      	b.n	8006874 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d110      	bne.n	8006874 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	b29a      	uxth	r2, r3
 8006856:	f107 0310 	add.w	r3, r7, #16
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f001 fc05 	bl	8008074 <xTaskCreate>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d001      	beq.n	8006874 <osThreadNew+0x13c>
          hTask = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006874:	693b      	ldr	r3, [r7, #16]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3730      	adds	r7, #48	; 0x30
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	2000019c 	.word	0x2000019c

08006884 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b08c      	sub	sp, #48	; 0x30
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006890:	2300      	movs	r3, #0
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006894:	f3ef 8305 	mrs	r3, IPSR
 8006898:	61bb      	str	r3, [r7, #24]
  return(result);
 800689a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 8087 	bne.w	80069b0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068a2:	f3ef 8310 	mrs	r3, PRIMASK
 80068a6:	617b      	str	r3, [r7, #20]
  return(result);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068ae:	f3ef 8311 	mrs	r3, BASEPRI
 80068b2:	613b      	str	r3, [r7, #16]
  return(result);
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <osSemaphoreNew+0x3e>
 80068ba:	4b40      	ldr	r3, [pc, #256]	; (80069bc <osSemaphoreNew+0x138>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d076      	beq.n	80069b0 <osSemaphoreNew+0x12c>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d073      	beq.n	80069b0 <osSemaphoreNew+0x12c>
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d86f      	bhi.n	80069b0 <osSemaphoreNew+0x12c>
    mem = -1;
 80068d0:	f04f 33ff 	mov.w	r3, #4294967295
 80068d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <osSemaphoreNew+0x6e>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	2b4f      	cmp	r3, #79	; 0x4f
 80068ea:	d902      	bls.n	80068f2 <osSemaphoreNew+0x6e>
        mem = 1;
 80068ec:	2301      	movs	r3, #1
 80068ee:	623b      	str	r3, [r7, #32]
 80068f0:	e00c      	b.n	800690c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d108      	bne.n	800690c <osSemaphoreNew+0x88>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <osSemaphoreNew+0x88>
          mem = 0;
 8006902:	2300      	movs	r3, #0
 8006904:	623b      	str	r3, [r7, #32]
 8006906:	e001      	b.n	800690c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d04d      	beq.n	80069b0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d129      	bne.n	800696e <osSemaphoreNew+0xea>
        if (mem == 1) {
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d10b      	bne.n	8006938 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	2303      	movs	r3, #3
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	4613      	mov	r3, r2
 800692a:	2200      	movs	r2, #0
 800692c:	2100      	movs	r1, #0
 800692e:	2001      	movs	r0, #1
 8006930:	f000 fbc0 	bl	80070b4 <xQueueGenericCreateStatic>
 8006934:	6278      	str	r0, [r7, #36]	; 0x24
 8006936:	e005      	b.n	8006944 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006938:	2203      	movs	r2, #3
 800693a:	2100      	movs	r1, #0
 800693c:	2001      	movs	r0, #1
 800693e:	f000 fc2c 	bl	800719a <xQueueGenericCreate>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d022      	beq.n	8006990 <osSemaphoreNew+0x10c>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01f      	beq.n	8006990 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006950:	2300      	movs	r3, #0
 8006952:	2200      	movs	r2, #0
 8006954:	2100      	movs	r1, #0
 8006956:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006958:	f000 fce8 	bl	800732c <xQueueGenericSend>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d016      	beq.n	8006990 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8006962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006964:	f001 f95b 	bl	8007c1e <vQueueDelete>
            hSemaphore = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	e010      	b.n	8006990 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d108      	bne.n	8006986 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	461a      	mov	r2, r3
 800697a:	68b9      	ldr	r1, [r7, #8]
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fc6e 	bl	800725e <xQueueCreateCountingSemaphoreStatic>
 8006982:	6278      	str	r0, [r7, #36]	; 0x24
 8006984:	e004      	b.n	8006990 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006986:	68b9      	ldr	r1, [r7, #8]
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fc9d 	bl	80072c8 <xQueueCreateCountingSemaphore>
 800698e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00c      	beq.n	80069b0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <osSemaphoreNew+0x120>
          name = attr->name;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e001      	b.n	80069a8 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80069a8:	69f9      	ldr	r1, [r7, #28]
 80069aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ac:	f001 fa82 	bl	8007eb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80069b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3728      	adds	r7, #40	; 0x28
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	2000019c 	.word	0x2000019c

080069c0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80069d8:	f06f 0303 	mvn.w	r3, #3
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	e04b      	b.n	8006a78 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e0:	f3ef 8305 	mrs	r3, IPSR
 80069e4:	617b      	str	r3, [r7, #20]
  return(result);
 80069e6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10f      	bne.n	8006a0c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ec:	f3ef 8310 	mrs	r3, PRIMASK
 80069f0:	613b      	str	r3, [r7, #16]
  return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069f8:	f3ef 8311 	mrs	r3, BASEPRI
 80069fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d026      	beq.n	8006a52 <osSemaphoreAcquire+0x92>
 8006a04:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <osSemaphoreAcquire+0xc4>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d122      	bne.n	8006a52 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d003      	beq.n	8006a1a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006a12:	f06f 0303 	mvn.w	r3, #3
 8006a16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006a18:	e02d      	b.n	8006a76 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a1e:	f107 0308 	add.w	r3, r7, #8
 8006a22:	461a      	mov	r2, r3
 8006a24:	2100      	movs	r1, #0
 8006a26:	69b8      	ldr	r0, [r7, #24]
 8006a28:	f001 f87c 	bl	8007b24 <xQueueReceiveFromISR>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d003      	beq.n	8006a3a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006a32:	f06f 0302 	mvn.w	r3, #2
 8006a36:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006a38:	e01d      	b.n	8006a76 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01a      	beq.n	8006a76 <osSemaphoreAcquire+0xb6>
 8006a40:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <osSemaphoreAcquire+0xc8>)
 8006a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006a50:	e011      	b.n	8006a76 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	69b8      	ldr	r0, [r7, #24]
 8006a56:	f000 ff5d 	bl	8007914 <xQueueSemaphoreTake>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d00b      	beq.n	8006a78 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006a66:	f06f 0301 	mvn.w	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	e004      	b.n	8006a78 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006a6e:	f06f 0302 	mvn.w	r3, #2
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	e000      	b.n	8006a78 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006a76:	bf00      	nop
      }
    }
  }

  return (stat);
 8006a78:	69fb      	ldr	r3, [r7, #28]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3720      	adds	r7, #32
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	2000019c 	.word	0x2000019c
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006aa2:	f06f 0303 	mvn.w	r3, #3
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e03e      	b.n	8006b28 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aaa:	f3ef 8305 	mrs	r3, IPSR
 8006aae:	617b      	str	r3, [r7, #20]
  return(result);
 8006ab0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8006aba:	613b      	str	r3, [r7, #16]
  return(result);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01e      	beq.n	8006b0c <osSemaphoreRelease+0x80>
 8006ace:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <osSemaphoreRelease+0xa8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d11a      	bne.n	8006b0c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ada:	f107 0308 	add.w	r3, r7, #8
 8006ade:	4619      	mov	r1, r3
 8006ae0:	69b8      	ldr	r0, [r7, #24]
 8006ae2:	f000 fdb1 	bl	8007648 <xQueueGiveFromISR>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d003      	beq.n	8006af4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006aec:	f06f 0302 	mvn.w	r3, #2
 8006af0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006af2:	e018      	b.n	8006b26 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d015      	beq.n	8006b26 <osSemaphoreRelease+0x9a>
 8006afa:	4b0f      	ldr	r3, [pc, #60]	; (8006b38 <osSemaphoreRelease+0xac>)
 8006afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b0a:	e00c      	b.n	8006b26 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2100      	movs	r1, #0
 8006b12:	69b8      	ldr	r0, [r7, #24]
 8006b14:	f000 fc0a 	bl	800732c <xQueueGenericSend>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d004      	beq.n	8006b28 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006b1e:	f06f 0302 	mvn.w	r3, #2
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e000      	b.n	8006b28 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b26:	bf00      	nop
    }
  }

  return (stat);
 8006b28:	69fb      	ldr	r3, [r7, #28]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	2000019c 	.word	0x2000019c
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08c      	sub	sp, #48	; 0x30
 8006b40:	af02      	add	r7, sp, #8
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b4c:	f3ef 8305 	mrs	r3, IPSR
 8006b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b52:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d170      	bne.n	8006c3a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b58:	f3ef 8310 	mrs	r3, PRIMASK
 8006b5c:	617b      	str	r3, [r7, #20]
  return(result);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b64:	f3ef 8311 	mrs	r3, BASEPRI
 8006b68:	613b      	str	r3, [r7, #16]
  return(result);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d003      	beq.n	8006b78 <osMessageQueueNew+0x3c>
 8006b70:	4b34      	ldr	r3, [pc, #208]	; (8006c44 <osMessageQueueNew+0x108>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d060      	beq.n	8006c3a <osMessageQueueNew+0xfe>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d05d      	beq.n	8006c3a <osMessageQueueNew+0xfe>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d05a      	beq.n	8006c3a <osMessageQueueNew+0xfe>
    mem = -1;
 8006b84:	f04f 33ff 	mov.w	r3, #4294967295
 8006b88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d029      	beq.n	8006be4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d012      	beq.n	8006bbe <osMessageQueueNew+0x82>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b4f      	cmp	r3, #79	; 0x4f
 8006b9e:	d90e      	bls.n	8006bbe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695a      	ldr	r2, [r3, #20]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	fb01 f303 	mul.w	r3, r1, r3
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <osMessageQueueNew+0x82>
        mem = 1;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	623b      	str	r3, [r7, #32]
 8006bbc:	e014      	b.n	8006be8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d110      	bne.n	8006be8 <osMessageQueueNew+0xac>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10c      	bne.n	8006be8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d104      	bne.n	8006be8 <osMessageQueueNew+0xac>
          mem = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	623b      	str	r3, [r7, #32]
 8006be2:	e001      	b.n	8006be8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d10c      	bne.n	8006c08 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6899      	ldr	r1, [r3, #8]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	68b9      	ldr	r1, [r7, #8]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 fa58 	bl	80070b4 <xQueueGenericCreateStatic>
 8006c04:	6278      	str	r0, [r7, #36]	; 0x24
 8006c06:	e008      	b.n	8006c1a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006c0e:	2200      	movs	r2, #0
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fac1 	bl	800719a <xQueueGenericCreate>
 8006c18:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00c      	beq.n	8006c3a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <osMessageQueueNew+0xf2>
        name = attr->name;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	e001      	b.n	8006c32 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c32:	69f9      	ldr	r1, [r7, #28]
 8006c34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c36:	f001 f93d 	bl	8007eb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3728      	adds	r7, #40	; 0x28
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	2000019c 	.word	0x2000019c

08006c48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	4613      	mov	r3, r2
 8006c56:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c60:	f3ef 8305 	mrs	r3, IPSR
 8006c64:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c66:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d10f      	bne.n	8006c8c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d105      	bne.n	8006c84 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c78:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d02c      	beq.n	8006cde <osMessageQueuePut+0x96>
 8006c84:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <osMessageQueuePut+0xe0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d128      	bne.n	8006cde <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <osMessageQueuePut+0x56>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <osMessageQueuePut+0x56>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006c9e:	f06f 0303 	mvn.w	r3, #3
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ca4:	e039      	b.n	8006d1a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006caa:	f107 0210 	add.w	r2, r7, #16
 8006cae:	2300      	movs	r3, #0
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	6a38      	ldr	r0, [r7, #32]
 8006cb4:	f000 fc34 	bl	8007520 <xQueueGenericSendFromISR>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d003      	beq.n	8006cc6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006cbe:	f06f 0302 	mvn.w	r3, #2
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cc4:	e029      	b.n	8006d1a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d026      	beq.n	8006d1a <osMessageQueuePut+0xd2>
 8006ccc:	4b17      	ldr	r3, [pc, #92]	; (8006d2c <osMessageQueuePut+0xe4>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cdc:	e01d      	b.n	8006d1a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <osMessageQueuePut+0xa2>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006cea:	f06f 0303 	mvn.w	r3, #3
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf0:	e014      	b.n	8006d1c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	6a38      	ldr	r0, [r7, #32]
 8006cfa:	f000 fb17 	bl	800732c <xQueueGenericSend>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d00b      	beq.n	8006d1c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006d0a:	f06f 0301 	mvn.w	r3, #1
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d10:	e004      	b.n	8006d1c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006d12:	f06f 0302 	mvn.w	r3, #2
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
 8006d18:	e000      	b.n	8006d1c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d1a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	2000019c 	.word	0x2000019c
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d46:	f3ef 8305 	mrs	r3, IPSR
 8006d4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d4c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10f      	bne.n	8006d72 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d52:	f3ef 8310 	mrs	r3, PRIMASK
 8006d56:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d105      	bne.n	8006d6a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d62:	617b      	str	r3, [r7, #20]
  return(result);
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d02c      	beq.n	8006dc4 <osMessageQueueGet+0x94>
 8006d6a:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <osMessageQueueGet+0xdc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d128      	bne.n	8006dc4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <osMessageQueueGet+0x54>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <osMessageQueueGet+0x54>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006d84:	f06f 0303 	mvn.w	r3, #3
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d8a:	e038      	b.n	8006dfe <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d90:	f107 0310 	add.w	r3, r7, #16
 8006d94:	461a      	mov	r2, r3
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	6a38      	ldr	r0, [r7, #32]
 8006d9a:	f000 fec3 	bl	8007b24 <xQueueReceiveFromISR>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d003      	beq.n	8006dac <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006da4:	f06f 0302 	mvn.w	r3, #2
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006daa:	e028      	b.n	8006dfe <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d025      	beq.n	8006dfe <osMessageQueueGet+0xce>
 8006db2:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <osMessageQueueGet+0xe0>)
 8006db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dc2:	e01c      	b.n	8006dfe <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <osMessageQueueGet+0xa0>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d103      	bne.n	8006dd8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006dd0:	f06f 0303 	mvn.w	r3, #3
 8006dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd6:	e013      	b.n	8006e00 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	6a38      	ldr	r0, [r7, #32]
 8006dde:	f000 fcbd 	bl	800775c <xQueueReceive>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d00b      	beq.n	8006e00 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006dee:	f06f 0301 	mvn.w	r3, #1
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
 8006df4:	e004      	b.n	8006e00 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006df6:	f06f 0302 	mvn.w	r3, #2
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfc:	e000      	b.n	8006e00 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dfe:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3728      	adds	r7, #40	; 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000019c 	.word	0x2000019c
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4a07      	ldr	r2, [pc, #28]	; (8006e40 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <vApplicationGetIdleTaskMemory+0x30>)
 8006e2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2280      	movs	r2, #128	; 0x80
 8006e30:	601a      	str	r2, [r3, #0]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	200001a0 	.word	0x200001a0
 8006e44:	20000200 	.word	0x20000200

08006e48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a07      	ldr	r2, [pc, #28]	; (8006e74 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4a06      	ldr	r2, [pc, #24]	; (8006e78 <vApplicationGetTimerTaskMemory+0x30>)
 8006e5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e66:	601a      	str	r2, [r3, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	20000400 	.word	0x20000400
 8006e78:	20000460 	.word	0x20000460

08006e7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f103 0208 	add.w	r2, r3, #8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f103 0208 	add.w	r2, r3, #8
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f103 0208 	add.w	r2, r3, #8
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	601a      	str	r2, [r3, #0]
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d103      	bne.n	8006f3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	e00c      	b.n	8006f58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	3308      	adds	r3, #8
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	e002      	b.n	8006f4c <vListInsert+0x2e>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d2f6      	bcs.n	8006f46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6892      	ldr	r2, [r2, #8]
 8006fa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6852      	ldr	r2, [r2, #4]
 8006fb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d103      	bne.n	8006fc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	1e5a      	subs	r2, r3, #1
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	e7fe      	b.n	800700a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800700c:	f002 fbf6 	bl	80097fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007018:	68f9      	ldr	r1, [r7, #12]
 800701a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800701c:	fb01 f303 	mul.w	r3, r1, r3
 8007020:	441a      	add	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703c:	3b01      	subs	r3, #1
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007042:	fb01 f303 	mul.w	r3, r1, r3
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	22ff      	movs	r2, #255	; 0xff
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	22ff      	movs	r2, #255	; 0xff
 8007058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d114      	bne.n	800708c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01a      	beq.n	80070a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3310      	adds	r3, #16
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fbc6 	bl	8008800 <xTaskRemoveFromEventList>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d012      	beq.n	80070a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <xQueueGenericReset+0xcc>)
 800707c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	e009      	b.n	80070a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3310      	adds	r3, #16
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fef3 	bl	8006e7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3324      	adds	r3, #36	; 0x24
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff feee 	bl	8006e7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070a0:	f002 fbda 	bl	8009858 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070a4:	2301      	movs	r3, #1
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	e000ed04 	.word	0xe000ed04

080070b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08e      	sub	sp, #56	; 0x38
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <xQueueGenericCreateStatic+0x28>
 80070c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070da:	e7fe      	b.n	80070da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <xQueueGenericCreateStatic+0x42>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
 80070f4:	e7fe      	b.n	80070f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <xQueueGenericCreateStatic+0x4e>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <xQueueGenericCreateStatic+0x52>
 8007102:	2301      	movs	r3, #1
 8007104:	e000      	b.n	8007108 <xQueueGenericCreateStatic+0x54>
 8007106:	2300      	movs	r3, #0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <xQueueGenericCreateStatic+0x6c>
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
 800711e:	e7fe      	b.n	800711e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <xQueueGenericCreateStatic+0x78>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d101      	bne.n	8007130 <xQueueGenericCreateStatic+0x7c>
 800712c:	2301      	movs	r3, #1
 800712e:	e000      	b.n	8007132 <xQueueGenericCreateStatic+0x7e>
 8007130:	2300      	movs	r3, #0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <xQueueGenericCreateStatic+0x96>
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	61fb      	str	r3, [r7, #28]
 8007148:	e7fe      	b.n	8007148 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800714a:	2350      	movs	r3, #80	; 0x50
 800714c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b50      	cmp	r3, #80	; 0x50
 8007152:	d009      	beq.n	8007168 <xQueueGenericCreateStatic+0xb4>
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	e7fe      	b.n	8007166 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007168:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00d      	beq.n	8007190 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800717c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4613      	mov	r3, r2
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 f844 	bl	8007218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007192:	4618      	mov	r0, r3
 8007194:	3730      	adds	r7, #48	; 0x30
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800719a:	b580      	push	{r7, lr}
 800719c:	b08a      	sub	sp, #40	; 0x28
 800719e:	af02      	add	r7, sp, #8
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	4613      	mov	r3, r2
 80071a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <xQueueGenericCreate+0x28>
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	e7fe      	b.n	80071c0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e004      	b.n	80071d8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68ba      	ldr	r2, [r7, #8]
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	3350      	adds	r3, #80	; 0x50
 80071dc:	4618      	mov	r0, r3
 80071de:	f002 fc27 	bl	8009a30 <pvPortMalloc>
 80071e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	3350      	adds	r3, #80	; 0x50
 80071f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071fc:	79fa      	ldrb	r2, [r7, #7]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	4613      	mov	r3, r2
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f805 	bl	8007218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800720e:	69bb      	ldr	r3, [r7, #24]
	}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e002      	b.n	800723a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007246:	2101      	movs	r1, #1
 8007248:	69b8      	ldr	r0, [r7, #24]
 800724a:	f7ff fecb 	bl	8006fe4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007256:	bf00      	nop
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800725e:	b580      	push	{r7, lr}
 8007260:	b08a      	sub	sp, #40	; 0x28
 8007262:	af02      	add	r7, sp, #8
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <xQueueCreateCountingSemaphoreStatic+0x26>
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	61bb      	str	r3, [r7, #24]
 8007282:	e7fe      	b.n	8007282 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	429a      	cmp	r2, r3
 800728a:	d909      	bls.n	80072a0 <xQueueCreateCountingSemaphoreStatic+0x42>
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e7fe      	b.n	800729e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072a0:	2302      	movs	r3, #2
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7ff ff02 	bl	80070b4 <xQueueGenericCreateStatic>
 80072b0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072be:	69fb      	ldr	r3, [r7, #28]
	}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d109      	bne.n	80072ec <xQueueCreateCountingSemaphore+0x24>
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	613b      	str	r3, [r7, #16]
 80072ea:	e7fe      	b.n	80072ea <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d909      	bls.n	8007308 <xQueueCreateCountingSemaphore+0x40>
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	e7fe      	b.n	8007306 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007308:	2202      	movs	r2, #2
 800730a:	2100      	movs	r1, #0
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff44 	bl	800719a <xQueueGenericCreate>
 8007312:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007320:	697b      	ldr	r3, [r7, #20]
	}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
	...

0800732c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08e      	sub	sp, #56	; 0x38
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <xQueueGenericSend+0x30>
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	62bb      	str	r3, [r7, #40]	; 0x28
 800735a:	e7fe      	b.n	800735a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <xQueueGenericSend+0x3e>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <xQueueGenericSend+0x42>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <xQueueGenericSend+0x44>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d109      	bne.n	8007388 <xQueueGenericSend+0x5c>
 8007374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	627b      	str	r3, [r7, #36]	; 0x24
 8007386:	e7fe      	b.n	8007386 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d103      	bne.n	8007396 <xQueueGenericSend+0x6a>
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <xQueueGenericSend+0x6e>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueGenericSend+0x70>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d109      	bne.n	80073b4 <xQueueGenericSend+0x88>
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	623b      	str	r3, [r7, #32]
 80073b2:	e7fe      	b.n	80073b2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073b4:	f001 fbda 	bl	8008b6c <xTaskGetSchedulerState>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <xQueueGenericSend+0x98>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <xQueueGenericSend+0x9c>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <xQueueGenericSend+0x9e>
 80073c8:	2300      	movs	r3, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d109      	bne.n	80073e2 <xQueueGenericSend+0xb6>
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	61fb      	str	r3, [r7, #28]
 80073e0:	e7fe      	b.n	80073e0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073e2:	f002 fa0b 	bl	80097fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d302      	bcc.n	80073f8 <xQueueGenericSend+0xcc>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d129      	bne.n	800744c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fe:	f000 fc48 	bl	8007c92 <prvCopyDataToQueue>
 8007402:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d010      	beq.n	800742e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	3324      	adds	r3, #36	; 0x24
 8007410:	4618      	mov	r0, r3
 8007412:	f001 f9f5 	bl	8008800 <xTaskRemoveFromEventList>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d013      	beq.n	8007444 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800741c:	4b3f      	ldr	r3, [pc, #252]	; (800751c <xQueueGenericSend+0x1f0>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	e00a      	b.n	8007444 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007434:	4b39      	ldr	r3, [pc, #228]	; (800751c <xQueueGenericSend+0x1f0>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007444:	f002 fa08 	bl	8009858 <vPortExitCritical>
				return pdPASS;
 8007448:	2301      	movs	r3, #1
 800744a:	e063      	b.n	8007514 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d103      	bne.n	800745a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007452:	f002 fa01 	bl	8009858 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007456:	2300      	movs	r3, #0
 8007458:	e05c      	b.n	8007514 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745c:	2b00      	cmp	r3, #0
 800745e:	d106      	bne.n	800746e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007460:	f107 0314 	add.w	r3, r7, #20
 8007464:	4618      	mov	r0, r3
 8007466:	f001 fa2d 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800746a:	2301      	movs	r3, #1
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800746e:	f002 f9f3 	bl	8009858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007472:	f000 ffa9 	bl	80083c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007476:	f002 f9c1 	bl	80097fc <vPortEnterCritical>
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007480:	b25b      	sxtb	r3, r3
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d103      	bne.n	8007490 <xQueueGenericSend+0x164>
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007496:	b25b      	sxtb	r3, r3
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d103      	bne.n	80074a6 <xQueueGenericSend+0x17a>
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a6:	f002 f9d7 	bl	8009858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074aa:	1d3a      	adds	r2, r7, #4
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4611      	mov	r1, r2
 80074b2:	4618      	mov	r0, r3
 80074b4:	f001 fa1c 	bl	80088f0 <xTaskCheckForTimeOut>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d124      	bne.n	8007508 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074c0:	f000 fcdf 	bl	8007e82 <prvIsQueueFull>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d018      	beq.n	80074fc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	3310      	adds	r3, #16
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4611      	mov	r1, r2
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 f946 	bl	8008764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074da:	f000 fc6a 	bl	8007db2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074de:	f000 ff81 	bl	80083e4 <xTaskResumeAll>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f47f af7c 	bne.w	80073e2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80074ea:	4b0c      	ldr	r3, [pc, #48]	; (800751c <xQueueGenericSend+0x1f0>)
 80074ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	e772      	b.n	80073e2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074fe:	f000 fc58 	bl	8007db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007502:	f000 ff6f 	bl	80083e4 <xTaskResumeAll>
 8007506:	e76c      	b.n	80073e2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750a:	f000 fc52 	bl	8007db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800750e:	f000 ff69 	bl	80083e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007512:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007514:	4618      	mov	r0, r3
 8007516:	3738      	adds	r7, #56	; 0x38
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	e000ed04 	.word	0xe000ed04

08007520 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08e      	sub	sp, #56	; 0x38
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
 800752c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <xQueueGenericSendFromISR+0x2c>
 8007538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753c:	f383 8811 	msr	BASEPRI, r3
 8007540:	f3bf 8f6f 	isb	sy
 8007544:	f3bf 8f4f 	dsb	sy
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
 800754a:	e7fe      	b.n	800754a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <xQueueGenericSendFromISR+0x3a>
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <xQueueGenericSendFromISR+0x3e>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <xQueueGenericSendFromISR+0x40>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d109      	bne.n	8007578 <xQueueGenericSendFromISR+0x58>
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	623b      	str	r3, [r7, #32]
 8007576:	e7fe      	b.n	8007576 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d103      	bne.n	8007586 <xQueueGenericSendFromISR+0x66>
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	2b01      	cmp	r3, #1
 8007584:	d101      	bne.n	800758a <xQueueGenericSendFromISR+0x6a>
 8007586:	2301      	movs	r3, #1
 8007588:	e000      	b.n	800758c <xQueueGenericSendFromISR+0x6c>
 800758a:	2300      	movs	r3, #0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d109      	bne.n	80075a4 <xQueueGenericSendFromISR+0x84>
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	61fb      	str	r3, [r7, #28]
 80075a2:	e7fe      	b.n	80075a2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075a4:	f002 fa06 	bl	80099b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075a8:	f3ef 8211 	mrs	r2, BASEPRI
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	61ba      	str	r2, [r7, #24]
 80075be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d302      	bcc.n	80075d6 <xQueueGenericSendFromISR+0xb6>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d12c      	bne.n	8007630 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e6:	f000 fb54 	bl	8007c92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d112      	bne.n	800761a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d016      	beq.n	800762a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	3324      	adds	r3, #36	; 0x24
 8007600:	4618      	mov	r0, r3
 8007602:	f001 f8fd 	bl	8008800 <xTaskRemoveFromEventList>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00e      	beq.n	800762a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00b      	beq.n	800762a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e007      	b.n	800762a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800761a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800761e:	3301      	adds	r3, #1
 8007620:	b2db      	uxtb	r3, r3
 8007622:	b25a      	sxtb	r2, r3
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800762a:	2301      	movs	r3, #1
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800762e:	e001      	b.n	8007634 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007630:	2300      	movs	r3, #0
 8007632:	637b      	str	r3, [r7, #52]	; 0x34
 8007634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007636:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800763e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007640:	4618      	mov	r0, r3
 8007642:	3738      	adds	r7, #56	; 0x38
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08e      	sub	sp, #56	; 0x38
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2b00      	cmp	r3, #0
 800765a:	d109      	bne.n	8007670 <xQueueGiveFromISR+0x28>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	623b      	str	r3, [r7, #32]
 800766e:	e7fe      	b.n	800766e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d009      	beq.n	800768c <xQueueGiveFromISR+0x44>
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	e7fe      	b.n	800768a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d103      	bne.n	800769c <xQueueGiveFromISR+0x54>
 8007694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <xQueueGiveFromISR+0x58>
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <xQueueGiveFromISR+0x5a>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d109      	bne.n	80076ba <xQueueGiveFromISR+0x72>
 80076a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	61bb      	str	r3, [r7, #24]
 80076b8:	e7fe      	b.n	80076b8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ba:	f002 f97b 	bl	80099b4 <vPortValidateInterruptPriority>
	__asm volatile
 80076be:	f3ef 8211 	mrs	r2, BASEPRI
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617a      	str	r2, [r7, #20]
 80076d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d22b      	bcs.n	8007742 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d112      	bne.n	800772c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d016      	beq.n	800773c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	3324      	adds	r3, #36	; 0x24
 8007712:	4618      	mov	r0, r3
 8007714:	f001 f874 	bl	8008800 <xTaskRemoveFromEventList>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00e      	beq.n	800773c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e007      	b.n	800773c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800772c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007730:	3301      	adds	r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	b25a      	sxtb	r2, r3
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800773c:	2301      	movs	r3, #1
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
 8007740:	e001      	b.n	8007746 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007752:	4618      	mov	r0, r3
 8007754:	3738      	adds	r7, #56	; 0x38
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
	...

0800775c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b08c      	sub	sp, #48	; 0x30
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007768:	2300      	movs	r3, #0
 800776a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d109      	bne.n	800778a <xQueueReceive+0x2e>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	623b      	str	r3, [r7, #32]
 8007788:	e7fe      	b.n	8007788 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d103      	bne.n	8007798 <xQueueReceive+0x3c>
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <xQueueReceive+0x40>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <xQueueReceive+0x42>
 800779c:	2300      	movs	r3, #0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d109      	bne.n	80077b6 <xQueueReceive+0x5a>
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	61fb      	str	r3, [r7, #28]
 80077b4:	e7fe      	b.n	80077b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077b6:	f001 f9d9 	bl	8008b6c <xTaskGetSchedulerState>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <xQueueReceive+0x6a>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueReceive+0x6e>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueReceive+0x70>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <xQueueReceive+0x88>
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	f383 8811 	msr	BASEPRI, r3
 80077d8:	f3bf 8f6f 	isb	sy
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	e7fe      	b.n	80077e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077e4:	f002 f80a 	bl	80097fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01f      	beq.n	8007834 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077f8:	f000 fab5 	bl	8007d66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	1e5a      	subs	r2, r3, #1
 8007800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007802:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	3310      	adds	r3, #16
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fff5 	bl	8008800 <xTaskRemoveFromEventList>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d007      	beq.n	800782c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800781c:	4b3c      	ldr	r3, [pc, #240]	; (8007910 <xQueueReceive+0x1b4>)
 800781e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	f3bf 8f4f 	dsb	sy
 8007828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800782c:	f002 f814 	bl	8009858 <vPortExitCritical>
				return pdPASS;
 8007830:	2301      	movs	r3, #1
 8007832:	e069      	b.n	8007908 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800783a:	f002 f80d 	bl	8009858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800783e:	2300      	movs	r3, #0
 8007840:	e062      	b.n	8007908 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d106      	bne.n	8007856 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007848:	f107 0310 	add.w	r3, r7, #16
 800784c:	4618      	mov	r0, r3
 800784e:	f001 f839 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007852:	2301      	movs	r3, #1
 8007854:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007856:	f001 ffff 	bl	8009858 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800785a:	f000 fdb5 	bl	80083c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800785e:	f001 ffcd 	bl	80097fc <vPortEnterCritical>
 8007862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007868:	b25b      	sxtb	r3, r3
 800786a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786e:	d103      	bne.n	8007878 <xQueueReceive+0x11c>
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800787e:	b25b      	sxtb	r3, r3
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007884:	d103      	bne.n	800788e <xQueueReceive+0x132>
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800788e:	f001 ffe3 	bl	8009858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007892:	1d3a      	adds	r2, r7, #4
 8007894:	f107 0310 	add.w	r3, r7, #16
 8007898:	4611      	mov	r1, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f001 f828 	bl	80088f0 <xTaskCheckForTimeOut>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d123      	bne.n	80078ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078a8:	f000 fad5 	bl	8007e56 <prvIsQueueEmpty>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d017      	beq.n	80078e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	3324      	adds	r3, #36	; 0x24
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4611      	mov	r1, r2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 ff52 	bl	8008764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078c2:	f000 fa76 	bl	8007db2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078c6:	f000 fd8d 	bl	80083e4 <xTaskResumeAll>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d189      	bne.n	80077e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80078d0:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <xQueueReceive+0x1b4>)
 80078d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	e780      	b.n	80077e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e4:	f000 fa65 	bl	8007db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078e8:	f000 fd7c 	bl	80083e4 <xTaskResumeAll>
 80078ec:	e77a      	b.n	80077e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f0:	f000 fa5f 	bl	8007db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078f4:	f000 fd76 	bl	80083e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078fa:	f000 faac 	bl	8007e56 <prvIsQueueEmpty>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	f43f af6f 	beq.w	80077e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007906:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007908:	4618      	mov	r0, r3
 800790a:	3730      	adds	r7, #48	; 0x30
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	e000ed04 	.word	0xe000ed04

08007914 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08e      	sub	sp, #56	; 0x38
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <xQueueSemaphoreTake+0x30>
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	623b      	str	r3, [r7, #32]
 8007942:	e7fe      	b.n	8007942 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <xQueueSemaphoreTake+0x4c>
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	61fb      	str	r3, [r7, #28]
 800795e:	e7fe      	b.n	800795e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007960:	f001 f904 	bl	8008b6c <xTaskGetSchedulerState>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d102      	bne.n	8007970 <xQueueSemaphoreTake+0x5c>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <xQueueSemaphoreTake+0x60>
 8007970:	2301      	movs	r3, #1
 8007972:	e000      	b.n	8007976 <xQueueSemaphoreTake+0x62>
 8007974:	2300      	movs	r3, #0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <xQueueSemaphoreTake+0x7a>
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	e7fe      	b.n	800798c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800798e:	f001 ff35 	bl	80097fc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007996:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	2b00      	cmp	r3, #0
 800799c:	d024      	beq.n	80079e8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079ae:	f001 fa4f 	bl	8008e50 <pvTaskIncrementMutexHeldCount>
 80079b2:	4602      	mov	r2, r0
 80079b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00f      	beq.n	80079e0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	3310      	adds	r3, #16
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 ff1b 	bl	8008800 <xTaskRemoveFromEventList>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079d0:	4b53      	ldr	r3, [pc, #332]	; (8007b20 <xQueueSemaphoreTake+0x20c>)
 80079d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079e0:	f001 ff3a 	bl	8009858 <vPortExitCritical>
				return pdPASS;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e096      	b.n	8007b16 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d110      	bne.n	8007a10 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <xQueueSemaphoreTake+0xf4>
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	e7fe      	b.n	8007a06 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a08:	f001 ff26 	bl	8009858 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e082      	b.n	8007b16 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a16:	f107 030c 	add.w	r3, r7, #12
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 ff52 	bl	80088c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a24:	f001 ff18 	bl	8009858 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a28:	f000 fcce 	bl	80083c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a2c:	f001 fee6 	bl	80097fc <vPortEnterCritical>
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a36:	b25b      	sxtb	r3, r3
 8007a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a3c:	d103      	bne.n	8007a46 <xQueueSemaphoreTake+0x132>
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4c:	b25b      	sxtb	r3, r3
 8007a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a52:	d103      	bne.n	8007a5c <xQueueSemaphoreTake+0x148>
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a5c:	f001 fefc 	bl	8009858 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a60:	463a      	mov	r2, r7
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 ff41 	bl	80088f0 <xTaskCheckForTimeOut>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d132      	bne.n	8007ada <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a76:	f000 f9ee 	bl	8007e56 <prvIsQueueEmpty>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d026      	beq.n	8007ace <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d109      	bne.n	8007a9c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007a88:	f001 feb8 	bl	80097fc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 f889 	bl	8008ba8 <xTaskPriorityInherit>
 8007a96:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a98:	f001 fede 	bl	8009858 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	3324      	adds	r3, #36	; 0x24
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 fe5d 	bl	8008764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007aaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aac:	f000 f981 	bl	8007db2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ab0:	f000 fc98 	bl	80083e4 <xTaskResumeAll>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f47f af69 	bne.w	800798e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007abc:	4b18      	ldr	r3, [pc, #96]	; (8007b20 <xQueueSemaphoreTake+0x20c>)
 8007abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac2:	601a      	str	r2, [r3, #0]
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	e75f      	b.n	800798e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ad0:	f000 f96f 	bl	8007db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ad4:	f000 fc86 	bl	80083e4 <xTaskResumeAll>
 8007ad8:	e759      	b.n	800798e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007adc:	f000 f969 	bl	8007db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ae0:	f000 fc80 	bl	80083e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ae6:	f000 f9b6 	bl	8007e56 <prvIsQueueEmpty>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f43f af4e 	beq.w	800798e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00d      	beq.n	8007b14 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007af8:	f001 fe80 	bl	80097fc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007afe:	f000 f8b0 	bl	8007c62 <prvGetDisinheritPriorityAfterTimeout>
 8007b02:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 f920 	bl	8008d50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b10:	f001 fea2 	bl	8009858 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3738      	adds	r7, #56	; 0x38
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	e000ed04 	.word	0xe000ed04

08007b24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b08e      	sub	sp, #56	; 0x38
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <xQueueReceiveFromISR+0x2a>
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	623b      	str	r3, [r7, #32]
 8007b4c:	e7fe      	b.n	8007b4c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <xQueueReceiveFromISR+0x38>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <xQueueReceiveFromISR+0x3c>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e000      	b.n	8007b62 <xQueueReceiveFromISR+0x3e>
 8007b60:	2300      	movs	r3, #0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d109      	bne.n	8007b7a <xQueueReceiveFromISR+0x56>
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	61fb      	str	r3, [r7, #28]
 8007b78:	e7fe      	b.n	8007b78 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b7a:	f001 ff1b 	bl	80099b4 <vPortValidateInterruptPriority>
	__asm volatile
 8007b7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	f383 8811 	msr	BASEPRI, r3
 8007b8a:	f3bf 8f6f 	isb	sy
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	61ba      	str	r2, [r7, #24]
 8007b94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d02f      	beq.n	8007c06 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007bb4:	f000 f8d7 	bl	8007d66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	1e5a      	subs	r2, r3, #1
 8007bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc8:	d112      	bne.n	8007bf0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	3310      	adds	r3, #16
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 fe12 	bl	8008800 <xTaskRemoveFromEventList>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00e      	beq.n	8007c00 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00b      	beq.n	8007c00 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	e007      	b.n	8007c00 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	b25a      	sxtb	r2, r3
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c00:	2301      	movs	r3, #1
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
 8007c04:	e001      	b.n	8007c0a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3738      	adds	r7, #56	; 0x38
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b084      	sub	sp, #16
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <vQueueDelete+0x26>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	e7fe      	b.n	8007c42 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f95d 	bl	8007f04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f001 ffad 	bl	8009bb4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	e001      	b.n	8007c84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007c84:	68fb      	ldr	r3, [r7, #12]
	}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b086      	sub	sp, #24
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10d      	bne.n	8007ccc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d14d      	bne.n	8007d54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 ffdb 	bl	8008c78 <xTaskPriorityDisinherit>
 8007cc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
 8007cca:	e043      	b.n	8007d54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d119      	bne.n	8007d06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6858      	ldr	r0, [r3, #4]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	f015 fe47 	bl	801d970 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	441a      	add	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d32b      	bcc.n	8007d54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	605a      	str	r2, [r3, #4]
 8007d04:	e026      	b.n	8007d54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	68d8      	ldr	r0, [r3, #12]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	f015 fe2d 	bl	801d970 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68da      	ldr	r2, [r3, #12]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	425b      	negs	r3, r3
 8007d20:	441a      	add	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d207      	bcs.n	8007d42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	425b      	negs	r3, r3
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d105      	bne.n	8007d54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d5c:	697b      	ldr	r3, [r7, #20]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d018      	beq.n	8007daa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68da      	ldr	r2, [r3, #12]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d80:	441a      	add	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68da      	ldr	r2, [r3, #12]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d303      	bcc.n	8007d9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68d9      	ldr	r1, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da2:	461a      	mov	r2, r3
 8007da4:	6838      	ldr	r0, [r7, #0]
 8007da6:	f015 fde3 	bl	801d970 <memcpy>
	}
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dba:	f001 fd1f 	bl	80097fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dc6:	e011      	b.n	8007dec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d012      	beq.n	8007df6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f000 fd13 	bl	8008800 <xTaskRemoveFromEventList>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007de0:	f000 fde6 	bl	80089b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	dce9      	bgt.n	8007dc8 <prvUnlockQueue+0x16>
 8007df4:	e000      	b.n	8007df8 <prvUnlockQueue+0x46>
					break;
 8007df6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	22ff      	movs	r2, #255	; 0xff
 8007dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e00:	f001 fd2a 	bl	8009858 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e04:	f001 fcfa 	bl	80097fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e10:	e011      	b.n	8007e36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d012      	beq.n	8007e40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fcee 	bl	8008800 <xTaskRemoveFromEventList>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e2a:	f000 fdc1 	bl	80089b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dce9      	bgt.n	8007e12 <prvUnlockQueue+0x60>
 8007e3e:	e000      	b.n	8007e42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	22ff      	movs	r2, #255	; 0xff
 8007e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e4a:	f001 fd05 	bl	8009858 <vPortExitCritical>
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e5e:	f001 fccd 	bl	80097fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e001      	b.n	8007e74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e74:	f001 fcf0 	bl	8009858 <vPortExitCritical>

	return xReturn;
 8007e78:	68fb      	ldr	r3, [r7, #12]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e8a:	f001 fcb7 	bl	80097fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d102      	bne.n	8007ea0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	e001      	b.n	8007ea4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea4:	f001 fcd8 	bl	8009858 <vPortExitCritical>

	return xReturn;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e014      	b.n	8007eee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ec4:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <vQueueAddToRegistry+0x4c>)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10b      	bne.n	8007ee8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ed0:	490b      	ldr	r1, [pc, #44]	; (8007f00 <vQueueAddToRegistry+0x4c>)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007eda:	4a09      	ldr	r2, [pc, #36]	; (8007f00 <vQueueAddToRegistry+0x4c>)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	4413      	add	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ee6:	e005      	b.n	8007ef4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b07      	cmp	r3, #7
 8007ef2:	d9e7      	bls.n	8007ec4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ef4:	bf00      	nop
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	2000a3dc 	.word	0x2000a3dc

08007f04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e016      	b.n	8007f40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f12:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <vQueueUnregisterQueue+0x50>)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4413      	add	r3, r2
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d10b      	bne.n	8007f3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f22:	4a0c      	ldr	r2, [pc, #48]	; (8007f54 <vQueueUnregisterQueue+0x50>)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2100      	movs	r1, #0
 8007f28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f2c:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <vQueueUnregisterQueue+0x50>)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	4413      	add	r3, r2
 8007f34:	2200      	movs	r2, #0
 8007f36:	605a      	str	r2, [r3, #4]
				break;
 8007f38:	e005      	b.n	8007f46 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	d9e5      	bls.n	8007f12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	2000a3dc 	.word	0x2000a3dc

08007f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f68:	f001 fc48 	bl	80097fc <vPortEnterCritical>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f72:	b25b      	sxtb	r3, r3
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d103      	bne.n	8007f82 <vQueueWaitForMessageRestricted+0x2a>
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f88:	b25b      	sxtb	r3, r3
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8e:	d103      	bne.n	8007f98 <vQueueWaitForMessageRestricted+0x40>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f98:	f001 fc5e 	bl	8009858 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d106      	bne.n	8007fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	3324      	adds	r3, #36	; 0x24
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fbfd 	bl	80087ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007fb2:	6978      	ldr	r0, [r7, #20]
 8007fb4:	f7ff fefd 	bl	8007db2 <prvUnlockQueue>
	}
 8007fb8:	bf00      	nop
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b08e      	sub	sp, #56	; 0x38
 8007fc4:	af04      	add	r7, sp, #16
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
 8007fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <xTaskCreateStatic+0x28>
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
 8007fe6:	e7fe      	b.n	8007fe6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d109      	bne.n	8008002 <xTaskCreateStatic+0x42>
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	61fb      	str	r3, [r7, #28]
 8008000:	e7fe      	b.n	8008000 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008002:	2360      	movs	r3, #96	; 0x60
 8008004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	2b60      	cmp	r3, #96	; 0x60
 800800a:	d009      	beq.n	8008020 <xTaskCreateStatic+0x60>
 800800c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	e7fe      	b.n	800801e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008020:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01e      	beq.n	8008066 <xTaskCreateStatic+0xa6>
 8008028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802a:	2b00      	cmp	r3, #0
 800802c:	d01b      	beq.n	8008066 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800802e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008030:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008036:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	2202      	movs	r2, #2
 800803c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008040:	2300      	movs	r3, #0
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	f107 0314 	add.w	r3, r7, #20
 800804c:	9301      	str	r3, [sp, #4]
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 f850 	bl	80080fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800805e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008060:	f000 f8de 	bl	8008220 <prvAddNewTaskToReadyList>
 8008064:	e001      	b.n	800806a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800806a:	697b      	ldr	r3, [r7, #20]
	}
 800806c:	4618      	mov	r0, r3
 800806e:	3728      	adds	r7, #40	; 0x28
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008074:	b580      	push	{r7, lr}
 8008076:	b08c      	sub	sp, #48	; 0x30
 8008078:	af04      	add	r7, sp, #16
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	4613      	mov	r3, r2
 8008082:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4618      	mov	r0, r3
 800808a:	f001 fcd1 	bl	8009a30 <pvPortMalloc>
 800808e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008096:	2060      	movs	r0, #96	; 0x60
 8008098:	f001 fcca 	bl	8009a30 <pvPortMalloc>
 800809c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
 80080aa:	e005      	b.n	80080b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80080ac:	6978      	ldr	r0, [r7, #20]
 80080ae:	f001 fd81 	bl	8009bb4 <vPortFree>
 80080b2:	e001      	b.n	80080b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d017      	beq.n	80080ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080c6:	88fa      	ldrh	r2, [r7, #6]
 80080c8:	2300      	movs	r3, #0
 80080ca:	9303      	str	r3, [sp, #12]
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	9302      	str	r3, [sp, #8]
 80080d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	68f8      	ldr	r0, [r7, #12]
 80080de:	f000 f80e 	bl	80080fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080e2:	69f8      	ldr	r0, [r7, #28]
 80080e4:	f000 f89c 	bl	8008220 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080e8:	2301      	movs	r3, #1
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	e002      	b.n	80080f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080ee:	f04f 33ff 	mov.w	r3, #4294967295
 80080f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080f4:	69bb      	ldr	r3, [r7, #24]
	}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3720      	adds	r7, #32
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b088      	sub	sp, #32
 8008102:	af00      	add	r7, sp, #0
 8008104:	60f8      	str	r0, [r7, #12]
 8008106:	60b9      	str	r1, [r7, #8]
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800810c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800810e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	461a      	mov	r2, r3
 8008116:	21a5      	movs	r1, #165	; 0xa5
 8008118:	f015 fc35 	bl	801d986 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008126:	3b01      	subs	r3, #1
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	f023 0307 	bic.w	r3, r3, #7
 8008134:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	2b00      	cmp	r3, #0
 800813e:	d009      	beq.n	8008154 <prvInitialiseNewTask+0x56>
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	617b      	str	r3, [r7, #20]
 8008152:	e7fe      	b.n	8008152 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01f      	beq.n	800819a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800815a:	2300      	movs	r3, #0
 800815c:	61fb      	str	r3, [r7, #28]
 800815e:	e012      	b.n	8008186 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	7819      	ldrb	r1, [r3, #0]
 8008168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	3334      	adds	r3, #52	; 0x34
 8008170:	460a      	mov	r2, r1
 8008172:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	4413      	add	r3, r2
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	3301      	adds	r3, #1
 8008184:	61fb      	str	r3, [r7, #28]
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	2b0f      	cmp	r3, #15
 800818a:	d9e9      	bls.n	8008160 <prvInitialiseNewTask+0x62>
 800818c:	e000      	b.n	8008190 <prvInitialiseNewTask+0x92>
			{
				break;
 800818e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008198:	e003      	b.n	80081a2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	2b37      	cmp	r3, #55	; 0x37
 80081a6:	d901      	bls.n	80081ac <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80081a8:	2337      	movs	r3, #55	; 0x37
 80081aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	2200      	movs	r2, #0
 80081bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	3304      	adds	r3, #4
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fe7a 	bl	8006ebc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ca:	3318      	adds	r3, #24
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe fe75 	bl	8006ebc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	2200      	movs	r2, #0
 80081ec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	2200      	movs	r2, #0
 80081f2:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	69b8      	ldr	r0, [r7, #24]
 8008202:	f001 f9d3 	bl	80095ac <pxPortInitialiseStack>
 8008206:	4602      	mov	r2, r0
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008216:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008218:	bf00      	nop
 800821a:	3720      	adds	r7, #32
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008228:	f001 fae8 	bl	80097fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800822c:	4b2d      	ldr	r3, [pc, #180]	; (80082e4 <prvAddNewTaskToReadyList+0xc4>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3301      	adds	r3, #1
 8008232:	4a2c      	ldr	r2, [pc, #176]	; (80082e4 <prvAddNewTaskToReadyList+0xc4>)
 8008234:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008236:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <prvAddNewTaskToReadyList+0xc8>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d109      	bne.n	8008252 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800823e:	4a2a      	ldr	r2, [pc, #168]	; (80082e8 <prvAddNewTaskToReadyList+0xc8>)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008244:	4b27      	ldr	r3, [pc, #156]	; (80082e4 <prvAddNewTaskToReadyList+0xc4>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d110      	bne.n	800826e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800824c:	f000 fbd4 	bl	80089f8 <prvInitialiseTaskLists>
 8008250:	e00d      	b.n	800826e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008252:	4b26      	ldr	r3, [pc, #152]	; (80082ec <prvAddNewTaskToReadyList+0xcc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d109      	bne.n	800826e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800825a:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <prvAddNewTaskToReadyList+0xc8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	429a      	cmp	r2, r3
 8008266:	d802      	bhi.n	800826e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008268:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <prvAddNewTaskToReadyList+0xc8>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800826e:	4b20      	ldr	r3, [pc, #128]	; (80082f0 <prvAddNewTaskToReadyList+0xd0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3301      	adds	r3, #1
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <prvAddNewTaskToReadyList+0xd0>)
 8008276:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008278:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <prvAddNewTaskToReadyList+0xd0>)
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008284:	4b1b      	ldr	r3, [pc, #108]	; (80082f4 <prvAddNewTaskToReadyList+0xd4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d903      	bls.n	8008294 <prvAddNewTaskToReadyList+0x74>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008290:	4a18      	ldr	r2, [pc, #96]	; (80082f4 <prvAddNewTaskToReadyList+0xd4>)
 8008292:	6013      	str	r3, [r2, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008298:	4613      	mov	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	4413      	add	r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4a15      	ldr	r2, [pc, #84]	; (80082f8 <prvAddNewTaskToReadyList+0xd8>)
 80082a2:	441a      	add	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3304      	adds	r3, #4
 80082a8:	4619      	mov	r1, r3
 80082aa:	4610      	mov	r0, r2
 80082ac:	f7fe fe13 	bl	8006ed6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082b0:	f001 fad2 	bl	8009858 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082b4:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <prvAddNewTaskToReadyList+0xcc>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00e      	beq.n	80082da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082bc:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <prvAddNewTaskToReadyList+0xc8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d207      	bcs.n	80082da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <prvAddNewTaskToReadyList+0xdc>)
 80082cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	20000d34 	.word	0x20000d34
 80082e8:	20000860 	.word	0x20000860
 80082ec:	20000d40 	.word	0x20000d40
 80082f0:	20000d50 	.word	0x20000d50
 80082f4:	20000d3c 	.word	0x20000d3c
 80082f8:	20000864 	.word	0x20000864
 80082fc:	e000ed04 	.word	0xe000ed04

08008300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b08a      	sub	sp, #40	; 0x28
 8008304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800830e:	463a      	mov	r2, r7
 8008310:	1d39      	adds	r1, r7, #4
 8008312:	f107 0308 	add.w	r3, r7, #8
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fd7c 	bl	8006e14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800831c:	6839      	ldr	r1, [r7, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	9202      	str	r2, [sp, #8]
 8008324:	9301      	str	r3, [sp, #4]
 8008326:	2300      	movs	r3, #0
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	2300      	movs	r3, #0
 800832c:	460a      	mov	r2, r1
 800832e:	4920      	ldr	r1, [pc, #128]	; (80083b0 <vTaskStartScheduler+0xb0>)
 8008330:	4820      	ldr	r0, [pc, #128]	; (80083b4 <vTaskStartScheduler+0xb4>)
 8008332:	f7ff fe45 	bl	8007fc0 <xTaskCreateStatic>
 8008336:	4602      	mov	r2, r0
 8008338:	4b1f      	ldr	r3, [pc, #124]	; (80083b8 <vTaskStartScheduler+0xb8>)
 800833a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800833c:	4b1e      	ldr	r3, [pc, #120]	; (80083b8 <vTaskStartScheduler+0xb8>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008344:	2301      	movs	r3, #1
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	e001      	b.n	800834e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800834a:	2300      	movs	r3, #0
 800834c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d102      	bne.n	800835a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008354:	f000 fde4 	bl	8008f20 <xTimerCreateTimerTask>
 8008358:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d115      	bne.n	800838c <vTaskStartScheduler+0x8c>
 8008360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008364:	f383 8811 	msr	BASEPRI, r3
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	f3bf 8f4f 	dsb	sy
 8008370:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008372:	4b12      	ldr	r3, [pc, #72]	; (80083bc <vTaskStartScheduler+0xbc>)
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800837a:	4b11      	ldr	r3, [pc, #68]	; (80083c0 <vTaskStartScheduler+0xc0>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008380:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <vTaskStartScheduler+0xc4>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008386:	f001 f99b 	bl	80096c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800838a:	e00d      	b.n	80083a8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008392:	d109      	bne.n	80083a8 <vTaskStartScheduler+0xa8>
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	e7fe      	b.n	80083a6 <vTaskStartScheduler+0xa6>
}
 80083a8:	bf00      	nop
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	0801e8a4 	.word	0x0801e8a4
 80083b4:	080089c9 	.word	0x080089c9
 80083b8:	20000d58 	.word	0x20000d58
 80083bc:	20000d54 	.word	0x20000d54
 80083c0:	20000d40 	.word	0x20000d40
 80083c4:	20000d38 	.word	0x20000d38

080083c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <vTaskSuspendAll+0x18>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	4a03      	ldr	r2, [pc, #12]	; (80083e0 <vTaskSuspendAll+0x18>)
 80083d4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80083d6:	bf00      	nop
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20000d5c 	.word	0x20000d5c

080083e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083f2:	4b41      	ldr	r3, [pc, #260]	; (80084f8 <xTaskResumeAll+0x114>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <xTaskResumeAll+0x2a>
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	e7fe      	b.n	800840c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800840e:	f001 f9f5 	bl	80097fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008412:	4b39      	ldr	r3, [pc, #228]	; (80084f8 <xTaskResumeAll+0x114>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3b01      	subs	r3, #1
 8008418:	4a37      	ldr	r2, [pc, #220]	; (80084f8 <xTaskResumeAll+0x114>)
 800841a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800841c:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <xTaskResumeAll+0x114>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d162      	bne.n	80084ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008424:	4b35      	ldr	r3, [pc, #212]	; (80084fc <xTaskResumeAll+0x118>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d05e      	beq.n	80084ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800842c:	e02f      	b.n	800848e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842e:	4b34      	ldr	r3, [pc, #208]	; (8008500 <xTaskResumeAll+0x11c>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3318      	adds	r3, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fda8 	bl	8006f90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	3304      	adds	r3, #4
 8008444:	4618      	mov	r0, r3
 8008446:	f7fe fda3 	bl	8006f90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844e:	4b2d      	ldr	r3, [pc, #180]	; (8008504 <xTaskResumeAll+0x120>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d903      	bls.n	800845e <xTaskResumeAll+0x7a>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845a:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <xTaskResumeAll+0x120>)
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4a27      	ldr	r2, [pc, #156]	; (8008508 <xTaskResumeAll+0x124>)
 800846c:	441a      	add	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe fd2e 	bl	8006ed6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847e:	4b23      	ldr	r3, [pc, #140]	; (800850c <xTaskResumeAll+0x128>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	429a      	cmp	r2, r3
 8008486:	d302      	bcc.n	800848e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008488:	4b21      	ldr	r3, [pc, #132]	; (8008510 <xTaskResumeAll+0x12c>)
 800848a:	2201      	movs	r2, #1
 800848c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800848e:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <xTaskResumeAll+0x11c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1cb      	bne.n	800842e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800849c:	f000 fb46 	bl	8008b2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80084a0:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <xTaskResumeAll+0x130>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d010      	beq.n	80084ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084ac:	f000 f846 	bl	800853c <xTaskIncrementTick>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80084b6:	4b16      	ldr	r3, [pc, #88]	; (8008510 <xTaskResumeAll+0x12c>)
 80084b8:	2201      	movs	r2, #1
 80084ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3b01      	subs	r3, #1
 80084c0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f1      	bne.n	80084ac <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80084c8:	4b12      	ldr	r3, [pc, #72]	; (8008514 <xTaskResumeAll+0x130>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084ce:	4b10      	ldr	r3, [pc, #64]	; (8008510 <xTaskResumeAll+0x12c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084d6:	2301      	movs	r3, #1
 80084d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <xTaskResumeAll+0x134>)
 80084dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ea:	f001 f9b5 	bl	8009858 <vPortExitCritical>

	return xAlreadyYielded;
 80084ee:	68bb      	ldr	r3, [r7, #8]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	20000d5c 	.word	0x20000d5c
 80084fc:	20000d34 	.word	0x20000d34
 8008500:	20000cf4 	.word	0x20000cf4
 8008504:	20000d3c 	.word	0x20000d3c
 8008508:	20000864 	.word	0x20000864
 800850c:	20000860 	.word	0x20000860
 8008510:	20000d48 	.word	0x20000d48
 8008514:	20000d44 	.word	0x20000d44
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008522:	4b05      	ldr	r3, [pc, #20]	; (8008538 <xTaskGetTickCount+0x1c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008528:	687b      	ldr	r3, [r7, #4]
}
 800852a:	4618      	mov	r0, r3
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20000d38 	.word	0x20000d38

0800853c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008546:	4b4e      	ldr	r3, [pc, #312]	; (8008680 <xTaskIncrementTick+0x144>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	f040 8088 	bne.w	8008660 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008550:	4b4c      	ldr	r3, [pc, #304]	; (8008684 <xTaskIncrementTick+0x148>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008558:	4a4a      	ldr	r2, [pc, #296]	; (8008684 <xTaskIncrementTick+0x148>)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d11f      	bne.n	80085a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008564:	4b48      	ldr	r3, [pc, #288]	; (8008688 <xTaskIncrementTick+0x14c>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d009      	beq.n	8008582 <xTaskIncrementTick+0x46>
 800856e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008572:	f383 8811 	msr	BASEPRI, r3
 8008576:	f3bf 8f6f 	isb	sy
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	e7fe      	b.n	8008580 <xTaskIncrementTick+0x44>
 8008582:	4b41      	ldr	r3, [pc, #260]	; (8008688 <xTaskIncrementTick+0x14c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	4b40      	ldr	r3, [pc, #256]	; (800868c <xTaskIncrementTick+0x150>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a3e      	ldr	r2, [pc, #248]	; (8008688 <xTaskIncrementTick+0x14c>)
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4a3e      	ldr	r2, [pc, #248]	; (800868c <xTaskIncrementTick+0x150>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4b3e      	ldr	r3, [pc, #248]	; (8008690 <xTaskIncrementTick+0x154>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3301      	adds	r3, #1
 800859c:	4a3c      	ldr	r2, [pc, #240]	; (8008690 <xTaskIncrementTick+0x154>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	f000 fac4 	bl	8008b2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085a4:	4b3b      	ldr	r3, [pc, #236]	; (8008694 <xTaskIncrementTick+0x158>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d349      	bcc.n	8008642 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ae:	4b36      	ldr	r3, [pc, #216]	; (8008688 <xTaskIncrementTick+0x14c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	4b36      	ldr	r3, [pc, #216]	; (8008694 <xTaskIncrementTick+0x158>)
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295
 80085be:	601a      	str	r2, [r3, #0]
					break;
 80085c0:	e03f      	b.n	8008642 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c2:	4b31      	ldr	r3, [pc, #196]	; (8008688 <xTaskIncrementTick+0x14c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d203      	bcs.n	80085e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085da:	4a2e      	ldr	r2, [pc, #184]	; (8008694 <xTaskIncrementTick+0x158>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085e0:	e02f      	b.n	8008642 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe fcd2 	bl	8006f90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	3318      	adds	r3, #24
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe fcc9 	bl	8006f90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008602:	4b25      	ldr	r3, [pc, #148]	; (8008698 <xTaskIncrementTick+0x15c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <xTaskIncrementTick+0xd6>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	4a22      	ldr	r2, [pc, #136]	; (8008698 <xTaskIncrementTick+0x15c>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a1f      	ldr	r2, [pc, #124]	; (800869c <xTaskIncrementTick+0x160>)
 8008620:	441a      	add	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7fe fc54 	bl	8006ed6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008632:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <xTaskIncrementTick+0x164>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008638:	429a      	cmp	r2, r3
 800863a:	d3b8      	bcc.n	80085ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008640:	e7b5      	b.n	80085ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008642:	4b17      	ldr	r3, [pc, #92]	; (80086a0 <xTaskIncrementTick+0x164>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008648:	4914      	ldr	r1, [pc, #80]	; (800869c <xTaskIncrementTick+0x160>)
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d907      	bls.n	800866a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	e004      	b.n	800866a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008660:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <xTaskIncrementTick+0x168>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	4a0f      	ldr	r2, [pc, #60]	; (80086a4 <xTaskIncrementTick+0x168>)
 8008668:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800866a:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <xTaskIncrementTick+0x16c>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008672:	2301      	movs	r3, #1
 8008674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008676:	697b      	ldr	r3, [r7, #20]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20000d5c 	.word	0x20000d5c
 8008684:	20000d38 	.word	0x20000d38
 8008688:	20000cec 	.word	0x20000cec
 800868c:	20000cf0 	.word	0x20000cf0
 8008690:	20000d4c 	.word	0x20000d4c
 8008694:	20000d54 	.word	0x20000d54
 8008698:	20000d3c 	.word	0x20000d3c
 800869c:	20000864 	.word	0x20000864
 80086a0:	20000860 	.word	0x20000860
 80086a4:	20000d44 	.word	0x20000d44
 80086a8:	20000d48 	.word	0x20000d48

080086ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086b2:	4b27      	ldr	r3, [pc, #156]	; (8008750 <vTaskSwitchContext+0xa4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086ba:	4b26      	ldr	r3, [pc, #152]	; (8008754 <vTaskSwitchContext+0xa8>)
 80086bc:	2201      	movs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086c0:	e040      	b.n	8008744 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80086c2:	4b24      	ldr	r3, [pc, #144]	; (8008754 <vTaskSwitchContext+0xa8>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c8:	4b23      	ldr	r3, [pc, #140]	; (8008758 <vTaskSwitchContext+0xac>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	e00f      	b.n	80086f0 <vTaskSwitchContext+0x44>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <vTaskSwitchContext+0x3e>
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	607b      	str	r3, [r7, #4]
 80086e8:	e7fe      	b.n	80086e8 <vTaskSwitchContext+0x3c>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	491a      	ldr	r1, [pc, #104]	; (800875c <vTaskSwitchContext+0xb0>)
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0e5      	beq.n	80086d0 <vTaskSwitchContext+0x24>
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4a13      	ldr	r2, [pc, #76]	; (800875c <vTaskSwitchContext+0xb0>)
 8008710:	4413      	add	r3, r2
 8008712:	60bb      	str	r3, [r7, #8]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	605a      	str	r2, [r3, #4]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	3308      	adds	r3, #8
 8008726:	429a      	cmp	r2, r3
 8008728:	d104      	bne.n	8008734 <vTaskSwitchContext+0x88>
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	605a      	str	r2, [r3, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	4a09      	ldr	r2, [pc, #36]	; (8008760 <vTaskSwitchContext+0xb4>)
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4a06      	ldr	r2, [pc, #24]	; (8008758 <vTaskSwitchContext+0xac>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6013      	str	r3, [r2, #0]
}
 8008744:	bf00      	nop
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	20000d5c 	.word	0x20000d5c
 8008754:	20000d48 	.word	0x20000d48
 8008758:	20000d3c 	.word	0x20000d3c
 800875c:	20000864 	.word	0x20000864
 8008760:	20000860 	.word	0x20000860

08008764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <vTaskPlaceOnEventList+0x24>
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	e7fe      	b.n	8008786 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <vTaskPlaceOnEventList+0x44>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3318      	adds	r3, #24
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7fe fbc4 	bl	8006f1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008796:	2101      	movs	r1, #1
 8008798:	6838      	ldr	r0, [r7, #0]
 800879a:	f000 fb6d 	bl	8008e78 <prvAddCurrentTaskToDelayedList>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000860 	.word	0x20000860

080087ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d109      	bne.n	80087d2 <vTaskPlaceOnEventListRestricted+0x26>
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	617b      	str	r3, [r7, #20]
 80087d0:	e7fe      	b.n	80087d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087d2:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <vTaskPlaceOnEventListRestricted+0x50>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3318      	adds	r3, #24
 80087d8:	4619      	mov	r1, r3
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7fe fb7b 	bl	8006ed6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80087e6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087ec:	6879      	ldr	r1, [r7, #4]
 80087ee:	68b8      	ldr	r0, [r7, #8]
 80087f0:	f000 fb42 	bl	8008e78 <prvAddCurrentTaskToDelayedList>
	}
 80087f4:	bf00      	nop
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000860 	.word	0x20000860

08008800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d109      	bne.n	800882a <xTaskRemoveFromEventList+0x2a>
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	e7fe      	b.n	8008828 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3318      	adds	r3, #24
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fbae 	bl	8006f90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008834:	4b1d      	ldr	r3, [pc, #116]	; (80088ac <xTaskRemoveFromEventList+0xac>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11d      	bne.n	8008878 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	3304      	adds	r3, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fba5 	bl	8006f90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	4b19      	ldr	r3, [pc, #100]	; (80088b0 <xTaskRemoveFromEventList+0xb0>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d903      	bls.n	800885a <xTaskRemoveFromEventList+0x5a>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	4a16      	ldr	r2, [pc, #88]	; (80088b0 <xTaskRemoveFromEventList+0xb0>)
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800885e:	4613      	mov	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <xTaskRemoveFromEventList+0xb4>)
 8008868:	441a      	add	r2, r3
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	3304      	adds	r3, #4
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fe fb30 	bl	8006ed6 <vListInsertEnd>
 8008876:	e005      	b.n	8008884 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	3318      	adds	r3, #24
 800887c:	4619      	mov	r1, r3
 800887e:	480e      	ldr	r0, [pc, #56]	; (80088b8 <xTaskRemoveFromEventList+0xb8>)
 8008880:	f7fe fb29 	bl	8006ed6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <xTaskRemoveFromEventList+0xbc>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d905      	bls.n	800889e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008892:	2301      	movs	r3, #1
 8008894:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008896:	4b0a      	ldr	r3, [pc, #40]	; (80088c0 <xTaskRemoveFromEventList+0xc0>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e001      	b.n	80088a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088a2:	697b      	ldr	r3, [r7, #20]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3718      	adds	r7, #24
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20000d5c 	.word	0x20000d5c
 80088b0:	20000d3c 	.word	0x20000d3c
 80088b4:	20000864 	.word	0x20000864
 80088b8:	20000cf4 	.word	0x20000cf4
 80088bc:	20000860 	.word	0x20000860
 80088c0:	20000d48 	.word	0x20000d48

080088c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088cc:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <vTaskInternalSetTimeOutState+0x24>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088d4:	4b05      	ldr	r3, [pc, #20]	; (80088ec <vTaskInternalSetTimeOutState+0x28>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	605a      	str	r2, [r3, #4]
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	20000d4c 	.word	0x20000d4c
 80088ec:	20000d38 	.word	0x20000d38

080088f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <xTaskCheckForTimeOut+0x24>
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	e7fe      	b.n	8008912 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <xTaskCheckForTimeOut+0x3e>
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	60fb      	str	r3, [r7, #12]
 800892c:	e7fe      	b.n	800892c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800892e:	f000 ff65 	bl	80097fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008932:	4b1d      	ldr	r3, [pc, #116]	; (80089a8 <xTaskCheckForTimeOut+0xb8>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894a:	d102      	bne.n	8008952 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]
 8008950:	e023      	b.n	800899a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	4b15      	ldr	r3, [pc, #84]	; (80089ac <xTaskCheckForTimeOut+0xbc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d007      	beq.n	800896e <xTaskCheckForTimeOut+0x7e>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	69ba      	ldr	r2, [r7, #24]
 8008964:	429a      	cmp	r2, r3
 8008966:	d302      	bcc.n	800896e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008968:	2301      	movs	r3, #1
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	e015      	b.n	800899a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	429a      	cmp	r2, r3
 8008976:	d20b      	bcs.n	8008990 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	1ad2      	subs	r2, r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff ff9d 	bl	80088c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800898a:	2300      	movs	r3, #0
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	e004      	b.n	800899a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800899a:	f000 ff5d 	bl	8009858 <vPortExitCritical>

	return xReturn;
 800899e:	69fb      	ldr	r3, [r7, #28]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3720      	adds	r7, #32
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	20000d38 	.word	0x20000d38
 80089ac:	20000d4c 	.word	0x20000d4c

080089b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089b4:	4b03      	ldr	r3, [pc, #12]	; (80089c4 <vTaskMissedYield+0x14>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
}
 80089ba:	bf00      	nop
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	20000d48 	.word	0x20000d48

080089c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089d0:	f000 f852 	bl	8008a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089d4:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <prvIdleTask+0x28>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d9f9      	bls.n	80089d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089dc:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <prvIdleTask+0x2c>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089ec:	e7f0      	b.n	80089d0 <prvIdleTask+0x8>
 80089ee:	bf00      	nop
 80089f0:	20000864 	.word	0x20000864
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089fe:	2300      	movs	r3, #0
 8008a00:	607b      	str	r3, [r7, #4]
 8008a02:	e00c      	b.n	8008a1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4a12      	ldr	r2, [pc, #72]	; (8008a58 <prvInitialiseTaskLists+0x60>)
 8008a10:	4413      	add	r3, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe fa32 	bl	8006e7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	607b      	str	r3, [r7, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2b37      	cmp	r3, #55	; 0x37
 8008a22:	d9ef      	bls.n	8008a04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a24:	480d      	ldr	r0, [pc, #52]	; (8008a5c <prvInitialiseTaskLists+0x64>)
 8008a26:	f7fe fa29 	bl	8006e7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a2a:	480d      	ldr	r0, [pc, #52]	; (8008a60 <prvInitialiseTaskLists+0x68>)
 8008a2c:	f7fe fa26 	bl	8006e7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a30:	480c      	ldr	r0, [pc, #48]	; (8008a64 <prvInitialiseTaskLists+0x6c>)
 8008a32:	f7fe fa23 	bl	8006e7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a36:	480c      	ldr	r0, [pc, #48]	; (8008a68 <prvInitialiseTaskLists+0x70>)
 8008a38:	f7fe fa20 	bl	8006e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a3c:	480b      	ldr	r0, [pc, #44]	; (8008a6c <prvInitialiseTaskLists+0x74>)
 8008a3e:	f7fe fa1d 	bl	8006e7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a42:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <prvInitialiseTaskLists+0x78>)
 8008a44:	4a05      	ldr	r2, [pc, #20]	; (8008a5c <prvInitialiseTaskLists+0x64>)
 8008a46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a48:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <prvInitialiseTaskLists+0x7c>)
 8008a4a:	4a05      	ldr	r2, [pc, #20]	; (8008a60 <prvInitialiseTaskLists+0x68>)
 8008a4c:	601a      	str	r2, [r3, #0]
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000864 	.word	0x20000864
 8008a5c:	20000cc4 	.word	0x20000cc4
 8008a60:	20000cd8 	.word	0x20000cd8
 8008a64:	20000cf4 	.word	0x20000cf4
 8008a68:	20000d08 	.word	0x20000d08
 8008a6c:	20000d20 	.word	0x20000d20
 8008a70:	20000cec 	.word	0x20000cec
 8008a74:	20000cf0 	.word	0x20000cf0

08008a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a7e:	e019      	b.n	8008ab4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a80:	f000 febc 	bl	80097fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <prvCheckTasksWaitingTermination+0x4c>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7fe fa7d 	bl	8006f90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <prvCheckTasksWaitingTermination+0x50>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4a0a      	ldr	r2, [pc, #40]	; (8008ac8 <prvCheckTasksWaitingTermination+0x50>)
 8008a9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <prvCheckTasksWaitingTermination+0x54>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	4a09      	ldr	r2, [pc, #36]	; (8008acc <prvCheckTasksWaitingTermination+0x54>)
 8008aa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008aaa:	f000 fed5 	bl	8009858 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f80e 	bl	8008ad0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <prvCheckTasksWaitingTermination+0x54>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e1      	bne.n	8008a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000d08 	.word	0x20000d08
 8008ac8:	20000d34 	.word	0x20000d34
 8008acc:	20000d1c 	.word	0x20000d1c

08008ad0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d108      	bne.n	8008af4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f001 f864 	bl	8009bb4 <vPortFree>
				vPortFree( pxTCB );
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f001 f861 	bl	8009bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008af2:	e017      	b.n	8008b24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d103      	bne.n	8008b06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f858 	bl	8009bb4 <vPortFree>
	}
 8008b04:	e00e      	b.n	8008b24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d009      	beq.n	8008b24 <prvDeleteTCB+0x54>
 8008b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	e7fe      	b.n	8008b22 <prvDeleteTCB+0x52>
	}
 8008b24:	bf00      	nop
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b32:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <prvResetNextTaskUnblockTime+0x38>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d104      	bne.n	8008b46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <prvResetNextTaskUnblockTime+0x3c>)
 8008b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b44:	e008      	b.n	8008b58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b46:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <prvResetNextTaskUnblockTime+0x38>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	4a04      	ldr	r2, [pc, #16]	; (8008b68 <prvResetNextTaskUnblockTime+0x3c>)
 8008b56:	6013      	str	r3, [r2, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20000cec 	.word	0x20000cec
 8008b68:	20000d54 	.word	0x20000d54

08008b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b72:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <xTaskGetSchedulerState+0x34>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d102      	bne.n	8008b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	607b      	str	r3, [r7, #4]
 8008b7e:	e008      	b.n	8008b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b80:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <xTaskGetSchedulerState+0x38>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d102      	bne.n	8008b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	607b      	str	r3, [r7, #4]
 8008b8c:	e001      	b.n	8008b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b92:	687b      	ldr	r3, [r7, #4]
	}
 8008b94:	4618      	mov	r0, r3
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20000d40 	.word	0x20000d40
 8008ba4:	20000d5c 	.word	0x20000d5c

08008ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d051      	beq.n	8008c62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	4b2a      	ldr	r3, [pc, #168]	; (8008c6c <xTaskPriorityInherit+0xc4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d241      	bcs.n	8008c50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	db06      	blt.n	8008be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bd4:	4b25      	ldr	r3, [pc, #148]	; (8008c6c <xTaskPriorityInherit+0xc4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	6959      	ldr	r1, [r3, #20]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4a1f      	ldr	r2, [pc, #124]	; (8008c70 <xTaskPriorityInherit+0xc8>)
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4299      	cmp	r1, r3
 8008bf8:	d122      	bne.n	8008c40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe f9c6 	bl	8006f90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c04:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <xTaskPriorityInherit+0xc4>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c12:	4b18      	ldr	r3, [pc, #96]	; (8008c74 <xTaskPriorityInherit+0xcc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d903      	bls.n	8008c22 <xTaskPriorityInherit+0x7a>
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	4a15      	ldr	r2, [pc, #84]	; (8008c74 <xTaskPriorityInherit+0xcc>)
 8008c20:	6013      	str	r3, [r2, #0]
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4a10      	ldr	r2, [pc, #64]	; (8008c70 <xTaskPriorityInherit+0xc8>)
 8008c30:	441a      	add	r2, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	3304      	adds	r3, #4
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f7fe f94c 	bl	8006ed6 <vListInsertEnd>
 8008c3e:	e004      	b.n	8008c4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <xTaskPriorityInherit+0xc4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
 8008c4e:	e008      	b.n	8008c62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <xTaskPriorityInherit+0xc4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d201      	bcs.n	8008c62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c62:	68fb      	ldr	r3, [r7, #12]
	}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000860 	.word	0x20000860
 8008c70:	20000864 	.word	0x20000864
 8008c74:	20000d3c 	.word	0x20000d3c

08008c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d054      	beq.n	8008d38 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c8e:	4b2d      	ldr	r3, [pc, #180]	; (8008d44 <xTaskPriorityDisinherit+0xcc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d009      	beq.n	8008cac <xTaskPriorityDisinherit+0x34>
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	e7fe      	b.n	8008caa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <xTaskPriorityDisinherit+0x50>
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	e7fe      	b.n	8008cc6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d02c      	beq.n	8008d38 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d128      	bne.n	8008d38 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe f950 	bl	8006f90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <xTaskPriorityDisinherit+0xd0>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d903      	bls.n	8008d18 <xTaskPriorityDisinherit+0xa0>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <xTaskPriorityDisinherit+0xd0>)
 8008d16:	6013      	str	r3, [r2, #0]
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4a09      	ldr	r2, [pc, #36]	; (8008d4c <xTaskPriorityDisinherit+0xd4>)
 8008d26:	441a      	add	r2, r3
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	3304      	adds	r3, #4
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe f8d1 	bl	8006ed6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d34:	2301      	movs	r3, #1
 8008d36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d38:	697b      	ldr	r3, [r7, #20]
	}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000860 	.word	0x20000860
 8008d48:	20000d3c 	.word	0x20000d3c
 8008d4c:	20000864 	.word	0x20000864

08008d50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d068      	beq.n	8008e3a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d109      	bne.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e7fe      	b.n	8008d82 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d902      	bls.n	8008d94 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	61fb      	str	r3, [r7, #28]
 8008d92:	e002      	b.n	8008d9a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d04a      	beq.n	8008e3a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d145      	bne.n	8008e3a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dae:	4b25      	ldr	r3, [pc, #148]	; (8008e44 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d109      	bne.n	8008dcc <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	60bb      	str	r3, [r7, #8]
 8008dca:	e7fe      	b.n	8008dca <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	db04      	blt.n	8008dea <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	6959      	ldr	r1, [r3, #20]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	4a13      	ldr	r2, [pc, #76]	; (8008e48 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008dfa:	4413      	add	r3, r2
 8008dfc:	4299      	cmp	r1, r3
 8008dfe:	d11c      	bne.n	8008e3a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe f8c3 	bl	8006f90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d903      	bls.n	8008e1e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1a:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4a07      	ldr	r2, [pc, #28]	; (8008e48 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008e2c:	441a      	add	r2, r3
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	3304      	adds	r3, #4
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fe f84e 	bl	8006ed6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e3a:	bf00      	nop
 8008e3c:	3720      	adds	r7, #32
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000860 	.word	0x20000860
 8008e48:	20000864 	.word	0x20000864
 8008e4c:	20000d3c 	.word	0x20000d3c

08008e50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e50:	b480      	push	{r7}
 8008e52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d004      	beq.n	8008e66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e5c:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e62:	3201      	adds	r2, #1
 8008e64:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e66:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e68:	681b      	ldr	r3, [r3, #0]
	}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20000860 	.word	0x20000860

08008e78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e82:	4b21      	ldr	r3, [pc, #132]	; (8008f08 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e88:	4b20      	ldr	r3, [pc, #128]	; (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe f87e 	bl	8006f90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e9a:	d10a      	bne.n	8008eb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d007      	beq.n	8008eb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	; (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4819      	ldr	r0, [pc, #100]	; (8008f10 <prvAddCurrentTaskToDelayedList+0x98>)
 8008eac:	f7fe f813 	bl	8006ed6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008eb0:	e026      	b.n	8008f00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eba:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d209      	bcs.n	8008ede <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eca:	4b12      	ldr	r3, [pc, #72]	; (8008f14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b0f      	ldr	r3, [pc, #60]	; (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4610      	mov	r0, r2
 8008ed8:	f7fe f821 	bl	8006f1e <vListInsert>
}
 8008edc:	e010      	b.n	8008f00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ede:	4b0e      	ldr	r3, [pc, #56]	; (8008f18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	4b0a      	ldr	r3, [pc, #40]	; (8008f0c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4610      	mov	r0, r2
 8008eec:	f7fe f817 	bl	8006f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d202      	bcs.n	8008f00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008efa:	4a08      	ldr	r2, [pc, #32]	; (8008f1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	6013      	str	r3, [r2, #0]
}
 8008f00:	bf00      	nop
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000d38 	.word	0x20000d38
 8008f0c:	20000860 	.word	0x20000860
 8008f10:	20000d20 	.word	0x20000d20
 8008f14:	20000cf0 	.word	0x20000cf0
 8008f18:	20000cec 	.word	0x20000cec
 8008f1c:	20000d54 	.word	0x20000d54

08008f20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	; 0x28
 8008f24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f2a:	f000 faff 	bl	800952c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f2e:	4b1c      	ldr	r3, [pc, #112]	; (8008fa0 <xTimerCreateTimerTask+0x80>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d021      	beq.n	8008f7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f3e:	1d3a      	adds	r2, r7, #4
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	f107 030c 	add.w	r3, r7, #12
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fd ff7d 	bl	8006e48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	9202      	str	r2, [sp, #8]
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	2302      	movs	r3, #2
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	460a      	mov	r2, r1
 8008f60:	4910      	ldr	r1, [pc, #64]	; (8008fa4 <xTimerCreateTimerTask+0x84>)
 8008f62:	4811      	ldr	r0, [pc, #68]	; (8008fa8 <xTimerCreateTimerTask+0x88>)
 8008f64:	f7ff f82c 	bl	8007fc0 <xTaskCreateStatic>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	4b10      	ldr	r3, [pc, #64]	; (8008fac <xTimerCreateTimerTask+0x8c>)
 8008f6c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f6e:	4b0f      	ldr	r3, [pc, #60]	; (8008fac <xTimerCreateTimerTask+0x8c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f76:	2301      	movs	r3, #1
 8008f78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <xTimerCreateTimerTask+0x74>
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	613b      	str	r3, [r7, #16]
 8008f92:	e7fe      	b.n	8008f92 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008f94:	697b      	ldr	r3, [r7, #20]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000d90 	.word	0x20000d90
 8008fa4:	0801e8ac 	.word	0x0801e8ac
 8008fa8:	080090e1 	.word	0x080090e1
 8008fac:	20000d94 	.word	0x20000d94

08008fb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
 8008fbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <xTimerGenericCommand+0x2c>
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	623b      	str	r3, [r7, #32]
 8008fda:	e7fe      	b.n	8008fda <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fdc:	4b19      	ldr	r3, [pc, #100]	; (8009044 <xTimerGenericCommand+0x94>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d02a      	beq.n	800903a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	dc18      	bgt.n	8009028 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ff6:	f7ff fdb9 	bl	8008b6c <xTaskGetSchedulerState>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d109      	bne.n	8009014 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009000:	4b10      	ldr	r3, [pc, #64]	; (8009044 <xTimerGenericCommand+0x94>)
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	f107 0110 	add.w	r1, r7, #16
 8009008:	2300      	movs	r3, #0
 800900a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900c:	f7fe f98e 	bl	800732c <xQueueGenericSend>
 8009010:	6278      	str	r0, [r7, #36]	; 0x24
 8009012:	e012      	b.n	800903a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009014:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <xTimerGenericCommand+0x94>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	f107 0110 	add.w	r1, r7, #16
 800901c:	2300      	movs	r3, #0
 800901e:	2200      	movs	r2, #0
 8009020:	f7fe f984 	bl	800732c <xQueueGenericSend>
 8009024:	6278      	str	r0, [r7, #36]	; 0x24
 8009026:	e008      	b.n	800903a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <xTimerGenericCommand+0x94>)
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	f107 0110 	add.w	r1, r7, #16
 8009030:	2300      	movs	r3, #0
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	f7fe fa74 	bl	8007520 <xQueueGenericSendFromISR>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800903c:	4618      	mov	r0, r3
 800903e:	3728      	adds	r7, #40	; 0x28
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000d90 	.word	0x20000d90

08009048 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009052:	4b22      	ldr	r3, [pc, #136]	; (80090dc <prvProcessExpiredTimer+0x94>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	68db      	ldr	r3, [r3, #12]
 800905a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3304      	adds	r3, #4
 8009060:	4618      	mov	r0, r3
 8009062:	f7fd ff95 	bl	8006f90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d021      	beq.n	80090b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	18d1      	adds	r1, r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	6978      	ldr	r0, [r7, #20]
 8009082:	f000 f8d1 	bl	8009228 <prvInsertTimerInActiveList>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01e      	beq.n	80090ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800908c:	2300      	movs	r3, #0
 800908e:	9300      	str	r3, [sp, #0]
 8009090:	2300      	movs	r3, #0
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	2100      	movs	r1, #0
 8009096:	6978      	ldr	r0, [r7, #20]
 8009098:	f7ff ff8a 	bl	8008fb0 <xTimerGenericCommand>
 800909c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d112      	bne.n	80090ca <prvProcessExpiredTimer+0x82>
 80090a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	e7fe      	b.n	80090b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090be:	f023 0301 	bic.w	r3, r3, #1
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	6978      	ldr	r0, [r7, #20]
 80090d0:	4798      	blx	r3
}
 80090d2:	bf00      	nop
 80090d4:	3718      	adds	r7, #24
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	20000d88 	.word	0x20000d88

080090e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090e8:	f107 0308 	add.w	r3, r7, #8
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f857 	bl	80091a0 <prvGetNextExpireTime>
 80090f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4619      	mov	r1, r3
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f803 	bl	8009104 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090fe:	f000 f8d5 	bl	80092ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009102:	e7f1      	b.n	80090e8 <prvTimerTask+0x8>

08009104 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800910e:	f7ff f95b 	bl	80083c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009112:	f107 0308 	add.w	r3, r7, #8
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f866 	bl	80091e8 <prvSampleTimeNow>
 800911c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d130      	bne.n	8009186 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10a      	bne.n	8009140 <prvProcessTimerOrBlockTask+0x3c>
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	429a      	cmp	r2, r3
 8009130:	d806      	bhi.n	8009140 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009132:	f7ff f957 	bl	80083e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff ff85 	bl	8009048 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800913e:	e024      	b.n	800918a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d008      	beq.n	8009158 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009146:	4b13      	ldr	r3, [pc, #76]	; (8009194 <prvProcessTimerOrBlockTask+0x90>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <prvProcessTimerOrBlockTask+0x50>
 8009150:	2301      	movs	r3, #1
 8009152:	e000      	b.n	8009156 <prvProcessTimerOrBlockTask+0x52>
 8009154:	2300      	movs	r3, #0
 8009156:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <prvProcessTimerOrBlockTask+0x94>)
 800915a:	6818      	ldr	r0, [r3, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4619      	mov	r1, r3
 8009166:	f7fe fef7 	bl	8007f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800916a:	f7ff f93b 	bl	80083e4 <xTaskResumeAll>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <prvProcessTimerOrBlockTask+0x98>)
 8009176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	f3bf 8f6f 	isb	sy
}
 8009184:	e001      	b.n	800918a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009186:	f7ff f92d 	bl	80083e4 <xTaskResumeAll>
}
 800918a:	bf00      	nop
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20000d8c 	.word	0x20000d8c
 8009198:	20000d90 	.word	0x20000d90
 800919c:	e000ed04 	.word	0xe000ed04

080091a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091a8:	4b0e      	ldr	r3, [pc, #56]	; (80091e4 <prvGetNextExpireTime+0x44>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <prvGetNextExpireTime+0x16>
 80091b2:	2201      	movs	r2, #1
 80091b4:	e000      	b.n	80091b8 <prvGetNextExpireTime+0x18>
 80091b6:	2200      	movs	r2, #0
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d105      	bne.n	80091d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091c4:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <prvGetNextExpireTime+0x44>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	e001      	b.n	80091d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091d4:	68fb      	ldr	r3, [r7, #12]
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	20000d88 	.word	0x20000d88

080091e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091f0:	f7ff f994 	bl	800851c <xTaskGetTickCount>
 80091f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <prvSampleTimeNow+0x3c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d205      	bcs.n	800920c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009200:	f000 f930 	bl	8009464 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	601a      	str	r2, [r3, #0]
 800920a:	e002      	b.n	8009212 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009212:	4a04      	ldr	r2, [pc, #16]	; (8009224 <prvSampleTimeNow+0x3c>)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009218:	68fb      	ldr	r3, [r7, #12]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000d98 	.word	0x20000d98

08009228 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d812      	bhi.n	8009274 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	1ad2      	subs	r2, r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	699b      	ldr	r3, [r3, #24]
 8009258:	429a      	cmp	r2, r3
 800925a:	d302      	bcc.n	8009262 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800925c:	2301      	movs	r3, #1
 800925e:	617b      	str	r3, [r7, #20]
 8009260:	e01b      	b.n	800929a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009262:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <prvInsertTimerInActiveList+0x7c>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	3304      	adds	r3, #4
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f7fd fe56 	bl	8006f1e <vListInsert>
 8009272:	e012      	b.n	800929a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d206      	bcs.n	800928a <prvInsertTimerInActiveList+0x62>
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d302      	bcc.n	800928a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009284:	2301      	movs	r3, #1
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	e007      	b.n	800929a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <prvInsertTimerInActiveList+0x80>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3304      	adds	r3, #4
 8009292:	4619      	mov	r1, r3
 8009294:	4610      	mov	r0, r2
 8009296:	f7fd fe42 	bl	8006f1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800929a:	697b      	ldr	r3, [r7, #20]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20000d8c 	.word	0x20000d8c
 80092a8:	20000d88 	.word	0x20000d88

080092ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08e      	sub	sp, #56	; 0x38
 80092b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092b2:	e0c6      	b.n	8009442 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	da17      	bge.n	80092ea <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80092ba:	1d3b      	adds	r3, r7, #4
 80092bc:	3304      	adds	r3, #4
 80092be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <prvProcessReceivedCommands+0x2e>
 80092c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	61fb      	str	r3, [r7, #28]
 80092d8:	e7fe      	b.n	80092d8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e0:	6850      	ldr	r0, [r2, #4]
 80092e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092e4:	6892      	ldr	r2, [r2, #8]
 80092e6:	4611      	mov	r1, r2
 80092e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f2c0 80a7 	blt.w	8009440 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d004      	beq.n	8009308 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009300:	3304      	adds	r3, #4
 8009302:	4618      	mov	r0, r3
 8009304:	f7fd fe44 	bl	8006f90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009308:	463b      	mov	r3, r7
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff ff6c 	bl	80091e8 <prvSampleTimeNow>
 8009310:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b09      	cmp	r3, #9
 8009316:	f200 8094 	bhi.w	8009442 <prvProcessReceivedCommands+0x196>
 800931a:	a201      	add	r2, pc, #4	; (adr r2, 8009320 <prvProcessReceivedCommands+0x74>)
 800931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009320:	08009349 	.word	0x08009349
 8009324:	08009349 	.word	0x08009349
 8009328:	08009349 	.word	0x08009349
 800932c:	080093bb 	.word	0x080093bb
 8009330:	080093cf 	.word	0x080093cf
 8009334:	08009417 	.word	0x08009417
 8009338:	08009349 	.word	0x08009349
 800933c:	08009349 	.word	0x08009349
 8009340:	080093bb 	.word	0x080093bb
 8009344:	080093cf 	.word	0x080093cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934e:	f043 0301 	orr.w	r3, r3, #1
 8009352:	b2da      	uxtb	r2, r3
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	18d1      	adds	r1, r2, r3
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009368:	f7ff ff5e 	bl	8009228 <prvInsertTimerInActiveList>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d067      	beq.n	8009442 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009378:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009380:	f003 0304 	and.w	r3, r3, #4
 8009384:	2b00      	cmp	r3, #0
 8009386:	d05c      	beq.n	8009442 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	441a      	add	r2, r3
 8009390:	2300      	movs	r3, #0
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	2300      	movs	r3, #0
 8009396:	2100      	movs	r1, #0
 8009398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800939a:	f7ff fe09 	bl	8008fb0 <xTimerGenericCommand>
 800939e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d14d      	bne.n	8009442 <prvProcessReceivedCommands+0x196>
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	61bb      	str	r3, [r7, #24]
 80093b8:	e7fe      	b.n	80093b8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093c0:	f023 0301 	bic.w	r3, r3, #1
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093cc:	e039      	b.n	8009442 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093d4:	f043 0301 	orr.w	r3, r3, #1
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	699b      	ldr	r3, [r3, #24]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <prvProcessReceivedCommands+0x156>
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e7fe      	b.n	8009400 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	18d1      	adds	r1, r2, r3
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800940e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009410:	f7ff ff0a 	bl	8009228 <prvInsertTimerInActiveList>
					break;
 8009414:	e015      	b.n	8009442 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8009424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009426:	f000 fbc5 	bl	8009bb4 <vPortFree>
 800942a:	e00a      	b.n	8009442 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009432:	f023 0301 	bic.w	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800943e:	e000      	b.n	8009442 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009440:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <prvProcessReceivedCommands+0x1b4>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	1d39      	adds	r1, r7, #4
 8009448:	2200      	movs	r2, #0
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe f986 	bl	800775c <xQueueReceive>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	f47f af2e 	bne.w	80092b4 <prvProcessReceivedCommands+0x8>
	}
}
 8009458:	bf00      	nop
 800945a:	3730      	adds	r7, #48	; 0x30
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20000d90 	.word	0x20000d90

08009464 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800946a:	e047      	b.n	80094fc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <prvSwitchTimerLists+0xc0>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009476:	4b2b      	ldr	r3, [pc, #172]	; (8009524 <prvSwitchTimerLists+0xc0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	3304      	adds	r3, #4
 8009484:	4618      	mov	r0, r3
 8009486:	f7fd fd83 	bl	8006f90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d02d      	beq.n	80094fc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	699b      	ldr	r3, [r3, #24]
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	4413      	add	r3, r2
 80094a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d90e      	bls.n	80094d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094be:	4b19      	ldr	r3, [pc, #100]	; (8009524 <prvSwitchTimerLists+0xc0>)
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3304      	adds	r3, #4
 80094c6:	4619      	mov	r1, r3
 80094c8:	4610      	mov	r0, r2
 80094ca:	f7fd fd28 	bl	8006f1e <vListInsert>
 80094ce:	e015      	b.n	80094fc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094d0:	2300      	movs	r3, #0
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	2100      	movs	r1, #0
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff fd68 	bl	8008fb0 <xTimerGenericCommand>
 80094e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d109      	bne.n	80094fc <prvSwitchTimerLists+0x98>
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	603b      	str	r3, [r7, #0]
 80094fa:	e7fe      	b.n	80094fa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094fc:	4b09      	ldr	r3, [pc, #36]	; (8009524 <prvSwitchTimerLists+0xc0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1b2      	bne.n	800946c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009506:	4b07      	ldr	r3, [pc, #28]	; (8009524 <prvSwitchTimerLists+0xc0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800950c:	4b06      	ldr	r3, [pc, #24]	; (8009528 <prvSwitchTimerLists+0xc4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a04      	ldr	r2, [pc, #16]	; (8009524 <prvSwitchTimerLists+0xc0>)
 8009512:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009514:	4a04      	ldr	r2, [pc, #16]	; (8009528 <prvSwitchTimerLists+0xc4>)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	6013      	str	r3, [r2, #0]
}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20000d88 	.word	0x20000d88
 8009528:	20000d8c 	.word	0x20000d8c

0800952c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009532:	f000 f963 	bl	80097fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009536:	4b15      	ldr	r3, [pc, #84]	; (800958c <prvCheckForValidListAndQueue+0x60>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d120      	bne.n	8009580 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800953e:	4814      	ldr	r0, [pc, #80]	; (8009590 <prvCheckForValidListAndQueue+0x64>)
 8009540:	f7fd fc9c 	bl	8006e7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009544:	4813      	ldr	r0, [pc, #76]	; (8009594 <prvCheckForValidListAndQueue+0x68>)
 8009546:	f7fd fc99 	bl	8006e7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800954a:	4b13      	ldr	r3, [pc, #76]	; (8009598 <prvCheckForValidListAndQueue+0x6c>)
 800954c:	4a10      	ldr	r2, [pc, #64]	; (8009590 <prvCheckForValidListAndQueue+0x64>)
 800954e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009550:	4b12      	ldr	r3, [pc, #72]	; (800959c <prvCheckForValidListAndQueue+0x70>)
 8009552:	4a10      	ldr	r2, [pc, #64]	; (8009594 <prvCheckForValidListAndQueue+0x68>)
 8009554:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009556:	2300      	movs	r3, #0
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <prvCheckForValidListAndQueue+0x74>)
 800955c:	4a11      	ldr	r2, [pc, #68]	; (80095a4 <prvCheckForValidListAndQueue+0x78>)
 800955e:	2110      	movs	r1, #16
 8009560:	200a      	movs	r0, #10
 8009562:	f7fd fda7 	bl	80070b4 <xQueueGenericCreateStatic>
 8009566:	4602      	mov	r2, r0
 8009568:	4b08      	ldr	r3, [pc, #32]	; (800958c <prvCheckForValidListAndQueue+0x60>)
 800956a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800956c:	4b07      	ldr	r3, [pc, #28]	; (800958c <prvCheckForValidListAndQueue+0x60>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d005      	beq.n	8009580 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009574:	4b05      	ldr	r3, [pc, #20]	; (800958c <prvCheckForValidListAndQueue+0x60>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	490b      	ldr	r1, [pc, #44]	; (80095a8 <prvCheckForValidListAndQueue+0x7c>)
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fc9a 	bl	8007eb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009580:	f000 f96a 	bl	8009858 <vPortExitCritical>
}
 8009584:	bf00      	nop
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000d90 	.word	0x20000d90
 8009590:	20000d60 	.word	0x20000d60
 8009594:	20000d74 	.word	0x20000d74
 8009598:	20000d88 	.word	0x20000d88
 800959c:	20000d8c 	.word	0x20000d8c
 80095a0:	20000e3c 	.word	0x20000e3c
 80095a4:	20000d9c 	.word	0x20000d9c
 80095a8:	0801e8b4 	.word	0x0801e8b4

080095ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	3b04      	subs	r3, #4
 80095bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f023 0201 	bic.w	r2, r3, #1
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3b04      	subs	r3, #4
 80095da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095dc:	4a0c      	ldr	r2, [pc, #48]	; (8009610 <pxPortInitialiseStack+0x64>)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3b14      	subs	r3, #20
 80095e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b04      	subs	r3, #4
 80095f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f06f 0202 	mvn.w	r2, #2
 80095fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3b20      	subs	r3, #32
 8009600:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009602:	68fb      	ldr	r3, [r7, #12]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	08009615 	.word	0x08009615

08009614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800961e:	4b11      	ldr	r3, [pc, #68]	; (8009664 <prvTaskExitError+0x50>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009626:	d009      	beq.n	800963c <prvTaskExitError+0x28>
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	e7fe      	b.n	800963a <prvTaskExitError+0x26>
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800964e:	bf00      	nop
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0fc      	beq.n	8009650 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009656:	bf00      	nop
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000078 	.word	0x20000078
	...

08009670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <pxCurrentTCBConst2>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f380 8809 	msr	PSP, r0
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	4770      	bx	lr
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst2>:
 8009690:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009698:	4808      	ldr	r0, [pc, #32]	; (80096bc <prvPortStartFirstTask+0x24>)
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	6800      	ldr	r0, [r0, #0]
 800969e:	f380 8808 	msr	MSP, r0
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8814 	msr	CONTROL, r0
 80096aa:	b662      	cpsie	i
 80096ac:	b661      	cpsie	f
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	df00      	svc	0
 80096b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ba:	bf00      	nop
 80096bc:	e000ed08 	.word	0xe000ed08

080096c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096c6:	4b44      	ldr	r3, [pc, #272]	; (80097d8 <xPortStartScheduler+0x118>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a44      	ldr	r2, [pc, #272]	; (80097dc <xPortStartScheduler+0x11c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d109      	bne.n	80096e4 <xPortStartScheduler+0x24>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	e7fe      	b.n	80096e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096e4:	4b3c      	ldr	r3, [pc, #240]	; (80097d8 <xPortStartScheduler+0x118>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a3d      	ldr	r2, [pc, #244]	; (80097e0 <xPortStartScheduler+0x120>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d109      	bne.n	8009702 <xPortStartScheduler+0x42>
 80096ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e7fe      	b.n	8009700 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009702:	4b38      	ldr	r3, [pc, #224]	; (80097e4 <xPortStartScheduler+0x124>)
 8009704:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	b2db      	uxtb	r3, r3
 800970c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	22ff      	movs	r2, #255	; 0xff
 8009712:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009724:	b2da      	uxtb	r2, r3
 8009726:	4b30      	ldr	r3, [pc, #192]	; (80097e8 <xPortStartScheduler+0x128>)
 8009728:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800972a:	4b30      	ldr	r3, [pc, #192]	; (80097ec <xPortStartScheduler+0x12c>)
 800972c:	2207      	movs	r2, #7
 800972e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009730:	e009      	b.n	8009746 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009732:	4b2e      	ldr	r3, [pc, #184]	; (80097ec <xPortStartScheduler+0x12c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3b01      	subs	r3, #1
 8009738:	4a2c      	ldr	r2, [pc, #176]	; (80097ec <xPortStartScheduler+0x12c>)
 800973a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	005b      	lsls	r3, r3, #1
 8009742:	b2db      	uxtb	r3, r3
 8009744:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800974e:	2b80      	cmp	r3, #128	; 0x80
 8009750:	d0ef      	beq.n	8009732 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009752:	4b26      	ldr	r3, [pc, #152]	; (80097ec <xPortStartScheduler+0x12c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f1c3 0307 	rsb	r3, r3, #7
 800975a:	2b04      	cmp	r3, #4
 800975c:	d009      	beq.n	8009772 <xPortStartScheduler+0xb2>
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	60bb      	str	r3, [r7, #8]
 8009770:	e7fe      	b.n	8009770 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009772:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <xPortStartScheduler+0x12c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	021b      	lsls	r3, r3, #8
 8009778:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <xPortStartScheduler+0x12c>)
 800977a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800977c:	4b1b      	ldr	r3, [pc, #108]	; (80097ec <xPortStartScheduler+0x12c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009784:	4a19      	ldr	r2, [pc, #100]	; (80097ec <xPortStartScheduler+0x12c>)
 8009786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	b2da      	uxtb	r2, r3
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009790:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <xPortStartScheduler+0x130>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a16      	ldr	r2, [pc, #88]	; (80097f0 <xPortStartScheduler+0x130>)
 8009796:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800979a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800979c:	4b14      	ldr	r3, [pc, #80]	; (80097f0 <xPortStartScheduler+0x130>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a13      	ldr	r2, [pc, #76]	; (80097f0 <xPortStartScheduler+0x130>)
 80097a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80097a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097a8:	f000 f8d6 	bl	8009958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097ac:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <xPortStartScheduler+0x134>)
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097b2:	f000 f8f5 	bl	80099a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097b6:	4b10      	ldr	r3, [pc, #64]	; (80097f8 <xPortStartScheduler+0x138>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a0f      	ldr	r2, [pc, #60]	; (80097f8 <xPortStartScheduler+0x138>)
 80097bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80097c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097c2:	f7ff ff69 	bl	8009698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097c6:	f7fe ff71 	bl	80086ac <vTaskSwitchContext>
	prvTaskExitError();
 80097ca:	f7ff ff23 	bl	8009614 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3718      	adds	r7, #24
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	e000ed00 	.word	0xe000ed00
 80097dc:	410fc271 	.word	0x410fc271
 80097e0:	410fc270 	.word	0x410fc270
 80097e4:	e000e400 	.word	0xe000e400
 80097e8:	20000e8c 	.word	0x20000e8c
 80097ec:	20000e90 	.word	0x20000e90
 80097f0:	e000ed20 	.word	0xe000ed20
 80097f4:	20000078 	.word	0x20000078
 80097f8:	e000ef34 	.word	0xe000ef34

080097fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <vPortEnterCritical+0x54>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3301      	adds	r3, #1
 800981a:	4a0d      	ldr	r2, [pc, #52]	; (8009850 <vPortEnterCritical+0x54>)
 800981c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <vPortEnterCritical+0x54>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d10e      	bne.n	8009844 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <vPortEnterCritical+0x58>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d009      	beq.n	8009844 <vPortEnterCritical+0x48>
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	603b      	str	r3, [r7, #0]
 8009842:	e7fe      	b.n	8009842 <vPortEnterCritical+0x46>
	}
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	20000078 	.word	0x20000078
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <vPortExitCritical+0x4c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d109      	bne.n	800987a <vPortExitCritical+0x22>
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	e7fe      	b.n	8009878 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <vPortExitCritical+0x4c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3b01      	subs	r3, #1
 8009880:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <vPortExitCritical+0x4c>)
 8009882:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009884:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <vPortExitCritical+0x4c>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d104      	bne.n	8009896 <vPortExitCritical+0x3e>
 800988c:	2300      	movs	r3, #0
 800988e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009896:	bf00      	nop
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000078 	.word	0x20000078
	...

080098b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098b0:	f3ef 8009 	mrs	r0, PSP
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4b15      	ldr	r3, [pc, #84]	; (8009910 <pxCurrentTCBConst>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	f01e 0f10 	tst.w	lr, #16
 80098c0:	bf08      	it	eq
 80098c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	6010      	str	r0, [r2, #0]
 80098cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098d4:	f380 8811 	msr	BASEPRI, r0
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f7fe fee4 	bl	80086ac <vTaskSwitchContext>
 80098e4:	f04f 0000 	mov.w	r0, #0
 80098e8:	f380 8811 	msr	BASEPRI, r0
 80098ec:	bc09      	pop	{r0, r3}
 80098ee:	6819      	ldr	r1, [r3, #0]
 80098f0:	6808      	ldr	r0, [r1, #0]
 80098f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f6:	f01e 0f10 	tst.w	lr, #16
 80098fa:	bf08      	it	eq
 80098fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009900:	f380 8809 	msr	PSP, r0
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	f3af 8000 	nop.w

08009910 <pxCurrentTCBConst>:
 8009910:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop

08009918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009930:	f7fe fe04 	bl	800853c <xTaskIncrementTick>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d003      	beq.n	8009942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800993a:	4b06      	ldr	r3, [pc, #24]	; (8009954 <SysTick_Handler+0x3c>)
 800993c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009940:	601a      	str	r2, [r3, #0]
 8009942:	2300      	movs	r3, #0
 8009944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800994c:	bf00      	nop
 800994e:	3708      	adds	r7, #8
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	e000ed04 	.word	0xe000ed04

08009958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800995c:	4b0b      	ldr	r3, [pc, #44]	; (800998c <vPortSetupTimerInterrupt+0x34>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009962:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <vPortSetupTimerInterrupt+0x38>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009968:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <vPortSetupTimerInterrupt+0x3c>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a0a      	ldr	r2, [pc, #40]	; (8009998 <vPortSetupTimerInterrupt+0x40>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	099b      	lsrs	r3, r3, #6
 8009974:	4a09      	ldr	r2, [pc, #36]	; (800999c <vPortSetupTimerInterrupt+0x44>)
 8009976:	3b01      	subs	r3, #1
 8009978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800997a:	4b04      	ldr	r3, [pc, #16]	; (800998c <vPortSetupTimerInterrupt+0x34>)
 800997c:	2207      	movs	r2, #7
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bf00      	nop
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	e000e010 	.word	0xe000e010
 8009990:	e000e018 	.word	0xe000e018
 8009994:	2000000c 	.word	0x2000000c
 8009998:	10624dd3 	.word	0x10624dd3
 800999c:	e000e014 	.word	0xe000e014

080099a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80099b0 <vPortEnableVFP+0x10>
 80099a4:	6801      	ldr	r1, [r0, #0]
 80099a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80099aa:	6001      	str	r1, [r0, #0]
 80099ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099ae:	bf00      	nop
 80099b0:	e000ed88 	.word	0xe000ed88

080099b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ba:	f3ef 8305 	mrs	r3, IPSR
 80099be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b0f      	cmp	r3, #15
 80099c4:	d913      	bls.n	80099ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099c6:	4a16      	ldr	r2, [pc, #88]	; (8009a20 <vPortValidateInterruptPriority+0x6c>)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4413      	add	r3, r2
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099d0:	4b14      	ldr	r3, [pc, #80]	; (8009a24 <vPortValidateInterruptPriority+0x70>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	7afa      	ldrb	r2, [r7, #11]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d209      	bcs.n	80099ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	607b      	str	r3, [r7, #4]
 80099ec:	e7fe      	b.n	80099ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099ee:	4b0e      	ldr	r3, [pc, #56]	; (8009a28 <vPortValidateInterruptPriority+0x74>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099f6:	4b0d      	ldr	r3, [pc, #52]	; (8009a2c <vPortValidateInterruptPriority+0x78>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d909      	bls.n	8009a12 <vPortValidateInterruptPriority+0x5e>
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	e7fe      	b.n	8009a10 <vPortValidateInterruptPriority+0x5c>
	}
 8009a12:	bf00      	nop
 8009a14:	3714      	adds	r7, #20
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	e000e3f0 	.word	0xe000e3f0
 8009a24:	20000e8c 	.word	0x20000e8c
 8009a28:	e000ed0c 	.word	0xe000ed0c
 8009a2c:	20000e90 	.word	0x20000e90

08009a30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a3c:	f7fe fcc4 	bl	80083c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a40:	4b57      	ldr	r3, [pc, #348]	; (8009ba0 <pvPortMalloc+0x170>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d101      	bne.n	8009a4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a48:	f000 f90c 	bl	8009c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a4c:	4b55      	ldr	r3, [pc, #340]	; (8009ba4 <pvPortMalloc+0x174>)
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4013      	ands	r3, r2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f040 808c 	bne.w	8009b72 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d01c      	beq.n	8009a9a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009a60:	2208      	movs	r2, #8
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4413      	add	r3, r2
 8009a66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d013      	beq.n	8009a9a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f023 0307 	bic.w	r3, r3, #7
 8009a78:	3308      	adds	r3, #8
 8009a7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <pvPortMalloc+0x6a>
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e7fe      	b.n	8009a98 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d068      	beq.n	8009b72 <pvPortMalloc+0x142>
 8009aa0:	4b41      	ldr	r3, [pc, #260]	; (8009ba8 <pvPortMalloc+0x178>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d863      	bhi.n	8009b72 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aaa:	4b40      	ldr	r3, [pc, #256]	; (8009bac <pvPortMalloc+0x17c>)
 8009aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aae:	4b3f      	ldr	r3, [pc, #252]	; (8009bac <pvPortMalloc+0x17c>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ab4:	e004      	b.n	8009ac0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d903      	bls.n	8009ad2 <pvPortMalloc+0xa2>
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1f1      	bne.n	8009ab6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ad2:	4b33      	ldr	r3, [pc, #204]	; (8009ba0 <pvPortMalloc+0x170>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d04a      	beq.n	8009b72 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2208      	movs	r2, #8
 8009ae2:	4413      	add	r3, r2
 8009ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	685a      	ldr	r2, [r3, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	1ad2      	subs	r2, r2, r3
 8009af6:	2308      	movs	r3, #8
 8009af8:	005b      	lsls	r3, r3, #1
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d91e      	bls.n	8009b3c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <pvPortMalloc+0xf4>
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	e7fe      	b.n	8009b22 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	685a      	ldr	r2, [r3, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	1ad2      	subs	r2, r2, r3
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b36:	69b8      	ldr	r0, [r7, #24]
 8009b38:	f000 f8f6 	bl	8009d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	1ad3      	subs	r3, r2, r3
 8009b46:	4a18      	ldr	r2, [pc, #96]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b4a:	4b17      	ldr	r3, [pc, #92]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	4b18      	ldr	r3, [pc, #96]	; (8009bb0 <pvPortMalloc+0x180>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d203      	bcs.n	8009b5e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b56:	4b14      	ldr	r3, [pc, #80]	; (8009ba8 <pvPortMalloc+0x178>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <pvPortMalloc+0x180>)
 8009b5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	4b10      	ldr	r3, [pc, #64]	; (8009ba4 <pvPortMalloc+0x174>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	431a      	orrs	r2, r3
 8009b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	2200      	movs	r2, #0
 8009b70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b72:	f7fe fc37 	bl	80083e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	f003 0307 	and.w	r3, r3, #7
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d009      	beq.n	8009b94 <pvPortMalloc+0x164>
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	60fb      	str	r3, [r7, #12]
 8009b92:	e7fe      	b.n	8009b92 <pvPortMalloc+0x162>
	return pvReturn;
 8009b94:	69fb      	ldr	r3, [r7, #28]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20008e9c 	.word	0x20008e9c
 8009ba4:	20008ea8 	.word	0x20008ea8
 8009ba8:	20008ea0 	.word	0x20008ea0
 8009bac:	20008e94 	.word	0x20008e94
 8009bb0:	20008ea4 	.word	0x20008ea4

08009bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d046      	beq.n	8009c54 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bc6:	2308      	movs	r3, #8
 8009bc8:	425b      	negs	r3, r3
 8009bca:	697a      	ldr	r2, [r7, #20]
 8009bcc:	4413      	add	r3, r2
 8009bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	4b20      	ldr	r3, [pc, #128]	; (8009c5c <vPortFree+0xa8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <vPortFree+0x42>
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	e7fe      	b.n	8009bf4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d009      	beq.n	8009c12 <vPortFree+0x5e>
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60bb      	str	r3, [r7, #8]
 8009c10:	e7fe      	b.n	8009c10 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <vPortFree+0xa8>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d019      	beq.n	8009c54 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d115      	bne.n	8009c54 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <vPortFree+0xa8>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	43db      	mvns	r3, r3
 8009c32:	401a      	ands	r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c38:	f7fe fbc6 	bl	80083c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <vPortFree+0xac>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4413      	add	r3, r2
 8009c46:	4a06      	ldr	r2, [pc, #24]	; (8009c60 <vPortFree+0xac>)
 8009c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c4a:	6938      	ldr	r0, [r7, #16]
 8009c4c:	f000 f86c 	bl	8009d28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c50:	f7fe fbc8 	bl	80083e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c54:	bf00      	nop
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20008ea8 	.word	0x20008ea8
 8009c60:	20008ea0 	.word	0x20008ea0

08009c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <prvHeapInit+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00c      	beq.n	8009c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3307      	adds	r3, #7
 8009c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <prvHeapInit+0xac>)
 8009c94:	4413      	add	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c9c:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <prvHeapInit+0xb0>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <prvHeapInit+0xb0>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cb0:	2208      	movs	r2, #8
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <prvHeapInit+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvHeapInit+0xb4>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <prvHeapInit+0xb8>)
 8009cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <prvHeapInit+0xbc>)
 8009cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <prvHeapInit+0xc0>)
 8009cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000e94 	.word	0x20000e94
 8009d14:	20008e94 	.word	0x20008e94
 8009d18:	20008e9c 	.word	0x20008e9c
 8009d1c:	20008ea4 	.word	0x20008ea4
 8009d20:	20008ea0 	.word	0x20008ea0
 8009d24:	20008ea8 	.word	0x20008ea8

08009d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d30:	4b28      	ldr	r3, [pc, #160]	; (8009dd4 <prvInsertBlockIntoFreeList+0xac>)
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e002      	b.n	8009d3c <prvInsertBlockIntoFreeList+0x14>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d8f7      	bhi.n	8009d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4413      	add	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d108      	bne.n	8009d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d118      	bne.n	8009db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d00d      	beq.n	8009da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	441a      	add	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	e008      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e003      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d002      	beq.n	8009dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20008e94 	.word	0x20008e94
 8009dd8:	20008e9c 	.word	0x20008e9c

08009ddc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_init();
 8009de0:	f003 fb6a 	bl	800d4b8 <touchgfx_init>
}
 8009de4:	bf00      	nop
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_init in C++ domain
  touchgfx_taskEntry();
 8009df0:	f003 fb8c 	bl	800d50c <touchgfx_taskEntry>
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
    {
 8009e04:	4a04      	ldr	r2, [pc, #16]	; (8009e18 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	601a      	str	r2, [r3, #0]
    }
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	0801ede4 	.word	0x0801ede4

08009e1c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
    }
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f7ff ffe9 	bl	8009dfc <_ZN8touchgfx12FontProviderD1Ev>
 8009e2a:	2104      	movs	r1, #4
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f013 fcf5 	bl	801d81c <_ZdlPvj>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8009e48:	887b      	ldrh	r3, [r7, #2]
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d008      	beq.n	8009e60 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d00b      	beq.n	8009e6a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d10e      	bne.n	8009e74 <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8009e56:	f001 fdc5 	bl	800b9e4 <_ZN17TypedTextDatabase8getFontsEv>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	e00a      	b.n	8009e76 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8009e60:	f001 fdc0 	bl	800b9e4 <_ZN17TypedTextDatabase8getFontsEv>
 8009e64:	4603      	mov	r3, r0
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	e005      	b.n	8009e76 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8009e6a:	f001 fdbb 	bl	800b9e4 <_ZN17TypedTextDatabase8getFontsEv>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	e000      	b.n	8009e76 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 8009e74:	2300      	movs	r3, #0
    }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	4a05      	ldr	r2, [pc, #20]	; (8009ea0 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff ffb3 	bl	8009dfc <_ZN8touchgfx12FontProviderD1Ev>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	0801edd0 	.word	0x0801edd0

08009ea4 <_ZN23ApplicationFontProviderD0Ev>:
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7ff ffe7 	bl	8009e80 <_ZN23ApplicationFontProviderD1Ev>
 8009eb2:	2104      	movs	r1, #4
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f013 fcb1 	bl	801d81c <_ZdlPvj>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	4a04      	ldr	r2, [pc, #16]	; (8009ee0 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	080206d8 	.word	0x080206d8

08009ee4 <_ZN8touchgfx4FontD0Ev>:
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f7ff ffe9 	bl	8009ec4 <_ZN8touchgfx4FontD1Ev>
 8009ef2:	2110      	movs	r1, #16
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f013 fc91 	bl	801d81c <_ZdlPvj>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4618      	mov	r0, r3
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	681c      	ldr	r4, [r3, #0]
 8009f20:	f107 030f 	add.w	r3, r7, #15
 8009f24:	f107 0210 	add.w	r2, r7, #16
 8009f28:	8879      	ldrh	r1, [r7, #2]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	47a0      	blx	r4
 8009f2e:	6178      	str	r0, [r7, #20]
        return glyph;
 8009f30:	697b      	ldr	r3, [r7, #20]
    }
 8009f32:	4618      	mov	r0, r3
 8009f34:	371c      	adds	r7, #28
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd90      	pop	{r4, r7, pc}

08009f3a <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	895b      	ldrh	r3, [r3, #10]
    }
 8009f46:	4618      	mov	r0, r3
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	899b      	ldrh	r3, [r3, #12]
    }
 8009f5e:	4618      	mov	r0, r3
 8009f60:	370c      	adds	r7, #12
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8009f6a:	b480      	push	{r7}
 8009f6c:	b083      	sub	sp, #12
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	889b      	ldrh	r3, [r3, #4]
    }
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	889a      	ldrh	r2, [r3, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	799b      	ldrb	r3, [r3, #6]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	4413      	add	r3, r2
 8009f96:	b29b      	uxth	r3, r3
    }
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	79db      	ldrb	r3, [r3, #7]
 8009fb0:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009fb4:	b2db      	uxtb	r3, r3
    }
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
    {
        return a4;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	79db      	ldrb	r3, [r3, #7]
 8009fce:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009fd2:	b2db      	uxtb	r3, r3
    }
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	4a05      	ldr	r2, [pc, #20]	; (800a000 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff ff67 	bl	8009ec4 <_ZN8touchgfx4FontD1Ev>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	08020790 	.word	0x08020790

0800a004 <_ZN8touchgfx9ConstFontD0Ev>:
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f7ff ffe7 	bl	8009fe0 <_ZN8touchgfx9ConstFontD1Ev>
 800a012:	2118      	movs	r1, #24
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f013 fc01 	bl	801d81c <_ZdlPvj>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <_ZN8touchgfx13GeneratedFontD1Ev>:
 *        An GeneratedFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class GeneratedFont : public ConstFont
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	4a05      	ldr	r2, [pc, #20]	; (800a044 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff ffd3 	bl	8009fe0 <_ZN8touchgfx9ConstFontD1Ev>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	0801ee28 	.word	0x0801ee28

0800a048 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff ffe7 	bl	800a024 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a056:	2124      	movs	r1, #36	; 0x24
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f013 fbdf 	bl	801d81c <_ZdlPvj>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4618      	mov	r0, r3
 800a062:	3708      	adds	r7, #8
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f82d 	bl	800a0d0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800a076:	4b08      	ldr	r3, [pc, #32]	; (800a098 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	4b08      	ldr	r3, [pc, #32]	; (800a09c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800a07c:	6819      	ldr	r1, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	440b      	add	r3, r1
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	681b      	ldr	r3, [r3, #0]
    }
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20009f80 	.word	0x20009f80
 800a09c:	20009f78 	.word	0x20009f78

0800a0a0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f811 	bl	800a0d0 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800a0ae:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	005b      	lsls	r3, r3, #1
 800a0b8:	4413      	add	r3, r2
 800a0ba:	785b      	ldrb	r3, [r3, #1]
 800a0bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a0c0:	b2db      	uxtb	r3, r3
    }
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20009f78 	.word	0x20009f78

0800a0d0 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800a0d8:	4b0c      	ldr	r3, [pc, #48]	; (800a10c <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d105      	bne.n	800a0ec <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800a0e0:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800a0e2:	4a0c      	ldr	r2, [pc, #48]	; (800a114 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800a0e4:	21de      	movs	r1, #222	; 0xde
 800a0e6:	480c      	ldr	r0, [pc, #48]	; (800a118 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800a0e8:	f013 fbc4 	bl	801d874 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	881a      	ldrh	r2, [r3, #0]
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d305      	bcc.n	800a104 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800a0f8:	4b09      	ldr	r3, [pc, #36]	; (800a120 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800a0fa:	4a06      	ldr	r2, [pc, #24]	; (800a114 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800a0fc:	21df      	movs	r1, #223	; 0xdf
 800a0fe:	4806      	ldr	r0, [pc, #24]	; (800a118 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800a100:	f013 fbb8 	bl	801d874 <__assert_func>
    }
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20009f78 	.word	0x20009f78
 800a110:	0801e8bc 	.word	0x0801e8bc
 800a114:	0801edf0 	.word	0x0801edf0
 800a118:	0801e900 	.word	0x0801e900
 800a11c:	20009f7c 	.word	0x20009f7c
 800a120:	0801e944 	.word	0x0801e944

0800a124 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7b5b      	ldrb	r3, [r3, #13]
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b21b      	sxth	r3, r3
 800a134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a138:	b21a      	sxth	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	7adb      	ldrb	r3, [r3, #11]
 800a13e:	b21b      	sxth	r3, r3
 800a140:	4313      	orrs	r3, r2
 800a142:	b21b      	sxth	r3, r3
 800a144:	b29b      	uxth	r3, r3
    }
 800a146:	4618      	mov	r0, r3
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a1b      	ldr	r3, [r3, #32]
    }
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
	...

0800a16c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08c      	sub	sp, #48	; 0x30
 800a170:	af08      	add	r7, sp, #32
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4611      	mov	r1, r2
 800a178:	461a      	mov	r2, r3
 800a17a:	460b      	mov	r3, r1
 800a17c:	80fb      	strh	r3, [r7, #6]
 800a17e:	4613      	mov	r3, r2
 800a180:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	88b9      	ldrh	r1, [r7, #4]
 800a186:	88fa      	ldrh	r2, [r7, #6]
 800a188:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a18a:	9306      	str	r3, [sp, #24]
 800a18c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800a18e:	9305      	str	r3, [sp, #20]
 800a190:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a194:	9304      	str	r3, [sp, #16]
 800a196:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a19a:	9303      	str	r3, [sp, #12]
 800a19c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	7f3b      	ldrb	r3, [r7, #28]
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	7e3b      	ldrb	r3, [r7, #24]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	f006 fdc7 	bl	8010d40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800a1b2:	4a08      	ldr	r2, [pc, #32]	; (800a1d4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1bc:	619a      	str	r2, [r3, #24]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c2:	61da      	str	r2, [r3, #28]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1c8:	621a      	str	r2, [r3, #32]
{
}
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	0801ee28 	.word	0x0801ee28

0800a1d8 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	699b      	ldr	r3, [r3, #24]
 800a1e6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	889b      	ldrh	r3, [r3, #4]
 800a1ec:	0adb      	lsrs	r3, r3, #11
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	68fa      	ldr	r2, [r7, #12]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4413      	add	r3, r2
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3714      	adds	r7, #20
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	460b      	mov	r3, r1
 800a214:	607a      	str	r2, [r7, #4]
 800a216:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7b1b      	ldrb	r3, [r3, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800a226:	2300      	movs	r3, #0
 800a228:	e023      	b.n	800a272 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff ff7a 	bl	800a124 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 800a230:	4603      	mov	r3, r0
 800a232:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	82fb      	strh	r3, [r7, #22]
 800a238:	8afa      	ldrh	r2, [r7, #22]
 800a23a:	8abb      	ldrh	r3, [r7, #20]
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	7b09      	ldrb	r1, [r1, #12]
 800a240:	440b      	add	r3, r1
 800a242:	429a      	cmp	r2, r3
 800a244:	da14      	bge.n	800a270 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	69da      	ldr	r2, [r3, #28]
 800a24a:	8afb      	ldrh	r3, [r7, #22]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	897a      	ldrh	r2, [r7, #10]
 800a254:	429a      	cmp	r2, r3
 800a256:	d107      	bne.n	800a268 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	69da      	ldr	r2, [r3, #28]
 800a25c:	8afb      	ldrh	r3, [r7, #22]
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4413      	add	r3, r2
 800a262:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800a266:	e004      	b.n	800a272 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 800a268:	8afb      	ldrh	r3, [r7, #22]
 800a26a:	3301      	adds	r3, #1
 800a26c:	82fb      	strh	r3, [r7, #22]
 800a26e:	e7e3      	b.n	800a238 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
 800a280:	4801      	ldr	r0, [pc, #4]	; (800a288 <__tcf_0+0xc>)
 800a282:	f7ff fecf 	bl	800a024 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a286:	bd80      	pop	{r7, pc}
 800a288:	20008eac 	.word	0x20008eac

0800a28c <_Z23getFont_verdana_10_4bppv>:
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	; 0x28
 800a290:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 800a292:	4b15      	ldr	r3, [pc, #84]	; (800a2e8 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d11f      	bne.n	800a2de <_Z23getFont_verdana_10_4bppv+0x52>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	9308      	str	r3, [sp, #32]
 800a2a6:	233f      	movs	r3, #63	; 0x3f
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	4b10      	ldr	r3, [pc, #64]	; (800a2ec <_Z23getFont_verdana_10_4bppv+0x60>)
 800a2ac:	9306      	str	r3, [sp, #24]
 800a2ae:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <_Z23getFont_verdana_10_4bppv+0x64>)
 800a2b0:	9305      	str	r3, [sp, #20]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	9303      	str	r3, [sp, #12]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	2304      	movs	r3, #4
 800a2c0:	9301      	str	r3, [sp, #4]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9300      	str	r3, [sp, #0]
 800a2c6:	230a      	movs	r3, #10
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	490a      	ldr	r1, [pc, #40]	; (800a2f4 <_Z23getFont_verdana_10_4bppv+0x68>)
 800a2cc:	480a      	ldr	r0, [pc, #40]	; (800a2f8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 800a2ce:	f7ff ff4d 	bl	800a16c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a2d2:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <_Z23getFont_verdana_10_4bppv+0x5c>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	4808      	ldr	r0, [pc, #32]	; (800a2fc <_Z23getFont_verdana_10_4bppv+0x70>)
 800a2da:	f013 fae9 	bl	801d8b0 <atexit>
    return verdana_10_4bpp;
 800a2de:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20008ed0 	.word	0x20008ed0
 800a2ec:	08022064 	.word	0x08022064
 800a2f0:	0801ee74 	.word	0x0801ee74
 800a2f4:	08022070 	.word	0x08022070
 800a2f8:	20008eac 	.word	0x20008eac
 800a2fc:	0800a27d 	.word	0x0800a27d

0800a300 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 6, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__tcf_0+0xc>)
 800a306:	f7ff fe8d 	bl	800a024 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20008ed4 	.word	0x20008ed4

0800a310 <_Z23getFont_verdana_20_4bppv>:
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	; 0x28
 800a314:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 6, 20, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 800a316:	4b15      	ldr	r3, [pc, #84]	; (800a36c <_Z23getFont_verdana_20_4bppv+0x5c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0301 	and.w	r3, r3, #1
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d11f      	bne.n	800a362 <_Z23getFont_verdana_20_4bppv+0x52>
 800a322:	2300      	movs	r3, #0
 800a324:	9309      	str	r3, [sp, #36]	; 0x24
 800a326:	2300      	movs	r3, #0
 800a328:	9308      	str	r3, [sp, #32]
 800a32a:	233f      	movs	r3, #63	; 0x3f
 800a32c:	9307      	str	r3, [sp, #28]
 800a32e:	4b10      	ldr	r3, [pc, #64]	; (800a370 <_Z23getFont_verdana_20_4bppv+0x60>)
 800a330:	9306      	str	r3, [sp, #24]
 800a332:	4b10      	ldr	r3, [pc, #64]	; (800a374 <_Z23getFont_verdana_20_4bppv+0x64>)
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	2301      	movs	r3, #1
 800a338:	9304      	str	r3, [sp, #16]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9303      	str	r3, [sp, #12]
 800a33e:	2301      	movs	r3, #1
 800a340:	9302      	str	r3, [sp, #8]
 800a342:	2304      	movs	r3, #4
 800a344:	9301      	str	r3, [sp, #4]
 800a346:	2300      	movs	r3, #0
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	2314      	movs	r3, #20
 800a34c:	2206      	movs	r2, #6
 800a34e:	490a      	ldr	r1, [pc, #40]	; (800a378 <_Z23getFont_verdana_20_4bppv+0x68>)
 800a350:	480a      	ldr	r0, [pc, #40]	; (800a37c <_Z23getFont_verdana_20_4bppv+0x6c>)
 800a352:	f7ff ff0b 	bl	800a16c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <_Z23getFont_verdana_20_4bppv+0x5c>)
 800a358:	2201      	movs	r2, #1
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	4808      	ldr	r0, [pc, #32]	; (800a380 <_Z23getFont_verdana_20_4bppv+0x70>)
 800a35e:	f013 faa7 	bl	801d8b0 <atexit>
    return verdana_20_4bpp;
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 800a364:	4618      	mov	r0, r3
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20008ef8 	.word	0x20008ef8
 800a370:	08022068 	.word	0x08022068
 800a374:	0801ee78 	.word	0x0801ee78
 800a378:	08022080 	.word	0x08022080
 800a37c:	20008ed4 	.word	0x20008ed4
 800a380:	0800a301 	.word	0x0800a301

0800a384 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a384:	b580      	push	{r7, lr}
 800a386:	af00      	add	r7, sp, #0
 800a388:	4801      	ldr	r0, [pc, #4]	; (800a390 <__tcf_0+0xc>)
 800a38a:	f7ff fe4b 	bl	800a024 <_ZN8touchgfx13GeneratedFontD1Ev>
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	20008efc 	.word	0x20008efc

0800a394 <_Z23getFont_verdana_40_4bppv>:
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b08a      	sub	sp, #40	; 0x28
 800a398:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 800a39a:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d11f      	bne.n	800a3e6 <_Z23getFont_verdana_40_4bppv+0x52>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9308      	str	r3, [sp, #32]
 800a3ae:	233f      	movs	r3, #63	; 0x3f
 800a3b0:	9307      	str	r3, [sp, #28]
 800a3b2:	4b10      	ldr	r3, [pc, #64]	; (800a3f4 <_Z23getFont_verdana_40_4bppv+0x60>)
 800a3b4:	9306      	str	r3, [sp, #24]
 800a3b6:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <_Z23getFont_verdana_40_4bppv+0x64>)
 800a3b8:	9305      	str	r3, [sp, #20]
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9303      	str	r3, [sp, #12]
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	9302      	str	r3, [sp, #8]
 800a3c6:	2304      	movs	r3, #4
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	2328      	movs	r3, #40	; 0x28
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	490a      	ldr	r1, [pc, #40]	; (800a3fc <_Z23getFont_verdana_40_4bppv+0x68>)
 800a3d4:	480a      	ldr	r0, [pc, #40]	; (800a400 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800a3d6:	f7ff fec9 	bl	800a16c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <_Z23getFont_verdana_40_4bppv+0x5c>)
 800a3dc:	2201      	movs	r2, #1
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	4808      	ldr	r0, [pc, #32]	; (800a404 <_Z23getFont_verdana_40_4bppv+0x70>)
 800a3e2:	f013 fa65 	bl	801d8b0 <atexit>
    return verdana_40_4bpp;
 800a3e6:	4b06      	ldr	r3, [pc, #24]	; (800a400 <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20008f20 	.word	0x20008f20
 800a3f4:	0802206c 	.word	0x0802206c
 800a3f8:	0801ee7c 	.word	0x0801ee7c
 800a3fc:	080220d4 	.word	0x080220d4
 800a400:	20008efc 	.word	0x20008efc
 800a404:	0800a385 	.word	0x0800a385

0800a408 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
    {
    }
 800a42a:	bf00      	nop
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
    {
    }
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
    {
    }
 800a456:	bf00      	nop
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
    {
    }
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
    {
    }
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
    {
    }
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
    {
 800a4ac:	4a04      	ldr	r2, [pc, #16]	; (800a4c0 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	601a      	str	r2, [r3, #0]
    }
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	0801ef70 	.word	0x0801ef70

0800a4c4 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
    }
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff ffe9 	bl	800a4a4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800a4d2:	2104      	movs	r1, #4
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f013 f9a1 	bl	801d81c <_ZdlPvj>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 800a4ec:	4a07      	ldr	r2, [pc, #28]	; (800a50c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	601a      	str	r2, [r3, #0]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	605a      	str	r2, [r3, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	721a      	strb	r2, [r3, #8]
    {
    }
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	0801ef50 	.word	0x0801ef50

0800a510 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
    {
 800a518:	4a04      	ldr	r2, [pc, #16]	; (800a52c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	601a      	str	r2, [r3, #0]
    }
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4618      	mov	r0, r3
 800a522:	370c      	adds	r7, #12
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	0801ef50 	.word	0x0801ef50

0800a530 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
    }
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ffe9 	bl	800a510 <_ZN8touchgfx10TransitionD1Ev>
 800a53e:	210c      	movs	r1, #12
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f013 f96b 	bl	801d81c <_ZdlPvj>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	bf00      	nop
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	605a      	str	r2, [r3, #4]
    }
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
    {
    }
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
    {
 800a5c8:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	601a      	str	r2, [r3, #0]
    }
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	0801ef38 	.word	0x0801ef38

0800a5e0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
    }
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7ff ffe9 	bl	800a5c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a5ee:	2104      	movs	r1, #4
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f013 f913 	bl	801d81c <_ZdlPvj>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3708      	adds	r7, #8
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800a600:	b480      	push	{r7}
 800a602:	af00      	add	r7, sp, #0
    {
        return instance;
 800a604:	4b03      	ldr	r3, [pc, #12]	; (800a614 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800a606:	681b      	ldr	r3, [r3, #0]
    }
 800a608:	4618      	mov	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	20009f08 	.word	0x20009f08

0800a618 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800a61c:	4b0b      	ldr	r3, [pc, #44]	; (800a64c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800a624:	2b00      	cmp	r3, #0
 800a626:	d008      	beq.n	800a63a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800a628:	4b08      	ldr	r3, [pc, #32]	; (800a64c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800a632:	4b06      	ldr	r3, [pc, #24]	; (800a64c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a638:	e002      	b.n	800a640 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800a63a:	4b04      	ldr	r3, [pc, #16]	; (800a64c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	689b      	ldr	r3, [r3, #8]
        }
    }
 800a640:	4618      	mov	r0, r3
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20009f08 	.word	0x20009f08

0800a650 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	4a05      	ldr	r2, [pc, #20]	; (800a670 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff ff1f 	bl	800a4a4 <_ZN8touchgfx15UIEventListenerD1Ev>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	080205f0 	.word	0x080205f0

0800a674 <_ZN8touchgfx11ApplicationD0Ev>:
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f7ff ffe7 	bl	800a650 <_ZN8touchgfx11ApplicationD1Ev>
 800a682:	f44f 7198 	mov.w	r1, #304	; 0x130
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f013 f8c8 	bl	801d81c <_ZdlPvj>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f005 fe88 	bl	80103b8 <_ZN8touchgfx11ApplicationC1Ev>
 800a6a8:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a04      	ldr	r2, [pc, #16]	; (800a6d4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800a6c2:	6013      	str	r3, [r2, #0]
    }
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0801eefc 	.word	0x0801eefc
 800a6d4:	20009f74 	.word	0x20009f74

0800a6d8 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	4a05      	ldr	r2, [pc, #20]	; (800a6f8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7ff ffb1 	bl	800a650 <_ZN8touchgfx11ApplicationD1Ev>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	0801eefc 	.word	0x0801eefc

0800a6fc <_ZN8touchgfx14MVPApplicationD0Ev>:
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff ffe7 	bl	800a6d8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a70a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f013 f884 	bl	801d81c <_ZdlPvj>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f804 	bl	800a734 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800a72c:	bf00      	nop
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00f      	beq.n	800a766 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	330c      	adds	r3, #12
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4610      	mov	r0, r2
 800a75a:	4798      	blx	r3
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800a762:	2301      	movs	r3, #1
 800a764:	e000      	b.n	800a768 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800a766:	2300      	movs	r3, #0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00e      	beq.n	800a78a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3308      	adds	r3, #8
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4610      	mov	r0, r2
 800a780:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 800a79e:	f005 fdeb 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f005 fded 	bl	8010384 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d008      	beq.n	800a7c4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
    }
    if (*currentTrans)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d007      	beq.n	800a7dc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
    }
    if (*currentScreen)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d008      	beq.n	800a7f6 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3314      	adds	r3, #20
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	4798      	blx	r3
    }
    if (*currentPresenter)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d008      	beq.n	800a810 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3304      	adds	r3, #4
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
    }
    if (*currentScreen)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d007      	beq.n	800a828 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
    }
    if (*currentPresenter)
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d008      	beq.n	800a842 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4610      	mov	r0, r2
 800a840:	4798      	blx	r3
    }
}
 800a842:	bf00      	nop
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60f8      	str	r0, [r7, #12]
 800a852:	60b9      	str	r1, [r7, #8]
 800a854:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	330c      	adds	r3, #12
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	4798      	blx	r3
    newPresenter->activate();
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68b8      	ldr	r0, [r7, #8]
 800a86a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a86c:	6879      	ldr	r1, [r7, #4]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f006 fe2c 	bl	80114cc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3310      	adds	r3, #16
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	4798      	blx	r3

    Application::getInstance()->draw();
 800a880:	f005 fd7a 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 800a884:	4602      	mov	r2, r0
 800a886:	6813      	ldr	r3, [r2, #0]
 800a888:	3328      	adds	r3, #40	; 0x28
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
}
 800a890:	bf00      	nop
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	683a      	ldr	r2, [r7, #0]
 800a8a6:	601a      	str	r2, [r3, #0]
    }
 800a8a8:	bf00      	nop
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	601a      	str	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fa5b 	bl	800ad84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff ff01 	bl	800a6d8 <_ZN8touchgfx14MVPApplicationD1Ev>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	0801eea8 	.word	0x0801eea8

0800a8e4 <_ZN23FrontendApplicationBaseD0Ev>:
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ffe1 	bl	800a8b4 <_ZN23FrontendApplicationBaseD1Ev>
 800a8f2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f012 ff90 	bl	801d81c <_ZdlPvj>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
	...

0800a908 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff fde6 	bl	800a4e4 <_ZN8touchgfx10TransitionC1Ev>
 800a918:	4a03      	ldr	r2, [pc, #12]	; (800a928 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4618      	mov	r0, r3
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	0801ee88 	.word	0x0801ee88

0800a92c <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	4a05      	ldr	r2, [pc, #20]	; (800a94c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff fde7 	bl	800a510 <_ZN8touchgfx10TransitionD1Ev>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	0801ee88 	.word	0x0801ee88

0800a950 <_ZN8touchgfx12NoTransitionD0Ev>:
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ffe7 	bl	800a92c <_ZN8touchgfx12NoTransitionD1Ev>
 800a95e:	210c      	movs	r1, #12
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f012 ff5b 	bl	801d81c <_ZdlPvj>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4618      	mov	r0, r3
 800a96a:	3708      	adds	r7, #8
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	721a      	strb	r2, [r3, #8]
    }
 800a97e:	bf00      	nop
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
 800a992:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	605a      	str	r2, [r3, #4]
    }
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7ff fe6e 	bl	800a698 <_ZN8touchgfx14MVPApplicationC1Ev>
 800a9bc:	4a13      	ldr	r2, [pc, #76]	; (800aa0c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 f89f 	bl	800ab0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800a9de:	f7ff fe0f 	bl	800a600 <_ZN8touchgfx3HAL11getInstanceEv>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	6813      	ldr	r3, [r2, #0]
 800a9e6:	3308      	adds	r3, #8
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	f000 ff7f 	bl	800b8f4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800a9f6:	f7ff fe0f 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f00b fea8 	bl	8016752 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	0801eea8 	.word	0x0801eea8

0800aa10 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	4611      	mov	r1, r2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f7ff ffe9 	bl	800aa10 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	605a      	str	r2, [r3, #4]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	3208      	adds	r2, #8
 800aa4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa52:	e883 0003 	stmia.w	r3, {r0, r1}
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3708      	adds	r7, #8
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800aa60:	b590      	push	{r4, r7, lr}
 800aa62:	b089      	sub	sp, #36	; 0x24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 800aa6e:	4b10      	ldr	r3, [pc, #64]	; (800aab0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800aa70:	61bb      	str	r3, [r7, #24]
 800aa72:	2300      	movs	r3, #0
 800aa74:	61fb      	str	r3, [r7, #28]
 800aa76:	f107 0008 	add.w	r0, r7, #8
 800aa7a:	f107 0318 	add.w	r3, r7, #24
 800aa7e:	cb0c      	ldmia	r3, {r2, r3}
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	f000 f85f 	bl	800ab44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800aa86:	f107 0308 	add.w	r3, r7, #8
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7ff ffcb 	bl	800aa28 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800aa92:	f107 0308 	add.w	r3, r7, #8
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 f974 	bl	800ad84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 800aaa8:	bf00      	nop
 800aaaa:	3724      	adds	r7, #36	; 0x24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd90      	pop	{r4, r7, pc}
 800aab0:	0800aab5 	.word	0x0800aab5

0800aab4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af02      	add	r7, sp, #8
 800aaba:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f503 7198 	add.w	r1, r3, #304	; 0x130
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800aac8:	461a      	mov	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800aad4:	4804      	ldr	r0, [pc, #16]	; (800aae8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800aad6:	f000 f855 	bl	800ab84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20009f68 	.word	0x20009f68
 800aae8:	20009f64 	.word	0x20009f64

0800aaec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr
 800ab08:	0801ef38 	.word	0x0801ef38

0800ab0c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff ffe8 	bl	800aaec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ab1c:	4a08      	ldr	r2, [pc, #32]	; (800ab40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	601a      	str	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	605a      	str	r2, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	609a      	str	r2, [r3, #8]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	60da      	str	r2, [r3, #12]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0801eee4 	.word	0x0801eee4

0800ab44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	4639      	mov	r1, r7
 800ab50:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff ffc8 	bl	800aaec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ab5c:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	68ba      	ldr	r2, [r7, #8]
 800ab66:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	463a      	mov	r2, r7
 800ab6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab72:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	0801eee4 	.word	0x0801eee4

0800ab84 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800ab84:	b590      	push	{r4, r7, lr}
 800ab86:	b089      	sub	sp, #36	; 0x24
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689a      	ldr	r2, [r3, #8]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3320      	adds	r3, #32
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4610      	mov	r0, r2
 800aba2:	4798      	blx	r3
 800aba4:	4603      	mov	r3, r0
 800aba6:	2bd7      	cmp	r3, #215	; 0xd7
 800aba8:	d805      	bhi.n	800abb6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800abaa:	4b4d      	ldr	r3, [pc, #308]	; (800ace0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x15c>)
 800abac:	4a4d      	ldr	r2, [pc, #308]	; (800ace4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800abae:	21c2      	movs	r1, #194	; 0xc2
 800abb0:	484d      	ldr	r0, [pc, #308]	; (800ace8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800abb2:	f012 fe5f 	bl	801d874 <__assert_func>
 800abb6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3320      	adds	r3, #32
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4610      	mov	r0, r2
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
 800abcc:	2b0f      	cmp	r3, #15
 800abce:	d805      	bhi.n	800abdc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800abd0:	4b46      	ldr	r3, [pc, #280]	; (800acec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 800abd2:	4a44      	ldr	r2, [pc, #272]	; (800ace4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800abd4:	21c3      	movs	r1, #195	; 0xc3
 800abd6:	4844      	ldr	r0, [pc, #272]	; (800ace8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800abd8:	f012 fe4c 	bl	801d874 <__assert_func>
 800abdc:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3320      	adds	r3, #32
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b0b      	cmp	r3, #11
 800abf4:	d805      	bhi.n	800ac02 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800abf6:	4b3e      	ldr	r3, [pc, #248]	; (800acf0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 800abf8:	4a3a      	ldr	r2, [pc, #232]	; (800ace4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 800abfa:	21c4      	movs	r1, #196	; 0xc4
 800abfc:	483a      	ldr	r0, [pc, #232]	; (800ace8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 800abfe:	f012 fe39 	bl	801d874 <__assert_func>
 800ac02:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 800ac04:	683a      	ldr	r2, [r7, #0]
 800ac06:	68b9      	ldr	r1, [r7, #8]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7ff fdc2 	bl	800a792 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	2100      	movs	r1, #0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 f86d 	bl	800acf4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	200c      	movs	r0, #12
 800ac20:	f7ff fbf2 	bl	800a408 <_ZnwjPv>
 800ac24:	4604      	mov	r4, r0
 800ac26:	2c00      	cmp	r4, #0
 800ac28:	d004      	beq.n	800ac34 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	f7ff fe6c 	bl	800a908 <_ZN8touchgfx12NoTransitionC1Ev>
 800ac30:	4623      	mov	r3, r4
 800ac32:	e000      	b.n	800ac36 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 800ac34:	4623      	mov	r3, r4
 800ac36:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2100      	movs	r1, #0
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f000 f86b 	bl	800ad1a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800ac44:	4603      	mov	r3, r0
 800ac46:	4619      	mov	r1, r3
 800ac48:	20d8      	movs	r0, #216	; 0xd8
 800ac4a:	f7ff fbdd 	bl	800a408 <_ZnwjPv>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	d004      	beq.n	800ac5e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xda>
 800ac54:	4620      	mov	r0, r4
 800ac56:	f001 f85f 	bl	800bd18 <_ZN11Screen1ViewC1Ev>
 800ac5a:	4623      	mov	r3, r4
 800ac5c:	e000      	b.n	800ac60 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 800ac5e:	4623      	mov	r3, r4
 800ac60:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	2100      	movs	r1, #0
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 f869 	bl	800ad40 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	4619      	mov	r1, r3
 800ac72:	2010      	movs	r0, #16
 800ac74:	f7ff fbc8 	bl	800a408 <_ZnwjPv>
 800ac78:	4604      	mov	r4, r0
 800ac7a:	2c00      	cmp	r4, #0
 800ac7c:	d005      	beq.n	800ac8a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x106>
 800ac7e:	69b9      	ldr	r1, [r7, #24]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f000 fff3 	bl	800bc6c <_ZN16Screen1PresenterC1ER11Screen1View>
 800ac86:	4623      	mov	r3, r4
 800ac88:	e000      	b.n	800ac8c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 800ac8a:	4623      	mov	r3, r4
 800ac8c:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	3304      	adds	r3, #4
 800acaa:	e000      	b.n	800acae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 800acac:	2300      	movs	r3, #0
 800acae:	4619      	mov	r1, r3
 800acb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acb2:	f7ff fdf1 	bl	800a898 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	3304      	adds	r3, #4
 800acba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fe64 	bl	800a98a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	6979      	ldr	r1, [r7, #20]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f84d 	bl	800ad66 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 800accc:	69fa      	ldr	r2, [r7, #28]
 800acce:	6979      	ldr	r1, [r7, #20]
 800acd0:	69b8      	ldr	r0, [r7, #24]
 800acd2:	f7ff fdba 	bl	800a84a <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 800acd6:	697b      	ldr	r3, [r7, #20]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3724      	adds	r7, #36	; 0x24
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd90      	pop	{r4, r7, pc}
 800ace0:	0801e998 	.word	0x0801e998
 800ace4:	0801ef90 	.word	0x0801ef90
 800ace8:	0801ea28 	.word	0x0801ea28
 800acec:	0801ea6c 	.word	0x0801ea6c
 800acf0:	0801eb10 	.word	0x0801eb10

0800acf4 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3324      	adds	r3, #36	; 0x24
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	887a      	ldrh	r2, [r7, #2]
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
 800ad10:	4603      	mov	r3, r0
    }
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b082      	sub	sp, #8
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	460b      	mov	r3, r1
 800ad24:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3324      	adds	r3, #36	; 0x24
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	887a      	ldrh	r2, [r7, #2]
 800ad30:	4611      	mov	r1, r2
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	4798      	blx	r3
 800ad36:	4603      	mov	r3, r0
    }
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3708      	adds	r7, #8
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	460b      	mov	r3, r1
 800ad4a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	3324      	adds	r3, #36	; 0x24
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	887a      	ldrh	r2, [r7, #2]
 800ad56:	4611      	mov	r1, r2
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	4798      	blx	r3
 800ad5c:	4603      	mov	r3, r0
    }
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 800ad66:	b480      	push	{r7}
 800ad68:	b083      	sub	sp, #12
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800ad76:	bf00      	nop
 800ad78:	370c      	adds	r7, #12
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
	...

0800ad84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	4a05      	ldr	r2, [pc, #20]	; (800ada4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fc13 	bl	800a5c0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	0801eee4 	.word	0x0801eee4

0800ada8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff ffe7 	bl	800ad84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800adb6:	2110      	movs	r1, #16
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f012 fd2f 	bl	801d81c <_ZdlPvj>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	68d2      	ldr	r2, [r2, #12]
 800add8:	1052      	asrs	r2, r2, #1
 800adda:	1899      	adds	r1, r3, r2
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f003 0301 	and.w	r3, r3, #1
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d102      	bne.n	800adee <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	e00a      	b.n	800ae04 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	68d2      	ldr	r2, [r2, #12]
 800adf6:	1052      	asrs	r2, r2, #1
 800adf8:	4413      	add	r3, r2
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6892      	ldr	r2, [r2, #8]
 800ae00:	4413      	add	r3, r2
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4608      	mov	r0, r1
 800ae06:	4798      	blx	r3
    }
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d010      	beq.n	800ae42 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d107      	bne.n	800ae38 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800ae34:	2301      	movs	r3, #1
 800ae36:	e000      	b.n	800ae3a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800ae38:	2300      	movs	r3, #0
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d001      	beq.n	800ae42 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e000      	b.n	800ae44 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800ae42:	2300      	movs	r3, #0
    }
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param col The color.
     *
     * @see Color::getColorFrom24BitRGB()
     */
    colortype(uint32_t col)
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
    {
        color = col;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	601a      	str	r2, [r3, #0]
    }
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	80da      	strh	r2, [r3, #6]
    }
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4603      	mov	r3, r0
 800aeac:	817b      	strh	r3, [r7, #10]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	813b      	strh	r3, [r7, #8]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	897a      	ldrh	r2, [r7, #10]
 800aeba:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	893a      	ldrh	r2, [r7, #8]
 800aec0:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	88fa      	ldrh	r2, [r7, #6]
 800aec6:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	8b3a      	ldrh	r2, [r7, #24]
 800aecc:	80da      	strh	r2, [r3, #6]
    }
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID)
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	887a      	ldrh	r2, [r7, #2]
 800aeec:	801a      	strh	r2, [r3, #0]
    {
    }
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <_ZN8touchgfx8DrawableC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Drawable() : rect(0, 0, 0, 0),
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af02      	add	r7, sp, #8
 800af02:	6078      	str	r0, [r7, #4]
        parent(0),
        nextSibling(0),
        nextDrawChainElement(0),
        touchable(false),
        visible(true)
 800af04:	4a13      	ldr	r2, [pc, #76]	; (800af54 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	1d18      	adds	r0, r3, #4
 800af0e:	2300      	movs	r3, #0
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	2300      	movs	r3, #0
 800af14:	2200      	movs	r2, #0
 800af16:	2100      	movs	r1, #0
 800af18:	f7ff ffc0 	bl	800ae9c <_ZN8touchgfx4RectC1Essss>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	330c      	adds	r3, #12
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff ffa4 	bl	800ae6e <_ZN8touchgfx4RectC1Ev>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2200      	movs	r2, #0
 800af2a:	615a      	str	r2, [r3, #20]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	619a      	str	r2, [r3, #24]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	61da      	str	r2, [r3, #28]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	08020728 	.word	0x08020728

0800af58 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	4a04      	ldr	r2, [pc, #16]	; (800af74 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	08020728 	.word	0x08020728

0800af78 <_ZN8touchgfx8DrawableD0Ev>:
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff ffe9 	bl	800af58 <_ZN8touchgfx8DrawableD1Ev>
 800af86:	2128      	movs	r1, #40	; 0x28
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f012 fc47 	bl	801d81c <_ZdlPvj>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	4608      	mov	r0, r1
 800afa2:	4611      	mov	r1, r2
 800afa4:	461a      	mov	r2, r3
 800afa6:	4603      	mov	r3, r0
 800afa8:	817b      	strh	r3, [r7, #10]
 800afaa:	460b      	mov	r3, r1
 800afac:	813b      	strh	r3, [r7, #8]
 800afae:	4613      	mov	r3, r2
 800afb0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	3334      	adds	r3, #52	; 0x34
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800afbe:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	4798      	blx	r3
        setWidth(width);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	3338      	adds	r3, #56	; 0x38
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800afd2:	4611      	mov	r1, r2
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	4798      	blx	r3
        setHeight(height);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	333c      	adds	r3, #60	; 0x3c
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800afe4:	4611      	mov	r1, r2
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	4798      	blx	r3
    }
 800afea:	bf00      	nop
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800aff2:	b480      	push	{r7}
 800aff4:	b083      	sub	sp, #12
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	887a      	ldrh	r2, [r7, #2]
 800b002:	809a      	strh	r2, [r3, #4]
    }
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	887a      	ldrh	r2, [r7, #2]
 800b020:	80da      	strh	r2, [r3, #6]
    }
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr

0800b02e <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	460b      	mov	r3, r1
 800b038:	807b      	strh	r3, [r7, #2]
 800b03a:	4613      	mov	r3, r2
 800b03c:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	332c      	adds	r3, #44	; 0x2c
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800b04a:	4611      	mov	r1, r2
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	4798      	blx	r3
        setY(y);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3330      	adds	r3, #48	; 0x30
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b05c:	4611      	mov	r1, r2
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	4798      	blx	r3
    }
 800b062:	bf00      	nop
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800b06a:	b480      	push	{r7}
 800b06c:	b083      	sub	sp, #12
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	460b      	mov	r3, r1
 800b074:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	887a      	ldrh	r2, [r7, #2]
 800b07a:	811a      	strh	r2, [r3, #8]
    }
 800b07c:	bf00      	nop
 800b07e:	370c      	adds	r7, #12
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	460b      	mov	r3, r1
 800b092:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	887a      	ldrh	r2, [r7, #2]
 800b098:	815a      	strh	r2, [r3, #10]
    }
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800b0a6:	b480      	push	{r7}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	bf00      	nop
 800b0b0:	370c      	adds	r7, #12
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800b0ba:	b480      	push	{r7}
 800b0bc:	b083      	sub	sp, #12
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800b11e:	4618      	mov	r0, r3
 800b120:	370c      	adds	r7, #12
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800b12a:	b480      	push	{r7}
 800b12c:	b083      	sub	sp, #12
 800b12e:	af00      	add	r7, sp, #0
 800b130:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	807b      	strh	r3, [r7, #2]
 800b150:	4613      	mov	r3, r2
 800b152:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3354      	adds	r3, #84	; 0x54
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	8879      	ldrh	r1, [r7, #2]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b164:	b292      	uxth	r2, r2
 800b166:	1a8a      	subs	r2, r1, r2
 800b168:	b292      	uxth	r2, r2
 800b16a:	b210      	sxth	r0, r2
 800b16c:	8839      	ldrh	r1, [r7, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b174:	b292      	uxth	r2, r2
 800b176:	1a8a      	subs	r2, r1, r2
 800b178:	b292      	uxth	r2, r2
 800b17a:	b212      	sxth	r2, r2
 800b17c:	4601      	mov	r1, r0
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	4798      	blx	r3
    }
 800b182:	bf00      	nop
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800b18a:	b480      	push	{r7}
 800b18c:	b083      	sub	sp, #12
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b198:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1a0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1a8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	60b9      	str	r1, [r7, #8]
 800b1c0:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff ffe1 	bl	800b18a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	68fa      	ldr	r2, [r7, #12]
 800b1d4:	601a      	str	r2, [r3, #0]
    }
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	4a05      	ldr	r2, [pc, #20]	; (800b200 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff feb1 	bl	800af58 <_ZN8touchgfx8DrawableD1Ev>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	0801fa38 	.word	0x0801fa38

0800b204 <_ZN8touchgfx9ContainerD0Ev>:
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f7ff ffe7 	bl	800b1e0 <_ZN8touchgfx9ContainerD1Ev>
 800b212:	212c      	movs	r1, #44	; 0x2c
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f012 fb01 	bl	801d81c <_ZdlPvj>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4618      	mov	r0, r3
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	4a06      	ldr	r2, [pc, #24]	; (800b248 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3304      	adds	r3, #4
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff ffd2 	bl	800b1e0 <_ZN8touchgfx9ContainerD1Ev>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	08020820 	.word	0x08020820

0800b24c <_ZN8touchgfx6ScreenD0Ev>:
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ffe5 	bl	800b224 <_ZN8touchgfx6ScreenD1Ev>
 800b25a:	213c      	movs	r1, #60	; 0x3c
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f012 fadd 	bl	801d81c <_ZdlPvj>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4618      	mov	r0, r3
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 800b26c:	b480      	push	{r7}
 800b26e:	b083      	sub	sp, #12
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	bf00      	nop
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
    {
    }
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	70fb      	strb	r3, [r7, #3]
    {
    }
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3304      	adds	r3, #4
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f002 fdb7 	bl	800de58 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b2ea:	bf00      	nop
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
	...

0800b2f4 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff fdfc 	bl	800aefc <_ZN8touchgfx8DrawableC1Ev>
 800b304:	4a03      	ldr	r2, [pc, #12]	; (800b314 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4618      	mov	r0, r3
 800b30e:	3708      	adds	r7, #8
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	0801f104 	.word	0x0801f104

0800b318 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	4a05      	ldr	r2, [pc, #20]	; (800b338 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4618      	mov	r0, r3
 800b32a:	f7ff fe15 	bl	800af58 <_ZN8touchgfx8DrawableD1Ev>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0801f104 	.word	0x0801f104

0800b33c <_ZN8touchgfx6WidgetD0Ev>:
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff ffe7 	bl	800b318 <_ZN8touchgfx6WidgetD1Ev>
 800b34a:	2128      	movs	r1, #40	; 0x28
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f012 fa65 	bl	801d81c <_ZdlPvj>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4618      	mov	r0, r3
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607b      	str	r3, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	817b      	strh	r3, [r7, #10]
 800b36a:	4613      	mov	r3, r2
 800b36c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	4618      	mov	r0, r3
 800b372:	f7ff fecd 	bl	800b110 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d008      	beq.n	800b38e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4618      	mov	r0, r3
 800b380:	f7ff fed3 	bl	800b12a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d001      	beq.n	800b38e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800b38a:	2301      	movs	r3, #1
 800b38c:	e000      	b.n	800b390 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800b38e:	2300      	movs	r3, #0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	601a      	str	r2, [r3, #0]
        }
    }
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7ff ff9f 	bl	800b2f4 <_ZN8touchgfx6WidgetC1Ev>
 800b3b6:	4a0b      	ldr	r2, [pc, #44]	; (800b3e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	3326      	adds	r3, #38	; 0x26
 800b3c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff fd89 	bl	800aedc <_ZN8touchgfx6BitmapC1Et>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	22ff      	movs	r2, #255	; 0xff
 800b3ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f003 ff83 	bl	800f2e0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3708      	adds	r7, #8
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	080204a8 	.word	0x080204a8

0800b3e8 <_ZN8touchgfx14AbstractButtonD1Ev>:
 *        clickable element that has two states - pressed or released - and executes an action
 *        when the pressed->released transition is made.
 *
 * @see Widget
 */
class AbstractButton : public Widget
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	4a05      	ldr	r2, [pc, #20]	; (800b408 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7ff ff8d 	bl	800b318 <_ZN8touchgfx6WidgetD1Ev>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4618      	mov	r0, r3
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	08020248 	.word	0x08020248

0800b40c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7ff ffe7 	bl	800b3e8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800b41a:	2130      	movs	r1, #48	; 0x30
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f012 f9fd 	bl	801d81c <_ZdlPvj>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	4a05      	ldr	r2, [pc, #20]	; (800b44c <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7ff ffd3 	bl	800b3e8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	08020404 	.word	0x08020404

0800b450 <_ZN8touchgfx6ButtonD0Ev>:
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff ffe7 	bl	800b42c <_ZN8touchgfx6ButtonD1Ev>
 800b45e:	2134      	movs	r1, #52	; 0x34
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f012 f9db 	bl	801d81c <_ZdlPvj>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4618      	mov	r0, r3
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
     * @param bmpReleased The bitmap to show in the "normal" state, ie when button is not pressed.
     * @param bmpPressed  The bitmap to show when the button is pressed.
     *
     * @see Button::setBitmaps
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	8812      	ldrh	r2, [r2, #0]
 800b482:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	68b9      	ldr	r1, [r7, #8]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f003 fe76 	bl	800f17c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 800b490:	bf00      	nop
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <_ZN8touchgfx9TypedTextC1Et>:
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	807b      	strh	r3, [r7, #2]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	887a      	ldrh	r2, [r7, #2]
 800b4a8:	801a      	strh	r2, [r3, #0]
    }
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea()
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff ff16 	bl	800b2f4 <_ZN8touchgfx6WidgetC1Ev>
 800b4c8:	4a13      	ldr	r2, [pc, #76]	; (800b518 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	3326      	adds	r3, #38	; 0x26
 800b4d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7ff ffde 	bl	800b498 <_ZN8touchgfx9TypedTextC1Et>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	3328      	adds	r3, #40	; 0x28
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7ff fcb4 	bl	800ae50 <_ZN8touchgfx9colortypeC1Em>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	859a      	strh	r2, [r3, #44]	; 0x2c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	22ff      	movs	r2, #255	; 0xff
 800b4f2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    {
    }
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	08020324 	.word	0x08020324

0800b51c <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	683a      	ldr	r2, [r7, #0]
 800b52a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <_ZN8touchgfx8TextArea14setLinespacingEs>:
     *
     *        Sets the line spacing of the TextArea.
     *
     * @param space The line spacing of use in the TextArea.
     */
    inline void setLinespacing(int16_t space)
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	460b      	mov	r3, r1
 800b542:	807b      	strh	r3, [r7, #2]
    {
        linespace = space;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	887a      	ldrh	r2, [r7, #2]
 800b548:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 800b54a:	bf00      	nop
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	4a05      	ldr	r2, [pc, #20]	; (800b578 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff fe5b 	bl	800b224 <_ZN8touchgfx6ScreenD1Ev>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4618      	mov	r0, r3
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	0801f0d0 	.word	0x0801f0d0

0800b57c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff ffe7 	bl	800b558 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800b58a:	2140      	movs	r1, #64	; 0x40
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f012 f945 	bl	801d81c <_ZdlPvj>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	4a0d      	ldr	r2, [pc, #52]	; (800b5dc <_ZN15Screen1ViewBaseD1Ev+0x40>)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	601a      	str	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	33a4      	adds	r3, #164	; 0xa4
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f950 	bl	800b854 <_ZN8touchgfx8TextAreaD1Ev>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	336c      	adds	r3, #108	; 0x6c
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f929 	bl	800b810 <_ZN8touchgfx12ToggleButtonD1Ev>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	3340      	adds	r3, #64	; 0x40
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 f902 	bl	800b7cc <_ZN8touchgfx5ImageD1Ev>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff ffc4 	bl	800b558 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	0801f09c 	.word	0x0801f09c

0800b5e0 <_ZN15Screen1ViewBaseD0Ev>:
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ffd7 	bl	800b59c <_ZN15Screen1ViewBaseD1Ev>
 800b5ee:	21d8      	movs	r1, #216	; 0xd8
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f012 f913 	bl	801d81c <_ZdlPvj>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3708      	adds	r7, #8
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800b600:	b590      	push	{r4, r7, lr}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
 800b60a:	460b      	mov	r3, r1
 800b60c:	71bb      	strb	r3, [r7, #6]
 800b60e:	4613      	mov	r3, r2
 800b610:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800b612:	f7fe fff5 	bl	800a600 <_ZN8touchgfx3HAL11getInstanceEv>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d105      	bne.n	800b628 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800b61c:	4b0a      	ldr	r3, [pc, #40]	; (800b648 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800b61e:	4a0b      	ldr	r2, [pc, #44]	; (800b64c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800b620:	2138      	movs	r1, #56	; 0x38
 800b622:	480b      	ldr	r0, [pc, #44]	; (800b650 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800b624:	f012 f926 	bl	801d874 <__assert_func>
 800b628:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800b62a:	f7fe fff5 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800b62e:	6803      	ldr	r3, [r0, #0]
 800b630:	332c      	adds	r3, #44	; 0x2c
 800b632:	681c      	ldr	r4, [r3, #0]
 800b634:	797b      	ldrb	r3, [r7, #5]
 800b636:	79ba      	ldrb	r2, [r7, #6]
 800b638:	79f9      	ldrb	r1, [r7, #7]
 800b63a:	47a0      	blx	r4
 800b63c:	4603      	mov	r3, r0
    }
 800b63e:	4618      	mov	r0, r3
 800b640:	370c      	adds	r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	bd90      	pop	{r4, r7, pc}
 800b646:	bf00      	nop
 800b648:	0801ebb4 	.word	0x0801ebb4
 800b64c:	0801f164 	.word	0x0801f164
 800b650:	0801ebf8 	.word	0x0801ebf8

0800b654 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase()
 800b654:	b590      	push	{r4, r7, lr}
 800b656:	b089      	sub	sp, #36	; 0x24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 f89e 	bl	800b7a0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800b664:	4a48      	ldr	r2, [pc, #288]	; (800b788 <_ZN15Screen1ViewBaseC1Ev+0x134>)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b670:	f107 030c 	add.w	r3, r7, #12
 800b674:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff fc2f 	bl	800aedc <_ZN8touchgfx6BitmapC1Et>
 800b67e:	f107 030c 	add.w	r3, r7, #12
 800b682:	4619      	mov	r1, r3
 800b684:	4620      	mov	r0, r4
 800b686:	f7ff fe8d 	bl	800b3a4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	336c      	adds	r3, #108	; 0x6c
 800b68e:	4618      	mov	r0, r3
 800b690:	f003 fc0a 	bl	800eea8 <_ZN8touchgfx12ToggleButtonC1Ev>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	33a4      	adds	r3, #164	; 0xa4
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff ff0d 	bl	800b4b8 <_ZN8touchgfx8TextAreaC1Ev>
{

    image1.setXY(0, 0);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	3340      	adds	r3, #64	; 0x40
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff fcc1 	bl	800b02e <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_NEON_ID));
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b6b2:	f107 0310 	add.w	r3, r7, #16
 800b6b6:	2102      	movs	r1, #2
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fc0f 	bl	800aedc <_ZN8touchgfx6BitmapC1Et>
 800b6be:	f107 0310 	add.w	r3, r7, #16
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f003 fe0b 	bl	800f2e0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    toggleButton1.setXY(96, 172);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	336c      	adds	r3, #108	; 0x6c
 800b6ce:	22ac      	movs	r2, #172	; 0xac
 800b6d0:	2160      	movs	r1, #96	; 0x60
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7ff fcab 	bl	800b02e <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b6de:	f107 0314 	add.w	r3, r7, #20
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7ff fbf9 	bl	800aedc <_ZN8touchgfx6BitmapC1Et>
 800b6ea:	f107 0318 	add.w	r3, r7, #24
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7ff fbf3 	bl	800aedc <_ZN8touchgfx6BitmapC1Et>
 800b6f6:	f107 0218 	add.w	r2, r7, #24
 800b6fa:	f107 0314 	add.w	r3, r7, #20
 800b6fe:	4619      	mov	r1, r3
 800b700:	4620      	mov	r0, r4
 800b702:	f7ff feb5 	bl	800b470 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    textArea1.setXY(121, 11);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	33a4      	adds	r3, #164	; 0xa4
 800b70a:	220b      	movs	r2, #11
 800b70c:	2179      	movs	r1, #121	; 0x79
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff fc8d 	bl	800b02e <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(235, 80, 245));
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800b71a:	22f5      	movs	r2, #245	; 0xf5
 800b71c:	2150      	movs	r1, #80	; 0x50
 800b71e:	20eb      	movs	r0, #235	; 0xeb
 800b720:	f7ff ff6e 	bl	800b600 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800b724:	4603      	mov	r3, r0
 800b726:	4619      	mov	r1, r3
 800b728:	4620      	mov	r0, r4
 800b72a:	f7ff fef7 	bl	800b51c <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	33a4      	adds	r3, #164	; 0xa4
 800b732:	2100      	movs	r1, #0
 800b734:	4618      	mov	r0, r3
 800b736:	f7ff feff 	bl	800b538 <_ZN8touchgfx8TextArea14setLinespacingEs>
    textArea1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 800b740:	f107 031c 	add.w	r3, r7, #28
 800b744:	2100      	movs	r1, #0
 800b746:	4618      	mov	r0, r3
 800b748:	f7ff fea6 	bl	800b498 <_ZN8touchgfx9TypedTextC1Et>
 800b74c:	8bb9      	ldrh	r1, [r7, #28]
 800b74e:	4620      	mov	r0, r4
 800b750:	f003 fd0a 	bl	800f168 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    add(image1);
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3340      	adds	r3, #64	; 0x40
 800b75a:	4619      	mov	r1, r3
 800b75c:	4610      	mov	r0, r2
 800b75e:	f7ff fdb9 	bl	800b2d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1);
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	336c      	adds	r3, #108	; 0x6c
 800b768:	4619      	mov	r1, r3
 800b76a:	4610      	mov	r0, r2
 800b76c:	f7ff fdb2 	bl	800b2d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 800b770:	687a      	ldr	r2, [r7, #4]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	33a4      	adds	r3, #164	; 0xa4
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7ff fdab 	bl	800b2d4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4618      	mov	r0, r3
 800b782:	3724      	adds	r7, #36	; 0x24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd90      	pop	{r4, r7, pc}
 800b788:	0801f09c 	.word	0x0801f09c

0800b78c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]

}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f005 fd14 	bl	80111d8 <_ZN8touchgfx6ScreenC1Ev>
 800b7b0:	4a05      	ldr	r2, [pc, #20]	; (800b7c8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0801f0d0 	.word	0x0801f0d0

0800b7cc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	4a05      	ldr	r2, [pc, #20]	; (800b7ec <_ZN8touchgfx5ImageD1Ev+0x20>)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	601a      	str	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7ff fd9b 	bl	800b318 <_ZN8touchgfx6WidgetD1Ev>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	080204a8 	.word	0x080204a8

0800b7f0 <_ZN8touchgfx5ImageD0Ev>:
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f7ff ffe7 	bl	800b7cc <_ZN8touchgfx5ImageD1Ev>
 800b7fe:	212c      	movs	r1, #44	; 0x2c
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f012 f80b 	bl	801d81c <_ZdlPvj>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	4618      	mov	r0, r3
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <_ZN8touchgfx12ToggleButtonD1Ev>:
class ToggleButton : public Button
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	4a05      	ldr	r2, [pc, #20]	; (800b830 <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	601a      	str	r2, [r3, #0]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff fe03 	bl	800b42c <_ZN8touchgfx6ButtonD1Ev>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	080202b4 	.word	0x080202b4

0800b834 <_ZN8touchgfx12ToggleButtonD0Ev>:
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff ffe7 	bl	800b810 <_ZN8touchgfx12ToggleButtonD1Ev>
 800b842:	2138      	movs	r1, #56	; 0x38
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f011 ffe9 	bl	801d81c <_ZdlPvj>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	4a05      	ldr	r2, [pc, #20]	; (800b874 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4618      	mov	r0, r3
 800b866:	f7ff fd57 	bl	800b318 <_ZN8touchgfx6WidgetD1Ev>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	08020324 	.word	0x08020324

0800b878 <_ZN8touchgfx8TextAreaD0Ev>:
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff ffe7 	bl	800b854 <_ZN8touchgfx8TextAreaD1Ev>
 800b886:	2134      	movs	r1, #52	; 0x34
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f011 ffc7 	bl	801d81c <_ZdlPvj>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800b898:	b480      	push	{r7}
 800b89a:	af00      	add	r7, sp, #0
    return bitmap_database;
 800b89c:	4b02      	ldr	r3, [pc, #8]	; (800b8a8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	0801f1c0 	.word	0x0801f1c0

0800b8ac <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800b8b0:	2303      	movs	r3, #3
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr

0800b8bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800b8ca:	4a07      	ldr	r2, [pc, #28]	; (800b8e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6013      	str	r3, [r2, #0]
        fonts = f;
 800b8d0:	4a06      	ldr	r2, [pc, #24]	; (800b8ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800b8d6:	4a06      	ldr	r2, [pc, #24]	; (800b8f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800b8d8:	88fb      	ldrh	r3, [r7, #6]
 800b8da:	8013      	strh	r3, [r2, #0]
    }
 800b8dc:	bf00      	nop
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	20009f78 	.word	0x20009f78
 800b8ec:	20009f80 	.word	0x20009f80
 800b8f0:	20009f7c 	.word	0x20009f7c

0800b8f4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800b8f4:	b590      	push	{r4, r7, lr}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800b902:	88fb      	ldrh	r3, [r7, #6]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d127      	bne.n	800b958 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	4a1e      	ldr	r2, [pc, #120]	; (800b984 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d016      	beq.n	800b942 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800b914:	88fb      	ldrh	r3, [r7, #6]
 800b916:	4a1b      	ldr	r2, [pc, #108]	; (800b984 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b91c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	4413      	add	r3, r2
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b928:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	4413      	add	r3, r2
 800b932:	4a16      	ldr	r2, [pc, #88]	; (800b98c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b934:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	4413      	add	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
 800b940:	e00a      	b.n	800b958 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800b942:	4b11      	ldr	r3, [pc, #68]	; (800b988 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b944:	4a12      	ldr	r2, [pc, #72]	; (800b990 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800b946:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800b948:	4a12      	ldr	r2, [pc, #72]	; (800b994 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800b94a:	4b10      	ldr	r3, [pc, #64]	; (800b98c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b94c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800b94e:	88fb      	ldrh	r3, [r7, #6]
 800b950:	4a11      	ldr	r2, [pc, #68]	; (800b998 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800b952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b956:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00d      	beq.n	800b97a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800b95e:	4a0f      	ldr	r2, [pc, #60]	; (800b99c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800b964:	f000 f83e 	bl	800b9e4 <_ZN17TypedTextDatabase8getFontsEv>
 800b968:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800b96a:	f000 f833 	bl	800b9d4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800b96e:	4603      	mov	r3, r0
 800b970:	461a      	mov	r2, r3
 800b972:	4621      	mov	r1, r4
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7ff ffa1 	bl	800b8bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd90      	pop	{r4, r7, pc}
 800b982:	bf00      	nop
 800b984:	20008f34 	.word	0x20008f34
 800b988:	20008f3c 	.word	0x20008f3c
 800b98c:	20008f40 	.word	0x20008f40
 800b990:	080510e8 	.word	0x080510e8
 800b994:	080510e4 	.word	0x080510e4
 800b998:	080510fc 	.word	0x080510fc
 800b99c:	20008f38 	.word	0x20008f38

0800b9a0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800b9ac:	4b07      	ldr	r3, [pc, #28]	; (800b9cc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	4b07      	ldr	r3, [pc, #28]	; (800b9d0 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800b9b2:	6819      	ldr	r1, [r3, #0]
 800b9b4:	887b      	ldrh	r3, [r7, #2]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	005b      	lsls	r3, r3, #1
 800b9be:	4413      	add	r3, r2
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	20008f3c 	.word	0x20008f3c
 800b9d0:	20008f40 	.word	0x20008f40

0800b9d4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800b9d8:	2301      	movs	r3, #1
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	af00      	add	r7, sp, #0
    return _fonts;
 800b9e8:	4b02      	ldr	r3, [pc, #8]	; (800b9f4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	20008f44 	.word	0x20008f44

0800b9f8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d113      	bne.n	800ba30 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d10e      	bne.n	800ba30 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800ba12:	f7fe fc7d 	bl	800a310 <_Z23getFont_verdana_20_4bppv>
 800ba16:	4602      	mov	r2, r0
};
 800ba18:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ba1a:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 800ba1c:	f7fe fcba 	bl	800a394 <_Z23getFont_verdana_40_4bppv>
 800ba20:	4602      	mov	r2, r0
};
 800ba22:	4b05      	ldr	r3, [pc, #20]	; (800ba38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ba24:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 800ba26:	f7fe fc31 	bl	800a28c <_Z23getFont_verdana_10_4bppv>
 800ba2a:	4602      	mov	r2, r0
};
 800ba2c:	4b02      	ldr	r3, [pc, #8]	; (800ba38 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800ba2e:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	20008f44 	.word	0x20008f44

0800ba3c <_GLOBAL__sub_I__fonts>:
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ba44:	2001      	movs	r0, #1
 800ba46:	f7ff ffd7 	bl	800b9f8 <_Z41__static_initialization_and_destruction_0ii>
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	4a05      	ldr	r2, [pc, #20]	; (800ba6c <_ZN19FrontendApplicationD1Ev+0x20>)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe ff29 	bl	800a8b4 <_ZN23FrontendApplicationBaseD1Ev>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4618      	mov	r0, r3
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	0801f204 	.word	0x0801f204

0800ba70 <_ZN19FrontendApplicationD0Ev>:
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f7ff ffe7 	bl	800ba4c <_ZN19FrontendApplicationD1Ev>
 800ba7e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f011 feca 	bl	801d81c <_ZdlPvj>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800baa0:	4618      	mov	r0, r3
 800baa2:	f000 f82d 	bl	800bb00 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	4618      	mov	r0, r3
 800baaa:	f004 fb39 	bl	8010120 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	68b9      	ldr	r1, [r7, #8]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe ff6c 	bl	800a9a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800bad0:	4a03      	ldr	r2, [pc, #12]	; (800bae0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	601a      	str	r2, [r3, #0]
{

}
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	0801f204 	.word	0x0801f204

0800bae4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]
{

}
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <_ZN5Model4tickEv>:

void Model::tick()
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]

}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
    {
    }
 800bb1c:	bf00      	nop
 800bb1e:	370c      	adds	r7, #12
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
    {
    }
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
    {
 800bb44:	4a04      	ldr	r2, [pc, #16]	; (800bb58 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	601a      	str	r2, [r3, #0]
    }
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	0801f278 	.word	0x0801f278

0800bb5c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
    }
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff ffe9 	bl	800bb3c <_ZN8touchgfx9PresenterD1Ev>
 800bb6a:	2104      	movs	r1, #4
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f011 fe55 	bl	801d81c <_ZdlPvj>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4618      	mov	r0, r3
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
    {
 800bb84:	4a04      	ldr	r2, [pc, #16]	; (800bb98 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	601a      	str	r2, [r3, #0]
    }
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	0801f278 	.word	0x0801f278

0800bb9c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	4a06      	ldr	r2, [pc, #24]	; (800bbc0 <_ZN13ModelListenerC1Ev+0x24>)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	605a      	str	r2, [r3, #4]
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	370c      	adds	r7, #12
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	0801f268 	.word	0x0801f268

0800bbc4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	4a04      	ldr	r2, [pc, #16]	; (800bbe0 <_ZN13ModelListenerD1Ev+0x1c>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	0801f268 	.word	0x0801f268

0800bbe4 <_ZN13ModelListenerD0Ev>:
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7ff ffe9 	bl	800bbc4 <_ZN13ModelListenerD1Ev>
 800bbf2:	2108      	movs	r1, #8
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f011 fe11 	bl	801d81c <_ZdlPvj>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <_ZN16Screen1PresenterD1Ev+0x30>)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	4a09      	ldr	r2, [pc, #36]	; (800bc38 <_ZN16Screen1PresenterD1Ev+0x34>)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	605a      	str	r2, [r3, #4]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	3304      	adds	r3, #4
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff ffd1 	bl	800bbc4 <_ZN13ModelListenerD1Ev>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7ff ff89 	bl	800bb3c <_ZN8touchgfx9PresenterD1Ev>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	0801f240 	.word	0x0801f240
 800bc38:	0801f258 	.word	0x0801f258

0800bc3c <_ZThn4_N16Screen1PresenterD1Ev>:
 800bc3c:	f1a0 0004 	sub.w	r0, r0, #4
 800bc40:	e7e0      	b.n	800bc04 <_ZN16Screen1PresenterD1Ev>
 800bc42:	bf00      	nop

0800bc44 <_ZN16Screen1PresenterD0Ev>:
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff ffd9 	bl	800bc04 <_ZN16Screen1PresenterD1Ev>
 800bc52:	2110      	movs	r1, #16
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f011 fde1 	bl	801d81c <_ZdlPvj>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <_ZThn4_N16Screen1PresenterD0Ev>:
 800bc64:	f1a0 0004 	sub.w	r0, r0, #4
 800bc68:	e7ec      	b.n	800bc44 <_ZN16Screen1PresenterD0Ev>
	...

0800bc6c <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
    : view(v)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7ff ff7f 	bl	800bb7c <_ZN8touchgfx9PresenterC1Ev>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	3304      	adds	r3, #4
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff ff8a 	bl	800bb9c <_ZN13ModelListenerC1Ev>
 800bc88:	4a06      	ldr	r2, [pc, #24]	; (800bca4 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	4a06      	ldr	r2, [pc, #24]	; (800bca8 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	605a      	str	r2, [r3, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	60da      	str	r2, [r3, #12]
{

}
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	0801f240 	.word	0x0801f240
 800bca8:	0801f258 	.word	0x0801f258

0800bcac <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]

}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]

}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	4a05      	ldr	r2, [pc, #20]	; (800bcf4 <_ZN11Screen1ViewD1Ev+0x20>)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fc59 	bl	800b59c <_ZN15Screen1ViewBaseD1Ev>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4618      	mov	r0, r3
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	0801f290 	.word	0x0801f290

0800bcf8 <_ZN11Screen1ViewD0Ev>:
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff ffe7 	bl	800bcd4 <_ZN11Screen1ViewD1Ev>
 800bd06:	21d8      	movs	r1, #216	; 0xd8
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f011 fd87 	bl	801d81c <_ZdlPvj>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f7ff fc96 	bl	800b654 <_ZN15Screen1ViewBaseC1Ev>
 800bd28:	4a03      	ldr	r2, [pc, #12]	; (800bd38 <_ZN11Screen1ViewC1Ev+0x20>)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
{

}
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	0801f290 	.word	0x0801f290

0800bd3c <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff fd20 	bl	800b78c <_ZN15Screen1ViewBase11setupScreenEv>
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff fa98 	bl	800b294 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800bd64:	bf00      	nop
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800bd6c:	b480      	push	{r7}
 800bd6e:	b083      	sub	sp, #12
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
    {
 800bd74:	4a04      	ldr	r2, [pc, #16]	; (800bd88 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	601a      	str	r2, [r3, #0]
    }
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	0801f2dc 	.word	0x0801f2dc

0800bd8c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
    }
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ffe9 	bl	800bd6c <_ZN8touchgfx15TouchControllerD1Ev>
 800bd9a:	2104      	movs	r1, #4
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f011 fd3d 	bl	801d81c <_ZdlPvj>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	4618      	mov	r0, r3
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <_ZN20STM32TouchController4initEv>:

uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize);
void    BSP_TS_GetState(TS_StateTypeDef* TsState);

void STM32TouchController::init()
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    BSP_TS_Init(240, 320);
 800bdb4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bdb8:	20f0      	movs	r0, #240	; 0xf0
 800bdba:	f000 f821 	bl	800be00 <_Z11BSP_TS_Inittt>
}
 800bdbe:	bf00      	nop
 800bdc0:	3708      	adds	r7, #8
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b086      	sub	sp, #24
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 800bdd2:	f107 0310 	add.w	r3, r7, #16
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 f850 	bl	800be7c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800bddc:	8a3b      	ldrh	r3, [r7, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d009      	beq.n	800bdf6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>
    {
        x = state.X;
 800bde2:	8a7b      	ldrh	r3, [r7, #18]
 800bde4:	461a      	mov	r2, r3
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	601a      	str	r2, [r3, #0]
        y = state.Y;
 800bdea:	8abb      	ldrh	r3, [r7, #20]
 800bdec:	461a      	mov	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	601a      	str	r2, [r3, #0]
        return true;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e000      	b.n	800bdf8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x32>
    }
    return false;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	460a      	mov	r2, r1
 800be0a:	80fb      	strh	r3, [r7, #6]
 800be0c:	4613      	mov	r3, r2
 800be0e:	80bb      	strh	r3, [r7, #4]
    uint8_t ret = TS_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	73fb      	strb	r3, [r7, #15]

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 800be14:	4a15      	ldr	r2, [pc, #84]	; (800be6c <_Z11BSP_TS_Inittt+0x6c>)
 800be16:	88fb      	ldrh	r3, [r7, #6]
 800be18:	8013      	strh	r3, [r2, #0]
    TsYBoundary = YSize;
 800be1a:	4a15      	ldr	r2, [pc, #84]	; (800be70 <_Z11BSP_TS_Inittt+0x70>)
 800be1c:	88bb      	ldrh	r3, [r7, #4]
 800be1e:	8013      	strh	r3, [r2, #0]

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800be20:	4b14      	ldr	r3, [pc, #80]	; (800be74 <_Z11BSP_TS_Inittt+0x74>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	2082      	movs	r0, #130	; 0x82
 800be26:	4798      	blx	r3
 800be28:	4603      	mov	r3, r0
 800be2a:	461a      	mov	r2, r3
 800be2c:	f640 0311 	movw	r3, #2065	; 0x811
 800be30:	429a      	cmp	r2, r3
 800be32:	bf0c      	ite	eq
 800be34:	2301      	moveq	r3, #1
 800be36:	2300      	movne	r3, #0
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d004      	beq.n	800be48 <_Z11BSP_TS_Inittt+0x48>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 800be3e:	4b0e      	ldr	r3, [pc, #56]	; (800be78 <_Z11BSP_TS_Inittt+0x78>)
 800be40:	4a0c      	ldr	r2, [pc, #48]	; (800be74 <_Z11BSP_TS_Inittt+0x74>)
 800be42:	601a      	str	r2, [r3, #0]

        ret = TS_OK;
 800be44:	2300      	movs	r3, #0
 800be46:	73fb      	strb	r3, [r7, #15]
    }

    if (ret == TS_OK)
 800be48:	7bfb      	ldrb	r3, [r7, #15]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d109      	bne.n	800be62 <_Z11BSP_TS_Inittt+0x62>
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 800be4e:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <_Z11BSP_TS_Inittt+0x78>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	2082      	movs	r0, #130	; 0x82
 800be56:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 800be58:	4b07      	ldr	r3, [pc, #28]	; (800be78 <_Z11BSP_TS_Inittt+0x78>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68db      	ldr	r3, [r3, #12]
 800be5e:	2082      	movs	r0, #130	; 0x82
 800be60:	4798      	blx	r3
    }

    return ret;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	20008f54 	.word	0x20008f54
 800be70:	20008f56 	.word	0x20008f56
 800be74:	20000048 	.word	0x20000048
 800be78:	20008f50 	.word	0x20008f50

0800be7c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800be84:	4b4f      	ldr	r3, [pc, #316]	; (800bfc4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	2082      	movs	r0, #130	; 0x82
 800be8c:	4798      	blx	r3
 800be8e:	4603      	mov	r3, r0
 800be90:	b29a      	uxth	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	801a      	strh	r2, [r3, #0]

    if (TsState->TouchDetected)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 808d 	beq.w	800bfba <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x13e>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800bea0:	4b48      	ldr	r3, [pc, #288]	; (800bfc4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x148>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	f107 020c 	add.w	r2, r7, #12
 800beaa:	f107 010e 	add.w	r1, r7, #14
 800beae:	2082      	movs	r0, #130	; 0x82
 800beb0:	4798      	blx	r3

        /* Y value first correction */
        y -= 360;
 800beb2:	89bb      	ldrh	r3, [r7, #12]
 800beb4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800beb8:	b29b      	uxth	r3, r3
 800beba:	81bb      	strh	r3, [r7, #12]

        /* Y value second correction */
        yr = y / 11;
 800bebc:	89bb      	ldrh	r3, [r7, #12]
 800bebe:	4a42      	ldr	r2, [pc, #264]	; (800bfc8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x14c>)
 800bec0:	fba2 2303 	umull	r2, r3, r2, r3
 800bec4:	08db      	lsrs	r3, r3, #3
 800bec6:	82bb      	strh	r3, [r7, #20]

        /* Return y position value */
        if (yr <= 0)
 800bec8:	8abb      	ldrh	r3, [r7, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d102      	bne.n	800bed4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x58>
        {
            yr = 0;
 800bece:	2300      	movs	r3, #0
 800bed0:	82bb      	strh	r3, [r7, #20]
 800bed2:	e008      	b.n	800bee6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        }
        else if (yr > TsYBoundary)
 800bed4:	4b3d      	ldr	r3, [pc, #244]	; (800bfcc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	8aba      	ldrh	r2, [r7, #20]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d903      	bls.n	800bee6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x6a>
        {
            yr = TsYBoundary - 1;
 800bede:	4b3b      	ldr	r3, [pc, #236]	; (800bfcc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x150>)
 800bee0:	881b      	ldrh	r3, [r3, #0]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	82bb      	strh	r3, [r7, #20]
        }
        else
        {}
        y = yr;
 800bee6:	8abb      	ldrh	r3, [r7, #20]
 800bee8:	81bb      	strh	r3, [r7, #12]

        /* X value first correction */
        if (x <= 3000)
 800beea:	89fb      	ldrh	r3, [r7, #14]
 800beec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d806      	bhi.n	800bf02 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x86>
        {
            x = 3870 - x;
 800bef4:	89fb      	ldrh	r3, [r7, #14]
 800bef6:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800befa:	330e      	adds	r3, #14
 800befc:	b29b      	uxth	r3, r3
 800befe:	81fb      	strh	r3, [r7, #14]
 800bf00:	e005      	b.n	800bf0e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x92>
        }
        else
        {
            x = 3800 - x;
 800bf02:	89fb      	ldrh	r3, [r7, #14]
 800bf04:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800bf08:	3308      	adds	r3, #8
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	81fb      	strh	r3, [r7, #14]
        }

        /* X value second correction */
        xr = x / 15;
 800bf0e:	89fb      	ldrh	r3, [r7, #14]
 800bf10:	4a2f      	ldr	r2, [pc, #188]	; (800bfd0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x154>)
 800bf12:	fba2 2303 	umull	r2, r3, r2, r3
 800bf16:	08db      	lsrs	r3, r3, #3
 800bf18:	82fb      	strh	r3, [r7, #22]

        /* Return X position value */
        if (xr <= 0)
 800bf1a:	8afb      	ldrh	r3, [r7, #22]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
        {
            xr = 0;
 800bf20:	2300      	movs	r3, #0
 800bf22:	82fb      	strh	r3, [r7, #22]
 800bf24:	e008      	b.n	800bf38 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        }
        else if (xr > TsXBoundary)
 800bf26:	4b2b      	ldr	r3, [pc, #172]	; (800bfd4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 800bf28:	881b      	ldrh	r3, [r3, #0]
 800bf2a:	8afa      	ldrh	r2, [r7, #22]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d903      	bls.n	800bf38 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbc>
        {
            xr = TsXBoundary - 1;
 800bf30:	4b28      	ldr	r3, [pc, #160]	; (800bfd4 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x158>)
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	3b01      	subs	r3, #1
 800bf36:	82fb      	strh	r3, [r7, #22]
        }
        else
        {}

        x = xr;
 800bf38:	8afb      	ldrh	r3, [r7, #22]
 800bf3a:	81fb      	strh	r3, [r7, #14]
        xDiff = x > _x ? (x - _x) : (_x - x);
 800bf3c:	89fb      	ldrh	r3, [r7, #14]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4b25      	ldr	r3, [pc, #148]	; (800bfd8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d906      	bls.n	800bf56 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xda>
 800bf48:	89fa      	ldrh	r2, [r7, #14]
 800bf4a:	4b23      	ldr	r3, [pc, #140]	; (800bfd8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	e005      	b.n	800bf62 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe6>
 800bf56:	4b20      	ldr	r3, [pc, #128]	; (800bfd8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	89fb      	ldrh	r3, [r7, #14]
 800bf5e:	1ad3      	subs	r3, r2, r3
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	827b      	strh	r3, [r7, #18]
        yDiff = y > _y ? (y - _y) : (_y - y);
 800bf64:	89bb      	ldrh	r3, [r7, #12]
 800bf66:	461a      	mov	r2, r3
 800bf68:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d906      	bls.n	800bf7e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x102>
 800bf70:	89ba      	ldrh	r2, [r7, #12]
 800bf72:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	e005      	b.n	800bf8a <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x10e>
 800bf7e:	4b17      	ldr	r3, [pc, #92]	; (800bfdc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	89bb      	ldrh	r3, [r7, #12]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	823b      	strh	r3, [r7, #16]

        if (xDiff + yDiff > 5)
 800bf8c:	8a7a      	ldrh	r2, [r7, #18]
 800bf8e:	8a3b      	ldrh	r3, [r7, #16]
 800bf90:	4413      	add	r3, r2
 800bf92:	2b05      	cmp	r3, #5
 800bf94:	dd07      	ble.n	800bfa6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x12a>
        {
            _x = x;
 800bf96:	89fb      	ldrh	r3, [r7, #14]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	4b0f      	ldr	r3, [pc, #60]	; (800bfd8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800bf9c:	601a      	str	r2, [r3, #0]
            _y = y;
 800bf9e:	89bb      	ldrh	r3, [r7, #12]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	4b0e      	ldr	r3, [pc, #56]	; (800bfdc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800bfa4:	601a      	str	r2, [r3, #0]
        }

        /* Update the X position */
        TsState->X = _x;
 800bfa6:	4b0c      	ldr	r3, [pc, #48]	; (800bfd8 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x15c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	805a      	strh	r2, [r3, #2]

        /* Update the Y position */
        TsState->Y = _y;
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x160>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	809a      	strh	r2, [r3, #4]
    }
}
 800bfba:	bf00      	nop
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	20008f50 	.word	0x20008f50
 800bfc8:	ba2e8ba3 	.word	0xba2e8ba3
 800bfcc:	20008f56 	.word	0x20008f56
 800bfd0:	88888889 	.word	0x88888889
 800bfd4:	20008f54 	.word	0x20008f54
 800bfd8:	20008f58 	.word	0x20008f58
 800bfdc:	20008f5c 	.word	0x20008f5c

0800bfe0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	4a05      	ldr	r2, [pc, #20]	; (800c000 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	601a      	str	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7ff febb 	bl	800bd6c <_ZN8touchgfx15TouchControllerD1Ev>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4618      	mov	r0, r3
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	0801f2c4 	.word	0x0801f2c4

0800c004 <_ZN20STM32TouchControllerD0Ev>:
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f7ff ffe7 	bl	800bfe0 <_ZN20STM32TouchControllerD1Ev>
 800c012:	2104      	movs	r1, #4
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f011 fc01 	bl	801d81c <_ZdlPvj>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4618      	mov	r0, r3
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	71fb      	strb	r3, [r7, #7]

}
 800c02e:	bf00      	nop
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	4603      	mov	r3, r0
 800c042:	71fb      	strb	r3, [r7, #7]

}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	71fb      	strb	r3, [r7, #7]

}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr
	...

0800c068 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
    {
 800c070:	4a04      	ldr	r2, [pc, #16]	; (800c084 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	601a      	str	r2, [r3, #0]
    }
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4618      	mov	r0, r3
 800c07a:	370c      	adds	r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	0801fce0 	.word	0x0801fce0

0800c088 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
    }
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff ffe9 	bl	800c068 <_ZN8touchgfx3HALD1Ev>
 800c096:	2178      	movs	r1, #120	; 0x78
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f011 fbbf 	bl	801d81c <_ZdlPvj>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	78fa      	ldrb	r2, [r7, #3]
 800c0b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *        As default, will return whatever blitcaps are reported by the associated DMA
     *        object.
     *
     * @return a bitmask of the supported blitcaps.
     */
    virtual BlitOperations getBlitCaps()
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
    {
        return dma.getBlitCaps();
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	4798      	blx	r3
 800c0e8:	4603      	mov	r3, r0
    }
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @brief Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     *        Has to be called from within the LCD IRQ rutine when the Back Porch Exit is
     *        reached.
     */
    virtual void backPorchExited()
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b082      	sub	sp, #8
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f002 fd68 	bl	800ebd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3390      	adds	r3, #144	; 0x90
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	4798      	blx	r3
    }
 800c10c:	bf00      	nop
 800c10e:	3708      	adds	r7, #8
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
    {
        return false;
 800c11e:	2300      	movs	r3, #0
    }
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
     * @param      useDoubleBuffering  (Optional) If true, reserve memory for an extra frame buffer.
     * @param      useAnimationStorage (Optional) If true, reserve memory for animation storage.
     *
     * @deprecated Use the setFramaBufferStartAddress with 'format' parameter instead of 'depth'
     */
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 800c12c:	b590      	push	{r4, r7, lr}
 800c12e:	b08b      	sub	sp, #44	; 0x2c
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4611      	mov	r1, r2
 800c138:	461a      	mov	r2, r3
 800c13a:	460b      	mov	r3, r1
 800c13c:	80fb      	strh	r3, [r7, #6]
 800c13e:	4613      	mov	r3, r2
 800c140:	717b      	strb	r3, [r7, #5]
    {
        uint16_t stride = lcd().framebufferStride();
 800c142:	f7fe fa69 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800c146:	4602      	mov	r2, r0
 800c148:	6813      	ldr	r3, [r2, #0]
 800c14a:	3328      	adds	r3, #40	; 0x28
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4610      	mov	r0, r2
 800c150:	4798      	blx	r3
 800c152:	4603      	mov	r3, r0
 800c154:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 800c156:	8b7b      	ldrh	r3, [r7, #26]
 800c158:	4a3d      	ldr	r2, [pc, #244]	; (800c250 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 800c15a:	8812      	ldrh	r2, [r2, #0]
 800c15c:	fb02 f303 	mul.w	r3, r2, r3
 800c160:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 800c16e:	797b      	ldrb	r3, [r7, #5]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d005      	beq.n	800c180 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 800c174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	4413      	add	r3, r2
 800c17a:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 800c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17e:	623b      	str	r3, [r7, #32]
        }
        if (useAnimationStorage)
 800c180:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800c184:	2b00      	cmp	r3, #0
 800c186:	d005      	beq.n	800c194 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
        {
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 800c188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	4413      	add	r3, r2
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	61fb      	str	r3, [r7, #28]
        }
        switch (depth)
 800c194:	88fb      	ldrh	r3, [r7, #6]
 800c196:	3b01      	subs	r3, #1
 800c198:	2b1f      	cmp	r3, #31
 800c19a:	d84d      	bhi.n	800c238 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 800c19c:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 800c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a2:	bf00      	nop
 800c1a4:	0800c225 	.word	0x0800c225
 800c1a8:	0800c225 	.word	0x0800c225
 800c1ac:	0800c239 	.word	0x0800c239
 800c1b0:	0800c225 	.word	0x0800c225
 800c1b4:	0800c239 	.word	0x0800c239
 800c1b8:	0800c239 	.word	0x0800c239
 800c1bc:	0800c239 	.word	0x0800c239
 800c1c0:	0800c225 	.word	0x0800c225
 800c1c4:	0800c239 	.word	0x0800c239
 800c1c8:	0800c239 	.word	0x0800c239
 800c1cc:	0800c239 	.word	0x0800c239
 800c1d0:	0800c239 	.word	0x0800c239
 800c1d4:	0800c239 	.word	0x0800c239
 800c1d8:	0800c239 	.word	0x0800c239
 800c1dc:	0800c239 	.word	0x0800c239
 800c1e0:	0800c225 	.word	0x0800c225
 800c1e4:	0800c239 	.word	0x0800c239
 800c1e8:	0800c239 	.word	0x0800c239
 800c1ec:	0800c239 	.word	0x0800c239
 800c1f0:	0800c239 	.word	0x0800c239
 800c1f4:	0800c239 	.word	0x0800c239
 800c1f8:	0800c239 	.word	0x0800c239
 800c1fc:	0800c239 	.word	0x0800c239
 800c200:	0800c225 	.word	0x0800c225
 800c204:	0800c239 	.word	0x0800c239
 800c208:	0800c239 	.word	0x0800c239
 800c20c:	0800c239 	.word	0x0800c239
 800c210:	0800c239 	.word	0x0800c239
 800c214:	0800c239 	.word	0x0800c239
 800c218:	0800c239 	.word	0x0800c239
 800c21c:	0800c239 	.word	0x0800c239
 800c220:	0800c225 	.word	0x0800c225
        case 16:
        case 8:
        case 4:
        case 2:
        case 1:
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3374      	adds	r3, #116	; 0x74
 800c22a:	681c      	ldr	r4, [r3, #0]
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	6a3a      	ldr	r2, [r7, #32]
 800c230:	68b9      	ldr	r1, [r7, #8]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	47a0      	blx	r4
            break;
 800c236:	e006      	b.n	800c246 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
        default:
            assert(0 && "Unsupported bit depth");
 800c238:	4b06      	ldr	r3, [pc, #24]	; (800c254 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 800c23a:	4a07      	ldr	r2, [pc, #28]	; (800c258 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 800c23c:	f240 3125 	movw	r1, #805	; 0x325
 800c240:	4806      	ldr	r0, [pc, #24]	; (800c25c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 800c242:	f011 fb17 	bl	801d874 <__assert_func>
            break;
        }
    }
 800c246:	bf00      	nop
 800c248:	372c      	adds	r7, #44	; 0x2c
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd90      	pop	{r4, r7, pc}
 800c24e:	bf00      	nop
 800c250:	20009f04 	.word	0x20009f04
 800c254:	0801ec38 	.word	0x0801ec38
 800c258:	0801f3f0 	.word	0x0801f3f0
 800c25c:	0801ec58 	.word	0x0801ec58

0800c260 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     *
     * @param [in] frameBuffer      Buffer for frame buffer data, must be non-null.
     * @param [in] doubleBuffer     If non-null, buffer for double buffer data. If null double buffering is disabled.
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage is disabled.
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	607a      	str	r2, [r7, #4]
 800c26c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d106      	bne.n	800c282 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800c274:	4b11      	ldr	r3, [pc, #68]	; (800c2bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800c276:	4a12      	ldr	r2, [pc, #72]	; (800c2c0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800c278:	f240 3137 	movw	r1, #823	; 0x337
 800c27c:	4811      	ldr	r0, [pc, #68]	; (800c2c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 800c27e:	f011 faf9 	bl	801d874 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	683a      	ldr	r2, [r7, #0]
 800c292:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	bf14      	ite	ne
 800c29a:	2301      	movne	r3, #1
 800c29c:	2300      	moveq	r3, #0
 800c29e:	b2da      	uxtb	r2, r3
 800c2a0:	4b09      	ldr	r3, [pc, #36]	; (800c2c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 800c2a2:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	bf14      	ite	ne
 800c2aa:	2301      	movne	r3, #1
 800c2ac:	2300      	moveq	r3, #0
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	4b06      	ldr	r3, [pc, #24]	; (800c2cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 800c2b2:	701a      	strb	r2, [r3, #0]
    }
 800c2b4:	bf00      	nop
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	0801ec9c 	.word	0x0801ec9c
 800c2c0:	0801f3a0 	.word	0x0801f3a0
 800c2c4:	0801ec58 	.word	0x0801ec58
 800c2c8:	20009f06 	.word	0x20009f06
 800c2cc:	20009f07 	.word	0x20009f07

0800c2d0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d004      	beq.n	800c2ee <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e8:	887a      	ldrh	r2, [r7, #2]
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	4798      	blx	r3
        }
    }
 800c2ee:	bf00      	nop
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *        not used, then the getTFTCurrentLine function is never called and can be
     *        disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800c2fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800c302:	4618      	mov	r0, r3
 800c304:	370c      	adds	r7, #12
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr

0800c30e <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3318      	adds	r3, #24
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	4603      	mov	r3, r0
    }
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
	...

0800c334 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c348:	429a      	cmp	r2, r3
 800c34a:	d017      	beq.n	800c37c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 800c34c:	4b1a      	ldr	r3, [pc, #104]	; (800c3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d12a      	bne.n	800c3aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800c354:	4b19      	ldr	r3, [pc, #100]	; (800c3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c356:	881a      	ldrh	r2, [r3, #0]
 800c358:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c35a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800c35c:	4b19      	ldr	r3, [pc, #100]	; (800c3c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c35e:	881a      	ldrh	r2, [r3, #0]
 800c360:	4b19      	ldr	r3, [pc, #100]	; (800c3c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c362:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 800c364:	4b16      	ldr	r3, [pc, #88]	; (800c3c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c366:	881a      	ldrh	r2, [r3, #0]
 800c368:	4b16      	ldr	r3, [pc, #88]	; (800c3c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c36a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 800c36c:	4b16      	ldr	r3, [pc, #88]	; (800c3c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c36e:	881a      	ldrh	r2, [r3, #0]
 800c370:	4b12      	ldr	r3, [pc, #72]	; (800c3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c372:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 800c374:	4b10      	ldr	r3, [pc, #64]	; (800c3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c376:	2201      	movs	r2, #1
 800c378:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800c37a:	e016      	b.n	800c3aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 800c37c:	4b0e      	ldr	r3, [pc, #56]	; (800c3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d012      	beq.n	800c3aa <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 800c384:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c386:	881a      	ldrh	r2, [r3, #0]
 800c388:	4b0d      	ldr	r3, [pc, #52]	; (800c3c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c38a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 800c38c:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c38e:	881a      	ldrh	r2, [r3, #0]
 800c390:	4b0d      	ldr	r3, [pc, #52]	; (800c3c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c392:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 800c394:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 800c396:	881a      	ldrh	r2, [r3, #0]
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 800c39a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 800c39c:	4b08      	ldr	r3, [pc, #32]	; (800c3c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 800c39e:	881a      	ldrh	r2, [r3, #0]
 800c3a0:	4b06      	ldr	r3, [pc, #24]	; (800c3bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 800c3a2:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 800c3a4:	4b04      	ldr	r3, [pc, #16]	; (800c3b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	701a      	strb	r2, [r3, #0]
    }
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	20009f00 	.word	0x20009f00
 800c3bc:	20009efc 	.word	0x20009efc
 800c3c0:	20009f02 	.word	0x20009f02
 800c3c4:	20009efe 	.word	0x20009efe
 800c3c8:	20009f04 	.word	0x20009f04

0800c3cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f001 fe7d 	bl	800e0d6 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	4a05      	ldr	r2, [pc, #20]	; (800c404 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fe37 	bl	800c068 <_ZN8touchgfx3HALD1Ev>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3708      	adds	r7, #8
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	0801f6cc 	.word	0x0801f6cc

0800c408 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff ffe7 	bl	800c3e4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800c416:	2178      	movs	r1, #120	; 0x78
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f011 f9ff 	bl	801d81c <_ZdlPvj>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4618      	mov	r0, r3
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4618      	mov	r0, r3
 800c434:	f7ff ffca 	bl	800c3cc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800c438:	bf00      	nop
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <_ZN11TouchGFXHAL10initializeEv>:
}

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f001 fae8 	bl	800da20 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
    enableLCDControllerInterrupt();
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3368      	adds	r3, #104	; 0x68
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	4798      	blx	r3
    enableInterrupts();
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3360      	adds	r3, #96	; 0x60
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	4798      	blx	r3

    OSWrappers::waitForVSync();
 800c478:	f000 f936 	bl	800c6e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	3358      	adds	r3, #88	; 0x58
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4610      	mov	r0, r2
 800c488:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 800c48a:	2029      	movs	r0, #41	; 0x29
 800c48c:	f7f4 fd22 	bl	8000ed4 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 800c490:	f000 f92a 	bl	800c6e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3358      	adds	r3, #88	; 0x58
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4610      	mov	r0, r2
 800c4a0:	4798      	blx	r3
        OSWrappers::waitForVSync();
 800c4a2:	e7f5      	b.n	800c490 <_ZN11TouchGFXHAL9taskEntryEv+0x38>

0800c4a4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f001 fb3a 	bl	800db28 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800c4b4:	4603      	mov	r3, r0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
 800c4c6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f001 fb39 	bl	800db44 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800c4d2:	bf00      	nop
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b082      	sub	sp, #8
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	6039      	str	r1, [r7, #0]
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 fb41 	bl	800db70 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4618      	mov	r0, r3
 800c502:	f001 fab7 	bl	800da74 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800c506:	bf00      	nop
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4618      	mov	r0, r3
 800c51a:	f001 fabb 	bl	800da94 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800c51e:	bf00      	nop
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b082      	sub	sp, #8
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4618      	mov	r0, r3
 800c532:	f001 fabd 	bl	800dab0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800c536:	bf00      	nop
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4618      	mov	r0, r3
 800c54a:	f001 fabf 	bl	800dacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800c54e:	bf00      	nop
 800c550:	3708      	adds	r7, #8
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
	...

0800c558 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	4a05      	ldr	r2, [pc, #20]	; (800c578 <_ZN11TouchGFXHALD1Ev+0x20>)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	601a      	str	r2, [r3, #0]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff ff3b 	bl	800c3e4 <_ZN20TouchGFXGeneratedHALD1Ev>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	0801f2f4 	.word	0x0801f2f4

0800c57c <_ZN11TouchGFXHALD0Ev>:
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff ffe7 	bl	800c558 <_ZN11TouchGFXHALD1Ev>
 800c58a:	2178      	movs	r1, #120	; 0x78
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f011 f945 	bl	801d81c <_ZdlPvj>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4618      	mov	r0, r3
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	2001      	movs	r0, #1
 800c5a6:	f7fa f96d 	bl	8006884 <osSemaphoreNew>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	4b09      	ldr	r3, [pc, #36]	; (800c5d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800c5ae:	601a      	str	r2, [r3, #0]
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever); // take the lock
 800c5b0:	4b08      	ldr	r3, [pc, #32]	; (800c5d4 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f04f 31ff 	mov.w	r1, #4294967295
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7fa fa01 	bl	80069c0 <osSemaphoreAcquire>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800c5be:	2200      	movs	r2, #0
 800c5c0:	2104      	movs	r1, #4
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	f7fa faba 	bl	8006b3c <osMessageQueueNew>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	4b03      	ldr	r3, [pc, #12]	; (800c5d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 800c5cc:	601a      	str	r2, [r3, #0]
}
 800c5ce:	bf00      	nop
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20008f60 	.word	0x20008f60
 800c5d8:	20008f64 	.word	0x20008f64

0800c5dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800c5e0:	4b09      	ldr	r3, [pc, #36]	; (800c608 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d105      	bne.n	800c5f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 800c5e8:	4b08      	ldr	r3, [pc, #32]	; (800c60c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 800c5ea:	4a09      	ldr	r2, [pc, #36]	; (800c610 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 800c5ec:	2131      	movs	r1, #49	; 0x31
 800c5ee:	4809      	ldr	r0, [pc, #36]	; (800c614 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 800c5f0:	f011 f940 	bl	801d874 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800c5f4:	4b04      	ldr	r3, [pc, #16]	; (800c608 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fa f9df 	bl	80069c0 <osSemaphoreAcquire>
}
 800c602:	bf00      	nop
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	20008f60 	.word	0x20008f60
 800c60c:	0801ecd4 	.word	0x0801ecd4
 800c610:	0801f444 	.word	0x0801f444
 800c614:	0801ece8 	.word	0x0801ece8

0800c618 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800c61c:	4b08      	ldr	r3, [pc, #32]	; (800c640 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d105      	bne.n	800c630 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 800c626:	4a08      	ldr	r2, [pc, #32]	; (800c648 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 800c628:	213a      	movs	r1, #58	; 0x3a
 800c62a:	4808      	ldr	r0, [pc, #32]	; (800c64c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 800c62c:	f011 f922 	bl	801d874 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800c630:	4b03      	ldr	r3, [pc, #12]	; (800c640 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4618      	mov	r0, r3
 800c636:	f7fa fa29 	bl	8006a8c <osSemaphoreRelease>
}
 800c63a:	bf00      	nop
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	20008f60 	.word	0x20008f60
 800c644:	0801ecd4 	.word	0x0801ecd4
 800c648:	0801f484 	.word	0x0801f484
 800c64c:	0801ece8 	.word	0x0801ece8

0800c650 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800c650:	b580      	push	{r7, lr}
 800c652:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800c654:	4b08      	ldr	r3, [pc, #32]	; (800c678 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d105      	bne.n	800c668 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 800c65c:	4b07      	ldr	r3, [pc, #28]	; (800c67c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 800c65e:	4a08      	ldr	r2, [pc, #32]	; (800c680 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 800c660:	2147      	movs	r1, #71	; 0x47
 800c662:	4808      	ldr	r0, [pc, #32]	; (800c684 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 800c664:	f011 f906 	bl	801d874 <__assert_func>
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800c668:	4b03      	ldr	r3, [pc, #12]	; (800c678 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2100      	movs	r1, #0
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fa f9a6 	bl	80069c0 <osSemaphoreAcquire>
}
 800c674:	bf00      	nop
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20008f60 	.word	0x20008f60
 800c67c:	0801ecd4 	.word	0x0801ecd4
 800c680:	0801f4c4 	.word	0x0801f4c4
 800c684:	0801ece8 	.word	0x0801ece8

0800c688 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 800c68c:	4b08      	ldr	r3, [pc, #32]	; (800c6b0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d105      	bne.n	800c6a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 800c694:	4b07      	ldr	r3, [pc, #28]	; (800c6b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 800c696:	4a08      	ldr	r2, [pc, #32]	; (800c6b8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 800c698:	2154      	movs	r1, #84	; 0x54
 800c69a:	4808      	ldr	r0, [pc, #32]	; (800c6bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 800c69c:	f011 f8ea 	bl	801d874 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 800c6a0:	4b03      	ldr	r3, [pc, #12]	; (800c6b0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fa f9f1 	bl	8006a8c <osSemaphoreRelease>
}
 800c6aa:	bf00      	nop
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	20008f60 	.word	0x20008f60
 800c6b4:	0801ecd4 	.word	0x0801ecd4
 800c6b8:	0801f504 	.word	0x0801f504
 800c6bc:	0801ece8 	.word	0x0801ece8

0800c6c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
    if (vsync_queue)
 800c6c4:	4b06      	ldr	r3, [pc, #24]	; (800c6e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d006      	beq.n	800c6da <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1a>
    {
        osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800c6cc:	4b04      	ldr	r3, [pc, #16]	; (800c6e0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	4903      	ldr	r1, [pc, #12]	; (800c6e4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 800c6d6:	f7fa fab7 	bl	8006c48 <osMessageQueuePut>
    }
}
 800c6da:	bf00      	nop
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20008f64 	.word	0x20008f64
 800c6e4:	2000008c 	.word	0x2000008c

0800c6e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
    if (vsync_queue)
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00e      	beq.n	800c714 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>
    {
        uint32_t dummyGet;
        // First make sure the queue is empty, by trying to remove an element with 0 timeout.
        osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800c6f6:	4b09      	ldr	r3, [pc, #36]	; (800c71c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	1d39      	adds	r1, r7, #4
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2200      	movs	r2, #0
 800c700:	f7fa fb16 	bl	8006d30 <osMessageQueueGet>

        // Then, wait for next VSYNC to occur.
        osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800c704:	4b05      	ldr	r3, [pc, #20]	; (800c71c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x34>)
 800c706:	6818      	ldr	r0, [r3, #0]
 800c708:	1d39      	adds	r1, r7, #4
 800c70a:	f04f 33ff 	mov.w	r3, #4294967295
 800c70e:	2200      	movs	r2, #0
 800c710:	f7fa fb0e 	bl	8006d30 <osMessageQueueGet>
    }
}
 800c714:	bf00      	nop
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	20008f64 	.word	0x20008f64

0800c720 <__NVIC_EnableIRQ>:
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c72a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	db0d      	blt.n	800c74e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 021f 	and.w	r2, r3, #31
 800c73c:	4907      	ldr	r1, [pc, #28]	; (800c75c <__NVIC_EnableIRQ+0x3c>)
 800c73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c742:	095b      	lsrs	r3, r3, #5
 800c744:	2001      	movs	r0, #1
 800c746:	fa00 f202 	lsl.w	r2, r0, r2
 800c74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	e000e100 	.word	0xe000e100

0800c760 <__NVIC_DisableIRQ>:
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c76a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	db12      	blt.n	800c798 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c776:	b2db      	uxtb	r3, r3
 800c778:	f003 021f 	and.w	r2, r3, #31
 800c77c:	4909      	ldr	r1, [pc, #36]	; (800c7a4 <__NVIC_DisableIRQ+0x44>)
 800c77e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c782:	095b      	lsrs	r3, r3, #5
 800c784:	2001      	movs	r0, #1
 800c786:	fa00 f202 	lsl.w	r2, r0, r2
 800c78a:	3320      	adds	r3, #32
 800c78c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c794:	f3bf 8f6f 	isb	sy
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr
 800c7a4:	e000e100 	.word	0xe000e100

0800c7a8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 800c7c4:	b480      	push	{r7}
 800c7c6:	b083      	sub	sp, #12
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
        return color;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
    }
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
    }
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr
	...

0800c7f8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
    {
 800c800:	4a04      	ldr	r2, [pc, #16]	; (800c814 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	601a      	str	r2, [r3, #0]
    }
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4618      	mov	r0, r3
 800c80a:	370c      	adds	r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	0801f5a0 	.word	0x0801f5a0

0800c818 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
    }
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7ff ffe9 	bl	800c7f8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c826:	2104      	movs	r1, #4
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f010 fff7 	bl	801d81c <_ZdlPvj>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	3344      	adds	r3, #68	; 0x44
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	4798      	blx	r3
    }
 800c84c:	bf00      	nop
 800c84e:	3708      	adds	r7, #8
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 800c85c:	2300      	movs	r3, #0
    }
 800c85e:	4618      	mov	r0, r3
 800c860:	370c      	adds	r7, #12
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
    {
 800c874:	4a04      	ldr	r2, [pc, #16]	; (800c888 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	601a      	str	r2, [r3, #0]
    }
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4618      	mov	r0, r3
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	08020124 	.word	0x08020124

0800c88c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
    }
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7ff ffe9 	bl	800c86c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800c89a:	210c      	movs	r1, #12
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f010 ffbd 	bl	801d81c <_ZdlPvj>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800c8b6:	4a09      	ldr	r2, [pc, #36]	; (800c8dc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	605a      	str	r2, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	721a      	strb	r2, [r3, #8]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	725a      	strb	r2, [r3, #9]
    {
    }
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	08020124 	.word	0x08020124

0800c8e0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	3314      	adds	r3, #20
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4610      	mov	r0, r2
 800c8f8:	4798      	blx	r3
    }
 800c8fa:	bf00      	nop
 800c8fc:	3708      	adds	r7, #8
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800c902:	b580      	push	{r7, lr}
 800c904:	b082      	sub	sp, #8
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	3328      	adds	r3, #40	; 0x28
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4610      	mov	r0, r2
 800c916:	4798      	blx	r3
    }
 800c918:	bf00      	nop
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef* hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	430a      	orrs	r2, r1
 800c940:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c948:	f023 0107 	bic.w	r1, r3, #7
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	430a      	orrs	r2, r1
 800c954:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800c960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	430b      	orrs	r3, r1
 800c96c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 800c96e:	2300      	movs	r3, #0
}
 800c970:	4618      	mov	r0, r3
 800c972:	3714      	adds	r7, #20
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <DMA2D_XferCpltCallback>:

extern "C" {

    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
        touchgfx::HAL::getInstance()->signalDMAInterrupt();
 800c984:	f7fd fe3c 	bl	800a600 <_ZN8touchgfx3HAL11getInstanceEv>
 800c988:	4603      	mov	r3, r0
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff ffa8 	bl	800c8e0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <DMA2D_XferErrorCallback>:

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
        assert(0);
 800c9a0:	4b02      	ldr	r3, [pc, #8]	; (800c9ac <DMA2D_XferErrorCallback+0x14>)
 800c9a2:	4a03      	ldr	r2, [pc, #12]	; (800c9b0 <DMA2D_XferErrorCallback+0x18>)
 800c9a4:	2136      	movs	r1, #54	; 0x36
 800c9a6:	4803      	ldr	r0, [pc, #12]	; (800c9b4 <DMA2D_XferErrorCallback+0x1c>)
 800c9a8:	f010 ff64 	bl	801d874 <__assert_func>
 800c9ac:	0801ed14 	.word	0x0801ed14
 800c9b0:	0801f5bc 	.word	0x0801f5bc
 800c9b4:	0801ed18 	.word	0x0801ed18

0800c9b8 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3318      	adds	r3, #24
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff feef 	bl	800c7a8 <_ZN8touchgfx9colortypeC1Ev>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <_ZN10STM32F4DMAC1Ev>:
    }

}

STM32F4DMA::STM32F4DMA()
 800c9d4:	b5b0      	push	{r4, r5, r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	330c      	adds	r3, #12
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	4610      	mov	r0, r2
 800c9e6:	f7ff ff61 	bl	800c8ac <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800c9ea:	4a0e      	ldr	r2, [pc, #56]	; (800ca24 <_ZN10STM32F4DMAC1Ev+0x50>)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	601a      	str	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f103 000c 	add.w	r0, r3, #12
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3320      	adds	r3, #32
 800c9fa:	2260      	movs	r2, #96	; 0x60
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	f002 fa0d 	bl	800ee1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	3320      	adds	r3, #32
 800ca06:	245f      	movs	r4, #95	; 0x5f
 800ca08:	461d      	mov	r5, r3
 800ca0a:	2c00      	cmp	r4, #0
 800ca0c:	db05      	blt.n	800ca1a <_ZN10STM32F4DMAC1Ev+0x46>
 800ca0e:	4628      	mov	r0, r5
 800ca10:	f7ff ffd2 	bl	800c9b8 <_ZN8touchgfx6BlitOpC1Ev>
 800ca14:	3520      	adds	r5, #32
 800ca16:	3c01      	subs	r4, #1
 800ca18:	e7f7      	b.n	800ca0a <_ZN10STM32F4DMAC1Ev+0x36>
{}
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bdb0      	pop	{r4, r5, r7, pc}
 800ca24:	0801f550 	.word	0x0801f550

0800ca28 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	4a0b      	ldr	r2, [pc, #44]	; (800ca60 <_ZN10STM32F4DMAD1Ev+0x38>)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 800ca36:	480b      	ldr	r0, [pc, #44]	; (800ca64 <_ZN10STM32F4DMAD1Ev+0x3c>)
 800ca38:	f7f5 fd4a 	bl	80024d0 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 800ca3c:	205a      	movs	r0, #90	; 0x5a
 800ca3e:	f7ff fe8f 	bl	800c760 <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	330c      	adds	r3, #12
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 faa0 	bl	800cf8c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7ff ff0c 	bl	800c86c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4618      	mov	r0, r3
 800ca58:	3708      	adds	r7, #8
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	0801f550 	.word	0x0801f550
 800ca64:	2000a324 	.word	0x2000a324

0800ca68 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
}
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f7ff ffd9 	bl	800ca28 <_ZN10STM32F4DMAD1Ev>
 800ca76:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f010 fece 	bl	801d81c <_ZdlPvj>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4618      	mov	r0, r3
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 800ca94:	4b09      	ldr	r3, [pc, #36]	; (800cabc <_ZN10STM32F4DMA10initializeEv+0x30>)
 800ca96:	4a0a      	ldr	r2, [pc, #40]	; (800cac0 <_ZN10STM32F4DMA10initializeEv+0x34>)
 800ca98:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 800ca9a:	4808      	ldr	r0, [pc, #32]	; (800cabc <_ZN10STM32F4DMA10initializeEv+0x30>)
 800ca9c:	f7f5 fcce 	bl	800243c <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800caa0:	4b06      	ldr	r3, [pc, #24]	; (800cabc <_ZN10STM32F4DMA10initializeEv+0x30>)
 800caa2:	4a08      	ldr	r2, [pc, #32]	; (800cac4 <_ZN10STM32F4DMA10initializeEv+0x38>)
 800caa4:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800caa6:	4b05      	ldr	r3, [pc, #20]	; (800cabc <_ZN10STM32F4DMA10initializeEv+0x30>)
 800caa8:	4a07      	ldr	r2, [pc, #28]	; (800cac8 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 800caaa:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 800caac:	205a      	movs	r0, #90	; 0x5a
 800caae:	f7ff fe37 	bl	800c720 <__NVIC_EnableIRQ>
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	2000a324 	.word	0x2000a324
 800cac0:	4002b000 	.word	0x4002b000
 800cac4:	0800c97d 	.word	0x0800c97d
 800cac8:	0800c999 	.word	0x0800c999

0800cacc <_ZN10STM32F4DMA11getBlitCapsEv>:

BlitOperations STM32F4DMA::getBlitCaps()
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800cad4:	f240 13ef 	movw	r3, #495	; 0x1ef
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b08d      	sub	sp, #52	; 0x34
 800cae8:	af02      	add	r7, sp, #8
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 800caee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800caf2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800cafc:	2b20      	cmp	r3, #32
 800cafe:	d007      	beq.n	800cb10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	2b40      	cmp	r3, #64	; 0x40
 800cb06:	d003      	beq.n	800cb10 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	2b04      	cmp	r3, #4
 800cb0e:	d101      	bne.n	800cb14 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 800cb10:	2301      	movs	r3, #1
 800cb12:	e000      	b.n	800cb16 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 800cb14:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 800cb16:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 800cb1c:	2b80      	cmp	r3, #128	; 0x80
 800cb1e:	d004      	beq.n	800cb2a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb28:	d101      	bne.n	800cb2e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e000      	b.n	800cb30 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 800cb2e:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 800cb30:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 800cb32:	f7fd fd71 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800cb36:	4602      	mov	r2, r0
 800cb38:	6813      	ldr	r3, [r2, #0]
 800cb3a:	3320      	adds	r3, #32
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4610      	mov	r0, r2
 800cb40:	4798      	blx	r3
 800cb42:	4603      	mov	r3, r0
 800cb44:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b40      	cmp	r3, #64	; 0x40
 800cb4c:	d01d      	beq.n	800cb8a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800cb4e:	2b40      	cmp	r3, #64	; 0x40
 800cb50:	d804      	bhi.n	800cb5c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 800cb52:	2b04      	cmp	r3, #4
 800cb54:	d00e      	beq.n	800cb74 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800cb56:	2b20      	cmp	r3, #32
 800cb58:	d017      	beq.n	800cb8a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 800cb5a:	e019      	b.n	800cb90 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 800cb5c:	2b80      	cmp	r3, #128	; 0x80
 800cb5e:	d003      	beq.n	800cb68 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 800cb60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb64:	d003      	beq.n	800cb6e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 800cb66:	e013      	b.n	800cb90 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 800cb68:	230a      	movs	r3, #10
 800cb6a:	623b      	str	r3, [r7, #32]
        break;
 800cb6c:	e01a      	b.n	800cba4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 800cb6e:	2309      	movs	r3, #9
 800cb70:	623b      	str	r3, [r7, #32]
        break;
 800cb72:	e017      	b.n	800cba4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800cb74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800cb7a:	7f7b      	ldrb	r3, [r7, #29]
 800cb7c:	2b10      	cmp	r3, #16
 800cb7e:	d101      	bne.n	800cb84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 800cb80:	2302      	movs	r3, #2
 800cb82:	e000      	b.n	800cb86 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 800cb84:	2301      	movs	r3, #1
 800cb86:	623b      	str	r3, [r7, #32]
        break;
 800cb88:	e00c      	b.n	800cba4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	623b      	str	r3, [r7, #32]
        break;
 800cb8e:	e009      	b.n	800cba4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 800cb90:	2300      	movs	r3, #0
 800cb92:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800cb94:	7f7b      	ldrb	r3, [r7, #29]
 800cb96:	2b10      	cmp	r3, #16
 800cb98:	d101      	bne.n	800cb9e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 800cb9a:	2302      	movs	r3, #2
 800cb9c:	e000      	b.n	800cba0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	623b      	str	r3, [r7, #32]
        break;
 800cba2:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800cba4:	4a76      	ldr	r2, [pc, #472]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800cbaa:	7f7b      	ldrb	r3, [r7, #29]
 800cbac:	2b10      	cmp	r3, #16
 800cbae:	d101      	bne.n	800cbb4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e000      	b.n	800cbb6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	4a72      	ldr	r2, [pc, #456]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cbb8:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	8adb      	ldrh	r3, [r3, #22]
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	8a1b      	ldrh	r3, [r3, #16]
 800cbc4:	1ad3      	subs	r3, r2, r3
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	4b6d      	ldr	r3, [pc, #436]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cbca:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800cbcc:	7f7b      	ldrb	r3, [r7, #29]
 800cbce:	2b10      	cmp	r3, #16
 800cbd0:	d101      	bne.n	800cbd6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 800cbd2:	2202      	movs	r2, #2
 800cbd4:	e000      	b.n	800cbd8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 800cbd6:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	8adb      	ldrh	r3, [r3, #22]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	8a1b      	ldrh	r3, [r3, #16]
 800cbe2:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800cbe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cbe6:	4866      	ldr	r0, [pc, #408]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cbe8:	f7ff fe9a 	bl	800c920 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800cbec:	4a64      	ldr	r2, [pc, #400]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cbee:	6a3b      	ldr	r3, [r7, #32]
 800cbf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	8a9b      	ldrh	r3, [r3, #20]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	8a1b      	ldrh	r3, [r3, #16]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4b5f      	ldr	r3, [pc, #380]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cc02:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 800cc04:	7ffb      	ldrb	r3, [r7, #31]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 800cc0a:	7fbb      	ldrb	r3, [r7, #30]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	f000 8082 	beq.w	800cd16 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	7f1b      	ldrb	r3, [r3, #28]
 800cc16:	2bff      	cmp	r3, #255	; 0xff
 800cc18:	d008      	beq.n	800cc2c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 800cc1a:	4b59      	ldr	r3, [pc, #356]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	7f1b      	ldrb	r3, [r3, #28]
 800cc24:	461a      	mov	r2, r3
 800cc26:	4b56      	ldr	r3, [pc, #344]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cc28:	635a      	str	r2, [r3, #52]	; 0x34
 800cc2a:	e002      	b.n	800cc32 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800cc2c:	4b54      	ldr	r3, [pc, #336]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cc2e:	2200      	movs	r2, #0
 800cc30:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 800cc32:	7fbb      	ldrb	r3, [r7, #30]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d059      	beq.n	800ccec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 800cc38:	7f7b      	ldrb	r3, [r7, #29]
 800cc3a:	2b10      	cmp	r3, #16
 800cc3c:	d14a      	bne.n	800ccd4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	3318      	adds	r3, #24
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fdca 	bl	800c7dc <_ZNK8touchgfx9colortypecvtEv>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	12db      	asrs	r3, r3, #11
 800cc4c:	f003 021f 	and.w	r2, r3, #31
 800cc50:	4613      	mov	r3, r2
 800cc52:	021b      	lsls	r3, r3, #8
 800cc54:	1a9b      	subs	r3, r3, r2
 800cc56:	4a4b      	ldr	r2, [pc, #300]	; (800cd84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800cc58:	fb82 1203 	smull	r1, r2, r2, r3
 800cc5c:	441a      	add	r2, r3
 800cc5e:	1112      	asrs	r2, r2, #4
 800cc60:	17db      	asrs	r3, r3, #31
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	3318      	adds	r3, #24
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7ff fdb6 	bl	800c7dc <_ZNK8touchgfx9colortypecvtEv>
 800cc70:	4603      	mov	r3, r0
 800cc72:	115b      	asrs	r3, r3, #5
 800cc74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cc78:	4613      	mov	r3, r2
 800cc7a:	021b      	lsls	r3, r3, #8
 800cc7c:	1a9b      	subs	r3, r3, r2
 800cc7e:	4a42      	ldr	r2, [pc, #264]	; (800cd88 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800cc80:	fb82 1203 	smull	r1, r2, r2, r3
 800cc84:	441a      	add	r2, r3
 800cc86:	1152      	asrs	r2, r2, #5
 800cc88:	17db      	asrs	r3, r3, #31
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	3318      	adds	r3, #24
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7ff fda2 	bl	800c7dc <_ZNK8touchgfx9colortypecvtEv>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	f003 021f 	and.w	r2, r3, #31
 800cc9e:	4613      	mov	r3, r2
 800cca0:	021b      	lsls	r3, r3, #8
 800cca2:	1a9b      	subs	r3, r3, r2
 800cca4:	4a37      	ldr	r2, [pc, #220]	; (800cd84 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800cca6:	fb82 1203 	smull	r1, r2, r2, r3
 800ccaa:	441a      	add	r2, r3
 800ccac:	1112      	asrs	r2, r2, #4
 800ccae:	17db      	asrs	r3, r3, #31
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	7f1b      	ldrb	r3, [r3, #28]
 800ccb8:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	061a      	lsls	r2, r3, #24
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	041b      	lsls	r3, r3, #16
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	021b      	lsls	r3, r3, #8
 800ccc8:	431a      	orrs	r2, r3
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	4a2c      	ldr	r2, [pc, #176]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ccd0:	6353      	str	r3, [r2, #52]	; 0x34
 800ccd2:	e00b      	b.n	800ccec <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	3318      	adds	r3, #24
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7ff fd73 	bl	800c7c4 <_ZNK8touchgfx9colortype10getColor32Ev>
 800ccde:	4602      	mov	r2, r0
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	7f1b      	ldrb	r3, [r3, #28]
 800cce4:	061b      	lsls	r3, r3, #24
 800cce6:	4313      	orrs	r3, r2
 800cce8:	4a25      	ldr	r2, [pc, #148]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ccea:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	8adb      	ldrh	r3, [r3, #22]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	8a1b      	ldrh	r3, [r3, #16]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	4b21      	ldr	r3, [pc, #132]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ccfc:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800ccfe:	7f7b      	ldrb	r3, [r7, #29]
 800cd00:	2b10      	cmp	r3, #16
 800cd02:	d101      	bne.n	800cd08 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 800cd04:	2302      	movs	r3, #2
 800cd06:	e000      	b.n	800cd0a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	4a1d      	ldr	r2, [pc, #116]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cd0c:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800cd0e:	2100      	movs	r1, #0
 800cd10:	481b      	ldr	r0, [pc, #108]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cd12:	f7f5 fe5d 	bl	80029d0 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800cd16:	2101      	movs	r1, #1
 800cd18:	4819      	ldr	r0, [pc, #100]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cd1a:	f7f5 fe59 	bl	80029d0 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 800cd1e:	7ffb      	ldrb	r3, [r7, #31]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d102      	bne.n	800cd2a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 800cd24:	7fbb      	ldrb	r3, [r7, #30]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d015      	beq.n	800cd56 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cd2e:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cd34:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cd3a:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cd40:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cd46:	9301      	str	r3, [sp, #4]
 800cd48:	9200      	str	r2, [sp, #0]
 800cd4a:	4623      	mov	r3, r4
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	480c      	ldr	r0, [pc, #48]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cd50:	f7f5 fc61 	bl	8002616 <HAL_DMA2D_BlendingStart_IT>
 800cd54:	e00f      	b.n	800cd76 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 800cd5a:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 800cd60:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 800cd66:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 800cd6c:	9300      	str	r3, [sp, #0]
 800cd6e:	4603      	mov	r3, r0
 800cd70:	4803      	ldr	r0, [pc, #12]	; (800cd80 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cd72:	f7f5 fc1d 	bl	80025b0 <HAL_DMA2D_Start_IT>
    }
}
 800cd76:	bf00      	nop
 800cd78:	372c      	adds	r7, #44	; 0x2c
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd90      	pop	{r4, r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	2000a324 	.word	0x2000a324
 800cd84:	84210843 	.word	0x84210843
 800cd88:	82082083 	.word	0x82082083

0800cd8c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 800cd8c:	b590      	push	{r4, r7, lr}
 800cd8e:	b08d      	sub	sp, #52	; 0x34
 800cd90:	af02      	add	r7, sp, #8
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 800cd96:	f7fd fc3f 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	6813      	ldr	r3, [r2, #0]
 800cd9e:	3320      	adds	r3, #32
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4610      	mov	r0, r2
 800cda4:	4798      	blx	r3
 800cda6:	4603      	mov	r3, r0
 800cda8:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800cdaa:	7ffb      	ldrb	r3, [r7, #31]
 800cdac:	2b10      	cmp	r3, #16
 800cdae:	d101      	bne.n	800cdb4 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 800cdb0:	2302      	movs	r3, #2
 800cdb2:	e000      	b.n	800cdb6 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 800cdbc:	7ffb      	ldrb	r3, [r7, #31]
 800cdbe:	2b10      	cmp	r3, #16
 800cdc0:	d149      	bne.n	800ce56 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	3318      	adds	r3, #24
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7ff fd08 	bl	800c7dc <_ZNK8touchgfx9colortypecvtEv>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	12db      	asrs	r3, r3, #11
 800cdd0:	f003 021f 	and.w	r2, r3, #31
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	021b      	lsls	r3, r3, #8
 800cdd8:	1a9b      	subs	r3, r3, r2
 800cdda:	4a69      	ldr	r2, [pc, #420]	; (800cf80 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800cddc:	fb82 1203 	smull	r1, r2, r2, r3
 800cde0:	441a      	add	r2, r3
 800cde2:	1112      	asrs	r2, r2, #4
 800cde4:	17db      	asrs	r3, r3, #31
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	3318      	adds	r3, #24
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff fcf4 	bl	800c7dc <_ZNK8touchgfx9colortypecvtEv>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	115b      	asrs	r3, r3, #5
 800cdf8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	021b      	lsls	r3, r3, #8
 800ce00:	1a9b      	subs	r3, r3, r2
 800ce02:	4a60      	ldr	r2, [pc, #384]	; (800cf84 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 800ce04:	fb82 1203 	smull	r1, r2, r2, r3
 800ce08:	441a      	add	r2, r3
 800ce0a:	1152      	asrs	r2, r2, #5
 800ce0c:	17db      	asrs	r3, r3, #31
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	3318      	adds	r3, #24
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fce0 	bl	800c7dc <_ZNK8touchgfx9colortypecvtEv>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f003 021f 	and.w	r2, r3, #31
 800ce22:	4613      	mov	r3, r2
 800ce24:	021b      	lsls	r3, r3, #8
 800ce26:	1a9b      	subs	r3, r3, r2
 800ce28:	4a55      	ldr	r2, [pc, #340]	; (800cf80 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 800ce2a:	fb82 1203 	smull	r1, r2, r2, r3
 800ce2e:	441a      	add	r2, r3
 800ce30:	1112      	asrs	r2, r2, #4
 800ce32:	17db      	asrs	r3, r3, #31
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	7f1b      	ldrb	r3, [r3, #28]
 800ce3c:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	061a      	lsls	r2, r3, #24
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	041b      	lsls	r3, r3, #16
 800ce46:	431a      	orrs	r2, r3
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	021b      	lsls	r3, r3, #8
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	4313      	orrs	r3, r2
 800ce52:	623b      	str	r3, [r7, #32]
 800ce54:	e00b      	b.n	800ce6e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	7f1b      	ldrb	r3, [r3, #28]
 800ce5a:	061b      	lsls	r3, r3, #24
 800ce5c:	461c      	mov	r4, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	3318      	adds	r3, #24
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7ff fcae 	bl	800c7c4 <_ZNK8touchgfx9colortype10getColor32Ev>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	4323      	orrs	r3, r4
 800ce6c:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b08      	cmp	r3, #8
 800ce74:	d103      	bne.n	800ce7e <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 800ce76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce7c:	e003      	b.n	800ce86 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 800ce7e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800ce82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce84:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 800ce86:	4a40      	ldr	r2, [pc, #256]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 800ce8c:	7ffb      	ldrb	r3, [r7, #31]
 800ce8e:	2b10      	cmp	r3, #16
 800ce90:	d101      	bne.n	800ce96 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 800ce92:	2302      	movs	r3, #2
 800ce94:	e000      	b.n	800ce98 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 800ce96:	2301      	movs	r3, #1
 800ce98:	4a3b      	ldr	r2, [pc, #236]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800ce9a:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	8adb      	ldrh	r3, [r3, #22]
 800cea0:	461a      	mov	r2, r3
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	8a1b      	ldrh	r3, [r3, #16]
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4b37      	ldr	r3, [pc, #220]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800ceac:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800ceae:	7ffb      	ldrb	r3, [r7, #31]
 800ceb0:	2b10      	cmp	r3, #16
 800ceb2:	d101      	bne.n	800ceb8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 800ceb4:	2202      	movs	r2, #2
 800ceb6:	e000      	b.n	800ceba <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 800ceb8:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	8adb      	ldrh	r3, [r3, #22]
 800cebe:	4619      	mov	r1, r3
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	8a1b      	ldrh	r3, [r3, #16]
 800cec4:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 800cec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cec8:	482f      	ldr	r0, [pc, #188]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800ceca:	f7ff fd29 	bl	800c920 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800cece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ced4:	d11e      	bne.n	800cf14 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
    {
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 800ced6:	4b2c      	ldr	r3, [pc, #176]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800ced8:	2201      	movs	r2, #1
 800ceda:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 800cedc:	4a2a      	ldr	r2, [pc, #168]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 800cee2:	4b29      	ldr	r3, [pc, #164]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cee4:	2209      	movs	r2, #9
 800cee6:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	8adb      	ldrh	r3, [r3, #22]
 800ceec:	461a      	mov	r2, r3
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	8a1b      	ldrh	r3, [r3, #16]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	461a      	mov	r2, r3
 800cef6:	4b24      	ldr	r3, [pc, #144]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cef8:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 800cefa:	7ffb      	ldrb	r3, [r7, #31]
 800cefc:	2b10      	cmp	r3, #16
 800cefe:	d101      	bne.n	800cf04 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 800cf00:	2302      	movs	r3, #2
 800cf02:	e000      	b.n	800cf06 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 800cf04:	2301      	movs	r3, #1
 800cf06:	4a20      	ldr	r2, [pc, #128]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf08:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	481e      	ldr	r0, [pc, #120]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf0e:	f7f5 fd5f 	bl	80029d0 <HAL_DMA2D_ConfigLayer>
 800cf12:	e005      	b.n	800cf20 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    }
    else
    {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 800cf14:	4a1c      	ldr	r2, [pc, #112]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 800cf1a:	4b1b      	ldr	r3, [pc, #108]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 800cf20:	2101      	movs	r1, #1
 800cf22:	4819      	ldr	r0, [pc, #100]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf24:	f7f5 fd54 	bl	80029d0 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 800cf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf2e:	d115      	bne.n	800cf5c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cf34:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cf3a:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cf40:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cf46:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	9200      	str	r2, [sp, #0]
 800cf50:	4623      	mov	r3, r4
 800cf52:	4602      	mov	r2, r0
 800cf54:	480c      	ldr	r0, [pc, #48]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf56:	f7f5 fb5e 	bl	8002616 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 800cf5a:	e00d      	b.n	800cf78 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800cf66:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	460b      	mov	r3, r1
 800cf70:	6a39      	ldr	r1, [r7, #32]
 800cf72:	4805      	ldr	r0, [pc, #20]	; (800cf88 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 800cf74:	f7f5 fb1c 	bl	80025b0 <HAL_DMA2D_Start_IT>
}
 800cf78:	bf00      	nop
 800cf7a:	372c      	adds	r7, #44	; 0x2c
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd90      	pop	{r4, r7, pc}
 800cf80:	84210843 	.word	0x84210843
 800cf84:	82082083 	.word	0x82082083
 800cf88:	2000a324 	.word	0x2000a324

0800cf8c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	4a05      	ldr	r2, [pc, #20]	; (800cfac <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7ff fc2b 	bl	800c7f8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	08020174 	.word	0x08020174

0800cfb0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f7ff ffe7 	bl	800cf8c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800cfbe:	2114      	movs	r1, #20
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f010 fc2b 	bl	801d81c <_ZdlPvj>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 800cfd0:	b480      	push	{r7}
 800cfd2:	b083      	sub	sp, #12
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
        texts = t;
 800cfd8:	4a04      	ldr	r2, [pc, #16]	; (800cfec <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6013      	str	r3, [r2, #0]
    }
 800cfde:	bf00      	nop
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop
 800cfec:	20009f84 	.word	0x20009f84

0800cff0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800cff0:	b480      	push	{r7}
 800cff2:	b085      	sub	sp, #20
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
 800cffc:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 800cffe:	4a0b      	ldr	r2, [pc, #44]	; (800d02c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	605a      	str	r2, [r3, #4]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	609a      	str	r2, [r3, #8]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	69ba      	ldr	r2, [r7, #24]
 800d01a:	611a      	str	r2, [r3, #16]
    {
    }
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	0801f6bc 	.word	0x0801f6bc

0800d030 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
    {
 800d038:	4a04      	ldr	r2, [pc, #16]	; (800d04c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	601a      	str	r2, [r3, #0]
    }
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4618      	mov	r0, r3
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr
 800d04c:	0801f6bc 	.word	0x0801f6bc

0800d050 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
    }
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff ffe9 	bl	800d030 <_ZN8touchgfx7MVPHeapD1Ev>
 800d05e:	2114      	movs	r1, #20
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f010 fbdb 	bl	801d81c <_ZdlPvj>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4618      	mov	r0, r3
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <_ZN8touchgfx3LCDD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~LCD()
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
    {
 800d078:	4a04      	ldr	r2, [pc, #16]	; (800d08c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	601a      	str	r2, [r3, #0]
    }
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4618      	mov	r0, r3
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	08020514 	.word	0x08020514

0800d090 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
    }
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff ffe9 	bl	800d070 <_ZN8touchgfx3LCDD1Ev>
 800d09e:	2108      	movs	r1, #8
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f010 fbbb 	bl	801d81c <_ZdlPvj>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	801a      	strh	r2, [r3, #0]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	805a      	strh	r2, [r3, #2]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	809a      	strh	r2, [r3, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	80da      	strh	r2, [r3, #6]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	811a      	strh	r2, [r3, #8]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	815a      	strh	r2, [r3, #10]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	819a      	strh	r2, [r3, #12]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	739a      	strb	r2, [r3, #14]
        {
        }
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff ffd5 	bl	800d0b0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	611a      	str	r2, [r3, #16]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	829a      	strh	r2, [r3, #20]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 800d12a:	4a44      	ldr	r2, [pc, #272]	; (800d23c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	68ba      	ldr	r2, [r7, #8]
 800d134:	605a      	str	r2, [r3, #4]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	609a      	str	r2, [r3, #8]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	60da      	str	r2, [r3, #12]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	611a      	str	r2, [r3, #16]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	615a      	str	r2, [r3, #20]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2200      	movs	r2, #0
 800d152:	619a      	str	r2, [r3, #24]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	331c      	adds	r3, #28
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff ffcc 	bl	800d0f6 <_ZN8touchgfx8GesturesC1Ev>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2200      	movs	r2, #0
 800d162:	639a      	str	r2, [r3, #56]	; 0x38
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	63da      	str	r2, [r3, #60]	; 0x3c
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2200      	movs	r2, #0
 800d16e:	641a      	str	r2, [r3, #64]	; 0x40
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2200      	movs	r2, #0
 800d174:	645a      	str	r2, [r3, #68]	; 0x44
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2201      	movs	r2, #1
 800d182:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2201      	movs	r2, #1
 800d18a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	64da      	str	r2, [r3, #76]	; 0x4c
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3350      	adds	r3, #80	; 0x50
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fd fe68 	bl	800ae6e <_ZN8touchgfx4RectC1Ev>
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	671a      	str	r2, [r3, #112]	; 0x70
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 800d1f4:	4a12      	ldr	r2, [pc, #72]	; (800d240 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 800d1fa:	4a12      	ldr	r2, [pc, #72]	; (800d244 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800d1fc:	8b3b      	ldrh	r3, [r7, #24]
 800d1fe:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 800d200:	4a11      	ldr	r2, [pc, #68]	; (800d248 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800d202:	8bbb      	ldrh	r3, [r7, #28]
 800d204:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 800d206:	4b11      	ldr	r3, [pc, #68]	; (800d24c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 800d20e:	881a      	ldrh	r2, [r3, #0]
 800d210:	4b0f      	ldr	r3, [pc, #60]	; (800d250 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 800d212:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 800d214:	4b0c      	ldr	r3, [pc, #48]	; (800d248 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 800d216:	881a      	ldrh	r2, [r3, #0]
 800d218:	4b0e      	ldr	r3, [pc, #56]	; (800d254 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 800d21a:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800d21c:	8b3a      	ldrh	r2, [r7, #24]
 800d21e:	8bbb      	ldrh	r3, [r7, #28]
 800d220:	429a      	cmp	r2, r3
 800d222:	d301      	bcc.n	800d228 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 800d224:	2200      	movs	r2, #0
 800d226:	e000      	b.n	800d22a <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 800d228:	2201      	movs	r2, #1
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	0801fce0 	.word	0x0801fce0
 800d240:	20009f08 	.word	0x20009f08
 800d244:	20009efc 	.word	0x20009efc
 800d248:	20009efe 	.word	0x20009efe
 800d24c:	20009f00 	.word	0x20009f00
 800d250:	20009f02 	.word	0x20009f02
 800d254:	20009f04 	.word	0x20009f04

0800d258 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f7fd fbfb 	bl	800aa60 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800d26a:	bf00      	nop
 800d26c:	3708      	adds	r7, #8
 800d26e:	46bd      	mov	sp, r7
 800d270:	bd80      	pop	{r7, pc}
	...

0800d274 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af02      	add	r7, sp, #8
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
 800d280:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	9300      	str	r3, [sp, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	68b9      	ldr	r1, [r7, #8]
 800d28e:	f7ff feaf 	bl	800cff0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800d292:	4a04      	ldr	r2, [pc, #16]	; (800d2a4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	601a      	str	r2, [r3, #0]
    {

    }
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	0801f6a8 	.word	0x0801f6a8

0800d2a8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	4801      	ldr	r0, [pc, #4]	; (800d2b4 <__tcf_0+0xc>)
 800d2ae:	f000 f9d3 	bl	800d658 <_ZN12FrontendHeapD1Ev>
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	20008f68 	.word	0x20008f68

0800d2b8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800d2bc:	4b08      	ldr	r3, [pc, #32]	; (800d2e0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 0301 	and.w	r3, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d108      	bne.n	800d2da <_ZN12FrontendHeap11getInstanceEv+0x22>
 800d2c8:	4806      	ldr	r0, [pc, #24]	; (800d2e4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 800d2ca:	f000 f831 	bl	800d330 <_ZN12FrontendHeapC1Ev>
 800d2ce:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	4804      	ldr	r0, [pc, #16]	; (800d2e8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 800d2d6:	f010 faeb 	bl	801d8b0 <atexit>
        return instance;
 800d2da:	4b02      	ldr	r3, [pc, #8]	; (800d2e4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 800d2dc:	4618      	mov	r0, r3
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	200091dc 	.word	0x200091dc
 800d2e4:	20008f68 	.word	0x20008f68
 800d2e8:	0800d2a9 	.word	0x0800d2a9

0800d2ec <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	4a05      	ldr	r2, [pc, #20]	; (800d30c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	601a      	str	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff fe97 	bl	800d030 <_ZN8touchgfx7MVPHeapD1Ev>
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	0801f6a8 	.word	0x0801f6a8

0800d310 <_ZN16FrontendHeapBaseD0Ev>:
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff ffe7 	bl	800d2ec <_ZN16FrontendHeapBaseD1Ev>
 800d31e:	2114      	movs	r1, #20
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f010 fa7b 	bl	801d81c <_ZdlPvj>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	4618      	mov	r0, r3
 800d32a:	3708      	adds	r7, #8
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800d330:	b590      	push	{r4, r7, lr}
 800d332:	b085      	sub	sp, #20
 800d334:	af02      	add	r7, sp, #8
 800d336:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f103 0114 	add.w	r1, r3, #20
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	4623      	mov	r3, r4
 800d356:	f7ff ff8d 	bl	800d274 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800d35a:	4a18      	ldr	r2, [pc, #96]	; (800d3bc <_ZN12FrontendHeapC1Ev+0x8c>)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	601a      	str	r2, [r3, #0]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	3314      	adds	r3, #20
 800d364:	4618      	mov	r0, r3
 800d366:	f000 f8db 	bl	800d520 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	332c      	adds	r3, #44	; 0x2c
 800d36e:	4618      	mov	r0, r3
 800d370:	f000 f90a 	bl	800d588 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 f938 	bl	800d5f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f503 7090 	add.w	r0, r3, #288	; 0x120
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	4619      	mov	r1, r3
 800d390:	f7fe fb92 	bl	800bab8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fe fba2 	bl	800bae4 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 800d3a0:	687a      	ldr	r2, [r7, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	4610      	mov	r0, r2
 800d3ac:	f7ff ff54 	bl	800d258 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd90      	pop	{r4, r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	0801f5f8 	.word	0x0801f5f8

0800d3c0 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
{
public:
    LCD16bpp();

    virtual ~LCD16bpp()
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
    {
 800d3c8:	4a05      	ldr	r2, [pc, #20]	; (800d3e0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	601a      	str	r2, [r3, #0]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff fe4d 	bl	800d070 <_ZN8touchgfx3LCDD1Ev>
    }
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	080217b0 	.word	0x080217b0

0800d3e4 <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
    }
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f7ff ffe7 	bl	800d3c0 <_ZN8touchgfx8LCD16bppD1Ev>
 800d3f2:	2178      	movs	r1, #120	; 0x78
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f010 fa11 	bl	801d81c <_ZdlPvj>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af02      	add	r7, sp, #8
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	603b      	str	r3, [r7, #0]
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	8bbb      	ldrh	r3, [r7, #28]
 800d416:	9301      	str	r3, [sp, #4]
 800d418:	8b3b      	ldrh	r3, [r7, #24]
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	687a      	ldr	r2, [r7, #4]
 800d420:	68b9      	ldr	r1, [r7, #8]
 800d422:	f7ff fe7b 	bl	800d11c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800d426:	4a04      	ldr	r2, [pc, #16]	; (800d438 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	601a      	str	r2, [r3, #0]
    }
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	0801f6cc 	.word	0x0801f6cc

0800d43c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b086      	sub	sp, #24
 800d440:	af02      	add	r7, sp, #8
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	8bbb      	ldrh	r3, [r7, #28]
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	8b3b      	ldrh	r3, [r7, #24]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	f7ff ffd3 	bl	800d404 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d45e:	4a04      	ldr	r2, [pc, #16]	; (800d470 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	601a      	str	r2, [r3, #0]
    {
    }
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	0801f2f4 	.word	0x0801f2f4

0800d474 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	4a04      	ldr	r2, [pc, #16]	; (800d490 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	4618      	mov	r0, r3
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	0801f2dc 	.word	0x0801f2dc

0800d494 <_ZN20STM32TouchControllerC1Ev>:

class STM32TouchController : public touchgfx::TouchController
{
public:

    STM32TouchController() {}
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff ffe8 	bl	800d474 <_ZN8touchgfx15TouchControllerC1Ev>
 800d4a4:	4a03      	ldr	r2, [pc, #12]	; (800d4b4 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	601a      	str	r2, [r3, #0]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3708      	adds	r7, #8
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	0801f2c4 	.word	0x0801f2c4

0800d4b8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 800d4b8:	b590      	push	{r4, r7, lr}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800d4be:	f7fe f9eb 	bl	800b898 <_ZN14BitmapDatabase11getInstanceEv>
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	f7fe f9f2 	bl	800b8ac <_ZN14BitmapDatabase15getInstanceSizeEv>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f004 fd01 	bl	8011edc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800d4da:	4809      	ldr	r0, [pc, #36]	; (800d500 <touchgfx_init+0x48>)
 800d4dc:	f7ff fd78 	bl	800cfd0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800d4e0:	2000      	movs	r0, #0
 800d4e2:	f7fe fa07 	bl	800b8f4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800d4e6:	4807      	ldr	r0, [pc, #28]	; (800d504 <touchgfx_init+0x4c>)
 800d4e8:	f004 fc46 	bl	8011d78 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800d4ec:	f7ff fee4 	bl	800d2b8 <_ZN12FrontendHeap11getInstanceEv>
 800d4f0:	6078      	str	r0, [r7, #4]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.initialize();
 800d4f2:	4805      	ldr	r0, [pc, #20]	; (800d508 <touchgfx_init+0x50>)
 800d4f4:	f7fe ffa4 	bl	800c440 <_ZN11TouchGFXHAL10initializeEv>
}
 800d4f8:	bf00      	nop
 800d4fa:	370c      	adds	r7, #12
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd90      	pop	{r4, r7, pc}
 800d500:	20009e7c 	.word	0x20009e7c
 800d504:	20000090 	.word	0x20000090
 800d508:	20009e80 	.word	0x20009e80

0800d50c <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800d510:	4802      	ldr	r0, [pc, #8]	; (800d51c <touchgfx_taskEntry+0x10>)
 800d512:	f7fe ffa1 	bl	800c458 <_ZN11TouchGFXHAL9taskEntryEv>
}
 800d516:	bf00      	nop
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	20009e80 	.word	0x20009e80

0800d520 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 800d520:	b580      	push	{r7, lr}
 800d522:	b082      	sub	sp, #8
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 fbf4 	bl	800dd18 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d530:	4a03      	ldr	r2, [pc, #12]	; (800d540 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	601a      	str	r2, [r3, #0]
    {
    }
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4618      	mov	r0, r3
 800d53a:	3708      	adds	r7, #8
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	0801f674 	.word	0x0801f674

0800d544 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
    {
    }
 800d54c:	4a05      	ldr	r2, [pc, #20]	; (800d564 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	601a      	str	r2, [r3, #0]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fbdd 	bl	800dd14 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4618      	mov	r0, r3
 800d55e:	3708      	adds	r7, #8
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	0801f674 	.word	0x0801f674

0800d568 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
    }
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff ffe7 	bl	800d544 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d576:	2118      	movs	r1, #24
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f010 f94f 	bl	801d81c <_ZdlPvj>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 fbc0 	bl	800dd18 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d598:	4a03      	ldr	r2, [pc, #12]	; (800d5a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	601a      	str	r2, [r3, #0]
    }
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	0801f640 	.word	0x0801f640

0800d5ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b082      	sub	sp, #8
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
    }
 800d5b4:	4a05      	ldr	r2, [pc, #20]	; (800d5cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	601a      	str	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f000 fba9 	bl	800dd14 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	0801f640 	.word	0x0801f640

0800d5d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
    }
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7ff ffe7 	bl	800d5ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d5de:	21e0      	movs	r1, #224	; 0xe0
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f010 f91b 	bl	801d81c <_ZdlPvj>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fb8c 	bl	800dd18 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d600:	4a03      	ldr	r2, [pc, #12]	; (800d610 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	601a      	str	r2, [r3, #0]
    }
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	0801f60c 	.word	0x0801f60c

0800d614 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
    }
 800d61c:	4a05      	ldr	r2, [pc, #20]	; (800d634 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fb75 	bl	800dd14 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	4618      	mov	r0, r3
 800d62e:	3708      	adds	r7, #8
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}
 800d634:	0801f60c 	.word	0x0801f60c

0800d638 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
    }
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff ffe7 	bl	800d614 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d646:	2114      	movs	r1, #20
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f010 f8e7 	bl	801d81c <_ZdlPvj>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	4a10      	ldr	r2, [pc, #64]	; (800d6a4 <_ZN12FrontendHeapD1Ev+0x4c>)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	601a      	str	r2, [r3, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fe f9ed 	bl	800ba4c <_ZN19FrontendApplicationD1Ev>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800d678:	4618      	mov	r0, r3
 800d67a:	f7ff ffcb 	bl	800d614 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	332c      	adds	r3, #44	; 0x2c
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff ff92 	bl	800d5ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3314      	adds	r3, #20
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7ff ff59 	bl	800d544 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4618      	mov	r0, r3
 800d696:	f7ff fe29 	bl	800d2ec <_ZN16FrontendHeapBaseD1Ev>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	3708      	adds	r7, #8
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}
 800d6a4:	0801f5f8 	.word	0x0801f5f8

0800d6a8 <_ZN12FrontendHeapD0Ev>:
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff ffd1 	bl	800d658 <_ZN12FrontendHeapD1Ev>
 800d6b6:	f44f 711d 	mov.w	r1, #628	; 0x274
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f010 f8ae 	bl	801d81c <_ZdlPvj>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <_Z41__static_initialization_and_destruction_0ii>:
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af02      	add	r7, sp, #8
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d118      	bne.n	800d70e <_Z41__static_initialization_and_destruction_0ii+0x42>
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d113      	bne.n	800d70e <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 800d6e6:	4817      	ldr	r0, [pc, #92]	; (800d744 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800d6e8:	f7ff fed4 	bl	800d494 <_ZN20STM32TouchControllerC1Ev>
static STM32F4DMA dma;
 800d6ec:	4816      	ldr	r0, [pc, #88]	; (800d748 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d6ee:	f7ff f971 	bl	800c9d4 <_ZN10STM32F4DMAC1Ev>
static LCD16bpp display;
 800d6f2:	4816      	ldr	r0, [pc, #88]	; (800d74c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d6f4:	f007 fbf6 	bl	8014ee4 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 800d6f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	23f0      	movs	r3, #240	; 0xf0
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	4b10      	ldr	r3, [pc, #64]	; (800d744 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800d704:	4a11      	ldr	r2, [pc, #68]	; (800d74c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d706:	4910      	ldr	r1, [pc, #64]	; (800d748 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d708:	4811      	ldr	r0, [pc, #68]	; (800d750 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d70a:	f7ff fe97 	bl	800d43c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d113      	bne.n	800d73c <_Z41__static_initialization_and_destruction_0ii+0x70>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d71a:	4293      	cmp	r3, r2
 800d71c:	d10e      	bne.n	800d73c <_Z41__static_initialization_and_destruction_0ii+0x70>
 800d71e:	480c      	ldr	r0, [pc, #48]	; (800d750 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d720:	f7fe ff1a 	bl	800c558 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800d724:	480b      	ldr	r0, [pc, #44]	; (800d754 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d726:	f7fc fbab 	bl	8009e80 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 800d72a:	4808      	ldr	r0, [pc, #32]	; (800d74c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d72c:	f7ff fe48 	bl	800d3c0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32F4DMA dma;
 800d730:	4805      	ldr	r0, [pc, #20]	; (800d748 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d732:	f7ff f979 	bl	800ca28 <_ZN10STM32F4DMAD1Ev>
static STM32TouchController tc;
 800d736:	4803      	ldr	r0, [pc, #12]	; (800d744 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800d738:	f7fe fc52 	bl	800bfe0 <_ZN20STM32TouchControllerD1Ev>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	200091e0 	.word	0x200091e0
 800d748:	200091e4 	.word	0x200091e4
 800d74c:	20009e04 	.word	0x20009e04
 800d750:	20009e80 	.word	0x20009e80
 800d754:	20000090 	.word	0x20000090

0800d758 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800d760:	2301      	movs	r3, #1
    }
 800d762:	4618      	mov	r0, r3
 800d764:	370c      	adds	r7, #12
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800d776:	230c      	movs	r3, #12
    }
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	460b      	mov	r3, r1
 800d78e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d790:	887a      	ldrh	r2, [r7, #2]
 800d792:	4613      	mov	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4413      	add	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	3308      	adds	r3, #8
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	4413      	add	r3, r2
    }
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d7b8:	887a      	ldrh	r2, [r7, #2]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4413      	add	r3, r2
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	4413      	add	r3, r2
    }
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d7dc:	2301      	movs	r3, #1
    }
 800d7de:	4618      	mov	r0, r3
 800d7e0:	370c      	adds	r7, #12
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d7ea:	b480      	push	{r7}
 800d7ec:	b083      	sub	sp, #12
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d7f2:	23d8      	movs	r3, #216	; 0xd8
    }
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	370c      	adds	r7, #12
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr

0800d800 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d80c:	887b      	ldrh	r3, [r7, #2]
 800d80e:	22d8      	movs	r2, #216	; 0xd8
 800d810:	fb02 f303 	mul.w	r3, r2, r3
 800d814:	3308      	adds	r3, #8
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	4413      	add	r3, r2
    }
 800d81a:	4618      	mov	r0, r3
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d832:	887b      	ldrh	r3, [r7, #2]
 800d834:	22d8      	movs	r2, #216	; 0xd8
 800d836:	fb02 f303 	mul.w	r3, r2, r3
 800d83a:	3308      	adds	r3, #8
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	4413      	add	r3, r2
    }
 800d840:	4618      	mov	r0, r3
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d854:	2301      	movs	r3, #1
    }
 800d856:	4618      	mov	r0, r3
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d862:	b480      	push	{r7}
 800d864:	b083      	sub	sp, #12
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d86a:	2310      	movs	r3, #16
    }
 800d86c:	4618      	mov	r0, r3
 800d86e:	370c      	adds	r7, #12
 800d870:	46bd      	mov	sp, r7
 800d872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d876:	4770      	bx	lr

0800d878 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	460b      	mov	r3, r1
 800d882:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d884:	887b      	ldrh	r3, [r7, #2]
 800d886:	011b      	lsls	r3, r3, #4
 800d888:	3308      	adds	r3, #8
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	4413      	add	r3, r2
    }
 800d88e:	4618      	mov	r0, r3
 800d890:	370c      	adds	r7, #12
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d89a:	b480      	push	{r7}
 800d89c:	b083      	sub	sp, #12
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d8a6:	887b      	ldrh	r3, [r7, #2]
 800d8a8:	011b      	lsls	r3, r3, #4
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	4413      	add	r3, r2
    }
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <_GLOBAL__sub_I_touchgfx_init>:
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d8c4:	2001      	movs	r0, #1
 800d8c6:	f7ff ff01 	bl	800d6cc <_Z41__static_initialization_and_destruction_0ii>
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <_GLOBAL__sub_D_touchgfx_init>:
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d8d4:	2000      	movs	r0, #0
 800d8d6:	f7ff fef9 	bl	800d6cc <_Z41__static_initialization_and_destruction_0ii>
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	3318      	adds	r3, #24
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	4798      	blx	r3
    }
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 800d8f8:	b480      	push	{r7}
 800d8fa:	b083      	sub	sp, #12
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	78fa      	ldrb	r2, [r7, #3]
 800d908:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 800d90c:	bf00      	nop
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800d926:	3301      	adds	r3, #1
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <__NVIC_EnableIRQ>:
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	db0d      	blt.n	800d96a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 021f 	and.w	r2, r3, #31
 800d958:	4907      	ldr	r1, [pc, #28]	; (800d978 <__NVIC_EnableIRQ+0x3c>)
 800d95a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d95e:	095b      	lsrs	r3, r3, #5
 800d960:	2001      	movs	r0, #1
 800d962:	fa00 f202 	lsl.w	r2, r0, r2
 800d966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d96a:	bf00      	nop
 800d96c:	370c      	adds	r7, #12
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr
 800d976:	bf00      	nop
 800d978:	e000e100 	.word	0xe000e100

0800d97c <__NVIC_DisableIRQ>:
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	db12      	blt.n	800d9b4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d98e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 021f 	and.w	r2, r3, #31
 800d998:	4909      	ldr	r1, [pc, #36]	; (800d9c0 <__NVIC_DisableIRQ+0x44>)
 800d99a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d99e:	095b      	lsrs	r3, r3, #5
 800d9a0:	2001      	movs	r0, #1
 800d9a2:	fa00 f202 	lsl.w	r2, r0, r2
 800d9a6:	3320      	adds	r3, #32
 800d9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d9ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d9b0:	f3bf 8f6f 	isb	sy
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	e000e100 	.word	0xe000e100

0800d9c4 <__NVIC_SetPriority>:
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	6039      	str	r1, [r7, #0]
 800d9ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d9d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	db0c      	blt.n	800d9f2 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	b2db      	uxtb	r3, r3
 800d9dc:	4a0e      	ldr	r2, [pc, #56]	; (800da18 <__NVIC_SetPriority+0x54>)
 800d9de:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	b2d9      	uxtb	r1, r3
 800d9e8:	1813      	adds	r3, r2, r0
 800d9ea:	460a      	mov	r2, r1
 800d9ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d9f0:	e00c      	b.n	800da0c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	4909      	ldr	r1, [pc, #36]	; (800da1c <__NVIC_SetPriority+0x58>)
 800d9f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 030f 	and.w	r3, r3, #15
 800da02:	3b04      	subs	r3, #4
 800da04:	0112      	lsls	r2, r2, #4
 800da06:	b2d2      	uxtb	r2, r2
 800da08:	440b      	add	r3, r1
 800da0a:	761a      	strb	r2, [r3, #24]
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr
 800da18:	e000e100 	.word	0xe000e100
 800da1c:	e000ed00 	.word	0xe000ed00

0800da20 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800da20:	b5b0      	push	{r4, r5, r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 fe48 	bl	800e6c0 <_ZN8touchgfx3HAL10initializeEv>

    registerEventListener(*(touchgfx::Application::getInstance()));
 800da30:	687d      	ldr	r5, [r7, #4]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	334c      	adds	r3, #76	; 0x4c
 800da38:	681c      	ldr	r4, [r3, #0]
 800da3a:	f002 fc9d 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 800da3e:	4603      	mov	r3, r0
 800da40:	4619      	mov	r1, r3
 800da42:	4628      	mov	r0, r5
 800da44:	47a0      	blx	r4

    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	3374      	adds	r3, #116	; 0x74
 800da4e:	681c      	ldr	r4, [r3, #0]
 800da50:	4a06      	ldr	r2, [pc, #24]	; (800da6c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 800da52:	2300      	movs	r3, #0
 800da54:	4906      	ldr	r1, [pc, #24]	; (800da70 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x50>)
 800da56:	47a0      	blx	r4
     * updating the display. If not locked, DMA transfers will begin as soon as
     * possible. Default is true (DMA is locked with TFT).
     *
     * Setting to false to increase performance when using double buffering
     */
    lockDMAToFrontPorch(false);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2100      	movs	r1, #0
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff ff4b 	bl	800d8f8 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bdb0      	pop	{r4, r5, r7, pc}
 800da6a:	bf00      	nop
 800da6c:	d0025800 	.word	0xd0025800
 800da70:	d0000000 	.word	0xd0000000

0800da74 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800da7c:	2109      	movs	r1, #9
 800da7e:	205a      	movs	r0, #90	; 0x5a
 800da80:	f7ff ffa0 	bl	800d9c4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800da84:	2109      	movs	r1, #9
 800da86:	2058      	movs	r0, #88	; 0x58
 800da88:	f7ff ff9c 	bl	800d9c4 <__NVIC_SetPriority>
}
 800da8c:	bf00      	nop
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}

0800da94 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800da9c:	205a      	movs	r0, #90	; 0x5a
 800da9e:	f7ff ff4d 	bl	800d93c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800daa2:	2058      	movs	r0, #88	; 0x58
 800daa4:	f7ff ff4a 	bl	800d93c <__NVIC_EnableIRQ>
}
 800daa8:	bf00      	nop
 800daaa:	3708      	adds	r7, #8
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800dab8:	205a      	movs	r0, #90	; 0x5a
 800daba:	f7ff ff5f 	bl	800d97c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800dabe:	2058      	movs	r0, #88	; 0x58
 800dac0:	f7ff ff5c 	bl	800d97c <__NVIC_DisableIRQ>
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800dad4:	4b11      	ldr	r3, [pc, #68]	; (800db1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	b29b      	uxth	r3, r3
 800dada:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dade:	b29b      	uxth	r3, r3
 800dae0:	3b01      	subs	r3, #1
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	4b0e      	ldr	r3, [pc, #56]	; (800db20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800dae6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800dae8:	4b0c      	ldr	r3, [pc, #48]	; (800db1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	b29b      	uxth	r3, r3
 800daee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	3b01      	subs	r3, #1
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800dafa:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800dafc:	4b08      	ldr	r3, [pc, #32]	; (800db20 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800dafe:	881a      	ldrh	r2, [r3, #0]
 800db00:	4b06      	ldr	r3, [pc, #24]	; (800db1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db02:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800db04:	4b05      	ldr	r3, [pc, #20]	; (800db1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db08:	4a04      	ldr	r2, [pc, #16]	; (800db1c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db0a:	f043 0301 	orr.w	r3, r3, #1
 800db0e:	6353      	str	r3, [r2, #52]	; 0x34
}
 800db10:	bf00      	nop
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	40016800 	.word	0x40016800
 800db20:	20009ef8 	.word	0x20009ef8
 800db24:	20009efa 	.word	0x20009efa

0800db28 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800db30:	4b03      	ldr	r3, [pc, #12]	; (800db40 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800db32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800db34:	4618      	mov	r0, r3
 800db36:	370c      	adds	r7, #12
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	40016884 	.word	0x40016884

0800db44 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800db4e:	4a06      	ldr	r2, [pc, #24]	; (800db68 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800db54:	4b05      	ldr	r3, [pc, #20]	; (800db6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800db56:	2201      	movs	r2, #1
 800db58:	625a      	str	r2, [r3, #36]	; 0x24
}
 800db5a:	bf00      	nop
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	40016884 	.word	0x40016884
 800db6c:	40016800 	.word	0x40016800

0800db70 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 faaf 	bl	800e0e2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800db84:	bf00      	nop
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
        if (LTDC->LIPCR == lcd_int_active_line)
 800db94:	4b1a      	ldr	r3, [pc, #104]	; (800dc00 <HAL_LTDC_LineEventCallback+0x74>)
 800db96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db98:	4a1a      	ldr	r2, [pc, #104]	; (800dc04 <HAL_LTDC_LineEventCallback+0x78>)
 800db9a:	8812      	ldrh	r2, [r2, #0]
 800db9c:	4293      	cmp	r3, r2
 800db9e:	bf0c      	ite	eq
 800dba0:	2301      	moveq	r3, #1
 800dba2:	2300      	movne	r3, #0
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d017      	beq.n	800dbda <HAL_LTDC_LineEventCallback+0x4e>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800dbaa:	4b17      	ldr	r3, [pc, #92]	; (800dc08 <HAL_LTDC_LineEventCallback+0x7c>)
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7f6 fbef 	bl	8004394 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800dbb6:	f7fc fd23 	bl	800a600 <_ZN8touchgfx3HAL11getInstanceEv>
 800dbba:	4603      	mov	r3, r0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7ff feab 	bl	800d918 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800dbc2:	f7fe fd7d 	bl	800c6c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800dbc6:	f7fc fd1b 	bl	800a600 <_ZN8touchgfx3HAL11getInstanceEv>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 ffff 	bl	800ebd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	f7fe fa26 	bl	800c024 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 800dbd8:	e00e      	b.n	800dbf8 <HAL_LTDC_LineEventCallback+0x6c>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800dbda:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <HAL_LTDC_LineEventCallback+0x78>)
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	4619      	mov	r1, r3
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7f6 fbd7 	bl	8004394 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	f7fe fa27 	bl	800c03a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL::getInstance()->frontPorchEntered();
 800dbec:	f7fc fd08 	bl	800a600 <_ZN8touchgfx3HAL11getInstanceEv>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7ff fe72 	bl	800d8dc <_ZN8touchgfx3HAL17frontPorchEnteredEv>
    }
 800dbf8:	bf00      	nop
 800dbfa:	3708      	adds	r7, #8
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	40016800 	.word	0x40016800
 800dc04:	20009ef8 	.word	0x20009ef8
 800dc08:	20009efa 	.word	0x20009efa

0800dc0c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800dc0c:	8880      	ldrh	r0, [r0, #4]
 800dc0e:	4770      	bx	lr

0800dc10 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800dc10:	2300      	movs	r3, #0
 800dc12:	8083      	strh	r3, [r0, #4]
 800dc14:	4770      	bx	lr
	...

0800dc18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800dc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc1a:	6803      	ldr	r3, [r0, #0]
 800dc1c:	4605      	mov	r5, r0
 800dc1e:	460e      	mov	r6, r1
 800dc20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc22:	2100      	movs	r1, #0
 800dc24:	4798      	blx	r3
 800dc26:	682b      	ldr	r3, [r5, #0]
 800dc28:	4604      	mov	r4, r0
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	4798      	blx	r3
 800dc30:	88ab      	ldrh	r3, [r5, #4]
 800dc32:	1b34      	subs	r4, r6, r4
 800dc34:	b2a4      	uxth	r4, r4
 800dc36:	fbb4 f4f0 	udiv	r4, r4, r0
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	d805      	bhi.n	800dc4a <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800dc3e:	4b0e      	ldr	r3, [pc, #56]	; (800dc78 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800dc40:	4a0e      	ldr	r2, [pc, #56]	; (800dc7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800dc42:	211e      	movs	r1, #30
 800dc44:	480e      	ldr	r0, [pc, #56]	; (800dc80 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800dc46:	f00f fe15 	bl	801d874 <__assert_func>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc50:	4628      	mov	r0, r5
 800dc52:	4798      	blx	r3
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	4607      	mov	r7, r0
 800dc58:	6a1b      	ldr	r3, [r3, #32]
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	4798      	blx	r3
 800dc5e:	1bf3      	subs	r3, r6, r7
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	fbb3 f2f0 	udiv	r2, r3, r0
 800dc66:	fb02 3010 	mls	r0, r2, r0, r3
 800dc6a:	b118      	cbz	r0, 800dc74 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800dc6c:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800dc6e:	4a03      	ldr	r2, [pc, #12]	; (800dc7c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800dc70:	211f      	movs	r1, #31
 800dc72:	e7e7      	b.n	800dc44 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800dc74:	4620      	mov	r0, r4
 800dc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc78:	0801f778 	.word	0x0801f778
 800dc7c:	0801f8e6 	.word	0x0801f8e6
 800dc80:	0801f78d 	.word	0x0801f78d
 800dc84:	0801f7bb 	.word	0x0801f7bb

0800dc88 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800dc88:	b538      	push	{r3, r4, r5, lr}
 800dc8a:	6803      	ldr	r3, [r0, #0]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	460d      	mov	r5, r1
 800dc90:	4604      	mov	r4, r0
 800dc92:	4798      	blx	r3
 800dc94:	4285      	cmp	r5, r0
 800dc96:	d905      	bls.n	800dca4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800dc98:	4b0c      	ldr	r3, [pc, #48]	; (800dccc <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800dc9a:	4a0d      	ldr	r2, [pc, #52]	; (800dcd0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800dc9c:	212f      	movs	r1, #47	; 0x2f
 800dc9e:	480d      	ldr	r0, [pc, #52]	; (800dcd4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800dca0:	f00f fde8 	bl	801d874 <__assert_func>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	88a5      	ldrh	r5, [r4, #4]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	4620      	mov	r0, r4
 800dcac:	4798      	blx	r3
 800dcae:	4285      	cmp	r5, r0
 800dcb0:	d303      	bcc.n	800dcba <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800dcb2:	4b09      	ldr	r3, [pc, #36]	; (800dcd8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800dcb4:	4a06      	ldr	r2, [pc, #24]	; (800dcd0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800dcb6:	2130      	movs	r1, #48	; 0x30
 800dcb8:	e7f1      	b.n	800dc9e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800dcba:	6823      	ldr	r3, [r4, #0]
 800dcbc:	88a1      	ldrh	r1, [r4, #4]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	4798      	blx	r3
 800dcc4:	88a3      	ldrh	r3, [r4, #4]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	80a3      	strh	r3, [r4, #4]
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	0801f835 	.word	0x0801f835
 800dcd0:	0801f929 	.word	0x0801f929
 800dcd4:	0801f78d 	.word	0x0801f78d
 800dcd8:	0801f84c 	.word	0x0801f84c

0800dcdc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	6803      	ldr	r3, [r0, #0]
 800dce0:	6a1b      	ldr	r3, [r3, #32]
 800dce2:	4616      	mov	r6, r2
 800dce4:	4604      	mov	r4, r0
 800dce6:	460d      	mov	r5, r1
 800dce8:	4798      	blx	r3
 800dcea:	4286      	cmp	r6, r0
 800dcec:	d905      	bls.n	800dcfa <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800dcee:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800dcf0:	4a06      	ldr	r2, [pc, #24]	; (800dd0c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800dcf2:	4807      	ldr	r0, [pc, #28]	; (800dd10 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800dcf4:	2139      	movs	r1, #57	; 0x39
 800dcf6:	f00f fdbd 	bl	801d874 <__assert_func>
 800dcfa:	6823      	ldr	r3, [r4, #0]
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	4620      	mov	r0, r4
 800dd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd06:	4718      	bx	r3
 800dd08:	0801f835 	.word	0x0801f835
 800dd0c:	0801f89c 	.word	0x0801f89c
 800dd10:	0801f78d 	.word	0x0801f78d

0800dd14 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800dd14:	4770      	bx	lr
	...

0800dd18 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800dd18:	4a02      	ldr	r2, [pc, #8]	; (800dd24 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800dd1a:	6002      	str	r2, [r0, #0]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	8082      	strh	r2, [r0, #4]
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	0801f870 	.word	0x0801f870

0800dd28 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800dd28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dd2a:	2000      	movs	r0, #0
 800dd2c:	b12b      	cbz	r3, 800dd3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dd2e:	b920      	cbnz	r0, 800dd3a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dd30:	1a5a      	subs	r2, r3, r1
 800dd32:	4250      	negs	r0, r2
 800dd34:	4150      	adcs	r0, r2
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	e7f8      	b.n	800dd2c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800dd3a:	4770      	bx	lr

0800dd3c <_ZN8touchgfx9Container9removeAllEv>:
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dd40:	b123      	cbz	r3, 800dd4c <_ZN8touchgfx9Container9removeAllEv+0x10>
 800dd42:	6999      	ldr	r1, [r3, #24]
 800dd44:	6281      	str	r1, [r0, #40]	; 0x28
 800dd46:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800dd4a:	e7f8      	b.n	800dd3e <_ZN8touchgfx9Container9removeAllEv+0x2>
 800dd4c:	4770      	bx	lr

0800dd4e <_ZN8touchgfx9Container6unlinkEv>:
 800dd4e:	2300      	movs	r3, #0
 800dd50:	6283      	str	r3, [r0, #40]	; 0x28
 800dd52:	4770      	bx	lr

0800dd54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800dd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd58:	461f      	mov	r7, r3
 800dd5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800dd5e:	460d      	mov	r5, r1
 800dd60:	4616      	mov	r6, r2
 800dd62:	b103      	cbz	r3, 800dd66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800dd64:	6038      	str	r0, [r7, #0]
 800dd66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dd68:	b314      	cbz	r4, 800ddb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800dd6a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dd6e:	b1eb      	cbz	r3, 800ddac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dd70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800dd74:	428d      	cmp	r5, r1
 800dd76:	db19      	blt.n	800ddac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dd78:	8923      	ldrh	r3, [r4, #8]
 800dd7a:	b289      	uxth	r1, r1
 800dd7c:	440b      	add	r3, r1
 800dd7e:	b21b      	sxth	r3, r3
 800dd80:	429d      	cmp	r5, r3
 800dd82:	da13      	bge.n	800ddac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dd84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800dd88:	4296      	cmp	r6, r2
 800dd8a:	db0f      	blt.n	800ddac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dd8c:	8963      	ldrh	r3, [r4, #10]
 800dd8e:	b292      	uxth	r2, r2
 800dd90:	4413      	add	r3, r2
 800dd92:	b21b      	sxth	r3, r3
 800dd94:	429e      	cmp	r6, r3
 800dd96:	da09      	bge.n	800ddac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dd98:	6823      	ldr	r3, [r4, #0]
 800dd9a:	1ab2      	subs	r2, r6, r2
 800dd9c:	1a69      	subs	r1, r5, r1
 800dd9e:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800dda2:	b212      	sxth	r2, r2
 800dda4:	463b      	mov	r3, r7
 800dda6:	b209      	sxth	r1, r1
 800dda8:	4620      	mov	r0, r4
 800ddaa:	47c0      	blx	r8
 800ddac:	69a4      	ldr	r4, [r4, #24]
 800ddae:	e7db      	b.n	800dd68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ddb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ddb4 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	8002      	strh	r2, [r0, #0]
 800ddb8:	8042      	strh	r2, [r0, #2]
 800ddba:	8082      	strh	r2, [r0, #4]
 800ddbc:	80c2      	strh	r2, [r0, #6]
 800ddbe:	4770      	bx	lr

0800ddc0 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ddc0:	b570      	push	{r4, r5, r6, lr}
 800ddc2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ddc4:	460d      	mov	r5, r1
 800ddc6:	4616      	mov	r6, r2
 800ddc8:	b13c      	cbz	r4, 800ddda <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	4620      	mov	r0, r4
 800ddce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd0:	4632      	mov	r2, r6
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	4798      	blx	r3
 800ddd6:	69a4      	ldr	r4, [r4, #24]
 800ddd8:	e7f6      	b.n	800ddc8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ddda:	bd70      	pop	{r4, r5, r6, pc}

0800dddc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dde0:	460d      	mov	r5, r1
 800dde2:	b134      	cbz	r4, 800ddf2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800dde4:	682b      	ldr	r3, [r5, #0]
 800dde6:	4621      	mov	r1, r4
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	4628      	mov	r0, r5
 800ddec:	4798      	blx	r3
 800ddee:	69a4      	ldr	r4, [r4, #24]
 800ddf0:	e7f7      	b.n	800dde2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}

0800ddf4 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ddf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ddf6:	b19b      	cbz	r3, 800de20 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ddf8:	428b      	cmp	r3, r1
 800ddfa:	d109      	bne.n	800de10 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ddfc:	699a      	ldr	r2, [r3, #24]
 800ddfe:	2100      	movs	r1, #0
 800de00:	6159      	str	r1, [r3, #20]
 800de02:	6282      	str	r2, [r0, #40]	; 0x28
 800de04:	b902      	cbnz	r2, 800de08 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800de06:	4770      	bx	lr
 800de08:	6199      	str	r1, [r3, #24]
 800de0a:	4770      	bx	lr
 800de0c:	4613      	mov	r3, r2
 800de0e:	b13a      	cbz	r2, 800de20 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800de10:	699a      	ldr	r2, [r3, #24]
 800de12:	428a      	cmp	r2, r1
 800de14:	d1fa      	bne.n	800de0c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800de16:	698a      	ldr	r2, [r1, #24]
 800de18:	619a      	str	r2, [r3, #24]
 800de1a:	2300      	movs	r3, #0
 800de1c:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800de20:	4770      	bx	lr

0800de22 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800de22:	b410      	push	{r4}
 800de24:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de26:	4604      	mov	r4, r0
 800de28:	b92b      	cbnz	r3, 800de36 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800de2a:	6803      	ldr	r3, [r0, #0]
 800de2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de32:	4611      	mov	r1, r2
 800de34:	4718      	bx	r3
 800de36:	b941      	cbnz	r1, 800de4a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800de38:	6193      	str	r3, [r2, #24]
 800de3a:	6282      	str	r2, [r0, #40]	; 0x28
 800de3c:	6154      	str	r4, [r2, #20]
 800de3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de42:	4770      	bx	lr
 800de44:	4603      	mov	r3, r0
 800de46:	2800      	cmp	r0, #0
 800de48:	d0f9      	beq.n	800de3e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800de4a:	4299      	cmp	r1, r3
 800de4c:	6998      	ldr	r0, [r3, #24]
 800de4e:	d1f9      	bne.n	800de44 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800de50:	6190      	str	r0, [r2, #24]
 800de52:	618a      	str	r2, [r1, #24]
 800de54:	e7f2      	b.n	800de3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800de58 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800de58:	4288      	cmp	r0, r1
 800de5a:	b508      	push	{r3, lr}
 800de5c:	d105      	bne.n	800de6a <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800de5e:	4b11      	ldr	r3, [pc, #68]	; (800dea4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800de60:	4a11      	ldr	r2, [pc, #68]	; (800dea8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800de62:	2123      	movs	r1, #35	; 0x23
 800de64:	4811      	ldr	r0, [pc, #68]	; (800deac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800de66:	f00f fd05 	bl	801d874 <__assert_func>
 800de6a:	694b      	ldr	r3, [r1, #20]
 800de6c:	b11b      	cbz	r3, 800de76 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800de6e:	4b10      	ldr	r3, [pc, #64]	; (800deb0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800de70:	4a0d      	ldr	r2, [pc, #52]	; (800dea8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800de72:	2124      	movs	r1, #36	; 0x24
 800de74:	e7f6      	b.n	800de64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800de76:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800de7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de7c:	b913      	cbnz	r3, 800de84 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800de7e:	6281      	str	r1, [r0, #40]	; 0x28
 800de80:	bd08      	pop	{r3, pc}
 800de82:	4613      	mov	r3, r2
 800de84:	699a      	ldr	r2, [r3, #24]
 800de86:	b12a      	cbz	r2, 800de94 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800de88:	428b      	cmp	r3, r1
 800de8a:	d1fa      	bne.n	800de82 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800de8c:	4b09      	ldr	r3, [pc, #36]	; (800deb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800de8e:	4a06      	ldr	r2, [pc, #24]	; (800dea8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800de90:	2135      	movs	r1, #53	; 0x35
 800de92:	e7e7      	b.n	800de64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800de94:	428b      	cmp	r3, r1
 800de96:	d103      	bne.n	800dea0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800de98:	4b06      	ldr	r3, [pc, #24]	; (800deb4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800de9a:	4a03      	ldr	r2, [pc, #12]	; (800dea8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800de9c:	2138      	movs	r1, #56	; 0x38
 800de9e:	e7e1      	b.n	800de64 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800dea0:	6199      	str	r1, [r3, #24]
 800dea2:	e7ed      	b.n	800de80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800dea4:	0801f967 	.word	0x0801f967
 800dea8:	0801fabc 	.word	0x0801fabc
 800deac:	0801f993 	.word	0x0801f993
 800deb0:	0801f9c6 	.word	0x0801f9c6
 800deb4:	0801f9fc 	.word	0x0801f9fc

0800deb8 <_ZN8touchgfx4RectaNERKS0_>:
 800deb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800debc:	888b      	ldrh	r3, [r1, #4]
 800debe:	f9b1 9000 	ldrsh.w	r9, [r1]
 800dec2:	f9b0 a000 	ldrsh.w	sl, [r0]
 800dec6:	444b      	add	r3, r9
 800dec8:	b29b      	uxth	r3, r3
 800deca:	fa0f f883 	sxth.w	r8, r3
 800dece:	45c2      	cmp	sl, r8
 800ded0:	da30      	bge.n	800df34 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800ded2:	8882      	ldrh	r2, [r0, #4]
 800ded4:	4452      	add	r2, sl
 800ded6:	b292      	uxth	r2, r2
 800ded8:	fa0f fe82 	sxth.w	lr, r2
 800dedc:	45f1      	cmp	r9, lr
 800dede:	da29      	bge.n	800df34 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800dee0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dee4:	88cc      	ldrh	r4, [r1, #6]
 800dee6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800deea:	442c      	add	r4, r5
 800deec:	b224      	sxth	r4, r4
 800deee:	42a6      	cmp	r6, r4
 800def0:	da20      	bge.n	800df34 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800def2:	88c7      	ldrh	r7, [r0, #6]
 800def4:	4437      	add	r7, r6
 800def6:	b2bf      	uxth	r7, r7
 800def8:	fa0f fc87 	sxth.w	ip, r7
 800defc:	4565      	cmp	r5, ip
 800defe:	da19      	bge.n	800df34 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800df00:	45ca      	cmp	sl, r9
 800df02:	4654      	mov	r4, sl
 800df04:	bfb8      	it	lt
 800df06:	464c      	movlt	r4, r9
 800df08:	42b5      	cmp	r5, r6
 800df0a:	bfb8      	it	lt
 800df0c:	4635      	movlt	r5, r6
 800df0e:	45f0      	cmp	r8, lr
 800df10:	bfc8      	it	gt
 800df12:	4613      	movgt	r3, r2
 800df14:	1b1b      	subs	r3, r3, r4
 800df16:	8083      	strh	r3, [r0, #4]
 800df18:	88ca      	ldrh	r2, [r1, #6]
 800df1a:	884b      	ldrh	r3, [r1, #2]
 800df1c:	8004      	strh	r4, [r0, #0]
 800df1e:	4413      	add	r3, r2
 800df20:	b29b      	uxth	r3, r3
 800df22:	b21a      	sxth	r2, r3
 800df24:	4594      	cmp	ip, r2
 800df26:	bfb8      	it	lt
 800df28:	463b      	movlt	r3, r7
 800df2a:	1b5b      	subs	r3, r3, r5
 800df2c:	80c3      	strh	r3, [r0, #6]
 800df2e:	8045      	strh	r5, [r0, #2]
 800df30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df34:	2300      	movs	r3, #0
 800df36:	8003      	strh	r3, [r0, #0]
 800df38:	8043      	strh	r3, [r0, #2]
 800df3a:	8083      	strh	r3, [r0, #4]
 800df3c:	80c3      	strh	r3, [r0, #6]
 800df3e:	e7f7      	b.n	800df30 <_ZN8touchgfx4RectaNERKS0_+0x78>

0800df40 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800df40:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800df44:	b12b      	cbz	r3, 800df52 <_ZNK8touchgfx4Rect7isEmptyEv+0x12>
 800df46:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800df4a:	fab0 f080 	clz	r0, r0
 800df4e:	0940      	lsrs	r0, r0, #5
 800df50:	4770      	bx	lr
 800df52:	2001      	movs	r0, #1
 800df54:	4770      	bx	lr

0800df56 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800df56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5a:	2300      	movs	r3, #0
 800df5c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800df5e:	8003      	strh	r3, [r0, #0]
 800df60:	4604      	mov	r4, r0
 800df62:	8043      	strh	r3, [r0, #2]
 800df64:	8083      	strh	r3, [r0, #4]
 800df66:	80c3      	strh	r3, [r0, #6]
 800df68:	2d00      	cmp	r5, #0
 800df6a:	d040      	beq.n	800dfee <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800df6c:	1d28      	adds	r0, r5, #4
 800df6e:	f7ff ffe7 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 800df72:	b988      	cbnz	r0, 800df98 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800df74:	4620      	mov	r0, r4
 800df76:	f7ff ffe3 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 800df7a:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800df7e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800df82:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800df86:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800df8a:	b138      	cbz	r0, 800df9c <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800df8c:	8022      	strh	r2, [r4, #0]
 800df8e:	8063      	strh	r3, [r4, #2]
 800df90:	f8a4 e004 	strh.w	lr, [r4, #4]
 800df94:	f8a4 c006 	strh.w	ip, [r4, #6]
 800df98:	69ad      	ldr	r5, [r5, #24]
 800df9a:	e7e5      	b.n	800df68 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800df9c:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dfa0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800dfa4:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800dfa8:	4290      	cmp	r0, r2
 800dfaa:	4607      	mov	r7, r0
 800dfac:	bfa8      	it	ge
 800dfae:	4617      	movge	r7, r2
 800dfb0:	4472      	add	r2, lr
 800dfb2:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800dfb6:	8027      	strh	r7, [r4, #0]
 800dfb8:	4299      	cmp	r1, r3
 800dfba:	460e      	mov	r6, r1
 800dfbc:	4440      	add	r0, r8
 800dfbe:	bfa8      	it	ge
 800dfc0:	461e      	movge	r6, r3
 800dfc2:	4471      	add	r1, lr
 800dfc4:	4463      	add	r3, ip
 800dfc6:	b200      	sxth	r0, r0
 800dfc8:	b212      	sxth	r2, r2
 800dfca:	b209      	sxth	r1, r1
 800dfcc:	b21b      	sxth	r3, r3
 800dfce:	4290      	cmp	r0, r2
 800dfd0:	bfac      	ite	ge
 800dfd2:	ebc7 0200 	rsbge	r2, r7, r0
 800dfd6:	ebc7 0202 	rsblt	r2, r7, r2
 800dfda:	4299      	cmp	r1, r3
 800dfdc:	bfac      	ite	ge
 800dfde:	ebc6 0301 	rsbge	r3, r6, r1
 800dfe2:	ebc6 0303 	rsblt	r3, r6, r3
 800dfe6:	8066      	strh	r6, [r4, #2]
 800dfe8:	80a2      	strh	r2, [r4, #4]
 800dfea:	80e3      	strh	r3, [r4, #6]
 800dfec:	e7d4      	b.n	800df98 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dfee:	4620      	mov	r0, r4
 800dff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dff4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800dff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dff8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800dffc:	b383      	cbz	r3, 800e060 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dffe:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e000:	b374      	cbz	r4, 800e060 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e002:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e006:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e00a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e00e:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e012:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e016:	b303      	cbz	r3, 800e05a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e018:	4668      	mov	r0, sp
 800e01a:	1d21      	adds	r1, r4, #4
 800e01c:	f8ad 5000 	strh.w	r5, [sp]
 800e020:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e024:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e028:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e02c:	f7ff ff44 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 800e030:	4668      	mov	r0, sp
 800e032:	f7ff ff85 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e036:	b980      	cbnz	r0, 800e05a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e038:	f8bd 3000 	ldrh.w	r3, [sp]
 800e03c:	88a2      	ldrh	r2, [r4, #4]
 800e03e:	1a9b      	subs	r3, r3, r2
 800e040:	f8ad 3000 	strh.w	r3, [sp]
 800e044:	88e2      	ldrh	r2, [r4, #6]
 800e046:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e04a:	1a9b      	subs	r3, r3, r2
 800e04c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	4669      	mov	r1, sp
 800e054:	689b      	ldr	r3, [r3, #8]
 800e056:	4620      	mov	r0, r4
 800e058:	4798      	blx	r3
 800e05a:	69a4      	ldr	r4, [r4, #24]
 800e05c:	2c00      	cmp	r4, #0
 800e05e:	d1d8      	bne.n	800e012 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e060:	b002      	add	sp, #8
 800e062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e068:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e06c:	460d      	mov	r5, r1
 800e06e:	4616      	mov	r6, r2
 800e070:	b323      	cbz	r3, 800e0bc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e072:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e074:	b314      	cbz	r4, 800e0bc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e076:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e07a:	b1eb      	cbz	r3, 800e0b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e07c:	6828      	ldr	r0, [r5, #0]
 800e07e:	6869      	ldr	r1, [r5, #4]
 800e080:	466b      	mov	r3, sp
 800e082:	c303      	stmia	r3!, {r0, r1}
 800e084:	4668      	mov	r0, sp
 800e086:	1d21      	adds	r1, r4, #4
 800e088:	f7ff ff16 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 800e08c:	4668      	mov	r0, sp
 800e08e:	f7ff ff57 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e092:	b988      	cbnz	r0, 800e0b8 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e094:	f8bd 3000 	ldrh.w	r3, [sp]
 800e098:	88a2      	ldrh	r2, [r4, #4]
 800e09a:	1a9b      	subs	r3, r3, r2
 800e09c:	f8ad 3000 	strh.w	r3, [sp]
 800e0a0:	88e2      	ldrh	r2, [r4, #6]
 800e0a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e0a6:	1a9b      	subs	r3, r3, r2
 800e0a8:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e0ac:	6823      	ldr	r3, [r4, #0]
 800e0ae:	4632      	mov	r2, r6
 800e0b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0b2:	4669      	mov	r1, sp
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	4798      	blx	r3
 800e0b8:	69a4      	ldr	r4, [r4, #24]
 800e0ba:	e7db      	b.n	800e074 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e0bc:	b002      	add	sp, #8
 800e0be:	bd70      	pop	{r4, r5, r6, pc}

0800e0c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e0c0:	b513      	push	{r0, r1, r4, lr}
 800e0c2:	6803      	ldr	r3, [r0, #0]
 800e0c4:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e9cd 3300 	strd	r3, r3, [sp]
 800e0ce:	466b      	mov	r3, sp
 800e0d0:	47a0      	blx	r4
 800e0d2:	b002      	add	sp, #8
 800e0d4:	bd10      	pop	{r4, pc}

0800e0d6 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e0dc:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800e0e0:	4770      	bx	lr

0800e0e2 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e0e8:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800e0ec:	4770      	bx	lr

0800e0ee <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e0ee:	6843      	ldr	r3, [r0, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	725a      	strb	r2, [r3, #9]
 800e0f4:	6840      	ldr	r0, [r0, #4]
 800e0f6:	6803      	ldr	r3, [r0, #0]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	4718      	bx	r3

0800e0fc <_ZN8touchgfx3HAL8flushDMAEv>:
 800e0fc:	6840      	ldr	r0, [r0, #4]
 800e0fe:	6803      	ldr	r3, [r0, #0]
 800e100:	689b      	ldr	r3, [r3, #8]
 800e102:	4718      	bx	r3

0800e104 <_ZN8touchgfx3HAL10beginFrameEv>:
 800e104:	4b04      	ldr	r3, [pc, #16]	; (800e118 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	b123      	cbz	r3, 800e114 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e10a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800e10e:	f080 0001 	eor.w	r0, r0, #1
 800e112:	4770      	bx	lr
 800e114:	2001      	movs	r0, #1
 800e116:	4770      	bx	lr
 800e118:	20009f06 	.word	0x20009f06

0800e11c <_ZN8touchgfx3HAL8endFrameEv>:
 800e11c:	b510      	push	{r4, lr}
 800e11e:	4604      	mov	r4, r0
 800e120:	6840      	ldr	r0, [r0, #4]
 800e122:	6803      	ldr	r3, [r0, #0]
 800e124:	689b      	ldr	r3, [r3, #8]
 800e126:	4798      	blx	r3
 800e128:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800e12c:	b113      	cbz	r3, 800e134 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e12e:	2301      	movs	r3, #1
 800e130:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e134:	bd10      	pop	{r4, pc}

0800e136 <_ZN8touchgfx3HAL9taskEntryEv>:
 800e136:	b508      	push	{r3, lr}
 800e138:	6803      	ldr	r3, [r0, #0]
 800e13a:	4604      	mov	r4, r0
 800e13c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e13e:	4798      	blx	r3
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e144:	4620      	mov	r0, r4
 800e146:	4798      	blx	r3
 800e148:	f7fe face 	bl	800c6e8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e150:	e7f8      	b.n	800e144 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0800e154 <_ZN8touchgfx3HAL4tickEv>:
 800e154:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e156:	6803      	ldr	r3, [r0, #0]
 800e158:	4d5c      	ldr	r5, [pc, #368]	; (800e2cc <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e15a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e15e:	4604      	mov	r4, r0
 800e160:	4798      	blx	r3
 800e162:	2800      	cmp	r0, #0
 800e164:	f000 8097 	beq.w	800e296 <_ZN8touchgfx3HAL4tickEv+0x142>
 800e168:	2001      	movs	r0, #1
 800e16a:	f7fd ff5b 	bl	800c024 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e16e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800e172:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800e176:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800e17a:	2600      	movs	r6, #0
 800e17c:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800e180:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800e184:	b133      	cbz	r3, 800e194 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	4620      	mov	r0, r4
 800e18a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e18e:	4798      	blx	r3
 800e190:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800e194:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800e198:	6862      	ldr	r2, [r4, #4]
 800e19a:	f083 0301 	eor.w	r3, r3, #1
 800e19e:	7253      	strb	r3, [r2, #9]
 800e1a0:	2601      	movs	r6, #1
 800e1a2:	702e      	strb	r6, [r5, #0]
 800e1a4:	f002 f8e8 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 800e1a8:	6803      	ldr	r3, [r0, #0]
 800e1aa:	4631      	mov	r1, r6
 800e1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ae:	4798      	blx	r3
 800e1b0:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800e1b4:	b90b      	cbnz	r3, 800e1ba <_ZN8touchgfx3HAL4tickEv+0x66>
 800e1b6:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800e1ba:	f002 f8dd 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 800e1be:	6803      	ldr	r3, [r0, #0]
 800e1c0:	695b      	ldr	r3, [r3, #20]
 800e1c2:	4798      	blx	r3
 800e1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1c6:	6803      	ldr	r3, [r0, #0]
 800e1c8:	691b      	ldr	r3, [r3, #16]
 800e1ca:	4798      	blx	r3
 800e1cc:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800e1d0:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800e1dc:	b10a      	cbz	r2, 800e1e2 <_ZN8touchgfx3HAL4tickEv+0x8e>
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1eb      	bne.n	800e1ba <_ZN8touchgfx3HAL4tickEv+0x66>
 800e1e2:	4a3b      	ldr	r2, [pc, #236]	; (800e2d0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e1e4:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800e1e8:	7813      	ldrb	r3, [r2, #0]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	b25b      	sxtb	r3, r3
 800e1ee:	4299      	cmp	r1, r3
 800e1f0:	7013      	strb	r3, [r2, #0]
 800e1f2:	dc10      	bgt.n	800e216 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800e1f4:	68e0      	ldr	r0, [r4, #12]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	7013      	strb	r3, [r2, #0]
 800e1fa:	6803      	ldr	r3, [r0, #0]
 800e1fc:	aa03      	add	r2, sp, #12
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	a902      	add	r1, sp, #8
 800e202:	4798      	blx	r3
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	2800      	cmp	r0, #0
 800e208:	d051      	beq.n	800e2ae <_ZN8touchgfx3HAL4tickEv+0x15a>
 800e20a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e20e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e212:	4620      	mov	r0, r4
 800e214:	4798      	blx	r3
 800e216:	6960      	ldr	r0, [r4, #20]
 800e218:	2300      	movs	r3, #0
 800e21a:	f88d 3007 	strb.w	r3, [sp, #7]
 800e21e:	b158      	cbz	r0, 800e238 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800e220:	6803      	ldr	r3, [r0, #0]
 800e222:	f10d 0107 	add.w	r1, sp, #7
 800e226:	68db      	ldr	r3, [r3, #12]
 800e228:	4798      	blx	r3
 800e22a:	b128      	cbz	r0, 800e238 <_ZN8touchgfx3HAL4tickEv+0xe4>
 800e22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e22e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e232:	6803      	ldr	r3, [r0, #0]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	4798      	blx	r3
 800e238:	f104 001c 	add.w	r0, r4, #28
 800e23c:	f00f fa36 	bl	801d6ac <_ZN8touchgfx8Gestures4tickEv>
 800e240:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800e244:	b30b      	cbz	r3, 800e28a <_ZN8touchgfx3HAL4tickEv+0x136>
 800e246:	6920      	ldr	r0, [r4, #16]
 800e248:	6803      	ldr	r3, [r0, #0]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	4798      	blx	r3
 800e24e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e250:	4606      	mov	r6, r0
 800e252:	b903      	cbnz	r3, 800e256 <_ZN8touchgfx3HAL4tickEv+0x102>
 800e254:	6720      	str	r0, [r4, #112]	; 0x70
 800e256:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e258:	4a1e      	ldr	r2, [pc, #120]	; (800e2d4 <_ZN8touchgfx3HAL4tickEv+0x180>)
 800e25a:	1af3      	subs	r3, r6, r3
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d914      	bls.n	800e28a <_ZN8touchgfx3HAL4tickEv+0x136>
 800e260:	6920      	ldr	r0, [r4, #16]
 800e262:	6803      	ldr	r3, [r0, #0]
 800e264:	699b      	ldr	r3, [r3, #24]
 800e266:	4798      	blx	r3
 800e268:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e26a:	2264      	movs	r2, #100	; 0x64
 800e26c:	1af3      	subs	r3, r6, r3
 800e26e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e272:	fbb0 f0f3 	udiv	r0, r0, r3
 800e276:	2800      	cmp	r0, #0
 800e278:	dc1e      	bgt.n	800e2b8 <_ZN8touchgfx3HAL4tickEv+0x164>
 800e27a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800e27e:	6920      	ldr	r0, [r4, #16]
 800e280:	6803      	ldr	r3, [r0, #0]
 800e282:	2100      	movs	r1, #0
 800e284:	69db      	ldr	r3, [r3, #28]
 800e286:	4798      	blx	r3
 800e288:	6726      	str	r6, [r4, #112]	; 0x70
 800e28a:	f002 f875 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 800e28e:	6803      	ldr	r3, [r0, #0]
 800e290:	2100      	movs	r1, #0
 800e292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e294:	4798      	blx	r3
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	4620      	mov	r0, r4
 800e29a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e29e:	4798      	blx	r3
 800e2a0:	2001      	movs	r0, #1
 800e2a2:	f7fd feca 	bl	800c03a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	702b      	strb	r3, [r5, #0]
 800e2aa:	b004      	add	sp, #16
 800e2ac:	bd70      	pop	{r4, r5, r6, pc}
 800e2ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	4798      	blx	r3
 800e2b6:	e7ae      	b.n	800e216 <_ZN8touchgfx3HAL4tickEv+0xc2>
 800e2b8:	2863      	cmp	r0, #99	; 0x63
 800e2ba:	bfcb      	itete	gt
 800e2bc:	2300      	movgt	r3, #0
 800e2be:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800e2c2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800e2c6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800e2ca:	e7d8      	b.n	800e27e <_ZN8touchgfx3HAL4tickEv+0x12a>
 800e2cc:	20009f0c 	.word	0x20009f0c
 800e2d0:	20009f0d 	.word	0x20009f0d
 800e2d4:	05f5e100 	.word	0x05f5e100

0800e2d8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e2d8:	f7fe b99e 	b.w	800c618 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e2dc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e2dc:	6581      	str	r1, [r0, #88]	; 0x58
 800e2de:	301c      	adds	r0, #28
 800e2e0:	f00f b9e2 	b.w	801d6a8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e2e4 <_ZN8touchgfx3HAL5touchEll>:
 800e2e4:	b530      	push	{r4, r5, lr}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	a804      	add	r0, sp, #16
 800e2ec:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e2f0:	f001 fe00 	bl	800fef4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e2f4:	9b04      	ldr	r3, [sp, #16]
 800e2f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e2fa:	a906      	add	r1, sp, #24
 800e2fc:	9b05      	ldr	r3, [sp, #20]
 800e2fe:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e302:	a803      	add	r0, sp, #12
 800e304:	f001 fe44 	bl	800ff90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e308:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800e30c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e310:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e314:	f104 001c 	add.w	r0, r4, #28
 800e318:	b189      	cbz	r1, 800e33e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e31a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800e324:	4613      	mov	r3, r2
 800e326:	462a      	mov	r2, r5
 800e328:	f00f f9ce 	bl	801d6c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e32c:	b128      	cbz	r0, 800e33a <_ZN8touchgfx3HAL5touchEll+0x56>
 800e32e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e332:	65e3      	str	r3, [r4, #92]	; 0x5c
 800e334:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e338:	6623      	str	r3, [r4, #96]	; 0x60
 800e33a:	b007      	add	sp, #28
 800e33c:	bd30      	pop	{r4, r5, pc}
 800e33e:	f00f fa07 	bl	801d750 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e342:	2301      	movs	r3, #1
 800e344:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e348:	e7f1      	b.n	800e32e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e34a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e34a:	b570      	push	{r4, r5, r6, lr}
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d050      	beq.n	800e3f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e350:	ea81 0002 	eor.w	r0, r1, r2
 800e354:	07c6      	lsls	r6, r0, #31
 800e356:	d508      	bpl.n	800e36a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e358:	3a01      	subs	r2, #1
 800e35a:	18cc      	adds	r4, r1, r3
 800e35c:	42a1      	cmp	r1, r4
 800e35e:	d048      	beq.n	800e3f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e360:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e364:	f801 0b01 	strb.w	r0, [r1], #1
 800e368:	e7f8      	b.n	800e35c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e36a:	07d5      	lsls	r5, r2, #31
 800e36c:	bf42      	ittt	mi
 800e36e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e372:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e376:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d915      	bls.n	800e3aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e37e:	ea82 0001 	eor.w	r0, r2, r1
 800e382:	0784      	lsls	r4, r0, #30
 800e384:	d02d      	beq.n	800e3e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x98>
 800e386:	1e94      	subs	r4, r2, #2
 800e388:	4608      	mov	r0, r1
 800e38a:	18ce      	adds	r6, r1, r3
 800e38c:	f834 5f02 	ldrh.w	r5, [r4, #2]!
 800e390:	f820 5b02 	strh.w	r5, [r0], #2
 800e394:	1a35      	subs	r5, r6, r0
 800e396:	2d01      	cmp	r5, #1
 800e398:	d8f8      	bhi.n	800e38c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x42>
 800e39a:	1e98      	subs	r0, r3, #2
 800e39c:	f020 0001 	bic.w	r0, r0, #1
 800e3a0:	3002      	adds	r0, #2
 800e3a2:	4401      	add	r1, r0
 800e3a4:	4402      	add	r2, r0
 800e3a6:	f003 0301 	and.w	r3, r3, #1
 800e3aa:	1f14      	subs	r4, r2, #4
 800e3ac:	4608      	mov	r0, r1
 800e3ae:	18ce      	adds	r6, r1, r3
 800e3b0:	1a35      	subs	r5, r6, r0
 800e3b2:	2d03      	cmp	r5, #3
 800e3b4:	d810      	bhi.n	800e3d8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 800e3b6:	089c      	lsrs	r4, r3, #2
 800e3b8:	00a0      	lsls	r0, r4, #2
 800e3ba:	4401      	add	r1, r0
 800e3bc:	3801      	subs	r0, #1
 800e3be:	4402      	add	r2, r0
 800e3c0:	f06f 0003 	mvn.w	r0, #3
 800e3c4:	fb00 3404 	mla	r4, r0, r4, r3
 800e3c8:	440c      	add	r4, r1
 800e3ca:	42a1      	cmp	r1, r4
 800e3cc:	d011      	beq.n	800e3f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa8>
 800e3ce:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e3d2:	f801 3b01 	strb.w	r3, [r1], #1
 800e3d6:	e7f8      	b.n	800e3ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x80>
 800e3d8:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800e3dc:	f840 5b04 	str.w	r5, [r0], #4
 800e3e0:	e7e6      	b.n	800e3b0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x66>
 800e3e2:	0790      	lsls	r0, r2, #30
 800e3e4:	d0e1      	beq.n	800e3aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e3e6:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e3ea:	f821 0b02 	strh.w	r0, [r1], #2
 800e3ee:	3b02      	subs	r3, #2
 800e3f0:	e7db      	b.n	800e3aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}

0800e3f6 <_ZN8touchgfx3HAL7noTouchEv>:
 800e3f6:	b510      	push	{r4, lr}
 800e3f8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800e3fc:	4604      	mov	r4, r0
 800e3fe:	b153      	cbz	r3, 800e416 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e400:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800e404:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800e408:	2101      	movs	r1, #1
 800e40a:	301c      	adds	r0, #28
 800e40c:	f00f f9a0 	bl	801d750 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e410:	2300      	movs	r3, #0
 800e412:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e416:	bd10      	pop	{r4, pc}

0800e418 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e41c:	4605      	mov	r5, r0
 800e41e:	6980      	ldr	r0, [r0, #24]
 800e420:	b085      	sub	sp, #20
 800e422:	460f      	mov	r7, r1
 800e424:	4690      	mov	r8, r2
 800e426:	4699      	mov	r9, r3
 800e428:	b930      	cbnz	r0, 800e438 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800e42a:	4b1f      	ldr	r3, [pc, #124]	; (800e4a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800e42c:	4a1f      	ldr	r2, [pc, #124]	; (800e4ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800e42e:	f44f 7198 	mov.w	r1, #304	; 0x130
 800e432:	481f      	ldr	r0, [pc, #124]	; (800e4b0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 800e434:	f00f fa1e 	bl	801d874 <__assert_func>
 800e438:	ac04      	add	r4, sp, #16
 800e43a:	2600      	movs	r6, #0
 800e43c:	f844 6d04 	str.w	r6, [r4, #-4]!
 800e440:	6806      	ldr	r6, [r0, #0]
 800e442:	9401      	str	r4, [sp, #4]
 800e444:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800e448:	9400      	str	r4, [sp, #0]
 800e44a:	6834      	ldr	r4, [r6, #0]
 800e44c:	47a0      	blx	r4
 800e44e:	4c19      	ldr	r4, [pc, #100]	; (800e4b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 800e450:	4606      	mov	r6, r0
 800e452:	f8a4 9000 	strh.w	r9, [r4]
 800e456:	f7fc f8df 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800e45a:	6803      	ldr	r3, [r0, #0]
 800e45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e45e:	4798      	blx	r3
 800e460:	280c      	cmp	r0, #12
 800e462:	d80f      	bhi.n	800e484 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800e464:	e8df f000 	tbb	[pc, r0]
 800e468:	1b1b1207 	.word	0x1b1b1207
 800e46c:	1b1b1b1b 	.word	0x1b1b1b1b
 800e470:	1b1b1b1b 	.word	0x1b1b1b1b
 800e474:	1b          	.byte	0x1b
 800e475:	00          	.byte	0x00
 800e476:	8823      	ldrh	r3, [r4, #0]
 800e478:	fb08 7203 	mla	r2, r8, r3, r7
 800e47c:	9b03      	ldr	r3, [sp, #12]
 800e47e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e482:	63eb      	str	r3, [r5, #60]	; 0x3c
 800e484:	4630      	mov	r0, r6
 800e486:	b005      	add	sp, #20
 800e488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e48c:	8822      	ldrh	r2, [r4, #0]
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	fb08 7202 	mla	r2, r8, r2, r7
 800e494:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e498:	1a9a      	subs	r2, r3, r2
 800e49a:	63ea      	str	r2, [r5, #60]	; 0x3c
 800e49c:	e7f2      	b.n	800e484 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6c>
 800e49e:	4b06      	ldr	r3, [pc, #24]	; (800e4b8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 800e4a0:	4a02      	ldr	r2, [pc, #8]	; (800e4ac <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800e4a2:	f240 114d 	movw	r1, #333	; 0x14d
 800e4a6:	e7c4      	b.n	800e432 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800e4a8:	0801fb65 	.word	0x0801fb65
 800e4ac:	0801fe76 	.word	0x0801fe76
 800e4b0:	0801fbaa 	.word	0x0801fbaa
 800e4b4:	20009f02 	.word	0x20009f02
 800e4b8:	0801fbd0 	.word	0x0801fbd0

0800e4bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 800e4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4c0:	4698      	mov	r8, r3
 800e4c2:	6803      	ldr	r3, [r0, #0]
 800e4c4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800e4c6:	4b0f      	ldr	r3, [pc, #60]	; (800e504 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x48>)
 800e4c8:	b087      	sub	sp, #28
 800e4ca:	f8b3 9000 	ldrh.w	r9, [r3]
 800e4ce:	460e      	mov	r6, r1
 800e4d0:	4617      	mov	r7, r2
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	f7fc f8a0 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800e4d8:	6803      	ldr	r3, [r0, #0]
 800e4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4dc:	4798      	blx	r3
 800e4de:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e4e2:	9302      	str	r3, [sp, #8]
 800e4e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e4e8:	9301      	str	r3, [sp, #4]
 800e4ea:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	e9cd 9003 	strd	r9, r0, [sp, #12]
 800e4f4:	4643      	mov	r3, r8
 800e4f6:	463a      	mov	r2, r7
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	47a8      	blx	r5
 800e4fe:	b007      	add	sp, #28
 800e500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e504:	20009f02 	.word	0x20009f02

0800e508 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e50c:	4606      	mov	r6, r0
 800e50e:	b089      	sub	sp, #36	; 0x24
 800e510:	4610      	mov	r0, r2
 800e512:	460c      	mov	r4, r1
 800e514:	4691      	mov	r9, r2
 800e516:	4698      	mov	r8, r3
 800e518:	f003 fc34 	bl	8011d84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	f000 8092 	beq.w	800e646 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13e>
 800e522:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800e660 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800e526:	f8df b13c 	ldr.w	fp, [pc, #316]	; 800e664 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 800e52a:	f8da 0000 	ldr.w	r0, [sl]
 800e52e:	4f4b      	ldr	r7, [pc, #300]	; (800e65c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800e530:	6802      	ldr	r2, [r0, #0]
 800e532:	6a12      	ldr	r2, [r2, #32]
 800e534:	4790      	blx	r2
 800e536:	f8da 0000 	ldr.w	r0, [sl]
 800e53a:	6802      	ldr	r2, [r0, #0]
 800e53c:	ad08      	add	r5, sp, #32
 800e53e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e540:	4790      	blx	r2
 800e542:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 800e546:	f8bb 3000 	ldrh.w	r3, [fp]
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	4628      	mov	r0, r5
 800e54e:	883b      	ldrh	r3, [r7, #0]
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	f003 fcd7 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e556:	f8ab 0000 	strh.w	r0, [fp]
 800e55a:	4628      	mov	r0, r5
 800e55c:	f003 fd0c 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e560:	f8da b000 	ldr.w	fp, [sl]
 800e564:	8038      	strh	r0, [r7, #0]
 800e566:	f8db 303c 	ldr.w	r3, [fp, #60]	; 0x3c
 800e56a:	9302      	str	r3, [sp, #8]
 800e56c:	4648      	mov	r0, r9
 800e56e:	f8db 7040 	ldr.w	r7, [fp, #64]	; 0x40
 800e572:	f003 fc07 	bl	8011d84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e576:	f8da 2000 	ldr.w	r2, [sl]
 800e57a:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 800e57e:	63d0      	str	r0, [r2, #60]	; 0x3c
 800e580:	6822      	ldr	r2, [r4, #0]
 800e582:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 800e586:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800e588:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 800e58c:	2200      	movs	r2, #0
 800e58e:	4611      	mov	r1, r2
 800e590:	4620      	mov	r0, r4
 800e592:	4798      	blx	r3
 800e594:	2201      	movs	r2, #1
 800e596:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 800e59a:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 800e59e:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
 800e5a2:	1d22      	adds	r2, r4, #4
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d051      	beq.n	800e64c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800e5a8:	f9b8 1006 	ldrsh.w	r1, [r8, #6]
 800e5ac:	2900      	cmp	r1, #0
 800e5ae:	d04d      	beq.n	800e64c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x144>
 800e5b0:	6810      	ldr	r0, [r2, #0]
 800e5b2:	6851      	ldr	r1, [r2, #4]
 800e5b4:	f10d 0c18 	add.w	ip, sp, #24
 800e5b8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800e5bc:	4641      	mov	r1, r8
 800e5be:	a806      	add	r0, sp, #24
 800e5c0:	f7ff fc7a 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	f003 fe29 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e5ca:	4680      	mov	r8, r0
 800e5cc:	f7fc f824 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800e5d0:	6802      	ldr	r2, [r0, #0]
 800e5d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e5d4:	4790      	blx	r2
 800e5d6:	4580      	cmp	r8, r0
 800e5d8:	d03d      	beq.n	800e656 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x14e>
 800e5da:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800e5dc:	b150      	cbz	r0, 800e5f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800e5de:	4628      	mov	r0, r5
 800e5e0:	f003 fe1c 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 800e5e8:	6803      	ldr	r3, [r0, #0]
 800e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ec:	4798      	blx	r3
 800e5ee:	1a2b      	subs	r3, r5, r0
 800e5f0:	4258      	negs	r0, r3
 800e5f2:	4158      	adcs	r0, r3
 800e5f4:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 800e5f8:	6822      	ldr	r2, [r4, #0]
 800e5fa:	6963      	ldr	r3, [r4, #20]
 800e5fc:	9303      	str	r3, [sp, #12]
 800e5fe:	2500      	movs	r5, #0
 800e600:	6165      	str	r5, [r4, #20]
 800e602:	4620      	mov	r0, r4
 800e604:	6892      	ldr	r2, [r2, #8]
 800e606:	a906      	add	r1, sp, #24
 800e608:	4790      	blx	r2
 800e60a:	9b03      	ldr	r3, [sp, #12]
 800e60c:	6163      	str	r3, [r4, #20]
 800e60e:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 800e618:	4620      	mov	r0, r4
 800e61a:	4c11      	ldr	r4, [pc, #68]	; (800e660 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 800e61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61e:	4652      	mov	r2, sl
 800e620:	4649      	mov	r1, r9
 800e622:	4798      	blx	r3
 800e624:	6820      	ldr	r0, [r4, #0]
 800e626:	9b02      	ldr	r3, [sp, #8]
 800e628:	9a00      	ldr	r2, [sp, #0]
 800e62a:	e9c0 370f 	strd	r3, r7, [r0, #60]	; 0x3c
 800e62e:	4b0d      	ldr	r3, [pc, #52]	; (800e664 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 800e630:	801a      	strh	r2, [r3, #0]
 800e632:	4b0a      	ldr	r3, [pc, #40]	; (800e65c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 800e634:	9a01      	ldr	r2, [sp, #4]
 800e636:	801a      	strh	r2, [r3, #0]
 800e638:	6803      	ldr	r3, [r0, #0]
 800e63a:	6a1b      	ldr	r3, [r3, #32]
 800e63c:	4798      	blx	r3
 800e63e:	6820      	ldr	r0, [r4, #0]
 800e640:	6803      	ldr	r3, [r0, #0]
 800e642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e644:	4798      	blx	r3
 800e646:	b009      	add	sp, #36	; 0x24
 800e648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e64c:	6810      	ldr	r0, [r2, #0]
 800e64e:	6851      	ldr	r1, [r2, #4]
 800e650:	ab06      	add	r3, sp, #24
 800e652:	c303      	stmia	r3!, {r0, r1}
 800e654:	e7b6      	b.n	800e5c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xbc>
 800e656:	2000      	movs	r0, #0
 800e658:	e7cc      	b.n	800e5f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xec>
 800e65a:	bf00      	nop
 800e65c:	20009f04 	.word	0x20009f04
 800e660:	20009f08 	.word	0x20009f08
 800e664:	20009f02 	.word	0x20009f02

0800e668 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e668:	b510      	push	{r4, lr}
 800e66a:	4b07      	ldr	r3, [pc, #28]	; (800e688 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	4604      	mov	r4, r0
 800e670:	b13b      	cbz	r3, 800e682 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e672:	6803      	ldr	r3, [r0, #0]
 800e674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e676:	4798      	blx	r3
 800e678:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e67a:	4283      	cmp	r3, r0
 800e67c:	d101      	bne.n	800e682 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e67e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e680:	bd10      	pop	{r4, pc}
 800e682:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e684:	e7fc      	b.n	800e680 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e686:	bf00      	nop
 800e688:	20009f06 	.word	0x20009f06

0800e68c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e68c:	b510      	push	{r4, lr}
 800e68e:	4b0b      	ldr	r3, [pc, #44]	; (800e6bc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x30>)
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	4604      	mov	r4, r0
 800e694:	b95b      	cbnz	r3, 800e6ae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e696:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d007      	beq.n	800e6ae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e69e:	6840      	ldr	r0, [r0, #4]
 800e6a0:	f000 fbc8 	bl	800ee34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e6a4:	b118      	cbz	r0, 800e6ae <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e6a6:	6862      	ldr	r2, [r4, #4]
 800e6a8:	7a53      	ldrb	r3, [r2, #9]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d0fc      	beq.n	800e6a8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e6ae:	f7fd ff95 	bl	800c5dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f7ff ffd8 	bl	800e668 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e6b8:	bd10      	pop	{r4, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20009f06 	.word	0x20009f06

0800e6c0 <_ZN8touchgfx3HAL10initializeEv>:
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	f7fd ff6a 	bl	800c59c <_ZN8touchgfx10OSWrappers10initializeEv>
 800e6c8:	6860      	ldr	r0, [r4, #4]
 800e6ca:	6803      	ldr	r3, [r0, #0]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	4798      	blx	r3
 800e6d0:	68e0      	ldr	r0, [r4, #12]
 800e6d2:	6803      	ldr	r3, [r0, #0]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	4798      	blx	r3
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	4620      	mov	r0, r4
 800e6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6e2:	4718      	bx	r3

0800e6e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800e6e4:	b508      	push	{r3, lr}
 800e6e6:	290c      	cmp	r1, #12
 800e6e8:	d817      	bhi.n	800e71a <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800e6ea:	e8df f001 	tbb	[pc, r1]
 800e6ee:	090b      	.short	0x090b
 800e6f0:	0d0d0d07 	.word	0x0d0d0d07
 800e6f4:	1414140d 	.word	0x1414140d
 800e6f8:	1414      	.short	0x1414
 800e6fa:	0d          	.byte	0x0d
 800e6fb:	00          	.byte	0x00
 800e6fc:	2020      	movs	r0, #32
 800e6fe:	bd08      	pop	{r3, pc}
 800e700:	2018      	movs	r0, #24
 800e702:	e7fc      	b.n	800e6fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e704:	2010      	movs	r0, #16
 800e706:	e7fa      	b.n	800e6fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e708:	4b05      	ldr	r3, [pc, #20]	; (800e720 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800e70a:	4a06      	ldr	r2, [pc, #24]	; (800e724 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800e70c:	4806      	ldr	r0, [pc, #24]	; (800e728 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800e70e:	f44f 710c 	mov.w	r1, #560	; 0x230
 800e712:	f00f f8af 	bl	801d874 <__assert_func>
 800e716:	2008      	movs	r0, #8
 800e718:	e7f1      	b.n	800e6fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e71a:	2000      	movs	r0, #0
 800e71c:	e7ef      	b.n	800e6fe <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800e71e:	bf00      	nop
 800e720:	0801fca3 	.word	0x0801fca3
 800e724:	08020038 	.word	0x08020038
 800e728:	0801fbaa 	.word	0x0801fbaa

0800e72c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	460d      	mov	r5, r1
 800e730:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800e734:	4616      	mov	r6, r2
 800e736:	461c      	mov	r4, r3
 800e738:	f7ff ffd4 	bl	800e6e4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800e73c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800e740:	10c0      	asrs	r0, r0, #3
 800e742:	fb06 5101 	mla	r1, r6, r1, r5
 800e746:	fb00 4001 	mla	r0, r0, r1, r4
 800e74a:	bd70      	pop	{r4, r5, r6, pc}

0800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 800e74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e750:	b08a      	sub	sp, #40	; 0x28
 800e752:	f04f 0c00 	mov.w	ip, #0
 800e756:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 800e75a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800e75e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800e762:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 800e766:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 800e76a:	f8cd c020 	str.w	ip, [sp, #32]
 800e76e:	f1b8 0f02 	cmp.w	r8, #2
 800e772:	4604      	mov	r4, r0
 800e774:	469a      	mov	sl, r3
 800e776:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 800e77a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e77e:	d030      	beq.n	800e7e2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x96>
 800e780:	2bff      	cmp	r3, #255	; 0xff
 800e782:	d12c      	bne.n	800e7de <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x92>
 800e784:	4560      	cmp	r0, ip
 800e786:	bf14      	ite	ne
 800e788:	2004      	movne	r0, #4
 800e78a:	2001      	moveq	r0, #1
 800e78c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e790:	9204      	str	r2, [sp, #16]
 800e792:	4620      	mov	r0, r4
 800e794:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800e798:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e79c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e7a0:	f8ad 6018 	strh.w	r6, [sp, #24]
 800e7a4:	f8ad 501a 	strh.w	r5, [sp, #26]
 800e7a8:	f7ff ff5e 	bl	800e668 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e7ac:	e9cd 9700 	strd	r9, r7, [sp]
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 800e7b6:	4651      	mov	r1, sl
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	f7ff ffb7 	bl	800e72c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e7be:	f8ad 901e 	strh.w	r9, [sp, #30]
 800e7c2:	9005      	str	r0, [sp, #20]
 800e7c4:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 800e7c8:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 800e7cc:	b106      	cbz	r6, 800e7d0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x84>
 800e7ce:	b98d      	cbnz	r5, 800e7f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa8>
 800e7d0:	4b12      	ldr	r3, [pc, #72]	; (800e81c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd0>)
 800e7d2:	4a13      	ldr	r2, [pc, #76]	; (800e820 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800e7d4:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 800e7d8:	4812      	ldr	r0, [pc, #72]	; (800e824 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 800e7da:	f00f f84b 	bl	801d874 <__assert_func>
 800e7de:	2004      	movs	r0, #4
 800e7e0:	e7d4      	b.n	800e78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800e7e2:	2bff      	cmp	r3, #255	; 0xff
 800e7e4:	d104      	bne.n	800e7f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa4>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	bf14      	ite	ne
 800e7ea:	2040      	movne	r0, #64	; 0x40
 800e7ec:	2020      	moveq	r0, #32
 800e7ee:	e7cd      	b.n	800e78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800e7f0:	2040      	movs	r0, #64	; 0x40
 800e7f2:	e7cb      	b.n	800e78c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 800e7f4:	6823      	ldr	r3, [r4, #0]
 800e7f6:	9d02      	ldr	r5, [sp, #8]
 800e7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	4798      	blx	r3
 800e7fe:	4228      	tst	r0, r5
 800e800:	d104      	bne.n	800e80c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc0>
 800e802:	4b09      	ldr	r3, [pc, #36]	; (800e828 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 800e804:	4a06      	ldr	r2, [pc, #24]	; (800e820 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 800e806:	f240 11b1 	movw	r1, #433	; 0x1b1
 800e80a:	e7e5      	b.n	800e7d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8c>
 800e80c:	6860      	ldr	r0, [r4, #4]
 800e80e:	6803      	ldr	r3, [r0, #0]
 800e810:	a902      	add	r1, sp, #8
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	4798      	blx	r3
 800e816:	b00a      	add	sp, #40	; 0x28
 800e818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e81c:	0801fc26 	.word	0x0801fc26
 800e820:	0801feda 	.word	0x0801feda
 800e824:	0801fbaa 	.word	0x0801fbaa
 800e828:	0801fc5e 	.word	0x0801fc5e

0800e82c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	b08a      	sub	sp, #40	; 0x28
 800e830:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 800e834:	9408      	str	r4, [sp, #32]
 800e836:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 800e83a:	9407      	str	r4, [sp, #28]
 800e83c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 800e840:	9406      	str	r4, [sp, #24]
 800e842:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 800e846:	9405      	str	r4, [sp, #20]
 800e848:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 800e84c:	9404      	str	r4, [sp, #16]
 800e84e:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 800e852:	9403      	str	r4, [sp, #12]
 800e854:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 800e858:	9402      	str	r4, [sp, #8]
 800e85a:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 800e85e:	e9cd 3400 	strd	r3, r4, [sp]
 800e862:	4613      	mov	r3, r2
 800e864:	2200      	movs	r2, #0
 800e866:	f7ff ff71 	bl	800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800e86a:	b00a      	add	sp, #40	; 0x28
 800e86c:	bd10      	pop	{r4, pc}
	...

0800e870 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 800e870:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e872:	b08b      	sub	sp, #44	; 0x2c
 800e874:	4616      	mov	r6, r2
 800e876:	460d      	mov	r5, r1
 800e878:	461f      	mov	r7, r3
 800e87a:	4604      	mov	r4, r0
 800e87c:	f7fb fecc 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800e880:	6803      	ldr	r3, [r0, #0]
 800e882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e884:	4798      	blx	r3
 800e886:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800e88a:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	9306      	str	r3, [sp, #24]
 800e890:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e894:	9305      	str	r3, [sp, #20]
 800e896:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e89a:	9304      	str	r3, [sp, #16]
 800e89c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e8a0:	9303      	str	r3, [sp, #12]
 800e8a2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e8a6:	9302      	str	r3, [sp, #8]
 800e8a8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	e9cd 7300 	strd	r7, r3, [sp]
 800e8b2:	4629      	mov	r1, r5
 800e8b4:	4633      	mov	r3, r6
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f7ff ff48 	bl	800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800e8bc:	b00b      	add	sp, #44	; 0x2c
 800e8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8c0:	20009f02 	.word	0x20009f02

0800e8c4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 800e8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c8:	461f      	mov	r7, r3
 800e8ca:	4b14      	ldr	r3, [pc, #80]	; (800e91c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 800e8cc:	b08a      	sub	sp, #40	; 0x28
 800e8ce:	4616      	mov	r6, r2
 800e8d0:	f8b3 8000 	ldrh.w	r8, [r3]
 800e8d4:	460d      	mov	r5, r1
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	f7fb fe9e 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800e8dc:	6803      	ldr	r3, [r0, #0]
 800e8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e0:	4798      	blx	r3
 800e8e2:	2302      	movs	r3, #2
 800e8e4:	e9cd 8306 	strd	r8, r3, [sp, #24]
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	9305      	str	r3, [sp, #20]
 800e8ec:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e8f0:	9304      	str	r3, [sp, #16]
 800e8f2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e8f6:	9303      	str	r3, [sp, #12]
 800e8f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e8fc:	9302      	str	r3, [sp, #8]
 800e8fe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e902:	9008      	str	r0, [sp, #32]
 800e904:	e9cd 7300 	strd	r7, r3, [sp]
 800e908:	2200      	movs	r2, #0
 800e90a:	4633      	mov	r3, r6
 800e90c:	4629      	mov	r1, r5
 800e90e:	4620      	mov	r0, r4
 800e910:	f7ff ff1c 	bl	800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 800e914:	b00a      	add	sp, #40	; 0x28
 800e916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e91a:	bf00      	nop
 800e91c:	20009f02 	.word	0x20009f02

0800e920 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 800e920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e924:	b08b      	sub	sp, #44	; 0x2c
 800e926:	469b      	mov	fp, r3
 800e928:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 800e92c:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 800e930:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 800e934:	2fff      	cmp	r7, #255	; 0xff
 800e936:	bf14      	ite	ne
 800e938:	2308      	movne	r3, #8
 800e93a:	2302      	moveq	r3, #2
 800e93c:	2600      	movs	r6, #0
 800e93e:	4604      	mov	r4, r0
 800e940:	4689      	mov	r9, r1
 800e942:	4692      	mov	sl, r2
 800e944:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800e948:	9608      	str	r6, [sp, #32]
 800e94a:	f7ff fe8d 	bl	800e668 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e94e:	e9cd 8500 	strd	r8, r5, [sp]
 800e952:	4603      	mov	r3, r0
 800e954:	465a      	mov	r2, fp
 800e956:	4651      	mov	r1, sl
 800e958:	4620      	mov	r0, r4
 800e95a:	f7ff fee7 	bl	800e72c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e95e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e962:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e966:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e96a:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e96e:	6823      	ldr	r3, [r4, #0]
 800e970:	9005      	str	r0, [sp, #20]
 800e972:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 800e976:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 800e97a:	f8ad 601c 	strh.w	r6, [sp, #28]
 800e97e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800e982:	f8cd 9020 	str.w	r9, [sp, #32]
 800e986:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 800e98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98c:	9d02      	ldr	r5, [sp, #8]
 800e98e:	4620      	mov	r0, r4
 800e990:	4798      	blx	r3
 800e992:	4228      	tst	r0, r5
 800e994:	d106      	bne.n	800e9a4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x84>
 800e996:	4b07      	ldr	r3, [pc, #28]	; (800e9b4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x94>)
 800e998:	4a07      	ldr	r2, [pc, #28]	; (800e9b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 800e99a:	4808      	ldr	r0, [pc, #32]	; (800e9bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 800e99c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800e9a0:	f00e ff68 	bl	801d874 <__assert_func>
 800e9a4:	6860      	ldr	r0, [r4, #4]
 800e9a6:	6803      	ldr	r3, [r0, #0]
 800e9a8:	a902      	add	r1, sp, #8
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4798      	blx	r3
 800e9ae:	b00b      	add	sp, #44	; 0x2c
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	0801fc5e 	.word	0x0801fc5e
 800e9b8:	0801ffa3 	.word	0x0801ffa3
 800e9bc:	0801fbaa 	.word	0x0801fbaa

0800e9c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e9c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e9c4:	461f      	mov	r7, r3
 800e9c6:	4b0b      	ldr	r3, [pc, #44]	; (800e9f4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e9c8:	460d      	mov	r5, r1
 800e9ca:	f8b3 8000 	ldrh.w	r8, [r3]
 800e9ce:	4616      	mov	r6, r2
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	f7fb fe21 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800e9d6:	6803      	ldr	r3, [r0, #0]
 800e9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9da:	4798      	blx	r3
 800e9dc:	463b      	mov	r3, r7
 800e9de:	e9cd 8000 	strd	r8, r0, [sp]
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f7ff fea0 	bl	800e72c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800e9ec:	b002      	add	sp, #8
 800e9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20009f02 	.word	0x20009f02

0800e9f8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 800e9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9fc:	b088      	sub	sp, #32
 800e9fe:	4698      	mov	r8, r3
 800ea00:	2300      	movs	r3, #0
 800ea02:	9306      	str	r3, [sp, #24]
 800ea04:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ea08:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 800ea0c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ea10:	f8ad 6010 	strh.w	r6, [sp, #16]
 800ea14:	e9cd 3100 	strd	r3, r1, [sp]
 800ea18:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ea1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea20:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 800ea24:	f88d 301c 	strb.w	r3, [sp, #28]
 800ea28:	4617      	mov	r7, r2
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	f8ad 5012 	strh.w	r5, [sp, #18]
 800ea30:	f7ff fe1a 	bl	800e668 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea34:	4642      	mov	r2, r8
 800ea36:	4603      	mov	r3, r0
 800ea38:	4639      	mov	r1, r7
 800ea3a:	4620      	mov	r0, r4
 800ea3c:	f7ff ffc0 	bl	800e9c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ea40:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 800ea42:	9003      	str	r0, [sp, #12]
 800ea44:	881b      	ldrh	r3, [r3, #0]
 800ea46:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea4a:	f7fb fde5 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800ea4e:	6803      	ldr	r3, [r0, #0]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea52:	4798      	blx	r3
 800ea54:	f88d 001e 	strb.w	r0, [sp, #30]
 800ea58:	f88d 001d 	strb.w	r0, [sp, #29]
 800ea5c:	b106      	cbz	r6, 800ea60 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 800ea5e:	b935      	cbnz	r5, 800ea6e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 800ea60:	4b0f      	ldr	r3, [pc, #60]	; (800eaa0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 800ea62:	4a10      	ldr	r2, [pc, #64]	; (800eaa4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800ea64:	f240 11cd 	movw	r1, #461	; 0x1cd
 800ea68:	480f      	ldr	r0, [pc, #60]	; (800eaa8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 800ea6a:	f00e ff03 	bl	801d874 <__assert_func>
 800ea6e:	6823      	ldr	r3, [r4, #0]
 800ea70:	9d00      	ldr	r5, [sp, #0]
 800ea72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea74:	4620      	mov	r0, r4
 800ea76:	4798      	blx	r3
 800ea78:	4228      	tst	r0, r5
 800ea7a:	d104      	bne.n	800ea86 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 800ea7c:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 800ea7e:	4a09      	ldr	r2, [pc, #36]	; (800eaa4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 800ea80:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800ea84:	e7f0      	b.n	800ea68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 800ea86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea88:	6860      	ldr	r0, [r4, #4]
 800ea8a:	9306      	str	r3, [sp, #24]
 800ea8c:	6803      	ldr	r3, [r0, #0]
 800ea8e:	4669      	mov	r1, sp
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	4798      	blx	r3
 800ea94:	b008      	add	sp, #32
 800ea96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20009f02 	.word	0x20009f02
 800eaa0:	0801fc26 	.word	0x0801fc26
 800eaa4:	0801fd8c 	.word	0x0801fd8c
 800eaa8:	0801fbaa 	.word	0x0801fbaa
 800eaac:	0801fc5e 	.word	0x0801fc5e

0800eab0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800eab0:	b570      	push	{r4, r5, r6, lr}
 800eab2:	b08a      	sub	sp, #40	; 0x28
 800eab4:	466b      	mov	r3, sp
 800eab6:	e883 0006 	stmia.w	r3, {r1, r2}
 800eaba:	4b20      	ldr	r3, [pc, #128]	; (800eb3c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	4604      	mov	r4, r0
 800eac0:	b933      	cbnz	r3, 800ead0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800eac2:	4b1f      	ldr	r3, [pc, #124]	; (800eb40 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 800eac4:	4a1f      	ldr	r2, [pc, #124]	; (800eb44 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800eac6:	4820      	ldr	r0, [pc, #128]	; (800eb48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800eac8:	f240 11f9 	movw	r1, #505	; 0x1f9
 800eacc:	f00e fed2 	bl	801d874 <__assert_func>
 800ead0:	2300      	movs	r3, #0
 800ead2:	9308      	str	r3, [sp, #32]
 800ead4:	2301      	movs	r3, #1
 800ead6:	9302      	str	r3, [sp, #8]
 800ead8:	6803      	ldr	r3, [r0, #0]
 800eada:	f8bd 5000 	ldrh.w	r5, [sp]
 800eade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae0:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 800eae4:	4798      	blx	r3
 800eae6:	4632      	mov	r2, r6
 800eae8:	4629      	mov	r1, r5
 800eaea:	4603      	mov	r3, r0
 800eaec:	4620      	mov	r0, r4
 800eaee:	f7ff ff67 	bl	800e9c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eaf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eaf4:	9305      	str	r3, [sp, #20]
 800eaf6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eafa:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eafe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eb02:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eb06:	4b11      	ldr	r3, [pc, #68]	; (800eb4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800eb08:	9003      	str	r0, [sp, #12]
 800eb0a:	881b      	ldrh	r3, [r3, #0]
 800eb0c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb10:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eb14:	f7fb fd80 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800eb18:	6803      	ldr	r3, [r0, #0]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	4798      	blx	r3
 800eb1e:	23ff      	movs	r3, #255	; 0xff
 800eb20:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800eb24:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800eb28:	6860      	ldr	r0, [r4, #4]
 800eb2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eb2e:	6803      	ldr	r3, [r0, #0]
 800eb30:	a902      	add	r1, sp, #8
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	4798      	blx	r3
 800eb36:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800eb38:	b00a      	add	sp, #40	; 0x28
 800eb3a:	bd70      	pop	{r4, r5, r6, pc}
 800eb3c:	20009f07 	.word	0x20009f07
 800eb40:	0801faf7 	.word	0x0801faf7
 800eb44:	0801fe30 	.word	0x0801fe30
 800eb48:	0801fbaa 	.word	0x0801fbaa
 800eb4c:	20009f02 	.word	0x20009f02

0800eb50 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800eb50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb52:	b08b      	sub	sp, #44	; 0x2c
 800eb54:	466d      	mov	r5, sp
 800eb56:	e885 0006 	stmia.w	r5, {r1, r2}
 800eb5a:	461d      	mov	r5, r3
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9308      	str	r3, [sp, #32]
 800eb60:	2301      	movs	r3, #1
 800eb62:	9302      	str	r3, [sp, #8]
 800eb64:	6803      	ldr	r3, [r0, #0]
 800eb66:	f8bd 6000 	ldrh.w	r6, [sp]
 800eb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb6c:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800eb70:	4604      	mov	r4, r0
 800eb72:	4798      	blx	r3
 800eb74:	463a      	mov	r2, r7
 800eb76:	4631      	mov	r1, r6
 800eb78:	4603      	mov	r3, r0
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f7ff ff20 	bl	800e9c0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eb80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800eb84:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eb88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eb8c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eb90:	4b0e      	ldr	r3, [pc, #56]	; (800ebcc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x7c>)
 800eb92:	9003      	str	r0, [sp, #12]
 800eb94:	881b      	ldrh	r3, [r3, #0]
 800eb96:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb9c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eba0:	9505      	str	r5, [sp, #20]
 800eba2:	f7fb fd39 	bl	800a618 <_ZN8touchgfx3HAL3lcdEv>
 800eba6:	6803      	ldr	r3, [r0, #0]
 800eba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebaa:	4798      	blx	r3
 800ebac:	23ff      	movs	r3, #255	; 0xff
 800ebae:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 800ebb2:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 800ebb6:	6860      	ldr	r0, [r4, #4]
 800ebb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ebbc:	6803      	ldr	r3, [r0, #0]
 800ebbe:	a902      	add	r1, sp, #8
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	4798      	blx	r3
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	b00b      	add	sp, #44	; 0x2c
 800ebc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	20009f02 	.word	0x20009f02

0800ebd0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800ebd0:	b570      	push	{r4, r5, r6, lr}
 800ebd2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	b19b      	cbz	r3, 800ec02 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800ebda:	2002      	movs	r0, #2
 800ebdc:	f7fd fa38 	bl	800c050 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ebe6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	4620      	mov	r0, r4
 800ebee:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 800ebf2:	f7ff fd39 	bl	800e668 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ebf6:	462b      	mov	r3, r5
 800ebf8:	4601      	mov	r1, r0
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec00:	4718      	bx	r3
 800ec02:	bd70      	pop	{r4, r5, r6, pc}

0800ec04 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800ec04:	4770      	bx	lr

0800ec06 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ec06:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ec0a:	1a13      	subs	r3, r2, r0
 800ec0c:	4258      	negs	r0, r3
 800ec0e:	4158      	adcs	r0, r3
 800ec10:	4770      	bx	lr

0800ec12 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ec12:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ec16:	1a9b      	subs	r3, r3, r2
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	bfdc      	itt	le
 800ec1c:	6882      	ldrle	r2, [r0, #8]
 800ec1e:	189b      	addle	r3, r3, r2
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	bfcc      	ite	gt
 800ec24:	2000      	movgt	r0, #0
 800ec26:	2001      	movle	r0, #1
 800ec28:	4770      	bx	lr

0800ec2a <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ec2a:	6902      	ldr	r2, [r0, #16]
 800ec2c:	6840      	ldr	r0, [r0, #4]
 800ec2e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800ec32:	4770      	bx	lr

0800ec34 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ec34:	6803      	ldr	r3, [r0, #0]
 800ec36:	691b      	ldr	r3, [r3, #16]
 800ec38:	4718      	bx	r3

0800ec3a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ec3a:	4770      	bx	lr

0800ec3c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ec3c:	4770      	bx	lr
	...

0800ec40 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800ec40:	b570      	push	{r4, r5, r6, lr}
 800ec42:	2301      	movs	r3, #1
 800ec44:	7203      	strb	r3, [r0, #8]
 800ec46:	4604      	mov	r4, r0
 800ec48:	6840      	ldr	r0, [r0, #4]
 800ec4a:	6803      	ldr	r3, [r0, #0]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	4798      	blx	r3
 800ec50:	6803      	ldr	r3, [r0, #0]
 800ec52:	2b08      	cmp	r3, #8
 800ec54:	4605      	mov	r5, r0
 800ec56:	d01e      	beq.n	800ec96 <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 800ec58:	d80b      	bhi.n	800ec72 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d027      	beq.n	800ecae <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800ec5e:	2b04      	cmp	r3, #4
 800ec60:	d011      	beq.n	800ec86 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d028      	beq.n	800ecb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ec66:	4b17      	ldr	r3, [pc, #92]	; (800ecc4 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 800ec68:	4a17      	ldr	r2, [pc, #92]	; (800ecc8 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 800ec6a:	4818      	ldr	r0, [pc, #96]	; (800eccc <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 800ec6c:	218b      	movs	r1, #139	; 0x8b
 800ec6e:	f00e fe01 	bl	801d874 <__assert_func>
 800ec72:	2b40      	cmp	r3, #64	; 0x40
 800ec74:	d020      	beq.n	800ecb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ec76:	d801      	bhi.n	800ec7c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800ec78:	2b20      	cmp	r3, #32
 800ec7a:	e7f3      	b.n	800ec64 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800ec7c:	2b80      	cmp	r3, #128	; 0x80
 800ec7e:	d01b      	beq.n	800ecb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ec80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec84:	e7ee      	b.n	800ec64 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	7f01      	ldrb	r1, [r0, #28]
 800ec8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	4798      	blx	r3
 800ec90:	6823      	ldr	r3, [r4, #0]
 800ec92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec94:	e006      	b.n	800eca4 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800ec96:	6823      	ldr	r3, [r4, #0]
 800ec98:	7f01      	ldrb	r1, [r0, #28]
 800ec9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	4798      	blx	r3
 800eca0:	6823      	ldr	r3, [r4, #0]
 800eca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eca4:	4629      	mov	r1, r5
 800eca6:	4620      	mov	r0, r4
 800eca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecac:	4718      	bx	r3
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecb4:	4798      	blx	r3
 800ecb6:	e7f3      	b.n	800eca0 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	4620      	mov	r0, r4
 800ecbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecbe:	4798      	blx	r3
 800ecc0:	e7e6      	b.n	800ec90 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 800ecc2:	bf00      	nop
 800ecc4:	08020081 	.word	0x08020081
 800ecc8:	08020190 	.word	0x08020190
 800eccc:	080200a6 	.word	0x080200a6

0800ecd0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	4604      	mov	r4, r0
 800ecd4:	460e      	mov	r6, r1
 800ecd6:	6860      	ldr	r0, [r4, #4]
 800ecd8:	6803      	ldr	r3, [r0, #0]
 800ecda:	685b      	ldr	r3, [r3, #4]
 800ecdc:	4798      	blx	r3
 800ecde:	2800      	cmp	r0, #0
 800ece0:	d1f9      	bne.n	800ecd6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ece2:	4d0b      	ldr	r5, [pc, #44]	; (800ed10 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 800ece4:	6828      	ldr	r0, [r5, #0]
 800ece6:	6803      	ldr	r3, [r0, #0]
 800ece8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ecea:	4798      	blx	r3
 800ecec:	f7fd fcb0 	bl	800c650 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ecf0:	6860      	ldr	r0, [r4, #4]
 800ecf2:	6803      	ldr	r3, [r0, #0]
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	689b      	ldr	r3, [r3, #8]
 800ecf8:	4798      	blx	r3
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	4620      	mov	r0, r4
 800ecfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed00:	4798      	blx	r3
 800ed02:	6828      	ldr	r0, [r5, #0]
 800ed04:	6803      	ldr	r3, [r0, #0]
 800ed06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ed0c:	4718      	bx	r3
 800ed0e:	bf00      	nop
 800ed10:	20009f08 	.word	0x20009f08

0800ed14 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ed14:	b508      	push	{r3, lr}
 800ed16:	f7fd fc61 	bl	800c5dc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ed1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ed1e:	f7fd bc7b 	b.w	800c618 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ed22 <_ZN8touchgfx13DMA_Interface5startEv>:
 800ed22:	b510      	push	{r4, lr}
 800ed24:	4604      	mov	r4, r0
 800ed26:	6840      	ldr	r0, [r0, #4]
 800ed28:	6803      	ldr	r3, [r0, #0]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4798      	blx	r3
 800ed2e:	b948      	cbnz	r0, 800ed44 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ed30:	7a63      	ldrb	r3, [r4, #9]
 800ed32:	b13b      	cbz	r3, 800ed44 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ed34:	7a23      	ldrb	r3, [r4, #8]
 800ed36:	b92b      	cbnz	r3, 800ed44 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ed38:	6823      	ldr	r3, [r4, #0]
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed42:	4718      	bx	r3
 800ed44:	bd10      	pop	{r4, pc}
	...

0800ed48 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800ed48:	b510      	push	{r4, lr}
 800ed4a:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
 800ed4e:	1b12      	subs	r2, r2, r4
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	bfdc      	itt	le
 800ed54:	6883      	ldrle	r3, [r0, #8]
 800ed56:	18d2      	addle	r2, r2, r3
 800ed58:	2a01      	cmp	r2, #1
 800ed5a:	dd18      	ble.n	800ed8e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 800ed5c:	6843      	ldr	r3, [r0, #4]
 800ed5e:	f101 021c 	add.w	r2, r1, #28
 800ed62:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 800ed66:	f851 4b04 	ldr.w	r4, [r1], #4
 800ed6a:	f843 4b04 	str.w	r4, [r3], #4
 800ed6e:	4291      	cmp	r1, r2
 800ed70:	d1f9      	bne.n	800ed66 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 800ed72:	880a      	ldrh	r2, [r1, #0]
 800ed74:	801a      	strh	r2, [r3, #0]
 800ed76:	788a      	ldrb	r2, [r1, #2]
 800ed78:	709a      	strb	r2, [r3, #2]
 800ed7a:	68c3      	ldr	r3, [r0, #12]
 800ed7c:	6882      	ldr	r2, [r0, #8]
 800ed7e:	f3bf 8f5b 	dmb	ish
 800ed82:	3301      	adds	r3, #1
 800ed84:	429a      	cmp	r2, r3
 800ed86:	bfd8      	it	le
 800ed88:	1a9b      	suble	r3, r3, r2
 800ed8a:	60c3      	str	r3, [r0, #12]
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	4b03      	ldr	r3, [pc, #12]	; (800ed9c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800ed90:	4a03      	ldr	r2, [pc, #12]	; (800eda0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800ed92:	4804      	ldr	r0, [pc, #16]	; (800eda4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 800ed94:	2139      	movs	r1, #57	; 0x39
 800ed96:	f00e fd6d 	bl	801d874 <__assert_func>
 800ed9a:	bf00      	nop
 800ed9c:	080200cc 	.word	0x080200cc
 800eda0:	080201c0 	.word	0x080201c0
 800eda4:	080200a6 	.word	0x080200a6

0800eda8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800eda8:	b510      	push	{r4, lr}
 800edaa:	6803      	ldr	r3, [r0, #0]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	4604      	mov	r4, r0
 800edb0:	4798      	blx	r3
 800edb2:	b128      	cbz	r0, 800edc0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800edb4:	4b07      	ldr	r3, [pc, #28]	; (800edd4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800edb6:	4a08      	ldr	r2, [pc, #32]	; (800edd8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800edb8:	4808      	ldr	r0, [pc, #32]	; (800eddc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800edba:	213f      	movs	r1, #63	; 0x3f
 800edbc:	f00e fd5a 	bl	801d874 <__assert_func>
 800edc0:	6923      	ldr	r3, [r4, #16]
 800edc2:	68a2      	ldr	r2, [r4, #8]
 800edc4:	f3bf 8f5b 	dmb	ish
 800edc8:	3301      	adds	r3, #1
 800edca:	429a      	cmp	r2, r3
 800edcc:	bfd8      	it	le
 800edce:	1a9b      	suble	r3, r3, r2
 800edd0:	6123      	str	r3, [r4, #16]
 800edd2:	bd10      	pop	{r4, pc}
 800edd4:	080200ef 	.word	0x080200ef
 800edd8:	0802020e 	.word	0x0802020e
 800eddc:	080200a6 	.word	0x080200a6

0800ede0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ede0:	b570      	push	{r4, r5, r6, lr}
 800ede2:	4604      	mov	r4, r0
 800ede4:	6840      	ldr	r0, [r0, #4]
 800ede6:	6803      	ldr	r3, [r0, #0]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4798      	blx	r3
 800edec:	4605      	mov	r5, r0
 800edee:	b930      	cbnz	r0, 800edfe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800edf0:	7a23      	ldrb	r3, [r4, #8]
 800edf2:	b123      	cbz	r3, 800edfe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800edf4:	6860      	ldr	r0, [r4, #4]
 800edf6:	6803      	ldr	r3, [r0, #0]
 800edf8:	695b      	ldr	r3, [r3, #20]
 800edfa:	4798      	blx	r3
 800edfc:	7225      	strb	r5, [r4, #8]
 800edfe:	6860      	ldr	r0, [r4, #4]
 800ee00:	6803      	ldr	r3, [r0, #0]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4798      	blx	r3
 800ee06:	b928      	cbnz	r0, 800ee14 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ee08:	6823      	ldr	r3, [r4, #0]
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee12:	4718      	bx	r3
 800ee14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee18:	f7fd bc36 	b.w	800c688 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800ee1c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800ee1c:	b510      	push	{r4, lr}
 800ee1e:	4c04      	ldr	r4, [pc, #16]	; (800ee30 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800ee20:	6082      	str	r2, [r0, #8]
 800ee22:	2200      	movs	r2, #0
 800ee24:	e9c0 4100 	strd	r4, r1, [r0]
 800ee28:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800ee2c:	bd10      	pop	{r4, pc}
 800ee2e:	bf00      	nop
 800ee30:	08020174 	.word	0x08020174

0800ee34 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800ee34:	6840      	ldr	r0, [r0, #4]
 800ee36:	6803      	ldr	r3, [r0, #0]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	4718      	bx	r3

0800ee3c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800ee3c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800ee40:	4770      	bx	lr

0800ee42 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 800ee42:	b570      	push	{r4, r5, r6, lr}
 800ee44:	790b      	ldrb	r3, [r1, #4]
 800ee46:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	bf0c      	ite	eq
 800ee4e:	2301      	moveq	r3, #1
 800ee50:	2300      	movne	r3, #0
 800ee52:	4604      	mov	r4, r0
 800ee54:	460e      	mov	r6, r1
 800ee56:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800ee5a:	d110      	bne.n	800ee7e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 800ee5c:	b185      	cbz	r5, 800ee80 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3e>
 800ee5e:	7933      	ldrb	r3, [r6, #4]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d113      	bne.n	800ee8c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800ee64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ee66:	b188      	cbz	r0, 800ee8c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800ee68:	6803      	ldr	r3, [r0, #0]
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	4798      	blx	r3
 800ee6e:	b168      	cbz	r0, 800ee8c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800ee70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ee72:	6803      	ldr	r3, [r0, #0]
 800ee74:	4621      	mov	r1, r4
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee7c:	4718      	bx	r3
 800ee7e:	b12d      	cbz	r5, 800ee8c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x4a>
 800ee80:	6823      	ldr	r3, [r4, #0]
 800ee82:	4620      	mov	r0, r4
 800ee84:	695b      	ldr	r3, [r3, #20]
 800ee86:	4798      	blx	r3
 800ee88:	2d00      	cmp	r5, #0
 800ee8a:	d1e8      	bne.n	800ee5e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}

0800ee8e <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 800ee8e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ee92:	b133      	cbz	r3, 800eea2 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 800ee94:	790b      	ldrb	r3, [r1, #4]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	bf01      	itttt	eq
 800ee9a:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 800ee9c:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 800ee9e:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 800eea0:	8603      	strheq	r3, [r0, #48]	; 0x30
 800eea2:	f7ff bfce 	b.w	800ee42 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
	...

0800eea8 <_ZN8touchgfx12ToggleButtonC1Ev>:
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2101      	movs	r1, #1
 800eeac:	8082      	strh	r2, [r0, #4]
 800eeae:	80c2      	strh	r2, [r0, #6]
 800eeb0:	8102      	strh	r2, [r0, #8]
 800eeb2:	8142      	strh	r2, [r0, #10]
 800eeb4:	8182      	strh	r2, [r0, #12]
 800eeb6:	81c2      	strh	r2, [r0, #14]
 800eeb8:	8202      	strh	r2, [r0, #16]
 800eeba:	8242      	strh	r2, [r0, #18]
 800eebc:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800eec0:	61c2      	str	r2, [r0, #28]
 800eec2:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800eec6:	6282      	str	r2, [r0, #40]	; 0x28
 800eec8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 800eecc:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800eed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eed4:	4903      	ldr	r1, [pc, #12]	; (800eee4 <_ZN8touchgfx12ToggleButtonC1Ev+0x3c>)
 800eed6:	85c2      	strh	r2, [r0, #46]	; 0x2e
 800eed8:	8602      	strh	r2, [r0, #48]	; 0x30
 800eeda:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
 800eede:	6001      	str	r1, [r0, #0]
 800eee0:	8682      	strh	r2, [r0, #52]	; 0x34
 800eee2:	4770      	bx	lr
 800eee4:	080202b4 	.word	0x080202b4

0800eee8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800eee8:	2200      	movs	r2, #0
 800eeea:	8002      	strh	r2, [r0, #0]
 800eeec:	8042      	strh	r2, [r0, #2]
 800eeee:	8082      	strh	r2, [r0, #4]
 800eef0:	80c2      	strh	r2, [r0, #6]
 800eef2:	4770      	bx	lr

0800eef4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800eef4:	b570      	push	{r4, r5, r6, lr}
 800eef6:	6803      	ldr	r3, [r0, #0]
 800eef8:	4604      	mov	r4, r0
 800eefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eefc:	4615      	mov	r5, r2
 800eefe:	4798      	blx	r3
 800ef00:	6823      	ldr	r3, [r4, #0]
 800ef02:	4629      	mov	r1, r5
 800ef04:	4620      	mov	r0, r4
 800ef06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ef08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef0c:	4718      	bx	r3
	...

0800ef10 <_ZNK8touchgfx9TypedText7getTextEv>:
 800ef10:	b510      	push	{r4, lr}
 800ef12:	4604      	mov	r4, r0
 800ef14:	f7fb f8dc 	bl	800a0d0 <_ZNK8touchgfx9TypedText11assertValidEv>
 800ef18:	4b03      	ldr	r3, [pc, #12]	; (800ef28 <_ZNK8touchgfx9TypedText7getTextEv+0x18>)
 800ef1a:	8821      	ldrh	r1, [r4, #0]
 800ef1c:	6818      	ldr	r0, [r3, #0]
 800ef1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef22:	f7fc bd3d 	b.w	800b9a0 <_ZNK8touchgfx5Texts7getTextEt>
 800ef26:	bf00      	nop
 800ef28:	20009f84 	.word	0x20009f84

0800ef2c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 800ef2c:	b570      	push	{r4, r5, r6, lr}
 800ef2e:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800ef30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef34:	429a      	cmp	r2, r3
 800ef36:	4604      	mov	r4, r0
 800ef38:	d00c      	beq.n	800ef54 <_ZN8touchgfx8TextArea13getTextHeightEv+0x28>
 800ef3a:	f850 3b26 	ldr.w	r3, [r0], #38
 800ef3e:	6f1d      	ldr	r5, [r3, #112]	; 0x70
 800ef40:	f7ff ffe6 	bl	800ef10 <_ZNK8touchgfx9TypedText7getTextEv>
 800ef44:	2300      	movs	r3, #0
 800ef46:	4601      	mov	r1, r0
 800ef48:	46ac      	mov	ip, r5
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef52:	4760      	bx	ip
 800ef54:	2000      	movs	r0, #0
 800ef56:	bd70      	pop	{r4, r5, r6, pc}

0800ef58 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800ef58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef5a:	6803      	ldr	r3, [r0, #0]
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800ef60:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800ef62:	a802      	add	r0, sp, #8
 800ef64:	460d      	mov	r5, r1
 800ef66:	f820 3d04 	strh.w	r3, [r0, #-4]!
 800ef6a:	f7fb f87d 	bl	800a068 <_ZNK8touchgfx9TypedText7getFontEv>
 800ef6e:	6803      	ldr	r3, [r0, #0]
 800ef70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef72:	4798      	blx	r3
 800ef74:	1a29      	subs	r1, r5, r0
 800ef76:	b209      	sxth	r1, r1
 800ef78:	4620      	mov	r0, r4
 800ef7a:	47b0      	blx	r6
 800ef7c:	b002      	add	sp, #8
 800ef7e:	bd70      	pop	{r4, r5, r6, pc}

0800ef80 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800ef80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef82:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800ef84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d016      	beq.n	800efba <_ZNK8touchgfx8TextArea12getTextWidthEv+0x3a>
 800ef8c:	f100 0426 	add.w	r4, r0, #38	; 0x26
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7fb f869 	bl	800a068 <_ZNK8touchgfx9TypedText7getFontEv>
 800ef96:	6803      	ldr	r3, [r0, #0]
 800ef98:	4605      	mov	r5, r0
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	69de      	ldr	r6, [r3, #28]
 800ef9e:	f7fb f87f 	bl	800a0a0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800efa2:	4607      	mov	r7, r0
 800efa4:	4620      	mov	r0, r4
 800efa6:	f7ff ffb3 	bl	800ef10 <_ZNK8touchgfx9TypedText7getTextEv>
 800efaa:	2300      	movs	r3, #0
 800efac:	4602      	mov	r2, r0
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	4639      	mov	r1, r7
 800efb2:	4628      	mov	r0, r5
 800efb4:	47b0      	blx	r6
 800efb6:	b003      	add	sp, #12
 800efb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efba:	2000      	movs	r0, #0
 800efbc:	e7fb      	b.n	800efb6 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x36>

0800efbe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800efbe:	b40e      	push	{r1, r2, r3}
 800efc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc4:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800efc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800efca:	429a      	cmp	r2, r3
 800efcc:	b09b      	sub	sp, #108	; 0x6c
 800efce:	4604      	mov	r4, r0
 800efd0:	d03f      	beq.n	800f052 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x94>
 800efd2:	f100 0726 	add.w	r7, r0, #38	; 0x26
 800efd6:	ab22      	add	r3, sp, #136	; 0x88
 800efd8:	4638      	mov	r0, r7
 800efda:	9303      	str	r3, [sp, #12]
 800efdc:	f7fb f844 	bl	800a068 <_ZNK8touchgfx9TypedText7getFontEv>
 800efe0:	6803      	ldr	r3, [r0, #0]
 800efe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efe4:	4680      	mov	r8, r0
 800efe6:	4798      	blx	r3
 800efe8:	b205      	sxth	r5, r0
 800efea:	4606      	mov	r6, r0
 800efec:	a804      	add	r0, sp, #16
 800efee:	f002 fcd3 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 800eff2:	f8d8 3000 	ldr.w	r3, [r8]
 800eff6:	4640      	mov	r0, r8
 800eff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800effa:	4798      	blx	r3
 800effc:	9a03      	ldr	r2, [sp, #12]
 800effe:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f000:	4603      	mov	r3, r0
 800f002:	a804      	add	r0, sp, #16
 800f004:	f002 fce5 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800f008:	4638      	mov	r0, r7
 800f00a:	f7fb f849 	bl	800a0a0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800f00e:	4680      	mov	r8, r0
 800f010:	4638      	mov	r0, r7
 800f012:	f7fb f829 	bl	800a068 <_ZNK8touchgfx9TypedText7getFontEv>
 800f016:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f01a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	4642      	mov	r2, r8
 800f022:	4603      	mov	r3, r0
 800f024:	a804      	add	r0, sp, #16
 800f026:	f000 fd88 	bl	800fb3a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f02a:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800f02e:	18a9      	adds	r1, r5, r2
 800f030:	2900      	cmp	r1, #0
 800f032:	b203      	sxth	r3, r0
 800f034:	dd0b      	ble.n	800f04e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x90>
 800f036:	3b01      	subs	r3, #1
 800f038:	fb13 f302 	smulbb	r3, r3, r2
 800f03c:	fb16 3300 	smlabb	r3, r6, r0, r3
 800f040:	b21d      	sxth	r5, r3
 800f042:	4628      	mov	r0, r5
 800f044:	b01b      	add	sp, #108	; 0x6c
 800f046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f04a:	b003      	add	sp, #12
 800f04c:	4770      	bx	lr
 800f04e:	2b00      	cmp	r3, #0
 800f050:	dcf7      	bgt.n	800f042 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
 800f052:	2500      	movs	r5, #0
 800f054:	e7f5      	b.n	800f042 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x84>
	...

0800f058 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05c:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 800f05e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f062:	429e      	cmp	r6, r3
 800f064:	b08d      	sub	sp, #52	; 0x34
 800f066:	4604      	mov	r4, r0
 800f068:	4688      	mov	r8, r1
 800f06a:	d04b      	beq.n	800f104 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 800f06c:	f100 0526 	add.w	r5, r0, #38	; 0x26
 800f070:	4628      	mov	r0, r5
 800f072:	f7fa fff9 	bl	800a068 <_ZNK8touchgfx9TypedText7getFontEv>
 800f076:	4607      	mov	r7, r0
 800f078:	2800      	cmp	r0, #0
 800f07a:	d043      	beq.n	800f104 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xac>
 800f07c:	4628      	mov	r0, r5
 800f07e:	f7fb f827 	bl	800a0d0 <_ZNK8touchgfx9TypedText11assertValidEv>
 800f082:	4b22      	ldr	r3, [pc, #136]	; (800f10c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb4>)
 800f084:	f894 902e 	ldrb.w	r9, [r4, #46]	; 0x2e
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f9b4 a02c 	ldrsh.w	sl, [r4, #44]	; 0x2c
 800f08e:	f894 b030 	ldrb.w	fp, [r4, #48]	; 0x30
 800f092:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800f096:	4628      	mov	r0, r5
 800f098:	785e      	ldrb	r6, [r3, #1]
 800f09a:	f7fb f801 	bl	800a0a0 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800f09e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f0a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0a2:	4b1b      	ldr	r3, [pc, #108]	; (800f110 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xb8>)
 800f0a4:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 800f0ae:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f0b2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 800f0b6:	9707      	str	r7, [sp, #28]
 800f0b8:	f3c6 0601 	ubfx	r6, r6, #0, #2
 800f0bc:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 800f0c0:	f88d 6020 	strb.w	r6, [sp, #32]
 800f0c4:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800f0c8:	f88d b022 	strb.w	fp, [sp, #34]	; 0x22
 800f0cc:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 800f0d0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f0d4:	b10a      	cbz	r2, 800f0da <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x82>
 800f0d6:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800f0d8:	b906      	cbnz	r6, 800f0dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x84>
 800f0da:	689e      	ldr	r6, [r3, #8]
 800f0dc:	af05      	add	r7, sp, #20
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4638      	mov	r0, r7
 800f0e2:	f001 fe1a 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	f7ff ff12 	bl	800ef10 <_ZNK8touchgfx9TypedText7getTextEv>
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f0f2:	ab07      	add	r3, sp, #28
 800f0f4:	9001      	str	r0, [sp, #4]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	e897 0006 	ldmia.w	r7, {r1, r2}
 800f0fc:	4643      	mov	r3, r8
 800f0fe:	4630      	mov	r0, r6
 800f100:	f000 fae6 	bl	800f6d0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f104:	b00d      	add	sp, #52	; 0x34
 800f106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10a:	bf00      	nop
 800f10c:	20009f78 	.word	0x20009f78
 800f110:	20009f08 	.word	0x20009f08

0800f114 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 800f118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f11c:	429a      	cmp	r2, r3
 800f11e:	4604      	mov	r4, r0
 800f120:	d021      	beq.n	800f166 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x52>
 800f122:	6803      	ldr	r3, [r0, #0]
 800f124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f126:	4798      	blx	r3
 800f128:	6823      	ldr	r3, [r4, #0]
 800f12a:	4605      	mov	r5, r0
 800f12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f12e:	4620      	mov	r0, r4
 800f130:	4798      	blx	r3
 800f132:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f136:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	4606      	mov	r6, r0
 800f13e:	b22d      	sxth	r5, r5
 800f140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f142:	d109      	bne.n	800f158 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x44>
 800f144:	4629      	mov	r1, r5
 800f146:	4620      	mov	r0, r4
 800f148:	4798      	blx	r3
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f14e:	4631      	mov	r1, r6
 800f150:	4620      	mov	r0, r4
 800f152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f156:	4718      	bx	r3
 800f158:	4601      	mov	r1, r0
 800f15a:	4620      	mov	r0, r4
 800f15c:	4798      	blx	r3
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	4629      	mov	r1, r5
 800f162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f164:	e7f4      	b.n	800f150 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>
 800f166:	bd70      	pop	{r4, r5, r6, pc}

0800f168 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:
 800f168:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 800f16c:	84c1      	strh	r1, [r0, #38]	; 0x26
 800f16e:	b922      	cbnz	r2, 800f17a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 800f170:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f174:	b90b      	cbnz	r3, 800f17a <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x12>
 800f176:	f7ff bfcd 	b.w	800f114 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800f17a:	4770      	bx	lr

0800f17c <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	880b      	ldrh	r3, [r1, #0]
 800f180:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800f182:	4605      	mov	r5, r0
 800f184:	8813      	ldrh	r3, [r2, #0]
 800f186:	f825 3f30 	strh.w	r3, [r5, #48]!
 800f18a:	4604      	mov	r4, r0
 800f18c:	4628      	mov	r0, r5
 800f18e:	f002 feb9 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f192:	8120      	strh	r0, [r4, #8]
 800f194:	4628      	mov	r0, r5
 800f196:	f002 feef 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f19a:	8160      	strh	r0, [r4, #10]
 800f19c:	bd38      	pop	{r3, r4, r5, pc}

0800f19e <_ZNK8touchgfx6Button12getSolidRectEv>:
 800f19e:	b510      	push	{r4, lr}
 800f1a0:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800f1a4:	2bff      	cmp	r3, #255	; 0xff
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	d006      	beq.n	800f1b8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	8003      	strh	r3, [r0, #0]
 800f1ae:	8043      	strh	r3, [r0, #2]
 800f1b0:	8083      	strh	r3, [r0, #4]
 800f1b2:	80c3      	strh	r3, [r0, #6]
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	bd10      	pop	{r4, pc}
 800f1b8:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 800f1bc:	b11b      	cbz	r3, 800f1c6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800f1be:	3130      	adds	r1, #48	; 0x30
 800f1c0:	f002 ff14 	bl	8011fec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f1c4:	e7f6      	b.n	800f1b4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800f1c6:	312e      	adds	r1, #46	; 0x2e
 800f1c8:	e7fa      	b.n	800f1c0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800f1cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800f1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f1d4:	b08b      	sub	sp, #44	; 0x2c
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	4689      	mov	r9, r1
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d043      	beq.n	800f266 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9a>
 800f1de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800f1e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f1e4:	a805      	add	r0, sp, #20
 800f1e6:	f002 fe8d 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f1ea:	4607      	mov	r7, r0
 800f1ec:	fa0f f880 	sxth.w	r8, r0
 800f1f0:	a805      	add	r0, sp, #20
 800f1f2:	f002 fec1 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f1f6:	f9b9 6000 	ldrsh.w	r6, [r9]
 800f1fa:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 800f1fe:	4432      	add	r2, r6
 800f200:	b292      	uxth	r2, r2
 800f202:	2300      	movs	r3, #0
 800f204:	fa0f fe82 	sxth.w	lr, r2
 800f208:	459e      	cmp	lr, r3
 800f20a:	fa0f fc80 	sxth.w	ip, r0
 800f20e:	9306      	str	r3, [sp, #24]
 800f210:	dd2b      	ble.n	800f26a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f212:	45b0      	cmp	r8, r6
 800f214:	dd29      	ble.n	800f26a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f216:	f9b9 5002 	ldrsh.w	r5, [r9, #2]
 800f21a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
 800f21e:	442b      	add	r3, r5
 800f220:	b29b      	uxth	r3, r3
 800f222:	b219      	sxth	r1, r3
 800f224:	2900      	cmp	r1, #0
 800f226:	dd20      	ble.n	800f26a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f228:	45ac      	cmp	ip, r5
 800f22a:	dd1e      	ble.n	800f26a <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9e>
 800f22c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800f230:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800f234:	45f0      	cmp	r8, lr
 800f236:	bfb8      	it	lt
 800f238:	463a      	movlt	r2, r7
 800f23a:	458c      	cmp	ip, r1
 800f23c:	bfb8      	it	lt
 800f23e:	4603      	movlt	r3, r0
 800f240:	1b92      	subs	r2, r2, r6
 800f242:	1b5b      	subs	r3, r3, r5
 800f244:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f248:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f24c:	f8ad 6018 	strh.w	r6, [sp, #24]
 800f250:	f8ad 501a 	strh.w	r5, [sp, #26]
 800f254:	4b1d      	ldr	r3, [pc, #116]	; (800f2cc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	b953      	cbnz	r3, 800f270 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa4>
 800f25a:	4b1d      	ldr	r3, [pc, #116]	; (800f2d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x104>)
 800f25c:	4a1d      	ldr	r2, [pc, #116]	; (800f2d4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 800f25e:	481e      	ldr	r0, [pc, #120]	; (800f2d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 800f260:	21b8      	movs	r1, #184	; 0xb8
 800f262:	f00e fb07 	bl	801d874 <__assert_func>
 800f266:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800f268:	e7ba      	b.n	800f1e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800f26a:	2300      	movs	r3, #0
 800f26c:	9307      	str	r3, [sp, #28]
 800f26e:	e7f1      	b.n	800f254 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x88>
 800f270:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800f274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f278:	429a      	cmp	r2, r3
 800f27a:	d024      	beq.n	800f2c6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800f27c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f280:	b30b      	cbz	r3, 800f2c6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800f282:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800f286:	b1f3      	cbz	r3, 800f2c6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xfa>
 800f288:	2300      	movs	r3, #0
 800f28a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800f28e:	6823      	ldr	r3, [r4, #0]
 800f290:	a908      	add	r1, sp, #32
 800f292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f294:	4620      	mov	r0, r4
 800f296:	4798      	blx	r3
 800f298:	4b10      	ldr	r3, [pc, #64]	; (800f2dc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f2a0:	b10a      	cbz	r2, 800f2a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800f2a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f2a4:	b900      	cbnz	r0, 800f2a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xdc>
 800f2a6:	6898      	ldr	r0, [r3, #8]
 800f2a8:	6801      	ldr	r1, [r0, #0]
 800f2aa:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 800f2ae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800f2b2:	2501      	movs	r5, #1
 800f2b4:	9502      	str	r5, [sp, #8]
 800f2b6:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 800f2ba:	9401      	str	r4, [sp, #4]
 800f2bc:	ac06      	add	r4, sp, #24
 800f2be:	9400      	str	r4, [sp, #0]
 800f2c0:	68cc      	ldr	r4, [r1, #12]
 800f2c2:	a905      	add	r1, sp, #20
 800f2c4:	47a0      	blx	r4
 800f2c6:	b00b      	add	sp, #44	; 0x2c
 800f2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2cc:	20009fb0 	.word	0x20009fb0
 800f2d0:	08020398 	.word	0x08020398
 800f2d4:	0802046c 	.word	0x0802046c
 800f2d8:	080203d4 	.word	0x080203d4
 800f2dc:	20009f08 	.word	0x20009f08

0800f2e0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	4605      	mov	r5, r0
 800f2e4:	880b      	ldrh	r3, [r1, #0]
 800f2e6:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f2e8:	f855 3b26 	ldr.w	r3, [r5], #38
 800f2ec:	4604      	mov	r4, r0
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 800f2f2:	f002 fe07 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f2f6:	b201      	sxth	r1, r0
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	47b0      	blx	r6
 800f2fc:	6823      	ldr	r3, [r4, #0]
 800f2fe:	4628      	mov	r0, r5
 800f300:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800f302:	f002 fe39 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f306:	b201      	sxth	r1, r0
 800f308:	4620      	mov	r0, r4
 800f30a:	47b0      	blx	r6
 800f30c:	4628      	mov	r0, r5
 800f30e:	f002 fec7 	bl	80120a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800f312:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800f316:	bd70      	pop	{r4, r5, r6, pc}

0800f318 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800f318:	b510      	push	{r4, lr}
 800f31a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800f31e:	2bff      	cmp	r3, #255	; 0xff
 800f320:	4604      	mov	r4, r0
 800f322:	d006      	beq.n	800f332 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800f324:	2300      	movs	r3, #0
 800f326:	8003      	strh	r3, [r0, #0]
 800f328:	8043      	strh	r3, [r0, #2]
 800f32a:	8083      	strh	r3, [r0, #4]
 800f32c:	80c3      	strh	r3, [r0, #6]
 800f32e:	4620      	mov	r0, r4
 800f330:	bd10      	pop	{r4, pc}
 800f332:	3126      	adds	r1, #38	; 0x26
 800f334:	f002 fe5a 	bl	8011fec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800f338:	e7f9      	b.n	800f32e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0800f33c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f340:	4604      	mov	r4, r0
 800f342:	b088      	sub	sp, #32
 800f344:	f854 3b26 	ldr.w	r3, [r4], #38
 800f348:	2500      	movs	r5, #0
 800f34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f34c:	460f      	mov	r7, r1
 800f34e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f352:	a904      	add	r1, sp, #16
 800f354:	4606      	mov	r6, r0
 800f356:	4798      	blx	r3
 800f358:	4620      	mov	r0, r4
 800f35a:	f002 fdd3 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f35e:	4680      	mov	r8, r0
 800f360:	4620      	mov	r0, r4
 800f362:	f002 fe09 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f366:	9506      	str	r5, [sp, #24]
 800f368:	ad06      	add	r5, sp, #24
 800f36a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800f36e:	4639      	mov	r1, r7
 800f370:	4628      	mov	r0, r5
 800f372:	f8ad 801c 	strh.w	r8, [sp, #28]
 800f376:	f7fe fd9f 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 800f37a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800f37e:	b1c3      	cbz	r3, 800f3b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 800f380:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800f384:	b1ab      	cbz	r3, 800f3b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x76>
 800f386:	4b0c      	ldr	r3, [pc, #48]	; (800f3b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7c>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800f38e:	b10a      	cbz	r2, 800f394 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x58>
 800f390:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f392:	b900      	cbnz	r0, 800f396 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5a>
 800f394:	6898      	ldr	r0, [r3, #8]
 800f396:	6801      	ldr	r1, [r0, #0]
 800f398:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800f39c:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800f3a0:	2701      	movs	r7, #1
 800f3a2:	9702      	str	r7, [sp, #8]
 800f3a4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800f3a8:	e9cd 5600 	strd	r5, r6, [sp]
 800f3ac:	68cd      	ldr	r5, [r1, #12]
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	47a8      	blx	r5
 800f3b2:	b008      	add	sp, #32
 800f3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b8:	20009f08 	.word	0x20009f08

0800f3bc <_ZN8touchgfx3LCD4initEv>:
 800f3bc:	4770      	bx	lr

0800f3be <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800f3be:	2000      	movs	r0, #0
 800f3c0:	4770      	bx	lr

0800f3c2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800f3c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c6:	b091      	sub	sp, #68	; 0x44
 800f3c8:	4699      	mov	r9, r3
 800f3ca:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 800f3ce:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800f3d0:	f9ba 300c 	ldrsh.w	r3, [sl, #12]
 800f3d4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800f3d8:	4680      	mov	r8, r0
 800f3da:	4617      	mov	r7, r2
 800f3dc:	a80e      	add	r0, sp, #56	; 0x38
 800f3de:	f9ba 2008 	ldrsh.w	r2, [sl, #8]
 800f3e2:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800f3e6:	2500      	movs	r5, #0
 800f3e8:	910d      	str	r1, [sp, #52]	; 0x34
 800f3ea:	950e      	str	r5, [sp, #56]	; 0x38
 800f3ec:	f000 fe3e 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800f3f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f3f2:	f8d9 6000 	ldr.w	r6, [r9]
 800f3f6:	6818      	ldr	r0, [r3, #0]
 800f3f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f3fa:	f9b4 b000 	ldrsh.w	fp, [r4]
 800f3fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f402:	eb02 0c06 	add.w	ip, r2, r6
 800f406:	1b80      	subs	r0, r0, r6
 800f408:	ebab 0e0c 	sub.w	lr, fp, ip
 800f40c:	4570      	cmp	r0, lr
 800f40e:	f340 80bd 	ble.w	800f58c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800f412:	88a1      	ldrh	r1, [r4, #4]
 800f414:	4459      	add	r1, fp
 800f416:	b209      	sxth	r1, r1
 800f418:	458c      	cmp	ip, r1
 800f41a:	f300 80b7 	bgt.w	800f58c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800f41e:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 800f422:	ed97 4a09 	vldr	s8, [r7, #36]	; 0x24
 800f426:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 800f42a:	edd9 6a07 	vldr	s13, [r9, #28]
 800f42e:	edd9 1a0a 	vldr	s3, [r9, #40]	; 0x28
 800f432:	ed99 2a0d 	vldr	s4, [r9, #52]	; 0x34
 800f436:	4283      	cmp	r3, r0
 800f438:	bfa8      	it	ge
 800f43a:	4603      	movge	r3, r0
 800f43c:	ee07 3a90 	vmov	s15, r3
 800f440:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800f444:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800f448:	ee25 4a04 	vmul.f32	s8, s10, s8
 800f44c:	ee65 4a24 	vmul.f32	s9, s10, s9
 800f450:	ee25 5a27 	vmul.f32	s10, s10, s15
 800f454:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f458:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f45c:	45e3      	cmp	fp, ip
 800f45e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800f462:	ee32 1a05 	vadd.f32	s2, s4, s10
 800f466:	ee36 0a84 	vadd.f32	s0, s13, s8
 800f46a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f46e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f472:	f340 808e 	ble.w	800f592 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1d0>
 800f476:	fb9e f5f3 	sdiv	r5, lr, r3
 800f47a:	ee07 5a10 	vmov	s14, r5
 800f47e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f482:	2d00      	cmp	r5, #0
 800f484:	fb03 e415 	mls	r4, r3, r5, lr
 800f488:	eea7 0a04 	vfma.f32	s0, s14, s8
 800f48c:	eee7 0a24 	vfma.f32	s1, s14, s9
 800f490:	eea7 1a05 	vfma.f32	s2, s14, s10
 800f494:	dd13      	ble.n	800f4be <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800f496:	ee70 6a44 	vsub.f32	s13, s0, s8
 800f49a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800f49e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a6:	bf18      	it	ne
 800f4a8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800f4ac:	ee31 2a45 	vsub.f32	s4, s2, s10
 800f4b0:	bf08      	it	eq
 800f4b2:	eeb0 7a67 	vmoveq.f32	s14, s15
 800f4b6:	ee61 1a87 	vmul.f32	s3, s3, s14
 800f4ba:	ee22 2a07 	vmul.f32	s4, s4, s14
 800f4be:	fb05 f703 	mul.w	r7, r5, r3
 800f4c2:	1bc0      	subs	r0, r0, r7
 800f4c4:	443e      	add	r6, r7
 800f4c6:	1997      	adds	r7, r2, r6
 800f4c8:	4407      	add	r7, r0
 800f4ca:	42b9      	cmp	r1, r7
 800f4cc:	bfbc      	itt	lt
 800f4ce:	1a88      	sublt	r0, r1, r2
 800f4d0:	1b80      	sublt	r0, r0, r6
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	dd5a      	ble.n	800f58c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ca>
 800f4d6:	fb90 f1f3 	sdiv	r1, r0, r3
 800f4da:	fb03 0211 	mls	r2, r3, r1, r0
 800f4de:	b90a      	cbnz	r2, 800f4e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x122>
 800f4e0:	3901      	subs	r1, #1
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800f4e8:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
 800f4ec:	44a4      	add	ip, r4
 800f4ee:	fb03 c505 	mla	r5, r3, r5, ip
 800f4f2:	2900      	cmp	r1, #0
 800f4f4:	bfcc      	ite	gt
 800f4f6:	469e      	movgt	lr, r3
 800f4f8:	4696      	movle	lr, r2
 800f4fa:	eef0 6a42 	vmov.f32	s13, s4
 800f4fe:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800f502:	ee21 3a23 	vmul.f32	s6, s2, s7
 800f506:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800f50a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800f50e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f512:	eeb0 7a61 	vmov.f32	s14, s3
 800f516:	ee17 0a90 	vmov	r0, s15
 800f51a:	ee73 7a42 	vsub.f32	s15, s6, s4
 800f51e:	fb90 f6f3 	sdiv	r6, r0, r3
 800f522:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800f526:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800f52a:	ee17 0a90 	vmov	r0, s15
 800f52e:	fb90 f7f3 	sdiv	r7, r0, r3
 800f532:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f536:	900c      	str	r0, [sp, #48]	; 0x30
 800f538:	f8d0 8000 	ldr.w	r8, [r0]
 800f53c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800f53e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800f542:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 800f546:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f54a:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 800f54e:	f8cd a020 	str.w	sl, [sp, #32]
 800f552:	f9b0 a002 	ldrsh.w	sl, [r0, #2]
 800f556:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f558:	f8d9 9014 	ldr.w	r9, [r9, #20]
 800f55c:	9603      	str	r6, [sp, #12]
 800f55e:	e9cd 7004 	strd	r7, r0, [sp, #16]
 800f562:	ee16 0a90 	vmov	r0, s13
 800f566:	fb07 0704 	mla	r7, r7, r4, r0
 800f56a:	ee17 0a10 	vmov	r0, s14
 800f56e:	fb06 0604 	mla	r6, r6, r4, r0
 800f572:	e9cd 3600 	strd	r3, r6, [sp]
 800f576:	44ca      	add	sl, r9
 800f578:	f8cd a01c 	str.w	sl, [sp, #28]
 800f57c:	9506      	str	r5, [sp, #24]
 800f57e:	9702      	str	r7, [sp, #8]
 800f580:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f584:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f586:	ebae 0304 	sub.w	r3, lr, r4
 800f58a:	47a8      	blx	r5
 800f58c:	b011      	add	sp, #68	; 0x44
 800f58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f592:	462c      	mov	r4, r5
 800f594:	e797      	b.n	800f4c6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x104>

0800f596 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 800f596:	b570      	push	{r4, r5, r6, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	2500      	movs	r5, #0
 800f59c:	7223      	strb	r3, [r4, #8]
 800f59e:	9804      	ldr	r0, [sp, #16]
 800f5a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800f5a4:	8025      	strh	r5, [r4, #0]
 800f5a6:	6061      	str	r1, [r4, #4]
 800f5a8:	7263      	strb	r3, [r4, #9]
 800f5aa:	60e0      	str	r0, [r4, #12]
 800f5ac:	8222      	strh	r2, [r4, #16]
 800f5ae:	8265      	strh	r5, [r4, #18]
 800f5b0:	82a5      	strh	r5, [r4, #20]
 800f5b2:	82e5      	strh	r5, [r4, #22]
 800f5b4:	8325      	strh	r5, [r4, #24]
 800f5b6:	8365      	strh	r5, [r4, #26]
 800f5b8:	83a5      	strh	r5, [r4, #28]
 800f5ba:	77a5      	strb	r5, [r4, #30]
 800f5bc:	6803      	ldr	r3, [r0, #0]
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	4798      	blx	r3
 800f5c2:	4606      	mov	r6, r0
 800f5c4:	b1f8      	cbz	r0, 800f606 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f5c6:	68e0      	ldr	r0, [r4, #12]
 800f5c8:	6803      	ldr	r3, [r0, #0]
 800f5ca:	4631      	mov	r1, r6
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	4798      	blx	r3
 800f5d0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 800f5d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f5d8:	7a83      	ldrb	r3, [r0, #10]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	83a3      	strh	r3, [r4, #28]
 800f5de:	7a63      	ldrb	r3, [r4, #9]
 800f5e0:	2b04      	cmp	r3, #4
 800f5e2:	4605      	mov	r5, r0
 800f5e4:	d10f      	bne.n	800f606 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 800f5e6:	68e0      	ldr	r0, [r4, #12]
 800f5e8:	6803      	ldr	r3, [r0, #0]
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ee:	4631      	mov	r1, r6
 800f5f0:	4798      	blx	r3
 800f5f2:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f5f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f5fa:	7aab      	ldrb	r3, [r5, #10]
 800f5fc:	4313      	orrs	r3, r2
 800f5fe:	4418      	add	r0, r3
 800f600:	8ba3      	ldrh	r3, [r4, #28]
 800f602:	4418      	add	r0, r3
 800f604:	83a0      	strh	r0, [r4, #28]
 800f606:	4620      	mov	r0, r4
 800f608:	bd70      	pop	{r4, r5, r6, pc}

0800f60a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800f60a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60e:	2400      	movs	r4, #0
 800f610:	b085      	sub	sp, #20
 800f612:	4681      	mov	r9, r0
 800f614:	460f      	mov	r7, r1
 800f616:	4692      	mov	sl, r2
 800f618:	469b      	mov	fp, r3
 800f61a:	46a0      	mov	r8, r4
 800f61c:	4626      	mov	r6, r4
 800f61e:	4554      	cmp	r4, sl
 800f620:	da21      	bge.n	800f666 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 800f622:	2300      	movs	r3, #0
 800f624:	9303      	str	r3, [sp, #12]
 800f626:	463a      	mov	r2, r7
 800f628:	ab03      	add	r3, sp, #12
 800f62a:	4659      	mov	r1, fp
 800f62c:	4648      	mov	r0, r9
 800f62e:	f002 fb35 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800f632:	4605      	mov	r5, r0
 800f634:	b1b8      	cbz	r0, 800f666 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 800f636:	280a      	cmp	r0, #10
 800f638:	d015      	beq.n	800f666 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5c>
 800f63a:	9a03      	ldr	r2, [sp, #12]
 800f63c:	b182      	cbz	r2, 800f660 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x56>
 800f63e:	f992 000d 	ldrsb.w	r0, [r2, #13]
 800f642:	7a93      	ldrb	r3, [r2, #10]
 800f644:	8895      	ldrh	r5, [r2, #4]
 800f646:	f400 7080 	and.w	r0, r0, #256	; 0x100
 800f64a:	4303      	orrs	r3, r0
 800f64c:	9301      	str	r3, [sp, #4]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	4641      	mov	r1, r8
 800f652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f654:	4638      	mov	r0, r7
 800f656:	4798      	blx	r3
 800f658:	9b01      	ldr	r3, [sp, #4]
 800f65a:	4418      	add	r0, r3
 800f65c:	4406      	add	r6, r0
 800f65e:	b2b6      	uxth	r6, r6
 800f660:	3401      	adds	r4, #1
 800f662:	46a8      	mov	r8, r5
 800f664:	e7db      	b.n	800f61e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 800f666:	4630      	mov	r0, r6
 800f668:	b005      	add	sp, #20
 800f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f66e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800f66e:	2a02      	cmp	r2, #2
 800f670:	b530      	push	{r4, r5, lr}
 800f672:	d011      	beq.n	800f698 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800f674:	2a03      	cmp	r2, #3
 800f676:	d01c      	beq.n	800f6b2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800f678:	2a01      	cmp	r2, #1
 800f67a:	d10c      	bne.n	800f696 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f67c:	888b      	ldrh	r3, [r1, #4]
 800f67e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800f682:	8801      	ldrh	r1, [r0, #0]
 800f684:	8844      	ldrh	r4, [r0, #2]
 800f686:	8004      	strh	r4, [r0, #0]
 800f688:	1a9b      	subs	r3, r3, r2
 800f68a:	1a5b      	subs	r3, r3, r1
 800f68c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800f690:	8043      	strh	r3, [r0, #2]
 800f692:	8081      	strh	r1, [r0, #4]
 800f694:	80c2      	strh	r2, [r0, #6]
 800f696:	bd30      	pop	{r4, r5, pc}
 800f698:	88cb      	ldrh	r3, [r1, #6]
 800f69a:	88c2      	ldrh	r2, [r0, #6]
 800f69c:	1a9b      	subs	r3, r3, r2
 800f69e:	8842      	ldrh	r2, [r0, #2]
 800f6a0:	1a9b      	subs	r3, r3, r2
 800f6a2:	888a      	ldrh	r2, [r1, #4]
 800f6a4:	8881      	ldrh	r1, [r0, #4]
 800f6a6:	8043      	strh	r3, [r0, #2]
 800f6a8:	1a52      	subs	r2, r2, r1
 800f6aa:	8801      	ldrh	r1, [r0, #0]
 800f6ac:	1a52      	subs	r2, r2, r1
 800f6ae:	8002      	strh	r2, [r0, #0]
 800f6b0:	e7f1      	b.n	800f696 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800f6b2:	88cb      	ldrh	r3, [r1, #6]
 800f6b4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800f6b8:	8841      	ldrh	r1, [r0, #2]
 800f6ba:	f9b0 5000 	ldrsh.w	r5, [r0]
 800f6be:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f6c2:	8045      	strh	r5, [r0, #2]
 800f6c4:	1a9b      	subs	r3, r3, r2
 800f6c6:	1a5b      	subs	r3, r3, r1
 800f6c8:	8003      	strh	r3, [r0, #0]
 800f6ca:	8082      	strh	r2, [r0, #4]
 800f6cc:	80c4      	strh	r4, [r0, #6]
 800f6ce:	e7e2      	b.n	800f696 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800f6d0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	ac02      	add	r4, sp, #8
 800f6d6:	e884 0006 	stmia.w	r4, {r1, r2}
 800f6da:	461a      	mov	r2, r3
 800f6dc:	ab0c      	add	r3, sp, #48	; 0x30
 800f6de:	9305      	str	r3, [sp, #20]
 800f6e0:	4b0a      	ldr	r3, [pc, #40]	; (800f70c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 800f6e2:	685d      	ldr	r5, [r3, #4]
 800f6e4:	1069      	asrs	r1, r5, #1
 800f6e6:	07ed      	lsls	r5, r5, #31
 800f6e8:	bf4c      	ite	mi
 800f6ea:	681b      	ldrmi	r3, [r3, #0]
 800f6ec:	681d      	ldrpl	r5, [r3, #0]
 800f6ee:	eb00 0601 	add.w	r6, r0, r1
 800f6f2:	bf44      	itt	mi
 800f6f4:	5841      	ldrmi	r1, [r0, r1]
 800f6f6:	58cd      	ldrmi	r5, [r1, r3]
 800f6f8:	9b05      	ldr	r3, [sp, #20]
 800f6fa:	9301      	str	r3, [sp, #4]
 800f6fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	4621      	mov	r1, r4
 800f702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f704:	4630      	mov	r0, r6
 800f706:	47a8      	blx	r5
 800f708:	b006      	add	sp, #24
 800f70a:	bd70      	pop	{r4, r5, r6, pc}
 800f70c:	20000084 	.word	0x20000084

0800f710 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800f710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f714:	b09d      	sub	sp, #116	; 0x74
 800f716:	9114      	str	r1, [sp, #80]	; 0x50
 800f718:	9315      	str	r3, [sp, #84]	; 0x54
 800f71a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f71c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f71e:	8809      	ldrh	r1, [r1, #0]
 800f720:	889b      	ldrh	r3, [r3, #4]
 800f722:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800f724:	9210      	str	r2, [sp, #64]	; 0x40
 800f726:	440b      	add	r3, r1
 800f728:	b21b      	sxth	r3, r3
 800f72a:	930e      	str	r3, [sp, #56]	; 0x38
 800f72c:	6833      	ldr	r3, [r6, #0]
 800f72e:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 800f732:	7a59      	ldrb	r1, [r3, #9]
 800f734:	7a1b      	ldrb	r3, [r3, #8]
 800f736:	9312      	str	r3, [sp, #72]	; 0x48
 800f738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f73a:	900f      	str	r0, [sp, #60]	; 0x3c
 800f73c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 800f740:	9113      	str	r1, [sp, #76]	; 0x4c
 800f742:	f9b3 4000 	ldrsh.w	r4, [r3]
 800f746:	2a00      	cmp	r2, #0
 800f748:	d059      	beq.n	800f7fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 800f74a:	7c33      	ldrb	r3, [r6, #16]
 800f74c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f74e:	2b04      	cmp	r3, #4
 800f750:	bf14      	ite	ne
 800f752:	2301      	movne	r3, #1
 800f754:	2302      	moveq	r3, #2
 800f756:	4413      	add	r3, r2
 800f758:	f04f 0800 	mov.w	r8, #0
 800f75c:	930d      	str	r3, [sp, #52]	; 0x34
 800f75e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800f762:	4645      	mov	r5, r8
 800f764:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 800f768:	4293      	cmp	r3, r2
 800f76a:	da75      	bge.n	800f858 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x148>
 800f76c:	2300      	movs	r3, #0
 800f76e:	931a      	str	r3, [sp, #104]	; 0x68
 800f770:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f774:	6832      	ldr	r2, [r6, #0]
 800f776:	428b      	cmp	r3, r1
 800f778:	db43      	blt.n	800f802 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf2>
 800f77a:	6813      	ldr	r3, [r2, #0]
 800f77c:	4610      	mov	r0, r2
 800f77e:	695b      	ldr	r3, [r3, #20]
 800f780:	4798      	blx	r3
 800f782:	4681      	mov	r9, r0
 800f784:	6830      	ldr	r0, [r6, #0]
 800f786:	6803      	ldr	r3, [r0, #0]
 800f788:	aa1b      	add	r2, sp, #108	; 0x6c
 800f78a:	689f      	ldr	r7, [r3, #8]
 800f78c:	4649      	mov	r1, r9
 800f78e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800f792:	47b8      	blx	r7
 800f794:	901a      	str	r0, [sp, #104]	; 0x68
 800f796:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 800f79a:	45d1      	cmp	r9, sl
 800f79c:	d045      	beq.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f79e:	f242 070b 	movw	r7, #8203	; 0x200b
 800f7a2:	45b9      	cmp	r9, r7
 800f7a4:	d041      	beq.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f7a6:	f1b9 0f00 	cmp.w	r9, #0
 800f7aa:	f000 80ef 	beq.w	800f98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 800f7ae:	f1b9 0f0a 	cmp.w	r9, #10
 800f7b2:	d057      	beq.n	800f864 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800f7b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f7b6:	b383      	cbz	r3, 800f81a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10a>
 800f7b8:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800f7bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f7be:	2a00      	cmp	r2, #0
 800f7c0:	f000 80d3 	beq.w	800f96a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25a>
 800f7c4:	f1bb 0f00 	cmp.w	fp, #0
 800f7c8:	d100      	bne.n	800f7cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xbc>
 800f7ca:	4444      	add	r4, r8
 800f7cc:	f992 800d 	ldrsb.w	r8, [r2, #13]
 800f7d0:	f408 7380 	and.w	r3, r8, #256	; 0x100
 800f7d4:	f892 800a 	ldrb.w	r8, [r2, #10]
 800f7d8:	f1bb 0f01 	cmp.w	fp, #1
 800f7dc:	ea48 0803 	orr.w	r8, r8, r3
 800f7e0:	d128      	bne.n	800f834 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x124>
 800f7e2:	eba4 0408 	sub.w	r4, r4, r8
 800f7e6:	2d00      	cmp	r5, #0
 800f7e8:	d143      	bne.n	800f872 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 800f7ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7ec:	eb08 0304 	add.w	r3, r8, r4
 800f7f0:	4413      	add	r3, r2
 800f7f2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800f7f4:	f9b2 2000 	ldrsh.w	r2, [r2]
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	da44      	bge.n	800f886 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800f7fc:	e02b      	b.n	800f856 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 800f7fe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800f800:	e7aa      	b.n	800f758 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 800f802:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800f806:	9301      	str	r3, [sp, #4]
 800f808:	ab1b      	add	r3, sp, #108	; 0x6c
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	4659      	mov	r1, fp
 800f80e:	ab1a      	add	r3, sp, #104	; 0x68
 800f810:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800f812:	f002 fa77 	bl	8011d04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800f816:	4681      	mov	r9, r0
 800f818:	e7bd      	b.n	800f796 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 800f81a:	6830      	ldr	r0, [r6, #0]
 800f81c:	6803      	ldr	r3, [r0, #0]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	4798      	blx	r3
 800f822:	4550      	cmp	r0, sl
 800f824:	d001      	beq.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f826:	42b8      	cmp	r0, r7
 800f828:	d1c8      	bne.n	800f7bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 800f82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f82c:	3301      	adds	r3, #1
 800f82e:	930c      	str	r3, [sp, #48]	; 0x30
 800f830:	464d      	mov	r5, r9
 800f832:	e797      	b.n	800f764 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x54>
 800f834:	2d00      	cmp	r5, #0
 800f836:	f000 80ab 	beq.w	800f990 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x280>
 800f83a:	f1bb 0f00 	cmp.w	fp, #0
 800f83e:	d118      	bne.n	800f872 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x162>
 800f840:	6830      	ldr	r0, [r6, #0]
 800f842:	6803      	ldr	r3, [r0, #0]
 800f844:	4629      	mov	r1, r5
 800f846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f848:	4798      	blx	r3
 800f84a:	4404      	add	r4, r0
 800f84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f84e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f850:	1ae3      	subs	r3, r4, r3
 800f852:	4293      	cmp	r3, r2
 800f854:	dd17      	ble.n	800f886 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800f856:	464d      	mov	r5, r9
 800f858:	2d00      	cmp	r5, #0
 800f85a:	f000 8097 	beq.w	800f98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 800f85e:	2d0a      	cmp	r5, #10
 800f860:	f040 8085 	bne.w	800f96e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x25e>
 800f864:	250a      	movs	r5, #10
 800f866:	fab5 f085 	clz	r0, r5
 800f86a:	0940      	lsrs	r0, r0, #5
 800f86c:	b01d      	add	sp, #116	; 0x74
 800f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f872:	6830      	ldr	r0, [r6, #0]
 800f874:	6803      	ldr	r3, [r0, #0]
 800f876:	4629      	mov	r1, r5
 800f878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f87a:	4798      	blx	r3
 800f87c:	f1bb 0f01 	cmp.w	fp, #1
 800f880:	eba4 0400 	sub.w	r4, r4, r0
 800f884:	d0b1      	beq.n	800f7ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800f886:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f888:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f88a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800f88e:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f892:	7b43      	ldrb	r3, [r0, #13]
 800f894:	015b      	lsls	r3, r3, #5
 800f896:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f89a:	7983      	ldrb	r3, [r0, #6]
 800f89c:	4421      	add	r1, r4
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	440b      	add	r3, r1
 800f8a2:	42ab      	cmp	r3, r5
 800f8a4:	dbc1      	blt.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8a8:	4299      	cmp	r1, r3
 800f8aa:	dabe      	bge.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f8ac:	6830      	ldr	r0, [r6, #0]
 800f8ae:	6803      	ldr	r3, [r0, #0]
 800f8b0:	42a5      	cmp	r5, r4
 800f8b2:	bfc8      	it	gt
 800f8b4:	1b2d      	subgt	r5, r5, r4
 800f8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b8:	bfcc      	ite	gt
 800f8ba:	b2ad      	uxthgt	r5, r5
 800f8bc:	2500      	movle	r5, #0
 800f8be:	4798      	blx	r3
 800f8c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800f8c2:	4936      	ldr	r1, [pc, #216]	; (800f99c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>)
 800f8c4:	7b5a      	ldrb	r2, [r3, #13]
 800f8c6:	f893 e008 	ldrb.w	lr, [r3, #8]
 800f8ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 800f8ce:	bf18      	it	ne
 800f8d0:	468c      	movne	ip, r1
 800f8d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f8d4:	4408      	add	r0, r1
 800f8d6:	ea4f 01c2 	mov.w	r1, r2, lsl #3
 800f8da:	f401 7180 	and.w	r1, r1, #256	; 0x100
 800f8de:	bf08      	it	eq
 800f8e0:	f04f 0c00 	moveq.w	ip, #0
 800f8e4:	ea41 070e 	orr.w	r7, r1, lr
 800f8e8:	ea4c 0707 	orr.w	r7, ip, r7
 800f8ec:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800f8ee:	1bc7      	subs	r7, r0, r7
 800f8f0:	b2bf      	uxth	r7, r7
 800f8f2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800f8f6:	fa0f fa87 	sxth.w	sl, r7
 800f8fa:	4551      	cmp	r1, sl
 800f8fc:	dd33      	ble.n	800f966 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x256>
 800f8fe:	0112      	lsls	r2, r2, #4
 800f900:	79d8      	ldrb	r0, [r3, #7]
 800f902:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f906:	4302      	orrs	r2, r0
 800f908:	4492      	add	sl, r2
 800f90a:	4551      	cmp	r1, sl
 800f90c:	dc8d      	bgt.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f90e:	1bcf      	subs	r7, r1, r7
 800f910:	b2bf      	uxth	r7, r7
 800f912:	468a      	mov	sl, r1
 800f914:	9317      	str	r3, [sp, #92]	; 0x5c
 800f916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f918:	6830      	ldr	r0, [r6, #0]
 800f91a:	681a      	ldr	r2, [r3, #0]
 800f91c:	6801      	ldr	r1, [r0, #0]
 800f91e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800f920:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f922:	9311      	str	r3, [sp, #68]	; 0x44
 800f924:	9216      	str	r2, [sp, #88]	; 0x58
 800f926:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800f928:	4788      	blx	r1
 800f92a:	79b1      	ldrb	r1, [r6, #6]
 800f92c:	910b      	str	r1, [sp, #44]	; 0x2c
 800f92e:	7bb1      	ldrb	r1, [r6, #14]
 800f930:	910a      	str	r1, [sp, #40]	; 0x28
 800f932:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 800f936:	9109      	str	r1, [sp, #36]	; 0x24
 800f938:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f93a:	68b1      	ldr	r1, [r6, #8]
 800f93c:	9305      	str	r3, [sp, #20]
 800f93e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f940:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f942:	9206      	str	r2, [sp, #24]
 800f944:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800f948:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800f94c:	e9cd a501 	strd	sl, r5, [sp, #4]
 800f950:	4425      	add	r5, r4
 800f952:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f954:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f956:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f958:	b22d      	sxth	r5, r5
 800f95a:	9500      	str	r5, [sp, #0]
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	47a8      	blx	r5
 800f964:	e761      	b.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f966:	2700      	movs	r7, #0
 800f968:	e7d4      	b.n	800f914 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 800f96a:	4690      	mov	r8, r2
 800f96c:	e75d      	b.n	800f82a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x11a>
 800f96e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f970:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800f972:	3401      	adds	r4, #1
 800f974:	429c      	cmp	r4, r3
 800f976:	f6bf af76 	bge.w	800f866 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 800f97a:	4659      	mov	r1, fp
 800f97c:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800f97e:	f002 f94d 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f982:	4605      	mov	r5, r0
 800f984:	b110      	cbz	r0, 800f98c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 800f986:	280a      	cmp	r0, #10
 800f988:	d1f2      	bne.n	800f970 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x260>
 800f98a:	e76b      	b.n	800f864 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 800f98c:	2500      	movs	r5, #0
 800f98e:	e76a      	b.n	800f866 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x156>
 800f990:	f1bb 0f00 	cmp.w	fp, #0
 800f994:	f43f af5a 	beq.w	800f84c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13c>
 800f998:	e775      	b.n	800f886 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800f99a:	bf00      	nop
 800f99c:	fffffe00 	.word	0xfffffe00

0800f9a0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800f9a0:	b530      	push	{r4, r5, lr}
 800f9a2:	8a44      	ldrh	r4, [r0, #18]
 800f9a4:	8ac5      	ldrh	r5, [r0, #22]
 800f9a6:	82c3      	strh	r3, [r0, #22]
 800f9a8:	442c      	add	r4, r5
 800f9aa:	1ae4      	subs	r4, r4, r3
 800f9ac:	8244      	strh	r4, [r0, #18]
 800f9ae:	8b03      	ldrh	r3, [r0, #24]
 800f9b0:	8a84      	ldrh	r4, [r0, #20]
 800f9b2:	4422      	add	r2, r4
 800f9b4:	440c      	add	r4, r1
 800f9b6:	1a59      	subs	r1, r3, r1
 800f9b8:	8342      	strh	r2, [r0, #26]
 800f9ba:	8284      	strh	r4, [r0, #20]
 800f9bc:	8301      	strh	r1, [r0, #24]
 800f9be:	bd30      	pop	{r4, r5, pc}

0800f9c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 800f9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c4:	7a45      	ldrb	r5, [r0, #9]
 800f9c6:	1eeb      	subs	r3, r5, #3
 800f9c8:	b085      	sub	sp, #20
 800f9ca:	4604      	mov	r4, r0
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	4689      	mov	r9, r1
 800f9d0:	b329      	cbz	r1, 800fa1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d921      	bls.n	800fa1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 800f9d6:	1e69      	subs	r1, r5, #1
 800f9d8:	f1d1 0b00 	rsbs	fp, r1, #0
 800f9dc:	eb4b 0b01 	adc.w	fp, fp, r1
 800f9e0:	1eaa      	subs	r2, r5, #2
 800f9e2:	4253      	negs	r3, r2
 800f9e4:	4153      	adcs	r3, r2
 800f9e6:	2500      	movs	r5, #0
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	9500      	str	r5, [sp, #0]
 800f9ec:	2600      	movs	r6, #0
 800f9ee:	8266      	strh	r6, [r4, #18]
 800f9f0:	82a6      	strh	r6, [r4, #20]
 800f9f2:	f242 080b 	movw	r8, #8203	; 0x200b
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	9303      	str	r3, [sp, #12]
 800f9fa:	68e2      	ldr	r2, [r4, #12]
 800f9fc:	7a21      	ldrb	r1, [r4, #8]
 800f9fe:	6860      	ldr	r0, [r4, #4]
 800fa00:	8827      	ldrh	r7, [r4, #0]
 800fa02:	ab03      	add	r3, sp, #12
 800fa04:	f002 f94a 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800fa08:	8020      	strh	r0, [r4, #0]
 800fa0a:	b9b0      	cbnz	r0, 800fa3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7a>
 800fa0c:	8b22      	ldrh	r2, [r4, #24]
 800fa0e:	2300      	movs	r3, #0
 800fa10:	4611      	mov	r1, r2
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7ff ffc4 	bl	800f9a0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800fa18:	e062      	b.n	800fae0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 800fa1a:	468b      	mov	fp, r1
 800fa1c:	e7e0      	b.n	800f9e0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x20>
 800fa1e:	2b01      	cmp	r3, #1
 800fa20:	f105 35ff 	add.w	r5, r5, #4294967295
 800fa24:	bf8c      	ite	hi
 800fa26:	2300      	movhi	r3, #0
 800fa28:	2301      	movls	r3, #1
 800fa2a:	2d01      	cmp	r5, #1
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	bf8c      	ite	hi
 800fa30:	2500      	movhi	r5, #0
 800fa32:	2501      	movls	r5, #1
 800fa34:	9101      	str	r1, [sp, #4]
 800fa36:	468b      	mov	fp, r1
 800fa38:	e7d8      	b.n	800f9ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x2c>
 800fa3a:	8ae3      	ldrh	r3, [r4, #22]
 800fa3c:	280a      	cmp	r0, #10
 800fa3e:	f103 0301 	add.w	r3, r3, #1
 800fa42:	82e3      	strh	r3, [r4, #22]
 800fa44:	d0e2      	beq.n	800fa0c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 800fa46:	9a03      	ldr	r2, [sp, #12]
 800fa48:	b972      	cbnz	r2, 800fa68 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 800fa4a:	4540      	cmp	r0, r8
 800fa4c:	d1d3      	bne.n	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fa4e:	8823      	ldrh	r3, [r4, #0]
 800fa50:	8b21      	ldrh	r1, [r4, #24]
 800fa52:	2b20      	cmp	r3, #32
 800fa54:	d001      	beq.n	800fa5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 800fa56:	4543      	cmp	r3, r8
 800fa58:	d11d      	bne.n	800fa96 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 800fa5a:	2f20      	cmp	r7, #32
 800fa5c:	d002      	beq.n	800fa64 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 800fa5e:	4547      	cmp	r7, r8
 800fa60:	bf18      	it	ne
 800fa62:	460e      	movne	r6, r1
 800fa64:	2001      	movs	r0, #1
 800fa66:	e017      	b.n	800fa98 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd8>
 800fa68:	4540      	cmp	r0, r8
 800fa6a:	d012      	beq.n	800fa92 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd2>
 800fa6c:	8893      	ldrh	r3, [r2, #4]
 800fa6e:	8023      	strh	r3, [r4, #0]
 800fa70:	f992 a00d 	ldrsb.w	sl, [r2, #13]
 800fa74:	f40a 7080 	and.w	r0, sl, #256	; 0x100
 800fa78:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800fa7c:	ea4a 0a00 	orr.w	sl, sl, r0
 800fa80:	68e0      	ldr	r0, [r4, #12]
 800fa82:	6803      	ldr	r3, [r0, #0]
 800fa84:	4639      	mov	r1, r7
 800fa86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa88:	4798      	blx	r3
 800fa8a:	eb0a 0200 	add.w	r2, sl, r0
 800fa8e:	b292      	uxth	r2, r2
 800fa90:	e7dd      	b.n	800fa4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 800fa92:	2200      	movs	r2, #0
 800fa94:	e7db      	b.n	800fa4e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x8e>
 800fa96:	2000      	movs	r0, #0
 800fa98:	440a      	add	r2, r1
 800fa9a:	8aa3      	ldrh	r3, [r4, #20]
 800fa9c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800faa0:	b292      	uxth	r2, r2
 800faa2:	8322      	strh	r2, [r4, #24]
 800faa4:	4413      	add	r3, r2
 800faa6:	f1b9 0f00 	cmp.w	r9, #0
 800faaa:	d022      	beq.n	800faf2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x132>
 800faac:	f1bb 0f00 	cmp.w	fp, #0
 800fab0:	d102      	bne.n	800fab8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf8>
 800fab2:	9901      	ldr	r1, [sp, #4]
 800fab4:	b149      	cbz	r1, 800faca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 800fab6:	b140      	cbz	r0, 800faca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x10a>
 800fab8:	8ba1      	ldrh	r1, [r4, #28]
 800faba:	4419      	add	r1, r3
 800fabc:	458c      	cmp	ip, r1
 800fabe:	da12      	bge.n	800fae6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 800fac0:	8a61      	ldrh	r1, [r4, #18]
 800fac2:	b181      	cbz	r1, 800fae6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x126>
 800fac4:	4563      	cmp	r3, ip
 800fac6:	dd96      	ble.n	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fac8:	e004      	b.n	800fad4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x114>
 800faca:	4563      	cmp	r3, ip
 800facc:	dd93      	ble.n	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800face:	8a63      	ldrh	r3, [r4, #18]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d090      	beq.n	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fad4:	2301      	movs	r3, #1
 800fad6:	77a3      	strb	r3, [r4, #30]
 800fad8:	8ba2      	ldrh	r2, [r4, #28]
 800fada:	8b63      	ldrh	r3, [r4, #26]
 800fadc:	4413      	add	r3, r2
 800fade:	8363      	strh	r3, [r4, #26]
 800fae0:	b005      	add	sp, #20
 800fae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae6:	2300      	movs	r3, #0
 800fae8:	4611      	mov	r1, r2
 800faea:	4620      	mov	r0, r4
 800faec:	f7ff ff58 	bl	800f9a0 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800faf0:	e781      	b.n	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800faf2:	4563      	cmp	r3, ip
 800faf4:	dd16      	ble.n	800fb24 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x164>
 800faf6:	9b00      	ldr	r3, [sp, #0]
 800faf8:	b113      	cbz	r3, 800fb00 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 800fafa:	2301      	movs	r3, #1
 800fafc:	460a      	mov	r2, r1
 800fafe:	e787      	b.n	800fa10 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 800fb00:	2d00      	cmp	r5, #0
 800fb02:	f43f af78 	beq.w	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fb06:	2800      	cmp	r0, #0
 800fb08:	f47f af75 	bne.w	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fb0c:	2f20      	cmp	r7, #32
 800fb0e:	d001      	beq.n	800fb14 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 800fb10:	4547      	cmp	r7, r8
 800fb12:	d102      	bne.n	800fb1a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15a>
 800fb14:	2301      	movs	r3, #1
 800fb16:	4632      	mov	r2, r6
 800fb18:	e77b      	b.n	800fa12 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 800fb1a:	8a63      	ldrh	r3, [r4, #18]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	f43f af6a 	beq.w	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fb22:	e7dd      	b.n	800fae0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x120>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	f47f af66 	bne.w	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fb2a:	2f20      	cmp	r7, #32
 800fb2c:	d002      	beq.n	800fb34 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x174>
 800fb2e:	4547      	cmp	r7, r8
 800fb30:	f47f af61 	bne.w	800f9f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 800fb34:	2301      	movs	r3, #1
 800fb36:	4632      	mov	r2, r6
 800fb38:	e7d7      	b.n	800faea <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12a>

0800fb3a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800fb3a:	b570      	push	{r4, r5, r6, lr}
 800fb3c:	4606      	mov	r6, r0
 800fb3e:	b08a      	sub	sp, #40	; 0x28
 800fb40:	4615      	mov	r5, r2
 800fb42:	b191      	cbz	r1, 800fb6a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 800fb44:	e9cd 3100 	strd	r3, r1, [sp]
 800fb48:	4613      	mov	r3, r2
 800fb4a:	4601      	mov	r1, r0
 800fb4c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 800fb50:	a802      	add	r0, sp, #8
 800fb52:	f7ff fd20 	bl	800f596 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800fb56:	2401      	movs	r4, #1
 800fb58:	2100      	movs	r1, #0
 800fb5a:	a802      	add	r0, sp, #8
 800fb5c:	f7ff ff30 	bl	800f9c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800fb60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800fb64:	b173      	cbz	r3, 800fb84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800fb66:	3401      	adds	r4, #1
 800fb68:	e7f6      	b.n	800fb58 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	f002 f856 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fb70:	2401      	movs	r4, #1
 800fb72:	280a      	cmp	r0, #10
 800fb74:	4629      	mov	r1, r5
 800fb76:	4630      	mov	r0, r6
 800fb78:	bf08      	it	eq
 800fb7a:	3401      	addeq	r4, #1
 800fb7c:	f002 f84e 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d1f6      	bne.n	800fb72 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 800fb84:	b2a0      	uxth	r0, r4
 800fb86:	b00a      	add	sp, #40	; 0x28
 800fb88:	bd70      	pop	{r4, r5, r6, pc}

0800fb8a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800fb8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb8e:	b0db      	sub	sp, #364	; 0x16c
 800fb90:	468a      	mov	sl, r1
 800fb92:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
 800fb96:	9009      	str	r0, [sp, #36]	; 0x24
 800fb98:	461c      	mov	r4, r3
 800fb9a:	f1bb 0f00 	cmp.w	fp, #0
 800fb9e:	f000 80c7 	beq.w	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f000 80c3 	beq.w	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fbaa:	7ba3      	ldrb	r3, [r4, #14]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	f000 80bf 	beq.w	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fbb2:	6810      	ldr	r0, [r2, #0]
 800fbb4:	6851      	ldr	r1, [r2, #4]
 800fbb6:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800fbba:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 800fbbe:	af0c      	add	r7, sp, #48	; 0x30
 800fbc0:	463b      	mov	r3, r7
 800fbc2:	c303      	stmia	r3!, {r0, r1}
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800fbca:	910e      	str	r1, [sp, #56]	; 0x38
 800fbcc:	79a2      	ldrb	r2, [r4, #6]
 800fbce:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800fbd2:	a90e      	add	r1, sp, #56	; 0x38
 800fbd4:	4638      	mov	r0, r7
 800fbd6:	f7ff fd4a 	bl	800f66e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fbda:	a90e      	add	r1, sp, #56	; 0x38
 800fbdc:	4608      	mov	r0, r1
 800fbde:	79a2      	ldrb	r2, [r4, #6]
 800fbe0:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800fbe4:	f7ff fd43 	bl	800f66e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800fbe8:	4648      	mov	r0, r9
 800fbea:	f001 fed5 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 800fbee:	6820      	ldr	r0, [r4, #0]
 800fbf0:	6803      	ldr	r3, [r0, #0]
 800fbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbf4:	4798      	blx	r3
 800fbf6:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	4659      	mov	r1, fp
 800fbfc:	4648      	mov	r0, r9
 800fbfe:	f001 fee8 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800fc02:	a82e      	add	r0, sp, #184	; 0xb8
 800fc04:	f001 fec8 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 800fc08:	f894 8004 	ldrb.w	r8, [r4, #4]
 800fc0c:	f1b8 0f00 	cmp.w	r8, #0
 800fc10:	d009      	beq.n	800fc26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x9c>
 800fc12:	6820      	ldr	r0, [r4, #0]
 800fc14:	6803      	ldr	r3, [r0, #0]
 800fc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc18:	4798      	blx	r3
 800fc1a:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	4659      	mov	r1, fp
 800fc20:	a82e      	add	r0, sp, #184	; 0xb8
 800fc22:	f001 fed6 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800fc26:	6820      	ldr	r0, [r4, #0]
 800fc28:	6803      	ldr	r3, [r0, #0]
 800fc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc2c:	4798      	blx	r3
 800fc2e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc32:	182e      	adds	r6, r5, r0
 800fc34:	2e00      	cmp	r6, #0
 800fc36:	dd45      	ble.n	800fcc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 800fc38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc3c:	4283      	cmp	r3, r0
 800fc3e:	db41      	blt.n	800fcc4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13a>
 800fc40:	441d      	add	r5, r3
 800fc42:	fb95 f5f6 	sdiv	r5, r5, r6
 800fc46:	a844      	add	r0, sp, #272	; 0x110
 800fc48:	f001 fea6 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 800fc4c:	7c23      	ldrb	r3, [r4, #16]
 800fc4e:	b14b      	cbz	r3, 800fc64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xda>
 800fc50:	6820      	ldr	r0, [r4, #0]
 800fc52:	6803      	ldr	r3, [r0, #0]
 800fc54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc56:	4798      	blx	r3
 800fc58:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	4659      	mov	r1, fp
 800fc5e:	a844      	add	r0, sp, #272	; 0x110
 800fc60:	f001 feb7 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 800fc64:	7c21      	ldrb	r1, [r4, #16]
 800fc66:	9101      	str	r1, [sp, #4]
 800fc68:	6821      	ldr	r1, [r4, #0]
 800fc6a:	7963      	ldrb	r3, [r4, #5]
 800fc6c:	9100      	str	r1, [sp, #0]
 800fc6e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 800fc72:	a944      	add	r1, sp, #272	; 0x110
 800fc74:	a810      	add	r0, sp, #64	; 0x40
 800fc76:	f7ff fc8e 	bl	800f596 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 800fc7a:	7c23      	ldrb	r3, [r4, #16]
 800fc7c:	bb23      	cbnz	r3, 800fcc8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x13e>
 800fc7e:	fa1f fb86 	uxth.w	fp, r6
 800fc82:	2d00      	cmp	r5, #0
 800fc84:	dd57      	ble.n	800fd36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 800fc86:	7961      	ldrb	r1, [r4, #5]
 800fc88:	4648      	mov	r0, r9
 800fc8a:	f001 ffc7 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	f1b8 0f00 	cmp.w	r8, #0
 800fc94:	d005      	beq.n	800fca2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x118>
 800fc96:	9008      	str	r0, [sp, #32]
 800fc98:	7961      	ldrb	r1, [r4, #5]
 800fc9a:	a82e      	add	r0, sp, #184	; 0xb8
 800fc9c:	f001 ffbe 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fca0:	9b08      	ldr	r3, [sp, #32]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d044      	beq.n	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fca6:	2b0a      	cmp	r3, #10
 800fca8:	d1eb      	bne.n	800fc82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 800fcaa:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800fcae:	445b      	add	r3, fp
 800fcb0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800fcb4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800fcb8:	eba3 030b 	sub.w	r3, r3, fp
 800fcbc:	3d01      	subs	r5, #1
 800fcbe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800fcc2:	e7de      	b.n	800fc82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf8>
 800fcc4:	2500      	movs	r5, #0
 800fcc6:	e7be      	b.n	800fc46 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xbc>
 800fcc8:	0073      	lsls	r3, r6, #1
 800fcca:	9308      	str	r3, [sp, #32]
 800fccc:	2d00      	cmp	r5, #0
 800fcce:	dd32      	ble.n	800fd36 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ac>
 800fcd0:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800fcd4:	9b08      	ldr	r3, [sp, #32]
 800fcd6:	428b      	cmp	r3, r1
 800fcd8:	bfd4      	ite	le
 800fcda:	2100      	movle	r1, #0
 800fcdc:	2101      	movgt	r1, #1
 800fcde:	a810      	add	r0, sp, #64	; 0x40
 800fce0:	f7ff fe6e 	bl	800f9c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800fce4:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
 800fce8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800fcec:	fa1f fb83 	uxth.w	fp, r3
 800fcf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcf4:	459b      	cmp	fp, r3
 800fcf6:	d00b      	beq.n	800fd10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 800fcf8:	7961      	ldrb	r1, [r4, #5]
 800fcfa:	4648      	mov	r0, r9
 800fcfc:	f001 ff8e 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fd00:	f1b8 0f00 	cmp.w	r8, #0
 800fd04:	d0f0      	beq.n	800fce8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 800fd06:	7961      	ldrb	r1, [r4, #5]
 800fd08:	a82e      	add	r0, sp, #184	; 0xb8
 800fd0a:	f001 ff87 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800fd0e:	e7eb      	b.n	800fce8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x15e>
 800fd10:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 800fd14:	b2b3      	uxth	r3, r6
 800fd16:	441a      	add	r2, r3
 800fd18:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 800fd1c:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 800fd26:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800fd2a:	3d01      	subs	r5, #1
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d1cd      	bne.n	800fccc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800fd30:	b05b      	add	sp, #364	; 0x16c
 800fd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd36:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800fd3a:	f10d 052e 	add.w	r5, sp, #46	; 0x2e
 800fd3e:	7c23      	ldrb	r3, [r4, #16]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d05f      	beq.n	800fe04 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27a>
 800fd44:	f9bd 103e 	ldrsh.w	r1, [sp, #62]	; 0x3e
 800fd48:	458b      	cmp	fp, r1
 800fd4a:	bfd4      	ite	le
 800fd4c:	2100      	movle	r1, #0
 800fd4e:	2101      	movgt	r1, #1
 800fd50:	a810      	add	r0, sp, #64	; 0x40
 800fd52:	f7ff fe35 	bl	800f9c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 800fd56:	f1b8 0f00 	cmp.w	r8, #0
 800fd5a:	d04c      	beq.n	800fdf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800fd5c:	7c23      	ldrb	r3, [r4, #16]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d053      	beq.n	800fe0a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x280>
 800fd62:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
 800fd66:	7922      	ldrb	r2, [r4, #4]
 800fd68:	2a01      	cmp	r2, #1
 800fd6a:	d13c      	bne.n	800fde6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 800fd6c:	f9bd 003c 	ldrsh.w	r0, [sp, #60]	; 0x3c
 800fd70:	1ac0      	subs	r0, r0, r3
 800fd72:	2302      	movs	r3, #2
 800fd74:	fb90 f0f3 	sdiv	r0, r0, r3
 800fd78:	b200      	sxth	r0, r0
 800fd7a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800fd7e:	4418      	add	r0, r3
 800fd80:	7c23      	ldrb	r3, [r4, #16]
 800fd82:	8028      	strh	r0, [r5, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d03a      	beq.n	800fdfe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 800fd88:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
 800fd8c:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
 800fd90:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 800fd94:	f8cd 9010 	str.w	r9, [sp, #16]
 800fd98:	e9cd 2105 	strd	r2, r1, [sp, #20]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800fda2:	e9cd 5700 	strd	r5, r7, [sp]
 800fda6:	4652      	mov	r2, sl
 800fda8:	2100      	movs	r1, #0
 800fdaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fdac:	f7ff fcb0 	bl	800f710 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800fdb0:	2800      	cmp	r0, #0
 800fdb2:	d1bd      	bne.n	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fdb4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 800fdb8:	b2b2      	uxth	r2, r6
 800fdba:	4611      	mov	r1, r2
 800fdbc:	4413      	add	r3, r2
 800fdbe:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
 800fdc2:	1a52      	subs	r2, r2, r1
 800fdc4:	7c21      	ldrb	r1, [r4, #16]
 800fdc6:	b21b      	sxth	r3, r3
 800fdc8:	b212      	sxth	r2, r2
 800fdca:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 800fdce:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 800fdd2:	b109      	cbz	r1, 800fdd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 800fdd4:	42b2      	cmp	r2, r6
 800fdd6:	dbab      	blt.n	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fdd8:	887a      	ldrh	r2, [r7, #2]
 800fdda:	88f9      	ldrh	r1, [r7, #6]
 800fddc:	440a      	add	r2, r1
 800fdde:	b212      	sxth	r2, r2
 800fde0:	4293      	cmp	r3, r2
 800fde2:	ddac      	ble.n	800fd3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 800fde4:	e7a4      	b.n	800fd30 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a6>
 800fde6:	2a02      	cmp	r2, #2
 800fde8:	d107      	bne.n	800fdfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 800fdea:	7be2      	ldrb	r2, [r4, #15]
 800fdec:	f8bd 003c 	ldrh.w	r0, [sp, #60]	; 0x3c
 800fdf0:	1a80      	subs	r0, r0, r2
 800fdf2:	1ac0      	subs	r0, r0, r3
 800fdf4:	e7c0      	b.n	800fd78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 800fdf6:	7be0      	ldrb	r0, [r4, #15]
 800fdf8:	e7bf      	b.n	800fd7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	e7bd      	b.n	800fd7a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f0>
 800fdfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fe02:	e7c3      	b.n	800fd8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x202>
 800fe04:	f1b8 0f00 	cmp.w	r8, #0
 800fe08:	d0f5      	beq.n	800fdf6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fe10:	6821      	ldr	r1, [r4, #0]
 800fe12:	a82e      	add	r0, sp, #184	; 0xb8
 800fe14:	f7ff fbf9 	bl	800f60a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800fe18:	b203      	sxth	r3, r0
 800fe1a:	e7a4      	b.n	800fd66 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>

0800fe1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800fe1c:	b510      	push	{r4, lr}
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fe24:	d00b      	beq.n	800fe3e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d00e      	beq.n	800fe48 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d001      	beq.n	800fe32 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 800fe2e:	1860      	adds	r0, r4, r1
 800fe30:	bd10      	pop	{r4, pc}
 800fe32:	8880      	ldrh	r0, [r0, #4]
 800fe34:	4420      	add	r0, r4
 800fe36:	b200      	sxth	r0, r0
 800fe38:	1a80      	subs	r0, r0, r2
 800fe3a:	3801      	subs	r0, #1
 800fe3c:	e7f8      	b.n	800fe30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 800fe3e:	8880      	ldrh	r0, [r0, #4]
 800fe40:	4420      	add	r0, r4
 800fe42:	b200      	sxth	r0, r0
 800fe44:	1a40      	subs	r0, r0, r1
 800fe46:	e7f8      	b.n	800fe3a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800fe48:	18a0      	adds	r0, r4, r2
 800fe4a:	e7f1      	b.n	800fe30 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0800fe4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800fe4c:	b510      	push	{r4, lr}
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800fe54:	d006      	beq.n	800fe64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 800fe56:	2b03      	cmp	r3, #3
 800fe58:	d00a      	beq.n	800fe70 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	bf14      	ite	ne
 800fe5e:	18a0      	addne	r0, r4, r2
 800fe60:	1860      	addeq	r0, r4, r1
 800fe62:	bd10      	pop	{r4, pc}
 800fe64:	88c0      	ldrh	r0, [r0, #6]
 800fe66:	4420      	add	r0, r4
 800fe68:	b200      	sxth	r0, r0
 800fe6a:	1a80      	subs	r0, r0, r2
 800fe6c:	3801      	subs	r0, #1
 800fe6e:	e7f8      	b.n	800fe62 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 800fe70:	88c0      	ldrh	r0, [r0, #6]
 800fe72:	4420      	add	r0, r4
 800fe74:	b200      	sxth	r0, r0
 800fe76:	1a40      	subs	r0, r0, r1
 800fe78:	e7f8      	b.n	800fe6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0800fe7c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800fe7c:	4b01      	ldr	r3, [pc, #4]	; (800fe84 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800fe7e:	2200      	movs	r2, #0
 800fe80:	601a      	str	r2, [r3, #0]
 800fe82:	4770      	bx	lr
 800fe84:	20009f10 	.word	0x20009f10

0800fe88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 800fe88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe8a:	e9dd e405 	ldrd	lr, r4, [sp, #20]
 800fe8e:	1e05      	subs	r5, r0, #0
 800fe90:	bfba      	itte	lt
 800fe92:	f04f 37ff 	movlt.w	r7, #4294967295
 800fe96:	426d      	neglt	r5, r5
 800fe98:	2701      	movge	r7, #1
 800fe9a:	f1be 0f00 	cmp.w	lr, #0
 800fe9e:	bfb8      	it	lt
 800fea0:	f1ce 0e00 	rsblt	lr, lr, #0
 800fea4:	f04f 0601 	mov.w	r6, #1
 800fea8:	fa4e f001 	asr.w	r0, lr, r1
 800feac:	fa06 f101 	lsl.w	r1, r6, r1
 800feb0:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800feb4:	f101 31ff 	add.w	r1, r1, #4294967295
 800feb8:	ea01 010e 	and.w	r1, r1, lr
 800febc:	bfb8      	it	lt
 800febe:	427f      	neglt	r7, r7
 800fec0:	434d      	muls	r5, r1
 800fec2:	2c00      	cmp	r4, #0
 800fec4:	f8dc 1000 	ldr.w	r1, [ip]
 800fec8:	bfb8      	it	lt
 800feca:	4264      	neglt	r4, r4
 800fecc:	fb03 1300 	mla	r3, r3, r0, r1
 800fed0:	fb95 f1f4 	sdiv	r1, r5, r4
 800fed4:	fb04 5511 	mls	r5, r4, r1, r5
 800fed8:	441d      	add	r5, r3
 800feda:	fb95 f3f4 	sdiv	r3, r5, r4
 800fede:	fb04 5413 	mls	r4, r4, r3, r5
 800fee2:	4419      	add	r1, r3
 800fee4:	bfb8      	it	lt
 800fee6:	427f      	neglt	r7, r7
 800fee8:	fb02 1000 	mla	r0, r2, r0, r1
 800feec:	f8cc 4000 	str.w	r4, [ip]
 800fef0:	4378      	muls	r0, r7
 800fef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fef4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800fef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef8:	4c24      	ldr	r4, [pc, #144]	; (800ff8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 800fefa:	6807      	ldr	r7, [r0, #0]
 800fefc:	69a3      	ldr	r3, [r4, #24]
 800fefe:	b086      	sub	sp, #24
 800ff00:	4605      	mov	r5, r0
 800ff02:	b92b      	cbnz	r3, 800ff10 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 800ff04:	6840      	ldr	r0, [r0, #4]
 800ff06:	e9c5 7000 	strd	r7, r0, [r5]
 800ff0a:	b006      	add	sp, #24
 800ff0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff10:	68a2      	ldr	r2, [r4, #8]
 800ff12:	6820      	ldr	r0, [r4, #0]
 800ff14:	ae06      	add	r6, sp, #24
 800ff16:	f04f 0802 	mov.w	r8, #2
 800ff1a:	fb93 f1f8 	sdiv	r1, r3, r8
 800ff1e:	440a      	add	r2, r1
 800ff20:	f846 2d04 	str.w	r2, [r6, #-4]!
 800ff24:	69e1      	ldr	r1, [r4, #28]
 800ff26:	9700      	str	r7, [sp, #0]
 800ff28:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800ff2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ff2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ff30:	f7ff ffaa 	bl	800fe88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800ff34:	69a3      	ldr	r3, [r4, #24]
 800ff36:	9301      	str	r3, [sp, #4]
 800ff38:	686b      	ldr	r3, [r5, #4]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff40:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ff42:	6a21      	ldr	r1, [r4, #32]
 800ff44:	9602      	str	r6, [sp, #8]
 800ff46:	6860      	ldr	r0, [r4, #4]
 800ff48:	f7ff ff9e 	bl	800fe88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800ff4c:	6963      	ldr	r3, [r4, #20]
 800ff4e:	69a2      	ldr	r2, [r4, #24]
 800ff50:	fb92 f8f8 	sdiv	r8, r2, r8
 800ff54:	4443      	add	r3, r8
 800ff56:	9305      	str	r3, [sp, #20]
 800ff58:	682b      	ldr	r3, [r5, #0]
 800ff5a:	9300      	str	r3, [sp, #0]
 800ff5c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800ff60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ff62:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ff64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ff66:	4407      	add	r7, r0
 800ff68:	68e0      	ldr	r0, [r4, #12]
 800ff6a:	f7ff ff8d 	bl	800fe88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800ff6e:	69a3      	ldr	r3, [r4, #24]
 800ff70:	9301      	str	r3, [sp, #4]
 800ff72:	686b      	ldr	r3, [r5, #4]
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	4680      	mov	r8, r0
 800ff78:	9602      	str	r6, [sp, #8]
 800ff7a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ff7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ff7e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800ff80:	6920      	ldr	r0, [r4, #16]
 800ff82:	f7ff ff81 	bl	800fe88 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 800ff86:	4440      	add	r0, r8
 800ff88:	e7bd      	b.n	800ff06 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 800ff8a:	bf00      	nop
 800ff8c:	20009f14 	.word	0x20009f14

0800ff90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800ff90:	b510      	push	{r4, lr}
 800ff92:	4b07      	ldr	r3, [pc, #28]	; (800ffb0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d108      	bne.n	800ffac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800ff9a:	4b06      	ldr	r3, [pc, #24]	; (800ffb4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800ff9c:	880c      	ldrh	r4, [r1, #0]
 800ff9e:	881b      	ldrh	r3, [r3, #0]
 800ffa0:	f9b0 2000 	ldrsh.w	r2, [r0]
 800ffa4:	3b01      	subs	r3, #1
 800ffa6:	1b1b      	subs	r3, r3, r4
 800ffa8:	8003      	strh	r3, [r0, #0]
 800ffaa:	800a      	strh	r2, [r1, #0]
 800ffac:	bd10      	pop	{r4, pc}
 800ffae:	bf00      	nop
 800ffb0:	20009f00 	.word	0x20009f00
 800ffb4:	20009f04 	.word	0x20009f04

0800ffb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	4b0a      	ldr	r3, [pc, #40]	; (800ffe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d10e      	bne.n	800ffe0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800ffc2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800ffc6:	8843      	ldrh	r3, [r0, #2]
 800ffc8:	f9b0 4000 	ldrsh.w	r4, [r0]
 800ffcc:	8044      	strh	r4, [r0, #2]
 800ffce:	18ca      	adds	r2, r1, r3
 800ffd0:	4b05      	ldr	r3, [pc, #20]	; (800ffe8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800ffd2:	881b      	ldrh	r3, [r3, #0]
 800ffd4:	1a9b      	subs	r3, r3, r2
 800ffd6:	8003      	strh	r3, [r0, #0]
 800ffd8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ffdc:	80c3      	strh	r3, [r0, #6]
 800ffde:	8081      	strh	r1, [r0, #4]
 800ffe0:	bd10      	pop	{r4, pc}
 800ffe2:	bf00      	nop
 800ffe4:	20009f00 	.word	0x20009f00
 800ffe8:	20009efc 	.word	0x20009efc

0800ffec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800ffec:	b510      	push	{r4, lr}
 800ffee:	4b07      	ldr	r3, [pc, #28]	; (801000c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d108      	bne.n	8010008 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800fff6:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fffa:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fffe:	8003      	strh	r3, [r0, #0]
 8010000:	8893      	ldrh	r3, [r2, #4]
 8010002:	3b01      	subs	r3, #1
 8010004:	1b1b      	subs	r3, r3, r4
 8010006:	800b      	strh	r3, [r1, #0]
 8010008:	bd10      	pop	{r4, pc}
 801000a:	bf00      	nop
 801000c:	20009f00 	.word	0x20009f00

08010010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8010010:	b513      	push	{r0, r1, r4, lr}
 8010012:	4b08      	ldr	r3, [pc, #32]	; (8010034 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8010014:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010018:	4b07      	ldr	r3, [pc, #28]	; (8010038 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x28>)
 801001a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801001e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010022:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010026:	2400      	movs	r4, #0
 8010028:	466a      	mov	r2, sp
 801002a:	9400      	str	r4, [sp, #0]
 801002c:	f7ff ffde 	bl	800ffec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8010030:	b002      	add	sp, #8
 8010032:	bd10      	pop	{r4, pc}
 8010034:	20009efc 	.word	0x20009efc
 8010038:	20009efe 	.word	0x20009efe

0801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801003c:	b510      	push	{r4, lr}
 801003e:	4b0a      	ldr	r3, [pc, #40]	; (8010068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	2b01      	cmp	r3, #1
 8010044:	460a      	mov	r2, r1
 8010046:	d10d      	bne.n	8010064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8010048:	8881      	ldrh	r1, [r0, #4]
 801004a:	8803      	ldrh	r3, [r0, #0]
 801004c:	440b      	add	r3, r1
 801004e:	4601      	mov	r1, r0
 8010050:	3b01      	subs	r3, #1
 8010052:	f821 3b02 	strh.w	r3, [r1], #2
 8010056:	f7ff ffc9 	bl	800ffec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801005a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801005e:	88c2      	ldrh	r2, [r0, #6]
 8010060:	8082      	strh	r2, [r0, #4]
 8010062:	80c3      	strh	r3, [r0, #6]
 8010064:	bd10      	pop	{r4, pc}
 8010066:	bf00      	nop
 8010068:	20009f00 	.word	0x20009f00

0801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801006c:	b507      	push	{r0, r1, r2, lr}
 801006e:	4b09      	ldr	r3, [pc, #36]	; (8010094 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8010070:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010074:	4b08      	ldr	r3, [pc, #32]	; (8010098 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 8010076:	f8ad 2004 	strh.w	r2, [sp, #4]
 801007a:	2100      	movs	r1, #0
 801007c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010080:	9100      	str	r1, [sp, #0]
 8010082:	4669      	mov	r1, sp
 8010084:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010088:	f7ff ffd8 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801008c:	b003      	add	sp, #12
 801008e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010092:	bf00      	nop
 8010094:	20009efc 	.word	0x20009efc
 8010098:	20009efe 	.word	0x20009efe

0801009c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801009c:	4b03      	ldr	r3, [pc, #12]	; (80100ac <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801009e:	6818      	ldr	r0, [r3, #0]
 80100a0:	b110      	cbz	r0, 80100a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80100a2:	6803      	ldr	r3, [r0, #0]
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	4718      	bx	r3
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	20009f64 	.word	0x20009f64

080100b0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80100b0:	4770      	bx	lr
	...

080100b4 <_ZN8touchgfx11Application4drawEv>:
 80100b4:	b507      	push	{r0, r1, r2, lr}
 80100b6:	4b09      	ldr	r3, [pc, #36]	; (80100dc <_ZN8touchgfx11Application4drawEv+0x28>)
 80100b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80100bc:	4b08      	ldr	r3, [pc, #32]	; (80100e0 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80100be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80100c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100c6:	f8ad 3006 	strh.w	r3, [sp, #6]
 80100ca:	6803      	ldr	r3, [r0, #0]
 80100cc:	2100      	movs	r1, #0
 80100ce:	9100      	str	r1, [sp, #0]
 80100d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d2:	4669      	mov	r1, sp
 80100d4:	4798      	blx	r3
 80100d6:	b003      	add	sp, #12
 80100d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80100dc:	20009efc 	.word	0x20009efc
 80100e0:	20009efe 	.word	0x20009efe

080100e4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80100e4:	4b03      	ldr	r3, [pc, #12]	; (80100f4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80100e6:	6818      	ldr	r0, [r3, #0]
 80100e8:	b110      	cbz	r0, 80100f0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80100ea:	6803      	ldr	r3, [r0, #0]
 80100ec:	69db      	ldr	r3, [r3, #28]
 80100ee:	4718      	bx	r3
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	20009f64 	.word	0x20009f64

080100f8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80100f8:	4b03      	ldr	r3, [pc, #12]	; (8010108 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80100fa:	6818      	ldr	r0, [r3, #0]
 80100fc:	b110      	cbz	r0, 8010104 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80100fe:	6803      	ldr	r3, [r0, #0]
 8010100:	6a1b      	ldr	r3, [r3, #32]
 8010102:	4718      	bx	r3
 8010104:	4770      	bx	lr
 8010106:	bf00      	nop
 8010108:	20009f64 	.word	0x20009f64

0801010c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801010c:	4b03      	ldr	r3, [pc, #12]	; (801011c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801010e:	6818      	ldr	r0, [r3, #0]
 8010110:	b110      	cbz	r0, 8010118 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8010112:	6803      	ldr	r3, [r0, #0]
 8010114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010116:	4718      	bx	r3
 8010118:	4770      	bx	lr
 801011a:	bf00      	nop
 801011c:	20009f64 	.word	0x20009f64

08010120 <_ZN8touchgfx11Application15handleTickEventEv>:
 8010120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010124:	4d3a      	ldr	r5, [pc, #232]	; (8010210 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 8010126:	4604      	mov	r4, r0
 8010128:	6828      	ldr	r0, [r5, #0]
 801012a:	b140      	cbz	r0, 801013e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801012c:	7a03      	ldrb	r3, [r0, #8]
 801012e:	b933      	cbnz	r3, 801013e <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 8010130:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8010134:	6803      	ldr	r3, [r0, #0]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801013c:	4718      	bx	r3
 801013e:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8010142:	b97b      	cbnz	r3, 8010164 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010144:	b170      	cbz	r0, 8010164 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8010146:	7a03      	ldrb	r3, [r0, #8]
 8010148:	b163      	cbz	r3, 8010164 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801014a:	4b32      	ldr	r3, [pc, #200]	; (8010214 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801014c:	6818      	ldr	r0, [r3, #0]
 801014e:	b110      	cbz	r0, 8010156 <_ZN8touchgfx11Application15handleTickEventEv+0x36>
 8010150:	6803      	ldr	r3, [r0, #0]
 8010152:	691b      	ldr	r3, [r3, #16]
 8010154:	4798      	blx	r3
 8010156:	6828      	ldr	r0, [r5, #0]
 8010158:	6803      	ldr	r3, [r0, #0]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	4798      	blx	r3
 801015e:	2301      	movs	r3, #1
 8010160:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 8010164:	2500      	movs	r5, #0
 8010166:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801016a:	42a8      	cmp	r0, r5
 801016c:	dd0c      	ble.n	8010188 <_ZN8touchgfx11Application15handleTickEventEv+0x68>
 801016e:	1963      	adds	r3, r4, r5
 8010170:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8010174:	b132      	cbz	r2, 8010184 <_ZN8touchgfx11Application15handleTickEventEv+0x64>
 8010176:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801017a:	4413      	add	r3, r2
 801017c:	6858      	ldr	r0, [r3, #4]
 801017e:	6803      	ldr	r3, [r0, #0]
 8010180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010182:	4798      	blx	r3
 8010184:	3501      	adds	r5, #1
 8010186:	e7ee      	b.n	8010166 <_ZN8touchgfx11Application15handleTickEventEv+0x46>
 8010188:	f5c4 467f 	rsb	r6, r4, #65280	; 0xff00
 801018c:	3801      	subs	r0, #1
 801018e:	3678      	adds	r6, #120	; 0x78
 8010190:	f04f 0c00 	mov.w	ip, #0
 8010194:	1c43      	adds	r3, r0, #1
 8010196:	d033      	beq.n	8010200 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 8010198:	1823      	adds	r3, r4, r0
 801019a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801019e:	bb6a      	cbnz	r2, 80101fc <_ZN8touchgfx11Application15handleTickEventEv+0xdc>
 80101a0:	b281      	uxth	r1, r0
 80101a2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80101a6:	1d25      	adds	r5, r4, #4
 80101a8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80101ac:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 80101b0:	4293      	cmp	r3, r2
 80101b2:	dc0a      	bgt.n	80101ca <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 80101b4:	f101 0288 	add.w	r2, r1, #136	; 0x88
 80101b8:	4422      	add	r2, r4
 80101ba:	18b1      	adds	r1, r6, r2
 80101bc:	b289      	uxth	r1, r1
 80101be:	428b      	cmp	r3, r1
 80101c0:	d919      	bls.n	80101f6 <_ZN8touchgfx11Application15handleTickEventEv+0xd6>
 80101c2:	7851      	ldrb	r1, [r2, #1]
 80101c4:	f802 1b01 	strb.w	r1, [r2], #1
 80101c8:	e7f7      	b.n	80101ba <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 80101ca:	682f      	ldr	r7, [r5, #0]
 80101cc:	45b9      	cmp	r9, r7
 80101ce:	f105 0804 	add.w	r8, r5, #4
 80101d2:	d10d      	bne.n	80101f0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 80101d4:	4696      	mov	lr, r2
 80101d6:	f1be 0f1e 	cmp.w	lr, #30
 80101da:	dc06      	bgt.n	80101ea <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 80101dc:	f10e 0e01 	add.w	lr, lr, #1
 80101e0:	686f      	ldr	r7, [r5, #4]
 80101e2:	f845 7b04 	str.w	r7, [r5], #4
 80101e6:	4573      	cmp	r3, lr
 80101e8:	dcf5      	bgt.n	80101d6 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 80101ea:	3b01      	subs	r3, #1
 80101ec:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 80101f0:	3201      	adds	r2, #1
 80101f2:	4645      	mov	r5, r8
 80101f4:	e7da      	b.n	80101ac <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 80101f6:	4423      	add	r3, r4
 80101f8:	f883 c088 	strb.w	ip, [r3, #136]	; 0x88
 80101fc:	3801      	subs	r0, #1
 80101fe:	e7c9      	b.n	8010194 <_ZN8touchgfx11Application15handleTickEventEv+0x74>
 8010200:	4b04      	ldr	r3, [pc, #16]	; (8010214 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 8010202:	6818      	ldr	r0, [r3, #0]
 8010204:	b110      	cbz	r0, 801020c <_ZN8touchgfx11Application15handleTickEventEv+0xec>
 8010206:	6803      	ldr	r3, [r0, #0]
 8010208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020a:	e795      	b.n	8010138 <_ZN8touchgfx11Application15handleTickEventEv+0x18>
 801020c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010210:	20009f68 	.word	0x20009f68
 8010214:	20009f64 	.word	0x20009f64

08010218 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	4606      	mov	r6, r0
 801021c:	460c      	mov	r4, r1
 801021e:	b929      	cbnz	r1, 801022c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8010220:	4b0c      	ldr	r3, [pc, #48]	; (8010254 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8010222:	4a0d      	ldr	r2, [pc, #52]	; (8010258 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 8010224:	480d      	ldr	r0, [pc, #52]	; (801025c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 8010226:	2164      	movs	r1, #100	; 0x64
 8010228:	f00d fb24 	bl	801d874 <__assert_func>
 801022c:	4d0c      	ldr	r5, [pc, #48]	; (8010260 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801022e:	2300      	movs	r3, #0
 8010230:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8010234:	6828      	ldr	r0, [r5, #0]
 8010236:	b110      	cbz	r0, 801023e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 8010238:	6803      	ldr	r3, [r0, #0]
 801023a:	695b      	ldr	r3, [r3, #20]
 801023c:	4798      	blx	r3
 801023e:	602c      	str	r4, [r5, #0]
 8010240:	6823      	ldr	r3, [r4, #0]
 8010242:	4620      	mov	r0, r4
 8010244:	68db      	ldr	r3, [r3, #12]
 8010246:	4798      	blx	r3
 8010248:	6833      	ldr	r3, [r6, #0]
 801024a:	4630      	mov	r0, r6
 801024c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801024e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010252:	4718      	bx	r3
 8010254:	0802055c 	.word	0x0802055c
 8010258:	08020624 	.word	0x08020624
 801025c:	08020566 	.word	0x08020566
 8010260:	20009f64 	.word	0x20009f64

08010264 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8010264:	b510      	push	{r4, lr}
 8010266:	f9b1 4000 	ldrsh.w	r4, [r1]
 801026a:	888a      	ldrh	r2, [r1, #4]
 801026c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010270:	4422      	add	r2, r4
 8010272:	b212      	sxth	r2, r2
 8010274:	4293      	cmp	r3, r2
 8010276:	da15      	bge.n	80102a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010278:	8882      	ldrh	r2, [r0, #4]
 801027a:	4413      	add	r3, r2
 801027c:	b21b      	sxth	r3, r3
 801027e:	429c      	cmp	r4, r3
 8010280:	da10      	bge.n	80102a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010282:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010286:	88c9      	ldrh	r1, [r1, #6]
 8010288:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801028c:	4419      	add	r1, r3
 801028e:	b209      	sxth	r1, r1
 8010290:	428a      	cmp	r2, r1
 8010292:	da07      	bge.n	80102a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8010294:	88c0      	ldrh	r0, [r0, #6]
 8010296:	4410      	add	r0, r2
 8010298:	b200      	sxth	r0, r0
 801029a:	4283      	cmp	r3, r0
 801029c:	bfac      	ite	ge
 801029e:	2000      	movge	r0, #0
 80102a0:	2001      	movlt	r0, #1
 80102a2:	bd10      	pop	{r4, pc}
 80102a4:	2000      	movs	r0, #0
 80102a6:	e7fc      	b.n	80102a2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080102a8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80102a8:	b570      	push	{r4, r5, r6, lr}
 80102aa:	f9b1 4000 	ldrsh.w	r4, [r1]
 80102ae:	f9b0 5000 	ldrsh.w	r5, [r0]
 80102b2:	42ac      	cmp	r4, r5
 80102b4:	db18      	blt.n	80102e8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80102b6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80102ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80102be:	429a      	cmp	r2, r3
 80102c0:	db12      	blt.n	80102e8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80102c2:	8886      	ldrh	r6, [r0, #4]
 80102c4:	4435      	add	r5, r6
 80102c6:	888e      	ldrh	r6, [r1, #4]
 80102c8:	4434      	add	r4, r6
 80102ca:	b22d      	sxth	r5, r5
 80102cc:	b224      	sxth	r4, r4
 80102ce:	42a5      	cmp	r5, r4
 80102d0:	db0a      	blt.n	80102e8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 80102d2:	88c0      	ldrh	r0, [r0, #6]
 80102d4:	4418      	add	r0, r3
 80102d6:	88cb      	ldrh	r3, [r1, #6]
 80102d8:	441a      	add	r2, r3
 80102da:	b200      	sxth	r0, r0
 80102dc:	b212      	sxth	r2, r2
 80102de:	4290      	cmp	r0, r2
 80102e0:	bfb4      	ite	lt
 80102e2:	2000      	movlt	r0, #0
 80102e4:	2001      	movge	r0, #1
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
 80102e8:	2000      	movs	r0, #0
 80102ea:	e7fc      	b.n	80102e6 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

080102ec <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80102ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ee:	4604      	mov	r4, r0
 80102f0:	4608      	mov	r0, r1
 80102f2:	460d      	mov	r5, r1
 80102f4:	f7fd fe24 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 80102f8:	b978      	cbnz	r0, 801031a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80102fa:	4620      	mov	r0, r4
 80102fc:	f7fd fe20 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010300:	f9b5 6000 	ldrsh.w	r6, [r5]
 8010304:	b150      	cbz	r0, 801031c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8010306:	8026      	strh	r6, [r4, #0]
 8010308:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801030c:	8063      	strh	r3, [r4, #2]
 801030e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8010312:	80a3      	strh	r3, [r4, #4]
 8010314:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8010318:	80e3      	strh	r3, [r4, #6]
 801031a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801031c:	f9b4 1000 	ldrsh.w	r1, [r4]
 8010320:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010324:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010328:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801032c:	88ed      	ldrh	r5, [r5, #6]
 801032e:	42b1      	cmp	r1, r6
 8010330:	460f      	mov	r7, r1
 8010332:	bfa8      	it	ge
 8010334:	4637      	movge	r7, r6
 8010336:	4293      	cmp	r3, r2
 8010338:	4618      	mov	r0, r3
 801033a:	4466      	add	r6, ip
 801033c:	bfa8      	it	ge
 801033e:	4610      	movge	r0, r2
 8010340:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8010344:	8027      	strh	r7, [r4, #0]
 8010346:	442a      	add	r2, r5
 8010348:	88e5      	ldrh	r5, [r4, #6]
 801034a:	8060      	strh	r0, [r4, #2]
 801034c:	4461      	add	r1, ip
 801034e:	442b      	add	r3, r5
 8010350:	b236      	sxth	r6, r6
 8010352:	b209      	sxth	r1, r1
 8010354:	b212      	sxth	r2, r2
 8010356:	b21b      	sxth	r3, r3
 8010358:	428e      	cmp	r6, r1
 801035a:	bfac      	ite	ge
 801035c:	ebc7 0106 	rsbge	r1, r7, r6
 8010360:	ebc7 0101 	rsblt	r1, r7, r1
 8010364:	429a      	cmp	r2, r3
 8010366:	bfac      	ite	ge
 8010368:	ebc0 0202 	rsbge	r2, r0, r2
 801036c:	ebc0 0203 	rsblt	r2, r0, r3
 8010370:	80a1      	strh	r1, [r4, #4]
 8010372:	80e2      	strh	r2, [r4, #6]
 8010374:	e7d1      	b.n	801031a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08010378 <_ZN8touchgfx11Application11getInstanceEv>:
 8010378:	4b01      	ldr	r3, [pc, #4]	; (8010380 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801037a:	6818      	ldr	r0, [r3, #0]
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	20009f74 	.word	0x20009f74

08010384 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8010384:	2300      	movs	r3, #0
 8010386:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801038a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801038e:	30a8      	adds	r0, #168	; 0xa8
 8010390:	f802 3b01 	strb.w	r3, [r2], #1
 8010394:	4282      	cmp	r2, r0
 8010396:	d1fb      	bne.n	8010390 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8010398:	4770      	bx	lr

0801039a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801039a:	4603      	mov	r3, r0
 801039c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80103a0:	2200      	movs	r2, #0
 80103a2:	801a      	strh	r2, [r3, #0]
 80103a4:	805a      	strh	r2, [r3, #2]
 80103a6:	809a      	strh	r2, [r3, #4]
 80103a8:	80da      	strh	r2, [r3, #6]
 80103aa:	3308      	adds	r3, #8
 80103ac:	428b      	cmp	r3, r1
 80103ae:	d1f8      	bne.n	80103a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80103b0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80103b4:	4770      	bx	lr
	...

080103b8 <_ZN8touchgfx11ApplicationC1Ev>:
 80103b8:	b570      	push	{r4, r5, r6, lr}
 80103ba:	4b16      	ldr	r3, [pc, #88]	; (8010414 <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 80103bc:	6003      	str	r3, [r0, #0]
 80103be:	2500      	movs	r5, #0
 80103c0:	4604      	mov	r4, r0
 80103c2:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 80103c6:	30a8      	adds	r0, #168	; 0xa8
 80103c8:	f7ff ffe7 	bl	801039a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80103cc:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80103d0:	f7ff ffe3 	bl	801039a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80103d4:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 80103d8:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 80103dc:	490e      	ldr	r1, [pc, #56]	; (8010418 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 80103de:	480f      	ldr	r0, [pc, #60]	; (801041c <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 80103e0:	4e0f      	ldr	r6, [pc, #60]	; (8010420 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80103e2:	f00d f915 	bl	801d610 <CRC_Lock>
 80103e6:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80103e8:	b158      	cbz	r0, 8010402 <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 80103ea:	801d      	strh	r5, [r3, #0]
 80103ec:	4a0e      	ldr	r2, [pc, #56]	; (8010428 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80103ee:	2300      	movs	r3, #0
 80103f0:	6013      	str	r3, [r2, #0]
 80103f2:	4a0e      	ldr	r2, [pc, #56]	; (801042c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80103f4:	6033      	str	r3, [r6, #0]
 80103f6:	4620      	mov	r0, r4
 80103f8:	6013      	str	r3, [r2, #0]
 80103fa:	f7ff ffc3 	bl	8010384 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80103fe:	4620      	mov	r0, r4
 8010400:	bd70      	pop	{r4, r5, r6, pc}
 8010402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010406:	2002      	movs	r0, #2
 8010408:	801a      	strh	r2, [r3, #0]
 801040a:	6030      	str	r0, [r6, #0]
 801040c:	f000 ff1e 	bl	801124c <_ZN8touchgfx6Screen4drawEv>
 8010410:	e7ec      	b.n	80103ec <_ZN8touchgfx11ApplicationC1Ev+0x34>
 8010412:	bf00      	nop
 8010414:	080205f0 	.word	0x080205f0
 8010418:	b5e8b5cd 	.word	0xb5e8b5cd
 801041c:	f407a5c2 	.word	0xf407a5c2
 8010420:	20009f64 	.word	0x20009f64
 8010424:	20000094 	.word	0x20000094
 8010428:	20009f74 	.word	0x20009f74
 801042c:	20009f68 	.word	0x20009f68

08010430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8010430:	2300      	movs	r3, #0
 8010432:	8003      	strh	r3, [r0, #0]
 8010434:	8043      	strh	r3, [r0, #2]
 8010436:	8083      	strh	r3, [r0, #4]
 8010438:	80c3      	strh	r3, [r0, #6]
 801043a:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801043e:	4293      	cmp	r3, r2
 8010440:	b530      	push	{r4, r5, lr}
 8010442:	d912      	bls.n	801046a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 8010444:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8010448:	3b01      	subs	r3, #1
 801044a:	6825      	ldr	r5, [r4, #0]
 801044c:	6005      	str	r5, [r0, #0]
 801044e:	b29b      	uxth	r3, r3
 8010450:	6865      	ldr	r5, [r4, #4]
 8010452:	6045      	str	r5, [r0, #4]
 8010454:	4293      	cmp	r3, r2
 8010456:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801045a:	d906      	bls.n	801046a <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801045c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8010460:	681d      	ldr	r5, [r3, #0]
 8010462:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 8010466:	685d      	ldr	r5, [r3, #4]
 8010468:	6065      	str	r5, [r4, #4]
 801046a:	bd30      	pop	{r4, r5, pc}

0801046c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801046c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801046e:	466b      	mov	r3, sp
 8010470:	e883 0006 	stmia.w	r3, {r1, r2}
 8010474:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 8010478:	2a07      	cmp	r2, #7
 801047a:	4604      	mov	r4, r0
 801047c:	d906      	bls.n	801048c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801047e:	4b09      	ldr	r3, [pc, #36]	; (80104a4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8010480:	4a09      	ldr	r2, [pc, #36]	; (80104a8 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 8010482:	480a      	ldr	r0, [pc, #40]	; (80104ac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 8010484:	f44f 7102 	mov.w	r1, #520	; 0x208
 8010488:	f00d f9f4 	bl	801d874 <__assert_func>
 801048c:	1c51      	adds	r1, r2, #1
 801048e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8010492:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8010496:	cb03      	ldmia	r3!, {r0, r1}
 8010498:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801049c:	6069      	str	r1, [r5, #4]
 801049e:	b003      	add	sp, #12
 80104a0:	bd30      	pop	{r4, r5, pc}
 80104a2:	bf00      	nop
 80104a4:	08020590 	.word	0x08020590
 80104a8:	08020668 	.word	0x08020668
 80104ac:	080205bf 	.word	0x080205bf

080104b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80104b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104b4:	b089      	sub	sp, #36	; 0x24
 80104b6:	466c      	mov	r4, sp
 80104b8:	4606      	mov	r6, r0
 80104ba:	4620      	mov	r0, r4
 80104bc:	e884 0006 	stmia.w	r4, {r1, r2}
 80104c0:	f7fd fd3e 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 80104c4:	bbb0      	cbnz	r0, 8010534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80104c6:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 80104ca:	b1fd      	cbz	r5, 801050c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 80104cc:	3d01      	subs	r5, #1
 80104ce:	af04      	add	r7, sp, #16
 80104d0:	f04f 090a 	mov.w	r9, #10
 80104d4:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80104d8:	ab02      	add	r3, sp, #8
 80104da:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80104de:	6851      	ldr	r1, [r2, #4]
 80104e0:	c303      	stmia	r3!, {r0, r1}
 80104e2:	4621      	mov	r1, r4
 80104e4:	a802      	add	r0, sp, #8
 80104e6:	fa1f f885 	uxth.w	r8, r5
 80104ea:	f7ff fedd 	bl	80102a8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80104ee:	bb08      	cbnz	r0, 8010534 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 80104f0:	a902      	add	r1, sp, #8
 80104f2:	4620      	mov	r0, r4
 80104f4:	f7ff fed8 	bl	80102a8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80104f8:	b1f8      	cbz	r0, 801053a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 80104fa:	4642      	mov	r2, r8
 80104fc:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8010500:	a806      	add	r0, sp, #24
 8010502:	f7ff ff95 	bl	8010430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010506:	f115 35ff 	adds.w	r5, r5, #4294967295
 801050a:	d2e3      	bcs.n	80104d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801050c:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 8010510:	2b08      	cmp	r3, #8
 8010512:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 8010516:	d108      	bne.n	801052a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8010518:	4629      	mov	r1, r5
 801051a:	a806      	add	r0, sp, #24
 801051c:	2207      	movs	r2, #7
 801051e:	f7ff ff87 	bl	8010430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010522:	a906      	add	r1, sp, #24
 8010524:	4620      	mov	r0, r4
 8010526:	f7ff fee1 	bl	80102ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801052a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801052e:	4628      	mov	r0, r5
 8010530:	f7ff ff9c 	bl	801046c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010534:	b009      	add	sp, #36	; 0x24
 8010536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801053a:	4621      	mov	r1, r4
 801053c:	a802      	add	r0, sp, #8
 801053e:	f7ff fe91 	bl	8010264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010542:	b150      	cbz	r0, 801055a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 8010544:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8010548:	a806      	add	r0, sp, #24
 801054a:	4642      	mov	r2, r8
 801054c:	f7ff ff70 	bl	8010430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010550:	a902      	add	r1, sp, #8
 8010552:	4620      	mov	r0, r4
 8010554:	f7ff feca 	bl	80102ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010558:	e7d5      	b.n	8010506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801055a:	e894 0003 	ldmia.w	r4, {r0, r1}
 801055e:	e887 0003 	stmia.w	r7, {r0, r1}
 8010562:	a902      	add	r1, sp, #8
 8010564:	4638      	mov	r0, r7
 8010566:	f7ff fec1 	bl	80102ec <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801056a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801056e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010572:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8010576:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801057a:	fb13 f302 	smulbb	r3, r3, r2
 801057e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010582:	fb11 f102 	smulbb	r1, r1, r2
 8010586:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801058a:	fb12 1100 	smlabb	r1, r2, r0, r1
 801058e:	220b      	movs	r2, #11
 8010590:	fb09 f303 	mul.w	r3, r9, r3
 8010594:	434a      	muls	r2, r1
 8010596:	4293      	cmp	r3, r2
 8010598:	dab5      	bge.n	8010506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801059a:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801059e:	a806      	add	r0, sp, #24
 80105a0:	4642      	mov	r2, r8
 80105a2:	f7ff ff45 	bl	8010430 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80105a6:	e897 0003 	ldmia.w	r7, {r0, r1}
 80105aa:	e884 0003 	stmia.w	r4, {r0, r1}
 80105ae:	e7aa      	b.n	8010506 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

080105b0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80105b0:	b530      	push	{r4, r5, lr}
 80105b2:	4b1d      	ldr	r3, [pc, #116]	; (8010628 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 80105b4:	b085      	sub	sp, #20
 80105b6:	460c      	mov	r4, r1
 80105b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80105bc:	4b1b      	ldr	r3, [pc, #108]	; (801062c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 80105be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80105c2:	2100      	movs	r1, #0
 80105c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80105c8:	9100      	str	r1, [sp, #0]
 80105ca:	4605      	mov	r5, r0
 80105cc:	6861      	ldr	r1, [r4, #4]
 80105ce:	6820      	ldr	r0, [r4, #0]
 80105d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80105d4:	ab02      	add	r3, sp, #8
 80105d6:	c303      	stmia	r3!, {r0, r1}
 80105d8:	4669      	mov	r1, sp
 80105da:	a802      	add	r0, sp, #8
 80105dc:	f7fd fc6c 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 80105e0:	ab02      	add	r3, sp, #8
 80105e2:	cb03      	ldmia	r3!, {r0, r1}
 80105e4:	4b12      	ldr	r3, [pc, #72]	; (8010630 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 80105e6:	6020      	str	r0, [r4, #0]
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	6061      	str	r1, [r4, #4]
 80105ec:	b138      	cbz	r0, 80105fe <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 80105ee:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 80105f2:	b133      	cbz	r3, 8010602 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 80105f4:	6821      	ldr	r1, [r4, #0]
 80105f6:	6862      	ldr	r2, [r4, #4]
 80105f8:	4628      	mov	r0, r5
 80105fa:	f7ff ff59 	bl	80104b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80105fe:	b005      	add	sp, #20
 8010600:	bd30      	pop	{r4, r5, pc}
 8010602:	6803      	ldr	r3, [r0, #0]
 8010604:	4621      	mov	r1, r4
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	4798      	blx	r3
 801060a:	4b0a      	ldr	r3, [pc, #40]	; (8010634 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801060c:	6818      	ldr	r0, [r3, #0]
 801060e:	b118      	cbz	r0, 8010618 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 8010610:	6803      	ldr	r3, [r0, #0]
 8010612:	4621      	mov	r1, r4
 8010614:	689b      	ldr	r3, [r3, #8]
 8010616:	4798      	blx	r3
 8010618:	4b07      	ldr	r3, [pc, #28]	; (8010638 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801061a:	6818      	ldr	r0, [r3, #0]
 801061c:	6803      	ldr	r3, [r0, #0]
 801061e:	4621      	mov	r1, r4
 8010620:	695b      	ldr	r3, [r3, #20]
 8010622:	4798      	blx	r3
 8010624:	e7eb      	b.n	80105fe <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 8010626:	bf00      	nop
 8010628:	20009efc 	.word	0x20009efc
 801062c:	20009efe 	.word	0x20009efe
 8010630:	20009f64 	.word	0x20009f64
 8010634:	20009f60 	.word	0x20009f60
 8010638:	20009f08 	.word	0x20009f08

0801063c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801063c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010640:	4604      	mov	r4, r0
 8010642:	b09b      	sub	sp, #108	; 0x6c
 8010644:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 8010648:	b129      	cbz	r1, 8010656 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801064a:	2300      	movs	r3, #0
 801064c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8010650:	b01b      	add	sp, #108	; 0x6c
 8010652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010656:	4baf      	ldr	r3, [pc, #700]	; (8010914 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	b33b      	cbz	r3, 80106ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801065c:	4dae      	ldr	r5, [pc, #696]	; (8010918 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801065e:	4628      	mov	r0, r5
 8010660:	f7fd fc6e 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010664:	4606      	mov	r6, r0
 8010666:	bb08      	cbnz	r0, 80106ac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 8010668:	4628      	mov	r0, r5
 801066a:	f7ff fca5 	bl	800ffb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801066e:	6829      	ldr	r1, [r5, #0]
 8010670:	686a      	ldr	r2, [r5, #4]
 8010672:	4620      	mov	r0, r4
 8010674:	f7ff ff1c 	bl	80104b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8010678:	802e      	strh	r6, [r5, #0]
 801067a:	806e      	strh	r6, [r5, #2]
 801067c:	80ae      	strh	r6, [r5, #4]
 801067e:	80ee      	strh	r6, [r5, #6]
 8010680:	4fa6      	ldr	r7, [pc, #664]	; (801091c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 8010682:	a809      	add	r0, sp, #36	; 0x24
 8010684:	f7ff fe89 	bl	801039a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010688:	883d      	ldrh	r5, [r7, #0]
 801068a:	462e      	mov	r6, r5
 801068c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010690:	42b3      	cmp	r3, r6
 8010692:	d910      	bls.n	80106b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7a>
 8010694:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010698:	a809      	add	r0, sp, #36	; 0x24
 801069a:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801069e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80106a2:	3601      	adds	r6, #1
 80106a4:	f7ff fee2 	bl	801046c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80106a8:	b2b6      	uxth	r6, r6
 80106aa:	e7ef      	b.n	801068c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x50>
 80106ac:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d1e5      	bne.n	8010680 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x44>
 80106b4:	e7cc      	b.n	8010650 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80106b6:	462e      	mov	r6, r5
 80106b8:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 80106bc:	42b3      	cmp	r3, r6
 80106be:	d90b      	bls.n	80106d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 80106c0:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80106c4:	4620      	mov	r0, r4
 80106c6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80106ca:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80106ce:	3601      	adds	r6, #1
 80106d0:	f7ff feee 	bl	80104b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80106d4:	b2b6      	uxth	r6, r6
 80106d6:	e7ef      	b.n	80106b8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x7c>
 80106d8:	4e91      	ldr	r6, [pc, #580]	; (8010920 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 80106da:	6833      	ldr	r3, [r6, #0]
 80106dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	f040 8092 	bne.w	801080a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 80106e6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80106ea:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 80106ee:	33aa      	adds	r3, #170	; 0xaa
 80106f0:	f04f 0900 	mov.w	r9, #0
 80106f4:	42a8      	cmp	r0, r5
 80106f6:	f103 0308 	add.w	r3, r3, #8
 80106fa:	dd0a      	ble.n	8010712 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xd6>
 80106fc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8010700:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 8010704:	440a      	add	r2, r1
 8010706:	b212      	sxth	r2, r2
 8010708:	4591      	cmp	r9, r2
 801070a:	bfb8      	it	lt
 801070c:	4691      	movlt	r9, r2
 801070e:	3501      	adds	r5, #1
 8010710:	e7f0      	b.n	80106f4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xb8>
 8010712:	4b84      	ldr	r3, [pc, #528]	; (8010924 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 8010714:	f8df 8214 	ldr.w	r8, [pc, #532]	; 801092c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>
 8010718:	881d      	ldrh	r5, [r3, #0]
 801071a:	2300      	movs	r3, #0
 801071c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010720:	2d0f      	cmp	r5, #15
 8010722:	bf8c      	ite	hi
 8010724:	08ed      	lsrhi	r5, r5, #3
 8010726:	2501      	movls	r5, #1
 8010728:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801072c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8010730:	6830      	ldr	r0, [r6, #0]
 8010732:	440b      	add	r3, r1
 8010734:	b21b      	sxth	r3, r3
 8010736:	4599      	cmp	r9, r3
 8010738:	6802      	ldr	r2, [r0, #0]
 801073a:	dd49      	ble.n	80107d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x194>
 801073c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8010740:	4798      	blx	r3
 8010742:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010746:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801074a:	4413      	add	r3, r2
 801074c:	b21b      	sxth	r3, r3
 801074e:	195a      	adds	r2, r3, r5
 8010750:	4290      	cmp	r0, r2
 8010752:	da07      	bge.n	8010764 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8010754:	4581      	cmp	r9, r0
 8010756:	dd05      	ble.n	8010764 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x128>
 8010758:	4298      	cmp	r0, r3
 801075a:	da33      	bge.n	80107c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 801075c:	2b00      	cmp	r3, #0
 801075e:	dd31      	ble.n	80107c4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x188>
 8010760:	4648      	mov	r0, r9
 8010762:	e004      	b.n	801076e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 8010764:	4298      	cmp	r0, r3
 8010766:	dbfb      	blt.n	8010760 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x124>
 8010768:	4548      	cmp	r0, r9
 801076a:	bfa8      	it	ge
 801076c:	4648      	movge	r0, r9
 801076e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8010772:	f8b7 a000 	ldrh.w	sl, [r7]
 8010776:	f8ad 3016 	strh.w	r3, [sp, #22]
 801077a:	2100      	movs	r1, #0
 801077c:	1ac0      	subs	r0, r0, r3
 801077e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010782:	f8ad 2018 	strh.w	r2, [sp, #24]
 8010786:	f8ad 001a 	strh.w	r0, [sp, #26]
 801078a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801078e:	4553      	cmp	r3, sl
 8010790:	d9ca      	bls.n	8010728 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 8010792:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 8010796:	ab07      	add	r3, sp, #28
 8010798:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801079c:	6851      	ldr	r1, [r2, #4]
 801079e:	c303      	stmia	r3!, {r0, r1}
 80107a0:	a807      	add	r0, sp, #28
 80107a2:	a905      	add	r1, sp, #20
 80107a4:	f7fd fb88 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 80107a8:	a807      	add	r0, sp, #28
 80107aa:	f7fd fbc9 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 80107ae:	b920      	cbnz	r0, 80107ba <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x17e>
 80107b0:	6823      	ldr	r3, [r4, #0]
 80107b2:	a907      	add	r1, sp, #28
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	4620      	mov	r0, r4
 80107b8:	4798      	blx	r3
 80107ba:	f10a 0a01 	add.w	sl, sl, #1
 80107be:	fa1f fa8a 	uxth.w	sl, sl
 80107c2:	e7e2      	b.n	801078a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14e>
 80107c4:	6830      	ldr	r0, [r6, #0]
 80107c6:	6803      	ldr	r3, [r0, #0]
 80107c8:	2101      	movs	r1, #1
 80107ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107cc:	4798      	blx	r3
 80107ce:	e7ab      	b.n	8010728 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xec>
 80107d0:	69d3      	ldr	r3, [r2, #28]
 80107d2:	4798      	blx	r3
 80107d4:	4b54      	ldr	r3, [pc, #336]	; (8010928 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f43f af39 	beq.w	8010650 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80107de:	2300      	movs	r3, #0
 80107e0:	883d      	ldrh	r5, [r7, #0]
 80107e2:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 80107e6:	34ea      	adds	r4, #234	; 0xea
 80107e8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80107ec:	42ab      	cmp	r3, r5
 80107ee:	f67f af2f 	bls.w	8010650 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 80107f2:	ab1a      	add	r3, sp, #104	; 0x68
 80107f4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80107f8:	3b44      	subs	r3, #68	; 0x44
 80107fa:	e893 0006 	ldmia.w	r3, {r1, r2}
 80107fe:	4620      	mov	r0, r4
 8010800:	3501      	adds	r5, #1
 8010802:	f7ff fe33 	bl	801046c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8010806:	b2ad      	uxth	r5, r5
 8010808:	e7ee      	b.n	80107e8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ac>
 801080a:	2b02      	cmp	r3, #2
 801080c:	d16a      	bne.n	80108e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 801080e:	f8df a120 	ldr.w	sl, [pc, #288]	; 8010930 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 8010812:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8010816:	42ab      	cmp	r3, r5
 8010818:	d9dc      	bls.n	80107d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 801081a:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801081e:	ab03      	add	r3, sp, #12
 8010820:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8010824:	6851      	ldr	r1, [r2, #4]
 8010826:	c303      	stmia	r3!, {r0, r1}
 8010828:	f89a 3000 	ldrb.w	r3, [sl]
 801082c:	2b01      	cmp	r3, #1
 801082e:	d102      	bne.n	8010836 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1fa>
 8010830:	a803      	add	r0, sp, #12
 8010832:	f7ff fc1b 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010836:	a803      	add	r0, sp, #12
 8010838:	f7fd fb82 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 801083c:	2800      	cmp	r0, #0
 801083e:	d14a      	bne.n	80108d6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x29a>
 8010840:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010844:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010848:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801084c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010850:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8010854:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010858:	f8ad 3018 	strh.w	r3, [sp, #24]
 801085c:	f10d 0914 	add.w	r9, sp, #20
 8010860:	f10d 081c 	add.w	r8, sp, #28
 8010864:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8010868:	f8bd c00e 	ldrh.w	ip, [sp, #14]
 801086c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8010870:	6830      	ldr	r0, [r6, #0]
 8010872:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8010876:	f8d0 e000 	ldr.w	lr, [r0]
 801087a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801087e:	44dc      	add	ip, fp
 8010880:	ebac 0c02 	sub.w	ip, ip, r2
 8010884:	fa1f fc8c 	uxth.w	ip, ip
 8010888:	f8cd c000 	str.w	ip, [sp]
 801088c:	f8de b078 	ldr.w	fp, [lr, #120]	; 0x78
 8010890:	47d8      	blx	fp
 8010892:	f89a 3000 	ldrb.w	r3, [sl]
 8010896:	f8ad 001a 	strh.w	r0, [sp, #26]
 801089a:	2b01      	cmp	r3, #1
 801089c:	d11e      	bne.n	80108dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a0>
 801089e:	e899 0003 	ldmia.w	r9, {r0, r1}
 80108a2:	e888 0003 	stmia.w	r8, {r0, r1}
 80108a6:	4640      	mov	r0, r8
 80108a8:	f7ff fb86 	bl	800ffb8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80108ac:	6823      	ldr	r3, [r4, #0]
 80108ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b0:	4641      	mov	r1, r8
 80108b2:	4620      	mov	r0, r4
 80108b4:	4798      	blx	r3
 80108b6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80108ba:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80108be:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 80108c2:	4413      	add	r3, r2
 80108c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80108c8:	440a      	add	r2, r1
 80108ca:	b21b      	sxth	r3, r3
 80108cc:	b212      	sxth	r2, r2
 80108ce:	4293      	cmp	r3, r2
 80108d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80108d4:	dbc6      	blt.n	8010864 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x228>
 80108d6:	3501      	adds	r5, #1
 80108d8:	b2ad      	uxth	r5, r5
 80108da:	e79a      	b.n	8010812 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d6>
 80108dc:	6823      	ldr	r3, [r4, #0]
 80108de:	4649      	mov	r1, r9
 80108e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e2:	e7e6      	b.n	80108b2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 80108e4:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 80108e8:	42ab      	cmp	r3, r5
 80108ea:	f67f af73 	bls.w	80107d4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x198>
 80108ee:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80108f2:	ab07      	add	r3, sp, #28
 80108f4:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 80108f8:	6851      	ldr	r1, [r2, #4]
 80108fa:	c303      	stmia	r3!, {r0, r1}
 80108fc:	a807      	add	r0, sp, #28
 80108fe:	f7fd fb1f 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010902:	b920      	cbnz	r0, 801090e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d2>
 8010904:	6823      	ldr	r3, [r4, #0]
 8010906:	a907      	add	r1, sp, #28
 8010908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801090a:	4620      	mov	r0, r4
 801090c:	4798      	blx	r3
 801090e:	3501      	adds	r5, #1
 8010910:	b2ad      	uxth	r5, r5
 8010912:	e7e7      	b.n	80108e4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2a8>
 8010914:	20009f60 	.word	0x20009f60
 8010918:	20009f6c 	.word	0x20009f6c
 801091c:	20000094 	.word	0x20000094
 8010920:	20009f08 	.word	0x20009f08
 8010924:	20009efe 	.word	0x20009efe
 8010928:	20009f06 	.word	0x20009f06
 801092c:	20009efc 	.word	0x20009efc
 8010930:	20009f00 	.word	0x20009f00

08010934 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8010934:	4b03      	ldr	r3, [pc, #12]	; (8010944 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8010936:	2200      	movs	r2, #0
 8010938:	801a      	strh	r2, [r3, #0]
 801093a:	805a      	strh	r2, [r3, #2]
 801093c:	809a      	strh	r2, [r3, #4]
 801093e:	80da      	strh	r2, [r3, #6]
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop
 8010944:	20009f6c 	.word	0x20009f6c

08010948 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 8010948:	2000      	movs	r0, #0
 801094a:	4770      	bx	lr

0801094c <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801094c:	2000      	movs	r0, #0
 801094e:	4770      	bx	lr

08010950 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8010950:	b508      	push	{r3, lr}
 8010952:	6803      	ldr	r3, [r0, #0]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	4798      	blx	r3
 8010958:	b128      	cbz	r0, 8010966 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801095a:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801095e:	7a80      	ldrb	r0, [r0, #10]
 8010960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010964:	4318      	orrs	r0, r3
 8010966:	bd08      	pop	{r3, pc}

08010968 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 8010968:	b40e      	push	{r1, r2, r3}
 801096a:	b533      	push	{r0, r1, r4, r5, lr}
 801096c:	ab05      	add	r3, sp, #20
 801096e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010972:	9301      	str	r3, [sp, #4]
 8010974:	4b09      	ldr	r3, [pc, #36]	; (801099c <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 8010976:	685c      	ldr	r4, [r3, #4]
 8010978:	1061      	asrs	r1, r4, #1
 801097a:	07e4      	lsls	r4, r4, #31
 801097c:	eb00 0501 	add.w	r5, r0, r1
 8010980:	bf45      	ittet	mi
 8010982:	681b      	ldrmi	r3, [r3, #0]
 8010984:	5841      	ldrmi	r1, [r0, r1]
 8010986:	681c      	ldrpl	r4, [r3, #0]
 8010988:	58cc      	ldrmi	r4, [r1, r3]
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	2100      	movs	r1, #0
 801098e:	4628      	mov	r0, r5
 8010990:	47a0      	blx	r4
 8010992:	b002      	add	sp, #8
 8010994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010998:	b003      	add	sp, #12
 801099a:	4770      	bx	lr
 801099c:	2000007c 	.word	0x2000007c

080109a0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 80109a0:	b40c      	push	{r2, r3}
 80109a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80109a4:	ab06      	add	r3, sp, #24
 80109a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	4b09      	ldr	r3, [pc, #36]	; (80109d4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 80109ae:	685d      	ldr	r5, [r3, #4]
 80109b0:	106c      	asrs	r4, r5, #1
 80109b2:	07ed      	lsls	r5, r5, #31
 80109b4:	eb00 0604 	add.w	r6, r0, r4
 80109b8:	bf45      	ittet	mi
 80109ba:	681b      	ldrmi	r3, [r3, #0]
 80109bc:	5900      	ldrmi	r0, [r0, r4]
 80109be:	681c      	ldrpl	r4, [r3, #0]
 80109c0:	58c4      	ldrmi	r4, [r0, r3]
 80109c2:	9b01      	ldr	r3, [sp, #4]
 80109c4:	4630      	mov	r0, r6
 80109c6:	47a0      	blx	r4
 80109c8:	b002      	add	sp, #8
 80109ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80109ce:	b002      	add	sp, #8
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	2000007c 	.word	0x2000007c

080109d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80109d8:	b40e      	push	{r1, r2, r3}
 80109da:	b530      	push	{r4, r5, lr}
 80109dc:	b098      	sub	sp, #96	; 0x60
 80109de:	ab1b      	add	r3, sp, #108	; 0x6c
 80109e0:	4604      	mov	r4, r0
 80109e2:	f853 5b04 	ldr.w	r5, [r3], #4
 80109e6:	9301      	str	r3, [sp, #4]
 80109e8:	a802      	add	r0, sp, #8
 80109ea:	f000 ffd5 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 80109ee:	6823      	ldr	r3, [r4, #0]
 80109f0:	4620      	mov	r0, r4
 80109f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f4:	4798      	blx	r3
 80109f6:	9a01      	ldr	r2, [sp, #4]
 80109f8:	4603      	mov	r3, r0
 80109fa:	4629      	mov	r1, r5
 80109fc:	a802      	add	r0, sp, #8
 80109fe:	f000 ffe8 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010a02:	a802      	add	r0, sp, #8
 8010a04:	f001 f81e 	bl	8011a44 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010a08:	2401      	movs	r4, #1
 8010a0a:	b2a3      	uxth	r3, r4
 8010a0c:	b140      	cbz	r0, 8010a20 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x48>
 8010a0e:	280a      	cmp	r0, #10
 8010a10:	bf08      	it	eq
 8010a12:	3301      	addeq	r3, #1
 8010a14:	a802      	add	r0, sp, #8
 8010a16:	bf08      	it	eq
 8010a18:	b21c      	sxtheq	r4, r3
 8010a1a:	f001 f813 	bl	8011a44 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010a1e:	e7f4      	b.n	8010a0a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 8010a20:	4618      	mov	r0, r3
 8010a22:	b018      	add	sp, #96	; 0x60
 8010a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010a28:	b003      	add	sp, #12
 8010a2a:	4770      	bx	lr

08010a2c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8010a2c:	b40e      	push	{r1, r2, r3}
 8010a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a30:	b098      	sub	sp, #96	; 0x60
 8010a32:	ab1d      	add	r3, sp, #116	; 0x74
 8010a34:	4605      	mov	r5, r0
 8010a36:	f853 4b04 	ldr.w	r4, [r3], #4
 8010a3a:	9300      	str	r3, [sp, #0]
 8010a3c:	a802      	add	r0, sp, #8
 8010a3e:	f000 ffab 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 8010a42:	682b      	ldr	r3, [r5, #0]
 8010a44:	4f21      	ldr	r7, [pc, #132]	; (8010acc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>)
 8010a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a48:	4628      	mov	r0, r5
 8010a4a:	4798      	blx	r3
 8010a4c:	ae18      	add	r6, sp, #96	; 0x60
 8010a4e:	4603      	mov	r3, r0
 8010a50:	4621      	mov	r1, r4
 8010a52:	9a00      	ldr	r2, [sp, #0]
 8010a54:	a802      	add	r0, sp, #8
 8010a56:	2400      	movs	r4, #0
 8010a58:	f000 ffbb 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010a5c:	f846 4d5c 	str.w	r4, [r6, #-92]!
 8010a60:	462a      	mov	r2, r5
 8010a62:	4633      	mov	r3, r6
 8010a64:	4621      	mov	r1, r4
 8010a66:	a802      	add	r0, sp, #8
 8010a68:	f001 f918 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010a6c:	b338      	cbz	r0, 8010abe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 8010a6e:	280a      	cmp	r0, #10
 8010a70:	d01e      	beq.n	8010ab0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8010a72:	9901      	ldr	r1, [sp, #4]
 8010a74:	b1e1      	cbz	r1, 8010ab0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 8010a76:	7b4b      	ldrb	r3, [r1, #13]
 8010a78:	f891 c008 	ldrb.w	ip, [r1, #8]
 8010a7c:	79c9      	ldrb	r1, [r1, #7]
 8010a7e:	88aa      	ldrh	r2, [r5, #4]
 8010a80:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010a84:	ea4f 1e03 	mov.w	lr, r3, lsl #4
 8010a88:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010a8c:	f40e 7e80 	and.w	lr, lr, #256	; 0x100
 8010a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a94:	bf14      	ite	ne
 8010a96:	4638      	movne	r0, r7
 8010a98:	2000      	moveq	r0, #0
 8010a9a:	ea41 010e 	orr.w	r1, r1, lr
 8010a9e:	ea43 030c 	orr.w	r3, r3, ip
 8010aa2:	440a      	add	r2, r1
 8010aa4:	4303      	orrs	r3, r0
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	42a3      	cmp	r3, r4
 8010aac:	bfc8      	it	gt
 8010aae:	b21c      	sxthgt	r4, r3
 8010ab0:	4633      	mov	r3, r6
 8010ab2:	462a      	mov	r2, r5
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	a802      	add	r0, sp, #8
 8010ab8:	f001 f8f0 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010abc:	e7d6      	b.n	8010a6c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 8010abe:	b2a0      	uxth	r0, r4
 8010ac0:	b018      	add	sp, #96	; 0x60
 8010ac2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ac6:	b003      	add	sp, #12
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop
 8010acc:	fffffe00 	.word	0xfffffe00

08010ad0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8010ad0:	b40e      	push	{r1, r2, r3}
 8010ad2:	b570      	push	{r4, r5, r6, lr}
 8010ad4:	b099      	sub	sp, #100	; 0x64
 8010ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8010ad8:	4604      	mov	r4, r0
 8010ada:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	a802      	add	r0, sp, #8
 8010ae2:	f000 ff59 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 8010ae6:	6823      	ldr	r3, [r4, #0]
 8010ae8:	4620      	mov	r0, r4
 8010aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aec:	4798      	blx	r3
 8010aee:	4629      	mov	r1, r5
 8010af0:	4603      	mov	r3, r0
 8010af2:	9a00      	ldr	r2, [sp, #0]
 8010af4:	a802      	add	r0, sp, #8
 8010af6:	ad18      	add	r5, sp, #96	; 0x60
 8010af8:	f000 ff6b 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010afc:	2100      	movs	r1, #0
 8010afe:	f845 1d5c 	str.w	r1, [r5, #-92]!
 8010b02:	4622      	mov	r2, r4
 8010b04:	462b      	mov	r3, r5
 8010b06:	a802      	add	r0, sp, #8
 8010b08:	f001 f8c8 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010b0c:	26ff      	movs	r6, #255	; 0xff
 8010b0e:	b190      	cbz	r0, 8010b36 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 8010b10:	280a      	cmp	r0, #10
 8010b12:	d009      	beq.n	8010b28 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8010b14:	9a01      	ldr	r2, [sp, #4]
 8010b16:	b13a      	cbz	r2, 8010b28 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 8010b18:	7923      	ldrb	r3, [r4, #4]
 8010b1a:	7a12      	ldrb	r2, [r2, #8]
 8010b1c:	1a9b      	subs	r3, r3, r2
 8010b1e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8010b22:	429e      	cmp	r6, r3
 8010b24:	bf28      	it	cs
 8010b26:	461e      	movcs	r6, r3
 8010b28:	462b      	mov	r3, r5
 8010b2a:	4622      	mov	r2, r4
 8010b2c:	2100      	movs	r1, #0
 8010b2e:	a802      	add	r0, sp, #8
 8010b30:	f001 f8b4 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010b34:	e7eb      	b.n	8010b0e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 8010b36:	4630      	mov	r0, r6
 8010b38:	b019      	add	sp, #100	; 0x64
 8010b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b3e:	b003      	add	sp, #12
 8010b40:	4770      	bx	lr

08010b42 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8010b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b46:	4606      	mov	r6, r0
 8010b48:	b099      	sub	sp, #100	; 0x64
 8010b4a:	a802      	add	r0, sp, #8
 8010b4c:	4614      	mov	r4, r2
 8010b4e:	4688      	mov	r8, r1
 8010b50:	461d      	mov	r5, r3
 8010b52:	f000 ff21 	bl	8011998 <_ZN8touchgfx12TextProviderC1Ev>
 8010b56:	6833      	ldr	r3, [r6, #0]
 8010b58:	4630      	mov	r0, r6
 8010b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b5c:	4798      	blx	r3
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4603      	mov	r3, r0
 8010b62:	4621      	mov	r1, r4
 8010b64:	a802      	add	r0, sp, #8
 8010b66:	f000 ff34 	bl	80119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 8010b6a:	f04f 0b00 	mov.w	fp, #0
 8010b6e:	465f      	mov	r7, fp
 8010b70:	46da      	mov	sl, fp
 8010b72:	46d9      	mov	r9, fp
 8010b74:	ab01      	add	r3, sp, #4
 8010b76:	4632      	mov	r2, r6
 8010b78:	4641      	mov	r1, r8
 8010b7a:	a802      	add	r0, sp, #8
 8010b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010b80:	f001 f88c 	bl	8011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010b84:	4605      	mov	r5, r0
 8010b86:	b108      	cbz	r0, 8010b8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4a>
 8010b88:	280a      	cmp	r0, #10
 8010b8a:	d10b      	bne.n	8010ba4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x62>
 8010b8c:	4557      	cmp	r7, sl
 8010b8e:	bf38      	it	cc
 8010b90:	4657      	movcc	r7, sl
 8010b92:	f04f 0a00 	mov.w	sl, #0
 8010b96:	b91d      	cbnz	r5, 8010ba0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8010b98:	4638      	mov	r0, r7
 8010b9a:	b019      	add	sp, #100	; 0x64
 8010b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba0:	46ab      	mov	fp, r5
 8010ba2:	e7e7      	b.n	8010b74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x32>
 8010ba4:	9a01      	ldr	r2, [sp, #4]
 8010ba6:	2a00      	cmp	r2, #0
 8010ba8:	d0fa      	beq.n	8010ba0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x5e>
 8010baa:	f992 400d 	ldrsb.w	r4, [r2, #13]
 8010bae:	6833      	ldr	r3, [r6, #0]
 8010bb0:	8895      	ldrh	r5, [r2, #4]
 8010bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb4:	f404 7080 	and.w	r0, r4, #256	; 0x100
 8010bb8:	7a94      	ldrb	r4, [r2, #10]
 8010bba:	4659      	mov	r1, fp
 8010bbc:	4304      	orrs	r4, r0
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	4798      	blx	r3
 8010bc2:	4420      	add	r0, r4
 8010bc4:	4450      	add	r0, sl
 8010bc6:	fa1f fa80 	uxth.w	sl, r0
 8010bca:	e7e4      	b.n	8010b96 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x54>

08010bcc <_ZNK8touchgfx8Drawable10invalidateEv>:
 8010bcc:	b513      	push	{r0, r1, r4, lr}
 8010bce:	1d01      	adds	r1, r0, #4
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	c903      	ldmia	r1, {r0, r1}
 8010bd4:	466a      	mov	r2, sp
 8010bd6:	e882 0003 	stmia.w	r2, {r0, r1}
 8010bda:	2100      	movs	r1, #0
 8010bdc:	9100      	str	r1, [sp, #0]
 8010bde:	6819      	ldr	r1, [r3, #0]
 8010be0:	4618      	mov	r0, r3
 8010be2:	690c      	ldr	r4, [r1, #16]
 8010be4:	4611      	mov	r1, r2
 8010be6:	47a0      	blx	r4
 8010be8:	b002      	add	sp, #8
 8010bea:	bd10      	pop	{r4, pc}

08010bec <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	680b      	ldr	r3, [r1, #0]
 8010bf0:	460c      	mov	r4, r1
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	4798      	blx	r3
 8010bf8:	6823      	ldr	r3, [r4, #0]
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4798      	blx	r3
 8010c02:	4628      	mov	r0, r5
 8010c04:	bd38      	pop	{r3, r4, r5, pc}

08010c06 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010c06:	b410      	push	{r4}
 8010c08:	880a      	ldrh	r2, [r1, #0]
 8010c0a:	8884      	ldrh	r4, [r0, #4]
 8010c0c:	4422      	add	r2, r4
 8010c0e:	800a      	strh	r2, [r1, #0]
 8010c10:	88c4      	ldrh	r4, [r0, #6]
 8010c12:	884a      	ldrh	r2, [r1, #2]
 8010c14:	4422      	add	r2, r4
 8010c16:	804a      	strh	r2, [r1, #2]
 8010c18:	6940      	ldr	r0, [r0, #20]
 8010c1a:	b120      	cbz	r0, 8010c26 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8010c1c:	6803      	ldr	r3, [r0, #0]
 8010c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c24:	4718      	bx	r3
 8010c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c2a:	4770      	bx	lr

08010c2c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8010c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c2e:	460b      	mov	r3, r1
 8010c30:	b085      	sub	sp, #20
 8010c32:	4604      	mov	r4, r0
 8010c34:	b901      	cbnz	r1, 8010c38 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8010c36:	b1fa      	cbz	r2, 8010c78 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4c>
 8010c38:	1d27      	adds	r7, r4, #4
 8010c3a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010c3e:	466e      	mov	r6, sp
 8010c40:	e886 0003 	stmia.w	r6, {r0, r1}
 8010c44:	88e1      	ldrh	r1, [r4, #6]
 8010c46:	440a      	add	r2, r1
 8010c48:	88a1      	ldrh	r1, [r4, #4]
 8010c4a:	4419      	add	r1, r3
 8010c4c:	6823      	ldr	r3, [r4, #0]
 8010c4e:	b209      	sxth	r1, r1
 8010c50:	4620      	mov	r0, r4
 8010c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c54:	b212      	sxth	r2, r2
 8010c56:	4798      	blx	r3
 8010c58:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010c5c:	ad02      	add	r5, sp, #8
 8010c5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8010c62:	6960      	ldr	r0, [r4, #20]
 8010c64:	b150      	cbz	r0, 8010c7c <_ZN8touchgfx8Drawable12moveRelativeEss+0x50>
 8010c66:	6803      	ldr	r3, [r0, #0]
 8010c68:	4631      	mov	r1, r6
 8010c6a:	691b      	ldr	r3, [r3, #16]
 8010c6c:	4798      	blx	r3
 8010c6e:	6960      	ldr	r0, [r4, #20]
 8010c70:	6803      	ldr	r3, [r0, #0]
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	4629      	mov	r1, r5
 8010c76:	4798      	blx	r3
 8010c78:	b005      	add	sp, #20
 8010c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c7c:	f7ff fb7c 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 8010c80:	6803      	ldr	r3, [r0, #0]
 8010c82:	4631      	mov	r1, r6
 8010c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c86:	4798      	blx	r3
 8010c88:	f7ff fb76 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 8010c8c:	6803      	ldr	r3, [r0, #0]
 8010c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c90:	e7f0      	b.n	8010c74 <_ZN8touchgfx8Drawable12moveRelativeEss+0x48>

08010c92 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8010c92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c94:	8882      	ldrh	r2, [r0, #4]
 8010c96:	880b      	ldrh	r3, [r1, #0]
 8010c98:	4413      	add	r3, r2
 8010c9a:	800b      	strh	r3, [r1, #0]
 8010c9c:	88c2      	ldrh	r2, [r0, #6]
 8010c9e:	884b      	ldrh	r3, [r1, #2]
 8010ca0:	4413      	add	r3, r2
 8010ca2:	4602      	mov	r2, r0
 8010ca4:	804b      	strh	r3, [r1, #2]
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8010cac:	460c      	mov	r4, r1
 8010cae:	6851      	ldr	r1, [r2, #4]
 8010cb0:	466b      	mov	r3, sp
 8010cb2:	c303      	stmia	r3!, {r0, r1}
 8010cb4:	4621      	mov	r1, r4
 8010cb6:	4668      	mov	r0, sp
 8010cb8:	f7fd f8fe 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 8010cbc:	466b      	mov	r3, sp
 8010cbe:	cb03      	ldmia	r3!, {r0, r1}
 8010cc0:	6020      	str	r0, [r4, #0]
 8010cc2:	6061      	str	r1, [r4, #4]
 8010cc4:	6968      	ldr	r0, [r5, #20]
 8010cc6:	b128      	cbz	r0, 8010cd4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 8010cc8:	6803      	ldr	r3, [r0, #0]
 8010cca:	691b      	ldr	r3, [r3, #16]
 8010ccc:	4621      	mov	r1, r4
 8010cce:	4798      	blx	r3
 8010cd0:	b003      	add	sp, #12
 8010cd2:	bd30      	pop	{r4, r5, pc}
 8010cd4:	f7ff fb50 	bl	8010378 <_ZN8touchgfx11Application11getInstanceEv>
 8010cd8:	6803      	ldr	r3, [r0, #0]
 8010cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cdc:	e7f6      	b.n	8010ccc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

08010cde <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8010cde:	b570      	push	{r4, r5, r6, lr}
 8010ce0:	8882      	ldrh	r2, [r0, #4]
 8010ce2:	880b      	ldrh	r3, [r1, #0]
 8010ce4:	4413      	add	r3, r2
 8010ce6:	800b      	strh	r3, [r1, #0]
 8010ce8:	88c2      	ldrh	r2, [r0, #6]
 8010cea:	884b      	ldrh	r3, [r1, #2]
 8010cec:	460c      	mov	r4, r1
 8010cee:	4413      	add	r3, r2
 8010cf0:	804b      	strh	r3, [r1, #2]
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	1d01      	adds	r1, r0, #4
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f7fd f8de 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 8010cfc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010d00:	b153      	cbz	r3, 8010d18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8010d02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010d06:	b13b      	cbz	r3, 8010d18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8010d08:	6968      	ldr	r0, [r5, #20]
 8010d0a:	b128      	cbz	r0, 8010d18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3a>
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	4621      	mov	r1, r4
 8010d10:	6a1b      	ldr	r3, [r3, #32]
 8010d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d16:	4718      	bx	r3
 8010d18:	bd70      	pop	{r4, r5, r6, pc}

08010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8010d1a:	b510      	push	{r4, lr}
 8010d1c:	4604      	mov	r4, r0
 8010d1e:	4608      	mov	r0, r1
 8010d20:	2300      	movs	r3, #0
 8010d22:	8023      	strh	r3, [r4, #0]
 8010d24:	8063      	strh	r3, [r4, #2]
 8010d26:	6803      	ldr	r3, [r0, #0]
 8010d28:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010d2c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8010d30:	80a1      	strh	r1, [r4, #4]
 8010d32:	80e2      	strh	r2, [r4, #6]
 8010d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d36:	4621      	mov	r1, r4
 8010d38:	4798      	blx	r3
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	bd10      	pop	{r4, pc}
	...

08010d40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8010d40:	b530      	push	{r4, r5, lr}
 8010d42:	8083      	strh	r3, [r0, #4]
 8010d44:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8010d48:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8010d4c:	7183      	strb	r3, [r0, #6]
 8010d4e:	79c3      	ldrb	r3, [r0, #7]
 8010d50:	6101      	str	r1, [r0, #16]
 8010d52:	f365 0306 	bfi	r3, r5, #0, #7
 8010d56:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8010d5a:	8282      	strh	r2, [r0, #20]
 8010d5c:	f365 13c7 	bfi	r3, r5, #7, #1
 8010d60:	71c3      	strb	r3, [r0, #7]
 8010d62:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8010d66:	7203      	strb	r3, [r0, #8]
 8010d68:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010d6c:	7243      	strb	r3, [r0, #9]
 8010d6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010d72:	8143      	strh	r3, [r0, #10]
 8010d74:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8010d78:	8183      	strh	r3, [r0, #12]
 8010d7a:	4b01      	ldr	r3, [pc, #4]	; (8010d80 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8010d7c:	6003      	str	r3, [r0, #0]
 8010d7e:	bd30      	pop	{r4, r5, pc}
 8010d80:	08020790 	.word	0x08020790

08010d84 <_ZNK8touchgfx9ConstFont4findEt>:
 8010d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d86:	8a84      	ldrh	r4, [r0, #20]
 8010d88:	2500      	movs	r5, #0
 8010d8a:	3c01      	subs	r4, #1
 8010d8c:	260e      	movs	r6, #14
 8010d8e:	42a5      	cmp	r5, r4
 8010d90:	dc0c      	bgt.n	8010dac <_ZNK8touchgfx9ConstFont4findEt+0x28>
 8010d92:	192a      	adds	r2, r5, r4
 8010d94:	6903      	ldr	r3, [r0, #16]
 8010d96:	1052      	asrs	r2, r2, #1
 8010d98:	fb06 3302 	mla	r3, r6, r2, r3
 8010d9c:	889f      	ldrh	r7, [r3, #4]
 8010d9e:	428f      	cmp	r7, r1
 8010da0:	d901      	bls.n	8010da6 <_ZNK8touchgfx9ConstFont4findEt+0x22>
 8010da2:	1e54      	subs	r4, r2, #1
 8010da4:	e7f3      	b.n	8010d8e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8010da6:	d202      	bcs.n	8010dae <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 8010da8:	1c55      	adds	r5, r2, #1
 8010daa:	e7f0      	b.n	8010d8e <_ZNK8touchgfx9ConstFont4findEt+0xa>
 8010dac:	2300      	movs	r3, #0
 8010dae:	4618      	mov	r0, r3
 8010db0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010db2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8010db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db4:	4605      	mov	r5, r0
 8010db6:	4617      	mov	r7, r2
 8010db8:	461e      	mov	r6, r3
 8010dba:	f7ff ffe3 	bl	8010d84 <_ZNK8touchgfx9ConstFont4findEt>
 8010dbe:	b9e0      	cbnz	r0, 8010dfa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 8010dc0:	b911      	cbnz	r1, 8010dc8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 8010dc2:	2400      	movs	r4, #0
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dc8:	290a      	cmp	r1, #10
 8010dca:	d0fa      	beq.n	8010dc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010dcc:	682b      	ldr	r3, [r5, #0]
 8010dce:	4628      	mov	r0, r5
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	4798      	blx	r3
 8010dd4:	4601      	mov	r1, r0
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	f7ff ffd4 	bl	8010d84 <_ZNK8touchgfx9ConstFont4findEt>
 8010ddc:	4604      	mov	r4, r0
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d0ef      	beq.n	8010dc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8010de2:	682b      	ldr	r3, [r5, #0]
 8010de4:	4621      	mov	r1, r4
 8010de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010de8:	4628      	mov	r0, r5
 8010dea:	4798      	blx	r3
 8010dec:	6038      	str	r0, [r7, #0]
 8010dee:	682b      	ldr	r3, [r5, #0]
 8010df0:	4628      	mov	r0, r5
 8010df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010df4:	4798      	blx	r3
 8010df6:	7030      	strb	r0, [r6, #0]
 8010df8:	e7e4      	b.n	8010dc4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	e7f1      	b.n	8010de2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

08010dfe <_ZN8touchgfx10ClickEventD1Ev>:
 8010dfe:	4770      	bx	lr

08010e00 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 8010e00:	2000      	movs	r0, #0
 8010e02:	4770      	bx	lr

08010e04 <_ZN8touchgfx9DragEventD1Ev>:
 8010e04:	4770      	bx	lr

08010e06 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 8010e06:	2001      	movs	r0, #1
 8010e08:	4770      	bx	lr

08010e0a <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 8010e0a:	2002      	movs	r0, #2
 8010e0c:	4770      	bx	lr

08010e0e <_ZN8touchgfx12GestureEventD1Ev>:
 8010e0e:	4770      	bx	lr

08010e10 <_ZN8touchgfx10ClickEventD0Ev>:
 8010e10:	b510      	push	{r4, lr}
 8010e12:	210c      	movs	r1, #12
 8010e14:	4604      	mov	r4, r0
 8010e16:	f00c fd01 	bl	801d81c <_ZdlPvj>
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	bd10      	pop	{r4, pc}

08010e1e <_ZN8touchgfx9DragEventD0Ev>:
 8010e1e:	b510      	push	{r4, lr}
 8010e20:	2110      	movs	r1, #16
 8010e22:	4604      	mov	r4, r0
 8010e24:	f00c fcfa 	bl	801d81c <_ZdlPvj>
 8010e28:	4620      	mov	r0, r4
 8010e2a:	bd10      	pop	{r4, pc}

08010e2c <_ZN8touchgfx12GestureEventD0Ev>:
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	210c      	movs	r1, #12
 8010e30:	4604      	mov	r4, r0
 8010e32:	f00c fcf3 	bl	801d81c <_ZdlPvj>
 8010e36:	4620      	mov	r0, r4
 8010e38:	bd10      	pop	{r4, pc}
	...

08010e3c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8010e3c:	b530      	push	{r4, r5, lr}
 8010e3e:	460d      	mov	r5, r1
 8010e40:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010e42:	b087      	sub	sp, #28
 8010e44:	4604      	mov	r4, r0
 8010e46:	b301      	cbz	r1, 8010e8a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8010e48:	a801      	add	r0, sp, #4
 8010e4a:	f7ff ff66 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010e4e:	892a      	ldrh	r2, [r5, #8]
 8010e50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010e54:	7928      	ldrb	r0, [r5, #4]
 8010e56:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8010e5a:	f88d 0010 	strb.w	r0, [sp, #16]
 8010e5e:	1ad2      	subs	r2, r2, r3
 8010e60:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8010e62:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8010e64:	f8ad 1012 	strh.w	r1, [sp, #18]
 8010e68:	441a      	add	r2, r3
 8010e6a:	896b      	ldrh	r3, [r5, #10]
 8010e6c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8010e70:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010e74:	1b5b      	subs	r3, r3, r5
 8010e76:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8010e78:	442b      	add	r3, r5
 8010e7a:	4d05      	ldr	r5, [pc, #20]	; (8010e90 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8010e7c:	9503      	str	r5, [sp, #12]
 8010e7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010e82:	6803      	ldr	r3, [r0, #0]
 8010e84:	a903      	add	r1, sp, #12
 8010e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e88:	4798      	blx	r3
 8010e8a:	b007      	add	sp, #28
 8010e8c:	bd30      	pop	{r4, r5, pc}
 8010e8e:	bf00      	nop
 8010e90:	0802080c 	.word	0x0802080c

08010e94 <_ZNK8touchgfx4Rect9intersectEss>:
 8010e94:	b510      	push	{r4, lr}
 8010e96:	f9b0 3000 	ldrsh.w	r3, [r0]
 8010e9a:	428b      	cmp	r3, r1
 8010e9c:	dc10      	bgt.n	8010ec0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8010e9e:	8884      	ldrh	r4, [r0, #4]
 8010ea0:	4423      	add	r3, r4
 8010ea2:	b21b      	sxth	r3, r3
 8010ea4:	4299      	cmp	r1, r3
 8010ea6:	da0b      	bge.n	8010ec0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8010ea8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8010eac:	4293      	cmp	r3, r2
 8010eae:	dc07      	bgt.n	8010ec0 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8010eb0:	88c0      	ldrh	r0, [r0, #6]
 8010eb2:	4418      	add	r0, r3
 8010eb4:	b200      	sxth	r0, r0
 8010eb6:	4282      	cmp	r2, r0
 8010eb8:	bfac      	ite	ge
 8010eba:	2000      	movge	r0, #0
 8010ebc:	2001      	movlt	r0, #1
 8010ebe:	bd10      	pop	{r4, pc}
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	e7fc      	b.n	8010ebe <_ZNK8touchgfx4Rect9intersectEss+0x2a>

08010ec4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8010ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ec6:	460c      	mov	r4, r1
 8010ec8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8010eca:	b089      	sub	sp, #36	; 0x24
 8010ecc:	4605      	mov	r5, r0
 8010ece:	2900      	cmp	r1, #0
 8010ed0:	d054      	beq.n	8010f7c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb8>
 8010ed2:	4668      	mov	r0, sp
 8010ed4:	f7ff ff21 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010ed8:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 8010eda:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8010edc:	8922      	ldrh	r2, [r4, #8]
 8010ede:	88e1      	ldrh	r1, [r4, #6]
 8010ee0:	443a      	add	r2, r7
 8010ee2:	4431      	add	r1, r6
 8010ee4:	b212      	sxth	r2, r2
 8010ee6:	b209      	sxth	r1, r1
 8010ee8:	4668      	mov	r0, sp
 8010eea:	f7ff ffd3 	bl	8010e94 <_ZNK8touchgfx4Rect9intersectEss>
 8010eee:	b1d0      	cbz	r0, 8010f26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8010ef0:	89a2      	ldrh	r2, [r4, #12]
 8010ef2:	8961      	ldrh	r1, [r4, #10]
 8010ef4:	443a      	add	r2, r7
 8010ef6:	4431      	add	r1, r6
 8010ef8:	b212      	sxth	r2, r2
 8010efa:	b209      	sxth	r1, r1
 8010efc:	4668      	mov	r0, sp
 8010efe:	f7ff ffc9 	bl	8010e94 <_ZNK8touchgfx4Rect9intersectEss>
 8010f02:	4603      	mov	r3, r0
 8010f04:	b978      	cbnz	r0, 8010f26 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x62>
 8010f06:	4a1e      	ldr	r2, [pc, #120]	; (8010f80 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 8010f08:	9204      	str	r2, [sp, #16]
 8010f0a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010f10:	2202      	movs	r2, #2
 8010f12:	f88d 2014 	strb.w	r2, [sp, #20]
 8010f16:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010f1a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010f1e:	6803      	ldr	r3, [r0, #0]
 8010f20:	a904      	add	r1, sp, #16
 8010f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f24:	4798      	blx	r3
 8010f26:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8010f28:	a802      	add	r0, sp, #8
 8010f2a:	f7ff fef6 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010f2e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010f32:	88e0      	ldrh	r0, [r4, #6]
 8010f34:	8961      	ldrh	r1, [r4, #10]
 8010f36:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8010f3a:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8010f3e:	8923      	ldrh	r3, [r4, #8]
 8010f40:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8010f42:	7927      	ldrb	r7, [r4, #4]
 8010f44:	f88d 7014 	strb.w	r7, [sp, #20]
 8010f48:	1a80      	subs	r0, r0, r2
 8010f4a:	1a89      	subs	r1, r1, r2
 8010f4c:	89a2      	ldrh	r2, [r4, #12]
 8010f4e:	4c0d      	ldr	r4, [pc, #52]	; (8010f84 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 8010f50:	9404      	str	r4, [sp, #16]
 8010f52:	4460      	add	r0, ip
 8010f54:	eba3 030e 	sub.w	r3, r3, lr
 8010f58:	eba2 020e 	sub.w	r2, r2, lr
 8010f5c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8010f60:	4433      	add	r3, r6
 8010f62:	4461      	add	r1, ip
 8010f64:	4432      	add	r2, r6
 8010f66:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8010f68:	f8ad 101a 	strh.w	r1, [sp, #26]
 8010f6c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010f70:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010f74:	6803      	ldr	r3, [r0, #0]
 8010f76:	a904      	add	r1, sp, #16
 8010f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f7a:	4798      	blx	r3
 8010f7c:	b009      	add	sp, #36	; 0x24
 8010f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f80:	080207e4 	.word	0x080207e4
 8010f84:	080207f8 	.word	0x080207f8

08010f88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8010f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f8c:	f8d0 9030 	ldr.w	r9, [r0, #48]	; 0x30
 8010f90:	790b      	ldrb	r3, [r1, #4]
 8010f92:	b0a1      	sub	sp, #132	; 0x84
 8010f94:	4604      	mov	r4, r0
 8010f96:	460d      	mov	r5, r1
 8010f98:	f1b9 0f00 	cmp.w	r9, #0
 8010f9c:	d00f      	beq.n	8010fbe <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x36>
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f040 80a0 	bne.w	80110e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8010fa4:	b021      	add	sp, #132	; 0x84
 8010fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010faa:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8010fae:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8010fb2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8010fb6:	1d20      	adds	r0, r4, #4
 8010fb8:	f7fc fecc 	bl	800dd54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8010fbc:	e092      	b.n	80110e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x15c>
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d1f0      	bne.n	8010fa4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8010fc2:	4b5e      	ldr	r3, [pc, #376]	; (801113c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b4>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	f893 a049 	ldrb.w	sl, [r3, #73]	; 0x49
 8010fca:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 8010fce:	f1ba 0f03 	cmp.w	sl, #3
 8010fd2:	ddea      	ble.n	8010faa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x22>
 8010fd4:	f1ba 0f0c 	cmp.w	sl, #12
 8010fd8:	f04f 0303 	mov.w	r3, #3
 8010fdc:	bfdc      	itt	le
 8010fde:	f10a 32ff 	addle.w	r2, sl, #4294967295
 8010fe2:	fb92 f3f3 	sdivle	r3, r2, r3
 8010fe6:	9301      	str	r3, [sp, #4]
 8010fe8:	4b55      	ldr	r3, [pc, #340]	; (8011140 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1b8>)
 8010fea:	4956      	ldr	r1, [pc, #344]	; (8011144 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1bc>)
 8010fec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010ff0:	4b55      	ldr	r3, [pc, #340]	; (8011148 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c0>)
 8010ff2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ffa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8010ffe:	ab0e      	add	r3, sp, #56	; 0x38
 8011000:	2248      	movs	r2, #72	; 0x48
 8011002:	2600      	movs	r6, #0
 8011004:	4618      	mov	r0, r3
 8011006:	960a      	str	r6, [sp, #40]	; 0x28
 8011008:	f00c fcb2 	bl	801d970 <memcpy>
 801100c:	f04f 32ff 	mov.w	r2, #4294967295
 8011010:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8011014:	f8cd a008 	str.w	sl, [sp, #8]
 8011018:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801101c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011020:	b29b      	uxth	r3, r3
 8011022:	46b3      	mov	fp, r6
 8011024:	9303      	str	r3, [sp, #12]
 8011026:	2300      	movs	r3, #0
 8011028:	9309      	str	r3, [sp, #36]	; 0x24
 801102a:	9b07      	ldr	r3, [sp, #28]
 801102c:	9a03      	ldr	r2, [sp, #12]
 801102e:	f853 303b 	ldr.w	r3, [r3, fp, lsl #3]
 8011032:	88ef      	ldrh	r7, [r5, #6]
 8011034:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8011038:	fb13 f302 	smulbb	r3, r3, r2
 801103c:	b29b      	uxth	r3, r3
 801103e:	9304      	str	r3, [sp, #16]
 8011040:	9b07      	ldr	r3, [sp, #28]
 8011042:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011046:	a80a      	add	r0, sp, #40	; 0x28
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	fb13 f302 	smulbb	r3, r3, r2
 801104e:	b29b      	uxth	r3, r3
 8011050:	9305      	str	r3, [sp, #20]
 8011052:	9b04      	ldr	r3, [sp, #16]
 8011054:	441f      	add	r7, r3
 8011056:	9b05      	ldr	r3, [sp, #20]
 8011058:	4498      	add	r8, r3
 801105a:	b23f      	sxth	r7, r7
 801105c:	fa0f f888 	sxth.w	r8, r8
 8011060:	4642      	mov	r2, r8
 8011062:	4639      	mov	r1, r7
 8011064:	f7ff ff16 	bl	8010e94 <_ZNK8touchgfx4Rect9intersectEss>
 8011068:	b380      	cbz	r0, 80110cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801106a:	4639      	mov	r1, r7
 801106c:	ab09      	add	r3, sp, #36	; 0x24
 801106e:	4642      	mov	r2, r8
 8011070:	1d20      	adds	r0, r4, #4
 8011072:	f7fc fe6f 	bl	800dd54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011076:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011078:	b341      	cbz	r1, 80110cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801107a:	4549      	cmp	r1, r9
 801107c:	d026      	beq.n	80110cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 801107e:	a80c      	add	r0, sp, #48	; 0x30
 8011080:	f7ff fe4b 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011084:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8011088:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801108c:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8011090:	2002      	movs	r0, #2
 8011092:	fb92 f2f0 	sdiv	r2, r2, r0
 8011096:	440a      	add	r2, r1
 8011098:	1a99      	subs	r1, r3, r2
 801109a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801109e:	fb93 f3f0 	sdiv	r3, r3, r0
 80110a2:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 80110a6:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80110aa:	4403      	add	r3, r0
 80110ac:	1ad3      	subs	r3, r2, r3
 80110ae:	435b      	muls	r3, r3
 80110b0:	9a06      	ldr	r2, [sp, #24]
 80110b2:	fb01 3301 	mla	r3, r1, r1, r3
 80110b6:	4293      	cmp	r3, r2
 80110b8:	d208      	bcs.n	80110cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x144>
 80110ba:	9a04      	ldr	r2, [sp, #16]
 80110bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80110c0:	86a2      	strh	r2, [r4, #52]	; 0x34
 80110c2:	9a05      	ldr	r2, [sp, #20]
 80110c4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
 80110c8:	86e2      	strh	r2, [r4, #54]	; 0x36
 80110ca:	9306      	str	r3, [sp, #24]
 80110cc:	f10b 0b02 	add.w	fp, fp, #2
 80110d0:	f1bb 0f08 	cmp.w	fp, #8
 80110d4:	dda7      	ble.n	8011026 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80110d6:	9b02      	ldr	r3, [sp, #8]
 80110d8:	4453      	add	r3, sl
 80110da:	9302      	str	r3, [sp, #8]
 80110dc:	9b01      	ldr	r3, [sp, #4]
 80110de:	3601      	adds	r6, #1
 80110e0:	42b3      	cmp	r3, r6
 80110e2:	d199      	bne.n	8011018 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x90>
 80110e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80110e6:	2900      	cmp	r1, #0
 80110e8:	f43f af5c 	beq.w	8010fa4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 80110ec:	a80c      	add	r0, sp, #48	; 0x30
 80110ee:	f7ff fe14 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80110f2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 80110f6:	88ea      	ldrh	r2, [r5, #6]
 80110f8:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 80110fc:	7929      	ldrb	r1, [r5, #4]
 80110fe:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011106:	441a      	add	r2, r3
 8011108:	892b      	ldrh	r3, [r5, #8]
 801110a:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801110e:	1a1b      	subs	r3, r3, r0
 8011110:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8011112:	4403      	add	r3, r0
 8011114:	480d      	ldr	r0, [pc, #52]	; (801114c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c4>)
 8011116:	900e      	str	r0, [sp, #56]	; 0x38
 8011118:	2600      	movs	r6, #0
 801111a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801111c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011120:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 8011124:	6803      	ldr	r3, [r0, #0]
 8011126:	a90e      	add	r1, sp, #56	; 0x38
 8011128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801112a:	4798      	blx	r3
 801112c:	792b      	ldrb	r3, [r5, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	f43f af38 	beq.w	8010fa4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 8011134:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8011138:	e734      	b.n	8010fa4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c>
 801113a:	bf00      	nop
 801113c:	20009f08 	.word	0x20009f08
 8011140:	20009efc 	.word	0x20009efc
 8011144:	0801ed44 	.word	0x0801ed44
 8011148:	20009efe 	.word	0x20009efe
 801114c:	080207e4 	.word	0x080207e4

08011150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011152:	4604      	mov	r4, r0
 8011154:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011158:	3201      	adds	r2, #1
 801115a:	d112      	bne.n	8011182 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801115c:	6803      	ldr	r3, [r0, #0]
 801115e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011162:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011166:	f8ad 1004 	strh.w	r1, [sp, #4]
 801116a:	2500      	movs	r5, #0
 801116c:	9500      	str	r5, [sp, #0]
 801116e:	466d      	mov	r5, sp
 8011170:	4629      	mov	r1, r5
 8011172:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011176:	6a1b      	ldr	r3, [r3, #32]
 8011178:	4798      	blx	r3
 801117a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801117e:	e884 0003 	stmia.w	r4, {r0, r1}
 8011182:	4620      	mov	r0, r4
 8011184:	b003      	add	sp, #12
 8011186:	bd30      	pop	{r4, r5, pc}

08011188 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011188:	b513      	push	{r0, r1, r4, lr}
 801118a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801118e:	3301      	adds	r3, #1
 8011190:	4604      	mov	r4, r0
 8011192:	d109      	bne.n	80111a8 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011194:	4601      	mov	r1, r0
 8011196:	4668      	mov	r0, sp
 8011198:	f7ff fdbf 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801119c:	f8bd 3000 	ldrh.w	r3, [sp]
 80111a0:	8423      	strh	r3, [r4, #32]
 80111a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80111a6:	8463      	strh	r3, [r4, #34]	; 0x22
 80111a8:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80111ac:	b002      	add	sp, #8
 80111ae:	bd10      	pop	{r4, pc}

080111b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80111b0:	b513      	push	{r0, r1, r4, lr}
 80111b2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80111b6:	3301      	adds	r3, #1
 80111b8:	4604      	mov	r4, r0
 80111ba:	d109      	bne.n	80111d0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80111bc:	4601      	mov	r1, r0
 80111be:	4668      	mov	r0, sp
 80111c0:	f7ff fdab 	bl	8010d1a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111c4:	f8bd 3000 	ldrh.w	r3, [sp]
 80111c8:	8423      	strh	r3, [r4, #32]
 80111ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80111ce:	8463      	strh	r3, [r4, #34]	; 0x22
 80111d0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80111d4:	b002      	add	sp, #8
 80111d6:	bd10      	pop	{r4, pc}

080111d8 <_ZN8touchgfx6ScreenC1Ev>:
 80111d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111da:	4605      	mov	r5, r0
 80111dc:	4b17      	ldr	r3, [pc, #92]	; (801123c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80111de:	f845 3b04 	str.w	r3, [r5], #4
 80111e2:	2301      	movs	r3, #1
 80111e4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80111e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80111ec:	4b14      	ldr	r3, [pc, #80]	; (8011240 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80111ee:	4915      	ldr	r1, [pc, #84]	; (8011244 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80111f0:	f9b3 7000 	ldrsh.w	r7, [r3]
 80111f4:	4b14      	ldr	r3, [pc, #80]	; (8011248 <_ZN8touchgfx6ScreenC1Ev+0x70>)
 80111f6:	6041      	str	r1, [r0, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	8102      	strh	r2, [r0, #8]
 80111fc:	8142      	strh	r2, [r0, #10]
 80111fe:	8182      	strh	r2, [r0, #12]
 8011200:	81c2      	strh	r2, [r0, #14]
 8011202:	8202      	strh	r2, [r0, #16]
 8011204:	8242      	strh	r2, [r0, #18]
 8011206:	8282      	strh	r2, [r0, #20]
 8011208:	82c2      	strh	r2, [r0, #22]
 801120a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801120e:	6202      	str	r2, [r0, #32]
 8011210:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 8011214:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8011218:	6342      	str	r2, [r0, #52]	; 0x34
 801121a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801121e:	4611      	mov	r1, r2
 8011220:	4604      	mov	r4, r0
 8011222:	4628      	mov	r0, r5
 8011224:	f7f9 ff03 	bl	800b02e <_ZN8touchgfx8Drawable5setXYEss>
 8011228:	4639      	mov	r1, r7
 801122a:	4628      	mov	r0, r5
 801122c:	f7f9 ff1d 	bl	800b06a <_ZN8touchgfx8Drawable8setWidthEs>
 8011230:	4628      	mov	r0, r5
 8011232:	4631      	mov	r1, r6
 8011234:	f7f9 ff28 	bl	800b088 <_ZN8touchgfx8Drawable9setHeightEs>
 8011238:	4620      	mov	r0, r4
 801123a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801123c:	08020820 	.word	0x08020820
 8011240:	20009efc 	.word	0x20009efc
 8011244:	0801fa38 	.word	0x0801fa38
 8011248:	20009efe 	.word	0x20009efe

0801124c <_ZN8touchgfx6Screen4drawEv>:
 801124c:	b507      	push	{r0, r1, r2, lr}
 801124e:	4b09      	ldr	r3, [pc, #36]	; (8011274 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8011250:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011254:	4b08      	ldr	r3, [pc, #32]	; (8011278 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011256:	f8ad 2004 	strh.w	r2, [sp, #4]
 801125a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801125e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011262:	6803      	ldr	r3, [r0, #0]
 8011264:	2100      	movs	r1, #0
 8011266:	9100      	str	r1, [sp, #0]
 8011268:	689b      	ldr	r3, [r3, #8]
 801126a:	4669      	mov	r1, sp
 801126c:	4798      	blx	r3
 801126e:	b003      	add	sp, #12
 8011270:	f85d fb04 	ldr.w	pc, [sp], #4
 8011274:	20009efc 	.word	0x20009efc
 8011278:	20009efe 	.word	0x20009efe

0801127c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011280:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011284:	b089      	sub	sp, #36	; 0x24
 8011286:	4680      	mov	r8, r0
 8011288:	460c      	mov	r4, r1
 801128a:	4615      	mov	r5, r2
 801128c:	b16b      	cbz	r3, 80112aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801128e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011292:	b153      	cbz	r3, 80112aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011294:	4628      	mov	r0, r5
 8011296:	f7ff ff5b 	bl	8011150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801129a:	4621      	mov	r1, r4
 801129c:	f7fe ffe2 	bl	8010264 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80112a0:	69eb      	ldr	r3, [r5, #28]
 80112a2:	b928      	cbnz	r0, 80112b0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 80112a4:	461d      	mov	r5, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d1f4      	bne.n	8011294 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 80112aa:	b009      	add	sp, #36	; 0x24
 80112ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b0:	ae04      	add	r6, sp, #16
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d051      	beq.n	801135a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 80112b6:	682b      	ldr	r3, [r5, #0]
 80112b8:	4629      	mov	r1, r5
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	a802      	add	r0, sp, #8
 80112be:	4798      	blx	r3
 80112c0:	4628      	mov	r0, r5
 80112c2:	f7ff ff61 	bl	8011188 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80112c6:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80112ca:	4407      	add	r7, r0
 80112cc:	4628      	mov	r0, r5
 80112ce:	f7ff ff6f 	bl	80111b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80112d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80112d6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80112da:	f8ad 2014 	strh.w	r2, [sp, #20]
 80112de:	4418      	add	r0, r3
 80112e0:	4621      	mov	r1, r4
 80112e2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80112e6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80112ea:	b23f      	sxth	r7, r7
 80112ec:	4630      	mov	r0, r6
 80112ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112f2:	f8ad 7010 	strh.w	r7, [sp, #16]
 80112f6:	f7fc fddf 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 80112fa:	4628      	mov	r0, r5
 80112fc:	f7ff ff28 	bl	8011150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011300:	4602      	mov	r2, r0
 8011302:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011306:	ab06      	add	r3, sp, #24
 8011308:	e883 0003 	stmia.w	r3, {r0, r1}
 801130c:	4611      	mov	r1, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f7fc fdd2 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 8011314:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011318:	f9b4 1000 	ldrsh.w	r1, [r4]
 801131c:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011320:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011324:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8011328:	4299      	cmp	r1, r3
 801132a:	d10b      	bne.n	8011344 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801132c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011330:	4552      	cmp	r2, sl
 8011332:	d107      	bne.n	8011344 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 8011334:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011338:	455a      	cmp	r2, fp
 801133a:	d103      	bne.n	8011344 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xc8>
 801133c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011340:	454a      	cmp	r2, r9
 8011342:	d00a      	beq.n	801135a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8011344:	f1bb 0f00 	cmp.w	fp, #0
 8011348:	d002      	beq.n	8011350 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd4>
 801134a:	f1b9 0f00 	cmp.w	r9, #0
 801134e:	d12e      	bne.n	80113ae <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x132>
 8011350:	69ea      	ldr	r2, [r5, #28]
 8011352:	4621      	mov	r1, r4
 8011354:	4640      	mov	r0, r8
 8011356:	f7ff ff91 	bl	801127c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801135a:	4628      	mov	r0, r5
 801135c:	f7ff fef8 	bl	8011150 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011360:	6861      	ldr	r1, [r4, #4]
 8011362:	4602      	mov	r2, r0
 8011364:	6820      	ldr	r0, [r4, #0]
 8011366:	4633      	mov	r3, r6
 8011368:	c303      	stmia	r3!, {r0, r1}
 801136a:	4611      	mov	r1, r2
 801136c:	4630      	mov	r0, r6
 801136e:	f7fc fda3 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 8011372:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d097      	beq.n	80112aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801137a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d093      	beq.n	80112aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 8011382:	4628      	mov	r0, r5
 8011384:	f7ff ff00 	bl	8011188 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011388:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801138c:	1a18      	subs	r0, r3, r0
 801138e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011392:	4628      	mov	r0, r5
 8011394:	f7ff ff0c 	bl	80111b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011398:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801139c:	1a18      	subs	r0, r3, r0
 801139e:	f8ad 0012 	strh.w	r0, [sp, #18]
 80113a2:	682b      	ldr	r3, [r5, #0]
 80113a4:	4631      	mov	r1, r6
 80113a6:	689b      	ldr	r3, [r3, #8]
 80113a8:	4628      	mov	r0, r5
 80113aa:	4798      	blx	r3
 80113ac:	e77d      	b.n	80112aa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 80113ae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80113b2:	fa1f f08a 	uxth.w	r0, sl
 80113b6:	4552      	cmp	r2, sl
 80113b8:	9000      	str	r0, [sp, #0]
 80113ba:	da12      	bge.n	80113e2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x166>
 80113bc:	9301      	str	r3, [sp, #4]
 80113be:	9b00      	ldr	r3, [sp, #0]
 80113c0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80113c4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80113c8:	1a9a      	subs	r2, r3, r2
 80113ca:	f8ad 1010 	strh.w	r1, [sp, #16]
 80113ce:	f8ad 0014 	strh.w	r0, [sp, #20]
 80113d2:	f8ad 2016 	strh.w	r2, [sp, #22]
 80113d6:	69ea      	ldr	r2, [r5, #28]
 80113d8:	4631      	mov	r1, r6
 80113da:	4640      	mov	r0, r8
 80113dc:	f7ff ff4e 	bl	801127c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80113e0:	9b01      	ldr	r3, [sp, #4]
 80113e2:	f9b4 2000 	ldrsh.w	r2, [r4]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	b29f      	uxth	r7, r3
 80113ea:	da0d      	bge.n	8011408 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18c>
 80113ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 80113f0:	1aba      	subs	r2, r7, r2
 80113f2:	f8ad a012 	strh.w	sl, [sp, #18]
 80113f6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80113fa:	f8ad 9016 	strh.w	r9, [sp, #22]
 80113fe:	69ea      	ldr	r2, [r5, #28]
 8011400:	4631      	mov	r1, r6
 8011402:	4640      	mov	r0, r8
 8011404:	f7ff ff3a 	bl	801127c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011408:	8822      	ldrh	r2, [r4, #0]
 801140a:	88a3      	ldrh	r3, [r4, #4]
 801140c:	445f      	add	r7, fp
 801140e:	4413      	add	r3, r2
 8011410:	b29b      	uxth	r3, r3
 8011412:	b2bf      	uxth	r7, r7
 8011414:	b23a      	sxth	r2, r7
 8011416:	b219      	sxth	r1, r3
 8011418:	4291      	cmp	r1, r2
 801141a:	dd0d      	ble.n	8011438 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1bc>
 801141c:	1bdb      	subs	r3, r3, r7
 801141e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011422:	f8ad a012 	strh.w	sl, [sp, #18]
 8011426:	f8ad 3014 	strh.w	r3, [sp, #20]
 801142a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801142e:	69ea      	ldr	r2, [r5, #28]
 8011430:	4631      	mov	r1, r6
 8011432:	4640      	mov	r0, r8
 8011434:	f7ff ff22 	bl	801127c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011438:	88e2      	ldrh	r2, [r4, #6]
 801143a:	8863      	ldrh	r3, [r4, #2]
 801143c:	4413      	add	r3, r2
 801143e:	9a00      	ldr	r2, [sp, #0]
 8011440:	444a      	add	r2, r9
 8011442:	b29b      	uxth	r3, r3
 8011444:	fa1f f982 	uxth.w	r9, r2
 8011448:	fa0f f289 	sxth.w	r2, r9
 801144c:	b219      	sxth	r1, r3
 801144e:	428a      	cmp	r2, r1
 8011450:	da83      	bge.n	801135a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xde>
 8011452:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8011456:	f9b4 0000 	ldrsh.w	r0, [r4]
 801145a:	f8ad 1014 	strh.w	r1, [sp, #20]
 801145e:	eba3 0309 	sub.w	r3, r3, r9
 8011462:	f8ad 0010 	strh.w	r0, [sp, #16]
 8011466:	f8ad 2012 	strh.w	r2, [sp, #18]
 801146a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801146e:	69ea      	ldr	r2, [r5, #28]
 8011470:	4631      	mov	r1, r6
 8011472:	e76f      	b.n	8011354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd8>

08011474 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8011474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011476:	aa02      	add	r2, sp, #8
 8011478:	2300      	movs	r3, #0
 801147a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801147e:	4604      	mov	r4, r0
 8011480:	3004      	adds	r0, #4
 8011482:	460d      	mov	r5, r1
 8011484:	f7fc fdef 	bl	800e066 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8011488:	9a01      	ldr	r2, [sp, #4]
 801148a:	b11a      	cbz	r2, 8011494 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801148c:	4629      	mov	r1, r5
 801148e:	4620      	mov	r0, r4
 8011490:	f7ff fef4 	bl	801127c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011494:	b003      	add	sp, #12
 8011496:	bd30      	pop	{r4, r5, pc}

08011498 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8011498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801149a:	4602      	mov	r2, r0
 801149c:	4604      	mov	r4, r0
 801149e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80114a2:	460d      	mov	r5, r1
 80114a4:	6851      	ldr	r1, [r2, #4]
 80114a6:	466b      	mov	r3, sp
 80114a8:	c303      	stmia	r3!, {r0, r1}
 80114aa:	4629      	mov	r1, r5
 80114ac:	4668      	mov	r0, sp
 80114ae:	f7fc fd03 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 80114b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80114b6:	4669      	mov	r1, sp
 80114b8:	b123      	cbz	r3, 80114c4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 80114ba:	4620      	mov	r0, r4
 80114bc:	f7ff ffda 	bl	8011474 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80114c0:	b003      	add	sp, #12
 80114c2:	bd30      	pop	{r4, r5, pc}
 80114c4:	1d20      	adds	r0, r4, #4
 80114c6:	f7fc fd95 	bl	800dff4 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80114ca:	e7f9      	b.n	80114c0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

080114cc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80114cc:	680a      	ldr	r2, [r1, #0]
 80114ce:	460b      	mov	r3, r1
 80114d0:	6952      	ldr	r2, [r2, #20]
 80114d2:	1d01      	adds	r1, r0, #4
 80114d4:	4618      	mov	r0, r3
 80114d6:	4710      	bx	r2

080114d8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 80114d8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80114dc:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 80114e0:	4b03      	ldr	r3, [pc, #12]	; (80114f0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x18>)
 80114e2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80114e6:	bf08      	it	eq
 80114e8:	2300      	moveq	r3, #0
 80114ea:	4308      	orrs	r0, r1
 80114ec:	4318      	orrs	r0, r3
 80114ee:	4770      	bx	lr
 80114f0:	fffffe00 	.word	0xfffffe00

080114f4 <_ZN8touchgfx9GlyphNode6setTopEs>:
 80114f4:	7b43      	ldrb	r3, [r0, #13]
 80114f6:	7201      	strb	r1, [r0, #8]
 80114f8:	b289      	uxth	r1, r1
 80114fa:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 80114fe:	05ca      	lsls	r2, r1, #23
 8011500:	bf48      	it	mi
 8011502:	f043 0320 	orrmi.w	r3, r3, #32
 8011506:	7343      	strb	r3, [r0, #13]
 8011508:	058b      	lsls	r3, r1, #22
 801150a:	bf42      	ittt	mi
 801150c:	7b43      	ldrbmi	r3, [r0, #13]
 801150e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8011512:	7343      	strbmi	r3, [r0, #13]
 8011514:	4770      	bx	lr

08011516 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8011516:	b530      	push	{r4, r5, lr}
 8011518:	2500      	movs	r5, #0
 801151a:	2401      	movs	r4, #1
 801151c:	6843      	ldr	r3, [r0, #4]
 801151e:	b913      	cbnz	r3, 8011526 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011520:	6803      	ldr	r3, [r0, #0]
 8011522:	b1f3      	cbz	r3, 8011562 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8011524:	6043      	str	r3, [r0, #4]
 8011526:	7c03      	ldrb	r3, [r0, #16]
 8011528:	b143      	cbz	r3, 801153c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801152a:	68c3      	ldr	r3, [r0, #12]
 801152c:	b12b      	cbz	r3, 801153a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801152e:	881a      	ldrh	r2, [r3, #0]
 8011530:	b11a      	cbz	r2, 801153a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011532:	1c9a      	adds	r2, r3, #2
 8011534:	60c2      	str	r2, [r0, #12]
 8011536:	8818      	ldrh	r0, [r3, #0]
 8011538:	bd30      	pop	{r4, r5, pc}
 801153a:	7405      	strb	r5, [r0, #16]
 801153c:	6843      	ldr	r3, [r0, #4]
 801153e:	8819      	ldrh	r1, [r3, #0]
 8011540:	b179      	cbz	r1, 8011562 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x4c>
 8011542:	1c9a      	adds	r2, r3, #2
 8011544:	2902      	cmp	r1, #2
 8011546:	6042      	str	r2, [r0, #4]
 8011548:	d1f5      	bne.n	8011536 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801154a:	6883      	ldr	r3, [r0, #8]
 801154c:	1d1a      	adds	r2, r3, #4
 801154e:	6082      	str	r2, [r0, #8]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	60c3      	str	r3, [r0, #12]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d0e1      	beq.n	801151c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011558:	881b      	ldrh	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0de      	beq.n	801151c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801155e:	7404      	strb	r4, [r0, #16]
 8011560:	e7dc      	b.n	801151c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8011562:	2000      	movs	r0, #0
 8011564:	e7e8      	b.n	8011538 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08011566 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8011566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011568:	4605      	mov	r5, r0
 801156a:	4608      	mov	r0, r1
 801156c:	b1e9      	cbz	r1, 80115aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801156e:	f105 0440 	add.w	r4, r5, #64	; 0x40
 8011572:	460b      	mov	r3, r1
 8011574:	f101 0708 	add.w	r7, r1, #8
 8011578:	4622      	mov	r2, r4
 801157a:	6818      	ldr	r0, [r3, #0]
 801157c:	6859      	ldr	r1, [r3, #4]
 801157e:	4626      	mov	r6, r4
 8011580:	c603      	stmia	r6!, {r0, r1}
 8011582:	3308      	adds	r3, #8
 8011584:	42bb      	cmp	r3, r7
 8011586:	4634      	mov	r4, r6
 8011588:	d1f7      	bne.n	801157a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801158a:	6818      	ldr	r0, [r3, #0]
 801158c:	6030      	str	r0, [r6, #0]
 801158e:	889b      	ldrh	r3, [r3, #4]
 8011590:	80b3      	strh	r3, [r6, #4]
 8011592:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 8011596:	015b      	lsls	r3, r3, #5
 8011598:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801159c:	f895 3046 	ldrb.w	r3, [r5, #70]	; 0x46
 80115a0:	430b      	orrs	r3, r1
 80115a2:	425b      	negs	r3, r3
 80115a4:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80115a8:	4610      	mov	r0, r2
 80115aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080115ac <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	460c      	mov	r4, r1
 80115b0:	6811      	ldr	r1, [r2, #0]
 80115b2:	4610      	mov	r0, r2
 80115b4:	68cd      	ldr	r5, [r1, #12]
 80115b6:	4619      	mov	r1, r3
 80115b8:	47a8      	blx	r5
 80115ba:	2800      	cmp	r0, #0
 80115bc:	bf08      	it	eq
 80115be:	4620      	moveq	r0, r4
 80115c0:	bd38      	pop	{r3, r4, r5, pc}

080115c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80115c2:	b570      	push	{r4, r5, r6, lr}
 80115c4:	8810      	ldrh	r0, [r2, #0]
 80115c6:	4298      	cmp	r0, r3
 80115c8:	d817      	bhi.n	80115fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80115ca:	1e48      	subs	r0, r1, #1
 80115cc:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80115d0:	4298      	cmp	r0, r3
 80115d2:	d312      	bcc.n	80115fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80115d4:	2400      	movs	r4, #0
 80115d6:	428c      	cmp	r4, r1
 80115d8:	d20f      	bcs.n	80115fa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80115da:	1860      	adds	r0, r4, r1
 80115dc:	1040      	asrs	r0, r0, #1
 80115de:	0085      	lsls	r5, r0, #2
 80115e0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80115e4:	42b3      	cmp	r3, r6
 80115e6:	d902      	bls.n	80115ee <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80115e8:	3001      	adds	r0, #1
 80115ea:	b284      	uxth	r4, r0
 80115ec:	e7f3      	b.n	80115d6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80115ee:	d102      	bne.n	80115f6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 80115f0:	442a      	add	r2, r5
 80115f2:	8850      	ldrh	r0, [r2, #2]
 80115f4:	bd70      	pop	{r4, r5, r6, pc}
 80115f6:	b281      	uxth	r1, r0
 80115f8:	e7ed      	b.n	80115d6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80115fa:	2000      	movs	r0, #0
 80115fc:	e7fa      	b.n	80115f4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
	...

08011600 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 8011600:	b510      	push	{r4, lr}
 8011602:	8ac3      	ldrh	r3, [r0, #22]
 8011604:	428b      	cmp	r3, r1
 8011606:	d805      	bhi.n	8011614 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 8011608:	4b07      	ldr	r3, [pc, #28]	; (8011628 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801160a:	4a08      	ldr	r2, [pc, #32]	; (801162c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801160c:	4808      	ldr	r0, [pc, #32]	; (8011630 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801160e:	21fd      	movs	r1, #253	; 0xfd
 8011610:	f00c f930 	bl	801d874 <__assert_func>
 8011614:	8a83      	ldrh	r3, [r0, #20]
 8011616:	240a      	movs	r4, #10
 8011618:	4419      	add	r1, r3
 801161a:	fbb1 f3f4 	udiv	r3, r1, r4
 801161e:	fb04 1113 	mls	r1, r4, r3, r1
 8011622:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8011626:	bd10      	pop	{r4, pc}
 8011628:	0802086d 	.word	0x0802086d
 801162c:	08020c9c 	.word	0x08020c9c
 8011630:	0802087b 	.word	0x0802087b

08011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 8011634:	b508      	push	{r3, lr}
 8011636:	8ac3      	ldrh	r3, [r0, #22]
 8011638:	428b      	cmp	r3, r1
 801163a:	d805      	bhi.n	8011648 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801163c:	4b07      	ldr	r3, [pc, #28]	; (801165c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801163e:	4a08      	ldr	r2, [pc, #32]	; (8011660 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 8011640:	4808      	ldr	r0, [pc, #32]	; (8011664 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 8011642:	21d3      	movs	r1, #211	; 0xd3
 8011644:	f00c f916 	bl	801d874 <__assert_func>
 8011648:	8a83      	ldrh	r3, [r0, #20]
 801164a:	220a      	movs	r2, #10
 801164c:	4419      	add	r1, r3
 801164e:	fbb1 f3f2 	udiv	r3, r1, r2
 8011652:	fb02 1113 	mls	r1, r2, r3, r1
 8011656:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801165a:	bd08      	pop	{r3, pc}
 801165c:	0802086d 	.word	0x0802086d
 8011660:	080209ec 	.word	0x080209ec
 8011664:	0802087b 	.word	0x0802087b

08011668 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8011668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801166c:	4604      	mov	r4, r0
 801166e:	4688      	mov	r8, r1
 8011670:	4615      	mov	r5, r2
 8011672:	b94a      	cbnz	r2, 8011688 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20>
 8011674:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 8011678:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801167c:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8011680:	4691      	mov	r9, r2
 8011682:	4648      	mov	r0, r9
 8011684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011688:	f100 0640 	add.w	r6, r0, #64	; 0x40
 801168c:	8892      	ldrh	r2, [r2, #4]
 801168e:	462b      	mov	r3, r5
 8011690:	f105 0c08 	add.w	ip, r5, #8
 8011694:	46b3      	mov	fp, r6
 8011696:	6818      	ldr	r0, [r3, #0]
 8011698:	6859      	ldr	r1, [r3, #4]
 801169a:	4637      	mov	r7, r6
 801169c:	c703      	stmia	r7!, {r0, r1}
 801169e:	3308      	adds	r3, #8
 80116a0:	4563      	cmp	r3, ip
 80116a2:	463e      	mov	r6, r7
 80116a4:	d1f7      	bne.n	8011696 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2e>
 80116a6:	6818      	ldr	r0, [r3, #0]
 80116a8:	6038      	str	r0, [r7, #0]
 80116aa:	889b      	ldrh	r3, [r3, #4]
 80116ac:	80bb      	strh	r3, [r7, #4]
 80116ae:	f894 704d 	ldrb.w	r7, [r4, #77]	; 0x4d
 80116b2:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 80116b6:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 80116ba:	f40a 7180 	and.w	r1, sl, #256	; 0x100
 80116be:	18d3      	adds	r3, r2, r3
 80116c0:	f894 a047 	ldrb.w	sl, [r4, #71]	; 0x47
 80116c4:	b298      	uxth	r0, r3
 80116c6:	ea4a 0a01 	orr.w	sl, sl, r1
 80116ca:	281d      	cmp	r0, #29
 80116cc:	fa1f f68a 	uxth.w	r6, sl
 80116d0:	46d9      	mov	r9, fp
 80116d2:	d842      	bhi.n	801175a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 80116d4:	2301      	movs	r3, #1
 80116d6:	4950      	ldr	r1, [pc, #320]	; (8011818 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b0>)
 80116d8:	4083      	lsls	r3, r0
 80116da:	420b      	tst	r3, r1
 80116dc:	ea4f 0aea 	mov.w	sl, sl, asr #3
 80116e0:	d114      	bne.n	801170c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80116e2:	f413 7f60 	tst.w	r3, #896	; 0x380
 80116e6:	d03c      	beq.n	8011762 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfa>
 80116e8:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80116ec:	fa1f fa8a 	uxth.w	sl, sl
 80116f0:	eba1 010a 	sub.w	r1, r1, sl
 80116f4:	4658      	mov	r0, fp
 80116f6:	b209      	sxth	r1, r1
 80116f8:	f7ff fefc 	bl	80114f4 <_ZN8touchgfx9GlyphNode6setTopEs>
 80116fc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8011700:	1b86      	subs	r6, r0, r6
 8011702:	eba6 0a0a 	sub.w	sl, r6, sl
 8011706:	f8a4 a050 	strh.w	sl, [r4, #80]	; 0x50
 801170a:	e7ba      	b.n	8011682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801170c:	2100      	movs	r1, #0
 801170e:	f104 001a 	add.w	r0, r4, #26
 8011712:	f7ff ff8f 	bl	8011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8011716:	f640 6333 	movw	r3, #3635	; 0xe33
 801171a:	4298      	cmp	r0, r3
 801171c:	4601      	mov	r1, r0
 801171e:	d10a      	bne.n	8011736 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xce>
 8011720:	f8d8 3000 	ldr.w	r3, [r8]
 8011724:	4640      	mov	r0, r8
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	4798      	blx	r3
 801172a:	7b41      	ldrb	r1, [r0, #13]
 801172c:	7a00      	ldrb	r0, [r0, #8]
 801172e:	f7ff fed3 	bl	80114d8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8011732:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 8011736:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801173a:	4431      	add	r1, r6
 801173c:	4451      	add	r1, sl
 801173e:	b209      	sxth	r1, r1
 8011740:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 8011744:	4658      	mov	r0, fp
 8011746:	f7ff fed5 	bl	80114f4 <_ZN8touchgfx9GlyphNode6setTopEs>
 801174a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801174e:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 8011752:	1a9b      	subs	r3, r3, r2
 8011754:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 8011758:	e793      	b.n	8011682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801175a:	f640 631b 	movw	r3, #3611	; 0xe1b
 801175e:	429a      	cmp	r2, r3
 8011760:	d005      	beq.n	801176e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x106>
 8011762:	f022 0302 	bic.w	r3, r2, #2
 8011766:	f640 611d 	movw	r1, #3613	; 0xe1d
 801176a:	428b      	cmp	r3, r1
 801176c:	d119      	bne.n	80117a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801176e:	1e53      	subs	r3, r2, #1
 8011770:	b29b      	uxth	r3, r3
 8011772:	4642      	mov	r2, r8
 8011774:	4629      	mov	r1, r5
 8011776:	4620      	mov	r0, r4
 8011778:	f7ff ff18 	bl	80115ac <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801177c:	7b41      	ldrb	r1, [r0, #13]
 801177e:	7a00      	ldrb	r0, [r0, #8]
 8011780:	f7ff feaa 	bl	80114d8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 8011784:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 8011788:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801178c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011790:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011794:	4313      	orrs	r3, r2
 8011796:	115a      	asrs	r2, r3, #5
 8011798:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801179c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 80117a0:	e02d      	b.n	80117fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x196>
 80117a2:	4639      	mov	r1, r7
 80117a4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 80117a8:	f7ff fe96 	bl	80114d8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 80117ac:	f640 6109 	movw	r1, #3593	; 0xe09
 80117b0:	f022 0310 	bic.w	r3, r2, #16
 80117b4:	428b      	cmp	r3, r1
 80117b6:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 80117ba:	d003      	beq.n	80117c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15c>
 80117bc:	f640 6313 	movw	r3, #3603	; 0xe13
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d126      	bne.n	8011812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1aa>
 80117c4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80117c8:	b27f      	sxtb	r7, r7
 80117ca:	f407 7780 	and.w	r7, r7, #256	; 0x100
 80117ce:	431f      	orrs	r7, r3
 80117d0:	f640 6313 	movw	r3, #3603	; 0xe13
 80117d4:	429a      	cmp	r2, r3
 80117d6:	bf1a      	itte	ne
 80117d8:	f102 33ff 	addne.w	r3, r2, #4294967295
 80117dc:	b29b      	uxthne	r3, r3
 80117de:	f640 630c 	movweq	r3, #3596	; 0xe0c
 80117e2:	4642      	mov	r2, r8
 80117e4:	4629      	mov	r1, r5
 80117e6:	4620      	mov	r0, r4
 80117e8:	f7ff fee0 	bl	80115ac <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80117ec:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80117f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80117f4:	7a83      	ldrb	r3, [r0, #10]
 80117f6:	4313      	orrs	r3, r2
 80117f8:	1aff      	subs	r7, r7, r3
 80117fa:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
 80117fe:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8011802:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8011806:	f7ff fe67 	bl	80114d8 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801180a:	1b80      	subs	r0, r0, r6
 801180c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 8011810:	e737      	b.n	8011682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8011812:	2300      	movs	r3, #0
 8011814:	e7c2      	b.n	801179c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x134>
 8011816:	bf00      	nop
 8011818:	3fc00079 	.word	0x3fc00079

0801181c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801181c:	3a01      	subs	r2, #1
 801181e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011822:	b292      	uxth	r2, r2
 8011824:	460c      	mov	r4, r1
 8011826:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801182a:	42b2      	cmp	r2, r6
 801182c:	d018      	beq.n	8011860 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x44>
 801182e:	8b01      	ldrh	r1, [r0, #24]
 8011830:	f834 5b02 	ldrh.w	r5, [r4], #2
 8011834:	4291      	cmp	r1, r2
 8011836:	d805      	bhi.n	8011844 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x28>
 8011838:	4b14      	ldr	r3, [pc, #80]	; (801188c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x70>)
 801183a:	4a15      	ldr	r2, [pc, #84]	; (8011890 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801183c:	4815      	ldr	r0, [pc, #84]	; (8011894 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 801183e:	21d3      	movs	r1, #211	; 0xd3
 8011840:	f00c f818 	bl	801d874 <__assert_func>
 8011844:	8ac1      	ldrh	r1, [r0, #22]
 8011846:	4411      	add	r1, r2
 8011848:	f001 0101 	and.w	r1, r1, #1
 801184c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011850:	3a01      	subs	r2, #1
 8011852:	8a49      	ldrh	r1, [r1, #18]
 8011854:	428d      	cmp	r5, r1
 8011856:	b292      	uxth	r2, r2
 8011858:	d0e7      	beq.n	801182a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xe>
 801185a:	2000      	movs	r0, #0
 801185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011860:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 8011864:	2600      	movs	r6, #0
 8011866:	441f      	add	r7, r3
 8011868:	f100 051a 	add.w	r5, r0, #26
 801186c:	b2b1      	uxth	r1, r6
 801186e:	42b9      	cmp	r1, r7
 8011870:	da09      	bge.n	8011886 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6a>
 8011872:	4628      	mov	r0, r5
 8011874:	f7ff fede 	bl	8011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8011878:	f834 8016 	ldrh.w	r8, [r4, r6, lsl #1]
 801187c:	4540      	cmp	r0, r8
 801187e:	f106 0601 	add.w	r6, r6, #1
 8011882:	d0f3      	beq.n	801186c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x50>
 8011884:	e7e9      	b.n	801185a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 8011886:	2001      	movs	r0, #1
 8011888:	e7e8      	b.n	801185c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801188a:	bf00      	nop
 801188c:	0802086d 	.word	0x0802086d
 8011890:	08020dfc 	.word	0x08020dfc
 8011894:	0802087b 	.word	0x0802087b

08011898 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 8011898:	b538      	push	{r3, r4, r5, lr}
 801189a:	8ac3      	ldrh	r3, [r0, #22]
 801189c:	428b      	cmp	r3, r1
 801189e:	d205      	bcs.n	80118ac <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 80118a0:	4b08      	ldr	r3, [pc, #32]	; (80118c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 80118a2:	4a09      	ldr	r2, [pc, #36]	; (80118c8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 80118a4:	4809      	ldr	r0, [pc, #36]	; (80118cc <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 80118a6:	21d8      	movs	r1, #216	; 0xd8
 80118a8:	f00b ffe4 	bl	801d874 <__assert_func>
 80118ac:	8a82      	ldrh	r2, [r0, #20]
 80118ae:	250a      	movs	r5, #10
 80118b0:	440a      	add	r2, r1
 80118b2:	1a5b      	subs	r3, r3, r1
 80118b4:	fbb2 f4f5 	udiv	r4, r2, r5
 80118b8:	fb05 2214 	mls	r2, r5, r4, r2
 80118bc:	8282      	strh	r2, [r0, #20]
 80118be:	82c3      	strh	r3, [r0, #22]
 80118c0:	bd38      	pop	{r3, r4, r5, pc}
 80118c2:	bf00      	nop
 80118c4:	08020861 	.word	0x08020861
 80118c8:	08020c18 	.word	0x08020c18
 80118cc:	0802087b 	.word	0x0802087b

080118d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 80118d0:	b538      	push	{r3, r4, r5, lr}
 80118d2:	8ac3      	ldrh	r3, [r0, #22]
 80118d4:	2b09      	cmp	r3, #9
 80118d6:	d905      	bls.n	80118e4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 80118d8:	4b08      	ldr	r3, [pc, #32]	; (80118fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 80118da:	4a09      	ldr	r2, [pc, #36]	; (8011900 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 80118dc:	4809      	ldr	r0, [pc, #36]	; (8011904 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 80118de:	21f7      	movs	r1, #247	; 0xf7
 80118e0:	f00b ffc8 	bl	801d874 <__assert_func>
 80118e4:	8a82      	ldrh	r2, [r0, #20]
 80118e6:	250a      	movs	r5, #10
 80118e8:	441a      	add	r2, r3
 80118ea:	fbb2 f4f5 	udiv	r4, r2, r5
 80118ee:	fb05 2214 	mls	r2, r5, r4, r2
 80118f2:	3301      	adds	r3, #1
 80118f4:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 80118f8:	82c3      	strh	r3, [r0, #22]
 80118fa:	bd38      	pop	{r3, r4, r5, pc}
 80118fc:	08020855 	.word	0x08020855
 8011900:	08020b69 	.word	0x08020b69
 8011904:	0802087b 	.word	0x0802087b

08011908 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8011908:	b538      	push	{r3, r4, r5, lr}
 801190a:	4604      	mov	r4, r0
 801190c:	f100 051a 	add.w	r5, r0, #26
 8011910:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011912:	2b0a      	cmp	r3, #10
 8011914:	d01c      	beq.n	8011950 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8011916:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8011918:	b962      	cbnz	r2, 8011934 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801191a:	f104 051a 	add.w	r5, r4, #26
 801191e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011920:	2b0a      	cmp	r3, #10
 8011922:	d015      	beq.n	8011950 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 8011924:	4620      	mov	r0, r4
 8011926:	f7ff fdf6 	bl	8011516 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801192a:	4601      	mov	r1, r0
 801192c:	4628      	mov	r0, r5
 801192e:	f7ff ffcf 	bl	80118d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 8011932:	e7f4      	b.n	801191e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 8011934:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8011936:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801193a:	3301      	adds	r3, #1
 801193c:	f003 0301 	and.w	r3, r3, #1
 8011940:	3a01      	subs	r2, #1
 8011942:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 8011944:	86e3      	strh	r3, [r4, #54]	; 0x36
 8011946:	8722      	strh	r2, [r4, #56]	; 0x38
 8011948:	4628      	mov	r0, r5
 801194a:	f7ff ffc1 	bl	80118d0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801194e:	e7df      	b.n	8011910 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 8011950:	bd38      	pop	{r3, r4, r5, pc}
	...

08011954 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 8011954:	2300      	movs	r3, #0
 8011956:	b510      	push	{r4, lr}
 8011958:	6043      	str	r3, [r0, #4]
 801195a:	60c3      	str	r3, [r0, #12]
 801195c:	7403      	strb	r3, [r0, #16]
 801195e:	8603      	strh	r3, [r0, #48]	; 0x30
 8011960:	8303      	strh	r3, [r0, #24]
 8011962:	8703      	strh	r3, [r0, #56]	; 0x38
 8011964:	4604      	mov	r4, r0
 8011966:	f7ff ffcf 	bl	8011908 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801196a:	4a0a      	ldr	r2, [pc, #40]	; (8011994 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801196c:	6813      	ldr	r3, [r2, #0]
 801196e:	4611      	mov	r1, r2
 8011970:	b913      	cbnz	r3, 8011978 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 8011972:	6852      	ldr	r2, [r2, #4]
 8011974:	07d0      	lsls	r0, r2, #31
 8011976:	d50b      	bpl.n	8011990 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3c>
 8011978:	6849      	ldr	r1, [r1, #4]
 801197a:	104a      	asrs	r2, r1, #1
 801197c:	07c9      	lsls	r1, r1, #31
 801197e:	eb04 0002 	add.w	r0, r4, r2
 8011982:	bf48      	it	mi
 8011984:	58a2      	ldrmi	r2, [r4, r2]
 8011986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801198a:	bf48      	it	mi
 801198c:	58d3      	ldrmi	r3, [r2, r3]
 801198e:	4718      	bx	r3
 8011990:	bd10      	pop	{r4, pc}
 8011992:	bf00      	nop
 8011994:	20008f24 	.word	0x20008f24

08011998 <_ZN8touchgfx12TextProviderC1Ev>:
 8011998:	b510      	push	{r4, lr}
 801199a:	2300      	movs	r3, #0
 801199c:	2201      	movs	r2, #1
 801199e:	4604      	mov	r4, r0
 80119a0:	e9c0 3300 	strd	r3, r3, [r0]
 80119a4:	60c3      	str	r3, [r0, #12]
 80119a6:	7403      	strb	r3, [r0, #16]
 80119a8:	82c3      	strh	r3, [r0, #22]
 80119aa:	8303      	strh	r3, [r0, #24]
 80119ac:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80119ae:	8603      	strh	r3, [r0, #48]	; 0x30
 80119b0:	86c3      	strh	r3, [r0, #54]	; 0x36
 80119b2:	8703      	strh	r3, [r0, #56]	; 0x38
 80119b4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80119b6:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 80119ba:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 80119be:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 80119c2:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 80119c6:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 80119ca:	f7ff ffc3 	bl	8011954 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80119ce:	4620      	mov	r0, r4
 80119d0:	bd10      	pop	{r4, pc}

080119d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 80119d2:	b410      	push	{r4}
 80119d4:	6082      	str	r2, [r0, #8]
 80119d6:	6001      	str	r1, [r0, #0]
 80119d8:	63c3      	str	r3, [r0, #60]	; 0x3c
 80119da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119de:	f7ff bfb9 	b.w	8011954 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

080119e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 80119e4:	b508      	push	{r3, lr}
 80119e6:	88c2      	ldrh	r2, [r0, #6]
 80119e8:	440a      	add	r2, r1
 80119ea:	2a02      	cmp	r2, #2
 80119ec:	dd05      	ble.n	80119fa <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 80119ee:	4b06      	ldr	r3, [pc, #24]	; (8011a08 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 80119f0:	4a06      	ldr	r2, [pc, #24]	; (8011a0c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 80119f2:	4807      	ldr	r0, [pc, #28]	; (8011a10 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 80119f4:	21ec      	movs	r1, #236	; 0xec
 80119f6:	f00b ff3d 	bl	801d874 <__assert_func>
 80119fa:	8883      	ldrh	r3, [r0, #4]
 80119fc:	80c2      	strh	r2, [r0, #6]
 80119fe:	1a59      	subs	r1, r3, r1
 8011a00:	f001 0101 	and.w	r1, r1, #1
 8011a04:	8081      	strh	r1, [r0, #4]
 8011a06:	bd08      	pop	{r3, pc}
 8011a08:	080208a7 	.word	0x080208a7
 8011a0c:	08020d75 	.word	0x08020d75
 8011a10:	0802087b 	.word	0x0802087b

08011a14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 8011a14:	b508      	push	{r3, lr}
 8011a16:	88c3      	ldrh	r3, [r0, #6]
 8011a18:	428b      	cmp	r3, r1
 8011a1a:	d805      	bhi.n	8011a28 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 8011a1c:	4b06      	ldr	r3, [pc, #24]	; (8011a38 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 8011a1e:	4a07      	ldr	r2, [pc, #28]	; (8011a3c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 8011a20:	4807      	ldr	r0, [pc, #28]	; (8011a40 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 8011a22:	21fd      	movs	r1, #253	; 0xfd
 8011a24:	f00b ff26 	bl	801d874 <__assert_func>
 8011a28:	8883      	ldrh	r3, [r0, #4]
 8011a2a:	4419      	add	r1, r3
 8011a2c:	f001 0101 	and.w	r1, r1, #1
 8011a30:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 8011a34:	bd08      	pop	{r3, pc}
 8011a36:	bf00      	nop
 8011a38:	0802086d 	.word	0x0802086d
 8011a3c:	08020ecd 	.word	0x08020ecd
 8011a40:	0802087b 	.word	0x0802087b

08011a44 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8011a44:	b570      	push	{r4, r5, r6, lr}
 8011a46:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 8011a48:	4604      	mov	r4, r0
 8011a4a:	b92a      	cbnz	r2, 8011a58 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 8011a4c:	4b12      	ldr	r3, [pc, #72]	; (8011a98 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 8011a4e:	4a13      	ldr	r2, [pc, #76]	; (8011a9c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 8011a50:	4813      	ldr	r0, [pc, #76]	; (8011aa0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 8011a52:	21de      	movs	r1, #222	; 0xde
 8011a54:	f00b ff0e 	bl	801d874 <__assert_func>
 8011a58:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8011a5a:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8011a5e:	260a      	movs	r6, #10
 8011a60:	3301      	adds	r3, #1
 8011a62:	8b4d      	ldrh	r5, [r1, #26]
 8011a64:	fbb3 f1f6 	udiv	r1, r3, r6
 8011a68:	3a01      	subs	r2, #1
 8011a6a:	fb06 3311 	mls	r3, r6, r1, r3
 8011a6e:	8602      	strh	r2, [r0, #48]	; 0x30
 8011a70:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8011a72:	f7ff ff49 	bl	8011908 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011a76:	8b23      	ldrh	r3, [r4, #24]
 8011a78:	2b02      	cmp	r3, #2
 8011a7a:	bf04      	itt	eq
 8011a7c:	2301      	moveq	r3, #1
 8011a7e:	8323      	strheq	r3, [r4, #24]
 8011a80:	3412      	adds	r4, #18
 8011a82:	4620      	mov	r0, r4
 8011a84:	2101      	movs	r1, #1
 8011a86:	f7ff ffad 	bl	80119e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	462a      	mov	r2, r5
 8011a8e:	2100      	movs	r1, #0
 8011a90:	f7ff ffc0 	bl	8011a14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8011a94:	4628      	mov	r0, r5
 8011a96:	bd70      	pop	{r4, r5, r6, pc}
 8011a98:	0802084c 	.word	0x0802084c
 8011a9c:	08020abe 	.word	0x08020abe
 8011aa0:	0802087b 	.word	0x0802087b

08011aa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8011aa4:	428a      	cmp	r2, r1
 8011aa6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aaa:	4604      	mov	r4, r0
 8011aac:	460e      	mov	r6, r1
 8011aae:	4615      	mov	r5, r2
 8011ab0:	469a      	mov	sl, r3
 8011ab2:	d92b      	bls.n	8011b0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 8011ab4:	1a57      	subs	r7, r2, r1
 8011ab6:	b2bf      	uxth	r7, r7
 8011ab8:	f04f 0800 	mov.w	r8, #0
 8011abc:	f100 0932 	add.w	r9, r0, #50	; 0x32
 8011ac0:	f04f 0b0a 	mov.w	fp, #10
 8011ac4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011ac6:	b92b      	cbnz	r3, 8011ad4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x30>
 8011ac8:	4b24      	ldr	r3, [pc, #144]	; (8011b5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 8011aca:	4a25      	ldr	r2, [pc, #148]	; (8011b60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 8011acc:	21e6      	movs	r1, #230	; 0xe6
 8011ace:	4825      	ldr	r0, [pc, #148]	; (8011b64 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 8011ad0:	f00b fed0 	bl	801d874 <__assert_func>
 8011ad4:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	441a      	add	r2, r3
 8011adc:	8623      	strh	r3, [r4, #48]	; 0x30
 8011ade:	fbb2 f3fb 	udiv	r3, r2, fp
 8011ae2:	fb0b 2313 	mls	r3, fp, r3, r2
 8011ae6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011aea:	2101      	movs	r1, #1
 8011aec:	8b5a      	ldrh	r2, [r3, #26]
 8011aee:	9201      	str	r2, [sp, #4]
 8011af0:	4648      	mov	r0, r9
 8011af2:	f7ff ff77 	bl	80119e4 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 8011af6:	f108 0801 	add.w	r8, r8, #1
 8011afa:	9a01      	ldr	r2, [sp, #4]
 8011afc:	2100      	movs	r1, #0
 8011afe:	4648      	mov	r0, r9
 8011b00:	f7ff ff88 	bl	8011a14 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 8011b04:	fa1f f388 	uxth.w	r3, r8
 8011b08:	429f      	cmp	r7, r3
 8011b0a:	d8db      	bhi.n	8011ac4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x20>
 8011b0c:	f104 071a 	add.w	r7, r4, #26
 8011b10:	4631      	mov	r1, r6
 8011b12:	4638      	mov	r0, r7
 8011b14:	f7ff fec0 	bl	8011898 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 8011b18:	260a      	movs	r6, #10
 8011b1a:	b1c5      	cbz	r5, 8011b4e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8011b1c:	3d01      	subs	r5, #1
 8011b1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8011b20:	b2ad      	uxth	r5, r5
 8011b22:	2b09      	cmp	r3, #9
 8011b24:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 8011b28:	d903      	bls.n	8011b32 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 8011b2a:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 8011b2c:	4a0f      	ldr	r2, [pc, #60]	; (8011b6c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 8011b2e:	21ec      	movs	r1, #236	; 0xec
 8011b30:	e7cd      	b.n	8011ace <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2a>
 8011b32:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8011b34:	3109      	adds	r1, #9
 8011b36:	3301      	adds	r3, #1
 8011b38:	fbb1 f0f6 	udiv	r0, r1, r6
 8011b3c:	fb06 1110 	mls	r1, r6, r0, r1
 8011b40:	85e1      	strh	r1, [r4, #46]	; 0x2e
 8011b42:	8623      	strh	r3, [r4, #48]	; 0x30
 8011b44:	2100      	movs	r1, #0
 8011b46:	4638      	mov	r0, r7
 8011b48:	f7ff fd5a 	bl	8011600 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011b4c:	e7e5      	b.n	8011b1a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 8011b4e:	4620      	mov	r0, r4
 8011b50:	b003      	add	sp, #12
 8011b52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b56:	f7ff bed7 	b.w	8011908 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011b5a:	bf00      	nop
 8011b5c:	0802084c 	.word	0x0802084c
 8011b60:	08020942 	.word	0x08020942
 8011b64:	0802087b 	.word	0x0802087b
 8011b68:	080208a7 	.word	0x080208a7
 8011b6c:	080208ba 	.word	0x080208ba

08011b70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8011b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b74:	4605      	mov	r5, r0
 8011b76:	4616      	mov	r6, r2
 8011b78:	1c8c      	adds	r4, r1, #2
 8011b7a:	8809      	ldrh	r1, [r1, #0]
 8011b7c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8011b80:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8011b84:	42b3      	cmp	r3, r6
 8011b86:	d124      	bne.n	8011bd2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8011b88:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8011b8c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8011b90:	f001 070f 	and.w	r7, r1, #15
 8011b94:	f8cd 8000 	str.w	r8, [sp]
 8011b98:	464b      	mov	r3, r9
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	4621      	mov	r1, r4
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	f7ff fe3c 	bl	801181c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8011ba4:	4683      	mov	fp, r0
 8011ba6:	b168      	cbz	r0, 8011bc4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8011ba8:	eb0a 0109 	add.w	r1, sl, r9
 8011bac:	4441      	add	r1, r8
 8011bae:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8011bb2:	463a      	mov	r2, r7
 8011bb4:	4649      	mov	r1, r9
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	f7ff ff74 	bl	8011aa4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8011bbc:	4658      	mov	r0, fp
 8011bbe:	b003      	add	sp, #12
 8011bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc4:	eb07 010a 	add.w	r1, r7, sl
 8011bc8:	4449      	add	r1, r9
 8011bca:	4441      	add	r1, r8
 8011bcc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8011bd0:	e7d2      	b.n	8011b78 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8011bd2:	f04f 0b00 	mov.w	fp, #0
 8011bd6:	e7f1      	b.n	8011bbc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08011bd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8011bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bdc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8011bde:	886f      	ldrh	r7, [r5, #2]
 8011be0:	4604      	mov	r4, r0
 8011be2:	087f      	lsrs	r7, r7, #1
 8011be4:	260b      	movs	r6, #11
 8011be6:	f100 091a 	add.w	r9, r0, #26
 8011bea:	3e01      	subs	r6, #1
 8011bec:	d013      	beq.n	8011c16 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8011bee:	2100      	movs	r1, #0
 8011bf0:	4648      	mov	r0, r9
 8011bf2:	f7ff fd1f 	bl	8011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8011bf6:	462a      	mov	r2, r5
 8011bf8:	4680      	mov	r8, r0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	4639      	mov	r1, r7
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f7ff fcdf 	bl	80115c2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8011c04:	b138      	cbz	r0, 8011c16 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 8011c06:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8011c0a:	4642      	mov	r2, r8
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	f7ff ffaf 	bl	8011b70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d1e9      	bne.n	8011bea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 8011c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	4b1e      	ldr	r3, [pc, #120]	; (8011c98 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8011c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c24:	4604      	mov	r4, r0
 8011c26:	f003 0501 	and.w	r5, r3, #1
 8011c2a:	b902      	cbnz	r2, 8011c2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
 8011c2c:	b165      	cbz	r5, 8011c48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2c>
 8011c2e:	105b      	asrs	r3, r3, #1
 8011c30:	f104 061a 	add.w	r6, r4, #26
 8011c34:	18e0      	adds	r0, r4, r3
 8011c36:	b10d      	cbz	r5, 8011c3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
 8011c38:	58e3      	ldr	r3, [r4, r3]
 8011c3a:	589a      	ldr	r2, [r3, r2]
 8011c3c:	4790      	blx	r2
 8011c3e:	2100      	movs	r1, #0
 8011c40:	4602      	mov	r2, r0
 8011c42:	4630      	mov	r0, r6
 8011c44:	f7ff fcdc 	bl	8011600 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011c48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011c4a:	b303      	cbz	r3, 8011c8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8011c4c:	f104 051a 	add.w	r5, r4, #26
 8011c50:	2100      	movs	r1, #0
 8011c52:	4628      	mov	r0, r5
 8011c54:	f7ff fcee 	bl	8011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8011c58:	b1c8      	cbz	r0, 8011c8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8011c5a:	4620      	mov	r0, r4
 8011c5c:	f7ff ffbc 	bl	8011bd8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8011c60:	2101      	movs	r1, #1
 8011c62:	4628      	mov	r0, r5
 8011c64:	f7ff fce6 	bl	8011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8011c68:	f640 133f 	movw	r3, #2367	; 0x93f
 8011c6c:	4298      	cmp	r0, r3
 8011c6e:	4606      	mov	r6, r0
 8011c70:	d10d      	bne.n	8011c8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x72>
 8011c72:	2100      	movs	r1, #0
 8011c74:	4628      	mov	r0, r5
 8011c76:	f7ff fcdd 	bl	8011634 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 8011c7a:	2101      	movs	r1, #1
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f7ff fcbe 	bl	8011600 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011c84:	4632      	mov	r2, r6
 8011c86:	2100      	movs	r1, #0
 8011c88:	4628      	mov	r0, r5
 8011c8a:	f7ff fcb9 	bl	8011600 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 8011c8e:	4620      	mov	r0, r4
 8011c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c94:	f7ff bed6 	b.w	8011a44 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011c98:	20008f2c 	.word	0x20008f2c

08011c9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8011c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9e:	4617      	mov	r7, r2
 8011ca0:	461e      	mov	r6, r3
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	f7ff ffba 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	4604      	mov	r4, r0
 8011cac:	68db      	ldr	r3, [r3, #12]
 8011cae:	4601      	mov	r1, r0
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	4798      	blx	r3
 8011cb4:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	2b7f      	cmp	r3, #127	; 0x7f
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	6030      	str	r0, [r6, #0]
 8011cc0:	d813      	bhi.n	8011cea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4e>
 8011cc2:	4639      	mov	r1, r7
 8011cc4:	4628      	mov	r0, r5
 8011cc6:	f7ff fccf 	bl	8011668 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011cca:	6030      	str	r0, [r6, #0]
 8011ccc:	6833      	ldr	r3, [r6, #0]
 8011cce:	b143      	cbz	r3, 8011ce2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8011cd0:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8011cd4:	7a9b      	ldrb	r3, [r3, #10]
 8011cd6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011cda:	4313      	orrs	r3, r2
 8011cdc:	bf0c      	ite	eq
 8011cde:	2301      	moveq	r3, #1
 8011ce0:	2300      	movne	r3, #0
 8011ce2:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cea:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d0ec      	beq.n	8011ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8011cf2:	f640 1302 	movw	r3, #2306	; 0x902
 8011cf6:	429c      	cmp	r4, r3
 8011cf8:	d1e8      	bne.n	8011ccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 8011cfa:	4601      	mov	r1, r0
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f7ff fc32 	bl	8011566 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011d02:	e7e2      	b.n	8011cca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

08011d04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8011d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d08:	4617      	mov	r7, r2
 8011d0a:	461e      	mov	r6, r3
 8011d0c:	4605      	mov	r5, r0
 8011d0e:	f7ff ff85 	bl	8011c1c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	4604      	mov	r4, r0
 8011d16:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8011d1a:	4601      	mov	r1, r0
 8011d1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d20:	4638      	mov	r0, r7
 8011d22:	47c0      	blx	r8
 8011d24:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	6030      	str	r0, [r6, #0]
 8011d30:	d814      	bhi.n	8011d5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x58>
 8011d32:	4639      	mov	r1, r7
 8011d34:	4628      	mov	r0, r5
 8011d36:	f7ff fc97 	bl	8011668 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011d3a:	6030      	str	r0, [r6, #0]
 8011d3c:	6833      	ldr	r3, [r6, #0]
 8011d3e:	b143      	cbz	r3, 8011d52 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8011d40:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8011d44:	7a9b      	ldrb	r3, [r3, #10]
 8011d46:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011d4a:	4313      	orrs	r3, r2
 8011d4c:	bf0c      	ite	eq
 8011d4e:	2301      	moveq	r3, #1
 8011d50:	2300      	movne	r3, #0
 8011d52:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8011d56:	4620      	mov	r0, r4
 8011d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d5c:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d0eb      	beq.n	8011d3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8011d64:	f640 1302 	movw	r3, #2306	; 0x902
 8011d68:	429c      	cmp	r4, r3
 8011d6a:	d1e7      	bne.n	8011d3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 8011d6c:	4601      	mov	r1, r0
 8011d6e:	4628      	mov	r0, r5
 8011d70:	f7ff fbf9 	bl	8011566 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011d74:	e7e1      	b.n	8011d3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>
	...

08011d78 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8011d78:	4b01      	ldr	r3, [pc, #4]	; (8011d80 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8011d7a:	6018      	str	r0, [r3, #0]
 8011d7c:	4770      	bx	lr
 8011d7e:	bf00      	nop
 8011d80:	20009f88 	.word	0x20009f88

08011d84 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8011d84:	4b07      	ldr	r3, [pc, #28]	; (8011da4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 8011d86:	881a      	ldrh	r2, [r3, #0]
 8011d88:	4282      	cmp	r2, r0
 8011d8a:	d809      	bhi.n	8011da0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8011d8c:	4b06      	ldr	r3, [pc, #24]	; (8011da8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 8011d8e:	881b      	ldrh	r3, [r3, #0]
 8011d90:	4413      	add	r3, r2
 8011d92:	4298      	cmp	r0, r3
 8011d94:	da04      	bge.n	8011da0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 8011d96:	4b05      	ldr	r3, [pc, #20]	; (8011dac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8011d9e:	4770      	bx	lr
 8011da0:	2000      	movs	r0, #0
 8011da2:	4770      	bx	lr
 8011da4:	20009fa8 	.word	0x20009fa8
 8011da8:	20009fac 	.word	0x20009fac
 8011dac:	20009f8c 	.word	0x20009f8c

08011db0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8011db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db4:	4d26      	ldr	r5, [pc, #152]	; (8011e50 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8011db6:	682b      	ldr	r3, [r5, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d046      	beq.n	8011e4a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8011dbc:	4a25      	ldr	r2, [pc, #148]	; (8011e54 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8011dbe:	4f26      	ldr	r7, [pc, #152]	; (8011e58 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8011dc0:	8810      	ldrh	r0, [r2, #0]
 8011dc2:	883c      	ldrh	r4, [r7, #0]
 8011dc4:	4e25      	ldr	r6, [pc, #148]	; (8011e5c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8011dc6:	4420      	add	r0, r4
 8011dc8:	1c42      	adds	r2, r0, #1
 8011dca:	f022 0201 	bic.w	r2, r2, #1
 8011dce:	0412      	lsls	r2, r2, #16
 8011dd0:	0c12      	lsrs	r2, r2, #16
 8011dd2:	0051      	lsls	r1, r2, #1
 8011dd4:	220e      	movs	r2, #14
 8011dd6:	fb02 fc04 	mul.w	ip, r2, r4
 8011dda:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8011dde:	4c20      	ldr	r4, [pc, #128]	; (8011e60 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8011de0:	eb03 0208 	add.w	r2, r3, r8
 8011de4:	eb08 0e01 	add.w	lr, r8, r1
 8011de8:	6022      	str	r2, [r4, #0]
 8011dea:	eb03 020e 	add.w	r2, r3, lr
 8011dee:	6032      	str	r2, [r6, #0]
 8011df0:	44e6      	add	lr, ip
 8011df2:	4a1c      	ldr	r2, [pc, #112]	; (8011e64 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8011df4:	4473      	add	r3, lr
 8011df6:	6013      	str	r3, [r2, #0]
 8011df8:	4a1b      	ldr	r2, [pc, #108]	; (8011e68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	8013      	strh	r3, [r2, #0]
 8011dfe:	4a1b      	ldr	r2, [pc, #108]	; (8011e6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8011e00:	6812      	ldr	r2, [r2, #0]
 8011e02:	eba2 0208 	sub.w	r2, r2, r8
 8011e06:	1a52      	subs	r2, r2, r1
 8011e08:	4919      	ldr	r1, [pc, #100]	; (8011e70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 8011e0a:	eba2 020c 	sub.w	r2, r2, ip
 8011e0e:	600a      	str	r2, [r1, #0]
 8011e10:	4a18      	ldr	r2, [pc, #96]	; (8011e74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 8011e12:	469c      	mov	ip, r3
 8011e14:	8013      	strh	r3, [r2, #0]
 8011e16:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011e1a:	4283      	cmp	r3, r0
 8011e1c:	d10d      	bne.n	8011e3a <_ZN8touchgfx6Bitmap10clearCacheEv+0x8a>
 8011e1e:	883d      	ldrh	r5, [r7, #0]
 8011e20:	6830      	ldr	r0, [r6, #0]
 8011e22:	2300      	movs	r3, #0
 8011e24:	240e      	movs	r4, #14
 8011e26:	429d      	cmp	r5, r3
 8011e28:	d90f      	bls.n	8011e4a <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 8011e2a:	fb04 0203 	mla	r2, r4, r3, r0
 8011e2e:	3301      	adds	r3, #1
 8011e30:	7b11      	ldrb	r1, [r2, #12]
 8011e32:	f36f 1145 	bfc	r1, #5, #1
 8011e36:	7311      	strb	r1, [r2, #12]
 8011e38:	e7f5      	b.n	8011e26 <_ZN8touchgfx6Bitmap10clearCacheEv+0x76>
 8011e3a:	682a      	ldr	r2, [r5, #0]
 8011e3c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8011e40:	6822      	ldr	r2, [r4, #0]
 8011e42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8011e46:	3301      	adds	r3, #1
 8011e48:	e7e7      	b.n	8011e1a <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 8011e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e4e:	bf00      	nop
 8011e50:	20009f8c 	.word	0x20009f8c
 8011e54:	20009fa8 	.word	0x20009fa8
 8011e58:	20009fac 	.word	0x20009fac
 8011e5c:	20009f90 	.word	0x20009f90
 8011e60:	20009fa0 	.word	0x20009fa0
 8011e64:	20009f98 	.word	0x20009f98
 8011e68:	20009faa 	.word	0x20009faa
 8011e6c:	20009f94 	.word	0x20009f94
 8011e70:	20009fa4 	.word	0x20009fa4
 8011e74:	20009f9c 	.word	0x20009f9c

08011e78 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8011e78:	b510      	push	{r4, lr}
 8011e7a:	4b10      	ldr	r3, [pc, #64]	; (8011ebc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	b9db      	cbnz	r3, 8011eb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8011e80:	b1d1      	cbz	r1, 8011eb8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 8011e82:	4b0f      	ldr	r3, [pc, #60]	; (8011ec0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8011e84:	801a      	strh	r2, [r3, #0]
 8011e86:	4b0f      	ldr	r3, [pc, #60]	; (8011ec4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8011e88:	881b      	ldrh	r3, [r3, #0]
 8011e8a:	b292      	uxth	r2, r2
 8011e8c:	240e      	movs	r4, #14
 8011e8e:	4413      	add	r3, r2
 8011e90:	4362      	muls	r2, r4
 8011e92:	2406      	movs	r4, #6
 8011e94:	fb04 2203 	mla	r2, r4, r3, r2
 8011e98:	428a      	cmp	r2, r1
 8011e9a:	d305      	bcc.n	8011ea8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8011e9c:	4b0a      	ldr	r3, [pc, #40]	; (8011ec8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8011e9e:	4a0b      	ldr	r2, [pc, #44]	; (8011ecc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8011ea0:	480b      	ldr	r0, [pc, #44]	; (8011ed0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8011ea2:	2137      	movs	r1, #55	; 0x37
 8011ea4:	f00b fce6 	bl	801d874 <__assert_func>
 8011ea8:	4b0a      	ldr	r3, [pc, #40]	; (8011ed4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8011eaa:	6019      	str	r1, [r3, #0]
 8011eac:	4b0a      	ldr	r3, [pc, #40]	; (8011ed8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 8011eae:	6018      	str	r0, [r3, #0]
 8011eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011eb4:	f7ff bf7c 	b.w	8011db0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8011eb8:	bd10      	pop	{r4, pc}
 8011eba:	bf00      	nop
 8011ebc:	20009f98 	.word	0x20009f98
 8011ec0:	20009fac 	.word	0x20009fac
 8011ec4:	20009fa8 	.word	0x20009fa8
 8011ec8:	08021002 	.word	0x08021002
 8011ecc:	0802105b 	.word	0x0802105b
 8011ed0:	08020fdd 	.word	0x08020fdd
 8011ed4:	20009f94 	.word	0x20009f94
 8011ed8:	20009f8c 	.word	0x20009f8c

08011edc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8011edc:	b470      	push	{r4, r5, r6}
 8011ede:	4c07      	ldr	r4, [pc, #28]	; (8011efc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8011ee0:	6826      	ldr	r6, [r4, #0]
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	4610      	mov	r0, r2
 8011ee6:	9a03      	ldr	r2, [sp, #12]
 8011ee8:	b936      	cbnz	r6, 8011ef8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8011eea:	6025      	str	r5, [r4, #0]
 8011eec:	4c04      	ldr	r4, [pc, #16]	; (8011f00 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8011eee:	8021      	strh	r1, [r4, #0]
 8011ef0:	bc70      	pop	{r4, r5, r6}
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	f7ff bfc0 	b.w	8011e78 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8011ef8:	bc70      	pop	{r4, r5, r6}
 8011efa:	4770      	bx	lr
 8011efc:	20009fb0 	.word	0x20009fb0
 8011f00:	20009fa8 	.word	0x20009fa8

08011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8011f04:	b508      	push	{r3, lr}
 8011f06:	4b14      	ldr	r3, [pc, #80]	; (8011f58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8011f08:	6819      	ldr	r1, [r3, #0]
 8011f0a:	b931      	cbnz	r1, 8011f1a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8011f0c:	4b13      	ldr	r3, [pc, #76]	; (8011f5c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8011f0e:	4a14      	ldr	r2, [pc, #80]	; (8011f60 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8011f10:	4814      	ldr	r0, [pc, #80]	; (8011f64 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8011f12:	f240 21e6 	movw	r1, #742	; 0x2e6
 8011f16:	f00b fcad 	bl	801d874 <__assert_func>
 8011f1a:	4a13      	ldr	r2, [pc, #76]	; (8011f68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8011f1c:	8803      	ldrh	r3, [r0, #0]
 8011f1e:	8812      	ldrh	r2, [r2, #0]
 8011f20:	4293      	cmp	r3, r2
 8011f22:	d204      	bcs.n	8011f2e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8011f24:	2214      	movs	r2, #20
 8011f26:	fb02 1303 	mla	r3, r2, r3, r1
 8011f2a:	8918      	ldrh	r0, [r3, #8]
 8011f2c:	bd08      	pop	{r3, pc}
 8011f2e:	490f      	ldr	r1, [pc, #60]	; (8011f6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8011f30:	8809      	ldrh	r1, [r1, #0]
 8011f32:	4411      	add	r1, r2
 8011f34:	428b      	cmp	r3, r1
 8011f36:	da06      	bge.n	8011f46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 8011f38:	1a9b      	subs	r3, r3, r2
 8011f3a:	4a0d      	ldr	r2, [pc, #52]	; (8011f70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8011f3c:	6812      	ldr	r2, [r2, #0]
 8011f3e:	210e      	movs	r1, #14
 8011f40:	fb01 2303 	mla	r3, r1, r3, r2
 8011f44:	e7f1      	b.n	8011f2a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8011f46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	bf0a      	itet	eq
 8011f4e:	4b09      	ldreq	r3, [pc, #36]	; (8011f74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8011f50:	2000      	movne	r0, #0
 8011f52:	8818      	ldrheq	r0, [r3, #0]
 8011f54:	e7ea      	b.n	8011f2c <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 8011f56:	bf00      	nop
 8011f58:	20009fb0 	.word	0x20009fb0
 8011f5c:	08020398 	.word	0x08020398
 8011f60:	08021108 	.word	0x08021108
 8011f64:	08020fdd 	.word	0x08020fdd
 8011f68:	20009fa8 	.word	0x20009fa8
 8011f6c:	20009fac 	.word	0x20009fac
 8011f70:	20009f90 	.word	0x20009f90
 8011f74:	20009efc 	.word	0x20009efc

08011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8011f78:	b508      	push	{r3, lr}
 8011f7a:	4b14      	ldr	r3, [pc, #80]	; (8011fcc <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8011f7c:	6819      	ldr	r1, [r3, #0]
 8011f7e:	b931      	cbnz	r1, 8011f8e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8011f80:	4b13      	ldr	r3, [pc, #76]	; (8011fd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8011f82:	4a14      	ldr	r2, [pc, #80]	; (8011fd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8011f84:	4814      	ldr	r0, [pc, #80]	; (8011fd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8011f86:	f240 21fa 	movw	r1, #762	; 0x2fa
 8011f8a:	f00b fc73 	bl	801d874 <__assert_func>
 8011f8e:	4a13      	ldr	r2, [pc, #76]	; (8011fdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8011f90:	8803      	ldrh	r3, [r0, #0]
 8011f92:	8812      	ldrh	r2, [r2, #0]
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d204      	bcs.n	8011fa2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8011f98:	2214      	movs	r2, #20
 8011f9a:	fb02 1303 	mla	r3, r2, r3, r1
 8011f9e:	8958      	ldrh	r0, [r3, #10]
 8011fa0:	bd08      	pop	{r3, pc}
 8011fa2:	490f      	ldr	r1, [pc, #60]	; (8011fe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8011fa4:	8809      	ldrh	r1, [r1, #0]
 8011fa6:	4411      	add	r1, r2
 8011fa8:	428b      	cmp	r3, r1
 8011faa:	da06      	bge.n	8011fba <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 8011fac:	1a9b      	subs	r3, r3, r2
 8011fae:	4a0d      	ldr	r2, [pc, #52]	; (8011fe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 8011fb0:	6812      	ldr	r2, [r2, #0]
 8011fb2:	210e      	movs	r1, #14
 8011fb4:	fb01 2303 	mla	r3, r1, r3, r2
 8011fb8:	e7f1      	b.n	8011f9e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8011fba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	bf0a      	itet	eq
 8011fc2:	4b09      	ldreq	r3, [pc, #36]	; (8011fe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8011fc4:	2000      	movne	r0, #0
 8011fc6:	8818      	ldrheq	r0, [r3, #0]
 8011fc8:	e7ea      	b.n	8011fa0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8011fca:	bf00      	nop
 8011fcc:	20009fb0 	.word	0x20009fb0
 8011fd0:	08020398 	.word	0x08020398
 8011fd4:	08021134 	.word	0x08021134
 8011fd8:	08020fdd 	.word	0x08020fdd
 8011fdc:	20009fa8 	.word	0x20009fa8
 8011fe0:	20009fac 	.word	0x20009fac
 8011fe4:	20009f90 	.word	0x20009f90
 8011fe8:	20009efe 	.word	0x20009efe

08011fec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8011fec:	b510      	push	{r4, lr}
 8011fee:	4b23      	ldr	r3, [pc, #140]	; (801207c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8011ff0:	681c      	ldr	r4, [r3, #0]
 8011ff2:	b934      	cbnz	r4, 8012002 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8011ff4:	4b22      	ldr	r3, [pc, #136]	; (8012080 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8011ff6:	4a23      	ldr	r2, [pc, #140]	; (8012084 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8011ff8:	4823      	ldr	r0, [pc, #140]	; (8012088 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8011ffa:	f240 310e 	movw	r1, #782	; 0x30e
 8011ffe:	f00b fc39 	bl	801d874 <__assert_func>
 8012002:	4a22      	ldr	r2, [pc, #136]	; (801208c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8012004:	880b      	ldrh	r3, [r1, #0]
 8012006:	8812      	ldrh	r2, [r2, #0]
 8012008:	4293      	cmp	r3, r2
 801200a:	d211      	bcs.n	8012030 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801200c:	2214      	movs	r2, #20
 801200e:	fb02 4303 	mla	r3, r2, r3, r4
 8012012:	8a1a      	ldrh	r2, [r3, #16]
 8012014:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8012018:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801201c:	8a5b      	ldrh	r3, [r3, #18]
 801201e:	8004      	strh	r4, [r0, #0]
 8012020:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8012024:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012028:	8041      	strh	r1, [r0, #2]
 801202a:	8082      	strh	r2, [r0, #4]
 801202c:	80c3      	strh	r3, [r0, #6]
 801202e:	e00e      	b.n	801204e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8012030:	4917      	ldr	r1, [pc, #92]	; (8012090 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8012032:	8809      	ldrh	r1, [r1, #0]
 8012034:	4411      	add	r1, r2
 8012036:	428b      	cmp	r3, r1
 8012038:	da0a      	bge.n	8012050 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801203a:	1a9b      	subs	r3, r3, r2
 801203c:	4a15      	ldr	r2, [pc, #84]	; (8012094 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801203e:	6812      	ldr	r2, [r2, #0]
 8012040:	210e      	movs	r1, #14
 8012042:	fb01 2303 	mla	r3, r1, r3, r2
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	6002      	str	r2, [r0, #0]
 801204a:	685a      	ldr	r2, [r3, #4]
 801204c:	6042      	str	r2, [r0, #4]
 801204e:	bd10      	pop	{r4, pc}
 8012050:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012054:	4293      	cmp	r3, r2
 8012056:	d10b      	bne.n	8012070 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 8012058:	4b0f      	ldr	r3, [pc, #60]	; (8012098 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801205a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801205e:	4b0f      	ldr	r3, [pc, #60]	; (801209c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 8012060:	8081      	strh	r1, [r0, #4]
 8012062:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012066:	80c2      	strh	r2, [r0, #6]
 8012068:	2300      	movs	r3, #0
 801206a:	8003      	strh	r3, [r0, #0]
 801206c:	8043      	strh	r3, [r0, #2]
 801206e:	e7ee      	b.n	801204e <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8012070:	2300      	movs	r3, #0
 8012072:	8003      	strh	r3, [r0, #0]
 8012074:	8043      	strh	r3, [r0, #2]
 8012076:	8083      	strh	r3, [r0, #4]
 8012078:	e7d8      	b.n	801202c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801207a:	bf00      	nop
 801207c:	20009fb0 	.word	0x20009fb0
 8012080:	08020398 	.word	0x08020398
 8012084:	080210a1 	.word	0x080210a1
 8012088:	08020fdd 	.word	0x08020fdd
 801208c:	20009fa8 	.word	0x20009fa8
 8012090:	20009fac 	.word	0x20009fac
 8012094:	20009f90 	.word	0x20009f90
 8012098:	20009efc 	.word	0x20009efc
 801209c:	20009efe 	.word	0x20009efe

080120a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80120a0:	4b18      	ldr	r3, [pc, #96]	; (8012104 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	b34b      	cbz	r3, 80120fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80120a6:	4a18      	ldr	r2, [pc, #96]	; (8012108 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80120a8:	8800      	ldrh	r0, [r0, #0]
 80120aa:	8812      	ldrh	r2, [r2, #0]
 80120ac:	4290      	cmp	r0, r2
 80120ae:	d211      	bcs.n	80120d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 80120b0:	2214      	movs	r2, #20
 80120b2:	fb02 3300 	mla	r3, r2, r0, r3
 80120b6:	8a1a      	ldrh	r2, [r3, #16]
 80120b8:	8919      	ldrh	r1, [r3, #8]
 80120ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80120be:	428a      	cmp	r2, r1
 80120c0:	db1d      	blt.n	80120fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80120c2:	8a58      	ldrh	r0, [r3, #18]
 80120c4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80120c8:	895b      	ldrh	r3, [r3, #10]
 80120ca:	4298      	cmp	r0, r3
 80120cc:	bfac      	ite	ge
 80120ce:	2000      	movge	r0, #0
 80120d0:	2001      	movlt	r0, #1
 80120d2:	4770      	bx	lr
 80120d4:	4b0d      	ldr	r3, [pc, #52]	; (801210c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	4413      	add	r3, r2
 80120da:	4298      	cmp	r0, r3
 80120dc:	da0d      	bge.n	80120fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 80120de:	4b0c      	ldr	r3, [pc, #48]	; (8012110 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	1a80      	subs	r0, r0, r2
 80120e4:	220e      	movs	r2, #14
 80120e6:	fb02 3300 	mla	r3, r2, r0, r3
 80120ea:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80120ee:	891a      	ldrh	r2, [r3, #8]
 80120f0:	4291      	cmp	r1, r2
 80120f2:	db04      	blt.n	80120fe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 80120f4:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80120f8:	e7e6      	b.n	80120c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 80120fa:	2000      	movs	r0, #0
 80120fc:	4770      	bx	lr
 80120fe:	2001      	movs	r0, #1
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	20009fb0 	.word	0x20009fb0
 8012108:	20009fa8 	.word	0x20009fa8
 801210c:	20009fac 	.word	0x20009fac
 8012110:	20009f90 	.word	0x20009f90

08012114 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012114:	b508      	push	{r3, lr}
 8012116:	4b12      	ldr	r3, [pc, #72]	; (8012160 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012118:	6819      	ldr	r1, [r3, #0]
 801211a:	b931      	cbnz	r1, 801212a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801211c:	4b11      	ldr	r3, [pc, #68]	; (8012164 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801211e:	4a12      	ldr	r2, [pc, #72]	; (8012168 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012120:	4812      	ldr	r0, [pc, #72]	; (801216c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012122:	f240 3132 	movw	r1, #818	; 0x332
 8012126:	f00b fba5 	bl	801d874 <__assert_func>
 801212a:	8803      	ldrh	r3, [r0, #0]
 801212c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012130:	4293      	cmp	r3, r2
 8012132:	d012      	beq.n	801215a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8012134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012138:	4293      	cmp	r3, r2
 801213a:	d103      	bne.n	8012144 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801213c:	4b0c      	ldr	r3, [pc, #48]	; (8012170 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8012142:	bd08      	pop	{r3, pc}
 8012144:	4a0b      	ldr	r2, [pc, #44]	; (8012174 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8012146:	6812      	ldr	r2, [r2, #0]
 8012148:	b11a      	cbz	r2, 8012152 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801214a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801214e:	2800      	cmp	r0, #0
 8012150:	d1f7      	bne.n	8012142 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8012152:	2214      	movs	r2, #20
 8012154:	4353      	muls	r3, r2
 8012156:	58c8      	ldr	r0, [r1, r3]
 8012158:	e7f3      	b.n	8012142 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801215a:	2000      	movs	r0, #0
 801215c:	e7f1      	b.n	8012142 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801215e:	bf00      	nop
 8012160:	20009fb0 	.word	0x20009fb0
 8012164:	08020398 	.word	0x08020398
 8012168:	080210d7 	.word	0x080210d7
 801216c:	08020fdd 	.word	0x08020fdd
 8012170:	20009f08 	.word	0x20009f08
 8012174:	20009f8c 	.word	0x20009f8c

08012178 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8012178:	8802      	ldrh	r2, [r0, #0]
 801217a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801217e:	429a      	cmp	r2, r3
 8012180:	d840      	bhi.n	8012204 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 8012182:	4b21      	ldr	r3, [pc, #132]	; (8012208 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 8012184:	881b      	ldrh	r3, [r3, #0]
 8012186:	429a      	cmp	r2, r3
 8012188:	d220      	bcs.n	80121cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801218a:	4b20      	ldr	r3, [pc, #128]	; (801220c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801218c:	6819      	ldr	r1, [r3, #0]
 801218e:	2314      	movs	r3, #20
 8012190:	fb03 1302 	mla	r3, r3, r2, r1
 8012194:	6858      	ldr	r0, [r3, #4]
 8012196:	2800      	cmp	r0, #0
 8012198:	d035      	beq.n	8012206 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801219a:	491d      	ldr	r1, [pc, #116]	; (8012210 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801219c:	6809      	ldr	r1, [r1, #0]
 801219e:	2900      	cmp	r1, #0
 80121a0:	d031      	beq.n	8012206 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80121a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80121a6:	b371      	cbz	r1, 8012206 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80121a8:	895a      	ldrh	r2, [r3, #10]
 80121aa:	8918      	ldrh	r0, [r3, #8]
 80121ac:	4350      	muls	r0, r2
 80121ae:	7c5a      	ldrb	r2, [r3, #17]
 80121b0:	7cdb      	ldrb	r3, [r3, #19]
 80121b2:	0952      	lsrs	r2, r2, #5
 80121b4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80121b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80121bc:	2b0b      	cmp	r3, #11
 80121be:	bf18      	it	ne
 80121c0:	0040      	lslne	r0, r0, #1
 80121c2:	3003      	adds	r0, #3
 80121c4:	f020 0003 	bic.w	r0, r0, #3
 80121c8:	4408      	add	r0, r1
 80121ca:	4770      	bx	lr
 80121cc:	4911      	ldr	r1, [pc, #68]	; (8012214 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80121ce:	8809      	ldrh	r1, [r1, #0]
 80121d0:	4419      	add	r1, r3
 80121d2:	428a      	cmp	r2, r1
 80121d4:	da16      	bge.n	8012204 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80121d6:	4910      	ldr	r1, [pc, #64]	; (8012218 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80121d8:	6809      	ldr	r1, [r1, #0]
 80121da:	1ad3      	subs	r3, r2, r3
 80121dc:	200e      	movs	r0, #14
 80121de:	fb00 1303 	mla	r3, r0, r3, r1
 80121e2:	7b19      	ldrb	r1, [r3, #12]
 80121e4:	f001 011f 	and.w	r1, r1, #31
 80121e8:	290b      	cmp	r1, #11
 80121ea:	d10b      	bne.n	8012204 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 80121ec:	8919      	ldrh	r1, [r3, #8]
 80121ee:	8958      	ldrh	r0, [r3, #10]
 80121f0:	4b07      	ldr	r3, [pc, #28]	; (8012210 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80121f2:	4348      	muls	r0, r1
 80121f4:	6819      	ldr	r1, [r3, #0]
 80121f6:	3003      	adds	r0, #3
 80121f8:	f020 0303 	bic.w	r3, r0, #3
 80121fc:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012200:	4418      	add	r0, r3
 8012202:	4770      	bx	lr
 8012204:	2000      	movs	r0, #0
 8012206:	4770      	bx	lr
 8012208:	20009fa8 	.word	0x20009fa8
 801220c:	20009fb0 	.word	0x20009fb0
 8012210:	20009f8c 	.word	0x20009f8c
 8012214:	20009fac 	.word	0x20009fac
 8012218:	20009f90 	.word	0x20009f90

0801221c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801221c:	4b19      	ldr	r3, [pc, #100]	; (8012284 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801221e:	6819      	ldr	r1, [r3, #0]
 8012220:	8803      	ldrh	r3, [r0, #0]
 8012222:	b1e9      	cbz	r1, 8012260 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8012224:	4a18      	ldr	r2, [pc, #96]	; (8012288 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8012226:	8812      	ldrh	r2, [r2, #0]
 8012228:	429a      	cmp	r2, r3
 801222a:	d90a      	bls.n	8012242 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801222c:	2214      	movs	r2, #20
 801222e:	fb02 1303 	mla	r3, r2, r3, r1
 8012232:	7c58      	ldrb	r0, [r3, #17]
 8012234:	0942      	lsrs	r2, r0, #5
 8012236:	7cd8      	ldrb	r0, [r3, #19]
 8012238:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801223c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8012240:	4770      	bx	lr
 8012242:	4912      	ldr	r1, [pc, #72]	; (801228c <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 8012244:	8809      	ldrh	r1, [r1, #0]
 8012246:	4411      	add	r1, r2
 8012248:	428b      	cmp	r3, r1
 801224a:	da09      	bge.n	8012260 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801224c:	1a9b      	subs	r3, r3, r2
 801224e:	4a10      	ldr	r2, [pc, #64]	; (8012290 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8012250:	6812      	ldr	r2, [r2, #0]
 8012252:	210e      	movs	r1, #14
 8012254:	fb01 2303 	mla	r3, r1, r3, r2
 8012258:	7b18      	ldrb	r0, [r3, #12]
 801225a:	f000 001f 	and.w	r0, r0, #31
 801225e:	4770      	bx	lr
 8012260:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012264:	4293      	cmp	r3, r2
 8012266:	d10a      	bne.n	801227e <_ZNK8touchgfx6Bitmap9getFormatEv+0x62>
 8012268:	4b0a      	ldr	r3, [pc, #40]	; (8012294 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012270:	b10a      	cbz	r2, 8012276 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8012272:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012274:	b900      	cbnz	r0, 8012278 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8012276:	6898      	ldr	r0, [r3, #8]
 8012278:	6803      	ldr	r3, [r0, #0]
 801227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801227c:	4718      	bx	r3
 801227e:	2000      	movs	r0, #0
 8012280:	4770      	bx	lr
 8012282:	bf00      	nop
 8012284:	20009fb0 	.word	0x20009fb0
 8012288:	20009fa8 	.word	0x20009fa8
 801228c:	20009fac 	.word	0x20009fac
 8012290:	20009f90 	.word	0x20009f90
 8012294:	20009f08 	.word	0x20009f08

08012298 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8012298:	2010      	movs	r0, #16
 801229a:	4770      	bx	lr

0801229c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801229c:	2000      	movs	r0, #0
 801229e:	4770      	bx	lr

080122a0 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 80122a0:	00d2      	lsls	r2, r2, #3
 80122a2:	0209      	lsls	r1, r1, #8
 80122a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80122a8:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 80122ac:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80122b0:	4310      	orrs	r0, r2
 80122b2:	4770      	bx	lr

080122b4 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 80122b4:	1209      	asrs	r1, r1, #8
 80122b6:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80122ba:	4770      	bx	lr

080122bc <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 80122bc:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80122c0:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 80122c4:	4770      	bx	lr

080122c6 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 80122c6:	00c9      	lsls	r1, r1, #3
 80122c8:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 80122cc:	4770      	bx	lr

080122ce <_ZN8touchgfx8LCD16bpp4initEv>:
 80122ce:	4770      	bx	lr

080122d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80122d0:	2bff      	cmp	r3, #255	; 0xff
 80122d2:	d050      	beq.n	8012376 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80122d4:	2a0b      	cmp	r2, #11
 80122d6:	d04a      	beq.n	801236e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80122d8:	d80e      	bhi.n	80122f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80122da:	2a03      	cmp	r2, #3
 80122dc:	d03f      	beq.n	801235e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80122de:	d804      	bhi.n	80122ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80122e0:	2a01      	cmp	r2, #1
 80122e2:	d03e      	beq.n	8012362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80122e4:	d93f      	bls.n	8012366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80122e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80122e8:	4770      	bx	lr
 80122ea:	2a09      	cmp	r2, #9
 80122ec:	d03f      	beq.n	801236e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80122ee:	d83c      	bhi.n	801236a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80122f0:	2a08      	cmp	r2, #8
 80122f2:	d03a      	beq.n	801236a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80122f4:	2000      	movs	r0, #0
 80122f6:	4770      	bx	lr
 80122f8:	2a2f      	cmp	r2, #47	; 0x2f
 80122fa:	d024      	beq.n	8012346 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80122fc:	d80d      	bhi.n	801231a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80122fe:	2a2d      	cmp	r2, #45	; 0x2d
 8012300:	d014      	beq.n	801232c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8012302:	d826      	bhi.n	8012352 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8012304:	2a2c      	cmp	r2, #44	; 0x2c
 8012306:	d1f5      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012308:	684b      	ldr	r3, [r1, #4]
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	2b01      	cmp	r3, #1
 801230e:	d018      	beq.n	8012342 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8012310:	d323      	bcc.n	801235a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8012312:	2b02      	cmp	r3, #2
 8012314:	d1ee      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012316:	6880      	ldr	r0, [r0, #8]
 8012318:	4770      	bx	lr
 801231a:	2a31      	cmp	r2, #49	; 0x31
 801231c:	d004      	beq.n	8012328 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801231e:	d328      	bcc.n	8012372 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012320:	2a32      	cmp	r2, #50	; 0x32
 8012322:	d026      	beq.n	8012372 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8012324:	2a33      	cmp	r2, #51	; 0x33
 8012326:	d1e5      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012328:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801232a:	4770      	bx	lr
 801232c:	684b      	ldr	r3, [r1, #4]
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	2b01      	cmp	r3, #1
 8012332:	d004      	beq.n	801233e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8012334:	d30b      	bcc.n	801234e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012336:	2b02      	cmp	r3, #2
 8012338:	d1dc      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801233a:	6900      	ldr	r0, [r0, #16]
 801233c:	4770      	bx	lr
 801233e:	6a00      	ldr	r0, [r0, #32]
 8012340:	4770      	bx	lr
 8012342:	6980      	ldr	r0, [r0, #24]
 8012344:	4770      	bx	lr
 8012346:	684b      	ldr	r3, [r1, #4]
 8012348:	781b      	ldrb	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1d2      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801234e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012350:	4770      	bx	lr
 8012352:	684b      	ldr	r3, [r1, #4]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1cc      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801235a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801235c:	4770      	bx	lr
 801235e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012360:	4770      	bx	lr
 8012362:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012364:	4770      	bx	lr
 8012366:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8012368:	4770      	bx	lr
 801236a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801236c:	4770      	bx	lr
 801236e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8012370:	4770      	bx	lr
 8012372:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8012374:	4770      	bx	lr
 8012376:	2a0b      	cmp	r2, #11
 8012378:	d049      	beq.n	801240e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801237a:	d80e      	bhi.n	801239a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801237c:	2a03      	cmp	r2, #3
 801237e:	d040      	beq.n	8012402 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8012380:	d804      	bhi.n	801238c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8012382:	2a01      	cmp	r2, #1
 8012384:	d03f      	beq.n	8012406 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8012386:	d940      	bls.n	801240a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8012388:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801238a:	4770      	bx	lr
 801238c:	2a09      	cmp	r2, #9
 801238e:	d03e      	beq.n	801240e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8012390:	d801      	bhi.n	8012396 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8012392:	2a08      	cmp	r2, #8
 8012394:	d1ae      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8012396:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8012398:	4770      	bx	lr
 801239a:	2a2f      	cmp	r2, #47	; 0x2f
 801239c:	d024      	beq.n	80123e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801239e:	d80d      	bhi.n	80123bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80123a0:	2a2d      	cmp	r2, #45	; 0x2d
 80123a2:	d014      	beq.n	80123ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 80123a4:	d826      	bhi.n	80123f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 80123a6:	2a2c      	cmp	r2, #44	; 0x2c
 80123a8:	d1a4      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80123aa:	684b      	ldr	r3, [r1, #4]
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d018      	beq.n	80123e4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80123b2:	d324      	bcc.n	80123fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80123b4:	2b02      	cmp	r3, #2
 80123b6:	d19d      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80123b8:	68c0      	ldr	r0, [r0, #12]
 80123ba:	4770      	bx	lr
 80123bc:	2a31      	cmp	r2, #49	; 0x31
 80123be:	d004      	beq.n	80123ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80123c0:	d327      	bcc.n	8012412 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80123c2:	2a32      	cmp	r2, #50	; 0x32
 80123c4:	d025      	beq.n	8012412 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80123c6:	2a33      	cmp	r2, #51	; 0x33
 80123c8:	d194      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80123ca:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80123cc:	4770      	bx	lr
 80123ce:	684b      	ldr	r3, [r1, #4]
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	d004      	beq.n	80123e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80123d6:	d30b      	bcc.n	80123f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80123d8:	2b02      	cmp	r3, #2
 80123da:	d18b      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80123dc:	6940      	ldr	r0, [r0, #20]
 80123de:	4770      	bx	lr
 80123e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80123e2:	4770      	bx	lr
 80123e4:	69c0      	ldr	r0, [r0, #28]
 80123e6:	4770      	bx	lr
 80123e8:	684b      	ldr	r3, [r1, #4]
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d181      	bne.n	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80123f0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80123f2:	4770      	bx	lr
 80123f4:	684b      	ldr	r3, [r1, #4]
 80123f6:	781b      	ldrb	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	f47f af7b 	bne.w	80122f4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80123fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8012400:	4770      	bx	lr
 8012402:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012404:	4770      	bx	lr
 8012406:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012408:	4770      	bx	lr
 801240a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801240c:	4770      	bx	lr
 801240e:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8012410:	4770      	bx	lr
 8012412:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8012414:	4770      	bx	lr

08012416 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241a:	b087      	sub	sp, #28
 801241c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801241e:	9205      	str	r2, [sp, #20]
 8012420:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012424:	9202      	str	r2, [sp, #8]
 8012426:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801242a:	9101      	str	r1, [sp, #4]
 801242c:	6871      	ldr	r1, [r6, #4]
 801242e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012430:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
 8012434:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8012438:	fb01 2505 	mla	r5, r1, r5, r2
 801243c:	6832      	ldr	r2, [r6, #0]
 801243e:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8012442:	6802      	ldr	r2, [r0, #0]
 8012444:	9203      	str	r2, [sp, #12]
 8012446:	6842      	ldr	r2, [r0, #4]
 8012448:	fa1f fe84 	uxth.w	lr, r4
 801244c:	3204      	adds	r2, #4
 801244e:	43e4      	mvns	r4, r4
 8012450:	9204      	str	r2, [sp, #16]
 8012452:	b2e4      	uxtb	r4, r4
 8012454:	9a01      	ldr	r2, [sp, #4]
 8012456:	2a00      	cmp	r2, #0
 8012458:	dc03      	bgt.n	8012462 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801245a:	9a05      	ldr	r2, [sp, #20]
 801245c:	2a00      	cmp	r2, #0
 801245e:	f340 8119 	ble.w	8012694 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 8012462:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012464:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012468:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801246a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801246e:	2b00      	cmp	r3, #0
 8012470:	dd0f      	ble.n	8012492 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8012472:	1408      	asrs	r0, r1, #16
 8012474:	d406      	bmi.n	8012484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012476:	4540      	cmp	r0, r8
 8012478:	da04      	bge.n	8012484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801247a:	1410      	asrs	r0, r2, #16
 801247c:	d402      	bmi.n	8012484 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801247e:	9e02      	ldr	r6, [sp, #8]
 8012480:	42b0      	cmp	r0, r6
 8012482:	db07      	blt.n	8012494 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012484:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012486:	4401      	add	r1, r0
 8012488:	9814      	ldr	r0, [sp, #80]	; 0x50
 801248a:	3b01      	subs	r3, #1
 801248c:	4402      	add	r2, r0
 801248e:	3502      	adds	r5, #2
 8012490:	e7ed      	b.n	801246e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8012492:	d00f      	beq.n	80124b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8012494:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012496:	1e58      	subs	r0, r3, #1
 8012498:	fb06 1600 	mla	r6, r6, r0, r1
 801249c:	1436      	asrs	r6, r6, #16
 801249e:	d547      	bpl.n	8012530 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 80124a0:	469b      	mov	fp, r3
 80124a2:	46aa      	mov	sl, r5
 80124a4:	f1bb 0f00 	cmp.w	fp, #0
 80124a8:	f300 809e 	bgt.w	80125e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 80124ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80124b0:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80124b4:	9b01      	ldr	r3, [sp, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f340 80ec 	ble.w	8012694 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27e>
 80124bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80124c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80124c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80124c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80124ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80124ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80124d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80124d6:	eef0 6a62 	vmov.f32	s13, s5
 80124da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80124de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80124e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80124e6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80124ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80124ee:	eef0 6a43 	vmov.f32	s13, s6
 80124f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80124f6:	ee12 2a90 	vmov	r2, s5
 80124fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80124fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8012502:	ee13 2a10 	vmov	r2, s6
 8012506:	9313      	str	r3, [sp, #76]	; 0x4c
 8012508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801250a:	fb92 f3f3 	sdiv	r3, r2, r3
 801250e:	9314      	str	r3, [sp, #80]	; 0x50
 8012510:	9b01      	ldr	r3, [sp, #4]
 8012512:	9a05      	ldr	r2, [sp, #20]
 8012514:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012518:	3b01      	subs	r3, #1
 801251a:	9301      	str	r3, [sp, #4]
 801251c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8012520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012522:	eeb0 3a67 	vmov.f32	s6, s15
 8012526:	bf08      	it	eq
 8012528:	4613      	moveq	r3, r2
 801252a:	eef0 2a47 	vmov.f32	s5, s14
 801252e:	e791      	b.n	8012454 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8012530:	4546      	cmp	r6, r8
 8012532:	dab5      	bge.n	80124a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012534:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012536:	fb06 2000 	mla	r0, r6, r0, r2
 801253a:	1400      	asrs	r0, r0, #16
 801253c:	d4b0      	bmi.n	80124a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 801253e:	9e02      	ldr	r6, [sp, #8]
 8012540:	42b0      	cmp	r0, r6
 8012542:	daad      	bge.n	80124a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012544:	469a      	mov	sl, r3
 8012546:	46ab      	mov	fp, r5
 8012548:	f1ba 0f00 	cmp.w	sl, #0
 801254c:	ddae      	ble.n	80124ac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801254e:	9f03      	ldr	r7, [sp, #12]
 8012550:	1410      	asrs	r0, r2, #16
 8012552:	140e      	asrs	r6, r1, #16
 8012554:	fb08 7000 	mla	r0, r8, r0, r7
 8012558:	f10a 3aff 	add.w	sl, sl, #4294967295
 801255c:	5d80      	ldrb	r0, [r0, r6]
 801255e:	9e04      	ldr	r6, [sp, #16]
 8012560:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8012564:	f8bb 6000 	ldrh.w	r6, [fp]
 8012568:	1237      	asrs	r7, r6, #8
 801256a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801256e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012572:	fb17 f704 	smulbb	r7, r7, r4
 8012576:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801257a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801257e:	00f6      	lsls	r6, r6, #3
 8012580:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8012584:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8012588:	10c7      	asrs	r7, r0, #3
 801258a:	b2f6      	uxtb	r6, r6
 801258c:	00c0      	lsls	r0, r0, #3
 801258e:	fb19 f904 	smulbb	r9, r9, r4
 8012592:	fb16 f604 	smulbb	r6, r6, r4
 8012596:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801259a:	b2c0      	uxtb	r0, r0
 801259c:	fa1f fc8c 	uxth.w	ip, ip
 80125a0:	fb07 970e 	mla	r7, r7, lr, r9
 80125a4:	fb00 600e 	mla	r0, r0, lr, r6
 80125a8:	b280      	uxth	r0, r0
 80125aa:	b2bf      	uxth	r7, r7
 80125ac:	f10c 0601 	add.w	r6, ip, #1
 80125b0:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80125b4:	f107 0901 	add.w	r9, r7, #1
 80125b8:	1c46      	adds	r6, r0, #1
 80125ba:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80125be:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80125c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80125c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80125c8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80125cc:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80125d0:	ea4c 0c06 	orr.w	ip, ip, r6
 80125d4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80125d8:	4401      	add	r1, r0
 80125da:	9814      	ldr	r0, [sp, #80]	; 0x50
 80125dc:	ea4c 0c09 	orr.w	ip, ip, r9
 80125e0:	f82b cb02 	strh.w	ip, [fp], #2
 80125e4:	4402      	add	r2, r0
 80125e6:	e7af      	b.n	8012548 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 80125e8:	140e      	asrs	r6, r1, #16
 80125ea:	d44a      	bmi.n	8012682 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80125ec:	4546      	cmp	r6, r8
 80125ee:	da48      	bge.n	8012682 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80125f0:	1410      	asrs	r0, r2, #16
 80125f2:	d446      	bmi.n	8012682 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80125f4:	9f02      	ldr	r7, [sp, #8]
 80125f6:	42b8      	cmp	r0, r7
 80125f8:	da43      	bge.n	8012682 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x26c>
 80125fa:	9f03      	ldr	r7, [sp, #12]
 80125fc:	fb08 7000 	mla	r0, r8, r0, r7
 8012600:	5d80      	ldrb	r0, [r0, r6]
 8012602:	9e04      	ldr	r6, [sp, #16]
 8012604:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8012608:	f8ba 6000 	ldrh.w	r6, [sl]
 801260c:	1237      	asrs	r7, r6, #8
 801260e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8012612:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012616:	fb17 f704 	smulbb	r7, r7, r4
 801261a:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801261e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8012622:	00f6      	lsls	r6, r6, #3
 8012624:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8012628:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801262c:	10c7      	asrs	r7, r0, #3
 801262e:	b2f6      	uxtb	r6, r6
 8012630:	00c0      	lsls	r0, r0, #3
 8012632:	fb19 f904 	smulbb	r9, r9, r4
 8012636:	fb16 f604 	smulbb	r6, r6, r4
 801263a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801263e:	b2c0      	uxtb	r0, r0
 8012640:	fa1f fc8c 	uxth.w	ip, ip
 8012644:	fb07 970e 	mla	r7, r7, lr, r9
 8012648:	fb00 600e 	mla	r0, r0, lr, r6
 801264c:	b2bf      	uxth	r7, r7
 801264e:	b280      	uxth	r0, r0
 8012650:	f10c 0601 	add.w	r6, ip, #1
 8012654:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8012658:	f107 0901 	add.w	r9, r7, #1
 801265c:	1c46      	adds	r6, r0, #1
 801265e:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 8012662:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8012666:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801266a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801266e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012672:	ea4c 0c06 	orr.w	ip, ip, r6
 8012676:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801267a:	ea4c 0c09 	orr.w	ip, ip, r9
 801267e:	f8aa c000 	strh.w	ip, [sl]
 8012682:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012684:	4401      	add	r1, r0
 8012686:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012688:	f10a 0a02 	add.w	sl, sl, #2
 801268c:	4402      	add	r2, r0
 801268e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012692:	e707      	b.n	80124a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8012694:	b007      	add	sp, #28
 8012696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801269a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801269a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801269e:	b085      	sub	sp, #20
 80126a0:	e9dd 7611 	ldrd	r7, r6, [sp, #68]	; 0x44
 80126a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80126a6:	9203      	str	r2, [sp, #12]
 80126a8:	6842      	ldr	r2, [r0, #4]
 80126aa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80126ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80126ae:	6800      	ldr	r0, [r0, #0]
 80126b0:	f9bd c058 	ldrsh.w	ip, [sp, #88]	; 0x58
 80126b4:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 80126b8:	4696      	mov	lr, r2
 80126ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80126bc:	fb0e 2505 	mla	r5, lr, r5, r2
 80126c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80126c4:	6860      	ldr	r0, [r4, #4]
 80126c6:	6822      	ldr	r2, [r4, #0]
 80126c8:	9201      	str	r2, [sp, #4]
 80126ca:	1d02      	adds	r2, r0, #4
 80126cc:	9202      	str	r2, [sp, #8]
 80126ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126d2:	2900      	cmp	r1, #0
 80126d4:	dc03      	bgt.n	80126de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 80126d6:	9a03      	ldr	r2, [sp, #12]
 80126d8:	2a00      	cmp	r2, #0
 80126da:	f340 809b 	ble.w	8012814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 80126de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126e0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80126e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80126e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	dd0e      	ble.n	801270c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 80126ee:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80126f2:	d406      	bmi.n	8012702 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80126f4:	45e6      	cmp	lr, ip
 80126f6:	da04      	bge.n	8012702 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80126f8:	ea5f 4e20 	movs.w	lr, r0, asr #16
 80126fc:	d401      	bmi.n	8012702 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80126fe:	45c6      	cmp	lr, r8
 8012700:	db05      	blt.n	801270e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8012702:	443c      	add	r4, r7
 8012704:	4430      	add	r0, r6
 8012706:	3b01      	subs	r3, #1
 8012708:	3502      	adds	r5, #2
 801270a:	e7ee      	b.n	80126ea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 801270c:	d010      	beq.n	8012730 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 801270e:	f103 3eff 	add.w	lr, r3, #4294967295
 8012712:	fb07 490e 	mla	r9, r7, lr, r4
 8012716:	ea5f 4929 	movs.w	r9, r9, asr #16
 801271a:	d53d      	bpl.n	8012798 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801271c:	469e      	mov	lr, r3
 801271e:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8012722:	f1be 0f00 	cmp.w	lr, #0
 8012726:	dc58      	bgt.n	80127da <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x140>
 8012728:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801272c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8012730:	2900      	cmp	r1, #0
 8012732:	dd6f      	ble.n	8012814 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x17a>
 8012734:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012738:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801273c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012742:	3901      	subs	r1, #1
 8012744:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012748:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801274c:	eeb0 6a62 	vmov.f32	s12, s5
 8012750:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012754:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012758:	ee77 2a62 	vsub.f32	s5, s14, s5
 801275c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012760:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012764:	eeb0 6a43 	vmov.f32	s12, s6
 8012768:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801276c:	ee12 2a90 	vmov	r2, s5
 8012770:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012774:	fb92 f7f3 	sdiv	r7, r2, r3
 8012778:	ee13 2a10 	vmov	r2, s6
 801277c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012780:	fb92 f6f3 	sdiv	r6, r2, r3
 8012784:	9a03      	ldr	r2, [sp, #12]
 8012786:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801278a:	bf08      	it	eq
 801278c:	4613      	moveq	r3, r2
 801278e:	eeb0 3a67 	vmov.f32	s6, s15
 8012792:	eef0 2a47 	vmov.f32	s5, s14
 8012796:	e79c      	b.n	80126d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 8012798:	45e1      	cmp	r9, ip
 801279a:	dabf      	bge.n	801271c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 801279c:	fb06 0e0e 	mla	lr, r6, lr, r0
 80127a0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80127a4:	d4ba      	bmi.n	801271c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80127a6:	45c6      	cmp	lr, r8
 80127a8:	dab8      	bge.n	801271c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 80127aa:	469e      	mov	lr, r3
 80127ac:	46aa      	mov	sl, r5
 80127ae:	f1be 0f00 	cmp.w	lr, #0
 80127b2:	ddb9      	ble.n	8012728 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 80127b4:	9a01      	ldr	r2, [sp, #4]
 80127b6:	ea4f 4920 	mov.w	r9, r0, asr #16
 80127ba:	ea4f 4b24 	mov.w	fp, r4, asr #16
 80127be:	fb0c 2909 	mla	r9, ip, r9, r2
 80127c2:	9a02      	ldr	r2, [sp, #8]
 80127c4:	f819 900b 	ldrb.w	r9, [r9, fp]
 80127c8:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 80127cc:	f82a 9b02 	strh.w	r9, [sl], #2
 80127d0:	443c      	add	r4, r7
 80127d2:	4430      	add	r0, r6
 80127d4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80127d8:	e7e9      	b.n	80127ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 80127da:	ea5f 4a24 	movs.w	sl, r4, asr #16
 80127de:	d414      	bmi.n	801280a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80127e0:	45e2      	cmp	sl, ip
 80127e2:	da12      	bge.n	801280a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80127e4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80127e8:	d40f      	bmi.n	801280a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80127ea:	45c1      	cmp	r9, r8
 80127ec:	da0d      	bge.n	801280a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 80127ee:	9a01      	ldr	r2, [sp, #4]
 80127f0:	fb0c 2909 	mla	r9, ip, r9, r2
 80127f4:	9a02      	ldr	r2, [sp, #8]
 80127f6:	f819 900a 	ldrb.w	r9, [r9, sl]
 80127fa:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 80127fe:	f06f 0201 	mvn.w	r2, #1
 8012802:	fb02 f90e 	mul.w	r9, r2, lr
 8012806:	f82b a009 	strh.w	sl, [fp, r9]
 801280a:	443c      	add	r4, r7
 801280c:	4430      	add	r0, r6
 801280e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012812:	e786      	b.n	8012722 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8012814:	b005      	add	sp, #20
 8012816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801281a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801281a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281e:	b087      	sub	sp, #28
 8012820:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012822:	9205      	str	r2, [sp, #20]
 8012824:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012828:	9202      	str	r2, [sp, #8]
 801282a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801282e:	9101      	str	r1, [sp, #4]
 8012830:	6871      	ldr	r1, [r6, #4]
 8012832:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8012834:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
 8012838:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 801283c:	fb01 2404 	mla	r4, r1, r4, r2
 8012840:	6832      	ldr	r2, [r6, #0]
 8012842:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012846:	682a      	ldr	r2, [r5, #0]
 8012848:	9203      	str	r2, [sp, #12]
 801284a:	686a      	ldr	r2, [r5, #4]
 801284c:	fa1f fc80 	uxth.w	ip, r0
 8012850:	3204      	adds	r2, #4
 8012852:	43c0      	mvns	r0, r0
 8012854:	9200      	str	r2, [sp, #0]
 8012856:	b2c0      	uxtb	r0, r0
 8012858:	9a01      	ldr	r2, [sp, #4]
 801285a:	2a00      	cmp	r2, #0
 801285c:	dc03      	bgt.n	8012866 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 801285e:	9a05      	ldr	r2, [sp, #20]
 8012860:	2a00      	cmp	r2, #0
 8012862:	f340 811b 	ble.w	8012a9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 8012866:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012868:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801286c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801286e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012872:	2b00      	cmp	r3, #0
 8012874:	dd0f      	ble.n	8012896 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8012876:	140d      	asrs	r5, r1, #16
 8012878:	d406      	bmi.n	8012888 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801287a:	4575      	cmp	r5, lr
 801287c:	da04      	bge.n	8012888 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801287e:	1415      	asrs	r5, r2, #16
 8012880:	d402      	bmi.n	8012888 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012882:	9e02      	ldr	r6, [sp, #8]
 8012884:	42b5      	cmp	r5, r6
 8012886:	db07      	blt.n	8012898 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012888:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801288a:	4429      	add	r1, r5
 801288c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801288e:	3b01      	subs	r3, #1
 8012890:	442a      	add	r2, r5
 8012892:	3402      	adds	r4, #2
 8012894:	e7ed      	b.n	8012872 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58>
 8012896:	d00f      	beq.n	80128b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8012898:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801289a:	1e5d      	subs	r5, r3, #1
 801289c:	fb06 1605 	mla	r6, r6, r5, r1
 80128a0:	1436      	asrs	r6, r6, #16
 80128a2:	d547      	bpl.n	8012934 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11a>
 80128a4:	469a      	mov	sl, r3
 80128a6:	46a1      	mov	r9, r4
 80128a8:	f1ba 0f00 	cmp.w	sl, #0
 80128ac:	f300 809f 	bgt.w	80129ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 80128b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80128b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80128b8:	9b01      	ldr	r3, [sp, #4]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f340 80ee 	ble.w	8012a9c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x282>
 80128c0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80128c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80128cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80128d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80128d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80128da:	eef0 6a62 	vmov.f32	s13, s5
 80128de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80128e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80128e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80128ea:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80128ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80128f2:	eef0 6a43 	vmov.f32	s13, s6
 80128f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80128fa:	ee12 2a90 	vmov	r2, s5
 80128fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012902:	fb92 f3f3 	sdiv	r3, r2, r3
 8012906:	ee13 2a10 	vmov	r2, s6
 801290a:	9313      	str	r3, [sp, #76]	; 0x4c
 801290c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801290e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012912:	9314      	str	r3, [sp, #80]	; 0x50
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	9a05      	ldr	r2, [sp, #20]
 8012918:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801291c:	3b01      	subs	r3, #1
 801291e:	9301      	str	r3, [sp, #4]
 8012920:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8012924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012926:	eeb0 3a67 	vmov.f32	s6, s15
 801292a:	bf08      	it	eq
 801292c:	4613      	moveq	r3, r2
 801292e:	eef0 2a47 	vmov.f32	s5, s14
 8012932:	e791      	b.n	8012858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8012934:	4576      	cmp	r6, lr
 8012936:	dab5      	bge.n	80128a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012938:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801293a:	fb06 2505 	mla	r5, r6, r5, r2
 801293e:	142d      	asrs	r5, r5, #16
 8012940:	d4b0      	bmi.n	80128a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012942:	9e02      	ldr	r6, [sp, #8]
 8012944:	42b5      	cmp	r5, r6
 8012946:	daad      	bge.n	80128a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012948:	4699      	mov	r9, r3
 801294a:	46a2      	mov	sl, r4
 801294c:	f1b9 0f00 	cmp.w	r9, #0
 8012950:	ddae      	ble.n	80128b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8012952:	9f03      	ldr	r7, [sp, #12]
 8012954:	1415      	asrs	r5, r2, #16
 8012956:	140e      	asrs	r6, r1, #16
 8012958:	fb0e 7505 	mla	r5, lr, r5, r7
 801295c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012960:	f815 8006 	ldrb.w	r8, [r5, r6]
 8012964:	9d00      	ldr	r5, [sp, #0]
 8012966:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801296a:	eb05 0b08 	add.w	fp, r5, r8
 801296e:	f8ba 5000 	ldrh.w	r5, [sl]
 8012972:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8012976:	f89b b001 	ldrb.w	fp, [fp, #1]
 801297a:	122f      	asrs	r7, r5, #8
 801297c:	fb16 f60c 	smulbb	r6, r6, ip
 8012980:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012984:	fb07 6700 	mla	r7, r7, r0, r6
 8012988:	10ee      	asrs	r6, r5, #3
 801298a:	fb1b fb0c 	smulbb	fp, fp, ip
 801298e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012992:	fb06 b600 	mla	r6, r6, r0, fp
 8012996:	b2b6      	uxth	r6, r6
 8012998:	9604      	str	r6, [sp, #16]
 801299a:	9e00      	ldr	r6, [sp, #0]
 801299c:	00ed      	lsls	r5, r5, #3
 801299e:	f816 8008 	ldrb.w	r8, [r6, r8]
 80129a2:	b2ed      	uxtb	r5, r5
 80129a4:	fb15 f500 	smulbb	r5, r5, r0
 80129a8:	b2bf      	uxth	r7, r7
 80129aa:	fb08 580c 	mla	r8, r8, ip, r5
 80129ae:	fa1f f888 	uxth.w	r8, r8
 80129b2:	1c7d      	adds	r5, r7, #1
 80129b4:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80129b8:	f108 0501 	add.w	r5, r8, #1
 80129bc:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 80129c0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80129c4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80129c8:	432f      	orrs	r7, r5
 80129ca:	9d04      	ldr	r5, [sp, #16]
 80129cc:	f105 0b01 	add.w	fp, r5, #1
 80129d0:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 80129d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80129d6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80129da:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80129de:	4429      	add	r1, r5
 80129e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80129e2:	ea47 070b 	orr.w	r7, r7, fp
 80129e6:	f82a 7b02 	strh.w	r7, [sl], #2
 80129ea:	442a      	add	r2, r5
 80129ec:	e7ae      	b.n	801294c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x132>
 80129ee:	140e      	asrs	r6, r1, #16
 80129f0:	d44b      	bmi.n	8012a8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80129f2:	4576      	cmp	r6, lr
 80129f4:	da49      	bge.n	8012a8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80129f6:	1415      	asrs	r5, r2, #16
 80129f8:	d447      	bmi.n	8012a8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 80129fa:	9f02      	ldr	r7, [sp, #8]
 80129fc:	42bd      	cmp	r5, r7
 80129fe:	da44      	bge.n	8012a8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8012a00:	9f03      	ldr	r7, [sp, #12]
 8012a02:	fb0e 7505 	mla	r5, lr, r5, r7
 8012a06:	f815 8006 	ldrb.w	r8, [r5, r6]
 8012a0a:	9d00      	ldr	r5, [sp, #0]
 8012a0c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8012a10:	eb05 0b08 	add.w	fp, r5, r8
 8012a14:	f8b9 5000 	ldrh.w	r5, [r9]
 8012a18:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8012a1c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8012a20:	122f      	asrs	r7, r5, #8
 8012a22:	fb16 f60c 	smulbb	r6, r6, ip
 8012a26:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012a2a:	fb07 6700 	mla	r7, r7, r0, r6
 8012a2e:	10ee      	asrs	r6, r5, #3
 8012a30:	fb1b fb0c 	smulbb	fp, fp, ip
 8012a34:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012a38:	fb06 b600 	mla	r6, r6, r0, fp
 8012a3c:	b2b6      	uxth	r6, r6
 8012a3e:	9604      	str	r6, [sp, #16]
 8012a40:	9e00      	ldr	r6, [sp, #0]
 8012a42:	00ed      	lsls	r5, r5, #3
 8012a44:	f816 8008 	ldrb.w	r8, [r6, r8]
 8012a48:	b2ed      	uxtb	r5, r5
 8012a4a:	fb15 f500 	smulbb	r5, r5, r0
 8012a4e:	b2bf      	uxth	r7, r7
 8012a50:	fb08 580c 	mla	r8, r8, ip, r5
 8012a54:	fa1f f888 	uxth.w	r8, r8
 8012a58:	1c7d      	adds	r5, r7, #1
 8012a5a:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8012a5e:	f108 0501 	add.w	r5, r8, #1
 8012a62:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 8012a66:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8012a6a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012a6e:	432f      	orrs	r7, r5
 8012a70:	9d04      	ldr	r5, [sp, #16]
 8012a72:	f105 0b01 	add.w	fp, r5, #1
 8012a76:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8012a7a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8012a7e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8012a82:	ea47 070b 	orr.w	r7, r7, fp
 8012a86:	f8a9 7000 	strh.w	r7, [r9]
 8012a8a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012a8c:	4429      	add	r1, r5
 8012a8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012a90:	f109 0902 	add.w	r9, r9, #2
 8012a94:	442a      	add	r2, r5
 8012a96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a9a:	e705      	b.n	80128a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8012a9c:	b007      	add	sp, #28
 8012a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08012aa4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	b085      	sub	sp, #20
 8012aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012aae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012ab0:	9203      	str	r2, [sp, #12]
 8012ab2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012ab6:	6870      	ldr	r0, [r6, #4]
 8012ab8:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8012aba:	f9bd 7058 	ldrsh.w	r7, [sp, #88]	; 0x58
 8012abe:	f9bd 805c 	ldrsh.w	r8, [sp, #92]	; 0x5c
 8012ac2:	9101      	str	r1, [sp, #4]
 8012ac4:	fb00 2404 	mla	r4, r0, r4, r2
 8012ac8:	6832      	ldr	r2, [r6, #0]
 8012aca:	686e      	ldr	r6, [r5, #4]
 8012acc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012ad0:	682a      	ldr	r2, [r5, #0]
 8012ad2:	9202      	str	r2, [sp, #8]
 8012ad4:	3604      	adds	r6, #4
 8012ad6:	9a01      	ldr	r2, [sp, #4]
 8012ad8:	2a00      	cmp	r2, #0
 8012ada:	dc03      	bgt.n	8012ae4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x40>
 8012adc:	9a03      	ldr	r2, [sp, #12]
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	f340 80c7 	ble.w	8012c72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8012ae4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ae6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012aea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012aec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	dd0e      	ble.n	8012b12 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8012af4:	1405      	asrs	r5, r0, #16
 8012af6:	d405      	bmi.n	8012b04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8012af8:	42bd      	cmp	r5, r7
 8012afa:	da03      	bge.n	8012b04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8012afc:	1415      	asrs	r5, r2, #16
 8012afe:	d401      	bmi.n	8012b04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8012b00:	4545      	cmp	r5, r8
 8012b02:	db07      	blt.n	8012b14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8012b04:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012b06:	4428      	add	r0, r5
 8012b08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	442a      	add	r2, r5
 8012b0e:	3402      	adds	r4, #2
 8012b10:	e7ee      	b.n	8012af0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4c>
 8012b12:	d010      	beq.n	8012b36 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8012b14:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012b16:	1e5d      	subs	r5, r3, #1
 8012b18:	fb01 0c05 	mla	ip, r1, r5, r0
 8012b1c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8012b20:	d545      	bpl.n	8012bae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8012b22:	469e      	mov	lr, r3
 8012b24:	eb04 0b43 	add.w	fp, r4, r3, lsl #1
 8012b28:	f1be 0f00 	cmp.w	lr, #0
 8012b2c:	dc72      	bgt.n	8012c14 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x170>
 8012b2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012b32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012b36:	9b01      	ldr	r3, [sp, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f340 809a 	ble.w	8012c72 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ce>
 8012b3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012b42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012b46:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012b4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012b50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012b54:	eeb0 6a62 	vmov.f32	s12, s5
 8012b58:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012b5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012b60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012b64:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8012b68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012b6c:	eeb0 6a43 	vmov.f32	s12, s6
 8012b70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012b74:	ee12 2a90 	vmov	r2, s5
 8012b78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012b80:	ee13 2a10 	vmov	r2, s6
 8012b84:	9311      	str	r3, [sp, #68]	; 0x44
 8012b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8012b8c:	9312      	str	r3, [sp, #72]	; 0x48
 8012b8e:	9b01      	ldr	r3, [sp, #4]
 8012b90:	9a03      	ldr	r2, [sp, #12]
 8012b92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012b96:	3b01      	subs	r3, #1
 8012b98:	9301      	str	r3, [sp, #4]
 8012b9a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8012b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ba0:	eeb0 3a67 	vmov.f32	s6, s15
 8012ba4:	bf08      	it	eq
 8012ba6:	4613      	moveq	r3, r2
 8012ba8:	eef0 2a47 	vmov.f32	s5, s14
 8012bac:	e793      	b.n	8012ad6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x32>
 8012bae:	45bc      	cmp	ip, r7
 8012bb0:	dab7      	bge.n	8012b22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012bb2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012bb4:	fb01 2505 	mla	r5, r1, r5, r2
 8012bb8:	142d      	asrs	r5, r5, #16
 8012bba:	d4b2      	bmi.n	8012b22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012bbc:	4545      	cmp	r5, r8
 8012bbe:	dab0      	bge.n	8012b22 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8012bc0:	469e      	mov	lr, r3
 8012bc2:	46a2      	mov	sl, r4
 8012bc4:	f1be 0f00 	cmp.w	lr, #0
 8012bc8:	ddb1      	ble.n	8012b2e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 8012bca:	9902      	ldr	r1, [sp, #8]
 8012bcc:	1415      	asrs	r5, r2, #16
 8012bce:	fb07 1505 	mla	r5, r7, r5, r1
 8012bd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012bd6:	4928      	ldr	r1, [pc, #160]	; (8012c78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>)
 8012bd8:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8012bdc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012be0:	eb06 0b0c 	add.w	fp, r6, ip
 8012be4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012be8:	f89b 5001 	ldrb.w	r5, [fp, #1]
 8012bec:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8012bf0:	00ed      	lsls	r5, r5, #3
 8012bf2:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8012bf6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012bfa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012bfc:	ea49 0505 	orr.w	r5, r9, r5
 8012c00:	f816 900c 	ldrb.w	r9, [r6, ip]
 8012c04:	4408      	add	r0, r1
 8012c06:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012c08:	ea45 05d9 	orr.w	r5, r5, r9, lsr #3
 8012c0c:	f82a 5b02 	strh.w	r5, [sl], #2
 8012c10:	440a      	add	r2, r1
 8012c12:	e7d7      	b.n	8012bc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x120>
 8012c14:	ea5f 4c20 	movs.w	ip, r0, asr #16
 8012c18:	d424      	bmi.n	8012c64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8012c1a:	45bc      	cmp	ip, r7
 8012c1c:	da22      	bge.n	8012c64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8012c1e:	1415      	asrs	r5, r2, #16
 8012c20:	d420      	bmi.n	8012c64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8012c22:	4545      	cmp	r5, r8
 8012c24:	da1e      	bge.n	8012c64 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 8012c26:	9902      	ldr	r1, [sp, #8]
 8012c28:	fb07 1505 	mla	r5, r7, r5, r1
 8012c2c:	f06f 0101 	mvn.w	r1, #1
 8012c30:	f815 c00c 	ldrb.w	ip, [r5, ip]
 8012c34:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012c38:	eb06 050c 	add.w	r5, r6, ip
 8012c3c:	fb01 f90e 	mul.w	r9, r1, lr
 8012c40:	f895 a002 	ldrb.w	sl, [r5, #2]
 8012c44:	786d      	ldrb	r5, [r5, #1]
 8012c46:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8012c4a:	00ed      	lsls	r5, r5, #3
 8012c4c:	ea01 2a0a 	and.w	sl, r1, sl, lsl #8
 8012c50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8012c54:	ea4a 0505 	orr.w	r5, sl, r5
 8012c58:	f816 a00c 	ldrb.w	sl, [r6, ip]
 8012c5c:	ea45 05da 	orr.w	r5, r5, sl, lsr #3
 8012c60:	f82b 5009 	strh.w	r5, [fp, r9]
 8012c64:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012c66:	4408      	add	r0, r1
 8012c68:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012c6a:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012c6e:	440a      	add	r2, r1
 8012c70:	e75a      	b.n	8012b28 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8012c72:	b005      	add	sp, #20
 8012c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c78:	fffff800 	.word	0xfffff800

08012c7c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c80:	b087      	sub	sp, #28
 8012c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012c86:	9204      	str	r2, [sp, #16]
 8012c88:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012c8c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012c8e:	9201      	str	r2, [sp, #4]
 8012c90:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8012c94:	9205      	str	r2, [sp, #20]
 8012c96:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8012c9a:	9100      	str	r1, [sp, #0]
 8012c9c:	6869      	ldr	r1, [r5, #4]
 8012c9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012ca0:	f9bd e060 	ldrsh.w	lr, [sp, #96]	; 0x60
 8012ca4:	fb01 2404 	mla	r4, r1, r4, r2
 8012ca8:	682a      	ldr	r2, [r5, #0]
 8012caa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012cae:	6802      	ldr	r2, [r0, #0]
 8012cb0:	9202      	str	r2, [sp, #8]
 8012cb2:	6842      	ldr	r2, [r0, #4]
 8012cb4:	3204      	adds	r2, #4
 8012cb6:	9203      	str	r2, [sp, #12]
 8012cb8:	9a00      	ldr	r2, [sp, #0]
 8012cba:	2a00      	cmp	r2, #0
 8012cbc:	dc03      	bgt.n	8012cc6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8012cbe:	9a04      	ldr	r2, [sp, #16]
 8012cc0:	2a00      	cmp	r2, #0
 8012cc2:	f340 812c 	ble.w	8012f1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012cc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012cc8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012cce:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	dd0f      	ble.n	8012cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8012cd6:	1402      	asrs	r2, r0, #16
 8012cd8:	d406      	bmi.n	8012ce8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8012cda:	4572      	cmp	r2, lr
 8012cdc:	da04      	bge.n	8012ce8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8012cde:	140a      	asrs	r2, r1, #16
 8012ce0:	d402      	bmi.n	8012ce8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 8012ce2:	9d01      	ldr	r5, [sp, #4]
 8012ce4:	42aa      	cmp	r2, r5
 8012ce6:	db07      	blt.n	8012cf8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c>
 8012ce8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012cea:	4410      	add	r0, r2
 8012cec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	4411      	add	r1, r2
 8012cf2:	3402      	adds	r4, #2
 8012cf4:	e7ed      	b.n	8012cd2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56>
 8012cf6:	d00f      	beq.n	8012d18 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8012cf8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012cfa:	1e5a      	subs	r2, r3, #1
 8012cfc:	fb05 0502 	mla	r5, r5, r2, r0
 8012d00:	142d      	asrs	r5, r5, #16
 8012d02:	d545      	bpl.n	8012d90 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x114>
 8012d04:	4699      	mov	r9, r3
 8012d06:	46a0      	mov	r8, r4
 8012d08:	f1b9 0f00 	cmp.w	r9, #0
 8012d0c:	f300 80a7 	bgt.w	8012e5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8012d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012d18:	9b00      	ldr	r3, [sp, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	f340 80ff 	ble.w	8012f1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 8012d20:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012d24:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012d28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012d32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d36:	eeb0 6a62 	vmov.f32	s12, s5
 8012d3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012d46:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8012d4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012d4e:	eeb0 6a43 	vmov.f32	s12, s6
 8012d52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012d56:	ee12 2a90 	vmov	r2, s5
 8012d5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d62:	ee13 2a10 	vmov	r2, s6
 8012d66:	9313      	str	r3, [sp, #76]	; 0x4c
 8012d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d6e:	9314      	str	r3, [sp, #80]	; 0x50
 8012d70:	9b00      	ldr	r3, [sp, #0]
 8012d72:	9a04      	ldr	r2, [sp, #16]
 8012d74:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012d78:	3b01      	subs	r3, #1
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8012d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d82:	eeb0 3a67 	vmov.f32	s6, s15
 8012d86:	bf08      	it	eq
 8012d88:	4613      	moveq	r3, r2
 8012d8a:	eef0 2a47 	vmov.f32	s5, s14
 8012d8e:	e793      	b.n	8012cb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3c>
 8012d90:	4575      	cmp	r5, lr
 8012d92:	dab7      	bge.n	8012d04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8012d94:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012d96:	fb05 1202 	mla	r2, r5, r2, r1
 8012d9a:	1412      	asrs	r2, r2, #16
 8012d9c:	d4b2      	bmi.n	8012d04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8012d9e:	9d01      	ldr	r5, [sp, #4]
 8012da0:	42aa      	cmp	r2, r5
 8012da2:	daaf      	bge.n	8012d04 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x88>
 8012da4:	f04f 0800 	mov.w	r8, #0
 8012da8:	eba3 0208 	sub.w	r2, r3, r8
 8012dac:	2a00      	cmp	r2, #0
 8012dae:	ddaf      	ble.n	8012d10 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8012db0:	9e02      	ldr	r6, [sp, #8]
 8012db2:	140a      	asrs	r2, r1, #16
 8012db4:	1405      	asrs	r5, r0, #16
 8012db6:	fb0e 6202 	mla	r2, lr, r2, r6
 8012dba:	5d52      	ldrb	r2, [r2, r5]
 8012dbc:	9d03      	ldr	r5, [sp, #12]
 8012dbe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8012dc2:	0e2e      	lsrs	r6, r5, #24
 8012dc4:	d044      	beq.n	8012e50 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d4>
 8012dc6:	9a05      	ldr	r2, [sp, #20]
 8012dc8:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8012dcc:	4356      	muls	r6, r2
 8012dce:	1c72      	adds	r2, r6, #1
 8012dd0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8012dd4:	1212      	asrs	r2, r2, #8
 8012dd6:	fa1f f982 	uxth.w	r9, r2
 8012dda:	ea4f 272c 	mov.w	r7, ip, asr #8
 8012dde:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8012de2:	43d2      	mvns	r2, r2
 8012de4:	b2d2      	uxtb	r2, r2
 8012de6:	fb16 f609 	smulbb	r6, r6, r9
 8012dea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012dee:	fb07 6702 	mla	r7, r7, r2, r6
 8012df2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8012df6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8012dfa:	b2ed      	uxtb	r5, r5
 8012dfc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012e00:	fa5f fc8c 	uxtb.w	ip, ip
 8012e04:	fb15 f509 	smulbb	r5, r5, r9
 8012e08:	fb0c 5502 	mla	r5, ip, r2, r5
 8012e0c:	b2bf      	uxth	r7, r7
 8012e0e:	fb1a fa09 	smulbb	sl, sl, r9
 8012e12:	b2ad      	uxth	r5, r5
 8012e14:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012e18:	fb06 a602 	mla	r6, r6, r2, sl
 8012e1c:	1c7a      	adds	r2, r7, #1
 8012e1e:	f105 0a01 	add.w	sl, r5, #1
 8012e22:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012e26:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8012e2a:	b2b6      	uxth	r6, r6
 8012e2c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8012e30:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012e34:	ea47 070a 	orr.w	r7, r7, sl
 8012e38:	f106 0a01 	add.w	sl, r6, #1
 8012e3c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8012e40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8012e44:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8012e48:	ea47 070a 	orr.w	r7, r7, sl
 8012e4c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8012e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e52:	4410      	add	r0, r2
 8012e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e56:	f108 0801 	add.w	r8, r8, #1
 8012e5a:	4411      	add	r1, r2
 8012e5c:	e7a4      	b.n	8012da8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x12c>
 8012e5e:	1405      	asrs	r5, r0, #16
 8012e60:	d454      	bmi.n	8012f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8012e62:	4575      	cmp	r5, lr
 8012e64:	da52      	bge.n	8012f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8012e66:	140a      	asrs	r2, r1, #16
 8012e68:	d450      	bmi.n	8012f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8012e6a:	9e01      	ldr	r6, [sp, #4]
 8012e6c:	42b2      	cmp	r2, r6
 8012e6e:	da4d      	bge.n	8012f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8012e70:	9e02      	ldr	r6, [sp, #8]
 8012e72:	fb0e 6202 	mla	r2, lr, r2, r6
 8012e76:	5d52      	ldrb	r2, [r2, r5]
 8012e78:	9d03      	ldr	r5, [sp, #12]
 8012e7a:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8012e7e:	0e2e      	lsrs	r6, r5, #24
 8012e80:	d044      	beq.n	8012f0c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8012e82:	9a05      	ldr	r2, [sp, #20]
 8012e84:	f8b8 c000 	ldrh.w	ip, [r8]
 8012e88:	4356      	muls	r6, r2
 8012e8a:	1c72      	adds	r2, r6, #1
 8012e8c:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8012e90:	1212      	asrs	r2, r2, #8
 8012e92:	fa1f fa82 	uxth.w	sl, r2
 8012e96:	ea4f 272c 	mov.w	r7, ip, asr #8
 8012e9a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8012e9e:	43d2      	mvns	r2, r2
 8012ea0:	b2d2      	uxtb	r2, r2
 8012ea2:	fb16 f60a 	smulbb	r6, r6, sl
 8012ea6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8012eaa:	fb07 6702 	mla	r7, r7, r2, r6
 8012eae:	f3c5 2b07 	ubfx	fp, r5, #8, #8
 8012eb2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8012eb6:	b2ed      	uxtb	r5, r5
 8012eb8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8012ebc:	fa5f fc8c 	uxtb.w	ip, ip
 8012ec0:	fb15 f50a 	smulbb	r5, r5, sl
 8012ec4:	fb0c 5502 	mla	r5, ip, r2, r5
 8012ec8:	b2bf      	uxth	r7, r7
 8012eca:	fb1b fb0a 	smulbb	fp, fp, sl
 8012ece:	b2ad      	uxth	r5, r5
 8012ed0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8012ed4:	fb06 b602 	mla	r6, r6, r2, fp
 8012ed8:	1c7a      	adds	r2, r7, #1
 8012eda:	f105 0b01 	add.w	fp, r5, #1
 8012ede:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8012ee2:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 8012ee6:	b2b6      	uxth	r6, r6
 8012ee8:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8012eec:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8012ef0:	ea47 070b 	orr.w	r7, r7, fp
 8012ef4:	f106 0b01 	add.w	fp, r6, #1
 8012ef8:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8012efc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8012f00:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8012f04:	ea47 070b 	orr.w	r7, r7, fp
 8012f08:	f8a8 7000 	strh.w	r7, [r8]
 8012f0c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012f0e:	4410      	add	r0, r2
 8012f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f12:	f108 0802 	add.w	r8, r8, #2
 8012f16:	4411      	add	r1, r2
 8012f18:	f109 39ff 	add.w	r9, r9, #4294967295
 8012f1c:	e6f4      	b.n	8012d08 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8012f1e:	b007      	add	sp, #28
 8012f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f24 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8012f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f28:	b087      	sub	sp, #28
 8012f2a:	468b      	mov	fp, r1
 8012f2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012f2e:	9205      	str	r2, [sp, #20]
 8012f30:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8012f34:	9201      	str	r2, [sp, #4]
 8012f36:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8012f3a:	6869      	ldr	r1, [r5, #4]
 8012f3c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8012f3e:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8012f42:	fb01 2404 	mla	r4, r1, r4, r2
 8012f46:	682a      	ldr	r2, [r5, #0]
 8012f48:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8012f4c:	6802      	ldr	r2, [r0, #0]
 8012f4e:	9203      	str	r2, [sp, #12]
 8012f50:	6842      	ldr	r2, [r0, #4]
 8012f52:	3204      	adds	r2, #4
 8012f54:	9204      	str	r2, [sp, #16]
 8012f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012f5a:	f1bb 0f00 	cmp.w	fp, #0
 8012f5e:	dc03      	bgt.n	8012f68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8012f60:	9a05      	ldr	r2, [sp, #20]
 8012f62:	2a00      	cmp	r2, #0
 8012f64:	f340 814a 	ble.w	80131fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8012f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012f6a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8012f6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012f70:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	dd0f      	ble.n	8012f98 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8012f78:	1408      	asrs	r0, r1, #16
 8012f7a:	d406      	bmi.n	8012f8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8012f7c:	4540      	cmp	r0, r8
 8012f7e:	da04      	bge.n	8012f8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8012f80:	1410      	asrs	r0, r2, #16
 8012f82:	d402      	bmi.n	8012f8a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8012f84:	9d01      	ldr	r5, [sp, #4]
 8012f86:	42a8      	cmp	r0, r5
 8012f88:	db07      	blt.n	8012f9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8012f8a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8012f8c:	4401      	add	r1, r0
 8012f8e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012f90:	3b01      	subs	r3, #1
 8012f92:	4402      	add	r2, r0
 8012f94:	3402      	adds	r4, #2
 8012f96:	e7ed      	b.n	8012f74 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8012f98:	d018      	beq.n	8012fcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa8>
 8012f9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8012f9c:	1e58      	subs	r0, r3, #1
 8012f9e:	fb05 1500 	mla	r5, r5, r0, r1
 8012fa2:	142d      	asrs	r5, r5, #16
 8012fa4:	d40a      	bmi.n	8012fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8012fa6:	4545      	cmp	r5, r8
 8012fa8:	da08      	bge.n	8012fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8012faa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8012fac:	fb05 2000 	mla	r0, r5, r0, r2
 8012fb0:	1400      	asrs	r0, r0, #16
 8012fb2:	d403      	bmi.n	8012fbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8012fb4:	9d01      	ldr	r5, [sp, #4]
 8012fb6:	42a8      	cmp	r0, r5
 8012fb8:	f2c0 80b7 	blt.w	801312a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x206>
 8012fbc:	2600      	movs	r6, #0
 8012fbe:	1998      	adds	r0, r3, r6
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	dc3e      	bgt.n	8013042 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11e>
 8012fc4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012fc8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012fcc:	f1bb 0f00 	cmp.w	fp, #0
 8012fd0:	f340 8114 	ble.w	80131fc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d8>
 8012fd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012fd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012fdc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012fe0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012fe2:	f1bb 0b01 	subs.w	fp, fp, #1
 8012fe6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012fea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012fee:	eeb0 6a62 	vmov.f32	s12, s5
 8012ff2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012ff6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012ffa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012ffe:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013002:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013006:	eeb0 6a43 	vmov.f32	s12, s6
 801300a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801300e:	ee12 2a90 	vmov	r2, s5
 8013012:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013016:	fb92 f3f3 	sdiv	r3, r2, r3
 801301a:	ee13 2a10 	vmov	r2, s6
 801301e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013022:	9313      	str	r3, [sp, #76]	; 0x4c
 8013024:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013026:	fb92 f3f3 	sdiv	r3, r2, r3
 801302a:	9a05      	ldr	r2, [sp, #20]
 801302c:	9314      	str	r3, [sp, #80]	; 0x50
 801302e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013034:	eeb0 3a67 	vmov.f32	s6, s15
 8013038:	bf08      	it	eq
 801303a:	4613      	moveq	r3, r2
 801303c:	eef0 2a47 	vmov.f32	s5, s14
 8013040:	e78b      	b.n	8012f5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8013042:	140d      	asrs	r5, r1, #16
 8013044:	d459      	bmi.n	80130fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013046:	4545      	cmp	r5, r8
 8013048:	da57      	bge.n	80130fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801304a:	1410      	asrs	r0, r2, #16
 801304c:	d455      	bmi.n	80130fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801304e:	9f01      	ldr	r7, [sp, #4]
 8013050:	42b8      	cmp	r0, r7
 8013052:	da52      	bge.n	80130fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013054:	9f03      	ldr	r7, [sp, #12]
 8013056:	fb08 7000 	mla	r0, r8, r0, r7
 801305a:	5d40      	ldrb	r0, [r0, r5]
 801305c:	9d04      	ldr	r5, [sp, #16]
 801305e:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 8013062:	0e07      	lsrs	r7, r0, #24
 8013064:	2fff      	cmp	r7, #255	; 0xff
 8013066:	d04e      	beq.n	8013106 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8013068:	b2fd      	uxtb	r5, r7
 801306a:	2f00      	cmp	r7, #0
 801306c:	d045      	beq.n	80130fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801306e:	f06f 0701 	mvn.w	r7, #1
 8013072:	4377      	muls	r7, r6
 8013074:	fa1f f985 	uxth.w	r9, r5
 8013078:	f834 e007 	ldrh.w	lr, [r4, r7]
 801307c:	9702      	str	r7, [sp, #8]
 801307e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013082:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013086:	43ed      	mvns	r5, r5
 8013088:	b2ed      	uxtb	r5, r5
 801308a:	fb17 f709 	smulbb	r7, r7, r9
 801308e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013092:	fb0c 7c05 	mla	ip, ip, r5, r7
 8013096:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801309a:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801309e:	b2c0      	uxtb	r0, r0
 80130a0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80130a4:	fa5f fe8e 	uxtb.w	lr, lr
 80130a8:	fb10 f009 	smulbb	r0, r0, r9
 80130ac:	fb0e 0005 	mla	r0, lr, r5, r0
 80130b0:	b280      	uxth	r0, r0
 80130b2:	fa1f fc8c 	uxth.w	ip, ip
 80130b6:	fb1a fa09 	smulbb	sl, sl, r9
 80130ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80130be:	fb07 a705 	mla	r7, r7, r5, sl
 80130c2:	f100 0a01 	add.w	sl, r0, #1
 80130c6:	f10c 0501 	add.w	r5, ip, #1
 80130ca:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80130ce:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80130d2:	b2bf      	uxth	r7, r7
 80130d4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80130d8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80130dc:	ea4c 0c0a 	orr.w	ip, ip, sl
 80130e0:	f107 0a01 	add.w	sl, r7, #1
 80130e4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80130e8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80130ec:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80130f0:	9802      	ldr	r0, [sp, #8]
 80130f2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80130f6:	f824 c000 	strh.w	ip, [r4, r0]
 80130fa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80130fc:	4401      	add	r1, r0
 80130fe:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013100:	3e01      	subs	r6, #1
 8013102:	4402      	add	r2, r0
 8013104:	e75b      	b.n	8012fbe <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8013106:	f06f 0501 	mvn.w	r5, #1
 801310a:	fb05 f706 	mul.w	r7, r5, r6
 801310e:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8013112:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8013116:	0945      	lsrs	r5, r0, #5
 8013118:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801311c:	ea4c 0505 	orr.w	r5, ip, r5
 8013120:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8013124:	4305      	orrs	r5, r0
 8013126:	53e5      	strh	r5, [r4, r7]
 8013128:	e7e7      	b.n	80130fa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 801312a:	f04f 0e00 	mov.w	lr, #0
 801312e:	eba3 000e 	sub.w	r0, r3, lr
 8013132:	2800      	cmp	r0, #0
 8013134:	f77f af46 	ble.w	8012fc4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa0>
 8013138:	9e03      	ldr	r6, [sp, #12]
 801313a:	1410      	asrs	r0, r2, #16
 801313c:	140d      	asrs	r5, r1, #16
 801313e:	fb08 6000 	mla	r0, r8, r0, r6
 8013142:	5d40      	ldrb	r0, [r0, r5]
 8013144:	9d04      	ldr	r5, [sp, #16]
 8013146:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801314a:	0e06      	lsrs	r6, r0, #24
 801314c:	2eff      	cmp	r6, #255	; 0xff
 801314e:	d048      	beq.n	80131e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8013150:	b2f5      	uxtb	r5, r6
 8013152:	2e00      	cmp	r6, #0
 8013154:	d03e      	beq.n	80131d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8013156:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801315a:	fa1f f985 	uxth.w	r9, r5
 801315e:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013162:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8013166:	43ed      	mvns	r5, r5
 8013168:	b2ed      	uxtb	r5, r5
 801316a:	fb16 f609 	smulbb	r6, r6, r9
 801316e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013172:	fb07 6705 	mla	r7, r7, r5, r6
 8013176:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801317a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801317e:	b2c0      	uxtb	r0, r0
 8013180:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013184:	fa5f fc8c 	uxtb.w	ip, ip
 8013188:	fb10 f009 	smulbb	r0, r0, r9
 801318c:	fb0c 0005 	mla	r0, ip, r5, r0
 8013190:	b2bf      	uxth	r7, r7
 8013192:	fb1a fa09 	smulbb	sl, sl, r9
 8013196:	b280      	uxth	r0, r0
 8013198:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801319c:	fb06 a605 	mla	r6, r6, r5, sl
 80131a0:	1c7d      	adds	r5, r7, #1
 80131a2:	f100 0a01 	add.w	sl, r0, #1
 80131a6:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80131aa:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80131ae:	b2b6      	uxth	r6, r6
 80131b0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80131b4:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80131b8:	ea47 070a 	orr.w	r7, r7, sl
 80131bc:	f106 0a01 	add.w	sl, r6, #1
 80131c0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80131c4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80131c8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80131cc:	ea47 070a 	orr.w	r7, r7, sl
 80131d0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80131d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80131d6:	4401      	add	r1, r0
 80131d8:	9814      	ldr	r0, [sp, #80]	; 0x50
 80131da:	f10e 0e01 	add.w	lr, lr, #1
 80131de:	4402      	add	r2, r0
 80131e0:	e7a5      	b.n	801312e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20a>
 80131e2:	4d08      	ldr	r5, [pc, #32]	; (8013204 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e0>)
 80131e4:	ea05 2610 	and.w	r6, r5, r0, lsr #8
 80131e8:	0945      	lsrs	r5, r0, #5
 80131ea:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80131ee:	4335      	orrs	r5, r6
 80131f0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80131f4:	4305      	orrs	r5, r0
 80131f6:	f824 501e 	strh.w	r5, [r4, lr, lsl #1]
 80131fa:	e7eb      	b.n	80131d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80131fc:	b007      	add	sp, #28
 80131fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013202:	bf00      	nop
 8013204:	fffff800 	.word	0xfffff800

08013208 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801320c:	b087      	sub	sp, #28
 801320e:	468b      	mov	fp, r1
 8013210:	9204      	str	r2, [sp, #16]
 8013212:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013216:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013218:	9201      	str	r2, [sp, #4]
 801321a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 801321e:	9205      	str	r2, [sp, #20]
 8013220:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013224:	6869      	ldr	r1, [r5, #4]
 8013226:	981a      	ldr	r0, [sp, #104]	; 0x68
 8013228:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 801322c:	fb01 2404 	mla	r4, r1, r4, r2
 8013230:	682a      	ldr	r2, [r5, #0]
 8013232:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013236:	6802      	ldr	r2, [r0, #0]
 8013238:	9202      	str	r2, [sp, #8]
 801323a:	6842      	ldr	r2, [r0, #4]
 801323c:	9203      	str	r2, [sp, #12]
 801323e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013242:	f1bb 0f00 	cmp.w	fp, #0
 8013246:	dc03      	bgt.n	8013250 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8013248:	9a04      	ldr	r2, [sp, #16]
 801324a:	2a00      	cmp	r2, #0
 801324c:	f340 8136 	ble.w	80134bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8013250:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013252:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013256:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013258:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801325c:	2b00      	cmp	r3, #0
 801325e:	dd0f      	ble.n	8013280 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013260:	1408      	asrs	r0, r1, #16
 8013262:	d406      	bmi.n	8013272 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013264:	4540      	cmp	r0, r8
 8013266:	da04      	bge.n	8013272 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013268:	1410      	asrs	r0, r2, #16
 801326a:	d402      	bmi.n	8013272 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801326c:	9d01      	ldr	r5, [sp, #4]
 801326e:	42a8      	cmp	r0, r5
 8013270:	db07      	blt.n	8013282 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 8013272:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013274:	4401      	add	r1, r0
 8013276:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013278:	3b01      	subs	r3, #1
 801327a:	4402      	add	r2, r0
 801327c:	3402      	adds	r4, #2
 801327e:	e7ed      	b.n	801325c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8013280:	d00f      	beq.n	80132a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8013282:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013284:	1e58      	subs	r0, r3, #1
 8013286:	fb05 1500 	mla	r5, r5, r0, r1
 801328a:	142d      	asrs	r5, r5, #16
 801328c:	d544      	bpl.n	8013318 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	46a2      	mov	sl, r4
 8013292:	9800      	ldr	r0, [sp, #0]
 8013294:	2800      	cmp	r0, #0
 8013296:	f300 80ab 	bgt.w	80133f0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801329a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801329e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80132a2:	f1bb 0f00 	cmp.w	fp, #0
 80132a6:	f340 8109 	ble.w	80134bc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 80132aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80132ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80132b2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80132b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132b8:	f1bb 0b01 	subs.w	fp, fp, #1
 80132bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80132c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80132c4:	eeb0 6a62 	vmov.f32	s12, s5
 80132c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80132cc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80132d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80132d4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80132d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80132dc:	eeb0 6a43 	vmov.f32	s12, s6
 80132e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80132e4:	ee12 2a90 	vmov	r2, s5
 80132e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80132ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80132f0:	ee13 2a10 	vmov	r2, s6
 80132f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80132f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80132fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8013300:	9a04      	ldr	r2, [sp, #16]
 8013302:	9314      	str	r3, [sp, #80]	; 0x50
 8013304:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013308:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801330a:	eeb0 3a67 	vmov.f32	s6, s15
 801330e:	bf08      	it	eq
 8013310:	4613      	moveq	r3, r2
 8013312:	eef0 2a47 	vmov.f32	s5, s14
 8013316:	e794      	b.n	8013242 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8013318:	4545      	cmp	r5, r8
 801331a:	dab8      	bge.n	801328e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801331c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801331e:	fb05 2000 	mla	r0, r5, r0, r2
 8013322:	1400      	asrs	r0, r0, #16
 8013324:	d4b3      	bmi.n	801328e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 8013326:	9d01      	ldr	r5, [sp, #4]
 8013328:	42a8      	cmp	r0, r5
 801332a:	dab0      	bge.n	801328e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x86>
 801332c:	f04f 0900 	mov.w	r9, #0
 8013330:	eba3 0009 	sub.w	r0, r3, r9
 8013334:	2800      	cmp	r0, #0
 8013336:	ddb0      	ble.n	801329a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013338:	140d      	asrs	r5, r1, #16
 801333a:	1410      	asrs	r0, r2, #16
 801333c:	fb08 5000 	mla	r0, r8, r0, r5
 8013340:	9d03      	ldr	r5, [sp, #12]
 8013342:	5c2e      	ldrb	r6, [r5, r0]
 8013344:	2e00      	cmp	r6, #0
 8013346:	d04c      	beq.n	80133e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1da>
 8013348:	9d02      	ldr	r5, [sp, #8]
 801334a:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 801334e:	9805      	ldr	r0, [sp, #20]
 8013350:	f834 5019 	ldrh.w	r5, [r4, r9, lsl #1]
 8013354:	4346      	muls	r6, r0
 8013356:	1c70      	adds	r0, r6, #1
 8013358:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 801335c:	1200      	asrs	r0, r0, #8
 801335e:	b287      	uxth	r7, r0
 8013360:	122e      	asrs	r6, r5, #8
 8013362:	43c0      	mvns	r0, r0
 8013364:	b2c0      	uxtb	r0, r0
 8013366:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801336a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801336e:	fb16 f600 	smulbb	r6, r6, r0
 8013372:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8013376:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801337a:	00ed      	lsls	r5, r5, #3
 801337c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8013380:	b2ed      	uxtb	r5, r5
 8013382:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013386:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801338a:	fb15 f500 	smulbb	r5, r5, r0
 801338e:	fa5f fe8e 	uxtb.w	lr, lr
 8013392:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8013396:	fb0e 5507 	mla	r5, lr, r7, r5
 801339a:	fb1a fa00 	smulbb	sl, sl, r0
 801339e:	fa1f fc8c 	uxth.w	ip, ip
 80133a2:	b2ad      	uxth	r5, r5
 80133a4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80133a8:	fb06 a607 	mla	r6, r6, r7, sl
 80133ac:	f10c 0001 	add.w	r0, ip, #1
 80133b0:	f105 0a01 	add.w	sl, r5, #1
 80133b4:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 80133b8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80133bc:	b2b6      	uxth	r6, r6
 80133be:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80133c2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80133c6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80133ca:	f106 0a01 	add.w	sl, r6, #1
 80133ce:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80133d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80133d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80133da:	ea4c 0c0a 	orr.w	ip, ip, sl
 80133de:	f824 c019 	strh.w	ip, [r4, r9, lsl #1]
 80133e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80133e4:	4401      	add	r1, r0
 80133e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80133e8:	f109 0901 	add.w	r9, r9, #1
 80133ec:	4402      	add	r2, r0
 80133ee:	e79f      	b.n	8013330 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x128>
 80133f0:	1408      	asrs	r0, r1, #16
 80133f2:	d459      	bmi.n	80134a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 80133f4:	4540      	cmp	r0, r8
 80133f6:	da57      	bge.n	80134a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 80133f8:	1415      	asrs	r5, r2, #16
 80133fa:	d455      	bmi.n	80134a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 80133fc:	9e01      	ldr	r6, [sp, #4]
 80133fe:	42b5      	cmp	r5, r6
 8013400:	da52      	bge.n	80134a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 8013402:	fb08 0005 	mla	r0, r8, r5, r0
 8013406:	9d03      	ldr	r5, [sp, #12]
 8013408:	5c2e      	ldrb	r6, [r5, r0]
 801340a:	2e00      	cmp	r6, #0
 801340c:	d04c      	beq.n	80134a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a0>
 801340e:	9d02      	ldr	r5, [sp, #8]
 8013410:	f835 e010 	ldrh.w	lr, [r5, r0, lsl #1]
 8013414:	9805      	ldr	r0, [sp, #20]
 8013416:	f8ba 5000 	ldrh.w	r5, [sl]
 801341a:	4346      	muls	r6, r0
 801341c:	1c70      	adds	r0, r6, #1
 801341e:	eb00 2016 	add.w	r0, r0, r6, lsr #8
 8013422:	1200      	asrs	r0, r0, #8
 8013424:	b287      	uxth	r7, r0
 8013426:	122e      	asrs	r6, r5, #8
 8013428:	43c0      	mvns	r0, r0
 801342a:	b2c0      	uxtb	r0, r0
 801342c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8013430:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8013434:	fb16 f600 	smulbb	r6, r6, r0
 8013438:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801343c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8013440:	00ed      	lsls	r5, r5, #3
 8013442:	fb0c 6c07 	mla	ip, ip, r7, r6
 8013446:	b2ed      	uxtb	r5, r5
 8013448:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801344c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013450:	fb15 f500 	smulbb	r5, r5, r0
 8013454:	fa5f fe8e 	uxtb.w	lr, lr
 8013458:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801345c:	fb0e 5507 	mla	r5, lr, r7, r5
 8013460:	fb19 f900 	smulbb	r9, r9, r0
 8013464:	fa1f fc8c 	uxth.w	ip, ip
 8013468:	b2ad      	uxth	r5, r5
 801346a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801346e:	fb06 9607 	mla	r6, r6, r7, r9
 8013472:	f10c 0001 	add.w	r0, ip, #1
 8013476:	f105 0901 	add.w	r9, r5, #1
 801347a:	eb00 2c1c 	add.w	ip, r0, ip, lsr #8
 801347e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8013482:	b2b6      	uxth	r6, r6
 8013484:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8013488:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801348c:	ea4c 0c09 	orr.w	ip, ip, r9
 8013490:	f106 0901 	add.w	r9, r6, #1
 8013494:	eb09 2916 	add.w	r9, r9, r6, lsr #8
 8013498:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801349c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80134a0:	ea4c 0c09 	orr.w	ip, ip, r9
 80134a4:	f8aa c000 	strh.w	ip, [sl]
 80134a8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80134aa:	4401      	add	r1, r0
 80134ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 80134ae:	4402      	add	r2, r0
 80134b0:	9800      	ldr	r0, [sp, #0]
 80134b2:	3801      	subs	r0, #1
 80134b4:	f10a 0a02 	add.w	sl, sl, #2
 80134b8:	9000      	str	r0, [sp, #0]
 80134ba:	e6ea      	b.n	8013292 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8a>
 80134bc:	b007      	add	sp, #28
 80134be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080134c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80134c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c6:	b087      	sub	sp, #28
 80134c8:	468b      	mov	fp, r1
 80134ca:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80134cc:	9205      	str	r2, [sp, #20]
 80134ce:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80134d2:	9202      	str	r2, [sp, #8]
 80134d4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80134d8:	6869      	ldr	r1, [r5, #4]
 80134da:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80134dc:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 80134e0:	fb01 2000 	mla	r0, r1, r0, r2
 80134e4:	682a      	ldr	r2, [r5, #0]
 80134e6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80134ea:	6822      	ldr	r2, [r4, #0]
 80134ec:	9201      	str	r2, [sp, #4]
 80134ee:	6862      	ldr	r2, [r4, #4]
 80134f0:	9204      	str	r2, [sp, #16]
 80134f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80134f6:	f1bb 0f00 	cmp.w	fp, #0
 80134fa:	dc03      	bgt.n	8013504 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 80134fc:	9a05      	ldr	r2, [sp, #20]
 80134fe:	2a00      	cmp	r2, #0
 8013500:	f340 813d 	ble.w	801377e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8013504:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013506:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801350a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801350c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013510:	2b00      	cmp	r3, #0
 8013512:	dd0f      	ble.n	8013534 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 8013514:	140c      	asrs	r4, r1, #16
 8013516:	d406      	bmi.n	8013526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8013518:	454c      	cmp	r4, r9
 801351a:	da04      	bge.n	8013526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801351c:	1414      	asrs	r4, r2, #16
 801351e:	d402      	bmi.n	8013526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 8013520:	9d02      	ldr	r5, [sp, #8]
 8013522:	42ac      	cmp	r4, r5
 8013524:	db07      	blt.n	8013536 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013526:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013528:	4421      	add	r1, r4
 801352a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801352c:	3b01      	subs	r3, #1
 801352e:	4422      	add	r2, r4
 8013530:	3002      	adds	r0, #2
 8013532:	e7ed      	b.n	8013510 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e>
 8013534:	d018      	beq.n	8013568 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa6>
 8013536:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013538:	1e5c      	subs	r4, r3, #1
 801353a:	fb05 1504 	mla	r5, r5, r4, r1
 801353e:	142d      	asrs	r5, r5, #16
 8013540:	d40a      	bmi.n	8013558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8013542:	454d      	cmp	r5, r9
 8013544:	da08      	bge.n	8013558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8013546:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013548:	fb05 2404 	mla	r4, r5, r4, r2
 801354c:	1424      	asrs	r4, r4, #16
 801354e:	d403      	bmi.n	8013558 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 8013550:	9d02      	ldr	r5, [sp, #8]
 8013552:	42ac      	cmp	r4, r5
 8013554:	f2c0 80ae 	blt.w	80136b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f2>
 8013558:	2600      	movs	r6, #0
 801355a:	199c      	adds	r4, r3, r6
 801355c:	2c00      	cmp	r4, #0
 801355e:	dc3e      	bgt.n	80135de <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 8013560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013564:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013568:	f1bb 0f00 	cmp.w	fp, #0
 801356c:	f340 8107 	ble.w	801377e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8013570:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013574:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013578:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801357c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801357e:	f1bb 0b01 	subs.w	fp, fp, #1
 8013582:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013586:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801358a:	eeb0 6a62 	vmov.f32	s12, s5
 801358e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013592:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013596:	ee77 2a62 	vsub.f32	s5, s14, s5
 801359a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801359e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80135a2:	eeb0 6a43 	vmov.f32	s12, s6
 80135a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80135aa:	ee12 2a90 	vmov	r2, s5
 80135ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80135b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80135b6:	ee13 2a10 	vmov	r2, s6
 80135ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80135be:	9313      	str	r3, [sp, #76]	; 0x4c
 80135c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80135c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80135c6:	9a05      	ldr	r2, [sp, #20]
 80135c8:	9314      	str	r3, [sp, #80]	; 0x50
 80135ca:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80135ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80135d0:	eeb0 3a67 	vmov.f32	s6, s15
 80135d4:	bf08      	it	eq
 80135d6:	4613      	moveq	r3, r2
 80135d8:	eef0 2a47 	vmov.f32	s5, s14
 80135dc:	e78b      	b.n	80134f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34>
 80135de:	140c      	asrs	r4, r1, #16
 80135e0:	d45a      	bmi.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80135e2:	454c      	cmp	r4, r9
 80135e4:	da58      	bge.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80135e6:	1415      	asrs	r5, r2, #16
 80135e8:	d456      	bmi.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80135ea:	9f02      	ldr	r7, [sp, #8]
 80135ec:	42bd      	cmp	r5, r7
 80135ee:	da53      	bge.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80135f0:	fb09 4505 	mla	r5, r9, r5, r4
 80135f4:	9c04      	ldr	r4, [sp, #16]
 80135f6:	5d64      	ldrb	r4, [r4, r5]
 80135f8:	2cff      	cmp	r4, #255	; 0xff
 80135fa:	d053      	beq.n	80136a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 80135fc:	2c00      	cmp	r4, #0
 80135fe:	d04b      	beq.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013600:	9f01      	ldr	r7, [sp, #4]
 8013602:	f837 8015 	ldrh.w	r8, [r7, r5, lsl #1]
 8013606:	f06f 0501 	mvn.w	r5, #1
 801360a:	4375      	muls	r5, r6
 801360c:	9503      	str	r5, [sp, #12]
 801360e:	5b45      	ldrh	r5, [r0, r5]
 8013610:	fa1f fc84 	uxth.w	ip, r4
 8013614:	122f      	asrs	r7, r5, #8
 8013616:	43e4      	mvns	r4, r4
 8013618:	b2e4      	uxtb	r4, r4
 801361a:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801361e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013622:	fb17 f704 	smulbb	r7, r7, r4
 8013626:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801362a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801362e:	00ed      	lsls	r5, r5, #3
 8013630:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8013634:	b2ed      	uxtb	r5, r5
 8013636:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801363a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801363e:	fb15 f504 	smulbb	r5, r5, r4
 8013642:	fa5f f888 	uxtb.w	r8, r8
 8013646:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801364a:	fb08 550c 	mla	r5, r8, ip, r5
 801364e:	fb1a fa04 	smulbb	sl, sl, r4
 8013652:	fa1f fe8e 	uxth.w	lr, lr
 8013656:	b2ad      	uxth	r5, r5
 8013658:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801365c:	fb07 a70c 	mla	r7, r7, ip, sl
 8013660:	f10e 0401 	add.w	r4, lr, #1
 8013664:	f105 0a01 	add.w	sl, r5, #1
 8013668:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801366c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013670:	b2bf      	uxth	r7, r7
 8013672:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013676:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801367a:	ea4e 0e0a 	orr.w	lr, lr, sl
 801367e:	f107 0a01 	add.w	sl, r7, #1
 8013682:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8013686:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801368a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801368e:	9c03      	ldr	r4, [sp, #12]
 8013690:	ea4e 0e0a 	orr.w	lr, lr, sl
 8013694:	f820 e004 	strh.w	lr, [r0, r4]
 8013698:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801369a:	4421      	add	r1, r4
 801369c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801369e:	3e01      	subs	r6, #1
 80136a0:	4422      	add	r2, r4
 80136a2:	e75a      	b.n	801355a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 80136a4:	9c01      	ldr	r4, [sp, #4]
 80136a6:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 80136aa:	f06f 0401 	mvn.w	r4, #1
 80136ae:	4374      	muls	r4, r6
 80136b0:	5305      	strh	r5, [r0, r4]
 80136b2:	e7f1      	b.n	8013698 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 80136b4:	f04f 0800 	mov.w	r8, #0
 80136b8:	eba3 0408 	sub.w	r4, r3, r8
 80136bc:	2c00      	cmp	r4, #0
 80136be:	f77f af4f 	ble.w	8013560 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80136c2:	140c      	asrs	r4, r1, #16
 80136c4:	1415      	asrs	r5, r2, #16
 80136c6:	fb09 4505 	mla	r5, r9, r5, r4
 80136ca:	9c04      	ldr	r4, [sp, #16]
 80136cc:	5d64      	ldrb	r4, [r4, r5]
 80136ce:	2cff      	cmp	r4, #255	; 0xff
 80136d0:	d04f      	beq.n	8013772 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 80136d2:	2c00      	cmp	r4, #0
 80136d4:	d046      	beq.n	8013764 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 80136d6:	9e01      	ldr	r6, [sp, #4]
 80136d8:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 80136dc:	f830 5018 	ldrh.w	r5, [r0, r8, lsl #1]
 80136e0:	b2a7      	uxth	r7, r4
 80136e2:	122e      	asrs	r6, r5, #8
 80136e4:	43e4      	mvns	r4, r4
 80136e6:	b2e4      	uxtb	r4, r4
 80136e8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80136ec:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80136f0:	fb16 f604 	smulbb	r6, r6, r4
 80136f4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80136f8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80136fc:	00ed      	lsls	r5, r5, #3
 80136fe:	fb0c 6c07 	mla	ip, ip, r7, r6
 8013702:	b2ed      	uxtb	r5, r5
 8013704:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013708:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801370c:	fb15 f504 	smulbb	r5, r5, r4
 8013710:	fa5f fe8e 	uxtb.w	lr, lr
 8013714:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8013718:	fb0e 5507 	mla	r5, lr, r7, r5
 801371c:	fb1a fa04 	smulbb	sl, sl, r4
 8013720:	fa1f fc8c 	uxth.w	ip, ip
 8013724:	b2ad      	uxth	r5, r5
 8013726:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801372a:	fb06 a607 	mla	r6, r6, r7, sl
 801372e:	f10c 0401 	add.w	r4, ip, #1
 8013732:	f105 0a01 	add.w	sl, r5, #1
 8013736:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801373a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801373e:	b2b6      	uxth	r6, r6
 8013740:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013744:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013748:	ea4c 0c0a 	orr.w	ip, ip, sl
 801374c:	f106 0a01 	add.w	sl, r6, #1
 8013750:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013754:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013758:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801375c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8013760:	f820 c018 	strh.w	ip, [r0, r8, lsl #1]
 8013764:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013766:	4421      	add	r1, r4
 8013768:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801376a:	f108 0801 	add.w	r8, r8, #1
 801376e:	4422      	add	r2, r4
 8013770:	e7a2      	b.n	80136b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8013772:	9c01      	ldr	r4, [sp, #4]
 8013774:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8013778:	f820 4018 	strh.w	r4, [r0, r8, lsl #1]
 801377c:	e7f2      	b.n	8013764 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a2>
 801377e:	b007      	add	sp, #28
 8013780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013784 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013788:	b085      	sub	sp, #20
 801378a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801378c:	9203      	str	r2, [sp, #12]
 801378e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8013792:	9201      	str	r2, [sp, #4]
 8013794:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8013798:	9100      	str	r1, [sp, #0]
 801379a:	6841      	ldr	r1, [r0, #4]
 801379c:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80137a0:	f9bd 8058 	ldrsh.w	r8, [sp, #88]	; 0x58
 80137a4:	fb01 2404 	mla	r4, r1, r4, r2
 80137a8:	6802      	ldr	r2, [r0, #0]
 80137aa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80137ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80137b0:	fa1f fe85 	uxth.w	lr, r5
 80137b4:	6812      	ldr	r2, [r2, #0]
 80137b6:	9202      	str	r2, [sp, #8]
 80137b8:	43ed      	mvns	r5, r5
 80137ba:	b2ed      	uxtb	r5, r5
 80137bc:	9a00      	ldr	r2, [sp, #0]
 80137be:	2a00      	cmp	r2, #0
 80137c0:	dc03      	bgt.n	80137ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 80137c2:	9a03      	ldr	r2, [sp, #12]
 80137c4:	2a00      	cmp	r2, #0
 80137c6:	f340 8117 	ble.w	80139f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80137ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137cc:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80137d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80137d2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	dd0f      	ble.n	80137fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 80137da:	1408      	asrs	r0, r1, #16
 80137dc:	d406      	bmi.n	80137ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80137de:	4540      	cmp	r0, r8
 80137e0:	da04      	bge.n	80137ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80137e2:	1410      	asrs	r0, r2, #16
 80137e4:	d402      	bmi.n	80137ec <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 80137e6:	9e01      	ldr	r6, [sp, #4]
 80137e8:	42b0      	cmp	r0, r6
 80137ea:	db07      	blt.n	80137fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80137ec:	9811      	ldr	r0, [sp, #68]	; 0x44
 80137ee:	4401      	add	r1, r0
 80137f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80137f2:	3b01      	subs	r3, #1
 80137f4:	4402      	add	r2, r0
 80137f6:	3402      	adds	r4, #2
 80137f8:	e7ed      	b.n	80137d6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52>
 80137fa:	d069      	beq.n	80138d0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x14c>
 80137fc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80137fe:	1e58      	subs	r0, r3, #1
 8013800:	fb06 1600 	mla	r6, r6, r0, r1
 8013804:	1436      	asrs	r6, r6, #16
 8013806:	d459      	bmi.n	80138bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8013808:	4546      	cmp	r6, r8
 801380a:	da57      	bge.n	80138bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801380c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801380e:	fb06 2000 	mla	r0, r6, r0, r2
 8013812:	1400      	asrs	r0, r0, #16
 8013814:	d452      	bmi.n	80138bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 8013816:	9e01      	ldr	r6, [sp, #4]
 8013818:	42b0      	cmp	r0, r6
 801381a:	da4f      	bge.n	80138bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x138>
 801381c:	469a      	mov	sl, r3
 801381e:	46a3      	mov	fp, r4
 8013820:	f1ba 0f00 	cmp.w	sl, #0
 8013824:	dd50      	ble.n	80138c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x144>
 8013826:	140e      	asrs	r6, r1, #16
 8013828:	1410      	asrs	r0, r2, #16
 801382a:	fb08 6000 	mla	r0, r8, r0, r6
 801382e:	9e02      	ldr	r6, [sp, #8]
 8013830:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8013834:	f8bb 6000 	ldrh.w	r6, [fp]
 8013838:	1237      	asrs	r7, r6, #8
 801383a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801383e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013842:	fb17 f705 	smulbb	r7, r7, r5
 8013846:	ea4f 09e6 	mov.w	r9, r6, asr #3
 801384a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801384e:	00f6      	lsls	r6, r6, #3
 8013850:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8013854:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8013858:	10c7      	asrs	r7, r0, #3
 801385a:	b2f6      	uxtb	r6, r6
 801385c:	00c0      	lsls	r0, r0, #3
 801385e:	fb19 f905 	smulbb	r9, r9, r5
 8013862:	fb16 f605 	smulbb	r6, r6, r5
 8013866:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801386a:	b2c0      	uxtb	r0, r0
 801386c:	fa1f fc8c 	uxth.w	ip, ip
 8013870:	fb07 970e 	mla	r7, r7, lr, r9
 8013874:	fb00 600e 	mla	r0, r0, lr, r6
 8013878:	b280      	uxth	r0, r0
 801387a:	b2bf      	uxth	r7, r7
 801387c:	f10c 0601 	add.w	r6, ip, #1
 8013880:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 8013884:	f107 0901 	add.w	r9, r7, #1
 8013888:	1c46      	adds	r6, r0, #1
 801388a:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801388e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8013892:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013894:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013898:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801389c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80138a0:	ea4c 0c06 	orr.w	ip, ip, r6
 80138a4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80138a8:	4401      	add	r1, r0
 80138aa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80138ac:	ea4c 0c09 	orr.w	ip, ip, r9
 80138b0:	f82b cb02 	strh.w	ip, [fp], #2
 80138b4:	4402      	add	r2, r0
 80138b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138ba:	e7b1      	b.n	8013820 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 80138bc:	f04f 0900 	mov.w	r9, #0
 80138c0:	eb03 0009 	add.w	r0, r3, r9
 80138c4:	2800      	cmp	r0, #0
 80138c6:	dc41      	bgt.n	801394c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c8>
 80138c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80138cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80138d0:	9b00      	ldr	r3, [sp, #0]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f340 8090 	ble.w	80139f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 80138d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80138dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80138e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80138e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80138ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80138ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80138f2:	eef0 6a62 	vmov.f32	s13, s5
 80138f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80138fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80138fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013902:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8013906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801390a:	eef0 6a43 	vmov.f32	s13, s6
 801390e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013912:	ee12 2a90 	vmov	r2, s5
 8013916:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801391a:	fb92 f3f3 	sdiv	r3, r2, r3
 801391e:	ee13 2a10 	vmov	r2, s6
 8013922:	9311      	str	r3, [sp, #68]	; 0x44
 8013924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013926:	fb92 f3f3 	sdiv	r3, r2, r3
 801392a:	9312      	str	r3, [sp, #72]	; 0x48
 801392c:	9b00      	ldr	r3, [sp, #0]
 801392e:	9a03      	ldr	r2, [sp, #12]
 8013930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8013934:	3b01      	subs	r3, #1
 8013936:	9300      	str	r3, [sp, #0]
 8013938:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801393c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801393e:	eeb0 3a67 	vmov.f32	s6, s15
 8013942:	bf08      	it	eq
 8013944:	4613      	moveq	r3, r2
 8013946:	eef0 2a47 	vmov.f32	s5, s14
 801394a:	e737      	b.n	80137bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38>
 801394c:	140e      	asrs	r6, r1, #16
 801394e:	d44c      	bmi.n	80139ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8013950:	4546      	cmp	r6, r8
 8013952:	da4a      	bge.n	80139ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8013954:	1410      	asrs	r0, r2, #16
 8013956:	d448      	bmi.n	80139ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 8013958:	9f01      	ldr	r7, [sp, #4]
 801395a:	42b8      	cmp	r0, r7
 801395c:	da45      	bge.n	80139ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801395e:	fb08 6000 	mla	r0, r8, r0, r6
 8013962:	9e02      	ldr	r6, [sp, #8]
 8013964:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8013968:	f06f 0601 	mvn.w	r6, #1
 801396c:	fb06 fb09 	mul.w	fp, r6, r9
 8013970:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8013974:	f834 600b 	ldrh.w	r6, [r4, fp]
 8013978:	1237      	asrs	r7, r6, #8
 801397a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801397e:	fb17 f705 	smulbb	r7, r7, r5
 8013982:	ea4f 0ae6 	mov.w	sl, r6, asr #3
 8013986:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801398a:	00f6      	lsls	r6, r6, #3
 801398c:	fb0c 7c0e 	mla	ip, ip, lr, r7
 8013990:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8013994:	10c7      	asrs	r7, r0, #3
 8013996:	b2f6      	uxtb	r6, r6
 8013998:	00c0      	lsls	r0, r0, #3
 801399a:	fb1a fa05 	smulbb	sl, sl, r5
 801399e:	fb16 f605 	smulbb	r6, r6, r5
 80139a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80139a6:	b2c0      	uxtb	r0, r0
 80139a8:	fa1f fc8c 	uxth.w	ip, ip
 80139ac:	fb07 a70e 	mla	r7, r7, lr, sl
 80139b0:	fb00 600e 	mla	r0, r0, lr, r6
 80139b4:	b2bf      	uxth	r7, r7
 80139b6:	b280      	uxth	r0, r0
 80139b8:	f10c 0601 	add.w	r6, ip, #1
 80139bc:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80139c0:	f107 0a01 	add.w	sl, r7, #1
 80139c4:	1c46      	adds	r6, r0, #1
 80139c6:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80139ca:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80139ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80139d2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80139d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80139da:	ea4c 0c06 	orr.w	ip, ip, r6
 80139de:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80139e2:	ea4c 0c0a 	orr.w	ip, ip, sl
 80139e6:	f824 c00b 	strh.w	ip, [r4, fp]
 80139ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80139ec:	4401      	add	r1, r0
 80139ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80139f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80139f4:	4402      	add	r2, r0
 80139f6:	e763      	b.n	80138c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x13c>
 80139f8:	b005      	add	sp, #20
 80139fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080139fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80139fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a02:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013a04:	9201      	str	r2, [sp, #4]
 8013a06:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8013a0a:	6844      	ldr	r4, [r0, #4]
 8013a0c:	6800      	ldr	r0, [r0, #0]
 8013a0e:	f9bd c050 	ldrsh.w	ip, [sp, #80]	; 0x50
 8013a12:	f9bd e054 	ldrsh.w	lr, [sp, #84]	; 0x54
 8013a16:	fb04 2505 	mla	r5, r4, r5, r2
 8013a1a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013a1e:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013a20:	e9dd 760f 	ldrd	r7, r6, [sp, #60]	; 0x3c
 8013a24:	6802      	ldr	r2, [r0, #0]
 8013a26:	9200      	str	r2, [sp, #0]
 8013a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013a2c:	2900      	cmp	r1, #0
 8013a2e:	dc03      	bgt.n	8013a38 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8013a30:	9a01      	ldr	r2, [sp, #4]
 8013a32:	2a00      	cmp	r2, #0
 8013a34:	f340 8095 	ble.w	8013b62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8013a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a3a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013a3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a40:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	dd0e      	ble.n	8013a66 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8013a48:	ea5f 4824 	movs.w	r8, r4, asr #16
 8013a4c:	d406      	bmi.n	8013a5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8013a4e:	45e0      	cmp	r8, ip
 8013a50:	da04      	bge.n	8013a5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8013a52:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013a56:	d401      	bmi.n	8013a5c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 8013a58:	45f0      	cmp	r8, lr
 8013a5a:	db05      	blt.n	8013a68 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8013a5c:	443c      	add	r4, r7
 8013a5e:	4430      	add	r0, r6
 8013a60:	3b01      	subs	r3, #1
 8013a62:	3502      	adds	r5, #2
 8013a64:	e7ee      	b.n	8013a44 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46>
 8013a66:	d010      	beq.n	8013a8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8c>
 8013a68:	f103 38ff 	add.w	r8, r3, #4294967295
 8013a6c:	fb07 4908 	mla	r9, r7, r8, r4
 8013a70:	ea5f 4929 	movs.w	r9, r9, asr #16
 8013a74:	d53d      	bpl.n	8013af2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8013a76:	4698      	mov	r8, r3
 8013a78:	eb05 0b43 	add.w	fp, r5, r3, lsl #1
 8013a7c:	f1b8 0f00 	cmp.w	r8, #0
 8013a80:	dc55      	bgt.n	8013b2e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x130>
 8013a82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013a86:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8013a8a:	2900      	cmp	r1, #0
 8013a8c:	dd69      	ble.n	8013b62 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x164>
 8013a8e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013a92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013a96:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a9c:	3901      	subs	r1, #1
 8013a9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013aa2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013aa6:	eeb0 6a62 	vmov.f32	s12, s5
 8013aaa:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013aae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013ab2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013ab6:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8013aba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013abe:	eeb0 6a43 	vmov.f32	s12, s6
 8013ac2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013ac6:	ee12 2a90 	vmov	r2, s5
 8013aca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013ace:	fb92 f7f3 	sdiv	r7, r2, r3
 8013ad2:	ee13 2a10 	vmov	r2, s6
 8013ad6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013ada:	fb92 f6f3 	sdiv	r6, r2, r3
 8013ade:	9a01      	ldr	r2, [sp, #4]
 8013ae0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013ae4:	bf08      	it	eq
 8013ae6:	4613      	moveq	r3, r2
 8013ae8:	eeb0 3a67 	vmov.f32	s6, s15
 8013aec:	eef0 2a47 	vmov.f32	s5, s14
 8013af0:	e79c      	b.n	8013a2c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e>
 8013af2:	45e1      	cmp	r9, ip
 8013af4:	dabf      	bge.n	8013a76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013af6:	fb06 0808 	mla	r8, r6, r8, r0
 8013afa:	ea5f 4828 	movs.w	r8, r8, asr #16
 8013afe:	d4ba      	bmi.n	8013a76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013b00:	45f0      	cmp	r8, lr
 8013b02:	dab8      	bge.n	8013a76 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8013b04:	4698      	mov	r8, r3
 8013b06:	46aa      	mov	sl, r5
 8013b08:	f1b8 0f00 	cmp.w	r8, #0
 8013b0c:	ddb9      	ble.n	8013a82 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8013b0e:	ea4f 4920 	mov.w	r9, r0, asr #16
 8013b12:	ea4f 4b24 	mov.w	fp, r4, asr #16
 8013b16:	fb0c b909 	mla	r9, ip, r9, fp
 8013b1a:	9a00      	ldr	r2, [sp, #0]
 8013b1c:	f832 9019 	ldrh.w	r9, [r2, r9, lsl #1]
 8013b20:	f82a 9b02 	strh.w	r9, [sl], #2
 8013b24:	443c      	add	r4, r7
 8013b26:	4430      	add	r0, r6
 8013b28:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b2c:	e7ec      	b.n	8013b08 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 8013b2e:	ea5f 4a24 	movs.w	sl, r4, asr #16
 8013b32:	d411      	bmi.n	8013b58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013b34:	45e2      	cmp	sl, ip
 8013b36:	da0f      	bge.n	8013b58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013b38:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013b3c:	d40c      	bmi.n	8013b58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013b3e:	45f1      	cmp	r9, lr
 8013b40:	da0a      	bge.n	8013b58 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8013b42:	fb0c a909 	mla	r9, ip, r9, sl
 8013b46:	9a00      	ldr	r2, [sp, #0]
 8013b48:	f832 a019 	ldrh.w	sl, [r2, r9, lsl #1]
 8013b4c:	f06f 0201 	mvn.w	r2, #1
 8013b50:	fb02 f908 	mul.w	r9, r2, r8
 8013b54:	f82b a009 	strh.w	sl, [fp, r9]
 8013b58:	443c      	add	r4, r7
 8013b5a:	4430      	add	r0, r6
 8013b5c:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b60:	e78c      	b.n	8013a7c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7e>
 8013b62:	b003      	add	sp, #12
 8013b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b6c:	b087      	sub	sp, #28
 8013b6e:	468b      	mov	fp, r1
 8013b70:	9204      	str	r2, [sp, #16]
 8013b72:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013b76:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013b78:	9201      	str	r2, [sp, #4]
 8013b7a:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 8013b7e:	9205      	str	r2, [sp, #20]
 8013b80:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8013b84:	6841      	ldr	r1, [r0, #4]
 8013b86:	f9bd 8060 	ldrsh.w	r8, [sp, #96]	; 0x60
 8013b8a:	fb01 2404 	mla	r4, r1, r4, r2
 8013b8e:	6802      	ldr	r2, [r0, #0]
 8013b90:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8013b94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b96:	6812      	ldr	r2, [r2, #0]
 8013b98:	9203      	str	r2, [sp, #12]
 8013b9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013b9e:	f1bb 0f00 	cmp.w	fp, #0
 8013ba2:	dc03      	bgt.n	8013bac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44>
 8013ba4:	9a04      	ldr	r2, [sp, #16]
 8013ba6:	2a00      	cmp	r2, #0
 8013ba8:	f340 812c 	ble.w	8013e04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8013bac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013bae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013bb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bb4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	dd0f      	ble.n	8013bdc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8013bbc:	1402      	asrs	r2, r0, #16
 8013bbe:	d406      	bmi.n	8013bce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013bc0:	4542      	cmp	r2, r8
 8013bc2:	da04      	bge.n	8013bce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013bc4:	140a      	asrs	r2, r1, #16
 8013bc6:	d402      	bmi.n	8013bce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 8013bc8:	9d01      	ldr	r5, [sp, #4]
 8013bca:	42aa      	cmp	r2, r5
 8013bcc:	db07      	blt.n	8013bde <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 8013bce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013bd0:	4410      	add	r0, r2
 8013bd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bd4:	3b01      	subs	r3, #1
 8013bd6:	4411      	add	r1, r2
 8013bd8:	3402      	adds	r4, #2
 8013bda:	e7ed      	b.n	8013bb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8013bdc:	d01a      	beq.n	8013c14 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 8013bde:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013be0:	1e5a      	subs	r2, r3, #1
 8013be2:	fb05 0502 	mla	r5, r5, r2, r0
 8013be6:	142d      	asrs	r5, r5, #16
 8013be8:	d40a      	bmi.n	8013c00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013bea:	4545      	cmp	r5, r8
 8013bec:	da08      	bge.n	8013c00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013bee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013bf0:	fb05 1202 	mla	r2, r5, r2, r1
 8013bf4:	1412      	asrs	r2, r2, #16
 8013bf6:	d403      	bmi.n	8013c00 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x98>
 8013bf8:	9d01      	ldr	r5, [sp, #4]
 8013bfa:	42aa      	cmp	r2, r5
 8013bfc:	f2c0 80a6 	blt.w	8013d4c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 8013c00:	f04f 0c00 	mov.w	ip, #0
 8013c04:	eb03 020c 	add.w	r2, r3, ip
 8013c08:	2a00      	cmp	r2, #0
 8013c0a:	dc3e      	bgt.n	8013c8a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x122>
 8013c0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c10:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8013c14:	f1bb 0f00 	cmp.w	fp, #0
 8013c18:	f340 80f4 	ble.w	8013e04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 8013c1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013c20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013c24:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c2a:	f1bb 0b01 	subs.w	fp, fp, #1
 8013c2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013c32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013c36:	eeb0 6a62 	vmov.f32	s12, s5
 8013c3a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013c3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013c42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013c46:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013c4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013c4e:	eeb0 6a43 	vmov.f32	s12, s6
 8013c52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013c56:	ee12 2a90 	vmov	r2, s5
 8013c5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013c5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c62:	ee13 2a10 	vmov	r2, s6
 8013c66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013c6a:	9313      	str	r3, [sp, #76]	; 0x4c
 8013c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013c72:	9a04      	ldr	r2, [sp, #16]
 8013c74:	9314      	str	r3, [sp, #80]	; 0x50
 8013c76:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c7c:	eeb0 3a67 	vmov.f32	s6, s15
 8013c80:	bf08      	it	eq
 8013c82:	4613      	moveq	r3, r2
 8013c84:	eef0 2a47 	vmov.f32	s5, s14
 8013c88:	e789      	b.n	8013b9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36>
 8013c8a:	1405      	asrs	r5, r0, #16
 8013c8c:	d457      	bmi.n	8013d3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013c8e:	4545      	cmp	r5, r8
 8013c90:	da55      	bge.n	8013d3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013c92:	140a      	asrs	r2, r1, #16
 8013c94:	d453      	bmi.n	8013d3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013c96:	9e01      	ldr	r6, [sp, #4]
 8013c98:	42b2      	cmp	r2, r6
 8013c9a:	da50      	bge.n	8013d3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013c9c:	fb08 5202 	mla	r2, r8, r2, r5
 8013ca0:	9d03      	ldr	r5, [sp, #12]
 8013ca2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013ca6:	0e2e      	lsrs	r6, r5, #24
 8013ca8:	d049      	beq.n	8013d3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013caa:	f06f 0201 	mvn.w	r2, #1
 8013cae:	fb02 f20c 	mul.w	r2, r2, ip
 8013cb2:	9202      	str	r2, [sp, #8]
 8013cb4:	f834 e002 	ldrh.w	lr, [r4, r2]
 8013cb8:	9a05      	ldr	r2, [sp, #20]
 8013cba:	4356      	muls	r6, r2
 8013cbc:	1c72      	adds	r2, r6, #1
 8013cbe:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013cc2:	1212      	asrs	r2, r2, #8
 8013cc4:	fa1f f982 	uxth.w	r9, r2
 8013cc8:	ea4f 272e 	mov.w	r7, lr, asr #8
 8013ccc:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013cd0:	43d2      	mvns	r2, r2
 8013cd2:	b2d2      	uxtb	r2, r2
 8013cd4:	fb16 f609 	smulbb	r6, r6, r9
 8013cd8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013cdc:	fb07 6702 	mla	r7, r7, r2, r6
 8013ce0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013ce4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8013ce8:	b2ed      	uxtb	r5, r5
 8013cea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8013cee:	fa5f fe8e 	uxtb.w	lr, lr
 8013cf2:	fb15 f509 	smulbb	r5, r5, r9
 8013cf6:	fb0e 5502 	mla	r5, lr, r2, r5
 8013cfa:	b2bf      	uxth	r7, r7
 8013cfc:	fb1a fa09 	smulbb	sl, sl, r9
 8013d00:	b2ad      	uxth	r5, r5
 8013d02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013d06:	fb06 a602 	mla	r6, r6, r2, sl
 8013d0a:	1c7a      	adds	r2, r7, #1
 8013d0c:	f105 0a01 	add.w	sl, r5, #1
 8013d10:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013d14:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013d18:	b2b6      	uxth	r6, r6
 8013d1a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013d1e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013d22:	ea47 070a 	orr.w	r7, r7, sl
 8013d26:	f106 0a01 	add.w	sl, r6, #1
 8013d2a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013d2e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013d32:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013d36:	9a02      	ldr	r2, [sp, #8]
 8013d38:	ea47 070a 	orr.w	r7, r7, sl
 8013d3c:	52a7      	strh	r7, [r4, r2]
 8013d3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013d40:	4410      	add	r0, r2
 8013d42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013d44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013d48:	4411      	add	r1, r2
 8013d4a:	e75b      	b.n	8013c04 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8013d4c:	f04f 0e00 	mov.w	lr, #0
 8013d50:	eba3 020e 	sub.w	r2, r3, lr
 8013d54:	2a00      	cmp	r2, #0
 8013d56:	f77f af59 	ble.w	8013c0c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8013d5a:	1405      	asrs	r5, r0, #16
 8013d5c:	140a      	asrs	r2, r1, #16
 8013d5e:	fb08 5202 	mla	r2, r8, r2, r5
 8013d62:	9d03      	ldr	r5, [sp, #12]
 8013d64:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8013d68:	0e2e      	lsrs	r6, r5, #24
 8013d6a:	d044      	beq.n	8013df6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28e>
 8013d6c:	9a05      	ldr	r2, [sp, #20]
 8013d6e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8013d72:	4356      	muls	r6, r2
 8013d74:	1c72      	adds	r2, r6, #1
 8013d76:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8013d7a:	1212      	asrs	r2, r2, #8
 8013d7c:	fa1f f982 	uxth.w	r9, r2
 8013d80:	ea4f 272c 	mov.w	r7, ip, asr #8
 8013d84:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8013d88:	43d2      	mvns	r2, r2
 8013d8a:	b2d2      	uxtb	r2, r2
 8013d8c:	fb16 f609 	smulbb	r6, r6, r9
 8013d90:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8013d94:	fb07 6702 	mla	r7, r7, r2, r6
 8013d98:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8013d9c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8013da0:	b2ed      	uxtb	r5, r5
 8013da2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8013da6:	fa5f fc8c 	uxtb.w	ip, ip
 8013daa:	fb15 f509 	smulbb	r5, r5, r9
 8013dae:	fb0c 5502 	mla	r5, ip, r2, r5
 8013db2:	b2bf      	uxth	r7, r7
 8013db4:	fb1a fa09 	smulbb	sl, sl, r9
 8013db8:	b2ad      	uxth	r5, r5
 8013dba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8013dbe:	fb06 a602 	mla	r6, r6, r2, sl
 8013dc2:	1c7a      	adds	r2, r7, #1
 8013dc4:	f105 0a01 	add.w	sl, r5, #1
 8013dc8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8013dcc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8013dd0:	b2b6      	uxth	r6, r6
 8013dd2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8013dd6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8013dda:	ea47 070a 	orr.w	r7, r7, sl
 8013dde:	f106 0a01 	add.w	sl, r6, #1
 8013de2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8013de6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8013dea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8013dee:	ea47 070a 	orr.w	r7, r7, sl
 8013df2:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 8013df6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013df8:	4410      	add	r0, r2
 8013dfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013dfc:	f10e 0e01 	add.w	lr, lr, #1
 8013e00:	4411      	add	r1, r2
 8013e02:	e7a5      	b.n	8013d50 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 8013e04:	b007      	add	sp, #28
 8013e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013e0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8013e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e10:	b087      	sub	sp, #28
 8013e12:	468b      	mov	fp, r1
 8013e14:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013e16:	9205      	str	r2, [sp, #20]
 8013e18:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8013e1c:	9201      	str	r2, [sp, #4]
 8013e1e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8013e22:	6861      	ldr	r1, [r4, #4]
 8013e24:	f9bd 9060 	ldrsh.w	r9, [sp, #96]	; 0x60
 8013e28:	fb01 2000 	mla	r0, r1, r0, r2
 8013e2c:	6822      	ldr	r2, [r4, #0]
 8013e2e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8013e32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013e34:	6812      	ldr	r2, [r2, #0]
 8013e36:	9203      	str	r2, [sp, #12]
 8013e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e3c:	f1bb 0f00 	cmp.w	fp, #0
 8013e40:	dc03      	bgt.n	8013e4a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3e>
 8013e42:	9a05      	ldr	r2, [sp, #20]
 8013e44:	2a00      	cmp	r2, #0
 8013e46:	f340 814b 	ble.w	80140e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 8013e4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013e4c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8013e50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e52:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	dd0f      	ble.n	8013e7a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8013e5a:	140c      	asrs	r4, r1, #16
 8013e5c:	d406      	bmi.n	8013e6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8013e5e:	454c      	cmp	r4, r9
 8013e60:	da04      	bge.n	8013e6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8013e62:	1414      	asrs	r4, r2, #16
 8013e64:	d402      	bmi.n	8013e6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 8013e66:	9d01      	ldr	r5, [sp, #4]
 8013e68:	42ac      	cmp	r4, r5
 8013e6a:	db07      	blt.n	8013e7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8013e6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013e6e:	4421      	add	r1, r4
 8013e70:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013e72:	3b01      	subs	r3, #1
 8013e74:	4422      	add	r2, r4
 8013e76:	3002      	adds	r0, #2
 8013e78:	e7ed      	b.n	8013e56 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a>
 8013e7a:	d018      	beq.n	8013eae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa2>
 8013e7c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8013e7e:	1e5c      	subs	r4, r3, #1
 8013e80:	fb05 1504 	mla	r5, r5, r4, r1
 8013e84:	142d      	asrs	r5, r5, #16
 8013e86:	d40a      	bmi.n	8013e9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013e88:	454d      	cmp	r5, r9
 8013e8a:	da08      	bge.n	8013e9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013e8c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013e8e:	fb05 2404 	mla	r4, r5, r4, r2
 8013e92:	1424      	asrs	r4, r4, #16
 8013e94:	d403      	bmi.n	8013e9e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8013e96:	9d01      	ldr	r5, [sp, #4]
 8013e98:	42ac      	cmp	r4, r5
 8013e9a:	f2c0 80bb 	blt.w	8014014 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x208>
 8013e9e:	2700      	movs	r7, #0
 8013ea0:	19dc      	adds	r4, r3, r7
 8013ea2:	2c00      	cmp	r4, #0
 8013ea4:	dc3e      	bgt.n	8013f24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x118>
 8013ea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013eaa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013eae:	f1bb 0f00 	cmp.w	fp, #0
 8013eb2:	f340 8115 	ble.w	80140e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d4>
 8013eb6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013eba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013ebe:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ec4:	f1bb 0b01 	subs.w	fp, fp, #1
 8013ec8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013ecc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013ed0:	eeb0 6a62 	vmov.f32	s12, s5
 8013ed4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013ed8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013edc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013ee0:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8013ee4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013ee8:	eeb0 6a43 	vmov.f32	s12, s6
 8013eec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013ef0:	ee12 2a90 	vmov	r2, s5
 8013ef4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013ef8:	fb92 f3f3 	sdiv	r3, r2, r3
 8013efc:	ee13 2a10 	vmov	r2, s6
 8013f00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013f04:	9313      	str	r3, [sp, #76]	; 0x4c
 8013f06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f08:	fb92 f3f3 	sdiv	r3, r2, r3
 8013f0c:	9a05      	ldr	r2, [sp, #20]
 8013f0e:	9314      	str	r3, [sp, #80]	; 0x50
 8013f10:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8013f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f16:	eeb0 3a67 	vmov.f32	s6, s15
 8013f1a:	bf08      	it	eq
 8013f1c:	4613      	moveq	r3, r2
 8013f1e:	eef0 2a47 	vmov.f32	s5, s14
 8013f22:	e78b      	b.n	8013e3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30>
 8013f24:	140d      	asrs	r5, r1, #16
 8013f26:	d45c      	bmi.n	8013fe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013f28:	454d      	cmp	r5, r9
 8013f2a:	da5a      	bge.n	8013fe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013f2c:	1414      	asrs	r4, r2, #16
 8013f2e:	d458      	bmi.n	8013fe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013f30:	9e01      	ldr	r6, [sp, #4]
 8013f32:	42b4      	cmp	r4, r6
 8013f34:	da55      	bge.n	8013fe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013f36:	fb09 5404 	mla	r4, r9, r4, r5
 8013f3a:	9d03      	ldr	r5, [sp, #12]
 8013f3c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8013f40:	ea5f 6e14 	movs.w	lr, r4, lsr #24
 8013f44:	d04d      	beq.n	8013fe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8013f46:	0a26      	lsrs	r6, r4, #8
 8013f48:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013f4c:	fa5f f58e 	uxtb.w	r5, lr
 8013f50:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8013f54:	9604      	str	r6, [sp, #16]
 8013f56:	d04a      	beq.n	8013fee <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e2>
 8013f58:	f06f 0601 	mvn.w	r6, #1
 8013f5c:	437e      	muls	r6, r7
 8013f5e:	fa1f fa85 	uxth.w	sl, r5
 8013f62:	f830 8006 	ldrh.w	r8, [r0, r6]
 8013f66:	9602      	str	r6, [sp, #8]
 8013f68:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8013f6c:	43ed      	mvns	r5, r5
 8013f6e:	fa5f fc8c 	uxtb.w	ip, ip
 8013f72:	b2ed      	uxtb	r5, r5
 8013f74:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8013f78:	fb1c fc0a 	smulbb	ip, ip, sl
 8013f7c:	fb0e cc05 	mla	ip, lr, r5, ip
 8013f80:	b2e4      	uxtb	r4, r4
 8013f82:	ea4f 0ee8 	mov.w	lr, r8, asr #3
 8013f86:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8013f8a:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8013f8e:	fa5f f888 	uxtb.w	r8, r8
 8013f92:	fb14 f40a 	smulbb	r4, r4, sl
 8013f96:	fb08 4405 	mla	r4, r8, r5, r4
 8013f9a:	b2a4      	uxth	r4, r4
 8013f9c:	fa1f fc8c 	uxth.w	ip, ip
 8013fa0:	fb16 f60a 	smulbb	r6, r6, sl
 8013fa4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8013fa8:	fb0e 6e05 	mla	lr, lr, r5, r6
 8013fac:	1c66      	adds	r6, r4, #1
 8013fae:	f10c 0501 	add.w	r5, ip, #1
 8013fb2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8013fb6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8013fba:	fa1f fe8e 	uxth.w	lr, lr
 8013fbe:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8013fc2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8013fc6:	ea4c 0c06 	orr.w	ip, ip, r6
 8013fca:	f10e 0601 	add.w	r6, lr, #1
 8013fce:	eb06 261e 	add.w	r6, r6, lr, lsr #8
 8013fd2:	0976      	lsrs	r6, r6, #5
 8013fd4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8013fd8:	9c02      	ldr	r4, [sp, #8]
 8013fda:	ea4c 0c06 	orr.w	ip, ip, r6
 8013fde:	f820 c004 	strh.w	ip, [r0, r4]
 8013fe2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013fe4:	4421      	add	r1, r4
 8013fe6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013fe8:	3f01      	subs	r7, #1
 8013fea:	4422      	add	r2, r4
 8013fec:	e758      	b.n	8013ea0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8013fee:	4e3e      	ldr	r6, [pc, #248]	; (80140e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 8013ff0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8013ff4:	ea06 2c0c 	and.w	ip, r6, ip, lsl #8
 8013ff8:	ea4c 0c04 	orr.w	ip, ip, r4
 8013ffc:	9c04      	ldr	r4, [sp, #16]
 8013ffe:	f06f 0501 	mvn.w	r5, #1
 8014002:	00e6      	lsls	r6, r4, #3
 8014004:	437d      	muls	r5, r7
 8014006:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 801400a:	ea4c 0c04 	orr.w	ip, ip, r4
 801400e:	f820 c005 	strh.w	ip, [r0, r5]
 8014012:	e7e6      	b.n	8013fe2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d6>
 8014014:	f04f 0800 	mov.w	r8, #0
 8014018:	eba3 0408 	sub.w	r4, r3, r8
 801401c:	2c00      	cmp	r4, #0
 801401e:	f77f af42 	ble.w	8013ea6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 8014022:	140d      	asrs	r5, r1, #16
 8014024:	1414      	asrs	r4, r2, #16
 8014026:	fb09 5404 	mla	r4, r9, r4, r5
 801402a:	9d03      	ldr	r5, [sp, #12]
 801402c:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
 8014030:	ea5f 6c14 	movs.w	ip, r4, lsr #24
 8014034:	d042      	beq.n	80140bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8014036:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801403a:	fa5f f58c 	uxtb.w	r5, ip
 801403e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8014042:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8014046:	d040      	beq.n	80140ca <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 8014048:	f830 e018 	ldrh.w	lr, [r0, r8, lsl #1]
 801404c:	fa1f fa85 	uxth.w	sl, r5
 8014050:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8014054:	43ed      	mvns	r5, r5
 8014056:	b2ff      	uxtb	r7, r7
 8014058:	b2ed      	uxtb	r5, r5
 801405a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801405e:	fb17 f70a 	smulbb	r7, r7, sl
 8014062:	fb0c 7705 	mla	r7, ip, r5, r7
 8014066:	b2e4      	uxtb	r4, r4
 8014068:	ea4f 0cee 	mov.w	ip, lr, asr #3
 801406c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014070:	fa5f fe8e 	uxtb.w	lr, lr
 8014074:	fb14 f40a 	smulbb	r4, r4, sl
 8014078:	fb0e 4405 	mla	r4, lr, r5, r4
 801407c:	b2f6      	uxtb	r6, r6
 801407e:	b2bf      	uxth	r7, r7
 8014080:	fb16 f60a 	smulbb	r6, r6, sl
 8014084:	b2a4      	uxth	r4, r4
 8014086:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801408a:	fb0c 6c05 	mla	ip, ip, r5, r6
 801408e:	1c7d      	adds	r5, r7, #1
 8014090:	1c66      	adds	r6, r4, #1
 8014092:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 8014096:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801409a:	fa1f fc8c 	uxth.w	ip, ip
 801409e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80140a2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80140a6:	4337      	orrs	r7, r6
 80140a8:	f10c 0601 	add.w	r6, ip, #1
 80140ac:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80140b0:	0976      	lsrs	r6, r6, #5
 80140b2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80140b6:	4337      	orrs	r7, r6
 80140b8:	f820 7018 	strh.w	r7, [r0, r8, lsl #1]
 80140bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80140be:	4421      	add	r1, r4
 80140c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80140c2:	f108 0801 	add.w	r8, r8, #1
 80140c6:	4422      	add	r2, r4
 80140c8:	e7a6      	b.n	8014018 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x20c>
 80140ca:	4d07      	ldr	r5, [pc, #28]	; (80140e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2dc>)
 80140cc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80140d0:	ea05 2707 	and.w	r7, r5, r7, lsl #8
 80140d4:	00f6      	lsls	r6, r6, #3
 80140d6:	4327      	orrs	r7, r4
 80140d8:	f406 64fc 	and.w	r4, r6, #2016	; 0x7e0
 80140dc:	4327      	orrs	r7, r4
 80140de:	e7eb      	b.n	80140b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ac>
 80140e0:	b007      	add	sp, #28
 80140e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e6:	bf00      	nop
 80140e8:	fffff800 	.word	0xfffff800

080140ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80140ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140f0:	b089      	sub	sp, #36	; 0x24
 80140f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80140f6:	9206      	str	r2, [sp, #24]
 80140f8:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 80140fc:	9202      	str	r2, [sp, #8]
 80140fe:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 8014102:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8014104:	9203      	str	r2, [sp, #12]
 8014106:	f89d 2074 	ldrb.w	r2, [sp, #116]	; 0x74
 801410a:	9207      	str	r2, [sp, #28]
 801410c:	e9dd 2518 	ldrd	r2, r5, [sp, #96]	; 0x60
 8014110:	6860      	ldr	r0, [r4, #4]
 8014112:	9101      	str	r1, [sp, #4]
 8014114:	fb00 2505 	mla	r5, r0, r5, r2
 8014118:	6822      	ldr	r2, [r4, #0]
 801411a:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801411e:	9a02      	ldr	r2, [sp, #8]
 8014120:	3201      	adds	r2, #1
 8014122:	f022 0201 	bic.w	r2, r2, #1
 8014126:	9204      	str	r2, [sp, #16]
 8014128:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801412a:	6812      	ldr	r2, [r2, #0]
 801412c:	9205      	str	r2, [sp, #20]
 801412e:	9a01      	ldr	r2, [sp, #4]
 8014130:	2a00      	cmp	r2, #0
 8014132:	dc03      	bgt.n	801413c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50>
 8014134:	9a06      	ldr	r2, [sp, #24]
 8014136:	2a00      	cmp	r2, #0
 8014138:	f340 8153 	ble.w	80143e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801413c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801413e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014142:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014144:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014148:	2b00      	cmp	r3, #0
 801414a:	dd10      	ble.n	801416e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x82>
 801414c:	1422      	asrs	r2, r4, #16
 801414e:	d407      	bmi.n	8014160 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014150:	9e02      	ldr	r6, [sp, #8]
 8014152:	4296      	cmp	r6, r2
 8014154:	dd04      	ble.n	8014160 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 8014156:	1402      	asrs	r2, r0, #16
 8014158:	d402      	bmi.n	8014160 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801415a:	9e03      	ldr	r6, [sp, #12]
 801415c:	42b2      	cmp	r2, r6
 801415e:	db07      	blt.n	8014170 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x84>
 8014160:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014162:	4414      	add	r4, r2
 8014164:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014166:	3b01      	subs	r3, #1
 8014168:	4410      	add	r0, r2
 801416a:	3502      	adds	r5, #2
 801416c:	e7ec      	b.n	8014148 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5c>
 801416e:	d00f      	beq.n	8014190 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8014170:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014172:	1e5a      	subs	r2, r3, #1
 8014174:	fb06 4602 	mla	r6, r6, r2, r4
 8014178:	1436      	asrs	r6, r6, #16
 801417a:	d545      	bpl.n	8014208 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x11c>
 801417c:	469a      	mov	sl, r3
 801417e:	46a9      	mov	r9, r5
 8014180:	f1ba 0f00 	cmp.w	sl, #0
 8014184:	f300 80ba 	bgt.w	80142fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x210>
 8014188:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801418c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8014190:	9b01      	ldr	r3, [sp, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	f340 8125 	ble.w	80143e2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 8014198:	ee30 0a04 	vadd.f32	s0, s0, s8
 801419c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80141a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80141a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80141aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80141ae:	eeb0 6a62 	vmov.f32	s12, s5
 80141b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80141b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80141ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80141be:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 80141c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80141c6:	eeb0 6a43 	vmov.f32	s12, s6
 80141ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80141ce:	ee12 2a90 	vmov	r2, s5
 80141d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80141d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80141da:	ee13 2a10 	vmov	r2, s6
 80141de:	9315      	str	r3, [sp, #84]	; 0x54
 80141e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80141e6:	9316      	str	r3, [sp, #88]	; 0x58
 80141e8:	9b01      	ldr	r3, [sp, #4]
 80141ea:	9a06      	ldr	r2, [sp, #24]
 80141ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80141f0:	3b01      	subs	r3, #1
 80141f2:	9301      	str	r3, [sp, #4]
 80141f4:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 80141f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80141fa:	eeb0 3a67 	vmov.f32	s6, s15
 80141fe:	bf08      	it	eq
 8014200:	4613      	moveq	r3, r2
 8014202:	eef0 2a47 	vmov.f32	s5, s14
 8014206:	e792      	b.n	801412e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42>
 8014208:	9f02      	ldr	r7, [sp, #8]
 801420a:	42b7      	cmp	r7, r6
 801420c:	ddb6      	ble.n	801417c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801420e:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8014210:	fb06 0202 	mla	r2, r6, r2, r0
 8014214:	1412      	asrs	r2, r2, #16
 8014216:	d4b1      	bmi.n	801417c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 8014218:	9e03      	ldr	r6, [sp, #12]
 801421a:	42b2      	cmp	r2, r6
 801421c:	daae      	bge.n	801417c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x90>
 801421e:	f04f 0800 	mov.w	r8, #0
 8014222:	eba3 0208 	sub.w	r2, r3, r8
 8014226:	2a00      	cmp	r2, #0
 8014228:	ddae      	ble.n	8014188 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801422a:	9904      	ldr	r1, [sp, #16]
 801422c:	1422      	asrs	r2, r4, #16
 801422e:	1406      	asrs	r6, r0, #16
 8014230:	fb01 2606 	mla	r6, r1, r6, r2
 8014234:	0872      	lsrs	r2, r6, #1
 8014236:	9905      	ldr	r1, [sp, #20]
 8014238:	5c8a      	ldrb	r2, [r1, r2]
 801423a:	07f1      	lsls	r1, r6, #31
 801423c:	bf54      	ite	pl
 801423e:	f002 020f 	andpl.w	r2, r2, #15
 8014242:	1112      	asrmi	r2, r2, #4
 8014244:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014248:	b2d2      	uxtb	r2, r2
 801424a:	2a00      	cmp	r2, #0
 801424c:	d04f      	beq.n	80142ee <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 801424e:	4966      	ldr	r1, [pc, #408]	; (80143e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8014250:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8014254:	680e      	ldr	r6, [r1, #0]
 8014256:	9907      	ldr	r1, [sp, #28]
 8014258:	434a      	muls	r2, r1
 801425a:	1c57      	adds	r7, r2, #1
 801425c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8014260:	1212      	asrs	r2, r2, #8
 8014262:	ea4f 2c26 	mov.w	ip, r6, asr #8
 8014266:	fa1f fa82 	uxth.w	sl, r2
 801426a:	ea4f 272e 	mov.w	r7, lr, asr #8
 801426e:	43d2      	mvns	r2, r2
 8014270:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014274:	b2d2      	uxtb	r2, r2
 8014276:	fb1c fc0a 	smulbb	ip, ip, sl
 801427a:	f3c6 09cc 	ubfx	r9, r6, #3, #13
 801427e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014282:	495a      	ldr	r1, [pc, #360]	; (80143ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 8014284:	fb07 c702 	mla	r7, r7, r2, ip
 8014288:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801428c:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8014290:	fb19 f90a 	smulbb	r9, r9, sl
 8014294:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8014298:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 801429c:	fb0c 9c02 	mla	ip, ip, r2, r9
 80142a0:	b2f6      	uxtb	r6, r6
 80142a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80142a6:	fa1f fc8c 	uxth.w	ip, ip
 80142aa:	fa5f fe8e 	uxtb.w	lr, lr
 80142ae:	fb16 f60a 	smulbb	r6, r6, sl
 80142b2:	b2bf      	uxth	r7, r7
 80142b4:	fb0e 6602 	mla	r6, lr, r2, r6
 80142b8:	f10c 0901 	add.w	r9, ip, #1
 80142bc:	b2b6      	uxth	r6, r6
 80142be:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80142c2:	f107 0b01 	add.w	fp, r7, #1
 80142c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80142ca:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80142ce:	f106 0e01 	add.w	lr, r6, #1
 80142d2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80142d6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80142da:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 80142de:	ea4c 0c07 	orr.w	ip, ip, r7
 80142e2:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80142e6:	ea4c 0c0e 	orr.w	ip, ip, lr
 80142ea:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 80142ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80142f0:	4414      	add	r4, r2
 80142f2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80142f4:	f108 0801 	add.w	r8, r8, #1
 80142f8:	4410      	add	r0, r2
 80142fa:	e792      	b.n	8014222 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x136>
 80142fc:	1422      	asrs	r2, r4, #16
 80142fe:	d467      	bmi.n	80143d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014300:	9e02      	ldr	r6, [sp, #8]
 8014302:	4296      	cmp	r6, r2
 8014304:	dd64      	ble.n	80143d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014306:	1406      	asrs	r6, r0, #16
 8014308:	d462      	bmi.n	80143d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 801430a:	9f03      	ldr	r7, [sp, #12]
 801430c:	42be      	cmp	r6, r7
 801430e:	da5f      	bge.n	80143d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014310:	9f04      	ldr	r7, [sp, #16]
 8014312:	fb06 2607 	mla	r6, r6, r7, r2
 8014316:	0872      	lsrs	r2, r6, #1
 8014318:	9f05      	ldr	r7, [sp, #20]
 801431a:	5cba      	ldrb	r2, [r7, r2]
 801431c:	07f6      	lsls	r6, r6, #31
 801431e:	bf54      	ite	pl
 8014320:	f002 020f 	andpl.w	r2, r2, #15
 8014324:	1112      	asrmi	r2, r2, #4
 8014326:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801432a:	b2d2      	uxtb	r2, r2
 801432c:	2a00      	cmp	r2, #0
 801432e:	d04f      	beq.n	80143d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e4>
 8014330:	9f07      	ldr	r7, [sp, #28]
 8014332:	4e2d      	ldr	r6, [pc, #180]	; (80143e8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fc>)
 8014334:	f8b9 e000 	ldrh.w	lr, [r9]
 8014338:	6836      	ldr	r6, [r6, #0]
 801433a:	492c      	ldr	r1, [pc, #176]	; (80143ec <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>)
 801433c:	437a      	muls	r2, r7
 801433e:	1c57      	adds	r7, r2, #1
 8014340:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8014344:	1212      	asrs	r2, r2, #8
 8014346:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801434a:	fa1f fb82 	uxth.w	fp, r2
 801434e:	ea4f 272e 	mov.w	r7, lr, asr #8
 8014352:	43d2      	mvns	r2, r2
 8014354:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014358:	b2d2      	uxtb	r2, r2
 801435a:	fb1c fc0b 	smulbb	ip, ip, fp
 801435e:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8014362:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014366:	fb07 c702 	mla	r7, r7, r2, ip
 801436a:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801436e:	ea4f 0cee 	mov.w	ip, lr, asr #3
 8014372:	fb18 f80b 	smulbb	r8, r8, fp
 8014376:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801437a:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 801437e:	fb0c 8c02 	mla	ip, ip, r2, r8
 8014382:	b2f6      	uxtb	r6, r6
 8014384:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8014388:	fa1f fc8c 	uxth.w	ip, ip
 801438c:	fa5f fe8e 	uxtb.w	lr, lr
 8014390:	fb16 f60b 	smulbb	r6, r6, fp
 8014394:	b2bf      	uxth	r7, r7
 8014396:	fb0e 6602 	mla	r6, lr, r2, r6
 801439a:	f10c 0801 	add.w	r8, ip, #1
 801439e:	b2b6      	uxth	r6, r6
 80143a0:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 80143a4:	f107 0801 	add.w	r8, r7, #1
 80143a8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80143ac:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80143b0:	f106 0e01 	add.w	lr, r6, #1
 80143b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80143b8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80143bc:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 80143c0:	ea4c 0c07 	orr.w	ip, ip, r7
 80143c4:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 80143c8:	ea4c 0c0e 	orr.w	ip, ip, lr
 80143cc:	f8a9 c000 	strh.w	ip, [r9]
 80143d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80143d2:	4414      	add	r4, r2
 80143d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80143d6:	f109 0902 	add.w	r9, r9, #2
 80143da:	4410      	add	r0, r2
 80143dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80143e0:	e6ce      	b.n	8014180 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 80143e2:	b009      	add	sp, #36	; 0x24
 80143e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e8:	20009f10 	.word	0x20009f10
 80143ec:	0007fff8 	.word	0x0007fff8

080143f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 80143f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143f4:	b087      	sub	sp, #28
 80143f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80143fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80143fc:	9205      	str	r2, [sp, #20]
 80143fe:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8014402:	9201      	str	r2, [sp, #4]
 8014404:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8014408:	6860      	ldr	r0, [r4, #4]
 801440a:	f9bd b060 	ldrsh.w	fp, [sp, #96]	; 0x60
 801440e:	9100      	str	r1, [sp, #0]
 8014410:	fb00 2505 	mla	r5, r0, r5, r2
 8014414:	6822      	ldr	r2, [r4, #0]
 8014416:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801441a:	f10b 0201 	add.w	r2, fp, #1
 801441e:	f022 0201 	bic.w	r2, r2, #1
 8014422:	9203      	str	r2, [sp, #12]
 8014424:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014426:	6812      	ldr	r2, [r2, #0]
 8014428:	9204      	str	r2, [sp, #16]
 801442a:	9a00      	ldr	r2, [sp, #0]
 801442c:	2a00      	cmp	r2, #0
 801442e:	dc03      	bgt.n	8014438 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x48>
 8014430:	9a05      	ldr	r2, [sp, #20]
 8014432:	2a00      	cmp	r2, #0
 8014434:	f340 815c 	ble.w	80146f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 8014438:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801443a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801443e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014440:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014444:	2b00      	cmp	r3, #0
 8014446:	dd0f      	ble.n	8014468 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8014448:	1422      	asrs	r2, r4, #16
 801444a:	d406      	bmi.n	801445a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801444c:	4593      	cmp	fp, r2
 801444e:	dd04      	ble.n	801445a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8014450:	1402      	asrs	r2, r0, #16
 8014452:	d402      	bmi.n	801445a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8014454:	9e01      	ldr	r6, [sp, #4]
 8014456:	42b2      	cmp	r2, r6
 8014458:	db07      	blt.n	801446a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a>
 801445a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801445c:	4414      	add	r4, r2
 801445e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014460:	3b01      	subs	r3, #1
 8014462:	4410      	add	r0, r2
 8014464:	3502      	adds	r5, #2
 8014466:	e7ed      	b.n	8014444 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54>
 8014468:	d018      	beq.n	801449c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xac>
 801446a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801446c:	1e5a      	subs	r2, r3, #1
 801446e:	fb06 4602 	mla	r6, r6, r2, r4
 8014472:	1436      	asrs	r6, r6, #16
 8014474:	d40a      	bmi.n	801448c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8014476:	45b3      	cmp	fp, r6
 8014478:	dd08      	ble.n	801448c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 801447a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801447c:	fb06 0202 	mla	r2, r6, r2, r0
 8014480:	1412      	asrs	r2, r2, #16
 8014482:	d403      	bmi.n	801448c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8014484:	9e01      	ldr	r6, [sp, #4]
 8014486:	42b2      	cmp	r2, r6
 8014488:	f2c0 80bf 	blt.w	801460a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21a>
 801448c:	2700      	movs	r7, #0
 801448e:	19da      	adds	r2, r3, r7
 8014490:	2a00      	cmp	r2, #0
 8014492:	dc3f      	bgt.n	8014514 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x124>
 8014494:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014498:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801449c:	9b00      	ldr	r3, [sp, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	f340 8126 	ble.w	80146f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x300>
 80144a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80144a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80144ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80144b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80144b2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80144b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80144ba:	eeb0 6a62 	vmov.f32	s12, s5
 80144be:	ee61 7a27 	vmul.f32	s15, s2, s15
 80144c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80144c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80144ca:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80144ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80144d2:	eeb0 6a43 	vmov.f32	s12, s6
 80144d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80144da:	ee12 2a90 	vmov	r2, s5
 80144de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80144e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80144e6:	ee13 2a10 	vmov	r2, s6
 80144ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80144ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80144ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80144f2:	9314      	str	r3, [sp, #80]	; 0x50
 80144f4:	9b00      	ldr	r3, [sp, #0]
 80144f6:	9a05      	ldr	r2, [sp, #20]
 80144f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80144fc:	3b01      	subs	r3, #1
 80144fe:	9300      	str	r3, [sp, #0]
 8014500:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014506:	eeb0 3a67 	vmov.f32	s6, s15
 801450a:	bf08      	it	eq
 801450c:	4613      	moveq	r3, r2
 801450e:	eef0 2a47 	vmov.f32	s5, s14
 8014512:	e78a      	b.n	801442a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a>
 8014514:	1422      	asrs	r2, r4, #16
 8014516:	d466      	bmi.n	80145e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8014518:	4593      	cmp	fp, r2
 801451a:	dd64      	ble.n	80145e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801451c:	1406      	asrs	r6, r0, #16
 801451e:	d462      	bmi.n	80145e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8014520:	9901      	ldr	r1, [sp, #4]
 8014522:	428e      	cmp	r6, r1
 8014524:	da5f      	bge.n	80145e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8014526:	9903      	ldr	r1, [sp, #12]
 8014528:	fb06 2601 	mla	r6, r6, r1, r2
 801452c:	0872      	lsrs	r2, r6, #1
 801452e:	9904      	ldr	r1, [sp, #16]
 8014530:	5c8a      	ldrb	r2, [r1, r2]
 8014532:	07f6      	lsls	r6, r6, #31
 8014534:	bf54      	ite	pl
 8014536:	f002 020f 	andpl.w	r2, r2, #15
 801453a:	1112      	asrmi	r2, r2, #4
 801453c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014540:	b2d2      	uxtb	r2, r2
 8014542:	2a00      	cmp	r2, #0
 8014544:	d04f      	beq.n	80145e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 8014546:	496c      	ldr	r1, [pc, #432]	; (80146f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 8014548:	680e      	ldr	r6, [r1, #0]
 801454a:	496c      	ldr	r1, [pc, #432]	; (80146fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 801454c:	ea4f 2926 	mov.w	r9, r6, asr #8
 8014550:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 8014554:	2aff      	cmp	r2, #255	; 0xff
 8014556:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 801455a:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801455e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8014562:	b2f6      	uxtb	r6, r6
 8014564:	d045      	beq.n	80145f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8014566:	f06f 0101 	mvn.w	r1, #1
 801456a:	4379      	muls	r1, r7
 801456c:	fa1f fa82 	uxth.w	sl, r2
 8014570:	f835 e001 	ldrh.w	lr, [r5, r1]
 8014574:	9102      	str	r1, [sp, #8]
 8014576:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801457a:	43d2      	mvns	r2, r2
 801457c:	b2d2      	uxtb	r2, r2
 801457e:	fb19 f90a 	smulbb	r9, r9, sl
 8014582:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8014586:	fb0c 9c02 	mla	ip, ip, r2, r9
 801458a:	ea4f 09ee 	mov.w	r9, lr, asr #3
 801458e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014592:	fb18 f80a 	smulbb	r8, r8, sl
 8014596:	fb09 8802 	mla	r8, r9, r2, r8
 801459a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801459e:	fa1f f888 	uxth.w	r8, r8
 80145a2:	fa5f fe8e 	uxtb.w	lr, lr
 80145a6:	fb16 f60a 	smulbb	r6, r6, sl
 80145aa:	fa1f fc8c 	uxth.w	ip, ip
 80145ae:	fb0e 6602 	mla	r6, lr, r2, r6
 80145b2:	f108 0901 	add.w	r9, r8, #1
 80145b6:	b2b6      	uxth	r6, r6
 80145b8:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80145bc:	f10c 0901 	add.w	r9, ip, #1
 80145c0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80145c4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80145c8:	1c72      	adds	r2, r6, #1
 80145ca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80145ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80145d2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80145d6:	ea48 080c 	orr.w	r8, r8, ip
 80145da:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80145de:	ea48 0806 	orr.w	r8, r8, r6
 80145e2:	f825 8001 	strh.w	r8, [r5, r1]
 80145e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80145e8:	4414      	add	r4, r2
 80145ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80145ec:	3f01      	subs	r7, #1
 80145ee:	4410      	add	r0, r2
 80145f0:	e74d      	b.n	801448e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 80145f2:	f06f 0201 	mvn.w	r2, #1
 80145f6:	08f6      	lsrs	r6, r6, #3
 80145f8:	fb02 fe07 	mul.w	lr, r2, r7
 80145fc:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 8014600:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 8014604:	f825 600e 	strh.w	r6, [r5, lr]
 8014608:	e7ed      	b.n	80145e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f6>
 801460a:	f04f 0e00 	mov.w	lr, #0
 801460e:	eba3 020e 	sub.w	r2, r3, lr
 8014612:	2a00      	cmp	r2, #0
 8014614:	f77f af3e 	ble.w	8014494 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xa4>
 8014618:	9903      	ldr	r1, [sp, #12]
 801461a:	1422      	asrs	r2, r4, #16
 801461c:	1406      	asrs	r6, r0, #16
 801461e:	fb01 2606 	mla	r6, r1, r6, r2
 8014622:	0872      	lsrs	r2, r6, #1
 8014624:	9904      	ldr	r1, [sp, #16]
 8014626:	5c8a      	ldrb	r2, [r1, r2]
 8014628:	07f1      	lsls	r1, r6, #31
 801462a:	bf54      	ite	pl
 801462c:	f002 020f 	andpl.w	r2, r2, #15
 8014630:	1112      	asrmi	r2, r2, #4
 8014632:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014636:	b2d2      	uxtb	r2, r2
 8014638:	2a00      	cmp	r2, #0
 801463a:	d04a      	beq.n	80146d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 801463c:	492e      	ldr	r1, [pc, #184]	; (80146f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x308>)
 801463e:	680e      	ldr	r6, [r1, #0]
 8014640:	492e      	ldr	r1, [pc, #184]	; (80146fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x30c>)
 8014642:	ea4f 2926 	mov.w	r9, r6, asr #8
 8014646:	f3c6 08cc 	ubfx	r8, r6, #3, #13
 801464a:	2aff      	cmp	r2, #255	; 0xff
 801464c:	ea01 06c6 	and.w	r6, r1, r6, lsl #3
 8014650:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8014654:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8014658:	b2f6      	uxtb	r6, r6
 801465a:	d041      	beq.n	80146e0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f0>
 801465c:	f835 c01e 	ldrh.w	ip, [r5, lr, lsl #1]
 8014660:	fa1f fa82 	uxth.w	sl, r2
 8014664:	ea4f 272c 	mov.w	r7, ip, asr #8
 8014668:	43d2      	mvns	r2, r2
 801466a:	b2d2      	uxtb	r2, r2
 801466c:	fb19 f90a 	smulbb	r9, r9, sl
 8014670:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8014674:	fb07 9702 	mla	r7, r7, r2, r9
 8014678:	ea4f 09ec 	mov.w	r9, ip, asr #3
 801467c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8014680:	fb18 f80a 	smulbb	r8, r8, sl
 8014684:	fb09 8802 	mla	r8, r9, r2, r8
 8014688:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801468c:	fa1f f888 	uxth.w	r8, r8
 8014690:	fa5f fc8c 	uxtb.w	ip, ip
 8014694:	fb16 f60a 	smulbb	r6, r6, sl
 8014698:	b2bf      	uxth	r7, r7
 801469a:	fb0c 6602 	mla	r6, ip, r2, r6
 801469e:	f108 0901 	add.w	r9, r8, #1
 80146a2:	b2b6      	uxth	r6, r6
 80146a4:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80146a8:	f107 0901 	add.w	r9, r7, #1
 80146ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80146b0:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80146b4:	1c72      	adds	r2, r6, #1
 80146b6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80146ba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80146be:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80146c2:	ea48 0807 	orr.w	r8, r8, r7
 80146c6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80146ca:	ea48 0806 	orr.w	r8, r8, r6
 80146ce:	f825 801e 	strh.w	r8, [r5, lr, lsl #1]
 80146d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80146d4:	4414      	add	r4, r2
 80146d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80146d8:	f10e 0e01 	add.w	lr, lr, #1
 80146dc:	4410      	add	r0, r2
 80146de:	e796      	b.n	801460e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x21e>
 80146e0:	08f6      	lsrs	r6, r6, #3
 80146e2:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
 80146e6:	ea46 06c8 	orr.w	r6, r6, r8, lsl #3
 80146ea:	f825 601e 	strh.w	r6, [r5, lr, lsl #1]
 80146ee:	e7f0      	b.n	80146d2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e2>
 80146f0:	b007      	add	sp, #28
 80146f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146f6:	bf00      	nop
 80146f8:	20009f10 	.word	0x20009f10
 80146fc:	0007fff8 	.word	0x0007fff8

08014700 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8014700:	4770      	bx	lr

08014702 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8014702:	4770      	bx	lr

08014704 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8014704:	4770      	bx	lr

08014706 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8014706:	4770      	bx	lr

08014708 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014708:	4770      	bx	lr

0801470a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801470a:	4770      	bx	lr

0801470c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801470c:	4770      	bx	lr

0801470e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801470e:	4770      	bx	lr

08014710 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014710:	4770      	bx	lr

08014712 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8014712:	4770      	bx	lr

08014714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014714:	4770      	bx	lr

08014716 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014716:	4770      	bx	lr

08014718 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014718:	4770      	bx	lr

0801471a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801471a:	4770      	bx	lr

0801471c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801471c:	4770      	bx	lr

0801471e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801471e:	4770      	bx	lr

08014720 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8014720:	4770      	bx	lr

08014722 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8014722:	4770      	bx	lr

08014724 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8014724:	4770      	bx	lr

08014726 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8014726:	4770      	bx	lr

08014728 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014728:	4770      	bx	lr

0801472a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801472a:	4770      	bx	lr

0801472c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801472c:	4770      	bx	lr

0801472e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801472e:	4770      	bx	lr

08014730 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014730:	4770      	bx	lr

08014732 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8014732:	4770      	bx	lr

08014734 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014734:	4770      	bx	lr

08014736 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8014736:	4770      	bx	lr

08014738 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8014738:	b508      	push	{r3, lr}
 801473a:	4b06      	ldr	r3, [pc, #24]	; (8014754 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801473c:	8818      	ldrh	r0, [r3, #0]
 801473e:	b928      	cbnz	r0, 801474c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8014740:	4b05      	ldr	r3, [pc, #20]	; (8014758 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8014742:	4a06      	ldr	r2, [pc, #24]	; (801475c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8014744:	4806      	ldr	r0, [pc, #24]	; (8014760 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8014746:	21d7      	movs	r1, #215	; 0xd7
 8014748:	f009 f894 	bl	801d874 <__assert_func>
 801474c:	0040      	lsls	r0, r0, #1
 801474e:	b280      	uxth	r0, r0
 8014750:	bd08      	pop	{r3, pc}
 8014752:	bf00      	nop
 8014754:	20009f02 	.word	0x20009f02
 8014758:	08021501 	.word	0x08021501
 801475c:	08021a87 	.word	0x08021a87
 8014760:	08021543 	.word	0x08021543

08014764 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8014764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014768:	b08d      	sub	sp, #52	; 0x34
 801476a:	460f      	mov	r7, r1
 801476c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8014770:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8014774:	4616      	mov	r6, r2
 8014776:	f1b9 0f00 	cmp.w	r9, #0
 801477a:	d046      	beq.n	801480a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 801477c:	6810      	ldr	r0, [r2, #0]
 801477e:	6851      	ldr	r1, [r2, #4]
 8014780:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8014948 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8014784:	ad08      	add	r5, sp, #32
 8014786:	c503      	stmia	r5!, {r0, r1}
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	6859      	ldr	r1, [r3, #4]
 801478c:	ad0a      	add	r5, sp, #40	; 0x28
 801478e:	c503      	stmia	r5!, {r0, r1}
 8014790:	a808      	add	r0, sp, #32
 8014792:	f7fb fc6b 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014796:	4631      	mov	r1, r6
 8014798:	a80a      	add	r0, sp, #40	; 0x28
 801479a:	f7fb fc4f 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801479e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80147a2:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80147a6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 80147aa:	f8d8 0000 	ldr.w	r0, [r8]
 80147ae:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 80147b2:	fb16 2103 	smlabb	r1, r6, r3, r2
 80147b6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80147ba:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80147be:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 80147c2:	440a      	add	r2, r1
 80147c4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80147c8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80147cc:	4413      	add	r3, r2
 80147ce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80147d2:	6803      	ldr	r3, [r0, #0]
 80147d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147d6:	4798      	blx	r3
 80147d8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80147dc:	d018      	beq.n	8014810 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80147de:	f010 0f04 	tst.w	r0, #4
 80147e2:	d019      	beq.n	8014818 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80147e4:	f8d8 0000 	ldr.w	r0, [r8]
 80147e8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80147ec:	6801      	ldr	r1, [r0, #0]
 80147ee:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80147f2:	e9cd 9403 	strd	r9, r4, [sp, #12]
 80147f6:	b2bf      	uxth	r7, r7
 80147f8:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80147fc:	9402      	str	r4, [sp, #8]
 80147fe:	b2ad      	uxth	r5, r5
 8014800:	9701      	str	r7, [sp, #4]
 8014802:	9500      	str	r5, [sp, #0]
 8014804:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8014806:	4631      	mov	r1, r6
 8014808:	47a0      	blx	r4
 801480a:	b00d      	add	sp, #52	; 0x34
 801480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014810:	b914      	cbnz	r4, 8014818 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8014812:	f010 0f01 	tst.w	r0, #1
 8014816:	e7e4      	b.n	80147e2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8014818:	f8d8 0000 	ldr.w	r0, [r8]
 801481c:	6803      	ldr	r3, [r0, #0]
 801481e:	6a1b      	ldr	r3, [r3, #32]
 8014820:	4798      	blx	r3
 8014822:	4a48      	ldr	r2, [pc, #288]	; (8014944 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e0>)
 8014824:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8014828:	8814      	ldrh	r4, [r2, #0]
 801482a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801482e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8014832:	fb01 3404 	mla	r4, r1, r4, r3
 8014836:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801483a:	4692      	mov	sl, r2
 801483c:	d118      	bne.n	8014870 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x10c>
 801483e:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 8014842:	f04f 0900 	mov.w	r9, #0
 8014846:	f8d8 0000 	ldr.w	r0, [r8]
 801484a:	45b9      	cmp	r9, r7
 801484c:	6803      	ldr	r3, [r0, #0]
 801484e:	da73      	bge.n	8014938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 8014850:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8014852:	4632      	mov	r2, r6
 8014854:	465b      	mov	r3, fp
 8014856:	4621      	mov	r1, r4
 8014858:	47a8      	blx	r5
 801485a:	f8ba 3000 	ldrh.w	r3, [sl]
 801485e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014862:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8014866:	f109 0901 	add.w	r9, r9, #1
 801486a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801486e:	e7ea      	b.n	8014846 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xe2>
 8014870:	f1c9 08ff 	rsb	r8, r9, #255	; 0xff
 8014874:	ea25 7ae5 	bic.w	sl, r5, r5, asr #31
 8014878:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 801487c:	f04f 0b00 	mov.w	fp, #0
 8014880:	fa1f f389 	uxth.w	r3, r9
 8014884:	fa1f f888 	uxth.w	r8, r8
 8014888:	9207      	str	r2, [sp, #28]
 801488a:	45bb      	cmp	fp, r7
 801488c:	da54      	bge.n	8014938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>
 801488e:	f04f 0e00 	mov.w	lr, #0
 8014892:	45ae      	cmp	lr, r5
 8014894:	da41      	bge.n	801491a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1b6>
 8014896:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
 801489a:	f836 201e 	ldrh.w	r2, [r6, lr, lsl #1]
 801489e:	1208      	asrs	r0, r1, #8
 80148a0:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80148a4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80148a8:	fb10 f008 	smulbb	r0, r0, r8
 80148ac:	ea4f 09e1 	mov.w	r9, r1, asr #3
 80148b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80148b4:	00c9      	lsls	r1, r1, #3
 80148b6:	fb0c 0c03 	mla	ip, ip, r3, r0
 80148ba:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80148be:	10d0      	asrs	r0, r2, #3
 80148c0:	b2c9      	uxtb	r1, r1
 80148c2:	00d2      	lsls	r2, r2, #3
 80148c4:	fa1f fc8c 	uxth.w	ip, ip
 80148c8:	fb19 f908 	smulbb	r9, r9, r8
 80148cc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80148d0:	b2d2      	uxtb	r2, r2
 80148d2:	fb11 f108 	smulbb	r1, r1, r8
 80148d6:	fb00 9003 	mla	r0, r0, r3, r9
 80148da:	fb02 1203 	mla	r2, r2, r3, r1
 80148de:	f10c 0901 	add.w	r9, ip, #1
 80148e2:	b292      	uxth	r2, r2
 80148e4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80148e8:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80148ec:	f102 0c01 	add.w	ip, r2, #1
 80148f0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80148f4:	b280      	uxth	r0, r0
 80148f6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80148fa:	ea49 0c02 	orr.w	ip, r9, r2
 80148fe:	f100 0901 	add.w	r9, r0, #1
 8014902:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8014906:	0940      	lsrs	r0, r0, #5
 8014908:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801490c:	ea4c 0c00 	orr.w	ip, ip, r0
 8014910:	f824 c01e 	strh.w	ip, [r4, lr, lsl #1]
 8014914:	f10e 0e01 	add.w	lr, lr, #1
 8014918:	e7bb      	b.n	8014892 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801491a:	9a07      	ldr	r2, [sp, #28]
 801491c:	8812      	ldrh	r2, [r2, #0]
 801491e:	1b52      	subs	r2, r2, r5
 8014920:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8014924:	4414      	add	r4, r2
 8014926:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801492a:	1b52      	subs	r2, r2, r5
 801492c:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8014930:	4416      	add	r6, r2
 8014932:	f10b 0b01 	add.w	fp, fp, #1
 8014936:	e7a8      	b.n	801488a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x126>
 8014938:	4b03      	ldr	r3, [pc, #12]	; (8014948 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801493a:	6818      	ldr	r0, [r3, #0]
 801493c:	6803      	ldr	r3, [r0, #0]
 801493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014940:	4798      	blx	r3
 8014942:	e762      	b.n	801480a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8014944:	20009f02 	.word	0x20009f02
 8014948:	20009f08 	.word	0x20009f08

0801494c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801494c:	b510      	push	{r4, lr}
 801494e:	2104      	movs	r1, #4
 8014950:	4604      	mov	r4, r0
 8014952:	f008 ff63 	bl	801d81c <_ZdlPvj>
 8014956:	4620      	mov	r0, r4
 8014958:	bd10      	pop	{r4, pc}

0801495a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801495a:	b510      	push	{r4, lr}
 801495c:	2104      	movs	r1, #4
 801495e:	4604      	mov	r4, r0
 8014960:	f008 ff5c 	bl	801d81c <_ZdlPvj>
 8014964:	4620      	mov	r0, r4
 8014966:	bd10      	pop	{r4, pc}

08014968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014968:	b510      	push	{r4, lr}
 801496a:	2104      	movs	r1, #4
 801496c:	4604      	mov	r4, r0
 801496e:	f008 ff55 	bl	801d81c <_ZdlPvj>
 8014972:	4620      	mov	r0, r4
 8014974:	bd10      	pop	{r4, pc}

08014976 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8014976:	b510      	push	{r4, lr}
 8014978:	2104      	movs	r1, #4
 801497a:	4604      	mov	r4, r0
 801497c:	f008 ff4e 	bl	801d81c <_ZdlPvj>
 8014980:	4620      	mov	r0, r4
 8014982:	bd10      	pop	{r4, pc}

08014984 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014984:	b510      	push	{r4, lr}
 8014986:	2104      	movs	r1, #4
 8014988:	4604      	mov	r4, r0
 801498a:	f008 ff47 	bl	801d81c <_ZdlPvj>
 801498e:	4620      	mov	r0, r4
 8014990:	bd10      	pop	{r4, pc}

08014992 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014992:	b510      	push	{r4, lr}
 8014994:	2104      	movs	r1, #4
 8014996:	4604      	mov	r4, r0
 8014998:	f008 ff40 	bl	801d81c <_ZdlPvj>
 801499c:	4620      	mov	r0, r4
 801499e:	bd10      	pop	{r4, pc}

080149a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80149a0:	b510      	push	{r4, lr}
 80149a2:	2104      	movs	r1, #4
 80149a4:	4604      	mov	r4, r0
 80149a6:	f008 ff39 	bl	801d81c <_ZdlPvj>
 80149aa:	4620      	mov	r0, r4
 80149ac:	bd10      	pop	{r4, pc}

080149ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80149ae:	b510      	push	{r4, lr}
 80149b0:	2104      	movs	r1, #4
 80149b2:	4604      	mov	r4, r0
 80149b4:	f008 ff32 	bl	801d81c <_ZdlPvj>
 80149b8:	4620      	mov	r0, r4
 80149ba:	bd10      	pop	{r4, pc}

080149bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80149bc:	b510      	push	{r4, lr}
 80149be:	2104      	movs	r1, #4
 80149c0:	4604      	mov	r4, r0
 80149c2:	f008 ff2b 	bl	801d81c <_ZdlPvj>
 80149c6:	4620      	mov	r0, r4
 80149c8:	bd10      	pop	{r4, pc}

080149ca <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80149ca:	b510      	push	{r4, lr}
 80149cc:	2104      	movs	r1, #4
 80149ce:	4604      	mov	r4, r0
 80149d0:	f008 ff24 	bl	801d81c <_ZdlPvj>
 80149d4:	4620      	mov	r0, r4
 80149d6:	bd10      	pop	{r4, pc}

080149d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80149d8:	b510      	push	{r4, lr}
 80149da:	2104      	movs	r1, #4
 80149dc:	4604      	mov	r4, r0
 80149de:	f008 ff1d 	bl	801d81c <_ZdlPvj>
 80149e2:	4620      	mov	r0, r4
 80149e4:	bd10      	pop	{r4, pc}

080149e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80149e6:	b510      	push	{r4, lr}
 80149e8:	2104      	movs	r1, #4
 80149ea:	4604      	mov	r4, r0
 80149ec:	f008 ff16 	bl	801d81c <_ZdlPvj>
 80149f0:	4620      	mov	r0, r4
 80149f2:	bd10      	pop	{r4, pc}

080149f4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80149f4:	b510      	push	{r4, lr}
 80149f6:	2104      	movs	r1, #4
 80149f8:	4604      	mov	r4, r0
 80149fa:	f008 ff0f 	bl	801d81c <_ZdlPvj>
 80149fe:	4620      	mov	r0, r4
 8014a00:	bd10      	pop	{r4, pc}

08014a02 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8014a02:	b510      	push	{r4, lr}
 8014a04:	2104      	movs	r1, #4
 8014a06:	4604      	mov	r4, r0
 8014a08:	f008 ff08 	bl	801d81c <_ZdlPvj>
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	bd10      	pop	{r4, pc}

08014a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014a10:	b510      	push	{r4, lr}
 8014a12:	2104      	movs	r1, #4
 8014a14:	4604      	mov	r4, r0
 8014a16:	f008 ff01 	bl	801d81c <_ZdlPvj>
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	bd10      	pop	{r4, pc}

08014a1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014a1e:	b510      	push	{r4, lr}
 8014a20:	2104      	movs	r1, #4
 8014a22:	4604      	mov	r4, r0
 8014a24:	f008 fefa 	bl	801d81c <_ZdlPvj>
 8014a28:	4620      	mov	r0, r4
 8014a2a:	bd10      	pop	{r4, pc}

08014a2c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014a2c:	b510      	push	{r4, lr}
 8014a2e:	2104      	movs	r1, #4
 8014a30:	4604      	mov	r4, r0
 8014a32:	f008 fef3 	bl	801d81c <_ZdlPvj>
 8014a36:	4620      	mov	r0, r4
 8014a38:	bd10      	pop	{r4, pc}

08014a3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8014a3a:	b510      	push	{r4, lr}
 8014a3c:	2104      	movs	r1, #4
 8014a3e:	4604      	mov	r4, r0
 8014a40:	f008 feec 	bl	801d81c <_ZdlPvj>
 8014a44:	4620      	mov	r0, r4
 8014a46:	bd10      	pop	{r4, pc}

08014a48 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014a48:	b510      	push	{r4, lr}
 8014a4a:	2104      	movs	r1, #4
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	f008 fee5 	bl	801d81c <_ZdlPvj>
 8014a52:	4620      	mov	r0, r4
 8014a54:	bd10      	pop	{r4, pc}

08014a56 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014a56:	b510      	push	{r4, lr}
 8014a58:	2104      	movs	r1, #4
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	f008 fede 	bl	801d81c <_ZdlPvj>
 8014a60:	4620      	mov	r0, r4
 8014a62:	bd10      	pop	{r4, pc}

08014a64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014a64:	b510      	push	{r4, lr}
 8014a66:	2104      	movs	r1, #4
 8014a68:	4604      	mov	r4, r0
 8014a6a:	f008 fed7 	bl	801d81c <_ZdlPvj>
 8014a6e:	4620      	mov	r0, r4
 8014a70:	bd10      	pop	{r4, pc}

08014a72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014a72:	b510      	push	{r4, lr}
 8014a74:	2104      	movs	r1, #4
 8014a76:	4604      	mov	r4, r0
 8014a78:	f008 fed0 	bl	801d81c <_ZdlPvj>
 8014a7c:	4620      	mov	r0, r4
 8014a7e:	bd10      	pop	{r4, pc}

08014a80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014a80:	b510      	push	{r4, lr}
 8014a82:	2104      	movs	r1, #4
 8014a84:	4604      	mov	r4, r0
 8014a86:	f008 fec9 	bl	801d81c <_ZdlPvj>
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	bd10      	pop	{r4, pc}

08014a8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014a8e:	b510      	push	{r4, lr}
 8014a90:	2104      	movs	r1, #4
 8014a92:	4604      	mov	r4, r0
 8014a94:	f008 fec2 	bl	801d81c <_ZdlPvj>
 8014a98:	4620      	mov	r0, r4
 8014a9a:	bd10      	pop	{r4, pc}

08014a9c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8014a9c:	b510      	push	{r4, lr}
 8014a9e:	2104      	movs	r1, #4
 8014aa0:	4604      	mov	r4, r0
 8014aa2:	f008 febb 	bl	801d81c <_ZdlPvj>
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	bd10      	pop	{r4, pc}

08014aaa <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8014aaa:	b510      	push	{r4, lr}
 8014aac:	2104      	movs	r1, #4
 8014aae:	4604      	mov	r4, r0
 8014ab0:	f008 feb4 	bl	801d81c <_ZdlPvj>
 8014ab4:	4620      	mov	r0, r4
 8014ab6:	bd10      	pop	{r4, pc}

08014ab8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8014ab8:	b510      	push	{r4, lr}
 8014aba:	2104      	movs	r1, #4
 8014abc:	4604      	mov	r4, r0
 8014abe:	f008 fead 	bl	801d81c <_ZdlPvj>
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	bd10      	pop	{r4, pc}

08014ac6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8014ac6:	b510      	push	{r4, lr}
 8014ac8:	2104      	movs	r1, #4
 8014aca:	4604      	mov	r4, r0
 8014acc:	f008 fea6 	bl	801d81c <_ZdlPvj>
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	bd10      	pop	{r4, pc}

08014ad4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8014ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ad8:	460e      	mov	r6, r1
 8014ada:	b08b      	sub	sp, #44	; 0x2c
 8014adc:	4615      	mov	r5, r2
 8014ade:	461c      	mov	r4, r3
 8014ae0:	b323      	cbz	r3, 8014b2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8014ae2:	4608      	mov	r0, r1
 8014ae4:	f7f9 fa2c 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014ae8:	bb00      	cbnz	r0, 8014b2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8014aea:	6830      	ldr	r0, [r6, #0]
 8014aec:	6871      	ldr	r1, [r6, #4]
 8014aee:	4e55      	ldr	r6, [pc, #340]	; (8014c44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 8014af0:	ab08      	add	r3, sp, #32
 8014af2:	c303      	stmia	r3!, {r0, r1}
 8014af4:	a808      	add	r0, sp, #32
 8014af6:	f7fb fab9 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014afa:	6830      	ldr	r0, [r6, #0]
 8014afc:	6803      	ldr	r3, [r0, #0]
 8014afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b00:	4798      	blx	r3
 8014b02:	2cff      	cmp	r4, #255	; 0xff
 8014b04:	d015      	beq.n	8014b32 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5e>
 8014b06:	f010 0f08 	tst.w	r0, #8
 8014b0a:	d015      	beq.n	8014b38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x64>
 8014b0c:	6830      	ldr	r0, [r6, #0]
 8014b0e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014b12:	6801      	ldr	r1, [r0, #0]
 8014b14:	9402      	str	r4, [sp, #8]
 8014b16:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8014b1a:	9401      	str	r4, [sp, #4]
 8014b1c:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8014b20:	9400      	str	r4, [sp, #0]
 8014b22:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 8014b24:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014b28:	4629      	mov	r1, r5
 8014b2a:	47a0      	blx	r4
 8014b2c:	b00b      	add	sp, #44	; 0x2c
 8014b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b32:	f010 0f02 	tst.w	r0, #2
 8014b36:	e7e8      	b.n	8014b0a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8014b38:	6830      	ldr	r0, [r6, #0]
 8014b3a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8014b3e:	6803      	ldr	r3, [r0, #0]
 8014b40:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 8014b44:	6a1b      	ldr	r3, [r3, #32]
 8014b46:	4798      	blx	r3
 8014b48:	4a3f      	ldr	r2, [pc, #252]	; (8014c48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x174>)
 8014b4a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8014b4e:	8816      	ldrh	r6, [r2, #0]
 8014b50:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014b54:	2cff      	cmp	r4, #255	; 0xff
 8014b56:	fb06 1303 	mla	r3, r6, r3, r1
 8014b5a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014b5e:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 8014b62:	4616      	mov	r6, r2
 8014b64:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 8014b68:	d10a      	bne.n	8014b80 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xac>
 8014b6a:	0049      	lsls	r1, r1, #1
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	454a      	cmp	r2, r9
 8014b70:	da62      	bge.n	8014c38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8014b72:	2300      	movs	r3, #0
 8014b74:	4543      	cmp	r3, r8
 8014b76:	da58      	bge.n	8014c2a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 8014b78:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8014b7c:	3301      	adds	r3, #1
 8014b7e:	e7f9      	b.n	8014b74 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa0>
 8014b80:	122b      	asrs	r3, r5, #8
 8014b82:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 8014b86:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8014b8a:	b2a4      	uxth	r4, r4
 8014b8c:	4363      	muls	r3, r4
 8014b8e:	9305      	str	r3, [sp, #20]
 8014b90:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 8014b94:	00eb      	lsls	r3, r5, #3
 8014b96:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	0049      	lsls	r1, r1, #1
 8014b9e:	4366      	muls	r6, r4
 8014ba0:	4363      	muls	r3, r4
 8014ba2:	9106      	str	r1, [sp, #24]
 8014ba4:	f04f 0c00 	mov.w	ip, #0
 8014ba8:	b2bf      	uxth	r7, r7
 8014baa:	9207      	str	r2, [sp, #28]
 8014bac:	45cc      	cmp	ip, r9
 8014bae:	da43      	bge.n	8014c38 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8014bb0:	4682      	mov	sl, r0
 8014bb2:	f04f 0e00 	mov.w	lr, #0
 8014bb6:	45c6      	cmp	lr, r8
 8014bb8:	da2d      	bge.n	8014c16 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x142>
 8014bba:	f8ba 2000 	ldrh.w	r2, [sl]
 8014bbe:	9905      	ldr	r1, [sp, #20]
 8014bc0:	1214      	asrs	r4, r2, #8
 8014bc2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8014bc6:	fb14 f407 	smulbb	r4, r4, r7
 8014bca:	440c      	add	r4, r1
 8014bcc:	10d1      	asrs	r1, r2, #3
 8014bce:	00d2      	lsls	r2, r2, #3
 8014bd0:	b2d2      	uxtb	r2, r2
 8014bd2:	fb12 f207 	smulbb	r2, r2, r7
 8014bd6:	b2a4      	uxth	r4, r4
 8014bd8:	441a      	add	r2, r3
 8014bda:	b292      	uxth	r2, r2
 8014bdc:	1c65      	adds	r5, r4, #1
 8014bde:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8014be2:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 8014be6:	fb11 f107 	smulbb	r1, r1, r7
 8014bea:	1c55      	adds	r5, r2, #1
 8014bec:	4431      	add	r1, r6
 8014bee:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8014bf2:	b289      	uxth	r1, r1
 8014bf4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8014bf8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8014bfc:	4314      	orrs	r4, r2
 8014bfe:	1c4a      	adds	r2, r1, #1
 8014c00:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8014c04:	0949      	lsrs	r1, r1, #5
 8014c06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8014c0a:	430c      	orrs	r4, r1
 8014c0c:	f82a 4b02 	strh.w	r4, [sl], #2
 8014c10:	f10e 0e01 	add.w	lr, lr, #1
 8014c14:	e7cf      	b.n	8014bb6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xe2>
 8014c16:	9a07      	ldr	r2, [sp, #28]
 8014c18:	9906      	ldr	r1, [sp, #24]
 8014c1a:	8812      	ldrh	r2, [r2, #0]
 8014c1c:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 8014c20:	440a      	add	r2, r1
 8014c22:	4410      	add	r0, r2
 8014c24:	f10c 0c01 	add.w	ip, ip, #1
 8014c28:	e7c0      	b.n	8014bac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xd8>
 8014c2a:	8833      	ldrh	r3, [r6, #0]
 8014c2c:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 8014c30:	440b      	add	r3, r1
 8014c32:	4418      	add	r0, r3
 8014c34:	3201      	adds	r2, #1
 8014c36:	e79a      	b.n	8014b6e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x9a>
 8014c38:	4b02      	ldr	r3, [pc, #8]	; (8014c44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x170>)
 8014c3a:	6818      	ldr	r0, [r3, #0]
 8014c3c:	6803      	ldr	r3, [r0, #0]
 8014c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c40:	4798      	blx	r3
 8014c42:	e773      	b.n	8014b2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x58>
 8014c44:	20009f08 	.word	0x20009f08
 8014c48:	20009f02 	.word	0x20009f02

08014c4c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8014c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c50:	4d9b      	ldr	r5, [pc, #620]	; (8014ec0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8014c52:	4690      	mov	r8, r2
 8014c54:	682a      	ldr	r2, [r5, #0]
 8014c56:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8014c5a:	2a02      	cmp	r2, #2
 8014c5c:	b08f      	sub	sp, #60	; 0x3c
 8014c5e:	4604      	mov	r4, r0
 8014c60:	4689      	mov	r9, r1
 8014c62:	d106      	bne.n	8014c72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8014c64:	4b97      	ldr	r3, [pc, #604]	; (8014ec4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8014c66:	4a98      	ldr	r2, [pc, #608]	; (8014ec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8014c68:	f240 21c2 	movw	r1, #706	; 0x2c2
 8014c6c:	4897      	ldr	r0, [pc, #604]	; (8014ecc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8014c6e:	f008 fe01 	bl	801d874 <__assert_func>
 8014c72:	ae0e      	add	r6, sp, #56	; 0x38
 8014c74:	f826 3d24 	strh.w	r3, [r6, #-36]!
 8014c78:	4630      	mov	r0, r6
 8014c7a:	f7fd facf 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8014c7e:	6823      	ldr	r3, [r4, #0]
 8014c80:	4607      	mov	r7, r0
 8014c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c84:	4620      	mov	r0, r4
 8014c86:	4798      	blx	r3
 8014c88:	4287      	cmp	r7, r0
 8014c8a:	d004      	beq.n	8014c96 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8014c8c:	4b90      	ldr	r3, [pc, #576]	; (8014ed0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8014c8e:	4a8e      	ldr	r2, [pc, #568]	; (8014ec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8014c90:	f44f 7131 	mov.w	r1, #708	; 0x2c4
 8014c94:	e7ea      	b.n	8014c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014c96:	4630      	mov	r0, r6
 8014c98:	f7fd fa3c 	bl	8012114 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014c9c:	4607      	mov	r7, r0
 8014c9e:	b920      	cbnz	r0, 8014caa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8014ca0:	4b8c      	ldr	r3, [pc, #560]	; (8014ed4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x288>)
 8014ca2:	4a89      	ldr	r2, [pc, #548]	; (8014ec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8014ca4:	f240 21c6 	movw	r1, #710	; 0x2c6
 8014ca8:	e7e0      	b.n	8014c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014caa:	f8d8 0000 	ldr.w	r0, [r8]
 8014cae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014cb2:	f9b8 a000 	ldrsh.w	sl, [r8]
 8014cb6:	ab06      	add	r3, sp, #24
 8014cb8:	c303      	stmia	r3!, {r0, r1}
 8014cba:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014cbe:	f8d9 0000 	ldr.w	r0, [r9]
 8014cc2:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 8014cc6:	ab08      	add	r3, sp, #32
 8014cc8:	c303      	stmia	r3!, {r0, r1}
 8014cca:	4630      	mov	r0, r6
 8014ccc:	f7fd f91a 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014cd0:	4680      	mov	r8, r0
 8014cd2:	4630      	mov	r0, r6
 8014cd4:	f7fd f950 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014cd8:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8014cdc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8014ce0:	f10d 0920 	add.w	r9, sp, #32
 8014ce4:	a806      	add	r0, sp, #24
 8014ce6:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8014cea:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 8014cee:	f7fb f9bd 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014cf2:	4648      	mov	r0, r9
 8014cf4:	f7fb f9ba 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014cf8:	a80a      	add	r0, sp, #40	; 0x28
 8014cfa:	f7fb f9b7 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014cfe:	4e76      	ldr	r6, [pc, #472]	; (8014ed8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 8014d00:	4b76      	ldr	r3, [pc, #472]	; (8014edc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8014d02:	f9b6 2000 	ldrsh.w	r2, [r6]
 8014d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d0a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8014d0e:	2100      	movs	r1, #0
 8014d10:	910c      	str	r1, [sp, #48]	; 0x30
 8014d12:	4648      	mov	r0, r9
 8014d14:	a90c      	add	r1, sp, #48	; 0x30
 8014d16:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8014d1a:	f7f9 f8cd 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 8014d1e:	4648      	mov	r0, r9
 8014d20:	f7f9 f90e 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	f040 80bd 	bne.w	8014ea4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014d2a:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8014d2e:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014d32:	4288      	cmp	r0, r1
 8014d34:	db37      	blt.n	8014da6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014d36:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8014d3a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	db31      	blt.n	8014da6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014d42:	f8bd c024 	ldrh.w	ip, [sp, #36]	; 0x24
 8014d46:	4460      	add	r0, ip
 8014d48:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 8014d4c:	4461      	add	r1, ip
 8014d4e:	b200      	sxth	r0, r0
 8014d50:	b209      	sxth	r1, r1
 8014d52:	4288      	cmp	r0, r1
 8014d54:	dc27      	bgt.n	8014da6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014d56:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8014d5a:	440a      	add	r2, r1
 8014d5c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8014d60:	440b      	add	r3, r1
 8014d62:	b212      	sxth	r2, r2
 8014d64:	b21b      	sxth	r3, r3
 8014d66:	429a      	cmp	r2, r3
 8014d68:	dc1d      	bgt.n	8014da6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x15a>
 8014d6a:	6823      	ldr	r3, [r4, #0]
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d70:	4798      	blx	r3
 8014d72:	4682      	mov	sl, r0
 8014d74:	6828      	ldr	r0, [r5, #0]
 8014d76:	6803      	ldr	r3, [r0, #0]
 8014d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d7a:	4798      	blx	r3
 8014d7c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8014d80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014d84:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8014d88:	1a9b      	subs	r3, r3, r2
 8014d8a:	b29b      	uxth	r3, r3
 8014d8c:	b21c      	sxth	r4, r3
 8014d8e:	2c00      	cmp	r4, #0
 8014d90:	dc0e      	bgt.n	8014db0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 8014d92:	bf1f      	itttt	ne
 8014d94:	f8ad 2020 	strhne.w	r2, [sp, #32]
 8014d98:	f8bd 2024 	ldrhne.w	r2, [sp, #36]	; 0x24
 8014d9c:	189b      	addne	r3, r3, r2
 8014d9e:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8014da2:	463c      	mov	r4, r7
 8014da4:	e00a      	b.n	8014dbc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 8014da6:	4b4e      	ldr	r3, [pc, #312]	; (8014ee0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 8014da8:	4a47      	ldr	r2, [pc, #284]	; (8014ec8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8014daa:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8014dae:	e75d      	b.n	8014c6c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8014db0:	ebab 0303 	sub.w	r3, fp, r3
 8014db4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8014db8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8014dbc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8014dc0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014dc4:	1a5b      	subs	r3, r3, r1
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	b21a      	sxth	r2, r3
 8014dca:	2a00      	cmp	r2, #0
 8014dcc:	dd4a      	ble.n	8014e64 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x218>
 8014dce:	fb02 f20b 	mul.w	r2, r2, fp
 8014dd2:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8014dd6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8014dda:	1ad3      	subs	r3, r2, r3
 8014ddc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8014de0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	dd5d      	ble.n	8014ea4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014de8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8014dec:	f1bc 0f00 	cmp.w	ip, #0
 8014df0:	dd58      	ble.n	8014ea4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014df2:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8014df6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8014dfa:	fb0a f801 	mul.w	r8, sl, r1
 8014dfe:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8014e02:	4480      	add	r8, r0
 8014e04:	8830      	ldrh	r0, [r6, #0]
 8014e06:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8014e0a:	42b3      	cmp	r3, r6
 8014e0c:	bfa8      	it	ge
 8014e0e:	4633      	movge	r3, r6
 8014e10:	1a82      	subs	r2, r0, r2
 8014e12:	4293      	cmp	r3, r2
 8014e14:	bfa8      	it	ge
 8014e16:	4613      	movge	r3, r2
 8014e18:	4a30      	ldr	r2, [pc, #192]	; (8014edc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 8014e1a:	f9bd 6026 	ldrsh.w	r6, [sp, #38]	; 0x26
 8014e1e:	8812      	ldrh	r2, [r2, #0]
 8014e20:	4566      	cmp	r6, ip
 8014e22:	eba2 0101 	sub.w	r1, r2, r1
 8014e26:	bfa8      	it	ge
 8014e28:	4666      	movge	r6, ip
 8014e2a:	428e      	cmp	r6, r1
 8014e2c:	4632      	mov	r2, r6
 8014e2e:	bfa8      	it	ge
 8014e30:	460a      	movge	r2, r1
 8014e32:	4298      	cmp	r0, r3
 8014e34:	9202      	str	r2, [sp, #8]
 8014e36:	d01e      	beq.n	8014e76 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22a>
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	9303      	str	r3, [sp, #12]
 8014e3c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8014e40:	f04f 0900 	mov.w	r9, #0
 8014e44:	9b02      	ldr	r3, [sp, #8]
 8014e46:	454b      	cmp	r3, r9
 8014e48:	dd2c      	ble.n	8014ea4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014e4a:	6828      	ldr	r0, [r5, #0]
 8014e4c:	6803      	ldr	r3, [r0, #0]
 8014e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e50:	4642      	mov	r2, r8
 8014e52:	461e      	mov	r6, r3
 8014e54:	4621      	mov	r1, r4
 8014e56:	9b03      	ldr	r3, [sp, #12]
 8014e58:	47b0      	blx	r6
 8014e5a:	44d0      	add	r8, sl
 8014e5c:	445c      	add	r4, fp
 8014e5e:	f109 0901 	add.w	r9, r9, #1
 8014e62:	e7ef      	b.n	8014e44 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1f8>
 8014e64:	bf1f      	itttt	ne
 8014e66:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 8014e6a:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 8014e6e:	189b      	addne	r3, r3, r2
 8014e70:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8014e74:	e7b4      	b.n	8014de0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 8014e76:	4558      	cmp	r0, fp
 8014e78:	d1de      	bne.n	8014e38 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x1ec>
 8014e7a:	6828      	ldr	r0, [r5, #0]
 8014e7c:	6803      	ldr	r3, [r0, #0]
 8014e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e80:	4798      	blx	r3
 8014e82:	07c3      	lsls	r3, r0, #31
 8014e84:	d512      	bpl.n	8014eac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x260>
 8014e86:	6828      	ldr	r0, [r5, #0]
 8014e88:	9b02      	ldr	r3, [sp, #8]
 8014e8a:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 8014e8e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8014e92:	6803      	ldr	r3, [r0, #0]
 8014e94:	f8cd b000 	str.w	fp, [sp]
 8014e98:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8014e9a:	e899 0006 	ldmia.w	r9, {r1, r2}
 8014e9e:	4623      	mov	r3, r4
 8014ea0:	47a8      	blx	r5
 8014ea2:	4607      	mov	r7, r0
 8014ea4:	4638      	mov	r0, r7
 8014ea6:	b00f      	add	sp, #60	; 0x3c
 8014ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eac:	6828      	ldr	r0, [r5, #0]
 8014eae:	6803      	ldr	r3, [r0, #0]
 8014eb0:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8014eb2:	9b02      	ldr	r3, [sp, #8]
 8014eb4:	4642      	mov	r2, r8
 8014eb6:	fb03 f30a 	mul.w	r3, r3, sl
 8014eba:	4621      	mov	r1, r4
 8014ebc:	47a8      	blx	r5
 8014ebe:	e7f1      	b.n	8014ea4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x258>
 8014ec0:	20009f08 	.word	0x20009f08
 8014ec4:	080212f3 	.word	0x080212f3
 8014ec8:	08021b37 	.word	0x08021b37
 8014ecc:	080213a7 	.word	0x080213a7
 8014ed0:	080213d9 	.word	0x080213d9
 8014ed4:	0802142e 	.word	0x0802142e
 8014ed8:	20009f02 	.word	0x20009f02
 8014edc:	20009f04 	.word	0x20009f04
 8014ee0:	0802146c 	.word	0x0802146c

08014ee4 <_ZN8touchgfx8LCD16bppC1Ev>:
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	4910      	ldr	r1, [pc, #64]	; (8014f28 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8014ee8:	6042      	str	r2, [r0, #4]
 8014eea:	6001      	str	r1, [r0, #0]
 8014eec:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8014ef0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8014ef4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8014ef8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8014efc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8014f00:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8014f04:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8014f08:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8014f0c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8014f10:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8014f14:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8014f18:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8014f1c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8014f20:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop
 8014f28:	080217b0 	.word	0x080217b0

08014f2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8014f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f30:	460c      	mov	r4, r1
 8014f32:	b08d      	sub	sp, #52	; 0x34
 8014f34:	4682      	mov	sl, r0
 8014f36:	6808      	ldr	r0, [r1, #0]
 8014f38:	6849      	ldr	r1, [r1, #4]
 8014f3a:	469b      	mov	fp, r3
 8014f3c:	ab08      	add	r3, sp, #32
 8014f3e:	c303      	stmia	r3!, {r0, r1}
 8014f40:	6810      	ldr	r0, [r2, #0]
 8014f42:	6851      	ldr	r1, [r2, #4]
 8014f44:	ab0a      	add	r3, sp, #40	; 0x28
 8014f46:	c303      	stmia	r3!, {r0, r1}
 8014f48:	a808      	add	r0, sp, #32
 8014f4a:	f7fb f88f 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014f4e:	4621      	mov	r1, r4
 8014f50:	a80a      	add	r0, sp, #40	; 0x28
 8014f52:	f7fb f873 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014f56:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8014f5a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8014f5e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8014f62:	4c60      	ldr	r4, [pc, #384]	; (80150e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 8014f64:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8014f68:	6820      	ldr	r0, [r4, #0]
 8014f6a:	f9bd 902e 	ldrsh.w	r9, [sp, #46]	; 0x2e
 8014f6e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8014f72:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8014f76:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8014f7a:	440a      	add	r2, r1
 8014f7c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014f80:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8014f84:	4413      	add	r3, r2
 8014f86:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014f8a:	6803      	ldr	r3, [r0, #0]
 8014f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f8e:	4798      	blx	r3
 8014f90:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8014f94:	d119      	bne.n	8014fca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8014f96:	f010 0f20 	tst.w	r0, #32
 8014f9a:	6820      	ldr	r0, [r4, #0]
 8014f9c:	d018      	beq.n	8014fd0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8014f9e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8014fa2:	6801      	ldr	r1, [r0, #0]
 8014fa4:	9402      	str	r4, [sp, #8]
 8014fa6:	fa1f f489 	uxth.w	r4, r9
 8014faa:	9401      	str	r4, [sp, #4]
 8014fac:	fa1f f488 	uxth.w	r4, r8
 8014fb0:	f8cd b00c 	str.w	fp, [sp, #12]
 8014fb4:	9400      	str	r4, [sp, #0]
 8014fb6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8014fb8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8014fbc:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8014fc0:	4651      	mov	r1, sl
 8014fc2:	47a0      	blx	r4
 8014fc4:	b00d      	add	sp, #52	; 0x34
 8014fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014fce:	e7e4      	b.n	8014f9a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8014fd0:	6803      	ldr	r3, [r0, #0]
 8014fd2:	6a1b      	ldr	r3, [r3, #32]
 8014fd4:	4798      	blx	r3
 8014fd6:	4a44      	ldr	r2, [pc, #272]	; (80150e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1bc>)
 8014fd8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8014fdc:	8813      	ldrh	r3, [r2, #0]
 8014fde:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 8014fe2:	9207      	str	r2, [sp, #28]
 8014fe4:	fb04 1303 	mla	r3, r4, r3, r1
 8014fe8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014fec:	ea28 73e8 	bic.w	r3, r8, r8, asr #31
 8014ff0:	0099      	lsls	r1, r3, #2
 8014ff2:	005b      	lsls	r3, r3, #1
 8014ff4:	9106      	str	r1, [sp, #24]
 8014ff6:	9305      	str	r3, [sp, #20]
 8014ff8:	f04f 0c00 	mov.w	ip, #0
 8014ffc:	45cc      	cmp	ip, r9
 8014ffe:	da6b      	bge.n	80150d8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1ac>
 8015000:	2300      	movs	r3, #0
 8015002:	4543      	cmp	r3, r8
 8015004:	da55      	bge.n	80150b2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x186>
 8015006:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
 801500a:	0e25      	lsrs	r5, r4, #24
 801500c:	d013      	beq.n	8015036 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801500e:	2dff      	cmp	r5, #255	; 0xff
 8015010:	ea4f 2714 	mov.w	r7, r4, lsr #8
 8015014:	d111      	bne.n	801503a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 8015016:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801501a:	d10e      	bne.n	801503a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10e>
 801501c:	0962      	lsrs	r2, r4, #5
 801501e:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8015022:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8015026:	f027 0707 	bic.w	r7, r7, #7
 801502a:	4317      	orrs	r7, r2
 801502c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8015030:	433c      	orrs	r4, r7
 8015032:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 8015036:	3301      	adds	r3, #1
 8015038:	e7e3      	b.n	8015002 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd6>
 801503a:	fb0b f505 	mul.w	r5, fp, r5
 801503e:	1c6a      	adds	r2, r5, #1
 8015040:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8015044:	eb02 2225 	add.w	r2, r2, r5, asr #8
 8015048:	1212      	asrs	r2, r2, #8
 801504a:	fa1f fe82 	uxth.w	lr, r2
 801504e:	120e      	asrs	r6, r1, #8
 8015050:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8015054:	43d2      	mvns	r2, r2
 8015056:	b2d2      	uxtb	r2, r2
 8015058:	fb15 f50e 	smulbb	r5, r5, lr
 801505c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015060:	fb06 5602 	mla	r6, r6, r2, r5
 8015064:	b2e4      	uxtb	r4, r4
 8015066:	10cd      	asrs	r5, r1, #3
 8015068:	00c9      	lsls	r1, r1, #3
 801506a:	b2c9      	uxtb	r1, r1
 801506c:	fb14 f40e 	smulbb	r4, r4, lr
 8015070:	fb01 4402 	mla	r4, r1, r2, r4
 8015074:	b2ff      	uxtb	r7, r7
 8015076:	b2b6      	uxth	r6, r6
 8015078:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801507c:	b2a4      	uxth	r4, r4
 801507e:	fb17 f70e 	smulbb	r7, r7, lr
 8015082:	fb05 7702 	mla	r7, r5, r2, r7
 8015086:	1c72      	adds	r2, r6, #1
 8015088:	1c65      	adds	r5, r4, #1
 801508a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801508e:	eb05 2514 	add.w	r5, r5, r4, lsr #8
 8015092:	b2bf      	uxth	r7, r7
 8015094:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8015098:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801509c:	432e      	orrs	r6, r5
 801509e:	1c7d      	adds	r5, r7, #1
 80150a0:	eb05 2717 	add.w	r7, r5, r7, lsr #8
 80150a4:	097f      	lsrs	r7, r7, #5
 80150a6:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80150aa:	433e      	orrs	r6, r7
 80150ac:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80150b0:	e7c1      	b.n	8015036 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80150b2:	9b07      	ldr	r3, [sp, #28]
 80150b4:	9a05      	ldr	r2, [sp, #20]
 80150b6:	881b      	ldrh	r3, [r3, #0]
 80150b8:	eba3 0308 	sub.w	r3, r3, r8
 80150bc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80150c0:	4418      	add	r0, r3
 80150c2:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80150c6:	9a06      	ldr	r2, [sp, #24]
 80150c8:	eba3 0308 	sub.w	r3, r3, r8
 80150cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80150d0:	449a      	add	sl, r3
 80150d2:	f10c 0c01 	add.w	ip, ip, #1
 80150d6:	e791      	b.n	8014ffc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 80150d8:	4b02      	ldr	r3, [pc, #8]	; (80150e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>)
 80150da:	6818      	ldr	r0, [r3, #0]
 80150dc:	6803      	ldr	r3, [r0, #0]
 80150de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150e0:	4798      	blx	r3
 80150e2:	e76f      	b.n	8014fc4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80150e4:	20009f08 	.word	0x20009f08
 80150e8:	20009f02 	.word	0x20009f02

080150ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80150ec:	b570      	push	{r4, r5, r6, lr}
 80150ee:	9d04      	ldr	r5, [sp, #16]
 80150f0:	f89d 6018 	ldrb.w	r6, [sp, #24]
 80150f4:	460c      	mov	r4, r1
 80150f6:	4619      	mov	r1, r3
 80150f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80150fc:	2a0c      	cmp	r2, #12
 80150fe:	d820      	bhi.n	8015142 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x56>
 8015100:	e8df f002 	tbb	[pc, r2]
 8015104:	18121807 	.word	0x18121807
 8015108:	18181818 	.word	0x18181818
 801510c:	18181818 	.word	0x18181818
 8015110:	18          	.byte	0x18
 8015111:	00          	.byte	0x00
 8015112:	6802      	ldr	r2, [r0, #0]
 8015114:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8015118:	6916      	ldr	r6, [r2, #16]
 801511a:	462b      	mov	r3, r5
 801511c:	460a      	mov	r2, r1
 801511e:	46b4      	mov	ip, r6
 8015120:	4621      	mov	r1, r4
 8015122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015126:	4760      	bx	ip
 8015128:	462a      	mov	r2, r5
 801512a:	4620      	mov	r0, r4
 801512c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015130:	f7ff befc 	b.w	8014f2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015134:	4b03      	ldr	r3, [pc, #12]	; (8015144 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 8015136:	4a04      	ldr	r2, [pc, #16]	; (8015148 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 8015138:	4804      	ldr	r0, [pc, #16]	; (801514c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801513a:	f240 21bb 	movw	r1, #699	; 0x2bb
 801513e:	f008 fb99 	bl	801d874 <__assert_func>
 8015142:	bd70      	pop	{r4, r5, r6, pc}
 8015144:	080214cc 	.word	0x080214cc
 8015148:	08021bbd 	.word	0x08021bbd
 801514c:	080213a7 	.word	0x080213a7

08015150 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015154:	b093      	sub	sp, #76	; 0x4c
 8015156:	880f      	ldrh	r7, [r1, #0]
 8015158:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801515c:	4681      	mov	r9, r0
 801515e:	4688      	mov	r8, r1
 8015160:	4615      	mov	r5, r2
 8015162:	b12f      	cbz	r7, 8015170 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8015164:	4b71      	ldr	r3, [pc, #452]	; (801532c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8015166:	4a72      	ldr	r2, [pc, #456]	; (8015330 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 8015168:	4872      	ldr	r0, [pc, #456]	; (8015334 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 801516a:	21ec      	movs	r1, #236	; 0xec
 801516c:	f008 fb82 	bl	801d874 <__assert_func>
 8015170:	6810      	ldr	r0, [r2, #0]
 8015172:	6851      	ldr	r1, [r2, #4]
 8015174:	ac0e      	add	r4, sp, #56	; 0x38
 8015176:	c403      	stmia	r4!, {r0, r1}
 8015178:	6818      	ldr	r0, [r3, #0]
 801517a:	6859      	ldr	r1, [r3, #4]
 801517c:	ac10      	add	r4, sp, #64	; 0x40
 801517e:	c403      	stmia	r4!, {r0, r1}
 8015180:	a80e      	add	r0, sp, #56	; 0x38
 8015182:	f7fa ff73 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015186:	4629      	mov	r1, r5
 8015188:	a810      	add	r0, sp, #64	; 0x40
 801518a:	f7fa ff57 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801518e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015192:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8015196:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801519a:	4d67      	ldr	r5, [pc, #412]	; (8015338 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 801519c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80151a0:	6828      	ldr	r0, [r5, #0]
 80151a2:	4c66      	ldr	r4, [pc, #408]	; (801533c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 80151a4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80151a8:	4489      	add	r9, r1
 80151aa:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80151ae:	440a      	add	r2, r1
 80151b0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80151b4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80151b8:	4413      	add	r3, r2
 80151ba:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80151be:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80151c2:	930a      	str	r3, [sp, #40]	; 0x28
 80151c4:	6803      	ldr	r3, [r0, #0]
 80151c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80151ca:	4798      	blx	r3
 80151cc:	2801      	cmp	r0, #1
 80151ce:	d11d      	bne.n	801520c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 80151d0:	220b      	movs	r2, #11
 80151d2:	9708      	str	r7, [sp, #32]
 80151d4:	9207      	str	r2, [sp, #28]
 80151d6:	8822      	ldrh	r2, [r4, #0]
 80151d8:	f8cd a010 	str.w	sl, [sp, #16]
 80151dc:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80151e0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80151e4:	9203      	str	r2, [sp, #12]
 80151e6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80151ea:	9202      	str	r2, [sp, #8]
 80151ec:	fa1f f28b 	uxth.w	r2, fp
 80151f0:	9201      	str	r2, [sp, #4]
 80151f2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80151f6:	9200      	str	r2, [sp, #0]
 80151f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80151fc:	6828      	ldr	r0, [r5, #0]
 80151fe:	4642      	mov	r2, r8
 8015200:	4649      	mov	r1, r9
 8015202:	f7f9 faa3 	bl	800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015206:	b013      	add	sp, #76	; 0x4c
 8015208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801520c:	6828      	ldr	r0, [r5, #0]
 801520e:	6803      	ldr	r3, [r0, #0]
 8015210:	6a1b      	ldr	r3, [r3, #32]
 8015212:	4798      	blx	r3
 8015214:	8823      	ldrh	r3, [r4, #0]
 8015216:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801521a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801521e:	fb01 2303 	mla	r3, r1, r3, r2
 8015222:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015226:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801522a:	930b      	str	r3, [sp, #44]	; 0x2c
 801522c:	005b      	lsls	r3, r3, #1
 801522e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8015232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015234:	429f      	cmp	r7, r3
 8015236:	da72      	bge.n	801531e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ce>
 8015238:	2100      	movs	r1, #0
 801523a:	4559      	cmp	r1, fp
 801523c:	da5e      	bge.n	80152fc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801523e:	f819 3001 	ldrb.w	r3, [r9, r1]
 8015242:	2204      	movs	r2, #4
 8015244:	fb12 2303 	smlabb	r3, r2, r3, r2
 8015248:	f858 2003 	ldr.w	r2, [r8, r3]
 801524c:	0e15      	lsrs	r5, r2, #24
 801524e:	d013      	beq.n	8015278 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015250:	2dff      	cmp	r5, #255	; 0xff
 8015252:	ea4f 2412 	mov.w	r4, r2, lsr #8
 8015256:	d111      	bne.n	801527c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015258:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801525c:	d10e      	bne.n	801527c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801525e:	0953      	lsrs	r3, r2, #5
 8015260:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8015264:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8015268:	f024 0407 	bic.w	r4, r4, #7
 801526c:	431c      	orrs	r4, r3
 801526e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8015272:	4314      	orrs	r4, r2
 8015274:	f820 4011 	strh.w	r4, [r0, r1, lsl #1]
 8015278:	3101      	adds	r1, #1
 801527a:	e7de      	b.n	801523a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 801527c:	fb0a f505 	mul.w	r5, sl, r5
 8015280:	1c6b      	adds	r3, r5, #1
 8015282:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 8015286:	eb03 2325 	add.w	r3, r3, r5, asr #8
 801528a:	121b      	asrs	r3, r3, #8
 801528c:	fa1f fe83 	uxth.w	lr, r3
 8015290:	ea4f 262c 	mov.w	r6, ip, asr #8
 8015294:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8015298:	43db      	mvns	r3, r3
 801529a:	b2db      	uxtb	r3, r3
 801529c:	fb15 f50e 	smulbb	r5, r5, lr
 80152a0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80152a4:	fb06 5603 	mla	r6, r6, r3, r5
 80152a8:	b2d2      	uxtb	r2, r2
 80152aa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80152ae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80152b2:	fa5f fc8c 	uxtb.w	ip, ip
 80152b6:	fb12 f20e 	smulbb	r2, r2, lr
 80152ba:	fb0c 2203 	mla	r2, ip, r3, r2
 80152be:	b2e4      	uxtb	r4, r4
 80152c0:	b2b6      	uxth	r6, r6
 80152c2:	fb14 f40e 	smulbb	r4, r4, lr
 80152c6:	b292      	uxth	r2, r2
 80152c8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80152cc:	fb05 4503 	mla	r5, r5, r3, r4
 80152d0:	1c73      	adds	r3, r6, #1
 80152d2:	1c54      	adds	r4, r2, #1
 80152d4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80152d8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80152dc:	b2ad      	uxth	r5, r5
 80152de:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80152e2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80152e6:	4326      	orrs	r6, r4
 80152e8:	1c6c      	adds	r4, r5, #1
 80152ea:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 80152ee:	0964      	lsrs	r4, r4, #5
 80152f0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80152f4:	4326      	orrs	r6, r4
 80152f6:	f820 6011 	strh.w	r6, [r0, r1, lsl #1]
 80152fa:	e7bd      	b.n	8015278 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80152fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015300:	881b      	ldrh	r3, [r3, #0]
 8015302:	eba3 030b 	sub.w	r3, r3, fp
 8015306:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801530a:	4418      	add	r0, r3
 801530c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8015310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015312:	eba3 030b 	sub.w	r3, r3, fp
 8015316:	4413      	add	r3, r2
 8015318:	4499      	add	r9, r3
 801531a:	3701      	adds	r7, #1
 801531c:	e789      	b.n	8015232 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801531e:	4b06      	ldr	r3, [pc, #24]	; (8015338 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>)
 8015320:	6818      	ldr	r0, [r3, #0]
 8015322:	6803      	ldr	r3, [r0, #0]
 8015324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015326:	4798      	blx	r3
 8015328:	e76d      	b.n	8015206 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb6>
 801532a:	bf00      	nop
 801532c:	080212a3 	.word	0x080212a3
 8015330:	0802198e 	.word	0x0802198e
 8015334:	080213a7 	.word	0x080213a7
 8015338:	20009f08 	.word	0x20009f08
 801533c:	20009f02 	.word	0x20009f02

08015340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8015340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015344:	4614      	mov	r4, r2
 8015346:	880a      	ldrh	r2, [r1, #0]
 8015348:	b093      	sub	sp, #76	; 0x4c
 801534a:	2a02      	cmp	r2, #2
 801534c:	4606      	mov	r6, r0
 801534e:	4689      	mov	r9, r1
 8015350:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 8015354:	d006      	beq.n	8015364 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 8015356:	4b7a      	ldr	r3, [pc, #488]	; (8015540 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 8015358:	4a7a      	ldr	r2, [pc, #488]	; (8015544 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801535a:	487b      	ldr	r0, [pc, #492]	; (8015548 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 801535c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8015360:	f008 fa88 	bl	801d874 <__assert_func>
 8015364:	2f00      	cmp	r7, #0
 8015366:	d04b      	beq.n	8015400 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 8015368:	6820      	ldr	r0, [r4, #0]
 801536a:	6861      	ldr	r1, [r4, #4]
 801536c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 8015550 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 8015370:	ad0e      	add	r5, sp, #56	; 0x38
 8015372:	c503      	stmia	r5!, {r0, r1}
 8015374:	6818      	ldr	r0, [r3, #0]
 8015376:	6859      	ldr	r1, [r3, #4]
 8015378:	ad10      	add	r5, sp, #64	; 0x40
 801537a:	c503      	stmia	r5!, {r0, r1}
 801537c:	a80e      	add	r0, sp, #56	; 0x38
 801537e:	f7fa fe75 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015382:	4621      	mov	r1, r4
 8015384:	a810      	add	r0, sp, #64	; 0x40
 8015386:	f7fa fe59 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801538a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801538e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8015392:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8015396:	f8da 0000 	ldr.w	r0, [sl]
 801539a:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801539e:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 80153a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80153a6:	1874      	adds	r4, r6, r1
 80153a8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80153ac:	4e67      	ldr	r6, [pc, #412]	; (801554c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 80153ae:	440a      	add	r2, r1
 80153b0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80153b4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80153b8:	4413      	add	r3, r2
 80153ba:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80153be:	6803      	ldr	r3, [r0, #0]
 80153c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80153c4:	4798      	blx	r3
 80153c6:	2801      	cmp	r0, #1
 80153c8:	d11d      	bne.n	8015406 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 80153ca:	2200      	movs	r2, #0
 80153cc:	210b      	movs	r1, #11
 80153ce:	e9cd 1207 	strd	r1, r2, [sp, #28]
 80153d2:	8831      	ldrh	r1, [r6, #0]
 80153d4:	9704      	str	r7, [sp, #16]
 80153d6:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80153da:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80153de:	9203      	str	r2, [sp, #12]
 80153e0:	fa1f f288 	uxth.w	r2, r8
 80153e4:	9202      	str	r2, [sp, #8]
 80153e6:	b2ad      	uxth	r5, r5
 80153e8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80153ec:	9200      	str	r2, [sp, #0]
 80153ee:	9501      	str	r5, [sp, #4]
 80153f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80153f4:	f8da 0000 	ldr.w	r0, [sl]
 80153f8:	464a      	mov	r2, r9
 80153fa:	4621      	mov	r1, r4
 80153fc:	f7f9 f9a6 	bl	800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015400:	b013      	add	sp, #76	; 0x4c
 8015402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015406:	f8da 0000 	ldr.w	r0, [sl]
 801540a:	6803      	ldr	r3, [r0, #0]
 801540c:	6a1b      	ldr	r3, [r3, #32]
 801540e:	4798      	blx	r3
 8015410:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8015414:	8833      	ldrh	r3, [r6, #0]
 8015416:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801541a:	fb01 2303 	mla	r3, r1, r3, r2
 801541e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015422:	2fff      	cmp	r7, #255	; 0xff
 8015424:	f109 0304 	add.w	r3, r9, #4
 8015428:	930a      	str	r3, [sp, #40]	; 0x28
 801542a:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 801542e:	d111      	bne.n	8015454 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x114>
 8015430:	b212      	sxth	r2, r2
 8015432:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8015436:	2100      	movs	r1, #0
 8015438:	4541      	cmp	r1, r8
 801543a:	da7a      	bge.n	8015532 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801543c:	2300      	movs	r3, #0
 801543e:	42ab      	cmp	r3, r5
 8015440:	da6b      	bge.n	801551a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 8015442:	f814 c003 	ldrb.w	ip, [r4, r3]
 8015446:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015448:	f837 c01c 	ldrh.w	ip, [r7, ip, lsl #1]
 801544c:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
 8015450:	3301      	adds	r3, #1
 8015452:	e7f4      	b.n	801543e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfe>
 8015454:	b213      	sxth	r3, r2
 8015456:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801545a:	930b      	str	r3, [sp, #44]	; 0x2c
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	930c      	str	r3, [sp, #48]	; 0x30
 8015460:	f04f 0900 	mov.w	r9, #0
 8015464:	b2ba      	uxth	r2, r7
 8015466:	fa1f fc8c 	uxth.w	ip, ip
 801546a:	960d      	str	r6, [sp, #52]	; 0x34
 801546c:	45c1      	cmp	r9, r8
 801546e:	da60      	bge.n	8015532 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 8015470:	46a3      	mov	fp, r4
 8015472:	4682      	mov	sl, r0
 8015474:	ebab 0304 	sub.w	r3, fp, r4
 8015478:	429d      	cmp	r5, r3
 801547a:	dd3e      	ble.n	80154fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ba>
 801547c:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8015480:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015482:	f8ba 1000 	ldrh.w	r1, [sl]
 8015486:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801548a:	120e      	asrs	r6, r1, #8
 801548c:	121f      	asrs	r7, r3, #8
 801548e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8015492:	fb16 f60c 	smulbb	r6, r6, ip
 8015496:	ea4f 0ee1 	mov.w	lr, r1, asr #3
 801549a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801549e:	00c9      	lsls	r1, r1, #3
 80154a0:	fb07 6702 	mla	r7, r7, r2, r6
 80154a4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80154a8:	10de      	asrs	r6, r3, #3
 80154aa:	b2c9      	uxtb	r1, r1
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	fb1e fe0c 	smulbb	lr, lr, ip
 80154b2:	fb11 f10c 	smulbb	r1, r1, ip
 80154b6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	b2bf      	uxth	r7, r7
 80154be:	fb06 e602 	mla	r6, r6, r2, lr
 80154c2:	fb03 1302 	mla	r3, r3, r2, r1
 80154c6:	b2b6      	uxth	r6, r6
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	1c79      	adds	r1, r7, #1
 80154cc:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80154d0:	f106 0e01 	add.w	lr, r6, #1
 80154d4:	1c59      	adds	r1, r3, #1
 80154d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80154da:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 80154de:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80154e2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80154e6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80154ea:	430f      	orrs	r7, r1
 80154ec:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80154f0:	ea47 070e 	orr.w	r7, r7, lr
 80154f4:	f82a 7b02 	strh.w	r7, [sl], #2
 80154f8:	e7bc      	b.n	8015474 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x134>
 80154fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80154fe:	881b      	ldrh	r3, [r3, #0]
 8015500:	1b5b      	subs	r3, r3, r5
 8015502:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8015506:	4418      	add	r0, r3
 8015508:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801550c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801550e:	1b5b      	subs	r3, r3, r5
 8015510:	440b      	add	r3, r1
 8015512:	441c      	add	r4, r3
 8015514:	f109 0901 	add.w	r9, r9, #1
 8015518:	e7a8      	b.n	801546c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x12c>
 801551a:	8833      	ldrh	r3, [r6, #0]
 801551c:	1b5b      	subs	r3, r3, r5
 801551e:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015522:	4418      	add	r0, r3
 8015524:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8015528:	1b5b      	subs	r3, r3, r5
 801552a:	4413      	add	r3, r2
 801552c:	441c      	add	r4, r3
 801552e:	3101      	adds	r1, #1
 8015530:	e782      	b.n	8015438 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8015532:	4b07      	ldr	r3, [pc, #28]	; (8015550 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 8015534:	6818      	ldr	r0, [r3, #0]
 8015536:	6803      	ldr	r3, [r0, #0]
 8015538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801553a:	4798      	blx	r3
 801553c:	e760      	b.n	8015400 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801553e:	bf00      	nop
 8015540:	08021161 	.word	0x08021161
 8015544:	080217f8 	.word	0x080217f8
 8015548:	080213a7 	.word	0x080213a7
 801554c:	20009f02 	.word	0x20009f02
 8015550:	20009f08 	.word	0x20009f08

08015554 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015558:	4616      	mov	r6, r2
 801555a:	880a      	ldrh	r2, [r1, #0]
 801555c:	b093      	sub	sp, #76	; 0x4c
 801555e:	2a01      	cmp	r2, #1
 8015560:	4681      	mov	r9, r0
 8015562:	4688      	mov	r8, r1
 8015564:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8015568:	d006      	beq.n	8015578 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801556a:	4b6c      	ldr	r3, [pc, #432]	; (801571c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801556c:	4a6c      	ldr	r2, [pc, #432]	; (8015720 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 801556e:	486d      	ldr	r0, [pc, #436]	; (8015724 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>)
 8015570:	f240 11a1 	movw	r1, #417	; 0x1a1
 8015574:	f008 f97e 	bl	801d874 <__assert_func>
 8015578:	f1ba 0f00 	cmp.w	sl, #0
 801557c:	d04a      	beq.n	8015614 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801557e:	6830      	ldr	r0, [r6, #0]
 8015580:	6871      	ldr	r1, [r6, #4]
 8015582:	4d69      	ldr	r5, [pc, #420]	; (8015728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8015584:	ac0e      	add	r4, sp, #56	; 0x38
 8015586:	c403      	stmia	r4!, {r0, r1}
 8015588:	6818      	ldr	r0, [r3, #0]
 801558a:	6859      	ldr	r1, [r3, #4]
 801558c:	ac10      	add	r4, sp, #64	; 0x40
 801558e:	c403      	stmia	r4!, {r0, r1}
 8015590:	a80e      	add	r0, sp, #56	; 0x38
 8015592:	f7fa fd6b 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015596:	4631      	mov	r1, r6
 8015598:	a810      	add	r0, sp, #64	; 0x40
 801559a:	f7fa fd4f 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801559e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80155a2:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80155a6:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80155aa:	6828      	ldr	r0, [r5, #0]
 80155ac:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 80155b0:	4c5e      	ldr	r4, [pc, #376]	; (801572c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 80155b2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80155b6:	4489      	add	r9, r1
 80155b8:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80155bc:	440a      	add	r2, r1
 80155be:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80155c2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80155c6:	4413      	add	r3, r2
 80155c8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80155cc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
 80155d0:	930a      	str	r3, [sp, #40]	; 0x28
 80155d2:	6803      	ldr	r3, [r0, #0]
 80155d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80155d8:	4798      	blx	r3
 80155da:	2801      	cmp	r0, #1
 80155dc:	d11d      	bne.n	801561a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 80155de:	220b      	movs	r2, #11
 80155e0:	2100      	movs	r1, #0
 80155e2:	e9cd 2107 	strd	r2, r1, [sp, #28]
 80155e6:	8822      	ldrh	r2, [r4, #0]
 80155e8:	f8cd a010 	str.w	sl, [sp, #16]
 80155ec:	e9cd 0205 	strd	r0, r2, [sp, #20]
 80155f0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80155f4:	9203      	str	r2, [sp, #12]
 80155f6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80155fa:	9202      	str	r2, [sp, #8]
 80155fc:	b2b6      	uxth	r6, r6
 80155fe:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8015602:	9200      	str	r2, [sp, #0]
 8015604:	9601      	str	r6, [sp, #4]
 8015606:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801560a:	6828      	ldr	r0, [r5, #0]
 801560c:	4642      	mov	r2, r8
 801560e:	4649      	mov	r1, r9
 8015610:	f7f9 f89c 	bl	800e74c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8015614:	b013      	add	sp, #76	; 0x4c
 8015616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801561a:	6828      	ldr	r0, [r5, #0]
 801561c:	6803      	ldr	r3, [r0, #0]
 801561e:	6a1b      	ldr	r3, [r3, #32]
 8015620:	4798      	blx	r3
 8015622:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8015626:	8823      	ldrh	r3, [r4, #0]
 8015628:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801562c:	940d      	str	r4, [sp, #52]	; 0x34
 801562e:	fb01 2303 	mla	r3, r1, r3, r2
 8015632:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8015636:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801563a:	930b      	str	r3, [sp, #44]	; 0x2c
 801563c:	ea6f 010a 	mvn.w	r1, sl
 8015640:	005b      	lsls	r3, r3, #1
 8015642:	930c      	str	r3, [sp, #48]	; 0x30
 8015644:	f04f 0e00 	mov.w	lr, #0
 8015648:	b2c9      	uxtb	r1, r1
 801564a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801564c:	459e      	cmp	lr, r3
 801564e:	da5f      	bge.n	8015710 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8015650:	2700      	movs	r7, #0
 8015652:	fa1f fb8a 	uxth.w	fp, sl
 8015656:	42b7      	cmp	r7, r6
 8015658:	da4a      	bge.n	80156f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19c>
 801565a:	f819 3007 	ldrb.w	r3, [r9, r7]
 801565e:	2203      	movs	r2, #3
 8015660:	2404      	movs	r4, #4
 8015662:	fb12 4303 	smlabb	r3, r2, r3, r4
 8015666:	eb08 0403 	add.w	r4, r8, r3
 801566a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801566e:	78a2      	ldrb	r2, [r4, #2]
 8015670:	7865      	ldrb	r5, [r4, #1]
 8015672:	f818 c003 	ldrb.w	ip, [r8, r3]
 8015676:	d10c      	bne.n	8015692 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13e>
 8015678:	4b2d      	ldr	r3, [pc, #180]	; (8015730 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 801567a:	00ed      	lsls	r5, r5, #3
 801567c:	ea03 2202 	and.w	r2, r3, r2, lsl #8
 8015680:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8015684:	432a      	orrs	r2, r5
 8015686:	ea42 02dc 	orr.w	r2, r2, ip, lsr #3
 801568a:	f820 2017 	strh.w	r2, [r0, r7, lsl #1]
 801568e:	3701      	adds	r7, #1
 8015690:	e7e1      	b.n	8015656 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x102>
 8015692:	f830 3017 	ldrh.w	r3, [r0, r7, lsl #1]
 8015696:	121c      	asrs	r4, r3, #8
 8015698:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801569c:	fb12 f20b 	smulbb	r2, r2, fp
 80156a0:	fb04 2201 	mla	r2, r4, r1, r2
 80156a4:	10dc      	asrs	r4, r3, #3
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	fb15 f50b 	smulbb	r5, r5, fp
 80156b2:	fb1c fc0b 	smulbb	ip, ip, fp
 80156b6:	b292      	uxth	r2, r2
 80156b8:	fb04 5501 	mla	r5, r4, r1, r5
 80156bc:	fb03 cc01 	mla	ip, r3, r1, ip
 80156c0:	b2ad      	uxth	r5, r5
 80156c2:	fa1f fc8c 	uxth.w	ip, ip
 80156c6:	1c53      	adds	r3, r2, #1
 80156c8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80156cc:	1c6c      	adds	r4, r5, #1
 80156ce:	f10c 0301 	add.w	r3, ip, #1
 80156d2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80156d6:	eb04 2515 	add.w	r5, r4, r5, lsr #8
 80156da:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80156de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80156e2:	096d      	lsrs	r5, r5, #5
 80156e4:	ea42 020c 	orr.w	r2, r2, ip
 80156e8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80156ec:	432a      	orrs	r2, r5
 80156ee:	e7cc      	b.n	801568a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x136>
 80156f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80156f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156f4:	881b      	ldrh	r3, [r3, #0]
 80156f6:	1b9b      	subs	r3, r3, r6
 80156f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80156fc:	4418      	add	r0, r3
 80156fe:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8015702:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015704:	1b9b      	subs	r3, r3, r6
 8015706:	4413      	add	r3, r2
 8015708:	4499      	add	r9, r3
 801570a:	f10e 0e01 	add.w	lr, lr, #1
 801570e:	e79c      	b.n	801564a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf6>
 8015710:	4b05      	ldr	r3, [pc, #20]	; (8015728 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d4>)
 8015712:	6818      	ldr	r0, [r3, #0]
 8015714:	6803      	ldr	r3, [r0, #0]
 8015716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015718:	4798      	blx	r3
 801571a:	e77b      	b.n	8015614 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801571c:	080211af 	.word	0x080211af
 8015720:	08021881 	.word	0x08021881
 8015724:	080213a7 	.word	0x080213a7
 8015728:	20009f08 	.word	0x20009f08
 801572c:	20009f02 	.word	0x20009f02
 8015730:	fffff800 	.word	0xfffff800

08015734 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015734:	b430      	push	{r4, r5}
 8015736:	780d      	ldrb	r5, [r1, #0]
 8015738:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801573c:	2d01      	cmp	r5, #1
 801573e:	d00a      	beq.n	8015756 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8015740:	d305      	bcc.n	801574e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8015742:	2d02      	cmp	r5, #2
 8015744:	d10b      	bne.n	801575e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8015746:	9402      	str	r4, [sp, #8]
 8015748:	bc30      	pop	{r4, r5}
 801574a:	f7ff bdf9 	b.w	8015340 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801574e:	9402      	str	r4, [sp, #8]
 8015750:	bc30      	pop	{r4, r5}
 8015752:	f7ff bcfd 	b.w	8015150 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8015756:	9402      	str	r4, [sp, #8]
 8015758:	bc30      	pop	{r4, r5}
 801575a:	f7ff befb 	b.w	8015554 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801575e:	bc30      	pop	{r4, r5}
 8015760:	4770      	bx	lr
	...

08015764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8015764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015768:	4605      	mov	r5, r0
 801576a:	b089      	sub	sp, #36	; 0x24
 801576c:	6810      	ldr	r0, [r2, #0]
 801576e:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
 8015772:	460c      	mov	r4, r1
 8015774:	6851      	ldr	r1, [r2, #4]
 8015776:	ae04      	add	r6, sp, #16
 8015778:	c603      	stmia	r6!, {r0, r1}
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	6859      	ldr	r1, [r3, #4]
 801577e:	ae06      	add	r6, sp, #24
 8015780:	4617      	mov	r7, r2
 8015782:	c603      	stmia	r6!, {r0, r1}
 8015784:	a804      	add	r0, sp, #16
 8015786:	f7fa fc71 	bl	801006c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801578a:	4639      	mov	r1, r7
 801578c:	a806      	add	r0, sp, #24
 801578e:	f7fa fc55 	bl	801003c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015792:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8015796:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801579a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801579e:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 80157a2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80157a6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80157aa:	440c      	add	r4, r1
 80157ac:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80157b0:	440a      	add	r2, r1
 80157b2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80157b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80157ba:	4413      	add	r3, r2
 80157bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 80157c0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80157c4:	9300      	str	r3, [sp, #0]
 80157c6:	4b80      	ldr	r3, [pc, #512]	; (80159c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	6803      	ldr	r3, [r0, #0]
 80157cc:	6a1b      	ldr	r3, [r3, #32]
 80157ce:	4798      	blx	r3
 80157d0:	4b7e      	ldr	r3, [pc, #504]	; (80159cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 80157d2:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 80157d6:	881a      	ldrh	r2, [r3, #0]
 80157d8:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80157dc:	fb06 1202 	mla	r2, r6, r2, r1
 80157e0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80157e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80157e8:	ea28 72e8 	bic.w	r2, r8, r8, asr #31
 80157ec:	b212      	sxth	r2, r2
 80157ee:	d117      	bne.n	8015820 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xbc>
 80157f0:	9201      	str	r2, [sp, #4]
 80157f2:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 80157f6:	f04f 0a00 	mov.w	sl, #0
 80157fa:	9302      	str	r3, [sp, #8]
 80157fc:	9b00      	ldr	r3, [sp, #0]
 80157fe:	459a      	cmp	sl, r3
 8015800:	f280 80d9 	bge.w	80159b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8015804:	2100      	movs	r1, #0
 8015806:	4541      	cmp	r1, r8
 8015808:	f280 80c1 	bge.w	801598e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x22a>
 801580c:	5c63      	ldrb	r3, [r4, r1]
 801580e:	b12b      	cbz	r3, 801581c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 8015810:	2bff      	cmp	r3, #255	; 0xff
 8015812:	f835 e011 	ldrh.w	lr, [r5, r1, lsl #1]
 8015816:	d176      	bne.n	8015906 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a2>
 8015818:	f820 e011 	strh.w	lr, [r0, r1, lsl #1]
 801581c:	3101      	adds	r1, #1
 801581e:	e7f2      	b.n	8015806 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa2>
 8015820:	9202      	str	r2, [sp, #8]
 8015822:	0052      	lsls	r2, r2, #1
 8015824:	9201      	str	r2, [sp, #4]
 8015826:	f04f 0b00 	mov.w	fp, #0
 801582a:	9303      	str	r3, [sp, #12]
 801582c:	9b00      	ldr	r3, [sp, #0]
 801582e:	459b      	cmp	fp, r3
 8015830:	f280 80c1 	bge.w	80159b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x252>
 8015834:	f04f 0c00 	mov.w	ip, #0
 8015838:	45c4      	cmp	ip, r8
 801583a:	da4f      	bge.n	80158dc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x178>
 801583c:	f814 300c 	ldrb.w	r3, [r4, ip]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d048      	beq.n	80158d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8015844:	fb09 f303 	mul.w	r3, r9, r3
 8015848:	1c5a      	adds	r2, r3, #1
 801584a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801584e:	121b      	asrs	r3, r3, #8
 8015850:	d041      	beq.n	80158d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x172>
 8015852:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 8015856:	f835 e01c 	ldrh.w	lr, [r5, ip, lsl #1]
 801585a:	b29e      	uxth	r6, r3
 801585c:	1211      	asrs	r1, r2, #8
 801585e:	43db      	mvns	r3, r3
 8015860:	b2db      	uxtb	r3, r3
 8015862:	ea4f 272e 	mov.w	r7, lr, asr #8
 8015866:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801586a:	fb11 f103 	smulbb	r1, r1, r3
 801586e:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8015872:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8015876:	00d2      	lsls	r2, r2, #3
 8015878:	fb07 1706 	mla	r7, r7, r6, r1
 801587c:	b2d2      	uxtb	r2, r2
 801587e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8015882:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8015886:	fb12 f203 	smulbb	r2, r2, r3
 801588a:	fa5f fe8e 	uxtb.w	lr, lr
 801588e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8015892:	fb0e 2206 	mla	r2, lr, r6, r2
 8015896:	fb1a fa03 	smulbb	sl, sl, r3
 801589a:	b2bf      	uxth	r7, r7
 801589c:	b292      	uxth	r2, r2
 801589e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80158a2:	fb01 a106 	mla	r1, r1, r6, sl
 80158a6:	1c7b      	adds	r3, r7, #1
 80158a8:	f102 0a01 	add.w	sl, r2, #1
 80158ac:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80158b0:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 80158b4:	b289      	uxth	r1, r1
 80158b6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80158ba:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80158be:	ea47 070a 	orr.w	r7, r7, sl
 80158c2:	f101 0a01 	add.w	sl, r1, #1
 80158c6:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 80158ca:	0949      	lsrs	r1, r1, #5
 80158cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80158d0:	430f      	orrs	r7, r1
 80158d2:	f820 701c 	strh.w	r7, [r0, ip, lsl #1]
 80158d6:	f10c 0c01 	add.w	ip, ip, #1
 80158da:	e7ad      	b.n	8015838 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xd4>
 80158dc:	9b03      	ldr	r3, [sp, #12]
 80158de:	9a01      	ldr	r2, [sp, #4]
 80158e0:	881b      	ldrh	r3, [r3, #0]
 80158e2:	eba3 0308 	sub.w	r3, r3, r8
 80158e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80158ea:	4418      	add	r0, r3
 80158ec:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80158f0:	eba3 0308 	sub.w	r3, r3, r8
 80158f4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80158f8:	4415      	add	r5, r2
 80158fa:	9a02      	ldr	r2, [sp, #8]
 80158fc:	4413      	add	r3, r2
 80158fe:	441c      	add	r4, r3
 8015900:	f10b 0b01 	add.w	fp, fp, #1
 8015904:	e792      	b.n	801582c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xc8>
 8015906:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 801590a:	b29f      	uxth	r7, r3
 801590c:	1216      	asrs	r6, r2, #8
 801590e:	43db      	mvns	r3, r3
 8015910:	b2db      	uxtb	r3, r3
 8015912:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8015916:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801591a:	fb16 f603 	smulbb	r6, r6, r3
 801591e:	ea4f 09e2 	mov.w	r9, r2, asr #3
 8015922:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8015926:	00d2      	lsls	r2, r2, #3
 8015928:	fb0c 6c07 	mla	ip, ip, r7, r6
 801592c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8015930:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8015934:	b2d2      	uxtb	r2, r2
 8015936:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801593a:	fa1f fc8c 	uxth.w	ip, ip
 801593e:	fb19 f903 	smulbb	r9, r9, r3
 8015942:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8015946:	fa5f fe8e 	uxtb.w	lr, lr
 801594a:	fb12 f203 	smulbb	r2, r2, r3
 801594e:	fb06 9607 	mla	r6, r6, r7, r9
 8015952:	fb0e 2207 	mla	r2, lr, r7, r2
 8015956:	f10c 0901 	add.w	r9, ip, #1
 801595a:	b292      	uxth	r2, r2
 801595c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8015960:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8015964:	f102 0c01 	add.w	ip, r2, #1
 8015968:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801596c:	b2b6      	uxth	r6, r6
 801596e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8015972:	ea49 0c02 	orr.w	ip, r9, r2
 8015976:	f106 0901 	add.w	r9, r6, #1
 801597a:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 801597e:	0976      	lsrs	r6, r6, #5
 8015980:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8015984:	ea4c 0c06 	orr.w	ip, ip, r6
 8015988:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 801598c:	e746      	b.n	801581c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xb8>
 801598e:	9b02      	ldr	r3, [sp, #8]
 8015990:	881b      	ldrh	r3, [r3, #0]
 8015992:	eba3 0308 	sub.w	r3, r3, r8
 8015996:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801599a:	4418      	add	r0, r3
 801599c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80159a0:	eba3 0308 	sub.w	r3, r3, r8
 80159a4:	eb0b 0243 	add.w	r2, fp, r3, lsl #1
 80159a8:	4415      	add	r5, r2
 80159aa:	9a01      	ldr	r2, [sp, #4]
 80159ac:	4413      	add	r3, r2
 80159ae:	441c      	add	r4, r3
 80159b0:	f10a 0a01 	add.w	sl, sl, #1
 80159b4:	e722      	b.n	80157fc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 80159b6:	4b04      	ldr	r3, [pc, #16]	; (80159c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x264>)
 80159b8:	6818      	ldr	r0, [r3, #0]
 80159ba:	6803      	ldr	r3, [r0, #0]
 80159bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159be:	4798      	blx	r3
 80159c0:	b009      	add	sp, #36	; 0x24
 80159c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c6:	bf00      	nop
 80159c8:	20009f08 	.word	0x20009f08
 80159cc:	20009f02 	.word	0x20009f02

080159d0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80159d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d4:	b089      	sub	sp, #36	; 0x24
 80159d6:	4682      	mov	sl, r0
 80159d8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80159dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80159de:	460d      	mov	r5, r1
 80159e0:	4691      	mov	r9, r2
 80159e2:	4698      	mov	r8, r3
 80159e4:	b3ae      	cbz	r6, 8015a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80159e6:	4608      	mov	r0, r1
 80159e8:	f7fc fa8c 	bl	8011f04 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80159ec:	4607      	mov	r7, r0
 80159ee:	4628      	mov	r0, r5
 80159f0:	f7fc fac2 	bl	8011f78 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80159f4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80159f8:	4628      	mov	r0, r5
 80159fa:	f8ad 9008 	strh.w	r9, [sp, #8]
 80159fe:	f8ad 800a 	strh.w	r8, [sp, #10]
 8015a02:	f8ad 700c 	strh.w	r7, [sp, #12]
 8015a06:	f7fc fc09 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a0a:	b178      	cbz	r0, 8015a2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015a0c:	4628      	mov	r0, r5
 8015a0e:	f7fc fc05 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a12:	2802      	cmp	r0, #2
 8015a14:	d00a      	beq.n	8015a2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015a16:	4628      	mov	r0, r5
 8015a18:	f7fc fc00 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a1c:	280b      	cmp	r0, #11
 8015a1e:	d005      	beq.n	8015a2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8015a20:	4b69      	ldr	r3, [pc, #420]	; (8015bc8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f8>)
 8015a22:	4a6a      	ldr	r2, [pc, #424]	; (8015bcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8015a24:	486a      	ldr	r0, [pc, #424]	; (8015bd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8015a26:	214f      	movs	r1, #79	; 0x4f
 8015a28:	f007 ff24 	bl	801d874 <__assert_func>
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	f7fc fb71 	bl	8012114 <_ZNK8touchgfx6Bitmap7getDataEv>
 8015a32:	4607      	mov	r7, r0
 8015a34:	4628      	mov	r0, r5
 8015a36:	f7fc fb9f 	bl	8012178 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8015a3a:	4681      	mov	r9, r0
 8015a3c:	4628      	mov	r0, r5
 8015a3e:	f7fc fbed 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a42:	2802      	cmp	r0, #2
 8015a44:	d108      	bne.n	8015a58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8015a46:	4633      	mov	r3, r6
 8015a48:	4622      	mov	r2, r4
 8015a4a:	a902      	add	r1, sp, #8
 8015a4c:	4638      	mov	r0, r7
 8015a4e:	f7ff fa6d 	bl	8014f2c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8015a52:	b009      	add	sp, #36	; 0x24
 8015a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a58:	4628      	mov	r0, r5
 8015a5a:	f7fc fbdf 	bl	801221c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015a5e:	280b      	cmp	r0, #11
 8015a60:	d107      	bne.n	8015a72 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8015a62:	9600      	str	r6, [sp, #0]
 8015a64:	4623      	mov	r3, r4
 8015a66:	aa02      	add	r2, sp, #8
 8015a68:	4649      	mov	r1, r9
 8015a6a:	4638      	mov	r0, r7
 8015a6c:	f7ff fe62 	bl	8015734 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8015a70:	e7ef      	b.n	8015a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015a72:	4628      	mov	r0, r5
 8015a74:	f7fc fb14 	bl	80120a0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8015a78:	b950      	cbnz	r0, 8015a90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8015a7a:	e9cd 6000 	strd	r6, r0, [sp]
 8015a7e:	f8da 3000 	ldr.w	r3, [sl]
 8015a82:	aa02      	add	r2, sp, #8
 8015a84:	691d      	ldr	r5, [r3, #16]
 8015a86:	4639      	mov	r1, r7
 8015a88:	4623      	mov	r3, r4
 8015a8a:	4650      	mov	r0, sl
 8015a8c:	47a8      	blx	r5
 8015a8e:	e7e0      	b.n	8015a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015a90:	f10d 0818 	add.w	r8, sp, #24
 8015a94:	4629      	mov	r1, r5
 8015a96:	4640      	mov	r0, r8
 8015a98:	f7fc faa8 	bl	8011fec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8015a9c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8015aa0:	ad04      	add	r5, sp, #16
 8015aa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8015aa6:	4628      	mov	r0, r5
 8015aa8:	4621      	mov	r1, r4
 8015aaa:	f7f8 fa05 	bl	800deb8 <_ZN8touchgfx4RectaNERKS0_>
 8015aae:	4628      	mov	r0, r5
 8015ab0:	f7f8 fa46 	bl	800df40 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015ab4:	b138      	cbz	r0, 8015ac6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf6>
 8015ab6:	9600      	str	r6, [sp, #0]
 8015ab8:	4623      	mov	r3, r4
 8015aba:	aa02      	add	r2, sp, #8
 8015abc:	4649      	mov	r1, r9
 8015abe:	4638      	mov	r0, r7
 8015ac0:	f7ff fe50 	bl	8015764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015ac4:	e7c5      	b.n	8015a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015ac6:	e9cd 6000 	strd	r6, r0, [sp]
 8015aca:	f8da 3000 	ldr.w	r3, [sl]
 8015ace:	aa02      	add	r2, sp, #8
 8015ad0:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015ad4:	4639      	mov	r1, r7
 8015ad6:	462b      	mov	r3, r5
 8015ad8:	4650      	mov	r0, sl
 8015ada:	47d8      	blx	fp
 8015adc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8015ae0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8015ae4:	4293      	cmp	r3, r2
 8015ae6:	dd13      	ble.n	8015b10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x140>
 8015ae8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8015aec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8015af0:	f8ad 0018 	strh.w	r0, [sp, #24]
 8015af4:	1a9b      	subs	r3, r3, r2
 8015af6:	f8ad 201a 	strh.w	r2, [sp, #26]
 8015afa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015afe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015b02:	9600      	str	r6, [sp, #0]
 8015b04:	4643      	mov	r3, r8
 8015b06:	aa02      	add	r2, sp, #8
 8015b08:	4649      	mov	r1, r9
 8015b0a:	4638      	mov	r0, r7
 8015b0c:	f7ff fe2a 	bl	8015764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015b10:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8015b14:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	dd13      	ble.n	8015b44 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x174>
 8015b1c:	1a9b      	subs	r3, r3, r2
 8015b1e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8015b22:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8015b26:	f8ad 2018 	strh.w	r2, [sp, #24]
 8015b2a:	f8ad 001a 	strh.w	r0, [sp, #26]
 8015b2e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b32:	f8ad 101e 	strh.w	r1, [sp, #30]
 8015b36:	9600      	str	r6, [sp, #0]
 8015b38:	4643      	mov	r3, r8
 8015b3a:	aa02      	add	r2, sp, #8
 8015b3c:	4649      	mov	r1, r9
 8015b3e:	4638      	mov	r0, r7
 8015b40:	f7ff fe10 	bl	8015764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015b44:	88a2      	ldrh	r2, [r4, #4]
 8015b46:	8823      	ldrh	r3, [r4, #0]
 8015b48:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015b52:	440a      	add	r2, r1
 8015b54:	b29b      	uxth	r3, r3
 8015b56:	b292      	uxth	r2, r2
 8015b58:	b211      	sxth	r1, r2
 8015b5a:	b218      	sxth	r0, r3
 8015b5c:	4288      	cmp	r0, r1
 8015b5e:	dd13      	ble.n	8015b88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b8>
 8015b60:	1a9b      	subs	r3, r3, r2
 8015b62:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8015b66:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8015b6a:	f8ad 1018 	strh.w	r1, [sp, #24]
 8015b6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015b72:	f8ad 001e 	strh.w	r0, [sp, #30]
 8015b76:	9600      	str	r6, [sp, #0]
 8015b78:	4643      	mov	r3, r8
 8015b7a:	aa02      	add	r2, sp, #8
 8015b7c:	4649      	mov	r1, r9
 8015b7e:	4638      	mov	r0, r7
 8015b80:	f8ad 501a 	strh.w	r5, [sp, #26]
 8015b84:	f7ff fdee 	bl	8015764 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8015b88:	88e2      	ldrh	r2, [r4, #6]
 8015b8a:	8863      	ldrh	r3, [r4, #2]
 8015b8c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8015b90:	4413      	add	r3, r2
 8015b92:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8015b96:	440a      	add	r2, r1
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	b292      	uxth	r2, r2
 8015b9c:	b211      	sxth	r1, r2
 8015b9e:	b218      	sxth	r0, r3
 8015ba0:	4288      	cmp	r0, r1
 8015ba2:	f77f af56 	ble.w	8015a52 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8015ba6:	f9b4 5000 	ldrsh.w	r5, [r4]
 8015baa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015bae:	f8ad 5018 	strh.w	r5, [sp, #24]
 8015bb2:	1a9b      	subs	r3, r3, r2
 8015bb4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015bb8:	f8ad 101a 	strh.w	r1, [sp, #26]
 8015bbc:	f8ad 001c 	strh.w	r0, [sp, #28]
 8015bc0:	9600      	str	r6, [sp, #0]
 8015bc2:	4643      	mov	r3, r8
 8015bc4:	e779      	b.n	8015aba <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 8015bc6:	bf00      	nop
 8015bc8:	080211fd 	.word	0x080211fd
 8015bcc:	0802190a 	.word	0x0802190a
 8015bd0:	080213a7 	.word	0x080213a7

08015bd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8015bd4:	b508      	push	{r3, lr}
 8015bd6:	b180      	cbz	r0, 8015bfa <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8015bd8:	2902      	cmp	r1, #2
 8015bda:	d014      	beq.n	8015c06 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8015bdc:	2903      	cmp	r1, #3
 8015bde:	d01d      	beq.n	8015c1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8015be0:	2901      	cmp	r1, #1
 8015be2:	d101      	bne.n	8015be8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8015be4:	2001      	movs	r0, #1
 8015be6:	bd08      	pop	{r3, pc}
 8015be8:	4b0e      	ldr	r3, [pc, #56]	; (8015c24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8015bea:	8818      	ldrh	r0, [r3, #0]
 8015bec:	b990      	cbnz	r0, 8015c14 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8015bee:	4b0e      	ldr	r3, [pc, #56]	; (8015c28 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8015bf0:	4a0e      	ldr	r2, [pc, #56]	; (8015c2c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8015bf2:	480f      	ldr	r0, [pc, #60]	; (8015c30 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8015bf4:	21d7      	movs	r1, #215	; 0xd7
 8015bf6:	f007 fe3d 	bl	801d874 <__assert_func>
 8015bfa:	2902      	cmp	r1, #2
 8015bfc:	d00e      	beq.n	8015c1c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8015bfe:	2903      	cmp	r1, #3
 8015c00:	d0f2      	beq.n	8015be8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8015c02:	2901      	cmp	r1, #1
 8015c04:	d1ee      	bne.n	8015be4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8015c06:	4b07      	ldr	r3, [pc, #28]	; (8015c24 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8015c08:	8818      	ldrh	r0, [r3, #0]
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	d0ef      	beq.n	8015bee <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8015c0e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015c12:	e7e8      	b.n	8015be6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015c14:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015c18:	4240      	negs	r0, r0
 8015c1a:	e7e4      	b.n	8015be6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8015c20:	e7e1      	b.n	8015be6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8015c22:	bf00      	nop
 8015c24:	20009f02 	.word	0x20009f02
 8015c28:	08021501 	.word	0x08021501
 8015c2c:	08021a87 	.word	0x08021a87
 8015c30:	08021543 	.word	0x08021543

08015c34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8015c34:	b508      	push	{r3, lr}
 8015c36:	b180      	cbz	r0, 8015c5a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8015c38:	2902      	cmp	r1, #2
 8015c3a:	d014      	beq.n	8015c66 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8015c3c:	2903      	cmp	r1, #3
 8015c3e:	d018      	beq.n	8015c72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015c40:	2901      	cmp	r1, #1
 8015c42:	d001      	beq.n	8015c48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015c44:	2001      	movs	r0, #1
 8015c46:	e013      	b.n	8015c70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015c48:	4b0e      	ldr	r3, [pc, #56]	; (8015c84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8015c4a:	8818      	ldrh	r0, [r3, #0]
 8015c4c:	b970      	cbnz	r0, 8015c6c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8015c4e:	4b0e      	ldr	r3, [pc, #56]	; (8015c88 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8015c50:	4a0e      	ldr	r2, [pc, #56]	; (8015c8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8015c52:	480f      	ldr	r0, [pc, #60]	; (8015c90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8015c54:	21d7      	movs	r1, #215	; 0xd7
 8015c56:	f007 fe0d 	bl	801d874 <__assert_func>
 8015c5a:	2902      	cmp	r1, #2
 8015c5c:	d009      	beq.n	8015c72 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8015c5e:	2903      	cmp	r1, #3
 8015c60:	d0f0      	beq.n	8015c44 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8015c62:	2901      	cmp	r1, #1
 8015c64:	d1f0      	bne.n	8015c48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8015c66:	f04f 30ff 	mov.w	r0, #4294967295
 8015c6a:	e001      	b.n	8015c70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015c6c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015c70:	bd08      	pop	{r3, pc}
 8015c72:	4b04      	ldr	r3, [pc, #16]	; (8015c84 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8015c74:	8818      	ldrh	r0, [r3, #0]
 8015c76:	2800      	cmp	r0, #0
 8015c78:	d0e9      	beq.n	8015c4e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8015c7a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8015c7e:	4240      	negs	r0, r0
 8015c80:	e7f6      	b.n	8015c70 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8015c82:	bf00      	nop
 8015c84:	20009f02 	.word	0x20009f02
 8015c88:	08021501 	.word	0x08021501
 8015c8c:	08021a87 	.word	0x08021a87
 8015c90:	08021543 	.word	0x08021543

08015c94 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8015c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c98:	b097      	sub	sp, #92	; 0x5c
 8015c9a:	9109      	str	r1, [sp, #36]	; 0x24
 8015c9c:	a912      	add	r1, sp, #72	; 0x48
 8015c9e:	e881 000c 	stmia.w	r1, {r2, r3}
 8015ca2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8015ca6:	9306      	str	r3, [sp, #24]
 8015ca8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8015cac:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8015cb0:	930e      	str	r3, [sp, #56]	; 0x38
 8015cb2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8015cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8015cb8:	7b4b      	ldrb	r3, [r1, #13]
 8015cba:	798f      	ldrb	r7, [r1, #6]
 8015cbc:	f9bd 4080 	ldrsh.w	r4, [sp, #128]	; 0x80
 8015cc0:	f8bd 6088 	ldrh.w	r6, [sp, #136]	; 0x88
 8015cc4:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8015cc8:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8015ccc:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8015cd0:	0158      	lsls	r0, r3, #5
 8015cd2:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015cd6:	4338      	orrs	r0, r7
 8015cd8:	9008      	str	r0, [sp, #32]
 8015cda:	f000 8149 	beq.w	8015f70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8015cde:	011b      	lsls	r3, r3, #4
 8015ce0:	79c8      	ldrb	r0, [r1, #7]
 8015ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ce6:	4303      	orrs	r3, r0
 8015ce8:	9307      	str	r3, [sp, #28]
 8015cea:	f000 8141 	beq.w	8015f70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8015cee:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8015cf2:	b29b      	uxth	r3, r3
 8015cf4:	2e00      	cmp	r6, #0
 8015cf6:	f000 80e5 	beq.w	8015ec4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x230>
 8015cfa:	1af6      	subs	r6, r6, r3
 8015cfc:	b2b6      	uxth	r6, r6
 8015cfe:	0433      	lsls	r3, r6, #16
 8015d00:	d502      	bpl.n	8015d08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8015d02:	1ba4      	subs	r4, r4, r6
 8015d04:	b224      	sxth	r4, r4
 8015d06:	2600      	movs	r6, #0
 8015d08:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015d0c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8015d10:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 8015d14:	428c      	cmp	r4, r1
 8015d16:	b28b      	uxth	r3, r1
 8015d18:	bfbf      	itttt	lt
 8015d1a:	18f6      	addlt	r6, r6, r3
 8015d1c:	1b34      	sublt	r4, r6, r4
 8015d1e:	b2a6      	uxthlt	r6, r4
 8015d20:	460c      	movlt	r4, r1
 8015d22:	8891      	ldrh	r1, [r2, #4]
 8015d24:	440b      	add	r3, r1
 8015d26:	b21b      	sxth	r3, r3
 8015d28:	930d      	str	r3, [sp, #52]	; 0x34
 8015d2a:	88d3      	ldrh	r3, [r2, #6]
 8015d2c:	9a06      	ldr	r2, [sp, #24]
 8015d2e:	449a      	add	sl, r3
 8015d30:	fa0f f38a 	sxth.w	r3, sl
 8015d34:	930c      	str	r3, [sp, #48]	; 0x30
 8015d36:	4bb5      	ldr	r3, [pc, #724]	; (801600c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8015d38:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8015d3c:	f893 9000 	ldrb.w	r9, [r3]
 8015d40:	f109 3cff 	add.w	ip, r9, #4294967295
 8015d44:	f1dc 0300 	rsbs	r3, ip, #0
 8015d48:	eb43 030c 	adc.w	r3, r3, ip
 8015d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d4e:	4621      	mov	r1, r4
 8015d50:	465b      	mov	r3, fp
 8015d52:	a812      	add	r0, sp, #72	; 0x48
 8015d54:	f7fa f862 	bl	800fe1c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8015d58:	4621      	mov	r1, r4
 8015d5a:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8015d5e:	465b      	mov	r3, fp
 8015d60:	9a06      	ldr	r2, [sp, #24]
 8015d62:	a812      	add	r0, sp, #72	; 0x48
 8015d64:	f7fa f872 	bl	800fe4c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8015d68:	a916      	add	r1, sp, #88	; 0x58
 8015d6a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8015d6e:	a815      	add	r0, sp, #84	; 0x54
 8015d70:	f7fa f94e 	bl	8010010 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8015d74:	f1bb 0f00 	cmp.w	fp, #0
 8015d78:	f040 80a7 	bne.w	8015eca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x236>
 8015d7c:	f1b9 0f01 	cmp.w	r9, #1
 8015d80:	f040 80ab 	bne.w	8015eda <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8015d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	f040 80f7 	bne.w	8015f7a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e6>
 8015d8c:	4ba0      	ldr	r3, [pc, #640]	; (8016010 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>)
 8015d8e:	6818      	ldr	r0, [r3, #0]
 8015d90:	6803      	ldr	r3, [r0, #0]
 8015d92:	6a1b      	ldr	r3, [r3, #32]
 8015d94:	4798      	blx	r3
 8015d96:	4a9f      	ldr	r2, [pc, #636]	; (8016014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8015d98:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8015d9c:	8811      	ldrh	r1, [r2, #0]
 8015d9e:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8015da2:	fb01 2303 	mla	r3, r1, r3, r2
 8015da6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015daa:	f04f 0901 	mov.w	r9, #1
 8015dae:	9307      	str	r3, [sp, #28]
 8015db0:	fa09 f308 	lsl.w	r3, r9, r8
 8015db4:	3b01      	subs	r3, #1
 8015db6:	b2db      	uxtb	r3, r3
 8015db8:	45c8      	cmp	r8, r9
 8015dba:	930f      	str	r3, [sp, #60]	; 0x3c
 8015dbc:	f000 80df 	beq.w	8015f7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ea>
 8015dc0:	f1b8 0f02 	cmp.w	r8, #2
 8015dc4:	f000 8153 	beq.w	801606e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3da>
 8015dc8:	f1b8 0f04 	cmp.w	r8, #4
 8015dcc:	f000 8146 	beq.w	801605c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c8>
 8015dd0:	b906      	cbnz	r6, 8015dd4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x140>
 8015dd2:	b175      	cbz	r5, 8015df2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x15e>
 8015dd4:	fb17 6305 	smlabb	r3, r7, r5, r6
 8015dd8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015dda:	fb13 f308 	smulbb	r3, r3, r8
 8015dde:	b29b      	uxth	r3, r3
 8015de0:	ebaa 0a05 	sub.w	sl, sl, r5
 8015de4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8015de8:	9226      	str	r2, [sp, #152]	; 0x98
 8015dea:	fa1f fa8a 	uxth.w	sl, sl
 8015dee:	f003 0507 	and.w	r5, r3, #7
 8015df2:	4659      	mov	r1, fp
 8015df4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015df6:	f7ff feed 	bl	8015bd4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8015dfa:	4659      	mov	r1, fp
 8015dfc:	9010      	str	r0, [sp, #64]	; 0x40
 8015dfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015e00:	f7ff ff18 	bl	8015c34 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8015e04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e06:	9a06      	ldr	r2, [sp, #24]
 8015e08:	1a9a      	subs	r2, r3, r2
 8015e0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e0c:	1ba4      	subs	r4, r4, r6
 8015e0e:	1b1c      	subs	r4, r3, r4
 8015e10:	9b08      	ldr	r3, [sp, #32]
 8015e12:	4592      	cmp	sl, r2
 8015e14:	bfa8      	it	ge
 8015e16:	4692      	movge	sl, r2
 8015e18:	429c      	cmp	r4, r3
 8015e1a:	bfd4      	ite	le
 8015e1c:	ebc6 0604 	rsble	r6, r6, r4
 8015e20:	ebc6 0603 	rsbgt	r6, r6, r3
 8015e24:	1bbf      	subs	r7, r7, r6
 8015e26:	fb08 f307 	mul.w	r3, r8, r7
 8015e2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8015e2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015e2e:	781a      	ldrb	r2, [r3, #0]
 8015e30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e32:	1219      	asrs	r1, r3, #8
 8015e34:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 8015e38:	930c      	str	r3, [sp, #48]	; 0x30
 8015e3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e3c:	f3c3 01cc 	ubfx	r1, r3, #3, #13
 8015e40:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8015e44:	930d      	str	r3, [sp, #52]	; 0x34
 8015e46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8015e48:	00d9      	lsls	r1, r3, #3
 8015e4a:	f001 03f8 	and.w	r3, r1, #248	; 0xf8
 8015e4e:	930e      	str	r3, [sp, #56]	; 0x38
 8015e50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015e52:	0059      	lsls	r1, r3, #1
 8015e54:	fb03 0016 	mls	r0, r3, r6, r0
 8015e58:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 8015e5c:	434b      	muls	r3, r1
 8015e5e:	9106      	str	r1, [sp, #24]
 8015e60:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015e62:	412a      	asrs	r2, r5
 8015e64:	b289      	uxth	r1, r1
 8015e66:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8015e6a:	b2d2      	uxtb	r2, r2
 8015e6c:	9110      	str	r1, [sp, #64]	; 0x40
 8015e6e:	9311      	str	r3, [sp, #68]	; 0x44
 8015e70:	f1ba 0f00 	cmp.w	sl, #0
 8015e74:	f340 80e4 	ble.w	8016040 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8015e78:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8015e7c:	46b6      	mov	lr, r6
 8015e7e:	f1be 0f00 	cmp.w	lr, #0
 8015e82:	f340 80c9 	ble.w	8016018 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8015e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e88:	4013      	ands	r3, r2
 8015e8a:	d009      	beq.n	8015ea0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x20c>
 8015e8c:	fb13 f309 	smulbb	r3, r3, r9
 8015e90:	2bfe      	cmp	r3, #254	; 0xfe
 8015e92:	dd77      	ble.n	8015f84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 8015e94:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015e96:	29ff      	cmp	r1, #255	; 0xff
 8015e98:	d174      	bne.n	8015f84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f0>
 8015e9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015e9c:	f8ac 0000 	strh.w	r0, [ip]
 8015ea0:	4445      	add	r5, r8
 8015ea2:	b2ad      	uxth	r5, r5
 8015ea4:	2d07      	cmp	r5, #7
 8015ea6:	bf81      	itttt	hi
 8015ea8:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8015eaa:	785a      	ldrbhi	r2, [r3, #1]
 8015eac:	3301      	addhi	r3, #1
 8015eae:	9326      	strhi	r3, [sp, #152]	; 0x98
 8015eb0:	9b06      	ldr	r3, [sp, #24]
 8015eb2:	bf9a      	itte	ls
 8015eb4:	fa42 f208 	asrls.w	r2, r2, r8
 8015eb8:	b2d2      	uxtbls	r2, r2
 8015eba:	2500      	movhi	r5, #0
 8015ebc:	449c      	add	ip, r3
 8015ebe:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015ec2:	e7dc      	b.n	8015e7e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ea>
 8015ec4:	441c      	add	r4, r3
 8015ec6:	b224      	sxth	r4, r4
 8015ec8:	e71e      	b.n	8015d08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8015eca:	f1bb 0f01 	cmp.w	fp, #1
 8015ece:	f47f af59 	bne.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015ed2:	f1b9 0f01 	cmp.w	r9, #1
 8015ed6:	f47f af55 	bne.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015eda:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8016010 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8015ede:	f8d9 0000 	ldr.w	r0, [r9]
 8015ee2:	6803      	ldr	r3, [r0, #0]
 8015ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ee6:	4798      	blx	r3
 8015ee8:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8015eec:	464a      	mov	r2, r9
 8015eee:	d006      	beq.n	8015efe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8015ef0:	f1b8 0f04 	cmp.w	r8, #4
 8015ef4:	d13f      	bne.n	8015f76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8015ef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ef8:	3300      	adds	r3, #0
 8015efa:	bf18      	it	ne
 8015efc:	2301      	movne	r3, #1
 8015efe:	05c0      	lsls	r0, r0, #23
 8015f00:	f140 80a7 	bpl.w	8016052 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8015f04:	f1b8 0f08 	cmp.w	r8, #8
 8015f08:	f040 80a3 	bne.w	8016052 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3be>
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	bf0c      	ite	eq
 8015f10:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8015f14:	2180      	movne	r1, #128	; 0x80
 8015f16:	2e00      	cmp	r6, #0
 8015f18:	f47f af34 	bne.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015f1c:	2d00      	cmp	r5, #0
 8015f1e:	f47f af31 	bne.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015f22:	9b08      	ldr	r3, [sp, #32]
 8015f24:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015f26:	18e3      	adds	r3, r4, r3
 8015f28:	4283      	cmp	r3, r0
 8015f2a:	f73f af2b 	bgt.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015f2e:	e9dd 0306 	ldrd	r0, r3, [sp, #24]
 8015f32:	4403      	add	r3, r0
 8015f34:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015f36:	4283      	cmp	r3, r0
 8015f38:	f73f af24 	bgt.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8015f3c:	6810      	ldr	r0, [r2, #0]
 8015f3e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8015f42:	6804      	ldr	r4, [r0, #0]
 8015f44:	9105      	str	r1, [sp, #20]
 8015f46:	f1b8 0f08 	cmp.w	r8, #8
 8015f4a:	bf18      	it	ne
 8015f4c:	3701      	addne	r7, #1
 8015f4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f50:	9104      	str	r1, [sp, #16]
 8015f52:	bf18      	it	ne
 8015f54:	f027 0701 	bicne.w	r7, r7, #1
 8015f58:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8015f5a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8015f5e:	bf18      	it	ne
 8015f60:	b2bf      	uxthne	r7, r7
 8015f62:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8015f66:	e9cd 7a00 	strd	r7, sl, [sp]
 8015f6a:	9926      	ldr	r1, [sp, #152]	; 0x98
 8015f6c:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8015f6e:	47a0      	blx	r4
 8015f70:	b017      	add	sp, #92	; 0x5c
 8015f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f76:	2300      	movs	r3, #0
 8015f78:	e7c1      	b.n	8015efe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x26a>
 8015f7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f7c:	e70b      	b.n	8015d96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x102>
 8015f7e:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8015f82:	e725      	b.n	8015dd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8015f84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015f86:	f8bc 4000 	ldrh.w	r4, [ip]
 8015f8a:	fb11 f303 	smulbb	r3, r1, r3
 8015f8e:	b29b      	uxth	r3, r3
 8015f90:	1c59      	adds	r1, r3, #1
 8015f92:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8015f96:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8015f9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015f9c:	b29f      	uxth	r7, r3
 8015f9e:	1220      	asrs	r0, r4, #8
 8015fa0:	43db      	mvns	r3, r3
 8015fa2:	b2db      	uxtb	r3, r3
 8015fa4:	fb11 f107 	smulbb	r1, r1, r7
 8015fa8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8015fac:	fb00 1003 	mla	r0, r0, r3, r1
 8015fb0:	b281      	uxth	r1, r0
 8015fb2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015fb4:	9108      	str	r1, [sp, #32]
 8015fb6:	fb17 fb00 	smulbb	fp, r7, r0
 8015fba:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015fbc:	10e1      	asrs	r1, r4, #3
 8015fbe:	00e4      	lsls	r4, r4, #3
 8015fc0:	fb17 f700 	smulbb	r7, r7, r0
 8015fc4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8015fc8:	b2e4      	uxtb	r4, r4
 8015fca:	fb01 b103 	mla	r1, r1, r3, fp
 8015fce:	fb04 7703 	mla	r7, r4, r3, r7
 8015fd2:	9b08      	ldr	r3, [sp, #32]
 8015fd4:	9808      	ldr	r0, [sp, #32]
 8015fd6:	b2bf      	uxth	r7, r7
 8015fd8:	3301      	adds	r3, #1
 8015fda:	f107 0b01 	add.w	fp, r7, #1
 8015fde:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015fe2:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8015fe6:	b289      	uxth	r1, r1
 8015fe8:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8015fec:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8015ff0:	ea40 000b 	orr.w	r0, r0, fp
 8015ff4:	f101 0b01 	add.w	fp, r1, #1
 8015ff8:	eb0b 2b11 	add.w	fp, fp, r1, lsr #8
 8015ffc:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8016000:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016004:	ea40 000b 	orr.w	r0, r0, fp
 8016008:	e748      	b.n	8015e9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 801600a:	bf00      	nop
 801600c:	20009f00 	.word	0x20009f00
 8016010:	20009f08 	.word	0x20009f08
 8016014:	20009f02 	.word	0x20009f02
 8016018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801601a:	b153      	cbz	r3, 8016032 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801601c:	441d      	add	r5, r3
 801601e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016020:	b2ad      	uxth	r5, r5
 8016022:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
 8016026:	f005 0507 	and.w	r5, r5, #7
 801602a:	781a      	ldrb	r2, [r3, #0]
 801602c:	9326      	str	r3, [sp, #152]	; 0x98
 801602e:	412a      	asrs	r2, r5
 8016030:	b2d2      	uxtb	r2, r2
 8016032:	9b07      	ldr	r3, [sp, #28]
 8016034:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016036:	440b      	add	r3, r1
 8016038:	9307      	str	r3, [sp, #28]
 801603a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801603e:	e717      	b.n	8015e70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1dc>
 8016040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016042:	2b00      	cmp	r3, #0
 8016044:	d194      	bne.n	8015f70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8016046:	4b0b      	ldr	r3, [pc, #44]	; (8016074 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>)
 8016048:	6818      	ldr	r0, [r3, #0]
 801604a:	6803      	ldr	r3, [r0, #0]
 801604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604e:	4798      	blx	r3
 8016050:	e78e      	b.n	8015f70 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2dc>
 8016052:	2b00      	cmp	r3, #0
 8016054:	f43f ae96 	beq.w	8015d84 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016058:	2180      	movs	r1, #128	; 0x80
 801605a:	e75c      	b.n	8015f16 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x282>
 801605c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801605e:	b11b      	cbz	r3, 8016068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 8016060:	07fb      	lsls	r3, r7, #31
 8016062:	d501      	bpl.n	8016068 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d4>
 8016064:	3701      	adds	r7, #1
 8016066:	b2bf      	uxth	r7, r7
 8016068:	f04f 0911 	mov.w	r9, #17
 801606c:	e6b0      	b.n	8015dd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 801606e:	f04f 0955 	mov.w	r9, #85	; 0x55
 8016072:	e6ad      	b.n	8015dd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x13c>
 8016074:	20009f08 	.word	0x20009f08

08016078 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8016078:	b538      	push	{r3, r4, r5, lr}
 801607a:	4c15      	ldr	r4, [pc, #84]	; (80160d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801607c:	7823      	ldrb	r3, [r4, #0]
 801607e:	f3bf 8f5b 	dmb	ish
 8016082:	07da      	lsls	r2, r3, #31
 8016084:	4605      	mov	r5, r0
 8016086:	d40b      	bmi.n	80160a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8016088:	4620      	mov	r0, r4
 801608a:	f007 fbc9 	bl	801d820 <__cxa_guard_acquire>
 801608e:	b138      	cbz	r0, 80160a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8016090:	4620      	mov	r0, r4
 8016092:	f007 fbd1 	bl	801d838 <__cxa_guard_release>
 8016096:	4a0f      	ldr	r2, [pc, #60]	; (80160d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8016098:	490f      	ldr	r1, [pc, #60]	; (80160d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801609a:	4810      	ldr	r0, [pc, #64]	; (80160dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801609c:	f007 fbb6 	bl	801d80c <__aeabi_atexit>
 80160a0:	4c0f      	ldr	r4, [pc, #60]	; (80160e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 80160a2:	7823      	ldrb	r3, [r4, #0]
 80160a4:	f3bf 8f5b 	dmb	ish
 80160a8:	07db      	lsls	r3, r3, #31
 80160aa:	d40b      	bmi.n	80160c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80160ac:	4620      	mov	r0, r4
 80160ae:	f007 fbb7 	bl	801d820 <__cxa_guard_acquire>
 80160b2:	b138      	cbz	r0, 80160c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 80160b4:	4620      	mov	r0, r4
 80160b6:	f007 fbbf 	bl	801d838 <__cxa_guard_release>
 80160ba:	4a06      	ldr	r2, [pc, #24]	; (80160d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80160bc:	4909      	ldr	r1, [pc, #36]	; (80160e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 80160be:	480a      	ldr	r0, [pc, #40]	; (80160e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80160c0:	f007 fba4 	bl	801d80c <__aeabi_atexit>
 80160c4:	4b05      	ldr	r3, [pc, #20]	; (80160dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80160c6:	612b      	str	r3, [r5, #16]
 80160c8:	4b07      	ldr	r3, [pc, #28]	; (80160e8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80160ca:	616b      	str	r3, [r5, #20]
 80160cc:	bd38      	pop	{r3, r4, r5, pc}
 80160ce:	bf00      	nop
 80160d0:	20009ff4 	.word	0x20009ff4
 80160d4:	20000000 	.word	0x20000000
 80160d8:	08014733 	.word	0x08014733
 80160dc:	200000d8 	.word	0x200000d8
 80160e0:	20009ff8 	.word	0x20009ff8
 80160e4:	08014731 	.word	0x08014731
 80160e8:	200000dc 	.word	0x200000dc

080160ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80160ec:	b538      	push	{r3, r4, r5, lr}
 80160ee:	4c15      	ldr	r4, [pc, #84]	; (8016144 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80160f0:	7823      	ldrb	r3, [r4, #0]
 80160f2:	f3bf 8f5b 	dmb	ish
 80160f6:	07da      	lsls	r2, r3, #31
 80160f8:	4605      	mov	r5, r0
 80160fa:	d40b      	bmi.n	8016114 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80160fc:	4620      	mov	r0, r4
 80160fe:	f007 fb8f 	bl	801d820 <__cxa_guard_acquire>
 8016102:	b138      	cbz	r0, 8016114 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8016104:	4620      	mov	r0, r4
 8016106:	f007 fb97 	bl	801d838 <__cxa_guard_release>
 801610a:	4a0f      	ldr	r2, [pc, #60]	; (8016148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801610c:	490f      	ldr	r1, [pc, #60]	; (801614c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801610e:	4810      	ldr	r0, [pc, #64]	; (8016150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8016110:	f007 fb7c 	bl	801d80c <__aeabi_atexit>
 8016114:	4c0f      	ldr	r4, [pc, #60]	; (8016154 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8016116:	7823      	ldrb	r3, [r4, #0]
 8016118:	f3bf 8f5b 	dmb	ish
 801611c:	07db      	lsls	r3, r3, #31
 801611e:	d40b      	bmi.n	8016138 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8016120:	4620      	mov	r0, r4
 8016122:	f007 fb7d 	bl	801d820 <__cxa_guard_acquire>
 8016126:	b138      	cbz	r0, 8016138 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8016128:	4620      	mov	r0, r4
 801612a:	f007 fb85 	bl	801d838 <__cxa_guard_release>
 801612e:	4a06      	ldr	r2, [pc, #24]	; (8016148 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8016130:	4909      	ldr	r1, [pc, #36]	; (8016158 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8016132:	480a      	ldr	r0, [pc, #40]	; (801615c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8016134:	f007 fb6a 	bl	801d80c <__aeabi_atexit>
 8016138:	4b05      	ldr	r3, [pc, #20]	; (8016150 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801613a:	60ab      	str	r3, [r5, #8]
 801613c:	4b07      	ldr	r3, [pc, #28]	; (801615c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801613e:	60eb      	str	r3, [r5, #12]
 8016140:	bd38      	pop	{r3, r4, r5, pc}
 8016142:	bf00      	nop
 8016144:	20009fcc 	.word	0x20009fcc
 8016148:	20000000 	.word	0x20000000
 801614c:	08014737 	.word	0x08014737
 8016150:	200000b0 	.word	0x200000b0
 8016154:	20009fd0 	.word	0x20009fd0
 8016158:	08014735 	.word	0x08014735
 801615c:	200000b4 	.word	0x200000b4

08016160 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8016160:	b510      	push	{r4, lr}
 8016162:	4604      	mov	r4, r0
 8016164:	f7ff ff88 	bl	8016078 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8016168:	4620      	mov	r0, r4
 801616a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801616e:	f7ff bfbd 	b.w	80160ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08016174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8016174:	b538      	push	{r3, r4, r5, lr}
 8016176:	4c15      	ldr	r4, [pc, #84]	; (80161cc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8016178:	7823      	ldrb	r3, [r4, #0]
 801617a:	f3bf 8f5b 	dmb	ish
 801617e:	07da      	lsls	r2, r3, #31
 8016180:	4605      	mov	r5, r0
 8016182:	d40b      	bmi.n	801619c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016184:	4620      	mov	r0, r4
 8016186:	f007 fb4b 	bl	801d820 <__cxa_guard_acquire>
 801618a:	b138      	cbz	r0, 801619c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801618c:	4620      	mov	r0, r4
 801618e:	f007 fb53 	bl	801d838 <__cxa_guard_release>
 8016192:	4a0f      	ldr	r2, [pc, #60]	; (80161d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016194:	490f      	ldr	r1, [pc, #60]	; (80161d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8016196:	4810      	ldr	r0, [pc, #64]	; (80161d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016198:	f007 fb38 	bl	801d80c <__aeabi_atexit>
 801619c:	4c0f      	ldr	r4, [pc, #60]	; (80161dc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801619e:	7823      	ldrb	r3, [r4, #0]
 80161a0:	f3bf 8f5b 	dmb	ish
 80161a4:	07db      	lsls	r3, r3, #31
 80161a6:	d40b      	bmi.n	80161c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80161a8:	4620      	mov	r0, r4
 80161aa:	f007 fb39 	bl	801d820 <__cxa_guard_acquire>
 80161ae:	b138      	cbz	r0, 80161c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80161b0:	4620      	mov	r0, r4
 80161b2:	f007 fb41 	bl	801d838 <__cxa_guard_release>
 80161b6:	4a06      	ldr	r2, [pc, #24]	; (80161d0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80161b8:	4909      	ldr	r1, [pc, #36]	; (80161e0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80161ba:	480a      	ldr	r0, [pc, #40]	; (80161e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80161bc:	f007 fb26 	bl	801d80c <__aeabi_atexit>
 80161c0:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80161c2:	622b      	str	r3, [r5, #32]
 80161c4:	4b07      	ldr	r3, [pc, #28]	; (80161e4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80161c6:	626b      	str	r3, [r5, #36]	; 0x24
 80161c8:	bd38      	pop	{r3, r4, r5, pc}
 80161ca:	bf00      	nop
 80161cc:	20009ffc 	.word	0x20009ffc
 80161d0:	20000000 	.word	0x20000000
 80161d4:	0801472b 	.word	0x0801472b
 80161d8:	200000e0 	.word	0x200000e0
 80161dc:	2000a000 	.word	0x2000a000
 80161e0:	08014729 	.word	0x08014729
 80161e4:	200000e4 	.word	0x200000e4

080161e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80161e8:	b538      	push	{r3, r4, r5, lr}
 80161ea:	4c15      	ldr	r4, [pc, #84]	; (8016240 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80161ec:	7823      	ldrb	r3, [r4, #0]
 80161ee:	f3bf 8f5b 	dmb	ish
 80161f2:	07da      	lsls	r2, r3, #31
 80161f4:	4605      	mov	r5, r0
 80161f6:	d40b      	bmi.n	8016210 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80161f8:	4620      	mov	r0, r4
 80161fa:	f007 fb11 	bl	801d820 <__cxa_guard_acquire>
 80161fe:	b138      	cbz	r0, 8016210 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016200:	4620      	mov	r0, r4
 8016202:	f007 fb19 	bl	801d838 <__cxa_guard_release>
 8016206:	4a0f      	ldr	r2, [pc, #60]	; (8016244 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016208:	490f      	ldr	r1, [pc, #60]	; (8016248 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801620a:	4810      	ldr	r0, [pc, #64]	; (801624c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801620c:	f007 fafe 	bl	801d80c <__aeabi_atexit>
 8016210:	4c0f      	ldr	r4, [pc, #60]	; (8016250 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8016212:	7823      	ldrb	r3, [r4, #0]
 8016214:	f3bf 8f5b 	dmb	ish
 8016218:	07db      	lsls	r3, r3, #31
 801621a:	d40b      	bmi.n	8016234 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801621c:	4620      	mov	r0, r4
 801621e:	f007 faff 	bl	801d820 <__cxa_guard_acquire>
 8016222:	b138      	cbz	r0, 8016234 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016224:	4620      	mov	r0, r4
 8016226:	f007 fb07 	bl	801d838 <__cxa_guard_release>
 801622a:	4a06      	ldr	r2, [pc, #24]	; (8016244 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801622c:	4909      	ldr	r1, [pc, #36]	; (8016254 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801622e:	480a      	ldr	r0, [pc, #40]	; (8016258 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8016230:	f007 faec 	bl	801d80c <__aeabi_atexit>
 8016234:	4b05      	ldr	r3, [pc, #20]	; (801624c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016236:	61ab      	str	r3, [r5, #24]
 8016238:	4b07      	ldr	r3, [pc, #28]	; (8016258 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801623a:	61eb      	str	r3, [r5, #28]
 801623c:	bd38      	pop	{r3, r4, r5, pc}
 801623e:	bf00      	nop
 8016240:	20009fd4 	.word	0x20009fd4
 8016244:	20000000 	.word	0x20000000
 8016248:	0801472f 	.word	0x0801472f
 801624c:	200000b8 	.word	0x200000b8
 8016250:	20009fd8 	.word	0x20009fd8
 8016254:	0801472d 	.word	0x0801472d
 8016258:	200000bc 	.word	0x200000bc

0801625c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801625c:	b510      	push	{r4, lr}
 801625e:	4604      	mov	r4, r0
 8016260:	f7ff ff88 	bl	8016174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8016264:	4620      	mov	r0, r4
 8016266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801626a:	f7ff bfbd 	b.w	80161e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08016270 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8016270:	b538      	push	{r3, r4, r5, lr}
 8016272:	4c15      	ldr	r4, [pc, #84]	; (80162c8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8016274:	7823      	ldrb	r3, [r4, #0]
 8016276:	f3bf 8f5b 	dmb	ish
 801627a:	07da      	lsls	r2, r3, #31
 801627c:	4605      	mov	r5, r0
 801627e:	d40b      	bmi.n	8016298 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016280:	4620      	mov	r0, r4
 8016282:	f007 facd 	bl	801d820 <__cxa_guard_acquire>
 8016286:	b138      	cbz	r0, 8016298 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016288:	4620      	mov	r0, r4
 801628a:	f007 fad5 	bl	801d838 <__cxa_guard_release>
 801628e:	4a0f      	ldr	r2, [pc, #60]	; (80162cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016290:	490f      	ldr	r1, [pc, #60]	; (80162d0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8016292:	4810      	ldr	r0, [pc, #64]	; (80162d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016294:	f007 faba 	bl	801d80c <__aeabi_atexit>
 8016298:	4c0f      	ldr	r4, [pc, #60]	; (80162d8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801629a:	7823      	ldrb	r3, [r4, #0]
 801629c:	f3bf 8f5b 	dmb	ish
 80162a0:	07db      	lsls	r3, r3, #31
 80162a2:	d40b      	bmi.n	80162bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80162a4:	4620      	mov	r0, r4
 80162a6:	f007 fabb 	bl	801d820 <__cxa_guard_acquire>
 80162aa:	b138      	cbz	r0, 80162bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80162ac:	4620      	mov	r0, r4
 80162ae:	f007 fac3 	bl	801d838 <__cxa_guard_release>
 80162b2:	4a06      	ldr	r2, [pc, #24]	; (80162cc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80162b4:	4909      	ldr	r1, [pc, #36]	; (80162dc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80162b6:	480a      	ldr	r0, [pc, #40]	; (80162e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80162b8:	f007 faa8 	bl	801d80c <__aeabi_atexit>
 80162bc:	4b05      	ldr	r3, [pc, #20]	; (80162d4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80162be:	632b      	str	r3, [r5, #48]	; 0x30
 80162c0:	4b07      	ldr	r3, [pc, #28]	; (80162e0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80162c2:	636b      	str	r3, [r5, #52]	; 0x34
 80162c4:	bd38      	pop	{r3, r4, r5, pc}
 80162c6:	bf00      	nop
 80162c8:	2000a00c 	.word	0x2000a00c
 80162cc:	20000000 	.word	0x20000000
 80162d0:	08014723 	.word	0x08014723
 80162d4:	200000f0 	.word	0x200000f0
 80162d8:	2000a010 	.word	0x2000a010
 80162dc:	08014721 	.word	0x08014721
 80162e0:	200000f4 	.word	0x200000f4

080162e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80162e4:	b538      	push	{r3, r4, r5, lr}
 80162e6:	4c15      	ldr	r4, [pc, #84]	; (801633c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80162e8:	7823      	ldrb	r3, [r4, #0]
 80162ea:	f3bf 8f5b 	dmb	ish
 80162ee:	07da      	lsls	r2, r3, #31
 80162f0:	4605      	mov	r5, r0
 80162f2:	d40b      	bmi.n	801630c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80162f4:	4620      	mov	r0, r4
 80162f6:	f007 fa93 	bl	801d820 <__cxa_guard_acquire>
 80162fa:	b138      	cbz	r0, 801630c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80162fc:	4620      	mov	r0, r4
 80162fe:	f007 fa9b 	bl	801d838 <__cxa_guard_release>
 8016302:	4a0f      	ldr	r2, [pc, #60]	; (8016340 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016304:	490f      	ldr	r1, [pc, #60]	; (8016344 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8016306:	4810      	ldr	r0, [pc, #64]	; (8016348 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016308:	f007 fa80 	bl	801d80c <__aeabi_atexit>
 801630c:	4c0f      	ldr	r4, [pc, #60]	; (801634c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801630e:	7823      	ldrb	r3, [r4, #0]
 8016310:	f3bf 8f5b 	dmb	ish
 8016314:	07db      	lsls	r3, r3, #31
 8016316:	d40b      	bmi.n	8016330 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016318:	4620      	mov	r0, r4
 801631a:	f007 fa81 	bl	801d820 <__cxa_guard_acquire>
 801631e:	b138      	cbz	r0, 8016330 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016320:	4620      	mov	r0, r4
 8016322:	f007 fa89 	bl	801d838 <__cxa_guard_release>
 8016326:	4a06      	ldr	r2, [pc, #24]	; (8016340 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8016328:	4909      	ldr	r1, [pc, #36]	; (8016350 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801632a:	480a      	ldr	r0, [pc, #40]	; (8016354 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801632c:	f007 fa6e 	bl	801d80c <__aeabi_atexit>
 8016330:	4b05      	ldr	r3, [pc, #20]	; (8016348 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016332:	62ab      	str	r3, [r5, #40]	; 0x28
 8016334:	4b07      	ldr	r3, [pc, #28]	; (8016354 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8016336:	62eb      	str	r3, [r5, #44]	; 0x2c
 8016338:	bd38      	pop	{r3, r4, r5, pc}
 801633a:	bf00      	nop
 801633c:	20009fdc 	.word	0x20009fdc
 8016340:	20000000 	.word	0x20000000
 8016344:	08014727 	.word	0x08014727
 8016348:	200000c0 	.word	0x200000c0
 801634c:	20009fe0 	.word	0x20009fe0
 8016350:	08014725 	.word	0x08014725
 8016354:	200000c4 	.word	0x200000c4

08016358 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8016358:	b510      	push	{r4, lr}
 801635a:	4604      	mov	r4, r0
 801635c:	f7ff ff88 	bl	8016270 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8016360:	4620      	mov	r0, r4
 8016362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016366:	f7ff bfbd 	b.w	80162e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801636c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801636c:	b538      	push	{r3, r4, r5, lr}
 801636e:	4c15      	ldr	r4, [pc, #84]	; (80163c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8016370:	7823      	ldrb	r3, [r4, #0]
 8016372:	f3bf 8f5b 	dmb	ish
 8016376:	07da      	lsls	r2, r3, #31
 8016378:	4605      	mov	r5, r0
 801637a:	d40b      	bmi.n	8016394 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801637c:	4620      	mov	r0, r4
 801637e:	f007 fa4f 	bl	801d820 <__cxa_guard_acquire>
 8016382:	b138      	cbz	r0, 8016394 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8016384:	4620      	mov	r0, r4
 8016386:	f007 fa57 	bl	801d838 <__cxa_guard_release>
 801638a:	4a0f      	ldr	r2, [pc, #60]	; (80163c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801638c:	490f      	ldr	r1, [pc, #60]	; (80163cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801638e:	4810      	ldr	r0, [pc, #64]	; (80163d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8016390:	f007 fa3c 	bl	801d80c <__aeabi_atexit>
 8016394:	4c0f      	ldr	r4, [pc, #60]	; (80163d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8016396:	7823      	ldrb	r3, [r4, #0]
 8016398:	f3bf 8f5b 	dmb	ish
 801639c:	07db      	lsls	r3, r3, #31
 801639e:	d40b      	bmi.n	80163b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80163a0:	4620      	mov	r0, r4
 80163a2:	f007 fa3d 	bl	801d820 <__cxa_guard_acquire>
 80163a6:	b138      	cbz	r0, 80163b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80163a8:	4620      	mov	r0, r4
 80163aa:	f007 fa45 	bl	801d838 <__cxa_guard_release>
 80163ae:	4a06      	ldr	r2, [pc, #24]	; (80163c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80163b0:	4909      	ldr	r1, [pc, #36]	; (80163d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80163b2:	480a      	ldr	r0, [pc, #40]	; (80163dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80163b4:	f007 fa2a 	bl	801d80c <__aeabi_atexit>
 80163b8:	4b05      	ldr	r3, [pc, #20]	; (80163d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80163ba:	652b      	str	r3, [r5, #80]	; 0x50
 80163bc:	4b07      	ldr	r3, [pc, #28]	; (80163dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80163be:	656b      	str	r3, [r5, #84]	; 0x54
 80163c0:	bd38      	pop	{r3, r4, r5, pc}
 80163c2:	bf00      	nop
 80163c4:	2000a014 	.word	0x2000a014
 80163c8:	20000000 	.word	0x20000000
 80163cc:	08014713 	.word	0x08014713
 80163d0:	200000f8 	.word	0x200000f8
 80163d4:	2000a018 	.word	0x2000a018
 80163d8:	08014711 	.word	0x08014711
 80163dc:	200000fc 	.word	0x200000fc

080163e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80163e0:	b538      	push	{r3, r4, r5, lr}
 80163e2:	4c15      	ldr	r4, [pc, #84]	; (8016438 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80163e4:	7823      	ldrb	r3, [r4, #0]
 80163e6:	f3bf 8f5b 	dmb	ish
 80163ea:	07da      	lsls	r2, r3, #31
 80163ec:	4605      	mov	r5, r0
 80163ee:	d40b      	bmi.n	8016408 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80163f0:	4620      	mov	r0, r4
 80163f2:	f007 fa15 	bl	801d820 <__cxa_guard_acquire>
 80163f6:	b138      	cbz	r0, 8016408 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80163f8:	4620      	mov	r0, r4
 80163fa:	f007 fa1d 	bl	801d838 <__cxa_guard_release>
 80163fe:	4a0f      	ldr	r2, [pc, #60]	; (801643c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8016400:	490f      	ldr	r1, [pc, #60]	; (8016440 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8016402:	4810      	ldr	r0, [pc, #64]	; (8016444 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8016404:	f007 fa02 	bl	801d80c <__aeabi_atexit>
 8016408:	4c0f      	ldr	r4, [pc, #60]	; (8016448 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801640a:	7823      	ldrb	r3, [r4, #0]
 801640c:	f3bf 8f5b 	dmb	ish
 8016410:	07db      	lsls	r3, r3, #31
 8016412:	d40b      	bmi.n	801642c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8016414:	4620      	mov	r0, r4
 8016416:	f007 fa03 	bl	801d820 <__cxa_guard_acquire>
 801641a:	b138      	cbz	r0, 801642c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801641c:	4620      	mov	r0, r4
 801641e:	f007 fa0b 	bl	801d838 <__cxa_guard_release>
 8016422:	4a06      	ldr	r2, [pc, #24]	; (801643c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8016424:	4909      	ldr	r1, [pc, #36]	; (801644c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8016426:	480a      	ldr	r0, [pc, #40]	; (8016450 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8016428:	f007 f9f0 	bl	801d80c <__aeabi_atexit>
 801642c:	4b05      	ldr	r3, [pc, #20]	; (8016444 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801642e:	64ab      	str	r3, [r5, #72]	; 0x48
 8016430:	4b07      	ldr	r3, [pc, #28]	; (8016450 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8016432:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016434:	bd38      	pop	{r3, r4, r5, pc}
 8016436:	bf00      	nop
 8016438:	2000a01c 	.word	0x2000a01c
 801643c:	20000000 	.word	0x20000000
 8016440:	08014717 	.word	0x08014717
 8016444:	20000100 	.word	0x20000100
 8016448:	2000a020 	.word	0x2000a020
 801644c:	08014715 	.word	0x08014715
 8016450:	20000104 	.word	0x20000104

08016454 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8016454:	b538      	push	{r3, r4, r5, lr}
 8016456:	4c15      	ldr	r4, [pc, #84]	; (80164ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8016458:	7823      	ldrb	r3, [r4, #0]
 801645a:	f3bf 8f5b 	dmb	ish
 801645e:	07da      	lsls	r2, r3, #31
 8016460:	4605      	mov	r5, r0
 8016462:	d40b      	bmi.n	801647c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8016464:	4620      	mov	r0, r4
 8016466:	f007 f9db 	bl	801d820 <__cxa_guard_acquire>
 801646a:	b138      	cbz	r0, 801647c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801646c:	4620      	mov	r0, r4
 801646e:	f007 f9e3 	bl	801d838 <__cxa_guard_release>
 8016472:	4a0f      	ldr	r2, [pc, #60]	; (80164b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8016474:	490f      	ldr	r1, [pc, #60]	; (80164b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8016476:	4810      	ldr	r0, [pc, #64]	; (80164b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8016478:	f007 f9c8 	bl	801d80c <__aeabi_atexit>
 801647c:	4c0f      	ldr	r4, [pc, #60]	; (80164bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801647e:	7823      	ldrb	r3, [r4, #0]
 8016480:	f3bf 8f5b 	dmb	ish
 8016484:	07db      	lsls	r3, r3, #31
 8016486:	d40b      	bmi.n	80164a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8016488:	4620      	mov	r0, r4
 801648a:	f007 f9c9 	bl	801d820 <__cxa_guard_acquire>
 801648e:	b138      	cbz	r0, 80164a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8016490:	4620      	mov	r0, r4
 8016492:	f007 f9d1 	bl	801d838 <__cxa_guard_release>
 8016496:	4a06      	ldr	r2, [pc, #24]	; (80164b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8016498:	4909      	ldr	r1, [pc, #36]	; (80164c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801649a:	480a      	ldr	r0, [pc, #40]	; (80164c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801649c:	f007 f9b6 	bl	801d80c <__aeabi_atexit>
 80164a0:	4b05      	ldr	r3, [pc, #20]	; (80164b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80164a2:	642b      	str	r3, [r5, #64]	; 0x40
 80164a4:	4b07      	ldr	r3, [pc, #28]	; (80164c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80164a6:	646b      	str	r3, [r5, #68]	; 0x44
 80164a8:	bd38      	pop	{r3, r4, r5, pc}
 80164aa:	bf00      	nop
 80164ac:	20009fe4 	.word	0x20009fe4
 80164b0:	20000000 	.word	0x20000000
 80164b4:	0801471b 	.word	0x0801471b
 80164b8:	200000c8 	.word	0x200000c8
 80164bc:	20009fe8 	.word	0x20009fe8
 80164c0:	08014719 	.word	0x08014719
 80164c4:	200000cc 	.word	0x200000cc

080164c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80164c8:	b538      	push	{r3, r4, r5, lr}
 80164ca:	4c15      	ldr	r4, [pc, #84]	; (8016520 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80164cc:	7823      	ldrb	r3, [r4, #0]
 80164ce:	f3bf 8f5b 	dmb	ish
 80164d2:	07da      	lsls	r2, r3, #31
 80164d4:	4605      	mov	r5, r0
 80164d6:	d40b      	bmi.n	80164f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80164d8:	4620      	mov	r0, r4
 80164da:	f007 f9a1 	bl	801d820 <__cxa_guard_acquire>
 80164de:	b138      	cbz	r0, 80164f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80164e0:	4620      	mov	r0, r4
 80164e2:	f007 f9a9 	bl	801d838 <__cxa_guard_release>
 80164e6:	4a0f      	ldr	r2, [pc, #60]	; (8016524 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80164e8:	490f      	ldr	r1, [pc, #60]	; (8016528 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80164ea:	4810      	ldr	r0, [pc, #64]	; (801652c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80164ec:	f007 f98e 	bl	801d80c <__aeabi_atexit>
 80164f0:	4c0f      	ldr	r4, [pc, #60]	; (8016530 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80164f2:	7823      	ldrb	r3, [r4, #0]
 80164f4:	f3bf 8f5b 	dmb	ish
 80164f8:	07db      	lsls	r3, r3, #31
 80164fa:	d40b      	bmi.n	8016514 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80164fc:	4620      	mov	r0, r4
 80164fe:	f007 f98f 	bl	801d820 <__cxa_guard_acquire>
 8016502:	b138      	cbz	r0, 8016514 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8016504:	4620      	mov	r0, r4
 8016506:	f007 f997 	bl	801d838 <__cxa_guard_release>
 801650a:	4a06      	ldr	r2, [pc, #24]	; (8016524 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801650c:	4909      	ldr	r1, [pc, #36]	; (8016534 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801650e:	480a      	ldr	r0, [pc, #40]	; (8016538 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8016510:	f007 f97c 	bl	801d80c <__aeabi_atexit>
 8016514:	4b05      	ldr	r3, [pc, #20]	; (801652c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8016516:	63ab      	str	r3, [r5, #56]	; 0x38
 8016518:	4b07      	ldr	r3, [pc, #28]	; (8016538 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801651a:	63eb      	str	r3, [r5, #60]	; 0x3c
 801651c:	bd38      	pop	{r3, r4, r5, pc}
 801651e:	bf00      	nop
 8016520:	2000a004 	.word	0x2000a004
 8016524:	20000000 	.word	0x20000000
 8016528:	0801471f 	.word	0x0801471f
 801652c:	200000e8 	.word	0x200000e8
 8016530:	2000a008 	.word	0x2000a008
 8016534:	0801471d 	.word	0x0801471d
 8016538:	200000ec 	.word	0x200000ec

0801653c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801653c:	b510      	push	{r4, lr}
 801653e:	4604      	mov	r4, r0
 8016540:	f7ff ff14 	bl	801636c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8016544:	4620      	mov	r0, r4
 8016546:	f7ff ff85 	bl	8016454 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801654a:	4620      	mov	r0, r4
 801654c:	f7ff ff48 	bl	80163e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8016550:	4620      	mov	r0, r4
 8016552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016556:	f7ff bfb7 	b.w	80164c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801655c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801655c:	b538      	push	{r3, r4, r5, lr}
 801655e:	4c15      	ldr	r4, [pc, #84]	; (80165b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8016560:	7823      	ldrb	r3, [r4, #0]
 8016562:	f3bf 8f5b 	dmb	ish
 8016566:	07da      	lsls	r2, r3, #31
 8016568:	4605      	mov	r5, r0
 801656a:	d40b      	bmi.n	8016584 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801656c:	4620      	mov	r0, r4
 801656e:	f007 f957 	bl	801d820 <__cxa_guard_acquire>
 8016572:	b138      	cbz	r0, 8016584 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8016574:	4620      	mov	r0, r4
 8016576:	f007 f95f 	bl	801d838 <__cxa_guard_release>
 801657a:	4a0f      	ldr	r2, [pc, #60]	; (80165b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801657c:	490f      	ldr	r1, [pc, #60]	; (80165bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801657e:	4810      	ldr	r0, [pc, #64]	; (80165c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016580:	f007 f944 	bl	801d80c <__aeabi_atexit>
 8016584:	4c0f      	ldr	r4, [pc, #60]	; (80165c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8016586:	7823      	ldrb	r3, [r4, #0]
 8016588:	f3bf 8f5b 	dmb	ish
 801658c:	07db      	lsls	r3, r3, #31
 801658e:	d40b      	bmi.n	80165a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016590:	4620      	mov	r0, r4
 8016592:	f007 f945 	bl	801d820 <__cxa_guard_acquire>
 8016596:	b138      	cbz	r0, 80165a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016598:	4620      	mov	r0, r4
 801659a:	f007 f94d 	bl	801d838 <__cxa_guard_release>
 801659e:	4a06      	ldr	r2, [pc, #24]	; (80165b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80165a0:	4909      	ldr	r1, [pc, #36]	; (80165c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80165a2:	480a      	ldr	r0, [pc, #40]	; (80165cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80165a4:	f007 f932 	bl	801d80c <__aeabi_atexit>
 80165a8:	4b05      	ldr	r3, [pc, #20]	; (80165c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80165aa:	662b      	str	r3, [r5, #96]	; 0x60
 80165ac:	4b07      	ldr	r3, [pc, #28]	; (80165cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80165ae:	666b      	str	r3, [r5, #100]	; 0x64
 80165b0:	bd38      	pop	{r3, r4, r5, pc}
 80165b2:	bf00      	nop
 80165b4:	20009fec 	.word	0x20009fec
 80165b8:	20000000 	.word	0x20000000
 80165bc:	0801470b 	.word	0x0801470b
 80165c0:	200000d0 	.word	0x200000d0
 80165c4:	20009ff0 	.word	0x20009ff0
 80165c8:	08014709 	.word	0x08014709
 80165cc:	200000d4 	.word	0x200000d4

080165d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80165d0:	b538      	push	{r3, r4, r5, lr}
 80165d2:	4c15      	ldr	r4, [pc, #84]	; (8016628 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80165d4:	7823      	ldrb	r3, [r4, #0]
 80165d6:	f3bf 8f5b 	dmb	ish
 80165da:	07da      	lsls	r2, r3, #31
 80165dc:	4605      	mov	r5, r0
 80165de:	d40b      	bmi.n	80165f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80165e0:	4620      	mov	r0, r4
 80165e2:	f007 f91d 	bl	801d820 <__cxa_guard_acquire>
 80165e6:	b138      	cbz	r0, 80165f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80165e8:	4620      	mov	r0, r4
 80165ea:	f007 f925 	bl	801d838 <__cxa_guard_release>
 80165ee:	4a0f      	ldr	r2, [pc, #60]	; (801662c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80165f0:	490f      	ldr	r1, [pc, #60]	; (8016630 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80165f2:	4810      	ldr	r0, [pc, #64]	; (8016634 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80165f4:	f007 f90a 	bl	801d80c <__aeabi_atexit>
 80165f8:	4c0f      	ldr	r4, [pc, #60]	; (8016638 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80165fa:	7823      	ldrb	r3, [r4, #0]
 80165fc:	f3bf 8f5b 	dmb	ish
 8016600:	07db      	lsls	r3, r3, #31
 8016602:	d40b      	bmi.n	801661c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016604:	4620      	mov	r0, r4
 8016606:	f007 f90b 	bl	801d820 <__cxa_guard_acquire>
 801660a:	b138      	cbz	r0, 801661c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801660c:	4620      	mov	r0, r4
 801660e:	f007 f913 	bl	801d838 <__cxa_guard_release>
 8016612:	4a06      	ldr	r2, [pc, #24]	; (801662c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016614:	4909      	ldr	r1, [pc, #36]	; (801663c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8016616:	480a      	ldr	r0, [pc, #40]	; (8016640 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016618:	f007 f8f8 	bl	801d80c <__aeabi_atexit>
 801661c:	4b05      	ldr	r3, [pc, #20]	; (8016634 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801661e:	65ab      	str	r3, [r5, #88]	; 0x58
 8016620:	4b07      	ldr	r3, [pc, #28]	; (8016640 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8016622:	65eb      	str	r3, [r5, #92]	; 0x5c
 8016624:	bd38      	pop	{r3, r4, r5, pc}
 8016626:	bf00      	nop
 8016628:	20009fc4 	.word	0x20009fc4
 801662c:	20000000 	.word	0x20000000
 8016630:	0801470f 	.word	0x0801470f
 8016634:	200000a8 	.word	0x200000a8
 8016638:	20009fc8 	.word	0x20009fc8
 801663c:	0801470d 	.word	0x0801470d
 8016640:	200000ac 	.word	0x200000ac

08016644 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8016644:	b510      	push	{r4, lr}
 8016646:	4604      	mov	r4, r0
 8016648:	f7ff ff88 	bl	801655c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801664c:	4620      	mov	r0, r4
 801664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016652:	f7ff bfbd 	b.w	80165d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08016658 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8016658:	b538      	push	{r3, r4, r5, lr}
 801665a:	4c15      	ldr	r4, [pc, #84]	; (80166b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801665c:	7823      	ldrb	r3, [r4, #0]
 801665e:	f3bf 8f5b 	dmb	ish
 8016662:	07da      	lsls	r2, r3, #31
 8016664:	4605      	mov	r5, r0
 8016666:	d40b      	bmi.n	8016680 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016668:	4620      	mov	r0, r4
 801666a:	f007 f8d9 	bl	801d820 <__cxa_guard_acquire>
 801666e:	b138      	cbz	r0, 8016680 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8016670:	4620      	mov	r0, r4
 8016672:	f007 f8e1 	bl	801d838 <__cxa_guard_release>
 8016676:	4a0f      	ldr	r2, [pc, #60]	; (80166b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016678:	490f      	ldr	r1, [pc, #60]	; (80166b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801667a:	4810      	ldr	r0, [pc, #64]	; (80166bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801667c:	f007 f8c6 	bl	801d80c <__aeabi_atexit>
 8016680:	4c0f      	ldr	r4, [pc, #60]	; (80166c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8016682:	7823      	ldrb	r3, [r4, #0]
 8016684:	f3bf 8f5b 	dmb	ish
 8016688:	07db      	lsls	r3, r3, #31
 801668a:	d40b      	bmi.n	80166a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801668c:	4620      	mov	r0, r4
 801668e:	f007 f8c7 	bl	801d820 <__cxa_guard_acquire>
 8016692:	b138      	cbz	r0, 80166a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016694:	4620      	mov	r0, r4
 8016696:	f007 f8cf 	bl	801d838 <__cxa_guard_release>
 801669a:	4a06      	ldr	r2, [pc, #24]	; (80166b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801669c:	4909      	ldr	r1, [pc, #36]	; (80166c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801669e:	480a      	ldr	r0, [pc, #40]	; (80166c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80166a0:	f007 f8b4 	bl	801d80c <__aeabi_atexit>
 80166a4:	4b05      	ldr	r3, [pc, #20]	; (80166bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80166a6:	672b      	str	r3, [r5, #112]	; 0x70
 80166a8:	4b07      	ldr	r3, [pc, #28]	; (80166c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80166aa:	676b      	str	r3, [r5, #116]	; 0x74
 80166ac:	bd38      	pop	{r3, r4, r5, pc}
 80166ae:	bf00      	nop
 80166b0:	20009fbc 	.word	0x20009fbc
 80166b4:	20000000 	.word	0x20000000
 80166b8:	08014703 	.word	0x08014703
 80166bc:	200000a0 	.word	0x200000a0
 80166c0:	20009fc0 	.word	0x20009fc0
 80166c4:	08014701 	.word	0x08014701
 80166c8:	200000a4 	.word	0x200000a4

080166cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80166cc:	b538      	push	{r3, r4, r5, lr}
 80166ce:	4c15      	ldr	r4, [pc, #84]	; (8016724 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80166d0:	7823      	ldrb	r3, [r4, #0]
 80166d2:	f3bf 8f5b 	dmb	ish
 80166d6:	07da      	lsls	r2, r3, #31
 80166d8:	4605      	mov	r5, r0
 80166da:	d40b      	bmi.n	80166f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80166dc:	4620      	mov	r0, r4
 80166de:	f007 f89f 	bl	801d820 <__cxa_guard_acquire>
 80166e2:	b138      	cbz	r0, 80166f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80166e4:	4620      	mov	r0, r4
 80166e6:	f007 f8a7 	bl	801d838 <__cxa_guard_release>
 80166ea:	4a0f      	ldr	r2, [pc, #60]	; (8016728 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80166ec:	490f      	ldr	r1, [pc, #60]	; (801672c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80166ee:	4810      	ldr	r0, [pc, #64]	; (8016730 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80166f0:	f007 f88c 	bl	801d80c <__aeabi_atexit>
 80166f4:	4c0f      	ldr	r4, [pc, #60]	; (8016734 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80166f6:	7823      	ldrb	r3, [r4, #0]
 80166f8:	f3bf 8f5b 	dmb	ish
 80166fc:	07db      	lsls	r3, r3, #31
 80166fe:	d40b      	bmi.n	8016718 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016700:	4620      	mov	r0, r4
 8016702:	f007 f88d 	bl	801d820 <__cxa_guard_acquire>
 8016706:	b138      	cbz	r0, 8016718 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016708:	4620      	mov	r0, r4
 801670a:	f007 f895 	bl	801d838 <__cxa_guard_release>
 801670e:	4a06      	ldr	r2, [pc, #24]	; (8016728 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016710:	4909      	ldr	r1, [pc, #36]	; (8016738 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8016712:	480a      	ldr	r0, [pc, #40]	; (801673c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016714:	f007 f87a 	bl	801d80c <__aeabi_atexit>
 8016718:	4b05      	ldr	r3, [pc, #20]	; (8016730 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801671a:	66ab      	str	r3, [r5, #104]	; 0x68
 801671c:	4b07      	ldr	r3, [pc, #28]	; (801673c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801671e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8016720:	bd38      	pop	{r3, r4, r5, pc}
 8016722:	bf00      	nop
 8016724:	20009fb4 	.word	0x20009fb4
 8016728:	20000000 	.word	0x20000000
 801672c:	08014707 	.word	0x08014707
 8016730:	20000098 	.word	0x20000098
 8016734:	20009fb8 	.word	0x20009fb8
 8016738:	08014705 	.word	0x08014705
 801673c:	2000009c 	.word	0x2000009c

08016740 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8016740:	b510      	push	{r4, lr}
 8016742:	4604      	mov	r4, r0
 8016744:	f7ff ff88 	bl	8016658 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8016748:	4620      	mov	r0, r4
 801674a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801674e:	f7ff bfbd 	b.w	80166cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08016752 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8016752:	b510      	push	{r4, lr}
 8016754:	4604      	mov	r4, r0
 8016756:	f7ff fff3 	bl	8016740 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801675a:	4620      	mov	r0, r4
 801675c:	f7ff ff72 	bl	8016644 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8016760:	4620      	mov	r0, r4
 8016762:	f7ff fdf9 	bl	8016358 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8016766:	4620      	mov	r0, r4
 8016768:	f7ff fcfa 	bl	8016160 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801676c:	4620      	mov	r0, r4
 801676e:	f7ff fd75 	bl	801625c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8016772:	4620      	mov	r0, r4
 8016774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016778:	f7ff bee0 	b.w	801653c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801677c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801677c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016780:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8016784:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8016788:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801678c:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8016790:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8016794:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8016798:	8808      	ldrh	r0, [r1, #0]
 801679a:	fb0e 4708 	mla	r7, lr, r8, r4
 801679e:	f1be 0f00 	cmp.w	lr, #0
 80167a2:	eb02 0a07 	add.w	sl, r2, r7
 80167a6:	db37      	blt.n	8016818 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80167a8:	45f3      	cmp	fp, lr
 80167aa:	dd35      	ble.n	8016818 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 80167ac:	2c00      	cmp	r4, #0
 80167ae:	db31      	blt.n	8016814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80167b0:	45a0      	cmp	r8, r4
 80167b2:	dd2f      	ble.n	8016814 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 80167b4:	5dd2      	ldrb	r2, [r2, r7]
 80167b6:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 80167ba:	1c62      	adds	r2, r4, #1
 80167bc:	d42f      	bmi.n	801681e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80167be:	4590      	cmp	r8, r2
 80167c0:	dd2d      	ble.n	801681e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80167c2:	b366      	cbz	r6, 801681e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 80167c4:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80167c8:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 80167cc:	f11e 0e01 	adds.w	lr, lr, #1
 80167d0:	d429      	bmi.n	8016826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80167d2:	45f3      	cmp	fp, lr
 80167d4:	dd27      	ble.n	8016826 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 80167d6:	f1bc 0f00 	cmp.w	ip, #0
 80167da:	f000 80a0 	beq.w	801691e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a2>
 80167de:	2c00      	cmp	r4, #0
 80167e0:	db1f      	blt.n	8016822 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80167e2:	45a0      	cmp	r8, r4
 80167e4:	dd1d      	ble.n	8016822 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 80167e6:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80167ea:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80167ee:	3401      	adds	r4, #1
 80167f0:	d41c      	bmi.n	801682c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80167f2:	45a0      	cmp	r8, r4
 80167f4:	dd1a      	ble.n	801682c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 80167f6:	b1de      	cbz	r6, 8016830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 80167f8:	44d0      	add	r8, sl
 80167fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80167fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8016802:	2e0f      	cmp	r6, #15
 8016804:	d915      	bls.n	8016832 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8016806:	4b49      	ldr	r3, [pc, #292]	; (801692c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8016808:	4a49      	ldr	r2, [pc, #292]	; (8016930 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 801680a:	484a      	ldr	r0, [pc, #296]	; (8016934 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 801680c:	f240 3155 	movw	r1, #853	; 0x355
 8016810:	f007 f830 	bl	801d874 <__assert_func>
 8016814:	4681      	mov	r9, r0
 8016816:	e7d0      	b.n	80167ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8016818:	4607      	mov	r7, r0
 801681a:	4681      	mov	r9, r0
 801681c:	e7d6      	b.n	80167cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 801681e:	4607      	mov	r7, r0
 8016820:	e7d4      	b.n	80167cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8016822:	4686      	mov	lr, r0
 8016824:	e7e3      	b.n	80167ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8016826:	4603      	mov	r3, r0
 8016828:	4686      	mov	lr, r0
 801682a:	e7ea      	b.n	8016802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 801682c:	4603      	mov	r3, r0
 801682e:	e7e8      	b.n	8016802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8016830:	4603      	mov	r3, r0
 8016832:	f1bc 0f0f 	cmp.w	ip, #15
 8016836:	d8e6      	bhi.n	8016806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8016838:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801683c:	fb16 f80c 	smulbb	r8, r6, ip
 8016840:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8016844:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8016848:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801684c:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8016850:	ea44 0909 	orr.w	r9, r4, r9
 8016854:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8016858:	f1cc 0410 	rsb	r4, ip, #16
 801685c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8016860:	1ba4      	subs	r4, r4, r6
 8016862:	041a      	lsls	r2, r3, #16
 8016864:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8016868:	ea4a 0707 	orr.w	r7, sl, r7
 801686c:	4377      	muls	r7, r6
 801686e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8016872:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8016876:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801687a:	fb04 7409 	mla	r4, r4, r9, r7
 801687e:	4313      	orrs	r3, r2
 8016880:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8016884:	fb08 4303 	mla	r3, r8, r3, r4
 8016888:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801688c:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8016890:	4322      	orrs	r2, r4
 8016892:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8016896:	fb0c 3202 	mla	r2, ip, r2, r3
 801689a:	0d53      	lsrs	r3, r2, #21
 801689c:	0952      	lsrs	r2, r2, #5
 801689e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80168a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80168a6:	431a      	orrs	r2, r3
 80168a8:	b293      	uxth	r3, r2
 80168aa:	b2af      	uxth	r7, r5
 80168ac:	1202      	asrs	r2, r0, #8
 80168ae:	43ed      	mvns	r5, r5
 80168b0:	b2ed      	uxtb	r5, r5
 80168b2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80168b6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80168ba:	fb12 f205 	smulbb	r2, r2, r5
 80168be:	10c6      	asrs	r6, r0, #3
 80168c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80168c4:	fb0c 2c07 	mla	ip, ip, r7, r2
 80168c8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80168cc:	10da      	asrs	r2, r3, #3
 80168ce:	fb16 f605 	smulbb	r6, r6, r5
 80168d2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80168d6:	fb02 6207 	mla	r2, r2, r7, r6
 80168da:	b296      	uxth	r6, r2
 80168dc:	00c2      	lsls	r2, r0, #3
 80168de:	00dc      	lsls	r4, r3, #3
 80168e0:	b2d2      	uxtb	r2, r2
 80168e2:	b2e4      	uxtb	r4, r4
 80168e4:	fb12 f205 	smulbb	r2, r2, r5
 80168e8:	fb04 2207 	mla	r2, r4, r7, r2
 80168ec:	fa1f fc8c 	uxth.w	ip, ip
 80168f0:	b292      	uxth	r2, r2
 80168f2:	f10c 0301 	add.w	r3, ip, #1
 80168f6:	1c50      	adds	r0, r2, #1
 80168f8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80168fc:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8016900:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016904:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8016908:	4313      	orrs	r3, r2
 801690a:	1c72      	adds	r2, r6, #1
 801690c:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8016910:	0952      	lsrs	r2, r2, #5
 8016912:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8016916:	4313      	orrs	r3, r2
 8016918:	800b      	strh	r3, [r1, #0]
 801691a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801691e:	2e0f      	cmp	r6, #15
 8016920:	f63f af71 	bhi.w	8016806 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8016924:	4603      	mov	r3, r0
 8016926:	4686      	mov	lr, r0
 8016928:	e786      	b.n	8016838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 801692a:	bf00      	nop
 801692c:	080214bb 	.word	0x080214bb
 8016930:	08021ac2 	.word	0x08021ac2
 8016934:	08021543 	.word	0x08021543

08016938 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801693c:	ed2d 8b08 	vpush	{d8-d11}
 8016940:	b09b      	sub	sp, #108	; 0x6c
 8016942:	e9dd 982d 	ldrd	r9, r8, [sp, #180]	; 0xb4
 8016946:	9309      	str	r3, [sp, #36]	; 0x24
 8016948:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801694c:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 801694e:	930a      	str	r3, [sp, #40]	; 0x28
 8016950:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8016954:	930e      	str	r3, [sp, #56]	; 0x38
 8016956:	910d      	str	r1, [sp, #52]	; 0x34
 8016958:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801695c:	9018      	str	r0, [sp, #96]	; 0x60
 801695e:	6870      	ldr	r0, [r6, #4]
 8016960:	9217      	str	r2, [sp, #92]	; 0x5c
 8016962:	fb00 1303 	mla	r3, r0, r3, r1
 8016966:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8016968:	6831      	ldr	r1, [r6, #0]
 801696a:	6856      	ldr	r6, [r2, #4]
 801696c:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 8016970:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8016974:	6813      	ldr	r3, [r2, #0]
 8016976:	930c      	str	r3, [sp, #48]	; 0x30
 8016978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801697a:	43db      	mvns	r3, r3
 801697c:	b2db      	uxtb	r3, r3
 801697e:	eeb0 aa40 	vmov.f32	s20, s0
 8016982:	eef0 9a60 	vmov.f32	s19, s1
 8016986:	eeb0 9a41 	vmov.f32	s18, s2
 801698a:	eeb0 8a62 	vmov.f32	s16, s5
 801698e:	eef0 8a43 	vmov.f32	s17, s6
 8016992:	eef0 ba44 	vmov.f32	s23, s8
 8016996:	eeb0 ba64 	vmov.f32	s22, s9
 801699a:	eef0 aa45 	vmov.f32	s21, s10
 801699e:	3604      	adds	r6, #4
 80169a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80169a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	dc03      	bgt.n	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80169a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	f340 8215 	ble.w	8016dda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 80169b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f340 8102 	ble.w	8016bbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 80169b8:	ea5f 4229 	movs.w	r2, r9, asr #16
 80169bc:	ea4f 4328 	mov.w	r3, r8, asr #16
 80169c0:	d42c      	bmi.n	8016a1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 80169c2:	1c51      	adds	r1, r2, #1
 80169c4:	428c      	cmp	r4, r1
 80169c6:	dd2c      	ble.n	8016a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	db2a      	blt.n	8016a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80169cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169ce:	1c59      	adds	r1, r3, #1
 80169d0:	4288      	cmp	r0, r1
 80169d2:	dd26      	ble.n	8016a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80169d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169d6:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80169d8:	3b01      	subs	r3, #1
 80169da:	fb02 9203 	mla	r2, r2, r3, r9
 80169de:	1412      	asrs	r2, r2, #16
 80169e0:	d429      	bmi.n	8016a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80169e2:	3201      	adds	r2, #1
 80169e4:	4294      	cmp	r4, r2
 80169e6:	dd26      	ble.n	8016a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80169e8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80169ea:	fb02 8303 	mla	r3, r2, r3, r8
 80169ee:	141b      	asrs	r3, r3, #16
 80169f0:	d421      	bmi.n	8016a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80169f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80169f4:	3301      	adds	r3, #1
 80169f6:	429a      	cmp	r2, r3
 80169f8:	dd1d      	ble.n	8016a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80169fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80169fe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8016a02:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8016a06:	9312      	str	r3, [sp, #72]	; 0x48
 8016a08:	f1be 0f00 	cmp.w	lr, #0
 8016a0c:	f300 8138 	bgt.w	8016c80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x348>
 8016a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a12:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8016a16:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8016a1a:	e0d1      	b.n	8016bc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x288>
 8016a1c:	1c51      	adds	r1, r2, #1
 8016a1e:	f040 80c3 	bne.w	8016ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016a22:	42a2      	cmp	r2, r4
 8016a24:	f280 80c0 	bge.w	8016ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016a28:	1c5f      	adds	r7, r3, #1
 8016a2a:	f2c0 80bd 	blt.w	8016ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a30:	4293      	cmp	r3, r2
 8016a32:	f280 80b9 	bge.w	8016ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x270>
 8016a36:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8016a3a:	4657      	mov	r7, sl
 8016a3c:	f1bb 0f00 	cmp.w	fp, #0
 8016a40:	dde6      	ble.n	8016a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8016a42:	ea5f 4229 	movs.w	r2, r9, asr #16
 8016a46:	ea4f 4328 	mov.w	r3, r8, asr #16
 8016a4a:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8016a4e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8016a52:	f100 80fc 	bmi.w	8016c4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x316>
 8016a56:	f102 0c01 	add.w	ip, r2, #1
 8016a5a:	4564      	cmp	r4, ip
 8016a5c:	f340 80f9 	ble.w	8016c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	f2c0 80f6 	blt.w	8016c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8016a66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016a68:	f103 0c01 	add.w	ip, r3, #1
 8016a6c:	4565      	cmp	r5, ip
 8016a6e:	f340 80f0 	ble.w	8016c52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x31a>
 8016a72:	fb03 2304 	mla	r3, r3, r4, r2
 8016a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a7a:	441a      	add	r2, r3
 8016a7c:	5ceb      	ldrb	r3, [r5, r3]
 8016a7e:	f836 e013 	ldrh.w	lr, [r6, r3, lsl #1]
 8016a82:	2800      	cmp	r0, #0
 8016a84:	f000 80db 	beq.w	8016c3e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x306>
 8016a88:	7853      	ldrb	r3, [r2, #1]
 8016a8a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016a8e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a90:	b141      	cbz	r1, 8016aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8016a92:	1913      	adds	r3, r2, r4
 8016a94:	5d12      	ldrb	r2, [r2, r4]
 8016a96:	785b      	ldrb	r3, [r3, #1]
 8016a98:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8016a9c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016aa0:	9210      	str	r2, [sp, #64]	; 0x40
 8016aa2:	9314      	str	r3, [sp, #80]	; 0x50
 8016aa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016aa6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016aa8:	fb10 f201 	smulbb	r2, r0, r1
 8016aac:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016ab0:	10d2      	asrs	r2, r2, #3
 8016ab2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016ab6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016aba:	ea4c 0c03 	orr.w	ip, ip, r3
 8016abe:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8016ac2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ac4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016ac6:	041b      	lsls	r3, r3, #16
 8016ac8:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8016acc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016ad0:	432b      	orrs	r3, r5
 8016ad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016ad4:	4353      	muls	r3, r2
 8016ad6:	fb05 330c 	mla	r3, r5, ip, r3
 8016ada:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8016ade:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016ae2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8016ae6:	ea4c 0e0e 	orr.w	lr, ip, lr
 8016aea:	f1c1 0c10 	rsb	ip, r1, #16
 8016aee:	ebac 0c00 	sub.w	ip, ip, r0
 8016af2:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016af6:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8016afa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016afc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016afe:	0418      	lsls	r0, r3, #16
 8016b00:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016b04:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016b08:	4318      	orrs	r0, r3
 8016b0a:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8016b0e:	fb02 c200 	mla	r2, r2, r0, ip
 8016b12:	0d53      	lsrs	r3, r2, #21
 8016b14:	0952      	lsrs	r2, r2, #5
 8016b16:	f8b7 c000 	ldrh.w	ip, [r7]
 8016b1a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016b1e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016b22:	431a      	orrs	r2, r3
 8016b24:	b292      	uxth	r2, r2
 8016b26:	ea4f 212c 	mov.w	r1, ip, asr #8
 8016b2a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016b2e:	1210      	asrs	r0, r2, #8
 8016b30:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016b34:	fb11 f105 	smulbb	r1, r1, r5
 8016b38:	ea4f 0eec 	mov.w	lr, ip, asr #3
 8016b3c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016b40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8016b44:	fb00 1003 	mla	r0, r0, r3, r1
 8016b48:	fa5f fc8c 	uxtb.w	ip, ip
 8016b4c:	10d1      	asrs	r1, r2, #3
 8016b4e:	00d2      	lsls	r2, r2, #3
 8016b50:	fb1c fc05 	smulbb	ip, ip, r5
 8016b54:	b2d2      	uxtb	r2, r2
 8016b56:	fb02 c203 	mla	r2, r2, r3, ip
 8016b5a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8016b5e:	b280      	uxth	r0, r0
 8016b60:	b292      	uxth	r2, r2
 8016b62:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016b66:	fb1e fe05 	smulbb	lr, lr, r5
 8016b6a:	fb01 e103 	mla	r1, r1, r3, lr
 8016b6e:	f102 0c01 	add.w	ip, r2, #1
 8016b72:	1c43      	adds	r3, r0, #1
 8016b74:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8016b78:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8016b7c:	b289      	uxth	r1, r1
 8016b7e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016b82:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8016b86:	4313      	orrs	r3, r2
 8016b88:	1c4a      	adds	r2, r1, #1
 8016b8a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8016b8e:	0949      	lsrs	r1, r1, #5
 8016b90:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016b94:	430b      	orrs	r3, r1
 8016b96:	803b      	strh	r3, [r7, #0]
 8016b98:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016b9a:	4499      	add	r9, r3
 8016b9c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016b9e:	3702      	adds	r7, #2
 8016ba0:	4498      	add	r8, r3
 8016ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016ba6:	e749      	b.n	8016a3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 8016ba8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016baa:	4499      	add	r9, r3
 8016bac:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016bae:	4498      	add	r8, r3
 8016bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bb2:	3b01      	subs	r3, #1
 8016bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8016bb6:	f10a 0a02 	add.w	sl, sl, #2
 8016bba:	e6f9      	b.n	80169b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8016bbc:	f47f af0a 	bne.w	80169d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9c>
 8016bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	f340 8109 	ble.w	8016dda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8016bc8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8016bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bd0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8016bd4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016bd6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8016bda:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8016bde:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8016be2:	eef0 6a48 	vmov.f32	s13, s16
 8016be6:	ee69 7a27 	vmul.f32	s15, s18, s15
 8016bea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016bee:	ee37 8a48 	vsub.f32	s16, s14, s16
 8016bf2:	ee16 9a90 	vmov	r9, s13
 8016bf6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8016bfa:	eef0 6a68 	vmov.f32	s13, s17
 8016bfe:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8016c02:	ee18 2a10 	vmov	r2, s16
 8016c06:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8016c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c0e:	ee18 2a90 	vmov	r2, s17
 8016c12:	932f      	str	r3, [sp, #188]	; 0xbc
 8016c14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c1a:	9330      	str	r3, [sp, #192]	; 0xc0
 8016c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016c20:	3b01      	subs	r3, #1
 8016c22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016c26:	930d      	str	r3, [sp, #52]	; 0x34
 8016c28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8016c2a:	bf08      	it	eq
 8016c2c:	4613      	moveq	r3, r2
 8016c2e:	ee16 8a90 	vmov	r8, s13
 8016c32:	9309      	str	r3, [sp, #36]	; 0x24
 8016c34:	eef0 8a67 	vmov.f32	s17, s15
 8016c38:	eeb0 8a47 	vmov.f32	s16, s14
 8016c3c:	e6b1      	b.n	80169a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8016c3e:	2900      	cmp	r1, #0
 8016c40:	f43f af30 	beq.w	8016aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8016c44:	5d13      	ldrb	r3, [r2, r4]
 8016c46:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016c4a:	9310      	str	r3, [sp, #64]	; 0x40
 8016c4c:	e72a      	b.n	8016aa4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8016c4e:	1c55      	adds	r5, r2, #1
 8016c50:	d1a2      	bne.n	8016b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016c52:	4294      	cmp	r4, r2
 8016c54:	dda0      	ble.n	8016b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016c56:	1c5d      	adds	r5, r3, #1
 8016c58:	db9e      	blt.n	8016b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016c5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016c5c:	429d      	cmp	r5, r3
 8016c5e:	dd9b      	ble.n	8016b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016c60:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8016c64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8016c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c68:	9202      	str	r2, [sp, #8]
 8016c6a:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8016c6e:	e9cd 4300 	strd	r4, r3, [sp]
 8016c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c74:	9818      	ldr	r0, [sp, #96]	; 0x60
 8016c76:	4633      	mov	r3, r6
 8016c78:	4639      	mov	r1, r7
 8016c7a:	f7ff fd7f 	bl	801677c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8016c7e:	e78b      	b.n	8016b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 8016c80:	ea4f 4329 	mov.w	r3, r9, asr #16
 8016c84:	ea4f 4228 	mov.w	r2, r8, asr #16
 8016c88:	fb04 3202 	mla	r2, r4, r2, r3
 8016c8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c90:	4413      	add	r3, r2
 8016c92:	5c8a      	ldrb	r2, [r1, r2]
 8016c94:	f3c9 3c03 	ubfx	ip, r9, #12, #4
 8016c98:	f3c8 3003 	ubfx	r0, r8, #12, #4
 8016c9c:	f836 1012 	ldrh.w	r1, [r6, r2, lsl #1]
 8016ca0:	f1bc 0f00 	cmp.w	ip, #0
 8016ca4:	f000 8091 	beq.w	8016dca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x492>
 8016ca8:	785a      	ldrb	r2, [r3, #1]
 8016caa:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8016cae:	9215      	str	r2, [sp, #84]	; 0x54
 8016cb0:	b140      	cbz	r0, 8016cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8016cb2:	191a      	adds	r2, r3, r4
 8016cb4:	5d1b      	ldrb	r3, [r3, r4]
 8016cb6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016cba:	9311      	str	r3, [sp, #68]	; 0x44
 8016cbc:	7853      	ldrb	r3, [r2, #1]
 8016cbe:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016cc2:	9316      	str	r3, [sp, #88]	; 0x58
 8016cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016cc6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016cc8:	fb1c f200 	smulbb	r2, ip, r0
 8016ccc:	041f      	lsls	r7, r3, #16
 8016cce:	10d2      	asrs	r2, r2, #3
 8016cd0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8016cd4:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8016cd8:	431f      	orrs	r7, r3
 8016cda:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8016cde:	9319      	str	r3, [sp, #100]	; 0x64
 8016ce0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016ce2:	041b      	lsls	r3, r3, #16
 8016ce4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8016ce8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8016cec:	ea43 030b 	orr.w	r3, r3, fp
 8016cf0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8016cf2:	4353      	muls	r3, r2
 8016cf4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8016cf8:	fb05 3707 	mla	r7, r5, r7, r3
 8016cfc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8016d00:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8016d04:	ea43 0b01 	orr.w	fp, r3, r1
 8016d08:	f1c0 0110 	rsb	r1, r0, #16
 8016d0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016d0e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016d10:	eba1 0c0c 	sub.w	ip, r1, ip
 8016d14:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8016d18:	fb0c 770b 	mla	r7, ip, fp, r7
 8016d1c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8016d20:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8016d24:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8016d28:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8016d2c:	ea4c 0c0b 	orr.w	ip, ip, fp
 8016d30:	fb02 770c 	mla	r7, r2, ip, r7
 8016d34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d36:	0d79      	lsrs	r1, r7, #21
 8016d38:	8812      	ldrh	r2, [r2, #0]
 8016d3a:	097f      	lsrs	r7, r7, #5
 8016d3c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016d40:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8016d44:	430f      	orrs	r7, r1
 8016d46:	1211      	asrs	r1, r2, #8
 8016d48:	b2bb      	uxth	r3, r7
 8016d4a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8016d4e:	fb11 f105 	smulbb	r1, r1, r5
 8016d52:	1218      	asrs	r0, r3, #8
 8016d54:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016d56:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8016d5a:	fb00 1005 	mla	r0, r0, r5, r1
 8016d5e:	10d7      	asrs	r7, r2, #3
 8016d60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016d62:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016d66:	fb17 f705 	smulbb	r7, r7, r5
 8016d6a:	10d9      	asrs	r1, r3, #3
 8016d6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016d6e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8016d72:	fb01 7105 	mla	r1, r1, r5, r7
 8016d76:	00d2      	lsls	r2, r2, #3
 8016d78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016d7a:	b2d2      	uxtb	r2, r2
 8016d7c:	fb12 f205 	smulbb	r2, r2, r5
 8016d80:	00db      	lsls	r3, r3, #3
 8016d82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016d84:	b2db      	uxtb	r3, r3
 8016d86:	b280      	uxth	r0, r0
 8016d88:	fb03 2305 	mla	r3, r3, r5, r2
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	b289      	uxth	r1, r1
 8016d90:	1c42      	adds	r2, r0, #1
 8016d92:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8016d96:	1c4f      	adds	r7, r1, #1
 8016d98:	1c5a      	adds	r2, r3, #1
 8016d9a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8016d9e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8016da2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8016da6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8016daa:	0949      	lsrs	r1, r1, #5
 8016dac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dae:	4310      	orrs	r0, r2
 8016db0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8016db4:	4308      	orrs	r0, r1
 8016db6:	f823 0b02 	strh.w	r0, [r3], #2
 8016dba:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dbc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8016dbe:	4499      	add	r9, r3
 8016dc0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8016dc2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016dc6:	4498      	add	r8, r3
 8016dc8:	e61e      	b.n	8016a08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 8016dca:	2800      	cmp	r0, #0
 8016dcc:	f43f af7a 	beq.w	8016cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8016dd0:	5d1b      	ldrb	r3, [r3, r4]
 8016dd2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8016dd6:	9311      	str	r3, [sp, #68]	; 0x44
 8016dd8:	e774      	b.n	8016cc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38c>
 8016dda:	b01b      	add	sp, #108	; 0x6c
 8016ddc:	ecbd 8b08 	vpop	{d8-d11}
 8016de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8016de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016de8:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8016dec:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8016df0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8016df4:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8016df8:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8016dfc:	8808      	ldrh	r0, [r1, #0]
 8016dfe:	fb06 570e 	mla	r7, r6, lr, r5
 8016e02:	2e00      	cmp	r6, #0
 8016e04:	eb02 0807 	add.w	r8, r2, r7
 8016e08:	db38      	blt.n	8016e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8016e0a:	45b1      	cmp	r9, r6
 8016e0c:	dd36      	ble.n	8016e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8016e0e:	2d00      	cmp	r5, #0
 8016e10:	db32      	blt.n	8016e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8016e12:	45ae      	cmp	lr, r5
 8016e14:	dd30      	ble.n	8016e78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8016e16:	5dd2      	ldrb	r2, [r2, r7]
 8016e18:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8016e1c:	1c6a      	adds	r2, r5, #1
 8016e1e:	d430      	bmi.n	8016e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016e20:	4596      	cmp	lr, r2
 8016e22:	dd2e      	ble.n	8016e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016e24:	b36c      	cbz	r4, 8016e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8016e26:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016e2a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8016e2e:	3601      	adds	r6, #1
 8016e30:	d42b      	bmi.n	8016e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8016e32:	45b1      	cmp	r9, r6
 8016e34:	dd29      	ble.n	8016e8a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8016e36:	f1bc 0f00 	cmp.w	ip, #0
 8016e3a:	d028      	beq.n	8016e8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8016e3c:	2d00      	cmp	r5, #0
 8016e3e:	db22      	blt.n	8016e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8016e40:	45ae      	cmp	lr, r5
 8016e42:	dd20      	ble.n	8016e86 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8016e44:	f818 600e 	ldrb.w	r6, [r8, lr]
 8016e48:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8016e4c:	3501      	adds	r5, #1
 8016e4e:	d407      	bmi.n	8016e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016e50:	45ae      	cmp	lr, r5
 8016e52:	dd05      	ble.n	8016e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016e54:	b134      	cbz	r4, 8016e64 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8016e56:	44c6      	add	lr, r8
 8016e58:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8016e5c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016e60:	2c0f      	cmp	r4, #15
 8016e62:	d802      	bhi.n	8016e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8016e64:	f1bc 0f0f 	cmp.w	ip, #15
 8016e68:	d914      	bls.n	8016e94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 8016e6a:	4b26      	ldr	r3, [pc, #152]	; (8016f04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8016e6c:	4a26      	ldr	r2, [pc, #152]	; (8016f08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8016e6e:	4827      	ldr	r0, [pc, #156]	; (8016f0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8016e70:	f240 3155 	movw	r1, #853	; 0x355
 8016e74:	f006 fcfe 	bl	801d874 <__assert_func>
 8016e78:	4607      	mov	r7, r0
 8016e7a:	e7cf      	b.n	8016e1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8016e7c:	4602      	mov	r2, r0
 8016e7e:	4607      	mov	r7, r0
 8016e80:	e7d5      	b.n	8016e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8016e82:	4602      	mov	r2, r0
 8016e84:	e7d3      	b.n	8016e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8016e86:	4606      	mov	r6, r0
 8016e88:	e7e0      	b.n	8016e4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 8016e8a:	4606      	mov	r6, r0
 8016e8c:	e7e8      	b.n	8016e60 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8016e8e:	2c0f      	cmp	r4, #15
 8016e90:	d8eb      	bhi.n	8016e6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8016e92:	4606      	mov	r6, r0
 8016e94:	043d      	lsls	r5, r7, #16
 8016e96:	fb14 f30c 	smulbb	r3, r4, ip
 8016e9a:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8016e9e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8016ea2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8016ea6:	10db      	asrs	r3, r3, #3
 8016ea8:	432f      	orrs	r7, r5
 8016eaa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8016eae:	f1cc 0510 	rsb	r5, ip, #16
 8016eb2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8016eb6:	1b2d      	subs	r5, r5, r4
 8016eb8:	ea4e 0202 	orr.w	r2, lr, r2
 8016ebc:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8016ec0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8016ec4:	4354      	muls	r4, r2
 8016ec6:	fb05 4507 	mla	r5, r5, r7, r4
 8016eca:	0404      	lsls	r4, r0, #16
 8016ecc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8016ed0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8016ed4:	4320      	orrs	r0, r4
 8016ed6:	fb03 5400 	mla	r4, r3, r0, r5
 8016eda:	0430      	lsls	r0, r6, #16
 8016edc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8016ee0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8016ee4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8016ee8:	4330      	orrs	r0, r6
 8016eea:	fb03 4000 	mla	r0, r3, r0, r4
 8016eee:	0d43      	lsrs	r3, r0, #21
 8016ef0:	0940      	lsrs	r0, r0, #5
 8016ef2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8016ef6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8016efa:	4318      	orrs	r0, r3
 8016efc:	8008      	strh	r0, [r1, #0]
 8016efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f02:	bf00      	nop
 8016f04:	080214bb 	.word	0x080214bb
 8016f08:	08021ac2 	.word	0x08021ac2
 8016f0c:	08021543 	.word	0x08021543

08016f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8016f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f14:	ed2d 8b0a 	vpush	{d8-d12}
 8016f18:	b095      	sub	sp, #84	; 0x54
 8016f1a:	e9dd 9629 	ldrd	r9, r6, [sp, #164]	; 0xa4
 8016f1e:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 8016f20:	9306      	str	r3, [sp, #24]
 8016f22:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8016f26:	9109      	str	r1, [sp, #36]	; 0x24
 8016f28:	9307      	str	r3, [sp, #28]
 8016f2a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8016f2e:	9012      	str	r0, [sp, #72]	; 0x48
 8016f30:	6878      	ldr	r0, [r7, #4]
 8016f32:	9211      	str	r2, [sp, #68]	; 0x44
 8016f34:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8016f36:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8016f3a:	fb00 1303 	mla	r3, r0, r3, r1
 8016f3e:	6839      	ldr	r1, [r7, #0]
 8016f40:	6857      	ldr	r7, [r2, #4]
 8016f42:	eb01 0a43 	add.w	sl, r1, r3, lsl #1
 8016f46:	6813      	ldr	r3, [r2, #0]
 8016f48:	9308      	str	r3, [sp, #32]
 8016f4a:	eeb0 aa40 	vmov.f32	s20, s0
 8016f4e:	eef0 9a60 	vmov.f32	s19, s1
 8016f52:	eeb0 9a41 	vmov.f32	s18, s2
 8016f56:	eeb0 8a62 	vmov.f32	s16, s5
 8016f5a:	eef0 8a43 	vmov.f32	s17, s6
 8016f5e:	eeb0 ca44 	vmov.f32	s24, s8
 8016f62:	eef0 ba64 	vmov.f32	s23, s9
 8016f66:	eeb0 ba45 	vmov.f32	s22, s10
 8016f6a:	3704      	adds	r7, #4
 8016f6c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8016f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	dc03      	bgt.n	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 8016f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	f340 819a 	ble.w	80172b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 8016f7e:	9b06      	ldr	r3, [sp, #24]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	f340 80c4 	ble.w	801710e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8016f86:	ea5f 4229 	movs.w	r2, r9, asr #16
 8016f8a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8016f8e:	d429      	bmi.n	8016fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8016f90:	1c51      	adds	r1, r2, #1
 8016f92:	428c      	cmp	r4, r1
 8016f94:	dd29      	ble.n	8016fea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	db27      	blt.n	8016fea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8016f9a:	9807      	ldr	r0, [sp, #28]
 8016f9c:	1c59      	adds	r1, r3, #1
 8016f9e:	4288      	cmp	r0, r1
 8016fa0:	dd23      	ble.n	8016fea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xda>
 8016fa2:	9b06      	ldr	r3, [sp, #24]
 8016fa4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8016fa6:	3b01      	subs	r3, #1
 8016fa8:	fb02 9203 	mla	r2, r2, r3, r9
 8016fac:	1412      	asrs	r2, r2, #16
 8016fae:	d425      	bmi.n	8016ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016fb0:	3201      	adds	r2, #1
 8016fb2:	4294      	cmp	r4, r2
 8016fb4:	dd22      	ble.n	8016ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016fb6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8016fb8:	fb02 6303 	mla	r3, r2, r3, r6
 8016fbc:	141b      	asrs	r3, r3, #16
 8016fbe:	d41d      	bmi.n	8016ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016fc0:	9a07      	ldr	r2, [sp, #28]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	dd19      	ble.n	8016ffc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8016fc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8016fcc:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8016fd0:	f1b8 0f00 	cmp.w	r8, #0
 8016fd4:	f300 80f8 	bgt.w	80171c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b8>
 8016fd8:	9b06      	ldr	r3, [sp, #24]
 8016fda:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8016fde:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8016fe2:	e096      	b.n	8017112 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x202>
 8016fe4:	1c51      	adds	r1, r2, #1
 8016fe6:	f040 8088 	bne.w	80170fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8016fea:	42a2      	cmp	r2, r4
 8016fec:	f280 8085 	bge.w	80170fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8016ff0:	1c5a      	adds	r2, r3, #1
 8016ff2:	f2c0 8082 	blt.w	80170fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8016ff6:	9a07      	ldr	r2, [sp, #28]
 8016ff8:	4293      	cmp	r3, r2
 8016ffa:	da7e      	bge.n	80170fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 8016ffc:	f8dd b018 	ldr.w	fp, [sp, #24]
 8017000:	46d0      	mov	r8, sl
 8017002:	f1bb 0f00 	cmp.w	fp, #0
 8017006:	dde7      	ble.n	8016fd8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8017008:	ea5f 4229 	movs.w	r2, r9, asr #16
 801700c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8017010:	f3c9 3003 	ubfx	r0, r9, #12, #4
 8017014:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8017018:	f100 80c0 	bmi.w	801719c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801701c:	f102 0c01 	add.w	ip, r2, #1
 8017020:	4564      	cmp	r4, ip
 8017022:	f340 80bd 	ble.w	80171a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8017026:	2b00      	cmp	r3, #0
 8017028:	f2c0 80ba 	blt.w	80171a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 801702c:	9d07      	ldr	r5, [sp, #28]
 801702e:	f103 0c01 	add.w	ip, r3, #1
 8017032:	4565      	cmp	r5, ip
 8017034:	f340 80b4 	ble.w	80171a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x290>
 8017038:	fb03 2304 	mla	r3, r3, r4, r2
 801703c:	9d08      	ldr	r5, [sp, #32]
 801703e:	9a08      	ldr	r2, [sp, #32]
 8017040:	441a      	add	r2, r3
 8017042:	5ceb      	ldrb	r3, [r5, r3]
 8017044:	f837 e013 	ldrh.w	lr, [r7, r3, lsl #1]
 8017048:	2800      	cmp	r0, #0
 801704a:	f000 809f 	beq.w	801718c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x27c>
 801704e:	7853      	ldrb	r3, [r2, #1]
 8017050:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017054:	930d      	str	r3, [sp, #52]	; 0x34
 8017056:	b141      	cbz	r1, 801706a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8017058:	1913      	adds	r3, r2, r4
 801705a:	5d12      	ldrb	r2, [r2, r4]
 801705c:	785b      	ldrb	r3, [r3, #1]
 801705e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8017062:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017066:	920a      	str	r2, [sp, #40]	; 0x28
 8017068:	930e      	str	r3, [sp, #56]	; 0x38
 801706a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801706c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801706e:	fb10 f201 	smulbb	r2, r0, r1
 8017072:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8017076:	10d2      	asrs	r2, r2, #3
 8017078:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801707c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8017080:	ea4c 0c03 	orr.w	ip, ip, r3
 8017084:	ebc2 0340 	rsb	r3, r2, r0, lsl #1
 8017088:	930c      	str	r3, [sp, #48]	; 0x30
 801708a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801708c:	041b      	lsls	r3, r3, #16
 801708e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8017092:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8017096:	432b      	orrs	r3, r5
 8017098:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801709a:	4353      	muls	r3, r2
 801709c:	fb05 330c 	mla	r3, r5, ip, r3
 80170a0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80170a4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80170a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80170ac:	ea4c 0e0e 	orr.w	lr, ip, lr
 80170b0:	f1c1 0c10 	rsb	ip, r1, #16
 80170b4:	ebac 0c00 	sub.w	ip, ip, r0
 80170b8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80170bc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80170c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170c2:	0418      	lsls	r0, r3, #16
 80170c4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80170c8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80170cc:	4318      	orrs	r0, r3
 80170ce:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80170d2:	fb02 c200 	mla	r2, r2, r0, ip
 80170d6:	0d53      	lsrs	r3, r2, #21
 80170d8:	0952      	lsrs	r2, r2, #5
 80170da:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80170de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80170e2:	431a      	orrs	r2, r3
 80170e4:	f8a8 2000 	strh.w	r2, [r8]
 80170e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80170ea:	4499      	add	r9, r3
 80170ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80170ee:	f108 0802 	add.w	r8, r8, #2
 80170f2:	441e      	add	r6, r3
 80170f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80170f8:	e783      	b.n	8017002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 80170fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80170fc:	4499      	add	r9, r3
 80170fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017100:	441e      	add	r6, r3
 8017102:	9b06      	ldr	r3, [sp, #24]
 8017104:	3b01      	subs	r3, #1
 8017106:	9306      	str	r3, [sp, #24]
 8017108:	f10a 0a02 	add.w	sl, sl, #2
 801710c:	e737      	b.n	8016f7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801710e:	f47f af48 	bne.w	8016fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 8017112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017114:	2b00      	cmp	r3, #0
 8017116:	f340 80cc 	ble.w	80172b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a2>
 801711a:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801711e:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017122:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017126:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017128:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801712c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017130:	eef0 6a48 	vmov.f32	s13, s16
 8017134:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017138:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801713c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017140:	ee16 9a90 	vmov	r9, s13
 8017144:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017148:	eef0 6a68 	vmov.f32	s13, s17
 801714c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017150:	ee18 2a10 	vmov	r2, s16
 8017154:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017158:	fb92 f3f3 	sdiv	r3, r2, r3
 801715c:	ee18 2a90 	vmov	r2, s17
 8017160:	932b      	str	r3, [sp, #172]	; 0xac
 8017162:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017164:	fb92 f3f3 	sdiv	r3, r2, r3
 8017168:	932c      	str	r3, [sp, #176]	; 0xb0
 801716a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801716c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801716e:	3b01      	subs	r3, #1
 8017170:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017174:	9309      	str	r3, [sp, #36]	; 0x24
 8017176:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017178:	bf08      	it	eq
 801717a:	4613      	moveq	r3, r2
 801717c:	ee16 6a90 	vmov	r6, s13
 8017180:	9306      	str	r3, [sp, #24]
 8017182:	eef0 8a67 	vmov.f32	s17, s15
 8017186:	eeb0 8a47 	vmov.f32	s16, s14
 801718a:	e6f1      	b.n	8016f70 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801718c:	2900      	cmp	r1, #0
 801718e:	f43f af6c 	beq.w	801706a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 8017192:	5d13      	ldrb	r3, [r2, r4]
 8017194:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017198:	930a      	str	r3, [sp, #40]	; 0x28
 801719a:	e766      	b.n	801706a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x15a>
 801719c:	1c55      	adds	r5, r2, #1
 801719e:	d1a3      	bne.n	80170e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80171a0:	4294      	cmp	r4, r2
 80171a2:	dda1      	ble.n	80170e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80171a4:	1c5d      	adds	r5, r3, #1
 80171a6:	db9f      	blt.n	80170e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80171a8:	9d07      	ldr	r5, [sp, #28]
 80171aa:	429d      	cmp	r5, r3
 80171ac:	dd9c      	ble.n	80170e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80171ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80171b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80171b6:	e9cd 4500 	strd	r4, r5, [sp]
 80171ba:	463b      	mov	r3, r7
 80171bc:	9a08      	ldr	r2, [sp, #32]
 80171be:	9812      	ldr	r0, [sp, #72]	; 0x48
 80171c0:	4641      	mov	r1, r8
 80171c2:	f7ff fe0f 	bl	8016de4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80171c6:	e78f      	b.n	80170e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d8>
 80171c8:	ea4f 4329 	mov.w	r3, r9, asr #16
 80171cc:	1432      	asrs	r2, r6, #16
 80171ce:	fb04 3202 	mla	r2, r4, r2, r3
 80171d2:	9908      	ldr	r1, [sp, #32]
 80171d4:	9b08      	ldr	r3, [sp, #32]
 80171d6:	4413      	add	r3, r2
 80171d8:	5c8a      	ldrb	r2, [r1, r2]
 80171da:	f3c9 3e03 	ubfx	lr, r9, #12, #4
 80171de:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80171e2:	f837 1012 	ldrh.w	r1, [r7, r2, lsl #1]
 80171e6:	f1be 0f00 	cmp.w	lr, #0
 80171ea:	d05b      	beq.n	80172a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x394>
 80171ec:	785a      	ldrb	r2, [r3, #1]
 80171ee:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80171f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80171f4:	b140      	cbz	r0, 8017208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 80171f6:	191a      	adds	r2, r3, r4
 80171f8:	5d1b      	ldrb	r3, [r3, r4]
 80171fa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80171fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017200:	7853      	ldrb	r3, [r2, #1]
 8017202:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8017206:	9310      	str	r3, [sp, #64]	; 0x40
 8017208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801720a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801720c:	fb1e f200 	smulbb	r2, lr, r0
 8017210:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8017214:	10d2      	asrs	r2, r2, #3
 8017216:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801721a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801721e:	ea4c 0c03 	orr.w	ip, ip, r3
 8017222:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8017226:	9313      	str	r3, [sp, #76]	; 0x4c
 8017228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801722a:	041b      	lsls	r3, r3, #16
 801722c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8017230:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8017234:	ea43 030b 	orr.w	r3, r3, fp
 8017238:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801723a:	4353      	muls	r3, r2
 801723c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8017240:	fb05 3c0c 	mla	ip, r5, ip, r3
 8017244:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8017248:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801724c:	ea43 0b01 	orr.w	fp, r3, r1
 8017250:	f1c0 0110 	rsb	r1, r0, #16
 8017254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017256:	eba1 0e0e 	sub.w	lr, r1, lr
 801725a:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801725e:	fb0e cc0b 	mla	ip, lr, fp, ip
 8017262:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8017266:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801726a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801726e:	ea4b 0e0e 	orr.w	lr, fp, lr
 8017272:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8017276:	fb02 cc0e 	mla	ip, r2, lr, ip
 801727a:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801727e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8017282:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8017286:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801728a:	ea43 0c0c 	orr.w	ip, r3, ip
 801728e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017290:	f823 cb02 	strh.w	ip, [r3], #2
 8017294:	930c      	str	r3, [sp, #48]	; 0x30
 8017296:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017298:	4499      	add	r9, r3
 801729a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801729c:	f108 38ff 	add.w	r8, r8, #4294967295
 80172a0:	441e      	add	r6, r3
 80172a2:	e695      	b.n	8016fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 80172a4:	2800      	cmp	r0, #0
 80172a6:	d0af      	beq.n	8017208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 80172a8:	5d1b      	ldrb	r3, [r3, r4]
 80172aa:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80172ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80172b0:	e7aa      	b.n	8017208 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 80172b2:	b015      	add	sp, #84	; 0x54
 80172b4:	ecbd 8b0a 	vpop	{d8-d12}
 80172b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080172bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80172bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c0:	468b      	mov	fp, r1
 80172c2:	8809      	ldrh	r1, [r1, #0]
 80172c4:	b089      	sub	sp, #36	; 0x24
 80172c6:	10cd      	asrs	r5, r1, #3
 80172c8:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 80172cc:	ea4f 2921 	mov.w	r9, r1, asr #8
 80172d0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80172d4:	00c9      	lsls	r1, r1, #3
 80172d6:	9500      	str	r5, [sp, #0]
 80172d8:	b2c9      	uxtb	r1, r1
 80172da:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80172de:	9101      	str	r1, [sp, #4]
 80172e0:	9900      	ldr	r1, [sp, #0]
 80172e2:	9202      	str	r2, [sp, #8]
 80172e4:	fb04 650e 	mla	r5, r4, lr, r6
 80172e8:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80172ec:	eb02 0805 	add.w	r8, r2, r5
 80172f0:	0209      	lsls	r1, r1, #8
 80172f2:	9a01      	ldr	r2, [sp, #4]
 80172f4:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 80172f8:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80172fc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 8017300:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8017304:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8017308:	4311      	orrs	r1, r2
 801730a:	2c00      	cmp	r4, #0
 801730c:	9107      	str	r1, [sp, #28]
 801730e:	db43      	blt.n	8017398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8017310:	45a2      	cmp	sl, r4
 8017312:	dd41      	ble.n	8017398 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xdc>
 8017314:	2e00      	cmp	r6, #0
 8017316:	db3d      	blt.n	8017394 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 8017318:	45b6      	cmp	lr, r6
 801731a:	dd3b      	ble.n	8017394 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd8>
 801731c:	9a02      	ldr	r2, [sp, #8]
 801731e:	5d55      	ldrb	r5, [r2, r5]
 8017320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017324:	441d      	add	r5, r3
 8017326:	1c72      	adds	r2, r6, #1
 8017328:	d439      	bmi.n	801739e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801732a:	4596      	cmp	lr, r2
 801732c:	dd37      	ble.n	801739e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 801732e:	2f00      	cmp	r7, #0
 8017330:	d035      	beq.n	801739e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe2>
 8017332:	f898 1001 	ldrb.w	r1, [r8, #1]
 8017336:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801733a:	4419      	add	r1, r3
 801733c:	3401      	adds	r4, #1
 801733e:	d432      	bmi.n	80173a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8017340:	45a2      	cmp	sl, r4
 8017342:	dd30      	ble.n	80173a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8017344:	b378      	cbz	r0, 80173a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xea>
 8017346:	2e00      	cmp	r6, #0
 8017348:	db2b      	blt.n	80173a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801734a:	45b6      	cmp	lr, r6
 801734c:	dd29      	ble.n	80173a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe6>
 801734e:	f818 400e 	ldrb.w	r4, [r8, lr]
 8017352:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017356:	441c      	add	r4, r3
 8017358:	3601      	adds	r6, #1
 801735a:	d427      	bmi.n	80173ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 801735c:	45b6      	cmp	lr, r6
 801735e:	dd25      	ble.n	80173ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8017360:	b327      	cbz	r7, 80173ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf0>
 8017362:	44c6      	add	lr, r8
 8017364:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017368:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801736c:	4413      	add	r3, r2
 801736e:	782a      	ldrb	r2, [r5, #0]
 8017370:	9202      	str	r2, [sp, #8]
 8017372:	780a      	ldrb	r2, [r1, #0]
 8017374:	9203      	str	r2, [sp, #12]
 8017376:	7822      	ldrb	r2, [r4, #0]
 8017378:	9204      	str	r2, [sp, #16]
 801737a:	2f0f      	cmp	r7, #15
 801737c:	781a      	ldrb	r2, [r3, #0]
 801737e:	9205      	str	r2, [sp, #20]
 8017380:	d801      	bhi.n	8017386 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xca>
 8017382:	280f      	cmp	r0, #15
 8017384:	d914      	bls.n	80173b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf4>
 8017386:	4b3f      	ldr	r3, [pc, #252]	; (8017484 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c8>)
 8017388:	4a3f      	ldr	r2, [pc, #252]	; (8017488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 801738a:	4840      	ldr	r0, [pc, #256]	; (801748c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 801738c:	f240 3173 	movw	r1, #883	; 0x373
 8017390:	f006 fa70 	bl	801d874 <__assert_func>
 8017394:	ad07      	add	r5, sp, #28
 8017396:	e7c6      	b.n	8017326 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6a>
 8017398:	a907      	add	r1, sp, #28
 801739a:	460d      	mov	r5, r1
 801739c:	e7ce      	b.n	801733c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 801739e:	a907      	add	r1, sp, #28
 80173a0:	e7cc      	b.n	801733c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x80>
 80173a2:	ac07      	add	r4, sp, #28
 80173a4:	e7d8      	b.n	8017358 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9c>
 80173a6:	ab07      	add	r3, sp, #28
 80173a8:	461c      	mov	r4, r3
 80173aa:	e7e0      	b.n	801736e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 80173ac:	ab07      	add	r3, sp, #28
 80173ae:	e7de      	b.n	801736e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb2>
 80173b0:	b2ba      	uxth	r2, r7
 80173b2:	b280      	uxth	r0, r0
 80173b4:	fb02 fa00 	mul.w	sl, r2, r0
 80173b8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80173bc:	0112      	lsls	r2, r2, #4
 80173be:	b280      	uxth	r0, r0
 80173c0:	f891 8002 	ldrb.w	r8, [r1, #2]
 80173c4:	7849      	ldrb	r1, [r1, #1]
 80173c6:	78ae      	ldrb	r6, [r5, #2]
 80173c8:	786d      	ldrb	r5, [r5, #1]
 80173ca:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80173ce:	eba2 020a 	sub.w	r2, r2, sl
 80173d2:	b292      	uxth	r2, r2
 80173d4:	ebae 0e00 	sub.w	lr, lr, r0
 80173d8:	fa1f fe8e 	uxth.w	lr, lr
 80173dc:	4351      	muls	r1, r2
 80173de:	fb02 f808 	mul.w	r8, r2, r8
 80173e2:	fb0e 8806 	mla	r8, lr, r6, r8
 80173e6:	fb0e 1505 	mla	r5, lr, r5, r1
 80173ea:	78a6      	ldrb	r6, [r4, #2]
 80173ec:	7861      	ldrb	r1, [r4, #1]
 80173ee:	fa1f f78c 	uxth.w	r7, ip
 80173f2:	fb00 8806 	mla	r8, r0, r6, r8
 80173f6:	fb00 5501 	mla	r5, r0, r1, r5
 80173fa:	789e      	ldrb	r6, [r3, #2]
 80173fc:	7859      	ldrb	r1, [r3, #1]
 80173fe:	9b00      	ldr	r3, [sp, #0]
 8017400:	ea6f 0c0c 	mvn.w	ip, ip
 8017404:	fa5f fc8c 	uxtb.w	ip, ip
 8017408:	fb0a 5101 	mla	r1, sl, r1, r5
 801740c:	fb13 f50c 	smulbb	r5, r3, ip
 8017410:	9b03      	ldr	r3, [sp, #12]
 8017412:	435a      	muls	r2, r3
 8017414:	9b02      	ldr	r3, [sp, #8]
 8017416:	fb0e 2203 	mla	r2, lr, r3, r2
 801741a:	9b04      	ldr	r3, [sp, #16]
 801741c:	fb00 2003 	mla	r0, r0, r3, r2
 8017420:	9b05      	ldr	r3, [sp, #20]
 8017422:	fb0a 8606 	mla	r6, sl, r6, r8
 8017426:	fb0a 0a03 	mla	sl, sl, r3, r0
 801742a:	9b01      	ldr	r3, [sp, #4]
 801742c:	fb19 f90c 	smulbb	r9, r9, ip
 8017430:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8017434:	fb13 fc0c 	smulbb	ip, r3, ip
 8017438:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801743c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017440:	fb06 9607 	mla	r6, r6, r7, r9
 8017444:	fb01 5107 	mla	r1, r1, r7, r5
 8017448:	fb0a c707 	mla	r7, sl, r7, ip
 801744c:	b2b6      	uxth	r6, r6
 801744e:	b289      	uxth	r1, r1
 8017450:	b2bf      	uxth	r7, r7
 8017452:	f106 0901 	add.w	r9, r6, #1
 8017456:	f107 0c01 	add.w	ip, r7, #1
 801745a:	1c4d      	adds	r5, r1, #1
 801745c:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 8017460:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8017464:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 8017468:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801746c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8017470:	0949      	lsrs	r1, r1, #5
 8017472:	433e      	orrs	r6, r7
 8017474:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8017478:	430e      	orrs	r6, r1
 801747a:	f8ab 6000 	strh.w	r6, [fp]
 801747e:	b009      	add	sp, #36	; 0x24
 8017480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017484:	080214bb 	.word	0x080214bb
 8017488:	08021a19 	.word	0x08021a19
 801748c:	08021543 	.word	0x08021543

08017490 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017494:	ed2d 8b08 	vpush	{d8-d11}
 8017498:	b097      	sub	sp, #92	; 0x5c
 801749a:	eeb0 aa40 	vmov.f32	s20, s0
 801749e:	9309      	str	r3, [sp, #36]	; 0x24
 80174a0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 80174a4:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80174a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80174a8:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 80174ac:	9310      	str	r3, [sp, #64]	; 0x40
 80174ae:	910f      	str	r1, [sp, #60]	; 0x3c
 80174b0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80174b4:	9015      	str	r0, [sp, #84]	; 0x54
 80174b6:	6860      	ldr	r0, [r4, #4]
 80174b8:	9213      	str	r2, [sp, #76]	; 0x4c
 80174ba:	fb00 1303 	mla	r3, r0, r3, r1
 80174be:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80174c0:	6821      	ldr	r1, [r4, #0]
 80174c2:	6854      	ldr	r4, [r2, #4]
 80174c4:	f9bd 50c0 	ldrsh.w	r5, [sp, #192]	; 0xc0
 80174c8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80174cc:	930a      	str	r3, [sp, #40]	; 0x28
 80174ce:	6813      	ldr	r3, [r2, #0]
 80174d0:	930e      	str	r3, [sp, #56]	; 0x38
 80174d2:	1d23      	adds	r3, r4, #4
 80174d4:	9308      	str	r3, [sp, #32]
 80174d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174d8:	43db      	mvns	r3, r3
 80174da:	b2db      	uxtb	r3, r3
 80174dc:	eef0 9a60 	vmov.f32	s19, s1
 80174e0:	eeb0 9a41 	vmov.f32	s18, s2
 80174e4:	eeb0 8a62 	vmov.f32	s16, s5
 80174e8:	eef0 8a43 	vmov.f32	s17, s6
 80174ec:	eef0 ba44 	vmov.f32	s23, s8
 80174f0:	eeb0 ba64 	vmov.f32	s22, s9
 80174f4:	eef0 aa45 	vmov.f32	s21, s10
 80174f8:	930c      	str	r3, [sp, #48]	; 0x30
 80174fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	dc03      	bgt.n	8017508 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8017500:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017502:	2b00      	cmp	r3, #0
 8017504:	f340 825c 	ble.w	80179c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 8017508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801750a:	2b00      	cmp	r3, #0
 801750c:	f340 8127 	ble.w	801775e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2ce>
 8017510:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017512:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017514:	1412      	asrs	r2, r2, #16
 8017516:	ea4f 4323 	mov.w	r3, r3, asr #16
 801751a:	d430      	bmi.n	801757e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801751c:	1c51      	adds	r1, r2, #1
 801751e:	428d      	cmp	r5, r1
 8017520:	dd30      	ble.n	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8017522:	2b00      	cmp	r3, #0
 8017524:	db2e      	blt.n	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 8017526:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017528:	1c59      	adds	r1, r3, #1
 801752a:	4288      	cmp	r0, r1
 801752c:	dd2a      	ble.n	8017584 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf4>
 801752e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017530:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017532:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017534:	3b01      	subs	r3, #1
 8017536:	fb02 1203 	mla	r2, r2, r3, r1
 801753a:	1412      	asrs	r2, r2, #16
 801753c:	d42c      	bmi.n	8017598 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 801753e:	3201      	adds	r2, #1
 8017540:	4295      	cmp	r5, r2
 8017542:	dd29      	ble.n	8017598 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8017544:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017546:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8017548:	fb02 1303 	mla	r3, r2, r3, r1
 801754c:	141b      	asrs	r3, r3, #16
 801754e:	d423      	bmi.n	8017598 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8017550:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017552:	3301      	adds	r3, #1
 8017554:	429a      	cmp	r2, r3
 8017556:	dd1f      	ble.n	8017598 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x108>
 8017558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801755a:	9311      	str	r3, [sp, #68]	; 0x44
 801755c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801755e:	930d      	str	r3, [sp, #52]	; 0x34
 8017560:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017564:	9312      	str	r3, [sp, #72]	; 0x48
 8017566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017568:	2b00      	cmp	r3, #0
 801756a:	f300 8161 	bgt.w	8017830 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a0>
 801756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017572:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017576:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801757a:	930a      	str	r3, [sp, #40]	; 0x28
 801757c:	e0f1      	b.n	8017762 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d2>
 801757e:	1c51      	adds	r1, r2, #1
 8017580:	f040 80de 	bne.w	8017740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8017584:	42aa      	cmp	r2, r5
 8017586:	f280 80db 	bge.w	8017740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801758a:	1c5f      	adds	r7, r3, #1
 801758c:	f2c0 80d8 	blt.w	8017740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8017590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017592:	4293      	cmp	r3, r2
 8017594:	f280 80d4 	bge.w	8017740 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8017598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801759a:	9311      	str	r3, [sp, #68]	; 0x44
 801759c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801759e:	930d      	str	r3, [sp, #52]	; 0x34
 80175a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	dde3      	ble.n	801756e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 80175a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80175a8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80175aa:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80175ac:	141a      	asrs	r2, r3, #16
 80175ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80175b0:	1400      	asrs	r0, r0, #16
 80175b2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80175b6:	f3c1 3103 	ubfx	r1, r1, #12, #4
 80175ba:	f100 8120 	bmi.w	80177fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36e>
 80175be:	1c46      	adds	r6, r0, #1
 80175c0:	42b5      	cmp	r5, r6
 80175c2:	f340 811e 	ble.w	8017802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 80175c6:	2a00      	cmp	r2, #0
 80175c8:	f2c0 811b 	blt.w	8017802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 80175cc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80175ce:	1c56      	adds	r6, r2, #1
 80175d0:	42b7      	cmp	r7, r6
 80175d2:	f340 8116 	ble.w	8017802 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x372>
 80175d6:	fb02 0005 	mla	r0, r2, r5, r0
 80175da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80175dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175de:	9c08      	ldr	r4, [sp, #32]
 80175e0:	4402      	add	r2, r0
 80175e2:	5c30      	ldrb	r0, [r6, r0]
 80175e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80175e8:	9014      	str	r0, [sp, #80]	; 0x50
 80175ea:	1826      	adds	r6, r4, r0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	f000 80f7 	beq.w	80177e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x350>
 80175f2:	f892 e001 	ldrb.w	lr, [r2, #1]
 80175f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80175fa:	44a6      	add	lr, r4
 80175fc:	2900      	cmp	r1, #0
 80175fe:	f000 80f8 	beq.w	80177f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x362>
 8017602:	1950      	adds	r0, r2, r5
 8017604:	5d52      	ldrb	r2, [r2, r5]
 8017606:	7840      	ldrb	r0, [r0, #1]
 8017608:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801760c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017610:	4422      	add	r2, r4
 8017612:	4420      	add	r0, r4
 8017614:	b29b      	uxth	r3, r3
 8017616:	b289      	uxth	r1, r1
 8017618:	fb03 fa01 	mul.w	sl, r3, r1
 801761c:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8017620:	011b      	lsls	r3, r3, #4
 8017622:	b289      	uxth	r1, r1
 8017624:	f89e c002 	ldrb.w	ip, [lr, #2]
 8017628:	f896 b002 	ldrb.w	fp, [r6, #2]
 801762c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801762e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8017630:	f8b7 8000 	ldrh.w	r8, [r7]
 8017634:	f8bd 7040 	ldrh.w	r7, [sp, #64]	; 0x40
 8017638:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801763c:	eba3 030a 	sub.w	r3, r3, sl
 8017640:	b29b      	uxth	r3, r3
 8017642:	eba9 0901 	sub.w	r9, r9, r1
 8017646:	fa1f f989 	uxth.w	r9, r9
 801764a:	fb03 fc0c 	mul.w	ip, r3, ip
 801764e:	fb09 cc0b 	mla	ip, r9, fp, ip
 8017652:	f892 b002 	ldrb.w	fp, [r2, #2]
 8017656:	fb01 cc0b 	mla	ip, r1, fp, ip
 801765a:	f890 b002 	ldrb.w	fp, [r0, #2]
 801765e:	fb0a cc0b 	mla	ip, sl, fp, ip
 8017662:	ea4f 2b28 	mov.w	fp, r8, asr #8
 8017666:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801766a:	fb1b fb04 	smulbb	fp, fp, r4
 801766e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8017672:	fb0c bc07 	mla	ip, ip, r7, fp
 8017676:	f896 b001 	ldrb.w	fp, [r6, #1]
 801767a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801767e:	f89e e000 	ldrb.w	lr, [lr]
 8017682:	435e      	muls	r6, r3
 8017684:	fb09 660b 	mla	r6, r9, fp, r6
 8017688:	f892 b001 	ldrb.w	fp, [r2, #1]
 801768c:	fb01 660b 	mla	r6, r1, fp, r6
 8017690:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017694:	fb0a 660b 	mla	r6, sl, fp, r6
 8017698:	ea4f 0be8 	mov.w	fp, r8, asr #3
 801769c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80176a0:	fb1b fb04 	smulbb	fp, fp, r4
 80176a4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80176a8:	fb06 b607 	mla	r6, r6, r7, fp
 80176ac:	b2b4      	uxth	r4, r6
 80176ae:	9412      	str	r4, [sp, #72]	; 0x48
 80176b0:	9e08      	ldr	r6, [sp, #32]
 80176b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80176b4:	f816 b004 	ldrb.w	fp, [r6, r4]
 80176b8:	fb03 f30e 	mul.w	r3, r3, lr
 80176bc:	f892 e000 	ldrb.w	lr, [r2]
 80176c0:	fb09 330b 	mla	r3, r9, fp, r3
 80176c4:	fb01 330e 	mla	r3, r1, lr, r3
 80176c8:	f890 e000 	ldrb.w	lr, [r0]
 80176cc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80176d0:	fb0a 3e0e 	mla	lr, sl, lr, r3
 80176d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176d6:	fa5f f888 	uxtb.w	r8, r8
 80176da:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80176de:	fb18 f803 	smulbb	r8, r8, r3
 80176e2:	fb0e 8807 	mla	r8, lr, r7, r8
 80176e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80176e8:	fa1f fc8c 	uxth.w	ip, ip
 80176ec:	fa1f f888 	uxth.w	r8, r8
 80176f0:	f103 0b01 	add.w	fp, r3, #1
 80176f4:	f10c 0201 	add.w	r2, ip, #1
 80176f8:	f108 0e01 	add.w	lr, r8, #1
 80176fc:	eb0b 2613 	add.w	r6, fp, r3, lsr #8
 8017700:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8017704:	eb0e 2818 	add.w	r8, lr, r8, lsr #8
 8017708:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801770c:	f3c8 28c4 	ubfx	r8, r8, #11, #5
 8017710:	0976      	lsrs	r6, r6, #5
 8017712:	ea4c 0c08 	orr.w	ip, ip, r8
 8017716:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801771a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801771c:	ea4c 0606 	orr.w	r6, ip, r6
 8017720:	801e      	strh	r6, [r3, #0]
 8017722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017724:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017726:	3302      	adds	r3, #2
 8017728:	930d      	str	r3, [sp, #52]	; 0x34
 801772a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801772c:	4413      	add	r3, r2
 801772e:	9329      	str	r3, [sp, #164]	; 0xa4
 8017730:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017732:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017734:	4413      	add	r3, r2
 8017736:	932a      	str	r3, [sp, #168]	; 0xa8
 8017738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801773a:	3b01      	subs	r3, #1
 801773c:	9311      	str	r3, [sp, #68]	; 0x44
 801773e:	e72f      	b.n	80175a0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8017740:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017742:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8017744:	4413      	add	r3, r2
 8017746:	9329      	str	r3, [sp, #164]	; 0xa4
 8017748:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801774a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801774c:	4413      	add	r3, r2
 801774e:	932a      	str	r3, [sp, #168]	; 0xa8
 8017750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017752:	3b01      	subs	r3, #1
 8017754:	9309      	str	r3, [sp, #36]	; 0x24
 8017756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017758:	3302      	adds	r3, #2
 801775a:	930a      	str	r3, [sp, #40]	; 0x28
 801775c:	e6d4      	b.n	8017508 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801775e:	f47f aee6 	bne.w	801752e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8017762:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017764:	2b00      	cmp	r3, #0
 8017766:	f340 812b 	ble.w	80179c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801776a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801776e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017772:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8017776:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017778:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801777c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8017780:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017784:	eef0 6a48 	vmov.f32	s13, s16
 8017788:	ee69 7a27 	vmul.f32	s15, s18, s15
 801778c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017790:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017794:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8017798:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801779c:	eef0 6a68 	vmov.f32	s13, s17
 80177a0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80177a4:	ee18 2a10 	vmov	r2, s16
 80177a8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80177ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80177b0:	ee18 2a90 	vmov	r2, s17
 80177b4:	932b      	str	r3, [sp, #172]	; 0xac
 80177b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80177b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80177bc:	932c      	str	r3, [sp, #176]	; 0xb0
 80177be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80177c2:	3b01      	subs	r3, #1
 80177c4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80177c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80177ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80177cc:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 80177d0:	bf08      	it	eq
 80177d2:	4613      	moveq	r3, r2
 80177d4:	9309      	str	r3, [sp, #36]	; 0x24
 80177d6:	eef0 8a67 	vmov.f32	s17, s15
 80177da:	eeb0 8a47 	vmov.f32	s16, s14
 80177de:	e68c      	b.n	80174fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 80177e0:	b151      	cbz	r1, 80177f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 80177e2:	5d52      	ldrb	r2, [r2, r5]
 80177e4:	9808      	ldr	r0, [sp, #32]
 80177e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80177ea:	4402      	add	r2, r0
 80177ec:	4630      	mov	r0, r6
 80177ee:	46b6      	mov	lr, r6
 80177f0:	e710      	b.n	8017614 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80177f2:	4630      	mov	r0, r6
 80177f4:	4632      	mov	r2, r6
 80177f6:	e70d      	b.n	8017614 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x184>
 80177f8:	4630      	mov	r0, r6
 80177fa:	4632      	mov	r2, r6
 80177fc:	e7f7      	b.n	80177ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x35e>
 80177fe:	1c46      	adds	r6, r0, #1
 8017800:	d18f      	bne.n	8017722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017802:	4285      	cmp	r5, r0
 8017804:	dd8d      	ble.n	8017722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017806:	1c54      	adds	r4, r2, #1
 8017808:	db8b      	blt.n	8017722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 801780a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801780c:	4294      	cmp	r4, r2
 801780e:	dd88      	ble.n	8017722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017810:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8017814:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017818:	9002      	str	r0, [sp, #8]
 801781a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801781e:	e9cd 5300 	strd	r5, r3, [sp]
 8017822:	e9dd 120d 	ldrd	r1, r2, [sp, #52]	; 0x34
 8017826:	9b08      	ldr	r3, [sp, #32]
 8017828:	9815      	ldr	r0, [sp, #84]	; 0x54
 801782a:	f7ff fd47 	bl	80172bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801782e:	e778      	b.n	8017722 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x292>
 8017830:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8017832:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017834:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017836:	1410      	asrs	r0, r2, #16
 8017838:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801783c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801783e:	1412      	asrs	r2, r2, #16
 8017840:	fb05 2000 	mla	r0, r5, r0, r2
 8017844:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017846:	f814 a000 	ldrb.w	sl, [r4, r0]
 801784a:	4402      	add	r2, r0
 801784c:	9808      	ldr	r0, [sp, #32]
 801784e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8017852:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017856:	eb00 060a 	add.w	r6, r0, sl
 801785a:	2b00      	cmp	r3, #0
 801785c:	f000 80a1 	beq.w	80179a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x512>
 8017860:	f892 c001 	ldrb.w	ip, [r2, #1]
 8017864:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017868:	4484      	add	ip, r0
 801786a:	2900      	cmp	r1, #0
 801786c:	f000 80a2 	beq.w	80179b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 8017870:	1950      	adds	r0, r2, r5
 8017872:	5d52      	ldrb	r2, [r2, r5]
 8017874:	7840      	ldrb	r0, [r0, #1]
 8017876:	9c08      	ldr	r4, [sp, #32]
 8017878:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801787c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017880:	4422      	add	r2, r4
 8017882:	4420      	add	r0, r4
 8017884:	b29b      	uxth	r3, r3
 8017886:	b289      	uxth	r1, r1
 8017888:	fb03 f901 	mul.w	r9, r3, r1
 801788c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017890:	011b      	lsls	r3, r3, #4
 8017892:	b289      	uxth	r1, r1
 8017894:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8017898:	f896 b002 	ldrb.w	fp, [r6, #2]
 801789c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801789e:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80178a2:	eba3 0309 	sub.w	r3, r3, r9
 80178a6:	b29b      	uxth	r3, r3
 80178a8:	eba8 0801 	sub.w	r8, r8, r1
 80178ac:	fa1f f888 	uxth.w	r8, r8
 80178b0:	435f      	muls	r7, r3
 80178b2:	fb08 770b 	mla	r7, r8, fp, r7
 80178b6:	f892 b002 	ldrb.w	fp, [r2, #2]
 80178ba:	f8b4 e000 	ldrh.w	lr, [r4]
 80178be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80178c0:	fb01 770b 	mla	r7, r1, fp, r7
 80178c4:	f890 b002 	ldrb.w	fp, [r0, #2]
 80178c8:	fb09 770b 	mla	r7, r9, fp, r7
 80178cc:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80178d0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80178d4:	fb1b fb04 	smulbb	fp, fp, r4
 80178d8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80178da:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80178de:	fb07 b704 	mla	r7, r7, r4, fp
 80178e2:	f896 b001 	ldrb.w	fp, [r6, #1]
 80178e6:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80178ea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80178ec:	f89c c000 	ldrb.w	ip, [ip]
 80178f0:	435e      	muls	r6, r3
 80178f2:	fb08 660b 	mla	r6, r8, fp, r6
 80178f6:	f892 b001 	ldrb.w	fp, [r2, #1]
 80178fa:	fb01 660b 	mla	r6, r1, fp, r6
 80178fe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017902:	fb09 660b 	mla	r6, r9, fp, r6
 8017906:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801790a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801790e:	fb1b fb04 	smulbb	fp, fp, r4
 8017912:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017914:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8017918:	fb06 b604 	mla	r6, r6, r4, fp
 801791c:	9c08      	ldr	r4, [sp, #32]
 801791e:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8017922:	fb03 f30c 	mul.w	r3, r3, ip
 8017926:	f892 c000 	ldrb.w	ip, [r2]
 801792a:	fb08 330a 	mla	r3, r8, sl, r3
 801792e:	fb01 330c 	mla	r3, r1, ip, r3
 8017932:	f890 c000 	ldrb.w	ip, [r0]
 8017936:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801793a:	fb09 3c0c 	mla	ip, r9, ip, r3
 801793e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017940:	fa5f fe8e 	uxtb.w	lr, lr
 8017944:	fb1e fe03 	smulbb	lr, lr, r3
 8017948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801794a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801794e:	fb0c ec03 	mla	ip, ip, r3, lr
 8017952:	b2bf      	uxth	r7, r7
 8017954:	b2b6      	uxth	r6, r6
 8017956:	fa1f fc8c 	uxth.w	ip, ip
 801795a:	1c7b      	adds	r3, r7, #1
 801795c:	f10c 0201 	add.w	r2, ip, #1
 8017960:	f106 0b01 	add.w	fp, r6, #1
 8017964:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8017968:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801796c:	eb0b 2616 	add.w	r6, fp, r6, lsr #8
 8017970:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8017974:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017978:	0976      	lsrs	r6, r6, #5
 801797a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801797c:	4317      	orrs	r7, r2
 801797e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017982:	4337      	orrs	r7, r6
 8017984:	f823 7b02 	strh.w	r7, [r3], #2
 8017988:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801798a:	930d      	str	r3, [sp, #52]	; 0x34
 801798c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801798e:	4413      	add	r3, r2
 8017990:	9329      	str	r3, [sp, #164]	; 0xa4
 8017992:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8017994:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8017996:	4413      	add	r3, r2
 8017998:	932a      	str	r3, [sp, #168]	; 0xa8
 801799a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801799c:	3b01      	subs	r3, #1
 801799e:	9311      	str	r3, [sp, #68]	; 0x44
 80179a0:	e5e1      	b.n	8017566 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 80179a2:	b151      	cbz	r1, 80179ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x52a>
 80179a4:	5d52      	ldrb	r2, [r2, r5]
 80179a6:	9808      	ldr	r0, [sp, #32]
 80179a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80179ac:	4402      	add	r2, r0
 80179ae:	4630      	mov	r0, r6
 80179b0:	46b4      	mov	ip, r6
 80179b2:	e767      	b.n	8017884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 80179b4:	4630      	mov	r0, r6
 80179b6:	4632      	mov	r2, r6
 80179b8:	e764      	b.n	8017884 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f4>
 80179ba:	4630      	mov	r0, r6
 80179bc:	4632      	mov	r2, r6
 80179be:	e7f7      	b.n	80179b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>
 80179c0:	b017      	add	sp, #92	; 0x5c
 80179c2:	ecbd 8b08 	vpop	{d8-d11}
 80179c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080179cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 80179cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d0:	880e      	ldrh	r6, [r1, #0]
 80179d2:	b085      	sub	sp, #20
 80179d4:	0230      	lsls	r0, r6, #8
 80179d6:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80179da:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 80179de:	0170      	lsls	r0, r6, #5
 80179e0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 80179e4:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80179e8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80179ec:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 80179f0:	00f6      	lsls	r6, r6, #3
 80179f2:	ea4b 0000 	orr.w	r0, fp, r0
 80179f6:	b2f6      	uxtb	r6, r6
 80179f8:	4691      	mov	r9, r2
 80179fa:	fb05 7a0c 	mla	sl, r5, ip, r7
 80179fe:	4306      	orrs	r6, r0
 8017a00:	2d00      	cmp	r5, #0
 8017a02:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8017a06:	9603      	str	r6, [sp, #12]
 8017a08:	eb09 0e0a 	add.w	lr, r9, sl
 8017a0c:	db42      	blt.n	8017a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8017a0e:	45a8      	cmp	r8, r5
 8017a10:	dd40      	ble.n	8017a94 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc8>
 8017a12:	2f00      	cmp	r7, #0
 8017a14:	db3c      	blt.n	8017a90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8017a16:	45bc      	cmp	ip, r7
 8017a18:	dd3a      	ble.n	8017a90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc4>
 8017a1a:	f819 600a 	ldrb.w	r6, [r9, sl]
 8017a1e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017a22:	441e      	add	r6, r3
 8017a24:	1c78      	adds	r0, r7, #1
 8017a26:	d438      	bmi.n	8017a9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8017a28:	4584      	cmp	ip, r0
 8017a2a:	dd36      	ble.n	8017a9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8017a2c:	b3aa      	cbz	r2, 8017a9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xce>
 8017a2e:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8017a32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017a36:	4418      	add	r0, r3
 8017a38:	3501      	adds	r5, #1
 8017a3a:	d432      	bmi.n	8017aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8017a3c:	45a8      	cmp	r8, r5
 8017a3e:	dd30      	ble.n	8017aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8017a40:	b37c      	cbz	r4, 8017aa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd6>
 8017a42:	2f00      	cmp	r7, #0
 8017a44:	db2b      	blt.n	8017a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8017a46:	45bc      	cmp	ip, r7
 8017a48:	dd29      	ble.n	8017a9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd2>
 8017a4a:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8017a4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a52:	441d      	add	r5, r3
 8017a54:	3701      	adds	r7, #1
 8017a56:	d427      	bmi.n	8017aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8017a58:	45bc      	cmp	ip, r7
 8017a5a:	dd25      	ble.n	8017aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8017a5c:	b322      	cbz	r2, 8017aa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xdc>
 8017a5e:	44f4      	add	ip, lr
 8017a60:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8017a64:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017a68:	443b      	add	r3, r7
 8017a6a:	781f      	ldrb	r7, [r3, #0]
 8017a6c:	f896 a000 	ldrb.w	sl, [r6]
 8017a70:	f890 b000 	ldrb.w	fp, [r0]
 8017a74:	f895 9000 	ldrb.w	r9, [r5]
 8017a78:	9700      	str	r7, [sp, #0]
 8017a7a:	2a0f      	cmp	r2, #15
 8017a7c:	d801      	bhi.n	8017a82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb6>
 8017a7e:	2c0f      	cmp	r4, #15
 8017a80:	d914      	bls.n	8017aac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe0>
 8017a82:	4b2c      	ldr	r3, [pc, #176]	; (8017b34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x168>)
 8017a84:	4a2c      	ldr	r2, [pc, #176]	; (8017b38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8017a86:	482d      	ldr	r0, [pc, #180]	; (8017b3c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8017a88:	f240 3173 	movw	r1, #883	; 0x373
 8017a8c:	f005 fef2 	bl	801d874 <__assert_func>
 8017a90:	ae03      	add	r6, sp, #12
 8017a92:	e7c7      	b.n	8017a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x58>
 8017a94:	a803      	add	r0, sp, #12
 8017a96:	4606      	mov	r6, r0
 8017a98:	e7ce      	b.n	8017a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8017a9a:	a803      	add	r0, sp, #12
 8017a9c:	e7cc      	b.n	8017a38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6c>
 8017a9e:	ad03      	add	r5, sp, #12
 8017aa0:	e7d8      	b.n	8017a54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x88>
 8017aa2:	ab03      	add	r3, sp, #12
 8017aa4:	461d      	mov	r5, r3
 8017aa6:	e7e0      	b.n	8017a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8017aa8:	ab03      	add	r3, sp, #12
 8017aaa:	e7de      	b.n	8017a6a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x9e>
 8017aac:	b292      	uxth	r2, r2
 8017aae:	b2a4      	uxth	r4, r4
 8017ab0:	fb02 f804 	mul.w	r8, r2, r4
 8017ab4:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8017ab8:	0112      	lsls	r2, r2, #4
 8017aba:	b2a4      	uxth	r4, r4
 8017abc:	f890 e002 	ldrb.w	lr, [r0, #2]
 8017ac0:	78b7      	ldrb	r7, [r6, #2]
 8017ac2:	7840      	ldrb	r0, [r0, #1]
 8017ac4:	7876      	ldrb	r6, [r6, #1]
 8017ac6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8017aca:	eba2 0208 	sub.w	r2, r2, r8
 8017ace:	b292      	uxth	r2, r2
 8017ad0:	ebac 0c04 	sub.w	ip, ip, r4
 8017ad4:	fa1f fc8c 	uxth.w	ip, ip
 8017ad8:	fb02 fe0e 	mul.w	lr, r2, lr
 8017adc:	fb0c ee07 	mla	lr, ip, r7, lr
 8017ae0:	78af      	ldrb	r7, [r5, #2]
 8017ae2:	fb04 ee07 	mla	lr, r4, r7, lr
 8017ae6:	789f      	ldrb	r7, [r3, #2]
 8017ae8:	785b      	ldrb	r3, [r3, #1]
 8017aea:	fb08 e707 	mla	r7, r8, r7, lr
 8017aee:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017af2:	fb02 fe0b 	mul.w	lr, r2, fp
 8017af6:	4342      	muls	r2, r0
 8017af8:	7868      	ldrb	r0, [r5, #1]
 8017afa:	9701      	str	r7, [sp, #4]
 8017afc:	fb0c ee0a 	mla	lr, ip, sl, lr
 8017b00:	9f00      	ldr	r7, [sp, #0]
 8017b02:	fb0c 2206 	mla	r2, ip, r6, r2
 8017b06:	fb04 ee09 	mla	lr, r4, r9, lr
 8017b0a:	fb04 2400 	mla	r4, r4, r0, r2
 8017b0e:	fb08 ee07 	mla	lr, r8, r7, lr
 8017b12:	9f01      	ldr	r7, [sp, #4]
 8017b14:	fb08 4803 	mla	r8, r8, r3, r4
 8017b18:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8017b1c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017b20:	ea47 070e 	orr.w	r7, r7, lr
 8017b24:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017b28:	ea47 0708 	orr.w	r7, r7, r8
 8017b2c:	800f      	strh	r7, [r1, #0]
 8017b2e:	b005      	add	sp, #20
 8017b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b34:	080214bb 	.word	0x080214bb
 8017b38:	08021a19 	.word	0x08021a19
 8017b3c:	08021543 	.word	0x08021543

08017b40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8017b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b44:	ed2d 8b0a 	vpush	{d8-d12}
 8017b48:	b091      	sub	sp, #68	; 0x44
 8017b4a:	eeb0 aa40 	vmov.f32	s20, s0
 8017b4e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8017b50:	9307      	str	r3, [sp, #28]
 8017b52:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8017b56:	910c      	str	r1, [sp, #48]	; 0x30
 8017b58:	9309      	str	r3, [sp, #36]	; 0x24
 8017b5a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8017b5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b60:	6860      	ldr	r0, [r4, #4]
 8017b62:	920e      	str	r2, [sp, #56]	; 0x38
 8017b64:	fb00 1303 	mla	r3, r0, r3, r1
 8017b68:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017b6a:	6821      	ldr	r1, [r4, #0]
 8017b6c:	6854      	ldr	r4, [r2, #4]
 8017b6e:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 8017b72:	f9bd 50b0 	ldrsh.w	r5, [sp, #176]	; 0xb0
 8017b76:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8017b7a:	9308      	str	r3, [sp, #32]
 8017b7c:	6813      	ldr	r3, [r2, #0]
 8017b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8017b80:	eef0 9a60 	vmov.f32	s19, s1
 8017b84:	eeb0 9a41 	vmov.f32	s18, s2
 8017b88:	eeb0 8a62 	vmov.f32	s16, s5
 8017b8c:	eef0 8a43 	vmov.f32	s17, s6
 8017b90:	eeb0 ca44 	vmov.f32	s24, s8
 8017b94:	eef0 ba64 	vmov.f32	s23, s9
 8017b98:	eeb0 ba45 	vmov.f32	s22, s10
 8017b9c:	3404      	adds	r4, #4
 8017b9e:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8017ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	dc03      	bgt.n	8017bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8017ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	f340 81cb 	ble.w	8017f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8017bb0:	9b07      	ldr	r3, [sp, #28]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f340 80dd 	ble.w	8017d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x232>
 8017bb8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017bba:	1412      	asrs	r2, r2, #16
 8017bbc:	ea4f 432b 	mov.w	r3, fp, asr #16
 8017bc0:	d42c      	bmi.n	8017c1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8017bc2:	1c51      	adds	r1, r2, #1
 8017bc4:	428d      	cmp	r5, r1
 8017bc6:	dd2c      	ble.n	8017c22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	db2a      	blt.n	8017c22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8017bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017bce:	1c59      	adds	r1, r3, #1
 8017bd0:	4288      	cmp	r0, r1
 8017bd2:	dd26      	ble.n	8017c22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 8017bd4:	9b07      	ldr	r3, [sp, #28]
 8017bd6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017bd8:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017bda:	3b01      	subs	r3, #1
 8017bdc:	fb02 1203 	mla	r2, r2, r3, r1
 8017be0:	1412      	asrs	r2, r2, #16
 8017be2:	d428      	bmi.n	8017c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8017be4:	3201      	adds	r2, #1
 8017be6:	4295      	cmp	r5, r2
 8017be8:	dd25      	ble.n	8017c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8017bea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8017bec:	fb02 b303 	mla	r3, r2, r3, fp
 8017bf0:	141b      	asrs	r3, r3, #16
 8017bf2:	d420      	bmi.n	8017c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8017bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bf6:	3301      	adds	r3, #1
 8017bf8:	429a      	cmp	r2, r3
 8017bfa:	dd1c      	ble.n	8017c36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf6>
 8017bfc:	9b07      	ldr	r3, [sp, #28]
 8017bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c00:	9b08      	ldr	r3, [sp, #32]
 8017c02:	930d      	str	r3, [sp, #52]	; 0x34
 8017c04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	f300 8116 	bgt.w	8017e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f8>
 8017c0c:	9b07      	ldr	r3, [sp, #28]
 8017c0e:	9a08      	ldr	r2, [sp, #32]
 8017c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017c14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8017c18:	9308      	str	r3, [sp, #32]
 8017c1a:	e0ac      	b.n	8017d76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x236>
 8017c1c:	1c51      	adds	r1, r2, #1
 8017c1e:	f040 809b 	bne.w	8017d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017c22:	42aa      	cmp	r2, r5
 8017c24:	f280 8098 	bge.w	8017d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017c28:	1c5a      	adds	r2, r3, #1
 8017c2a:	f2c0 8095 	blt.w	8017d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c30:	4293      	cmp	r3, r2
 8017c32:	f280 8091 	bge.w	8017d58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x218>
 8017c36:	9b07      	ldr	r3, [sp, #28]
 8017c38:	930d      	str	r3, [sp, #52]	; 0x34
 8017c3a:	9b08      	ldr	r3, [sp, #32]
 8017c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	dde3      	ble.n	8017c0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 8017c44:	9825      	ldr	r0, [sp, #148]	; 0x94
 8017c46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017c48:	1400      	asrs	r0, r0, #16
 8017c4a:	ea4f 422b 	mov.w	r2, fp, asr #16
 8017c4e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017c52:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8017c56:	f100 80d9 	bmi.w	8017e0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2cc>
 8017c5a:	1c46      	adds	r6, r0, #1
 8017c5c:	42b5      	cmp	r5, r6
 8017c5e:	f340 80d7 	ble.w	8017e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8017c62:	2a00      	cmp	r2, #0
 8017c64:	f2c0 80d4 	blt.w	8017e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8017c68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017c6a:	1c56      	adds	r6, r2, #1
 8017c6c:	42b7      	cmp	r7, r6
 8017c6e:	f340 80cf 	ble.w	8017e10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2d0>
 8017c72:	fb02 0005 	mla	r0, r2, r5, r0
 8017c76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017c78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c7a:	4402      	add	r2, r0
 8017c7c:	5c30      	ldrb	r0, [r6, r0]
 8017c7e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8017c82:	eb04 0c08 	add.w	ip, r4, r8
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	f000 80b2 	beq.w	8017df0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 8017c8c:	7856      	ldrb	r6, [r2, #1]
 8017c8e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017c92:	4426      	add	r6, r4
 8017c94:	2900      	cmp	r1, #0
 8017c96:	f000 80b3 	beq.w	8017e00 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 8017c9a:	1950      	adds	r0, r2, r5
 8017c9c:	5d52      	ldrb	r2, [r2, r5]
 8017c9e:	7840      	ldrb	r0, [r0, #1]
 8017ca0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ca4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017ca8:	4422      	add	r2, r4
 8017caa:	4420      	add	r0, r4
 8017cac:	b29b      	uxth	r3, r3
 8017cae:	b289      	uxth	r1, r1
 8017cb0:	fb03 f901 	mul.w	r9, r3, r1
 8017cb4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017cb8:	011b      	lsls	r3, r3, #4
 8017cba:	b289      	uxth	r1, r1
 8017cbc:	78b7      	ldrb	r7, [r6, #2]
 8017cbe:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017cc2:	f89c c001 	ldrb.w	ip, [ip, #1]
 8017cc6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017cca:	eba3 0309 	sub.w	r3, r3, r9
 8017cce:	b29b      	uxth	r3, r3
 8017cd0:	ebae 0e01 	sub.w	lr, lr, r1
 8017cd4:	fa1f fe8e 	uxth.w	lr, lr
 8017cd8:	435f      	muls	r7, r3
 8017cda:	fb0e 770a 	mla	r7, lr, sl, r7
 8017cde:	f892 a002 	ldrb.w	sl, [r2, #2]
 8017ce2:	fb01 770a 	mla	r7, r1, sl, r7
 8017ce6:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017cea:	fb09 7a0a 	mla	sl, r9, sl, r7
 8017cee:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017cf2:	f896 8000 	ldrb.w	r8, [r6]
 8017cf6:	7876      	ldrb	r6, [r6, #1]
 8017cf8:	fb03 f808 	mul.w	r8, r3, r8
 8017cfc:	fb0e 8807 	mla	r8, lr, r7, r8
 8017d00:	7817      	ldrb	r7, [r2, #0]
 8017d02:	fb01 8807 	mla	r8, r1, r7, r8
 8017d06:	7807      	ldrb	r7, [r0, #0]
 8017d08:	fb09 8707 	mla	r7, r9, r7, r8
 8017d0c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017d10:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017d14:	ea4a 0707 	orr.w	r7, sl, r7
 8017d18:	4373      	muls	r3, r6
 8017d1a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8017d1e:	fb0e 330c 	mla	r3, lr, ip, r3
 8017d22:	fb01 310a 	mla	r1, r1, sl, r3
 8017d26:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d2c:	fb09 1a0a 	mla	sl, r9, sl, r1
 8017d30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017d34:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017d38:	ea47 070a 	orr.w	r7, r7, sl
 8017d3c:	801f      	strh	r7, [r3, #0]
 8017d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d40:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017d42:	3302      	adds	r3, #2
 8017d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017d48:	4413      	add	r3, r2
 8017d4a:	9325      	str	r3, [sp, #148]	; 0x94
 8017d4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017d4e:	449b      	add	fp, r3
 8017d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d52:	3b01      	subs	r3, #1
 8017d54:	930d      	str	r3, [sp, #52]	; 0x34
 8017d56:	e772      	b.n	8017c3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 8017d58:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017d5a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017d5c:	4413      	add	r3, r2
 8017d5e:	9325      	str	r3, [sp, #148]	; 0x94
 8017d60:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017d62:	449b      	add	fp, r3
 8017d64:	9b07      	ldr	r3, [sp, #28]
 8017d66:	3b01      	subs	r3, #1
 8017d68:	9307      	str	r3, [sp, #28]
 8017d6a:	9b08      	ldr	r3, [sp, #32]
 8017d6c:	3302      	adds	r3, #2
 8017d6e:	9308      	str	r3, [sp, #32]
 8017d70:	e71e      	b.n	8017bb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8017d72:	f47f af2f 	bne.w	8017bd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 8017d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f340 80e4 	ble.w	8017f46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x406>
 8017d7e:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8017d82:	ee79 9aab 	vadd.f32	s19, s19, s23
 8017d86:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8017d8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017d8c:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8017d90:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8017d94:	eef0 6a48 	vmov.f32	s13, s16
 8017d98:	ee69 7a27 	vmul.f32	s15, s18, s15
 8017d9c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017da0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8017da4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8017da8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8017dac:	eef0 6a68 	vmov.f32	s13, s17
 8017db0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8017db4:	ee18 2a10 	vmov	r2, s16
 8017db8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8017dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017dc0:	ee18 2a90 	vmov	r2, s17
 8017dc4:	9327      	str	r3, [sp, #156]	; 0x9c
 8017dc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017dc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017dcc:	9328      	str	r3, [sp, #160]	; 0xa0
 8017dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017dd2:	3b01      	subs	r3, #1
 8017dd4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017dd8:	930c      	str	r3, [sp, #48]	; 0x30
 8017dda:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017ddc:	bf08      	it	eq
 8017dde:	4613      	moveq	r3, r2
 8017de0:	ee16 ba90 	vmov	fp, s13
 8017de4:	9307      	str	r3, [sp, #28]
 8017de6:	eef0 8a67 	vmov.f32	s17, s15
 8017dea:	eeb0 8a47 	vmov.f32	s16, s14
 8017dee:	e6d8      	b.n	8017ba2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 8017df0:	b149      	cbz	r1, 8017e06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c6>
 8017df2:	5d52      	ldrb	r2, [r2, r5]
 8017df4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017df8:	4422      	add	r2, r4
 8017dfa:	4660      	mov	r0, ip
 8017dfc:	4666      	mov	r6, ip
 8017dfe:	e755      	b.n	8017cac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8017e00:	4660      	mov	r0, ip
 8017e02:	4662      	mov	r2, ip
 8017e04:	e752      	b.n	8017cac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x16c>
 8017e06:	4660      	mov	r0, ip
 8017e08:	4662      	mov	r2, ip
 8017e0a:	e7f7      	b.n	8017dfc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 8017e0c:	1c47      	adds	r7, r0, #1
 8017e0e:	d196      	bne.n	8017d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017e10:	4285      	cmp	r5, r0
 8017e12:	dd94      	ble.n	8017d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017e14:	1c56      	adds	r6, r2, #1
 8017e16:	db92      	blt.n	8017d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017e18:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017e1a:	4296      	cmp	r6, r2
 8017e1c:	dd8f      	ble.n	8017d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017e1e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8017e22:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8017e26:	e9cd 5600 	strd	r5, r6, [sp]
 8017e2a:	4623      	mov	r3, r4
 8017e2c:	e9dd 210a 	ldrd	r2, r1, [sp, #40]	; 0x28
 8017e30:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017e32:	f7ff fdcb 	bl	80179cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8017e36:	e782      	b.n	8017d3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fe>
 8017e38:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8017e3a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017e3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017e3e:	1412      	asrs	r2, r2, #16
 8017e40:	ea4f 402b 	mov.w	r0, fp, asr #16
 8017e44:	fb05 2000 	mla	r0, r5, r0, r2
 8017e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e4a:	f816 8000 	ldrb.w	r8, [r6, r0]
 8017e4e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017e52:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017e56:	f3cb 3103 	ubfx	r1, fp, #12, #4
 8017e5a:	4402      	add	r2, r0
 8017e5c:	eb04 0c08 	add.w	ip, r4, r8
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d062      	beq.n	8017f2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ea>
 8017e64:	7856      	ldrb	r6, [r2, #1]
 8017e66:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017e6a:	4426      	add	r6, r4
 8017e6c:	2900      	cmp	r1, #0
 8017e6e:	d064      	beq.n	8017f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3fa>
 8017e70:	1950      	adds	r0, r2, r5
 8017e72:	5d52      	ldrb	r2, [r2, r5]
 8017e74:	7840      	ldrb	r0, [r0, #1]
 8017e76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017e7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017e7e:	4422      	add	r2, r4
 8017e80:	4420      	add	r0, r4
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	b289      	uxth	r1, r1
 8017e86:	fb03 f901 	mul.w	r9, r3, r1
 8017e8a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017e8e:	011b      	lsls	r3, r3, #4
 8017e90:	b289      	uxth	r1, r1
 8017e92:	78b7      	ldrb	r7, [r6, #2]
 8017e94:	f89c a002 	ldrb.w	sl, [ip, #2]
 8017e98:	f89c c001 	ldrb.w	ip, [ip, #1]
 8017e9c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8017ea0:	eba3 0309 	sub.w	r3, r3, r9
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	ebae 0e01 	sub.w	lr, lr, r1
 8017eaa:	fa1f fe8e 	uxth.w	lr, lr
 8017eae:	435f      	muls	r7, r3
 8017eb0:	fb0e 770a 	mla	r7, lr, sl, r7
 8017eb4:	f892 a002 	ldrb.w	sl, [r2, #2]
 8017eb8:	fb01 770a 	mla	r7, r1, sl, r7
 8017ebc:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017ec0:	fb09 7a0a 	mla	sl, r9, sl, r7
 8017ec4:	f814 7008 	ldrb.w	r7, [r4, r8]
 8017ec8:	f896 8000 	ldrb.w	r8, [r6]
 8017ecc:	7876      	ldrb	r6, [r6, #1]
 8017ece:	fb03 f808 	mul.w	r8, r3, r8
 8017ed2:	fb0e 8807 	mla	r8, lr, r7, r8
 8017ed6:	7817      	ldrb	r7, [r2, #0]
 8017ed8:	fb01 8807 	mla	r8, r1, r7, r8
 8017edc:	7807      	ldrb	r7, [r0, #0]
 8017ede:	fb09 8707 	mla	r7, r9, r7, r8
 8017ee2:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8017ee6:	4373      	muls	r3, r6
 8017ee8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8017eec:	7856      	ldrb	r6, [r2, #1]
 8017eee:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8017ef0:	ea4a 0707 	orr.w	r7, sl, r7
 8017ef4:	fb0e 330c 	mla	r3, lr, ip, r3
 8017ef8:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017efc:	fb01 3306 	mla	r3, r1, r6, r3
 8017f00:	fb09 3a0a 	mla	sl, r9, sl, r3
 8017f04:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017f08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f0a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017f0e:	ea47 070a 	orr.w	r7, r7, sl
 8017f12:	f823 7b02 	strh.w	r7, [r3], #2
 8017f16:	930d      	str	r3, [sp, #52]	; 0x34
 8017f18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8017f1a:	4413      	add	r3, r2
 8017f1c:	9325      	str	r3, [sp, #148]	; 0x94
 8017f1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017f20:	449b      	add	fp, r3
 8017f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f24:	3b01      	subs	r3, #1
 8017f26:	930b      	str	r3, [sp, #44]	; 0x2c
 8017f28:	e66c      	b.n	8017c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 8017f2a:	b149      	cbz	r1, 8017f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x400>
 8017f2c:	5d52      	ldrb	r2, [r2, r5]
 8017f2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017f32:	4422      	add	r2, r4
 8017f34:	4660      	mov	r0, ip
 8017f36:	4666      	mov	r6, ip
 8017f38:	e7a3      	b.n	8017e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8017f3a:	4660      	mov	r0, ip
 8017f3c:	4662      	mov	r2, ip
 8017f3e:	e7a0      	b.n	8017e82 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x342>
 8017f40:	4660      	mov	r0, ip
 8017f42:	4662      	mov	r2, ip
 8017f44:	e7f7      	b.n	8017f36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f6>
 8017f46:	b011      	add	sp, #68	; 0x44
 8017f48:	ecbd 8b0a 	vpop	{d8-d12}
 8017f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8017f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f54:	8808      	ldrh	r0, [r1, #0]
 8017f56:	b085      	sub	sp, #20
 8017f58:	1206      	asrs	r6, r0, #8
 8017f5a:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8017f5e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8017f62:	9600      	str	r6, [sp, #0]
 8017f64:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8017f68:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8017f6c:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8017f70:	10c6      	asrs	r6, r0, #3
 8017f72:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017f76:	9601      	str	r6, [sp, #4]
 8017f78:	00c0      	lsls	r0, r0, #3
 8017f7a:	fb04 560c 	mla	r6, r4, ip, r5
 8017f7e:	b2c0      	uxtb	r0, r0
 8017f80:	4692      	mov	sl, r2
 8017f82:	eb02 0e06 	add.w	lr, r2, r6
 8017f86:	9a00      	ldr	r2, [sp, #0]
 8017f88:	9002      	str	r0, [sp, #8]
 8017f8a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8017f8e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8017f92:	9a01      	ldr	r2, [sp, #4]
 8017f94:	2c00      	cmp	r4, #0
 8017f96:	4698      	mov	r8, r3
 8017f98:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8017f9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8017fa0:	db3e      	blt.n	8018020 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8017fa2:	45a1      	cmp	r9, r4
 8017fa4:	dd3c      	ble.n	8018020 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd0>
 8017fa6:	2d00      	cmp	r5, #0
 8017fa8:	db38      	blt.n	801801c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8017faa:	45ac      	cmp	ip, r5
 8017fac:	dd36      	ble.n	801801c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xcc>
 8017fae:	f81a 2006 	ldrb.w	r2, [sl, r6]
 8017fb2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8017fb6:	1c6e      	adds	r6, r5, #1
 8017fb8:	d435      	bmi.n	8018026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8017fba:	45b4      	cmp	ip, r6
 8017fbc:	dd33      	ble.n	8018026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8017fbe:	b393      	cbz	r3, 8018026 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xd6>
 8017fc0:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8017fc4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 8017fc8:	3401      	adds	r4, #1
 8017fca:	d430      	bmi.n	801802e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8017fcc:	45a1      	cmp	r9, r4
 8017fce:	dd2e      	ble.n	801802e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8017fd0:	b36f      	cbz	r7, 801802e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xde>
 8017fd2:	2d00      	cmp	r5, #0
 8017fd4:	db29      	blt.n	801802a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8017fd6:	45ac      	cmp	ip, r5
 8017fd8:	dd27      	ble.n	801802a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xda>
 8017fda:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8017fde:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8017fe2:	3501      	adds	r5, #1
 8017fe4:	d407      	bmi.n	8017ff6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8017fe6:	45ac      	cmp	ip, r5
 8017fe8:	dd05      	ble.n	8017ff6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8017fea:	b123      	cbz	r3, 8017ff6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8017fec:	44f4      	add	ip, lr
 8017fee:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017ff2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8017ff6:	2b0f      	cmp	r3, #15
 8017ff8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8017ffc:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018000:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018004:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8018008:	d801      	bhi.n	801800e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 801800a:	2f0f      	cmp	r7, #15
 801800c:	d911      	bls.n	8018032 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xe2>
 801800e:	4b7f      	ldr	r3, [pc, #508]	; (801820c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2bc>)
 8018010:	4a7f      	ldr	r2, [pc, #508]	; (8018210 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c0>)
 8018012:	4880      	ldr	r0, [pc, #512]	; (8018214 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 8018014:	f240 3173 	movw	r1, #883	; 0x373
 8018018:	f005 fc2c 	bl	801d874 <__assert_func>
 801801c:	4602      	mov	r2, r0
 801801e:	e7ca      	b.n	8017fb6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x66>
 8018020:	4606      	mov	r6, r0
 8018022:	4602      	mov	r2, r0
 8018024:	e7d0      	b.n	8017fc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 8018026:	4606      	mov	r6, r0
 8018028:	e7ce      	b.n	8017fc8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x78>
 801802a:	4604      	mov	r4, r0
 801802c:	e7d9      	b.n	8017fe2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x92>
 801802e:	4604      	mov	r4, r0
 8018030:	e7e1      	b.n	8017ff6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 8018032:	b29b      	uxth	r3, r3
 8018034:	b2bf      	uxth	r7, r7
 8018036:	fb03 fe07 	mul.w	lr, r3, r7
 801803a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801803e:	011b      	lsls	r3, r3, #4
 8018040:	eba3 0c0e 	sub.w	ip, r3, lr
 8018044:	b2bf      	uxth	r7, r7
 8018046:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801804a:	fa1f fc8c 	uxth.w	ip, ip
 801804e:	1bed      	subs	r5, r5, r7
 8018050:	b2ad      	uxth	r5, r5
 8018052:	fb0c f30a 	mul.w	r3, ip, sl
 8018056:	fb05 330b 	mla	r3, r5, fp, r3
 801805a:	fb07 3309 	mla	r3, r7, r9, r3
 801805e:	fb0e 3308 	mla	r3, lr, r8, r3
 8018062:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018066:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801806a:	9303      	str	r3, [sp, #12]
 801806c:	d018      	beq.n	80180a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x150>
 801806e:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018072:	fb0b f303 	mul.w	r3, fp, r3
 8018076:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801807a:	fb0b fb02 	mul.w	fp, fp, r2
 801807e:	0a1a      	lsrs	r2, r3, #8
 8018080:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018084:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8018088:	441a      	add	r2, r3
 801808a:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801808e:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8018092:	0a12      	lsrs	r2, r2, #8
 8018094:	0a1b      	lsrs	r3, r3, #8
 8018096:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801809a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801809e:	431a      	orrs	r2, r3
 80180a0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80180a4:	d019      	beq.n	80180da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x18a>
 80180a6:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 80180aa:	fb0a fb0b 	mul.w	fp, sl, fp
 80180ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80180b2:	fb0a fa06 	mul.w	sl, sl, r6
 80180b6:	ea4f 261b 	mov.w	r6, fp, lsr #8
 80180ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80180be:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80180c2:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 80180c6:	445e      	add	r6, fp
 80180c8:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80180cc:	0a36      	lsrs	r6, r6, #8
 80180ce:	0a1b      	lsrs	r3, r3, #8
 80180d0:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80180d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80180d8:	431e      	orrs	r6, r3
 80180da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80180de:	d019      	beq.n	8018114 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1c4>
 80180e0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80180e4:	fb09 fa0a 	mul.w	sl, r9, sl
 80180e8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80180ec:	fb09 f904 	mul.w	r9, r9, r4
 80180f0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80180f4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80180f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80180fc:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8018100:	4454      	add	r4, sl
 8018102:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8018106:	0a24      	lsrs	r4, r4, #8
 8018108:	0a1b      	lsrs	r3, r3, #8
 801810a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801810e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018112:	431c      	orrs	r4, r3
 8018114:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018118:	d019      	beq.n	801814e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1fe>
 801811a:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801811e:	fb08 f909 	mul.w	r9, r8, r9
 8018122:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018126:	fb08 f800 	mul.w	r8, r8, r0
 801812a:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801812e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018132:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018136:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801813a:	4448      	add	r0, r9
 801813c:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8018140:	0a00      	lsrs	r0, r0, #8
 8018142:	0a1b      	lsrs	r3, r3, #8
 8018144:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018148:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801814c:	4318      	orrs	r0, r3
 801814e:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018152:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018156:	fb0c f808 	mul.w	r8, ip, r8
 801815a:	fb05 8803 	mla	r8, r5, r3, r8
 801815e:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8018162:	fb07 8803 	mla	r8, r7, r3, r8
 8018166:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801816a:	fb0e 8303 	mla	r3, lr, r3, r8
 801816e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018172:	fb0c f606 	mul.w	r6, ip, r6
 8018176:	0a1b      	lsrs	r3, r3, #8
 8018178:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801817c:	fb05 6202 	mla	r2, r5, r2, r6
 8018180:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8018184:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8018188:	fb07 2703 	mla	r7, r7, r3, r2
 801818c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018190:	b295      	uxth	r5, r2
 8018192:	9a03      	ldr	r2, [sp, #12]
 8018194:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8018198:	436a      	muls	r2, r5
 801819a:	fb0e 7303 	mla	r3, lr, r3, r7
 801819e:	1c50      	adds	r0, r2, #1
 80181a0:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80181a4:	0a1b      	lsrs	r3, r3, #8
 80181a6:	9a00      	ldr	r2, [sp, #0]
 80181a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80181ac:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80181b0:	ea48 0303 	orr.w	r3, r8, r3
 80181b4:	b2c0      	uxtb	r0, r0
 80181b6:	fb12 f200 	smulbb	r2, r2, r0
 80181ba:	0c1e      	lsrs	r6, r3, #16
 80181bc:	fb06 2605 	mla	r6, r6, r5, r2
 80181c0:	9a01      	ldr	r2, [sp, #4]
 80181c2:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80181c6:	fb12 f200 	smulbb	r2, r2, r0
 80181ca:	fb04 2205 	mla	r2, r4, r5, r2
 80181ce:	b294      	uxth	r4, r2
 80181d0:	9a02      	ldr	r2, [sp, #8]
 80181d2:	b2db      	uxtb	r3, r3
 80181d4:	fb12 f200 	smulbb	r2, r2, r0
 80181d8:	fb03 2205 	mla	r2, r3, r5, r2
 80181dc:	b2b6      	uxth	r6, r6
 80181de:	b292      	uxth	r2, r2
 80181e0:	1c73      	adds	r3, r6, #1
 80181e2:	1c50      	adds	r0, r2, #1
 80181e4:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 80181e8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80181ec:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80181f0:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 80181f4:	4313      	orrs	r3, r2
 80181f6:	1c62      	adds	r2, r4, #1
 80181f8:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80181fc:	0952      	lsrs	r2, r2, #5
 80181fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018202:	4313      	orrs	r3, r2
 8018204:	800b      	strh	r3, [r1, #0]
 8018206:	b005      	add	sp, #20
 8018208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820c:	080214bb 	.word	0x080214bb
 8018210:	08021a19 	.word	0x08021a19
 8018214:	08021543 	.word	0x08021543

08018218 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801821c:	ed2d 8b08 	vpush	{d8-d11}
 8018220:	b09b      	sub	sp, #108	; 0x6c
 8018222:	eeb0 aa40 	vmov.f32	s20, s0
 8018226:	9309      	str	r3, [sp, #36]	; 0x24
 8018228:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
 801822c:	9d31      	ldr	r5, [sp, #196]	; 0xc4
 801822e:	9311      	str	r3, [sp, #68]	; 0x44
 8018230:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8018234:	9114      	str	r1, [sp, #80]	; 0x50
 8018236:	9317      	str	r3, [sp, #92]	; 0x5c
 8018238:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801823c:	9019      	str	r0, [sp, #100]	; 0x64
 801823e:	6868      	ldr	r0, [r5, #4]
 8018240:	9218      	str	r2, [sp, #96]	; 0x60
 8018242:	fb00 1303 	mla	r3, r0, r3, r1
 8018246:	6829      	ldr	r1, [r5, #0]
 8018248:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 801824a:	f9bd 40d0 	ldrsh.w	r4, [sp, #208]	; 0xd0
 801824e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018252:	930c      	str	r3, [sp, #48]	; 0x30
 8018254:	6813      	ldr	r3, [r2, #0]
 8018256:	9313      	str	r3, [sp, #76]	; 0x4c
 8018258:	6853      	ldr	r3, [r2, #4]
 801825a:	3304      	adds	r3, #4
 801825c:	eef0 9a60 	vmov.f32	s19, s1
 8018260:	eeb0 9a41 	vmov.f32	s18, s2
 8018264:	eeb0 8a62 	vmov.f32	s16, s5
 8018268:	eef0 8a43 	vmov.f32	s17, s6
 801826c:	eef0 ba44 	vmov.f32	s23, s8
 8018270:	eeb0 ba64 	vmov.f32	s22, s9
 8018274:	eef0 aa45 	vmov.f32	s21, s10
 8018278:	9308      	str	r3, [sp, #32]
 801827a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801827c:	2b00      	cmp	r3, #0
 801827e:	dc03      	bgt.n	8018288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 8018280:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018282:	2b00      	cmp	r3, #0
 8018284:	f340 8363 	ble.w	801894e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 8018288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801828a:	2b00      	cmp	r3, #0
 801828c:	f340 81ad 	ble.w	80185ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d2>
 8018290:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018292:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8018294:	1412      	asrs	r2, r2, #16
 8018296:	ea4f 4323 	mov.w	r3, r3, asr #16
 801829a:	d42f      	bmi.n	80182fc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801829c:	1c51      	adds	r1, r2, #1
 801829e:	428c      	cmp	r4, r1
 80182a0:	dd2f      	ble.n	8018302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	db2d      	blt.n	8018302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80182a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80182a8:	1c59      	adds	r1, r3, #1
 80182aa:	4288      	cmp	r0, r1
 80182ac:	dd29      	ble.n	8018302 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 80182ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182b0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80182b2:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80182b4:	3b01      	subs	r3, #1
 80182b6:	fb02 1203 	mla	r2, r2, r3, r1
 80182ba:	1412      	asrs	r2, r2, #16
 80182bc:	d42b      	bmi.n	8018316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80182be:	3201      	adds	r2, #1
 80182c0:	4294      	cmp	r4, r2
 80182c2:	dd28      	ble.n	8018316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80182c4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80182c6:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80182c8:	fb02 1303 	mla	r3, r2, r3, r1
 80182cc:	141b      	asrs	r3, r3, #16
 80182ce:	d422      	bmi.n	8018316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80182d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80182d2:	3301      	adds	r3, #1
 80182d4:	429a      	cmp	r2, r3
 80182d6:	dd1e      	ble.n	8018316 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 80182d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182da:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80182de:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
 80182e2:	9312      	str	r3, [sp, #72]	; 0x48
 80182e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	f300 81ea 	bgt.w	80186c0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a8>
 80182ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80182f4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80182f8:	930c      	str	r3, [sp, #48]	; 0x30
 80182fa:	e178      	b.n	80185ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d6>
 80182fc:	1c51      	adds	r1, r2, #1
 80182fe:	f040 8165 	bne.w	80185cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018302:	42a2      	cmp	r2, r4
 8018304:	f280 8162 	bge.w	80185cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018308:	1c5f      	adds	r7, r3, #1
 801830a:	f2c0 815f 	blt.w	80185cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801830e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018310:	4293      	cmp	r3, r2
 8018312:	f280 815b 	bge.w	80185cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 8018316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018318:	9316      	str	r3, [sp, #88]	; 0x58
 801831a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801831c:	9312      	str	r3, [sp, #72]	; 0x48
 801831e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8018322:	9315      	str	r3, [sp, #84]	; 0x54
 8018324:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018326:	2b00      	cmp	r3, #0
 8018328:	dde0      	ble.n	80182ec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801832a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801832c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801832e:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8018332:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8018334:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018338:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801833a:	1412      	asrs	r2, r2, #16
 801833c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018340:	f100 81a5 	bmi.w	801868e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x476>
 8018344:	1c55      	adds	r5, r2, #1
 8018346:	42ac      	cmp	r4, r5
 8018348:	f340 81a3 	ble.w	8018692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801834c:	2b00      	cmp	r3, #0
 801834e:	f2c0 81a0 	blt.w	8018692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 8018352:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8018354:	1c5d      	adds	r5, r3, #1
 8018356:	42af      	cmp	r7, r5
 8018358:	f340 819b 	ble.w	8018692 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47a>
 801835c:	fb03 2304 	mla	r3, r3, r4, r2
 8018360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018362:	18d5      	adds	r5, r2, r3
 8018364:	5cd3      	ldrb	r3, [r2, r3]
 8018366:	9a08      	ldr	r2, [sp, #32]
 8018368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801836c:	0e1f      	lsrs	r7, r3, #24
 801836e:	2800      	cmp	r0, #0
 8018370:	f000 817c 	beq.w	801866c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x454>
 8018374:	786a      	ldrb	r2, [r5, #1]
 8018376:	9e08      	ldr	r6, [sp, #32]
 8018378:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801837c:	920d      	str	r2, [sp, #52]	; 0x34
 801837e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8018382:	2900      	cmp	r1, #0
 8018384:	f000 817d 	beq.w	8018682 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46a>
 8018388:	192a      	adds	r2, r5, r4
 801838a:	5d2d      	ldrb	r5, [r5, r4]
 801838c:	7852      	ldrb	r2, [r2, #1]
 801838e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8018392:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8018396:	950a      	str	r5, [sp, #40]	; 0x28
 8018398:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801839c:	920e      	str	r2, [sp, #56]	; 0x38
 801839e:	0e15      	lsrs	r5, r2, #24
 80183a0:	b280      	uxth	r0, r0
 80183a2:	b289      	uxth	r1, r1
 80183a4:	fb00 fa01 	mul.w	sl, r0, r1
 80183a8:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80183ac:	0100      	lsls	r0, r0, #4
 80183ae:	eba0 080a 	sub.w	r8, r0, sl
 80183b2:	b289      	uxth	r1, r1
 80183b4:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 80183b8:	fa1f f888 	uxth.w	r8, r8
 80183bc:	1a52      	subs	r2, r2, r1
 80183be:	b292      	uxth	r2, r2
 80183c0:	fb08 f00e 	mul.w	r0, r8, lr
 80183c4:	fb02 0007 	mla	r0, r2, r7, r0
 80183c8:	fb01 0009 	mla	r0, r1, r9, r0
 80183cc:	fb0a 0005 	mla	r0, sl, r5, r0
 80183d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80183d4:	2800      	cmp	r0, #0
 80183d6:	f000 80ea 	beq.w	80185ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80183da:	2fff      	cmp	r7, #255	; 0xff
 80183dc:	d01a      	beq.n	8018414 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1fc>
 80183de:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80183e2:	fb07 fc0c 	mul.w	ip, r7, ip
 80183e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80183ea:	435f      	muls	r7, r3
 80183ec:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80183f0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80183f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80183f8:	f507 7b80 	add.w	fp, r7, #256	; 0x100
 80183fc:	4463      	add	r3, ip
 80183fe:	eb0b 2b17 	add.w	fp, fp, r7, lsr #8
 8018402:	0a1b      	lsrs	r3, r3, #8
 8018404:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018408:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801840c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8018410:	ea43 030b 	orr.w	r3, r3, fp
 8018414:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018418:	d01e      	beq.n	8018458 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x240>
 801841a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801841c:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8018420:	fb0e fb0b 	mul.w	fp, lr, fp
 8018424:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8018428:	fb0e fe07 	mul.w	lr, lr, r7
 801842c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8018430:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018434:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018438:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801843c:	44dc      	add	ip, fp
 801843e:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8018442:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018446:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801844a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801844e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018452:	ea4c 060e 	orr.w	r6, ip, lr
 8018456:	960d      	str	r6, [sp, #52]	; 0x34
 8018458:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801845c:	d01e      	beq.n	801849c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x284>
 801845e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8018460:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8018464:	fb09 fe0e 	mul.w	lr, r9, lr
 8018468:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 801846c:	fb09 f907 	mul.w	r9, r9, r7
 8018470:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8018474:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018478:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801847c:	f509 7780 	add.w	r7, r9, #256	; 0x100
 8018480:	44f4      	add	ip, lr
 8018482:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8018486:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801848a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801848e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018492:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8018496:	ea4c 0609 	orr.w	r6, ip, r9
 801849a:	960a      	str	r6, [sp, #40]	; 0x28
 801849c:	2dff      	cmp	r5, #255	; 0xff
 801849e:	d01c      	beq.n	80184da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c2>
 80184a0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80184a2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80184a6:	fb05 fe0e 	mul.w	lr, r5, lr
 80184aa:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 80184ae:	437d      	muls	r5, r7
 80184b0:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80184b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80184b8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80184bc:	f505 7780 	add.w	r7, r5, #256	; 0x100
 80184c0:	44f4      	add	ip, lr
 80184c2:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 80184c6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80184ca:	0a2d      	lsrs	r5, r5, #8
 80184cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80184d0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80184d4:	ea4c 0505 	orr.w	r5, ip, r5
 80184d8:	950e      	str	r5, [sp, #56]	; 0x38
 80184da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80184dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80184de:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80184e2:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80184e6:	fb08 f505 	mul.w	r5, r8, r5
 80184ea:	fb02 5507 	mla	r5, r2, r7, r5
 80184ee:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 80184f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80184f4:	fb01 5507 	mla	r5, r1, r7, r5
 80184f8:	f006 17ff 	and.w	r7, r6, #16711935	; 0xff00ff
 80184fc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80184fe:	fb0a 5507 	mla	r5, sl, r7, r5
 8018502:	f406 477f 	and.w	r7, r6, #65280	; 0xff00
 8018506:	fb08 f807 	mul.w	r8, r8, r7
 801850a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801850e:	fb02 8303 	mla	r3, r2, r3, r8
 8018512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018514:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8018516:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801851a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801851c:	fb01 330c 	mla	r3, r1, ip, r3
 8018520:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8018524:	fb0a 3a01 	mla	sl, sl, r1, r3
 8018528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801852a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801852c:	881f      	ldrh	r7, [r3, #0]
 801852e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018530:	0a2d      	lsrs	r5, r5, #8
 8018532:	4343      	muls	r3, r0
 8018534:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018538:	1c58      	adds	r0, r3, #1
 801853a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801853e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018542:	ea45 050a 	orr.w	r5, r5, sl
 8018546:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801854a:	0c29      	lsrs	r1, r5, #16
 801854c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8018550:	123b      	asrs	r3, r7, #8
 8018552:	b2c0      	uxtb	r0, r0
 8018554:	fb11 f102 	smulbb	r1, r1, r2
 8018558:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801855c:	fb03 1300 	mla	r3, r3, r0, r1
 8018560:	b299      	uxth	r1, r3
 8018562:	10fa      	asrs	r2, r7, #3
 8018564:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018568:	fb13 f306 	smulbb	r3, r3, r6
 801856c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018570:	fb02 3200 	mla	r2, r2, r0, r3
 8018574:	b2ed      	uxtb	r5, r5
 8018576:	00fb      	lsls	r3, r7, #3
 8018578:	b2db      	uxtb	r3, r3
 801857a:	fb15 f506 	smulbb	r5, r5, r6
 801857e:	fb03 5500 	mla	r5, r3, r0, r5
 8018582:	b292      	uxth	r2, r2
 8018584:	b2ad      	uxth	r5, r5
 8018586:	1c4b      	adds	r3, r1, #1
 8018588:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801858c:	1c68      	adds	r0, r5, #1
 801858e:	1c51      	adds	r1, r2, #1
 8018590:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8018594:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018598:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801859c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80185a0:	0952      	lsrs	r2, r2, #5
 80185a2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80185a6:	432b      	orrs	r3, r5
 80185a8:	4313      	orrs	r3, r2
 80185aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80185ac:	8013      	strh	r3, [r2, #0]
 80185ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80185b0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80185b2:	3302      	adds	r3, #2
 80185b4:	9312      	str	r3, [sp, #72]	; 0x48
 80185b6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80185b8:	4413      	add	r3, r2
 80185ba:	932d      	str	r3, [sp, #180]	; 0xb4
 80185bc:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80185be:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80185c0:	4413      	add	r3, r2
 80185c2:	932e      	str	r3, [sp, #184]	; 0xb8
 80185c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80185c6:	3b01      	subs	r3, #1
 80185c8:	9316      	str	r3, [sp, #88]	; 0x58
 80185ca:	e6ab      	b.n	8018324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10c>
 80185cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80185ce:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80185d0:	4413      	add	r3, r2
 80185d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80185d4:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 80185d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80185d8:	4413      	add	r3, r2
 80185da:	932e      	str	r3, [sp, #184]	; 0xb8
 80185dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80185de:	3b01      	subs	r3, #1
 80185e0:	9309      	str	r3, [sp, #36]	; 0x24
 80185e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185e4:	3302      	adds	r3, #2
 80185e6:	930c      	str	r3, [sp, #48]	; 0x30
 80185e8:	e64e      	b.n	8018288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 80185ea:	f47f ae60 	bne.w	80182ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x96>
 80185ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f340 81ac 	ble.w	801894e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x736>
 80185f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80185fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80185fe:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018602:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018604:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018608:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801860c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018610:	eef0 6a48 	vmov.f32	s13, s16
 8018614:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018618:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801861c:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018620:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8018624:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018628:	eef0 6a68 	vmov.f32	s13, s17
 801862c:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018630:	ee18 2a10 	vmov	r2, s16
 8018634:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8018638:	fb92 f3f3 	sdiv	r3, r2, r3
 801863c:	ee18 2a90 	vmov	r2, s17
 8018640:	932f      	str	r3, [sp, #188]	; 0xbc
 8018642:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018644:	fb92 f3f3 	sdiv	r3, r2, r3
 8018648:	9330      	str	r3, [sp, #192]	; 0xc0
 801864a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801864c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801864e:	3b01      	subs	r3, #1
 8018650:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018654:	9314      	str	r3, [sp, #80]	; 0x50
 8018656:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018658:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 801865c:	bf08      	it	eq
 801865e:	4613      	moveq	r3, r2
 8018660:	9309      	str	r3, [sp, #36]	; 0x24
 8018662:	eef0 8a67 	vmov.f32	s17, s15
 8018666:	eeb0 8a47 	vmov.f32	s16, s14
 801866a:	e606      	b.n	801827a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801866c:	b161      	cbz	r1, 8018688 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801866e:	5d2a      	ldrb	r2, [r5, r4]
 8018670:	9d08      	ldr	r5, [sp, #32]
 8018672:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018676:	920a      	str	r2, [sp, #40]	; 0x28
 8018678:	ea4f 6912 	mov.w	r9, r2, lsr #24
 801867c:	25ff      	movs	r5, #255	; 0xff
 801867e:	46ae      	mov	lr, r5
 8018680:	e68e      	b.n	80183a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8018682:	25ff      	movs	r5, #255	; 0xff
 8018684:	46a9      	mov	r9, r5
 8018686:	e68b      	b.n	80183a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x188>
 8018688:	25ff      	movs	r5, #255	; 0xff
 801868a:	46a9      	mov	r9, r5
 801868c:	e7f7      	b.n	801867e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801868e:	1c56      	adds	r6, r2, #1
 8018690:	d18d      	bne.n	80185ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8018692:	4294      	cmp	r4, r2
 8018694:	dd8b      	ble.n	80185ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 8018696:	1c5d      	adds	r5, r3, #1
 8018698:	db89      	blt.n	80185ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 801869a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801869c:	429d      	cmp	r5, r3
 801869e:	dd86      	ble.n	80185ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80186a0:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80186a4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80186a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186a8:	9202      	str	r2, [sp, #8]
 80186aa:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80186ae:	e9cd 4300 	strd	r4, r3, [sp]
 80186b2:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 80186b6:	9b08      	ldr	r3, [sp, #32]
 80186b8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80186ba:	f7ff fc49 	bl	8017f50 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80186be:	e776      	b.n	80185ae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x396>
 80186c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80186c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80186c4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80186c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80186ca:	1412      	asrs	r2, r2, #16
 80186cc:	f3c3 3003 	ubfx	r0, r3, #12, #4
 80186d0:	141b      	asrs	r3, r3, #16
 80186d2:	fb04 2303 	mla	r3, r4, r3, r2
 80186d6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186d8:	18d5      	adds	r5, r2, r3
 80186da:	5cd3      	ldrb	r3, [r2, r3]
 80186dc:	9a08      	ldr	r2, [sp, #32]
 80186de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80186e2:	0e1e      	lsrs	r6, r3, #24
 80186e4:	2900      	cmp	r1, #0
 80186e6:	f000 8121 	beq.w	801892c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 80186ea:	786a      	ldrb	r2, [r5, #1]
 80186ec:	9f08      	ldr	r7, [sp, #32]
 80186ee:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80186f2:	920f      	str	r2, [sp, #60]	; 0x3c
 80186f4:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80186f8:	2800      	cmp	r0, #0
 80186fa:	f000 8122 	beq.w	8018942 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72a>
 80186fe:	192a      	adds	r2, r5, r4
 8018700:	5d2d      	ldrb	r5, [r5, r4]
 8018702:	7852      	ldrb	r2, [r2, #1]
 8018704:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8018708:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801870c:	950b      	str	r5, [sp, #44]	; 0x2c
 801870e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8018712:	9210      	str	r2, [sp, #64]	; 0x40
 8018714:	0e15      	lsrs	r5, r2, #24
 8018716:	b289      	uxth	r1, r1
 8018718:	b280      	uxth	r0, r0
 801871a:	fb01 f900 	mul.w	r9, r1, r0
 801871e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018722:	0109      	lsls	r1, r1, #4
 8018724:	eba1 0e09 	sub.w	lr, r1, r9
 8018728:	b280      	uxth	r0, r0
 801872a:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801872e:	fa1f fe8e 	uxth.w	lr, lr
 8018732:	1a12      	subs	r2, r2, r0
 8018734:	b292      	uxth	r2, r2
 8018736:	fb0e f10c 	mul.w	r1, lr, ip
 801873a:	fb02 1106 	mla	r1, r2, r6, r1
 801873e:	fb00 1108 	mla	r1, r0, r8, r1
 8018742:	fb09 1105 	mla	r1, r9, r5, r1
 8018746:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801874a:	2900      	cmp	r1, #0
 801874c:	f000 80e0 	beq.w	8018910 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f8>
 8018750:	2eff      	cmp	r6, #255	; 0xff
 8018752:	d016      	beq.n	8018782 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x56a>
 8018754:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8018758:	4377      	muls	r7, r6
 801875a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801875e:	435e      	muls	r6, r3
 8018760:	0a3b      	lsrs	r3, r7, #8
 8018762:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018766:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801876a:	443b      	add	r3, r7
 801876c:	f506 7780 	add.w	r7, r6, #256	; 0x100
 8018770:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8018774:	0a1b      	lsrs	r3, r3, #8
 8018776:	0a3f      	lsrs	r7, r7, #8
 8018778:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801877c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018780:	433b      	orrs	r3, r7
 8018782:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018786:	d01d      	beq.n	80187c4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ac>
 8018788:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801878a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801878c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018790:	fb0c f606 	mul.w	r6, ip, r6
 8018794:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8018798:	fb0c fc07 	mul.w	ip, ip, r7
 801879c:	0a37      	lsrs	r7, r6, #8
 801879e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80187a2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80187a6:	4437      	add	r7, r6
 80187a8:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 80187ac:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 80187b0:	0a3f      	lsrs	r7, r7, #8
 80187b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80187b6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80187ba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80187be:	ea47 060c 	orr.w	r6, r7, ip
 80187c2:	960f      	str	r6, [sp, #60]	; 0x3c
 80187c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80187c8:	d01d      	beq.n	8018806 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ee>
 80187ca:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80187cc:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80187d0:	fb08 fc0c 	mul.w	ip, r8, ip
 80187d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80187d8:	fb08 f806 	mul.w	r8, r8, r6
 80187dc:	ea4f 271c 	mov.w	r7, ip, lsr #8
 80187e0:	f508 7680 	add.w	r6, r8, #256	; 0x100
 80187e4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80187e8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80187ec:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 80187f0:	4467      	add	r7, ip
 80187f2:	0a3f      	lsrs	r7, r7, #8
 80187f4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80187f8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80187fc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018800:	ea47 0608 	orr.w	r6, r7, r8
 8018804:	960b      	str	r6, [sp, #44]	; 0x2c
 8018806:	2dff      	cmp	r5, #255	; 0xff
 8018808:	d01a      	beq.n	8018840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x628>
 801880a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801880c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018810:	fb05 fc0c 	mul.w	ip, r5, ip
 8018814:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018818:	4375      	muls	r5, r6
 801881a:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801881e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018822:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018826:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801882a:	4467      	add	r7, ip
 801882c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8018830:	0a3f      	lsrs	r7, r7, #8
 8018832:	0a2d      	lsrs	r5, r5, #8
 8018834:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018838:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801883c:	433d      	orrs	r5, r7
 801883e:	9510      	str	r5, [sp, #64]	; 0x40
 8018840:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8018842:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018846:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801884a:	fb0e f505 	mul.w	r5, lr, r5
 801884e:	fb02 5506 	mla	r5, r2, r6, r5
 8018852:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018854:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018858:	fb00 5506 	mla	r5, r0, r6, r5
 801885c:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801885e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018862:	fb09 5506 	mla	r5, r9, r6, r5
 8018866:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8018868:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801886c:	fb0e fe06 	mul.w	lr, lr, r6
 8018870:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018874:	fb02 e303 	mla	r3, r2, r3, lr
 8018878:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801887a:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801887e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018880:	fb00 3307 	mla	r3, r0, r7, r3
 8018884:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8018888:	fb09 3c0c 	mla	ip, r9, ip, r3
 801888c:	fb01 f10b 	mul.w	r1, r1, fp
 8018890:	0a2d      	lsrs	r5, r5, #8
 8018892:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018896:	f8ba 0000 	ldrh.w	r0, [sl]
 801889a:	1c4b      	adds	r3, r1, #1
 801889c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80188a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80188a4:	ea45 050c 	orr.w	r5, r5, ip
 80188a8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80188ac:	1202      	asrs	r2, r0, #8
 80188ae:	0c2b      	lsrs	r3, r5, #16
 80188b0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80188b4:	b2c9      	uxtb	r1, r1
 80188b6:	fb13 f30b 	smulbb	r3, r3, fp
 80188ba:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80188be:	fb02 3201 	mla	r2, r2, r1, r3
 80188c2:	f3c5 2607 	ubfx	r6, r5, #8, #8
 80188c6:	10c3      	asrs	r3, r0, #3
 80188c8:	b2ed      	uxtb	r5, r5
 80188ca:	00c0      	lsls	r0, r0, #3
 80188cc:	b2c0      	uxtb	r0, r0
 80188ce:	fb15 f50b 	smulbb	r5, r5, fp
 80188d2:	fb00 5001 	mla	r0, r0, r1, r5
 80188d6:	b292      	uxth	r2, r2
 80188d8:	fb16 f60b 	smulbb	r6, r6, fp
 80188dc:	b280      	uxth	r0, r0
 80188de:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80188e2:	fb03 6301 	mla	r3, r3, r1, r6
 80188e6:	1c51      	adds	r1, r2, #1
 80188e8:	1c46      	adds	r6, r0, #1
 80188ea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80188ee:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 80188f2:	b29b      	uxth	r3, r3
 80188f4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80188f8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80188fc:	4332      	orrs	r2, r6
 80188fe:	1c5e      	adds	r6, r3, #1
 8018900:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018904:	095b      	lsrs	r3, r3, #5
 8018906:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801890a:	431a      	orrs	r2, r3
 801890c:	f8aa 2000 	strh.w	r2, [sl]
 8018910:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8018912:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018914:	4413      	add	r3, r2
 8018916:	932d      	str	r3, [sp, #180]	; 0xb4
 8018918:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801891a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801891c:	4413      	add	r3, r2
 801891e:	932e      	str	r3, [sp, #184]	; 0xb8
 8018920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018922:	3b01      	subs	r3, #1
 8018924:	f10a 0a02 	add.w	sl, sl, #2
 8018928:	9312      	str	r3, [sp, #72]	; 0x48
 801892a:	e4db      	b.n	80182e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801892c:	b160      	cbz	r0, 8018948 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801892e:	5d2a      	ldrb	r2, [r5, r4]
 8018930:	9d08      	ldr	r5, [sp, #32]
 8018932:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018936:	920b      	str	r2, [sp, #44]	; 0x2c
 8018938:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801893c:	25ff      	movs	r5, #255	; 0xff
 801893e:	46ac      	mov	ip, r5
 8018940:	e6e9      	b.n	8018716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 8018942:	25ff      	movs	r5, #255	; 0xff
 8018944:	46a8      	mov	r8, r5
 8018946:	e6e6      	b.n	8018716 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fe>
 8018948:	25ff      	movs	r5, #255	; 0xff
 801894a:	46a8      	mov	r8, r5
 801894c:	e7f7      	b.n	801893e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x726>
 801894e:	b01b      	add	sp, #108	; 0x6c
 8018950:	ecbd 8b08 	vpop	{d8-d11}
 8018954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018958 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8018958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801895c:	8808      	ldrh	r0, [r1, #0]
 801895e:	b085      	sub	sp, #20
 8018960:	1206      	asrs	r6, r0, #8
 8018962:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8018966:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801896a:	9600      	str	r6, [sp, #0]
 801896c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8018970:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8018974:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8018978:	10c6      	asrs	r6, r0, #3
 801897a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801897e:	9601      	str	r6, [sp, #4]
 8018980:	00c0      	lsls	r0, r0, #3
 8018982:	fb04 560c 	mla	r6, r4, ip, r5
 8018986:	b2c0      	uxtb	r0, r0
 8018988:	4692      	mov	sl, r2
 801898a:	eb02 0e06 	add.w	lr, r2, r6
 801898e:	9a00      	ldr	r2, [sp, #0]
 8018990:	9002      	str	r0, [sp, #8]
 8018992:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8018996:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801899a:	9a01      	ldr	r2, [sp, #4]
 801899c:	2c00      	cmp	r4, #0
 801899e:	4698      	mov	r8, r3
 80189a0:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80189a4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80189a8:	db3e      	blt.n	8018a28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80189aa:	45a1      	cmp	r9, r4
 80189ac:	dd3c      	ble.n	8018a28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd0>
 80189ae:	2d00      	cmp	r5, #0
 80189b0:	db38      	blt.n	8018a24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80189b2:	45ac      	cmp	ip, r5
 80189b4:	dd36      	ble.n	8018a24 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xcc>
 80189b6:	f81a 2006 	ldrb.w	r2, [sl, r6]
 80189ba:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80189be:	1c6e      	adds	r6, r5, #1
 80189c0:	d435      	bmi.n	8018a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80189c2:	45b4      	cmp	ip, r6
 80189c4:	dd33      	ble.n	8018a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80189c6:	b393      	cbz	r3, 8018a2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 80189c8:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80189cc:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 80189d0:	3401      	adds	r4, #1
 80189d2:	d430      	bmi.n	8018a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 80189d4:	45a1      	cmp	r9, r4
 80189d6:	dd2e      	ble.n	8018a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 80189d8:	b36f      	cbz	r7, 8018a36 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xde>
 80189da:	2d00      	cmp	r5, #0
 80189dc:	db29      	blt.n	8018a32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 80189de:	45ac      	cmp	ip, r5
 80189e0:	dd27      	ble.n	8018a32 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xda>
 80189e2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80189e6:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80189ea:	3501      	adds	r5, #1
 80189ec:	d407      	bmi.n	80189fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80189ee:	45ac      	cmp	ip, r5
 80189f0:	dd05      	ble.n	80189fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80189f2:	b123      	cbz	r3, 80189fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 80189f4:	44f4      	add	ip, lr
 80189f6:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80189fa:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 80189fe:	2b0f      	cmp	r3, #15
 8018a00:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8018a04:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018a08:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8018a0c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8018a10:	d801      	bhi.n	8018a16 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xbe>
 8018a12:	2f0f      	cmp	r7, #15
 8018a14:	d911      	bls.n	8018a3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8018a16:	4b79      	ldr	r3, [pc, #484]	; (8018bfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a4>)
 8018a18:	4a79      	ldr	r2, [pc, #484]	; (8018c00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2a8>)
 8018a1a:	487a      	ldr	r0, [pc, #488]	; (8018c04 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8018a1c:	f240 3173 	movw	r1, #883	; 0x373
 8018a20:	f004 ff28 	bl	801d874 <__assert_func>
 8018a24:	4602      	mov	r2, r0
 8018a26:	e7ca      	b.n	80189be <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x66>
 8018a28:	4606      	mov	r6, r0
 8018a2a:	4602      	mov	r2, r0
 8018a2c:	e7d0      	b.n	80189d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 8018a2e:	4606      	mov	r6, r0
 8018a30:	e7ce      	b.n	80189d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x78>
 8018a32:	4604      	mov	r4, r0
 8018a34:	e7d9      	b.n	80189ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x92>
 8018a36:	4604      	mov	r4, r0
 8018a38:	e7e1      	b.n	80189fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa6>
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	b2bf      	uxth	r7, r7
 8018a3e:	fb03 fe07 	mul.w	lr, r3, r7
 8018a42:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8018a46:	011b      	lsls	r3, r3, #4
 8018a48:	eba3 0c0e 	sub.w	ip, r3, lr
 8018a4c:	b2bf      	uxth	r7, r7
 8018a4e:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 8018a52:	fa1f fc8c 	uxth.w	ip, ip
 8018a56:	1bed      	subs	r5, r5, r7
 8018a58:	b2ad      	uxth	r5, r5
 8018a5a:	fb0c f30a 	mul.w	r3, ip, sl
 8018a5e:	fb05 330b 	mla	r3, r5, fp, r3
 8018a62:	fb07 3309 	mla	r3, r7, r9, r3
 8018a66:	fb0e 3308 	mla	r3, lr, r8, r3
 8018a6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018a6e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018a72:	9303      	str	r3, [sp, #12]
 8018a74:	d018      	beq.n	8018aa8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x150>
 8018a76:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018a7a:	fb0b f303 	mul.w	r3, fp, r3
 8018a7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018a82:	fb0b fb02 	mul.w	fp, fp, r2
 8018a86:	0a1a      	lsrs	r2, r3, #8
 8018a88:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018a8c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8018a90:	441a      	add	r2, r3
 8018a92:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 8018a96:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 8018a9a:	0a12      	lsrs	r2, r2, #8
 8018a9c:	0a1b      	lsrs	r3, r3, #8
 8018a9e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018aa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018aa6:	431a      	orrs	r2, r3
 8018aa8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018aac:	d019      	beq.n	8018ae2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x18a>
 8018aae:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8018ab2:	fb0a fb0b 	mul.w	fp, sl, fp
 8018ab6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018aba:	fb0a fa06 	mul.w	sl, sl, r6
 8018abe:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8018ac2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018ac6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018aca:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 8018ace:	445e      	add	r6, fp
 8018ad0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8018ad4:	0a36      	lsrs	r6, r6, #8
 8018ad6:	0a1b      	lsrs	r3, r3, #8
 8018ad8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018adc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ae0:	431e      	orrs	r6, r3
 8018ae2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018ae6:	d019      	beq.n	8018b1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1c4>
 8018ae8:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8018aec:	fb09 fa0a 	mul.w	sl, r9, sl
 8018af0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8018af4:	fb09 f904 	mul.w	r9, r9, r4
 8018af8:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8018afc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018b00:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018b04:	f509 7380 	add.w	r3, r9, #256	; 0x100
 8018b08:	4454      	add	r4, sl
 8018b0a:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 8018b0e:	0a24      	lsrs	r4, r4, #8
 8018b10:	0a1b      	lsrs	r3, r3, #8
 8018b12:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8018b16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018b1a:	431c      	orrs	r4, r3
 8018b1c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018b20:	d019      	beq.n	8018b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1fe>
 8018b22:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 8018b26:	fb08 f909 	mul.w	r9, r8, r9
 8018b2a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018b2e:	fb08 f800 	mul.w	r8, r8, r0
 8018b32:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8018b36:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018b3a:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8018b3e:	f508 7380 	add.w	r3, r8, #256	; 0x100
 8018b42:	4448      	add	r0, r9
 8018b44:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8018b48:	0a00      	lsrs	r0, r0, #8
 8018b4a:	0a1b      	lsrs	r3, r3, #8
 8018b4c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018b50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018b54:	4318      	orrs	r0, r3
 8018b56:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8018b5a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8018b5e:	fb0c f808 	mul.w	r8, ip, r8
 8018b62:	fb05 8803 	mla	r8, r5, r3, r8
 8018b66:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 8018b6a:	fb07 8803 	mla	r8, r7, r3, r8
 8018b6e:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8018b72:	fb0e 8303 	mla	r3, lr, r3, r8
 8018b76:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018b7a:	0a1b      	lsrs	r3, r3, #8
 8018b7c:	fb0c f606 	mul.w	r6, ip, r6
 8018b80:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018b84:	fb05 6202 	mla	r2, r5, r2, r6
 8018b88:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8018b8c:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8018b90:	fb07 2703 	mla	r7, r7, r3, r2
 8018b94:	9a03      	ldr	r2, [sp, #12]
 8018b96:	9c02      	ldr	r4, [sp, #8]
 8018b98:	9d01      	ldr	r5, [sp, #4]
 8018b9a:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8018b9e:	fb0e 7303 	mla	r3, lr, r3, r7
 8018ba2:	43d0      	mvns	r0, r2
 8018ba4:	9a00      	ldr	r2, [sp, #0]
 8018ba6:	b2c0      	uxtb	r0, r0
 8018ba8:	0a1b      	lsrs	r3, r3, #8
 8018baa:	4342      	muls	r2, r0
 8018bac:	4344      	muls	r4, r0
 8018bae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018bb2:	ea48 0303 	orr.w	r3, r8, r3
 8018bb6:	4345      	muls	r5, r0
 8018bb8:	4620      	mov	r0, r4
 8018bba:	1c54      	adds	r4, r2, #1
 8018bbc:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8018bc0:	0c1a      	lsrs	r2, r3, #16
 8018bc2:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8018bc6:	4a10      	ldr	r2, [pc, #64]	; (8018c08 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8018bc8:	ea02 2204 	and.w	r2, r2, r4, lsl #8
 8018bcc:	1c44      	adds	r4, r0, #1
 8018bce:	eb04 2410 	add.w	r4, r4, r0, lsr #8
 8018bd2:	b2d8      	uxtb	r0, r3
 8018bd4:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 8018bd8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8018bdc:	1c68      	adds	r0, r5, #1
 8018bde:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 8018be2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018be6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8018bea:	00db      	lsls	r3, r3, #3
 8018bec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8018bf0:	4313      	orrs	r3, r2
 8018bf2:	800b      	strh	r3, [r1, #0]
 8018bf4:	b005      	add	sp, #20
 8018bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bfa:	bf00      	nop
 8018bfc:	080214bb 	.word	0x080214bb
 8018c00:	08021a19 	.word	0x08021a19
 8018c04:	08021543 	.word	0x08021543
 8018c08:	fffff800 	.word	0xfffff800

08018c0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 8018c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c10:	ed2d 8b08 	vpush	{d8-d11}
 8018c14:	b097      	sub	sp, #92	; 0x5c
 8018c16:	eeb0 aa40 	vmov.f32	s20, s0
 8018c1a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8018c1c:	9307      	str	r3, [sp, #28]
 8018c1e:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 8018c22:	9112      	str	r1, [sp, #72]	; 0x48
 8018c24:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c26:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018c2a:	9015      	str	r0, [sp, #84]	; 0x54
 8018c2c:	6868      	ldr	r0, [r5, #4]
 8018c2e:	9214      	str	r2, [sp, #80]	; 0x50
 8018c30:	fb00 1303 	mla	r3, r0, r3, r1
 8018c34:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8018c36:	6829      	ldr	r1, [r5, #0]
 8018c38:	6855      	ldr	r5, [r2, #4]
 8018c3a:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8018c3e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018c42:	930a      	str	r3, [sp, #40]	; 0x28
 8018c44:	6813      	ldr	r3, [r2, #0]
 8018c46:	9311      	str	r3, [sp, #68]	; 0x44
 8018c48:	eef0 9a60 	vmov.f32	s19, s1
 8018c4c:	eeb0 9a41 	vmov.f32	s18, s2
 8018c50:	eeb0 8a62 	vmov.f32	s16, s5
 8018c54:	eef0 8a43 	vmov.f32	s17, s6
 8018c58:	eef0 ba44 	vmov.f32	s23, s8
 8018c5c:	eeb0 ba64 	vmov.f32	s22, s9
 8018c60:	eef0 aa45 	vmov.f32	s21, s10
 8018c64:	3504      	adds	r5, #4
 8018c66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	dc03      	bgt.n	8018c74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8018c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	f340 834d 	ble.w	801930e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8018c74:	9b07      	ldr	r3, [sp, #28]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	f340 819c 	ble.w	8018fb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3a8>
 8018c7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018c7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018c80:	1412      	asrs	r2, r2, #16
 8018c82:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018c86:	d42d      	bmi.n	8018ce4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 8018c88:	1c51      	adds	r1, r2, #1
 8018c8a:	428c      	cmp	r4, r1
 8018c8c:	dd2d      	ble.n	8018cea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	db2b      	blt.n	8018cea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018c92:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018c94:	1c59      	adds	r1, r3, #1
 8018c96:	4288      	cmp	r0, r1
 8018c98:	dd27      	ble.n	8018cea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 8018c9a:	9b07      	ldr	r3, [sp, #28]
 8018c9c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018c9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8018ca0:	3b01      	subs	r3, #1
 8018ca2:	fb02 1203 	mla	r2, r2, r3, r1
 8018ca6:	1412      	asrs	r2, r2, #16
 8018ca8:	d429      	bmi.n	8018cfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018caa:	3201      	adds	r2, #1
 8018cac:	4294      	cmp	r4, r2
 8018cae:	dd26      	ble.n	8018cfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018cb0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018cb2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8018cb4:	fb02 1303 	mla	r3, r2, r3, r1
 8018cb8:	141b      	asrs	r3, r3, #16
 8018cba:	d420      	bmi.n	8018cfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018cbe:	3301      	adds	r3, #1
 8018cc0:	429a      	cmp	r2, r3
 8018cc2:	dd1c      	ble.n	8018cfe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8018cc4:	9b07      	ldr	r3, [sp, #28]
 8018cc6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8018cca:	9310      	str	r3, [sp, #64]	; 0x40
 8018ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	f300 81da 	bgt.w	8019088 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 8018cd4:	9b07      	ldr	r3, [sp, #28]
 8018cd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018cd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018cdc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8018ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8018ce2:	e169      	b.n	8018fb8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 8018ce4:	1c51      	adds	r1, r2, #1
 8018ce6:	f040 8156 	bne.w	8018f96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8018cea:	42a2      	cmp	r2, r4
 8018cec:	f280 8153 	bge.w	8018f96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8018cf0:	1c5a      	adds	r2, r3, #1
 8018cf2:	f2c0 8150 	blt.w	8018f96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8018cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018cf8:	4293      	cmp	r3, r2
 8018cfa:	f280 814c 	bge.w	8018f96 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x38a>
 8018cfe:	9b07      	ldr	r3, [sp, #28]
 8018d00:	9313      	str	r3, [sp, #76]	; 0x4c
 8018d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d04:	9310      	str	r3, [sp, #64]	; 0x40
 8018d06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	dde3      	ble.n	8018cd4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 8018d0c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018d0e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018d10:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018d14:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8018d16:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8018d1a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018d1c:	1412      	asrs	r2, r2, #16
 8018d1e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018d22:	f100 8198 	bmi.w	8019056 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44a>
 8018d26:	1c56      	adds	r6, r2, #1
 8018d28:	42b4      	cmp	r4, r6
 8018d2a:	f340 8196 	ble.w	801905a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	f2c0 8193 	blt.w	801905a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8018d34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8018d36:	1c5e      	adds	r6, r3, #1
 8018d38:	42b7      	cmp	r7, r6
 8018d3a:	f340 818e 	ble.w	801905a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 8018d3e:	fb03 2304 	mla	r3, r3, r4, r2
 8018d42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018d44:	18d6      	adds	r6, r2, r3
 8018d46:	5cd3      	ldrb	r3, [r2, r3]
 8018d48:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8018d4c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018d50:	2900      	cmp	r1, #0
 8018d52:	f000 8170 	beq.w	8019036 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42a>
 8018d56:	7872      	ldrb	r2, [r6, #1]
 8018d58:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018d5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8018d5e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8018d62:	2800      	cmp	r0, #0
 8018d64:	f000 8171 	beq.w	801904a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43e>
 8018d68:	1932      	adds	r2, r6, r4
 8018d6a:	5d36      	ldrb	r6, [r6, r4]
 8018d6c:	7852      	ldrb	r2, [r2, #1]
 8018d6e:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8018d72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8018d76:	9608      	str	r6, [sp, #32]
 8018d78:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8018d7c:	920c      	str	r2, [sp, #48]	; 0x30
 8018d7e:	0e16      	lsrs	r6, r2, #24
 8018d80:	b289      	uxth	r1, r1
 8018d82:	b280      	uxth	r0, r0
 8018d84:	fb01 fb00 	mul.w	fp, r1, r0
 8018d88:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8018d8c:	0109      	lsls	r1, r1, #4
 8018d8e:	eba1 090b 	sub.w	r9, r1, fp
 8018d92:	b280      	uxth	r0, r0
 8018d94:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8018d98:	fa1f f989 	uxth.w	r9, r9
 8018d9c:	1a12      	subs	r2, r2, r0
 8018d9e:	b292      	uxth	r2, r2
 8018da0:	fb09 f108 	mul.w	r1, r9, r8
 8018da4:	fb02 110c 	mla	r1, r2, ip, r1
 8018da8:	fb00 110a 	mla	r1, r0, sl, r1
 8018dac:	fb0b 1106 	mla	r1, fp, r6, r1
 8018db0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8018db4:	2900      	cmp	r1, #0
 8018db6:	f000 80df 	beq.w	8018f78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8018dba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8018dbe:	d01b      	beq.n	8018df8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ec>
 8018dc0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018dc4:	fb0c fe0e 	mul.w	lr, ip, lr
 8018dc8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018dcc:	fb0c fc03 	mul.w	ip, ip, r3
 8018dd0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8018dd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018dd8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8018ddc:	4473      	add	r3, lr
 8018dde:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 8018de2:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 8018de6:	0a1b      	lsrs	r3, r3, #8
 8018de8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018dec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018df0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8018df4:	ea43 030e 	orr.w	r3, r3, lr
 8018df8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8018dfc:	d01e      	beq.n	8018e3c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 8018dfe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018e00:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8018e04:	fb08 fc0c 	mul.w	ip, r8, ip
 8018e08:	f407 4e7f 	and.w	lr, r7, #65280	; 0xff00
 8018e0c:	fb08 f80e 	mul.w	r8, r8, lr
 8018e10:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8018e14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e18:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8018e1c:	44e6      	add	lr, ip
 8018e1e:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 8018e22:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 8018e26:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018e2a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8018e2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e32:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018e36:	ea4e 0708 	orr.w	r7, lr, r8
 8018e3a:	970b      	str	r7, [sp, #44]	; 0x2c
 8018e3c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8018e40:	d01e      	beq.n	8018e80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 8018e42:	9f08      	ldr	r7, [sp, #32]
 8018e44:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8018e48:	fb0a f808 	mul.w	r8, sl, r8
 8018e4c:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8018e50:	fb0a fa0c 	mul.w	sl, sl, ip
 8018e54:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8018e58:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e5c:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8018e60:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018e64:	44c6      	add	lr, r8
 8018e66:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018e6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018e6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018e72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e76:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018e7a:	ea4e 070a 	orr.w	r7, lr, sl
 8018e7e:	9708      	str	r7, [sp, #32]
 8018e80:	2eff      	cmp	r6, #255	; 0xff
 8018e82:	d01d      	beq.n	8018ec0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 8018e84:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018e86:	f007 18ff 	and.w	r8, r7, #16711935	; 0xff00ff
 8018e8a:	fb06 f808 	mul.w	r8, r6, r8
 8018e8e:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8018e92:	fb06 f60c 	mul.w	r6, r6, ip
 8018e96:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 8018e9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018e9e:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 8018ea2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8018ea6:	44c6      	add	lr, r8
 8018ea8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8018eac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018eb0:	0a36      	lsrs	r6, r6, #8
 8018eb2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018eb6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018eba:	ea4e 0606 	orr.w	r6, lr, r6
 8018ebe:	960c      	str	r6, [sp, #48]	; 0x30
 8018ec0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018ec2:	9f08      	ldr	r7, [sp, #32]
 8018ec4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018ec8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018ecc:	fb09 f606 	mul.w	r6, r9, r6
 8018ed0:	fb02 660c 	mla	r6, r2, ip, r6
 8018ed4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8018ed8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018eda:	fb00 660c 	mla	r6, r0, ip, r6
 8018ede:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8018ee2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018ee4:	fb0b 660c 	mla	r6, fp, ip, r6
 8018ee8:	f407 4c7f 	and.w	ip, r7, #65280	; 0xff00
 8018eec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018ef0:	fb09 f90c 	mul.w	r9, r9, ip
 8018ef4:	fb02 9303 	mla	r3, r2, r3, r9
 8018ef8:	9a08      	ldr	r2, [sp, #32]
 8018efa:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8018efe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f00:	fb00 330e 	mla	r3, r0, lr, r3
 8018f04:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8018f08:	fb0b 3b00 	mla	fp, fp, r0, r3
 8018f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f0e:	881b      	ldrh	r3, [r3, #0]
 8018f10:	43c9      	mvns	r1, r1
 8018f12:	1218      	asrs	r0, r3, #8
 8018f14:	b2c9      	uxtb	r1, r1
 8018f16:	10da      	asrs	r2, r3, #3
 8018f18:	0a36      	lsrs	r6, r6, #8
 8018f1a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8018f1e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018f22:	00db      	lsls	r3, r3, #3
 8018f24:	4348      	muls	r0, r1
 8018f26:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8018f2a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8018f2e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018f32:	b2db      	uxtb	r3, r3
 8018f34:	434b      	muls	r3, r1
 8018f36:	ea46 060b 	orr.w	r6, r6, fp
 8018f3a:	434a      	muls	r2, r1
 8018f3c:	1c41      	adds	r1, r0, #1
 8018f3e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8018f42:	0c30      	lsrs	r0, r6, #16
 8018f44:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 8018f48:	494e      	ldr	r1, [pc, #312]	; (8019084 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>)
 8018f4a:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 8018f4e:	1c59      	adds	r1, r3, #1
 8018f50:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018f54:	b2f3      	uxtb	r3, r6
 8018f56:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018f5a:	1c51      	adds	r1, r2, #1
 8018f5c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8018f60:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018f64:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 8018f68:	00f6      	lsls	r6, r6, #3
 8018f6a:	ea40 03d3 	orr.w	r3, r0, r3, lsr #3
 8018f6e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018f72:	431e      	orrs	r6, r3
 8018f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f76:	801e      	strh	r6, [r3, #0]
 8018f78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f7a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018f7c:	3302      	adds	r3, #2
 8018f7e:	9310      	str	r3, [sp, #64]	; 0x40
 8018f80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018f82:	4413      	add	r3, r2
 8018f84:	9329      	str	r3, [sp, #164]	; 0xa4
 8018f86:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018f88:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018f8a:	4413      	add	r3, r2
 8018f8c:	932a      	str	r3, [sp, #168]	; 0xa8
 8018f8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018f90:	3b01      	subs	r3, #1
 8018f92:	9313      	str	r3, [sp, #76]	; 0x4c
 8018f94:	e6b7      	b.n	8018d06 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 8018f96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018f98:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8018f9a:	4413      	add	r3, r2
 8018f9c:	9329      	str	r3, [sp, #164]	; 0xa4
 8018f9e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8018fa0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8018fa2:	4413      	add	r3, r2
 8018fa4:	932a      	str	r3, [sp, #168]	; 0xa8
 8018fa6:	9b07      	ldr	r3, [sp, #28]
 8018fa8:	3b01      	subs	r3, #1
 8018faa:	9307      	str	r3, [sp, #28]
 8018fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fae:	3302      	adds	r3, #2
 8018fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8018fb2:	e65f      	b.n	8018c74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 8018fb4:	f47f ae71 	bne.w	8018c9a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x8e>
 8018fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	f340 81a7 	ble.w	801930e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x702>
 8018fc0:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8018fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018fc8:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8018fcc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018fce:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8018fd2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8018fd6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8018fda:	eef0 6a48 	vmov.f32	s13, s16
 8018fde:	ee69 7a27 	vmul.f32	s15, s18, s15
 8018fe2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018fe6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018fea:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8018fee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8018ff2:	eef0 6a68 	vmov.f32	s13, s17
 8018ff6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8018ffa:	ee18 2a10 	vmov	r2, s16
 8018ffe:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019002:	fb92 f3f3 	sdiv	r3, r2, r3
 8019006:	ee18 2a90 	vmov	r2, s17
 801900a:	932b      	str	r3, [sp, #172]	; 0xac
 801900c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801900e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019012:	932c      	str	r3, [sp, #176]	; 0xb0
 8019014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019016:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019018:	3b01      	subs	r3, #1
 801901a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801901e:	9312      	str	r3, [sp, #72]	; 0x48
 8019020:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019022:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8019026:	bf08      	it	eq
 8019028:	4613      	moveq	r3, r2
 801902a:	9307      	str	r3, [sp, #28]
 801902c:	eef0 8a67 	vmov.f32	s17, s15
 8019030:	eeb0 8a47 	vmov.f32	s16, s14
 8019034:	e617      	b.n	8018c66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5a>
 8019036:	b158      	cbz	r0, 8019050 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x444>
 8019038:	5d32      	ldrb	r2, [r6, r4]
 801903a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801903e:	9208      	str	r2, [sp, #32]
 8019040:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 8019044:	26ff      	movs	r6, #255	; 0xff
 8019046:	46b0      	mov	r8, r6
 8019048:	e69a      	b.n	8018d80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 801904a:	26ff      	movs	r6, #255	; 0xff
 801904c:	46b2      	mov	sl, r6
 801904e:	e697      	b.n	8018d80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x174>
 8019050:	26ff      	movs	r6, #255	; 0xff
 8019052:	46b2      	mov	sl, r6
 8019054:	e7f7      	b.n	8019046 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43a>
 8019056:	1c57      	adds	r7, r2, #1
 8019058:	d18e      	bne.n	8018f78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801905a:	4294      	cmp	r4, r2
 801905c:	dd8c      	ble.n	8018f78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801905e:	1c5e      	adds	r6, r3, #1
 8019060:	db8a      	blt.n	8018f78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019062:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8019064:	429e      	cmp	r6, r3
 8019066:	dd87      	ble.n	8018f78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019068:	e9cd 1004 	strd	r1, r0, [sp, #16]
 801906c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019070:	e9cd 4600 	strd	r4, r6, [sp]
 8019074:	462b      	mov	r3, r5
 8019076:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 801907a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801907c:	f7ff fc6c 	bl	8018958 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8019080:	e77a      	b.n	8018f78 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 8019082:	bf00      	nop
 8019084:	fffff800 	.word	0xfffff800
 8019088:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801908a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801908c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019090:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019092:	1409      	asrs	r1, r1, #16
 8019094:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8019098:	141b      	asrs	r3, r3, #16
 801909a:	fb04 1303 	mla	r3, r4, r3, r1
 801909e:	9911      	ldr	r1, [sp, #68]	; 0x44
 80190a0:	18ce      	adds	r6, r1, r3
 80190a2:	5ccb      	ldrb	r3, [r1, r3]
 80190a4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80190a8:	0e1f      	lsrs	r7, r3, #24
 80190aa:	2a00      	cmp	r2, #0
 80190ac:	f000 811f 	beq.w	80192ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 80190b0:	7871      	ldrb	r1, [r6, #1]
 80190b2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80190b6:	910d      	str	r1, [sp, #52]	; 0x34
 80190b8:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 80190bc:	2800      	cmp	r0, #0
 80190be:	f000 8120 	beq.w	8019302 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 80190c2:	1931      	adds	r1, r6, r4
 80190c4:	5d36      	ldrb	r6, [r6, r4]
 80190c6:	7849      	ldrb	r1, [r1, #1]
 80190c8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80190cc:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80190d0:	9609      	str	r6, [sp, #36]	; 0x24
 80190d2:	ea4f 6916 	mov.w	r9, r6, lsr #24
 80190d6:	910e      	str	r1, [sp, #56]	; 0x38
 80190d8:	0e0e      	lsrs	r6, r1, #24
 80190da:	b292      	uxth	r2, r2
 80190dc:	b280      	uxth	r0, r0
 80190de:	fb02 fa00 	mul.w	sl, r2, r0
 80190e2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80190e6:	0112      	lsls	r2, r2, #4
 80190e8:	eba2 080a 	sub.w	r8, r2, sl
 80190ec:	b280      	uxth	r0, r0
 80190ee:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80190f2:	fa1f f888 	uxth.w	r8, r8
 80190f6:	1a09      	subs	r1, r1, r0
 80190f8:	b289      	uxth	r1, r1
 80190fa:	fb08 f20e 	mul.w	r2, r8, lr
 80190fe:	fb01 2207 	mla	r2, r1, r7, r2
 8019102:	fb00 2209 	mla	r2, r0, r9, r2
 8019106:	fb0a 2206 	mla	r2, sl, r6, r2
 801910a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801910e:	9213      	str	r2, [sp, #76]	; 0x4c
 8019110:	2a00      	cmp	r2, #0
 8019112:	f000 80de 	beq.w	80192d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c6>
 8019116:	2fff      	cmp	r7, #255	; 0xff
 8019118:	d01a      	beq.n	8019150 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x544>
 801911a:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801911e:	fb07 fc0c 	mul.w	ip, r7, ip
 8019122:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019126:	435f      	muls	r7, r3
 8019128:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801912c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019130:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019134:	4463      	add	r3, ip
 8019136:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801913a:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801913e:	0a1b      	lsrs	r3, r3, #8
 8019140:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019144:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019148:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801914c:	ea43 030c 	orr.w	r3, r3, ip
 8019150:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019154:	d01f      	beq.n	8019196 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x58a>
 8019156:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8019158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801915a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801915e:	fb0e f707 	mul.w	r7, lr, r7
 8019162:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019166:	fb0e fe0c 	mul.w	lr, lr, ip
 801916a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801916e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019172:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019176:	44bc      	add	ip, r7
 8019178:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801917c:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 8019180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019184:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019188:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801918c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019190:	ea4c 020e 	orr.w	r2, ip, lr
 8019194:	920d      	str	r2, [sp, #52]	; 0x34
 8019196:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801919a:	d01e      	beq.n	80191da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5ce>
 801919c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801919e:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80191a2:	fb09 fe0e 	mul.w	lr, r9, lr
 80191a6:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80191aa:	fb09 f907 	mul.w	r9, r9, r7
 80191ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80191b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80191b6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80191ba:	f509 7780 	add.w	r7, r9, #256	; 0x100
 80191be:	44f4      	add	ip, lr
 80191c0:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80191c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80191c8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80191cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80191d0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80191d4:	ea4c 0209 	orr.w	r2, ip, r9
 80191d8:	9209      	str	r2, [sp, #36]	; 0x24
 80191da:	2eff      	cmp	r6, #255	; 0xff
 80191dc:	d01c      	beq.n	8019218 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60c>
 80191de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80191e0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80191e4:	fb06 fe0e 	mul.w	lr, r6, lr
 80191e8:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 80191ec:	437e      	muls	r6, r7
 80191ee:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80191f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80191f6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80191fa:	f506 7780 	add.w	r7, r6, #256	; 0x100
 80191fe:	44f4      	add	ip, lr
 8019200:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 8019204:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019208:	0a36      	lsrs	r6, r6, #8
 801920a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801920e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019212:	ea4c 0206 	orr.w	r2, ip, r6
 8019216:	920e      	str	r2, [sp, #56]	; 0x38
 8019218:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801921a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801921e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019220:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 8019224:	fb08 f606 	mul.w	r6, r8, r6
 8019228:	fb01 6607 	mla	r6, r1, r7, r6
 801922c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8019230:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019232:	fb00 6607 	mla	r6, r0, r7, r6
 8019236:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 801923a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801923c:	fb0a 6607 	mla	r6, sl, r7, r6
 8019240:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 8019244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019246:	fb08 f807 	mul.w	r8, r8, r7
 801924a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801924e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019254:	fb01 8303 	mla	r3, r1, r3, r8
 8019258:	fb00 330c 	mla	r3, r0, ip, r3
 801925c:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 8019260:	fb0a 3e0e 	mla	lr, sl, lr, r3
 8019264:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019266:	f8bb 3000 	ldrh.w	r3, [fp]
 801926a:	43d2      	mvns	r2, r2
 801926c:	1218      	asrs	r0, r3, #8
 801926e:	b2d2      	uxtb	r2, r2
 8019270:	0a36      	lsrs	r6, r6, #8
 8019272:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019276:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801927a:	4350      	muls	r0, r2
 801927c:	10d9      	asrs	r1, r3, #3
 801927e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8019282:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8019286:	00db      	lsls	r3, r3, #3
 8019288:	ea46 060e 	orr.w	r6, r6, lr
 801928c:	1c47      	adds	r7, r0, #1
 801928e:	b2db      	uxtb	r3, r3
 8019290:	4353      	muls	r3, r2
 8019292:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8019296:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801929a:	0c37      	lsrs	r7, r6, #16
 801929c:	4351      	muls	r1, r2
 801929e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80192a2:	4a1d      	ldr	r2, [pc, #116]	; (8019318 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>)
 80192a4:	1c5f      	adds	r7, r3, #1
 80192a6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80192aa:	b2f7      	uxtb	r7, r6
 80192ac:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 80192b0:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 80192b4:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 80192b8:	1c4b      	adds	r3, r1, #1
 80192ba:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80192be:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80192c2:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 80192c6:	00f6      	lsls	r6, r6, #3
 80192c8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80192cc:	4330      	orrs	r0, r6
 80192ce:	f8ab 0000 	strh.w	r0, [fp]
 80192d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80192d4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80192d6:	4413      	add	r3, r2
 80192d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80192da:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80192dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80192de:	4413      	add	r3, r2
 80192e0:	932a      	str	r3, [sp, #168]	; 0xa8
 80192e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80192e4:	3b01      	subs	r3, #1
 80192e6:	f10b 0b02 	add.w	fp, fp, #2
 80192ea:	9310      	str	r3, [sp, #64]	; 0x40
 80192ec:	e4ee      	b.n	8018ccc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc0>
 80192ee:	b158      	cbz	r0, 8019308 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fc>
 80192f0:	5d31      	ldrb	r1, [r6, r4]
 80192f2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80192f6:	9109      	str	r1, [sp, #36]	; 0x24
 80192f8:	ea4f 6911 	mov.w	r9, r1, lsr #24
 80192fc:	26ff      	movs	r6, #255	; 0xff
 80192fe:	46b6      	mov	lr, r6
 8019300:	e6eb      	b.n	80190da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8019302:	26ff      	movs	r6, #255	; 0xff
 8019304:	46b1      	mov	r9, r6
 8019306:	e6e8      	b.n	80190da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ce>
 8019308:	26ff      	movs	r6, #255	; 0xff
 801930a:	46b1      	mov	r9, r6
 801930c:	e7f7      	b.n	80192fe <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f2>
 801930e:	b017      	add	sp, #92	; 0x5c
 8019310:	ecbd 8b08 	vpop	{d8-d11}
 8019314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019318:	fffff800 	.word	0xfffff800

0801931c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019320:	b087      	sub	sp, #28
 8019322:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8019326:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 801932a:	9105      	str	r1, [sp, #20]
 801932c:	fb00 e604 	mla	r6, r0, r4, lr
 8019330:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8019334:	9102      	str	r1, [sp, #8]
 8019336:	eb02 0146 	add.w	r1, r2, r6, lsl #1
 801933a:	9103      	str	r1, [sp, #12]
 801933c:	9905      	ldr	r1, [sp, #20]
 801933e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8019342:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019346:	8809      	ldrh	r1, [r1, #0]
 8019348:	2800      	cmp	r0, #0
 801934a:	eb03 0a06 	add.w	sl, r3, r6
 801934e:	f2c0 80ca 	blt.w	80194e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8019352:	4287      	cmp	r7, r0
 8019354:	f340 80c7 	ble.w	80194e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ca>
 8019358:	f1be 0f00 	cmp.w	lr, #0
 801935c:	f2c0 80bf 	blt.w	80194de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8019360:	4574      	cmp	r4, lr
 8019362:	f340 80bc 	ble.w	80194de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c2>
 8019366:	f813 c006 	ldrb.w	ip, [r3, r6]
 801936a:	f832 9016 	ldrh.w	r9, [r2, r6, lsl #1]
 801936e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019372:	d01c      	beq.n	80193ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x92>
 8019374:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8019378:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801937c:	4372      	muls	r2, r6
 801937e:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8019382:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8019386:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801938a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 801938e:	fb0c f609 	mul.w	r6, ip, r9
 8019392:	eb03 0902 	add.w	r9, r3, r2
 8019396:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 801939a:	f106 0820 	add.w	r8, r6, #32
 801939e:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80193a2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80193a6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80193aa:	ea49 0908 	orr.w	r9, r9, r8
 80193ae:	fa1f f989 	uxth.w	r9, r9
 80193b2:	f11e 0301 	adds.w	r3, lr, #1
 80193b6:	f100 809b 	bmi.w	80194f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 80193ba:	429c      	cmp	r4, r3
 80193bc:	f340 8098 	ble.w	80194f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 80193c0:	2d00      	cmp	r5, #0
 80193c2:	f000 8095 	beq.w	80194f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d4>
 80193c6:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80193ca:	9b03      	ldr	r3, [sp, #12]
 80193cc:	2eff      	cmp	r6, #255	; 0xff
 80193ce:	885b      	ldrh	r3, [r3, #2]
 80193d0:	d01b      	beq.n	801940a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xee>
 80193d2:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80193d6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 80193da:	fb08 f202 	mul.w	r2, r8, r2
 80193de:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80193e2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80193e6:	fb06 f803 	mul.w	r8, r6, r3
 80193ea:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80193ee:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80193f2:	441a      	add	r2, r3
 80193f4:	f108 0320 	add.w	r3, r8, #32
 80193f8:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 80193fc:	0a1b      	lsrs	r3, r3, #8
 80193fe:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8019402:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019406:	ea4b 0303 	orr.w	r3, fp, r3
 801940a:	b29b      	uxth	r3, r3
 801940c:	9301      	str	r3, [sp, #4]
 801940e:	3001      	adds	r0, #1
 8019410:	d474      	bmi.n	80194fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8019412:	4287      	cmp	r7, r0
 8019414:	dd72      	ble.n	80194fc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8019416:	9a02      	ldr	r2, [sp, #8]
 8019418:	2a00      	cmp	r2, #0
 801941a:	f000 8121 	beq.w	8019660 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>
 801941e:	f1be 0f00 	cmp.w	lr, #0
 8019422:	db68      	blt.n	80194f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8019424:	4574      	cmp	r4, lr
 8019426:	dd66      	ble.n	80194f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1da>
 8019428:	f81a 7004 	ldrb.w	r7, [sl, r4]
 801942c:	9a03      	ldr	r2, [sp, #12]
 801942e:	2fff      	cmp	r7, #255	; 0xff
 8019430:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8019434:	d01c      	beq.n	8019470 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x154>
 8019436:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 801943a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 801943e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019442:	fb07 fb00 	mul.w	fp, r7, r0
 8019446:	fb08 f802 	mul.w	r8, r8, r2
 801944a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801944e:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8019452:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019456:	4490      	add	r8, r2
 8019458:	f10b 0220 	add.w	r2, fp, #32
 801945c:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8019460:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019464:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8019468:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801946c:	ea40 000b 	orr.w	r0, r0, fp
 8019470:	b280      	uxth	r0, r0
 8019472:	f11e 0e01 	adds.w	lr, lr, #1
 8019476:	d446      	bmi.n	8019506 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 8019478:	4574      	cmp	r4, lr
 801947a:	dd44      	ble.n	8019506 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ea>
 801947c:	2d00      	cmp	r5, #0
 801947e:	d045      	beq.n	801950c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f0>
 8019480:	1c62      	adds	r2, r4, #1
 8019482:	9b03      	ldr	r3, [sp, #12]
 8019484:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8019488:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801948c:	2cff      	cmp	r4, #255	; 0xff
 801948e:	d01c      	beq.n	80194ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ae>
 8019490:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8019494:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019498:	fb08 fe0e 	mul.w	lr, r8, lr
 801949c:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 80194a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80194a4:	fb04 f802 	mul.w	r8, r4, r2
 80194a8:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 80194ac:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80194b0:	4472      	add	r2, lr
 80194b2:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 80194b6:	f108 0a20 	add.w	sl, r8, #32
 80194ba:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 80194be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80194c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80194c6:	ea42 020a 	orr.w	r2, r2, sl
 80194ca:	b292      	uxth	r2, r2
 80194cc:	2d0f      	cmp	r5, #15
 80194ce:	d91f      	bls.n	8019510 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1f4>
 80194d0:	4b67      	ldr	r3, [pc, #412]	; (8019670 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x354>)
 80194d2:	4a68      	ldr	r2, [pc, #416]	; (8019674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x358>)
 80194d4:	4868      	ldr	r0, [pc, #416]	; (8019678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x35c>)
 80194d6:	f240 3173 	movw	r1, #883	; 0x373
 80194da:	f004 f9cb 	bl	801d874 <__assert_func>
 80194de:	4689      	mov	r9, r1
 80194e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80194e4:	e765      	b.n	80193b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x96>
 80194e6:	26ff      	movs	r6, #255	; 0xff
 80194e8:	9101      	str	r1, [sp, #4]
 80194ea:	4689      	mov	r9, r1
 80194ec:	46b4      	mov	ip, r6
 80194ee:	e78e      	b.n	801940e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 80194f0:	9101      	str	r1, [sp, #4]
 80194f2:	26ff      	movs	r6, #255	; 0xff
 80194f4:	e78b      	b.n	801940e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xf2>
 80194f6:	4608      	mov	r0, r1
 80194f8:	27ff      	movs	r7, #255	; 0xff
 80194fa:	e7ba      	b.n	8019472 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x156>
 80194fc:	24ff      	movs	r4, #255	; 0xff
 80194fe:	460a      	mov	r2, r1
 8019500:	4608      	mov	r0, r1
 8019502:	4627      	mov	r7, r4
 8019504:	e7e2      	b.n	80194cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8019506:	460a      	mov	r2, r1
 8019508:	24ff      	movs	r4, #255	; 0xff
 801950a:	e7df      	b.n	80194cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 801950c:	460a      	mov	r2, r1
 801950e:	24ff      	movs	r4, #255	; 0xff
 8019510:	9b02      	ldr	r3, [sp, #8]
 8019512:	2b0f      	cmp	r3, #15
 8019514:	d8dc      	bhi.n	80194d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8019516:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801951a:	fa1f f885 	uxth.w	r8, r5
 801951e:	fb08 fa0e 	mul.w	sl, r8, lr
 8019522:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8019526:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801952a:	9303      	str	r3, [sp, #12]
 801952c:	fa1f f38e 	uxth.w	r3, lr
 8019530:	9304      	str	r3, [sp, #16]
 8019532:	ea4f 4809 	mov.w	r8, r9, lsl #16
 8019536:	9b02      	ldr	r3, [sp, #8]
 8019538:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801953c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8019540:	fb15 fe03 	smulbb	lr, r5, r3
 8019544:	ea48 0809 	orr.w	r8, r8, r9
 8019548:	f1c3 0910 	rsb	r9, r3, #16
 801954c:	9b01      	ldr	r3, [sp, #4]
 801954e:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8019552:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8019556:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801955a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801955e:	eba9 0905 	sub.w	r9, r9, r5
 8019562:	ea4b 0303 	orr.w	r3, fp, r3
 8019566:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801956a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801956e:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 8019572:	436b      	muls	r3, r5
 8019574:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019578:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801957c:	ea4b 0202 	orr.w	r2, fp, r2
 8019580:	fb09 3308 	mla	r3, r9, r8, r3
 8019584:	fb0e 3302 	mla	r3, lr, r2, r3
 8019588:	0402      	lsls	r2, r0, #16
 801958a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801958e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8019592:	4310      	orrs	r0, r2
 8019594:	9a02      	ldr	r2, [sp, #8]
 8019596:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801959a:	fb0e 3e00 	mla	lr, lr, r0, r3
 801959e:	9803      	ldr	r0, [sp, #12]
 80195a0:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80195a4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80195a8:	9804      	ldr	r0, [sp, #16]
 80195aa:	1a2d      	subs	r5, r5, r0
 80195ac:	9803      	ldr	r0, [sp, #12]
 80195ae:	eba0 000a 	sub.w	r0, r0, sl
 80195b2:	b280      	uxth	r0, r0
 80195b4:	b2ad      	uxth	r5, r5
 80195b6:	4346      	muls	r6, r0
 80195b8:	9804      	ldr	r0, [sp, #16]
 80195ba:	fb0c 6605 	mla	r6, ip, r5, r6
 80195be:	fb00 6707 	mla	r7, r0, r7, r6
 80195c2:	fb0a 7404 	mla	r4, sl, r4, r7
 80195c6:	b292      	uxth	r2, r2
 80195c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80195cc:	4354      	muls	r4, r2
 80195ce:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80195d2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80195d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80195da:	f104 0a01 	add.w	sl, r4, #1
 80195de:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80195e2:	ea43 0e0e 	orr.w	lr, r3, lr
 80195e6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80195ea:	fa1f f38e 	uxth.w	r3, lr
 80195ee:	1208      	asrs	r0, r1, #8
 80195f0:	ea6f 2414 	mvn.w	r4, r4, lsr #8
 80195f4:	b2e4      	uxtb	r4, r4
 80195f6:	121d      	asrs	r5, r3, #8
 80195f8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80195fc:	fb10 f004 	smulbb	r0, r0, r4
 8019600:	10ce      	asrs	r6, r1, #3
 8019602:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019606:	00c9      	lsls	r1, r1, #3
 8019608:	fb05 0502 	mla	r5, r5, r2, r0
 801960c:	b2c9      	uxtb	r1, r1
 801960e:	10d8      	asrs	r0, r3, #3
 8019610:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019614:	00db      	lsls	r3, r3, #3
 8019616:	fb16 f604 	smulbb	r6, r6, r4
 801961a:	b2db      	uxtb	r3, r3
 801961c:	fb11 f404 	smulbb	r4, r1, r4
 8019620:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8019624:	fb00 6002 	mla	r0, r0, r2, r6
 8019628:	fb03 4202 	mla	r2, r3, r2, r4
 801962c:	b2ad      	uxth	r5, r5
 801962e:	b292      	uxth	r2, r2
 8019630:	1c6b      	adds	r3, r5, #1
 8019632:	1c51      	adds	r1, r2, #1
 8019634:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8019638:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801963c:	b280      	uxth	r0, r0
 801963e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019642:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8019646:	4313      	orrs	r3, r2
 8019648:	1c42      	adds	r2, r0, #1
 801964a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801964e:	0940      	lsrs	r0, r0, #5
 8019650:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019654:	9a05      	ldr	r2, [sp, #20]
 8019656:	4303      	orrs	r3, r0
 8019658:	8013      	strh	r3, [r2, #0]
 801965a:	b007      	add	sp, #28
 801965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019660:	2d0f      	cmp	r5, #15
 8019662:	f63f af35 	bhi.w	80194d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b4>
 8019666:	24ff      	movs	r4, #255	; 0xff
 8019668:	460a      	mov	r2, r1
 801966a:	4608      	mov	r0, r1
 801966c:	4627      	mov	r7, r4
 801966e:	e752      	b.n	8019516 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1fa>
 8019670:	080214bb 	.word	0x080214bb
 8019674:	08021a19 	.word	0x08021a19
 8019678:	08021543 	.word	0x08021543

0801967c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801967c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019680:	ed2d 8b08 	vpush	{d8-d11}
 8019684:	b099      	sub	sp, #100	; 0x64
 8019686:	eeb0 aa40 	vmov.f32	s20, s0
 801968a:	9308      	str	r3, [sp, #32]
 801968c:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 8019690:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
 8019692:	930b      	str	r3, [sp, #44]	; 0x2c
 8019694:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 8019698:	9314      	str	r3, [sp, #80]	; 0x50
 801969a:	9113      	str	r1, [sp, #76]	; 0x4c
 801969c:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 80196a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80196a2:	6870      	ldr	r0, [r6, #4]
 80196a4:	9216      	str	r2, [sp, #88]	; 0x58
 80196a6:	fb00 1303 	mla	r3, r0, r3, r1
 80196aa:	6831      	ldr	r1, [r6, #0]
 80196ac:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 80196ae:	f9bd 50c8 	ldrsh.w	r5, [sp, #200]	; 0xc8
 80196b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80196b6:	9309      	str	r3, [sp, #36]	; 0x24
 80196b8:	6813      	ldr	r3, [r2, #0]
 80196ba:	930c      	str	r3, [sp, #48]	; 0x30
 80196bc:	6853      	ldr	r3, [r2, #4]
 80196be:	930d      	str	r3, [sp, #52]	; 0x34
 80196c0:	006b      	lsls	r3, r5, #1
 80196c2:	9312      	str	r3, [sp, #72]	; 0x48
 80196c4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80196c8:	930a      	str	r3, [sp, #40]	; 0x28
 80196ca:	eef0 9a60 	vmov.f32	s19, s1
 80196ce:	eeb0 9a41 	vmov.f32	s18, s2
 80196d2:	eeb0 8a62 	vmov.f32	s16, s5
 80196d6:	eef0 8a43 	vmov.f32	s17, s6
 80196da:	eef0 ba44 	vmov.f32	s23, s8
 80196de:	eeb0 ba64 	vmov.f32	s22, s9
 80196e2:	eef0 aa45 	vmov.f32	s21, s10
 80196e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	dc03      	bgt.n	80196f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 80196ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	f340 83bf 	ble.w	8019e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 80196f4:	9b08      	ldr	r3, [sp, #32]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	f340 81cb 	ble.w	8019a92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x416>
 80196fc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80196fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019700:	1412      	asrs	r2, r2, #16
 8019702:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019706:	d42f      	bmi.n	8019768 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xec>
 8019708:	1c51      	adds	r1, r2, #1
 801970a:	428d      	cmp	r5, r1
 801970c:	dd2f      	ble.n	801976e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801970e:	2b00      	cmp	r3, #0
 8019710:	db2d      	blt.n	801976e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 8019712:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019714:	1c59      	adds	r1, r3, #1
 8019716:	4288      	cmp	r0, r1
 8019718:	dd29      	ble.n	801976e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf2>
 801971a:	9b08      	ldr	r3, [sp, #32]
 801971c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801971e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019720:	3b01      	subs	r3, #1
 8019722:	fb02 1203 	mla	r2, r2, r3, r1
 8019726:	1412      	asrs	r2, r2, #16
 8019728:	d42b      	bmi.n	8019782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801972a:	3201      	adds	r2, #1
 801972c:	4295      	cmp	r5, r2
 801972e:	dd28      	ble.n	8019782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8019730:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8019732:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8019734:	fb02 1303 	mla	r3, r2, r3, r1
 8019738:	141b      	asrs	r3, r3, #16
 801973a:	d422      	bmi.n	8019782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 801973c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801973e:	3301      	adds	r3, #1
 8019740:	429a      	cmp	r2, r3
 8019742:	dd1e      	ble.n	8019782 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x106>
 8019744:	9b08      	ldr	r3, [sp, #32]
 8019746:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801974a:	9315      	str	r3, [sp, #84]	; 0x54
 801974c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8019750:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019752:	2b00      	cmp	r3, #0
 8019754:	f300 8217 	bgt.w	8019b86 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x50a>
 8019758:	9b08      	ldr	r3, [sp, #32]
 801975a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801975e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019760:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8019764:	9309      	str	r3, [sp, #36]	; 0x24
 8019766:	e196      	b.n	8019a96 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 8019768:	1c57      	adds	r7, r2, #1
 801976a:	f040 8183 	bne.w	8019a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801976e:	42aa      	cmp	r2, r5
 8019770:	f280 8180 	bge.w	8019a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8019774:	1c5e      	adds	r6, r3, #1
 8019776:	f2c0 817d 	blt.w	8019a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 801977a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801977c:	4293      	cmp	r3, r2
 801977e:	f280 8179 	bge.w	8019a74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f8>
 8019782:	9b08      	ldr	r3, [sp, #32]
 8019784:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019786:	9315      	str	r3, [sp, #84]	; 0x54
 8019788:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801978c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801978e:	2b00      	cmp	r3, #0
 8019790:	dde2      	ble.n	8019758 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 8019792:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019794:	1419      	asrs	r1, r3, #16
 8019796:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019798:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801979c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801979e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80197a2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80197a4:	141b      	asrs	r3, r3, #16
 80197a6:	f100 81d3 	bmi.w	8019b50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d4>
 80197aa:	1c58      	adds	r0, r3, #1
 80197ac:	4285      	cmp	r5, r0
 80197ae:	f340 81d1 	ble.w	8019b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 80197b2:	2900      	cmp	r1, #0
 80197b4:	f2c0 81ce 	blt.w	8019b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 80197b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80197ba:	1c48      	adds	r0, r1, #1
 80197bc:	4284      	cmp	r4, r0
 80197be:	f340 81c9 	ble.w	8019b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d8>
 80197c2:	fb01 3105 	mla	r1, r1, r5, r3
 80197c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80197c8:	fa1f fe82 	uxth.w	lr, r2
 80197cc:	eb03 0a01 	add.w	sl, r3, r1
 80197d0:	ea4f 100e 	mov.w	r0, lr, lsl #4
 80197d4:	f813 9001 	ldrb.w	r9, [r3, r1]
 80197d8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80197dc:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80197e0:	b29b      	uxth	r3, r3
 80197e2:	f1bc 0f00 	cmp.w	ip, #0
 80197e6:	f000 8195 	beq.w	8019b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x498>
 80197ea:	f81a 4005 	ldrb.w	r4, [sl, r5]
 80197ee:	940e      	str	r4, [sp, #56]	; 0x38
 80197f0:	eb0a 0b05 	add.w	fp, sl, r5
 80197f4:	fa1f fa8c 	uxth.w	sl, ip
 80197f8:	fb0a fe0e 	mul.w	lr, sl, lr
 80197fc:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8019800:	fa1f fa8a 	uxth.w	sl, sl
 8019804:	eba0 000e 	sub.w	r0, r0, lr
 8019808:	eba3 030a 	sub.w	r3, r3, sl
 801980c:	b280      	uxth	r0, r0
 801980e:	fb08 f000 	mul.w	r0, r8, r0
 8019812:	b29b      	uxth	r3, r3
 8019814:	fb09 0303 	mla	r3, r9, r3, r0
 8019818:	980e      	ldr	r0, [sp, #56]	; 0x38
 801981a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801981e:	940f      	str	r4, [sp, #60]	; 0x3c
 8019820:	fb0a 3300 	mla	r3, sl, r0, r3
 8019824:	fb0e 3304 	mla	r3, lr, r4, r3
 8019828:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801982c:	2b00      	cmp	r3, #0
 801982e:	f000 8114 	beq.w	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019832:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019834:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019836:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801983a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801983e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8019842:	f000 816c 	beq.w	8019b1e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a2>
 8019846:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801984a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801984e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019852:	fb09 f101 	mul.w	r1, r9, r1
 8019856:	fb0a fe0e 	mul.w	lr, sl, lr
 801985a:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801985e:	f101 0b20 	add.w	fp, r1, #32
 8019862:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8019866:	44ce      	add	lr, r9
 8019868:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801986c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019870:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8019874:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019878:	ea4e 0909 	orr.w	r9, lr, r9
 801987c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019880:	8841      	ldrh	r1, [r0, #2]
 8019882:	d019      	beq.n	80198b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 8019884:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8019888:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801988c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019890:	fb0a fe0e 	mul.w	lr, sl, lr
 8019894:	fb08 f801 	mul.w	r8, r8, r1
 8019898:	f108 0b20 	add.w	fp, r8, #32
 801989c:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 80198a0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80198a4:	448e      	add	lr, r1
 80198a6:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 80198aa:	0a09      	lsrs	r1, r1, #8
 80198ac:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 80198b0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80198b4:	ea4a 0101 	orr.w	r1, sl, r1
 80198b8:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80198bc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80198c0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80198c4:	ea4e 0909 	orr.w	r9, lr, r9
 80198c8:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 80198cc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80198d0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80198d4:	ea4e 0e01 	orr.w	lr, lr, r1
 80198d8:	f1bc 0f00 	cmp.w	ip, #0
 80198dc:	f000 8121 	beq.w	8019b22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 80198e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80198e2:	eb00 0801 	add.w	r8, r0, r1
 80198e6:	5a41      	ldrh	r1, [r0, r1]
 80198e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80198ea:	28ff      	cmp	r0, #255	; 0xff
 80198ec:	d019      	beq.n	8019922 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a6>
 80198ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80198f0:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 80198f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80198f8:	fb04 fb01 	mul.w	fp, r4, r1
 80198fc:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019900:	fb0a fa00 	mul.w	sl, sl, r0
 8019904:	f10b 0020 	add.w	r0, fp, #32
 8019908:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801990c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8019910:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019914:	4451      	add	r1, sl
 8019916:	0a00      	lsrs	r0, r0, #8
 8019918:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801991c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019920:	4301      	orrs	r1, r0
 8019922:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019924:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8019928:	2cff      	cmp	r4, #255	; 0xff
 801992a:	d01a      	beq.n	8019962 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2e6>
 801992c:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 8019930:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019934:	fb04 fb00 	mul.w	fp, r4, r0
 8019938:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801993c:	fb0a fa08 	mul.w	sl, sl, r8
 8019940:	f10b 0820 	add.w	r8, fp, #32
 8019944:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 8019948:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801994c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019950:	4450      	add	r0, sl
 8019952:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019956:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801995a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801995e:	ea40 0008 	orr.w	r0, r0, r8
 8019962:	fb1c f802 	smulbb	r8, ip, r2
 8019966:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801996a:	f1cc 0a10 	rsb	sl, ip, #16
 801996e:	ebaa 0a02 	sub.w	sl, sl, r2
 8019972:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8019976:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801997a:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801997e:	fb0e f202 	mul.w	r2, lr, r2
 8019982:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019986:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801998a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801998e:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8019992:	fb09 220a 	mla	r2, r9, sl, r2
 8019996:	ea4b 0101 	orr.w	r1, fp, r1
 801999a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801999e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80199a2:	fb0c 2201 	mla	r2, ip, r1, r2
 80199a6:	ea4e 0000 	orr.w	r0, lr, r0
 80199aa:	fb08 2800 	mla	r8, r8, r0, r2
 80199ae:	ea4f 5258 	mov.w	r2, r8, lsr #21
 80199b2:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80199b6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80199ba:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80199be:	ea42 0808 	orr.w	r8, r2, r8
 80199c2:	fa1f f288 	uxth.w	r2, r8
 80199c6:	2bff      	cmp	r3, #255	; 0xff
 80199c8:	d103      	bne.n	80199d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x356>
 80199ca:	9914      	ldr	r1, [sp, #80]	; 0x50
 80199cc:	29ff      	cmp	r1, #255	; 0xff
 80199ce:	f000 80bd 	beq.w	8019b4c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4d0>
 80199d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80199d4:	f8b7 c000 	ldrh.w	ip, [r7]
 80199d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80199da:	434b      	muls	r3, r1
 80199dc:	f103 0e01 	add.w	lr, r3, #1
 80199e0:	eb0e 2323 	add.w	r3, lr, r3, asr #8
 80199e4:	ea6f 2e23 	mvn.w	lr, r3, asr #8
 80199e8:	ea4f 202c 	mov.w	r0, ip, asr #8
 80199ec:	fa5f fe8e 	uxtb.w	lr, lr
 80199f0:	1213      	asrs	r3, r2, #8
 80199f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80199f6:	fb10 f00e 	smulbb	r0, r0, lr
 80199fa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80199fe:	fb03 0301 	mla	r3, r3, r1, r0
 8019a02:	b298      	uxth	r0, r3
 8019a04:	ea4f 03ec 	mov.w	r3, ip, asr #3
 8019a08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019a0c:	10d1      	asrs	r1, r2, #3
 8019a0e:	fa5f fc8c 	uxtb.w	ip, ip
 8019a12:	00d2      	lsls	r2, r2, #3
 8019a14:	fb1c fc0e 	smulbb	ip, ip, lr
 8019a18:	b2d2      	uxtb	r2, r2
 8019a1a:	fb02 c204 	mla	r2, r2, r4, ip
 8019a1e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8019a22:	fb13 f30e 	smulbb	r3, r3, lr
 8019a26:	b292      	uxth	r2, r2
 8019a28:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019a2c:	fb01 3104 	mla	r1, r1, r4, r3
 8019a30:	f102 0c01 	add.w	ip, r2, #1
 8019a34:	1c43      	adds	r3, r0, #1
 8019a36:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8019a3a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8019a3e:	b289      	uxth	r1, r1
 8019a40:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019a44:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8019a48:	4313      	orrs	r3, r2
 8019a4a:	1c4a      	adds	r2, r1, #1
 8019a4c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8019a50:	0949      	lsrs	r1, r1, #5
 8019a52:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019a56:	430b      	orrs	r3, r1
 8019a58:	803b      	strh	r3, [r7, #0]
 8019a5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019a5c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019a5e:	4413      	add	r3, r2
 8019a60:	932b      	str	r3, [sp, #172]	; 0xac
 8019a62:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019a64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019a66:	441a      	add	r2, r3
 8019a68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019a6a:	922c      	str	r2, [sp, #176]	; 0xb0
 8019a6c:	3b01      	subs	r3, #1
 8019a6e:	3702      	adds	r7, #2
 8019a70:	9315      	str	r3, [sp, #84]	; 0x54
 8019a72:	e68b      	b.n	801978c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 8019a74:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019a76:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019a78:	4413      	add	r3, r2
 8019a7a:	932b      	str	r3, [sp, #172]	; 0xac
 8019a7c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019a7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019a80:	441a      	add	r2, r3
 8019a82:	9b08      	ldr	r3, [sp, #32]
 8019a84:	922c      	str	r2, [sp, #176]	; 0xb0
 8019a86:	3b01      	subs	r3, #1
 8019a88:	9308      	str	r3, [sp, #32]
 8019a8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a8c:	3302      	adds	r3, #2
 8019a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8019a90:	e630      	b.n	80196f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 8019a92:	f47f ae42 	bne.w	801971a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9e>
 8019a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	f340 81ea 	ble.w	8019e72 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f6>
 8019a9e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019aa6:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019aaa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019aac:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8019ab0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019ab4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8019ab8:	eef0 6a48 	vmov.f32	s13, s16
 8019abc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8019ac0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ac4:	ee37 8a48 	vsub.f32	s16, s14, s16
 8019ac8:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 8019acc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8019ad0:	eef0 6a68 	vmov.f32	s13, s17
 8019ad4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8019ad8:	ee18 2a10 	vmov	r2, s16
 8019adc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8019ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ae4:	ee18 2a90 	vmov	r2, s17
 8019ae8:	932d      	str	r3, [sp, #180]	; 0xb4
 8019aea:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019aec:	fb92 f3f3 	sdiv	r3, r2, r3
 8019af0:	932e      	str	r3, [sp, #184]	; 0xb8
 8019af2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019af4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8019af6:	3b01      	subs	r3, #1
 8019af8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019afc:	9313      	str	r3, [sp, #76]	; 0x4c
 8019afe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019b00:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8019b04:	bf08      	it	eq
 8019b06:	4613      	moveq	r3, r2
 8019b08:	9308      	str	r3, [sp, #32]
 8019b0a:	eef0 8a67 	vmov.f32	s17, s15
 8019b0e:	eeb0 8a47 	vmov.f32	s16, s14
 8019b12:	e5e8      	b.n	80196e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 8019b14:	fb08 f000 	mul.w	r0, r8, r0
 8019b18:	fb09 0303 	mla	r3, r9, r3, r0
 8019b1c:	e684      	b.n	8019828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ac>
 8019b1e:	4689      	mov	r9, r1
 8019b20:	e6ac      	b.n	801987c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x200>
 8019b22:	f1c2 0010 	rsb	r0, r2, #16
 8019b26:	fb0e f202 	mul.w	r2, lr, r2
 8019b2a:	fb09 2900 	mla	r9, r9, r0, r2
 8019b2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019b32:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8019b36:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8019b3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019b3e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019b42:	ea42 0909 	orr.w	r9, r2, r9
 8019b46:	fa1f f289 	uxth.w	r2, r9
 8019b4a:	e73c      	b.n	80199c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 8019b4c:	803a      	strh	r2, [r7, #0]
 8019b4e:	e784      	b.n	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019b50:	1c5c      	adds	r4, r3, #1
 8019b52:	d182      	bne.n	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019b54:	429d      	cmp	r5, r3
 8019b56:	dd80      	ble.n	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019b58:	1c48      	adds	r0, r1, #1
 8019b5a:	f6ff af7e 	blt.w	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019b5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019b60:	4288      	cmp	r0, r1
 8019b62:	f77f af7a 	ble.w	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019b66:	9814      	ldr	r0, [sp, #80]	; 0x50
 8019b68:	9302      	str	r3, [sp, #8]
 8019b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b6c:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8019b70:	e9cd c005 	strd	ip, r0, [sp, #20]
 8019b74:	e9cd 5300 	strd	r5, r3, [sp]
 8019b78:	4639      	mov	r1, r7
 8019b7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8019b7e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019b80:	f7ff fbcc 	bl	801931c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8019b84:	e769      	b.n	8019a5a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3de>
 8019b86:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b88:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019b8c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019b8e:	141f      	asrs	r7, r3, #16
 8019b90:	f3c3 3003 	ubfx	r0, r3, #12, #4
 8019b94:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019b96:	141b      	asrs	r3, r3, #16
 8019b98:	fb05 3707 	mla	r7, r5, r7, r3
 8019b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b9e:	fa1f fc82 	uxth.w	ip, r2
 8019ba2:	eb03 0a07 	add.w	sl, r3, r7
 8019ba6:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8019baa:	f813 9007 	ldrb.w	r9, [r3, r7]
 8019bae:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019bb2:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8019bb6:	b29b      	uxth	r3, r3
 8019bb8:	2800      	cmp	r0, #0
 8019bba:	f000 813f 	beq.w	8019e3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7c0>
 8019bbe:	f81a 4005 	ldrb.w	r4, [sl, r5]
 8019bc2:	9410      	str	r4, [sp, #64]	; 0x40
 8019bc4:	eb0a 0b05 	add.w	fp, sl, r5
 8019bc8:	fa1f fa80 	uxth.w	sl, r0
 8019bcc:	fb0a fc0c 	mul.w	ip, sl, ip
 8019bd0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8019bd4:	fa1f fa8a 	uxth.w	sl, sl
 8019bd8:	eba1 010c 	sub.w	r1, r1, ip
 8019bdc:	eba3 030a 	sub.w	r3, r3, sl
 8019be0:	b289      	uxth	r1, r1
 8019be2:	fb08 f101 	mul.w	r1, r8, r1
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	fb09 1303 	mla	r3, r9, r3, r1
 8019bec:	9910      	ldr	r1, [sp, #64]	; 0x40
 8019bee:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8019bf2:	9411      	str	r4, [sp, #68]	; 0x44
 8019bf4:	fb0a 3301 	mla	r3, sl, r1, r3
 8019bf8:	fb0c 3304 	mla	r3, ip, r4, r3
 8019bfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	f000 810d 	beq.w	8019e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8019c06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019c08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019c0a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019c0e:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8019c12:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8019c16:	f000 8116 	beq.w	8019e46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ca>
 8019c1a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019c1e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8019c22:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019c26:	fb09 f707 	mul.w	r7, r9, r7
 8019c2a:	fb0a fc0c 	mul.w	ip, sl, ip
 8019c2e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8019c32:	f107 0b20 	add.w	fp, r7, #32
 8019c36:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019c3a:	44cc      	add	ip, r9
 8019c3c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8019c40:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019c44:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019c48:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019c4c:	ea4c 0909 	orr.w	r9, ip, r9
 8019c50:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8019c54:	884f      	ldrh	r7, [r1, #2]
 8019c56:	d019      	beq.n	8019c8c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x610>
 8019c58:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8019c5c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8019c60:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019c64:	fb08 f807 	mul.w	r8, r8, r7
 8019c68:	fb0a fc0c 	mul.w	ip, sl, ip
 8019c6c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8019c70:	f108 0b20 	add.w	fp, r8, #32
 8019c74:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8019c78:	44bc      	add	ip, r7
 8019c7a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8019c7e:	0a3f      	lsrs	r7, r7, #8
 8019c80:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8019c84:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019c88:	ea4c 0707 	orr.w	r7, ip, r7
 8019c8c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8019c90:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8019c94:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8019c98:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8019c9c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8019ca0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8019ca4:	ea4c 0909 	orr.w	r9, ip, r9
 8019ca8:	ea4a 0707 	orr.w	r7, sl, r7
 8019cac:	2800      	cmp	r0, #0
 8019cae:	f000 80cc 	beq.w	8019e4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ce>
 8019cb2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019cb4:	eb01 0c04 	add.w	ip, r1, r4
 8019cb8:	f831 8004 	ldrh.w	r8, [r1, r4]
 8019cbc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8019cbe:	29ff      	cmp	r1, #255	; 0xff
 8019cc0:	d01a      	beq.n	8019cf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x67c>
 8019cc2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019cc4:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 8019cc8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019ccc:	fb04 fb08 	mul.w	fp, r4, r8
 8019cd0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019cd4:	fb0a fa01 	mul.w	sl, sl, r1
 8019cd8:	f10b 0120 	add.w	r1, fp, #32
 8019cdc:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 8019ce0:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 8019ce4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019ce8:	44d0      	add	r8, sl
 8019cea:	0a09      	lsrs	r1, r1, #8
 8019cec:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 8019cf0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019cf4:	ea48 0801 	orr.w	r8, r8, r1
 8019cf8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019cfa:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 8019cfe:	2cff      	cmp	r4, #255	; 0xff
 8019d00:	d01a      	beq.n	8019d38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6bc>
 8019d02:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 8019d06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019d0a:	fb04 fb01 	mul.w	fp, r4, r1
 8019d0e:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8019d12:	fb0a fa0c 	mul.w	sl, sl, ip
 8019d16:	f10b 0c20 	add.w	ip, fp, #32
 8019d1a:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 8019d1e:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 8019d22:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8019d26:	4451      	add	r1, sl
 8019d28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d2c:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8019d30:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8019d34:	ea41 010c 	orr.w	r1, r1, ip
 8019d38:	fb10 fc02 	smulbb	ip, r0, r2
 8019d3c:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8019d40:	f1c0 0a10 	rsb	sl, r0, #16
 8019d44:	ebaa 0a02 	sub.w	sl, sl, r2
 8019d48:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 8019d4c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8019d50:	437a      	muls	r2, r7
 8019d52:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 8019d56:	040f      	lsls	r7, r1, #16
 8019d58:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8019d5c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8019d60:	fb09 220a 	mla	r2, r9, sl, r2
 8019d64:	ea4b 0808 	orr.w	r8, fp, r8
 8019d68:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 8019d6c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8019d70:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8019d74:	fb00 2208 	mla	r2, r0, r8, r2
 8019d78:	4339      	orrs	r1, r7
 8019d7a:	fb0c 2201 	mla	r2, ip, r1, r2
 8019d7e:	ea4f 5952 	mov.w	r9, r2, lsr #21
 8019d82:	0952      	lsrs	r2, r2, #5
 8019d84:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019d88:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019d8c:	ea49 0202 	orr.w	r2, r9, r2
 8019d90:	2bff      	cmp	r3, #255	; 0xff
 8019d92:	b292      	uxth	r2, r2
 8019d94:	d102      	bne.n	8019d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x720>
 8019d96:	9914      	ldr	r1, [sp, #80]	; 0x50
 8019d98:	29ff      	cmp	r1, #255	; 0xff
 8019d9a:	d067      	beq.n	8019e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7f0>
 8019d9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019d9e:	f8be 0000 	ldrh.w	r0, [lr]
 8019da2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019da4:	434b      	muls	r3, r1
 8019da6:	1c59      	adds	r1, r3, #1
 8019da8:	eb01 2323 	add.w	r3, r1, r3, asr #8
 8019dac:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8019db0:	1201      	asrs	r1, r0, #8
 8019db2:	b2db      	uxtb	r3, r3
 8019db4:	1217      	asrs	r7, r2, #8
 8019db6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8019dba:	fb11 f103 	smulbb	r1, r1, r3
 8019dbe:	ea4f 0ce0 	mov.w	ip, r0, asr #3
 8019dc2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019dc6:	00c0      	lsls	r0, r0, #3
 8019dc8:	fb07 1704 	mla	r7, r7, r4, r1
 8019dcc:	b2c0      	uxtb	r0, r0
 8019dce:	10d1      	asrs	r1, r2, #3
 8019dd0:	00d2      	lsls	r2, r2, #3
 8019dd2:	fb10 f003 	smulbb	r0, r0, r3
 8019dd6:	b2d2      	uxtb	r2, r2
 8019dd8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019ddc:	fb02 0204 	mla	r2, r2, r4, r0
 8019de0:	fb1c fc03 	smulbb	ip, ip, r3
 8019de4:	b2bf      	uxth	r7, r7
 8019de6:	b292      	uxth	r2, r2
 8019de8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8019dec:	fb01 c104 	mla	r1, r1, r4, ip
 8019df0:	1c7b      	adds	r3, r7, #1
 8019df2:	f102 0c01 	add.w	ip, r2, #1
 8019df6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8019dfa:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 8019dfe:	b289      	uxth	r1, r1
 8019e00:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019e04:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019e08:	ea47 070c 	orr.w	r7, r7, ip
 8019e0c:	f101 0c01 	add.w	ip, r1, #1
 8019e10:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8019e14:	0949      	lsrs	r1, r1, #5
 8019e16:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8019e1a:	430f      	orrs	r7, r1
 8019e1c:	f8ae 7000 	strh.w	r7, [lr]
 8019e20:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019e22:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019e24:	4413      	add	r3, r2
 8019e26:	932b      	str	r3, [sp, #172]	; 0xac
 8019e28:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019e2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019e2c:	441a      	add	r2, r3
 8019e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019e30:	922c      	str	r2, [sp, #176]	; 0xb0
 8019e32:	3b01      	subs	r3, #1
 8019e34:	f10e 0e02 	add.w	lr, lr, #2
 8019e38:	9315      	str	r3, [sp, #84]	; 0x54
 8019e3a:	e489      	b.n	8019750 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 8019e3c:	fb08 f101 	mul.w	r1, r8, r1
 8019e40:	fb09 1303 	mla	r3, r9, r3, r1
 8019e44:	e6da      	b.n	8019bfc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x580>
 8019e46:	46b9      	mov	r9, r7
 8019e48:	e702      	b.n	8019c50 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d4>
 8019e4a:	f1c2 0110 	rsb	r1, r2, #16
 8019e4e:	437a      	muls	r2, r7
 8019e50:	fb09 2901 	mla	r9, r9, r1, r2
 8019e54:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019e58:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8019e5c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8019e60:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019e64:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8019e68:	4302      	orrs	r2, r0
 8019e6a:	e791      	b.n	8019d90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 8019e6c:	f8ae 2000 	strh.w	r2, [lr]
 8019e70:	e7d6      	b.n	8019e20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7a4>
 8019e72:	b019      	add	sp, #100	; 0x64
 8019e74:	ecbd 8b08 	vpop	{d8-d11}
 8019e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8019e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e80:	b087      	sub	sp, #28
 8019e82:	e9dd e012 	ldrd	lr, r0, [sp, #72]	; 0x48
 8019e86:	f9bd 4040 	ldrsh.w	r4, [sp, #64]	; 0x40
 8019e8a:	9105      	str	r1, [sp, #20]
 8019e8c:	fb00 e604 	mla	r6, r0, r4, lr
 8019e90:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8019e94:	9102      	str	r1, [sp, #8]
 8019e96:	eb03 0146 	add.w	r1, r3, r6, lsl #1
 8019e9a:	9103      	str	r1, [sp, #12]
 8019e9c:	9905      	ldr	r1, [sp, #20]
 8019e9e:	f9bd 7044 	ldrsh.w	r7, [sp, #68]	; 0x44
 8019ea2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019ea6:	8809      	ldrh	r1, [r1, #0]
 8019ea8:	2800      	cmp	r0, #0
 8019eaa:	eb02 0a06 	add.w	sl, r2, r6
 8019eae:	f2c0 80ca 	blt.w	801a046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8019eb2:	4287      	cmp	r7, r0
 8019eb4:	f340 80c7 	ble.w	801a046 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ca>
 8019eb8:	f1be 0f00 	cmp.w	lr, #0
 8019ebc:	f2c0 80bf 	blt.w	801a03e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8019ec0:	4574      	cmp	r4, lr
 8019ec2:	f340 80bc 	ble.w	801a03e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c2>
 8019ec6:	f812 c006 	ldrb.w	ip, [r2, r6]
 8019eca:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 8019ece:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019ed2:	d01c      	beq.n	8019f0e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x92>
 8019ed4:	f429 66fc 	bic.w	r6, r9, #2016	; 0x7e0
 8019ed8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8019edc:	4372      	muls	r2, r6
 8019ede:	f64f 081f 	movw	r8, #63519	; 0xf81f
 8019ee2:	ea08 1352 	and.w	r3, r8, r2, lsr #5
 8019ee6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019eea:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019eee:	fb0c f609 	mul.w	r6, ip, r9
 8019ef2:	eb03 0902 	add.w	r9, r3, r2
 8019ef6:	ea08 1959 	and.w	r9, r8, r9, lsr #5
 8019efa:	f106 0820 	add.w	r8, r6, #32
 8019efe:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8019f02:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019f06:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019f0a:	ea49 0908 	orr.w	r9, r9, r8
 8019f0e:	fa1f f989 	uxth.w	r9, r9
 8019f12:	f11e 0301 	adds.w	r3, lr, #1
 8019f16:	f100 809b 	bmi.w	801a050 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8019f1a:	429c      	cmp	r4, r3
 8019f1c:	f340 8098 	ble.w	801a050 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8019f20:	2d00      	cmp	r5, #0
 8019f22:	f000 8095 	beq.w	801a050 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d4>
 8019f26:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8019f2a:	9b03      	ldr	r3, [sp, #12]
 8019f2c:	2eff      	cmp	r6, #255	; 0xff
 8019f2e:	885b      	ldrh	r3, [r3, #2]
 8019f30:	d01b      	beq.n	8019f6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xee>
 8019f32:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8019f36:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8019f3a:	fb08 f202 	mul.w	r2, r8, r2
 8019f3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f42:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8019f46:	fb06 f803 	mul.w	r8, r6, r3
 8019f4a:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 8019f4e:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8019f52:	441a      	add	r2, r3
 8019f54:	f108 0320 	add.w	r3, r8, #32
 8019f58:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 8019f5c:	0a1b      	lsrs	r3, r3, #8
 8019f5e:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 8019f62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019f66:	ea4b 0303 	orr.w	r3, fp, r3
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	9301      	str	r3, [sp, #4]
 8019f6e:	3001      	adds	r0, #1
 8019f70:	d474      	bmi.n	801a05c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8019f72:	4287      	cmp	r7, r0
 8019f74:	dd72      	ble.n	801a05c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 8019f76:	9a02      	ldr	r2, [sp, #8]
 8019f78:	2a00      	cmp	r2, #0
 8019f7a:	f000 8111 	beq.w	801a1a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>
 8019f7e:	f1be 0f00 	cmp.w	lr, #0
 8019f82:	db68      	blt.n	801a056 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 8019f84:	4574      	cmp	r4, lr
 8019f86:	dd66      	ble.n	801a056 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1da>
 8019f88:	f81a 7004 	ldrb.w	r7, [sl, r4]
 8019f8c:	9a03      	ldr	r2, [sp, #12]
 8019f8e:	2fff      	cmp	r7, #255	; 0xff
 8019f90:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8019f94:	d01c      	beq.n	8019fd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x154>
 8019f96:	f420 62fc 	bic.w	r2, r0, #2016	; 0x7e0
 8019f9a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8019f9e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019fa2:	fb07 fb00 	mul.w	fp, r7, r0
 8019fa6:	fb08 f802 	mul.w	r8, r8, r2
 8019faa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8019fae:	ea00 1258 	and.w	r2, r0, r8, lsr #5
 8019fb2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8019fb6:	4490      	add	r8, r2
 8019fb8:	f10b 0220 	add.w	r2, fp, #32
 8019fbc:	eb02 2b1b 	add.w	fp, r2, fp, lsr #8
 8019fc0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8019fc4:	ea00 1058 	and.w	r0, r0, r8, lsr #5
 8019fc8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019fcc:	ea40 000b 	orr.w	r0, r0, fp
 8019fd0:	b280      	uxth	r0, r0
 8019fd2:	f11e 0e01 	adds.w	lr, lr, #1
 8019fd6:	d446      	bmi.n	801a066 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8019fd8:	4574      	cmp	r4, lr
 8019fda:	dd44      	ble.n	801a066 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ea>
 8019fdc:	2d00      	cmp	r5, #0
 8019fde:	d045      	beq.n	801a06c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f0>
 8019fe0:	1c62      	adds	r2, r4, #1
 8019fe2:	9b03      	ldr	r3, [sp, #12]
 8019fe4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8019fe8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8019fec:	2cff      	cmp	r4, #255	; 0xff
 8019fee:	d01c      	beq.n	801a02a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ae>
 8019ff0:	f422 6efc 	bic.w	lr, r2, #2016	; 0x7e0
 8019ff4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8019ff8:	fb08 fe0e 	mul.w	lr, r8, lr
 8019ffc:	f64f 0a1f 	movw	sl, #63519	; 0xf81f
 801a000:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a004:	fb04 f802 	mul.w	r8, r4, r2
 801a008:	ea0a 125e 	and.w	r2, sl, lr, lsr #5
 801a00c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a010:	4472      	add	r2, lr
 801a012:	ea0a 1252 	and.w	r2, sl, r2, lsr #5
 801a016:	f108 0a20 	add.w	sl, r8, #32
 801a01a:	eb0a 2a18 	add.w	sl, sl, r8, lsr #8
 801a01e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a022:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a026:	ea42 020a 	orr.w	r2, r2, sl
 801a02a:	b292      	uxth	r2, r2
 801a02c:	2d0f      	cmp	r5, #15
 801a02e:	d91f      	bls.n	801a070 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1f4>
 801a030:	4b5f      	ldr	r3, [pc, #380]	; (801a1b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x334>)
 801a032:	4a60      	ldr	r2, [pc, #384]	; (801a1b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x338>)
 801a034:	4860      	ldr	r0, [pc, #384]	; (801a1b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x33c>)
 801a036:	f240 3173 	movw	r1, #883	; 0x373
 801a03a:	f003 fc1b 	bl	801d874 <__assert_func>
 801a03e:	4689      	mov	r9, r1
 801a040:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801a044:	e765      	b.n	8019f12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x96>
 801a046:	26ff      	movs	r6, #255	; 0xff
 801a048:	9101      	str	r1, [sp, #4]
 801a04a:	4689      	mov	r9, r1
 801a04c:	46b4      	mov	ip, r6
 801a04e:	e78e      	b.n	8019f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801a050:	9101      	str	r1, [sp, #4]
 801a052:	26ff      	movs	r6, #255	; 0xff
 801a054:	e78b      	b.n	8019f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf2>
 801a056:	4608      	mov	r0, r1
 801a058:	27ff      	movs	r7, #255	; 0xff
 801a05a:	e7ba      	b.n	8019fd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x156>
 801a05c:	24ff      	movs	r4, #255	; 0xff
 801a05e:	460a      	mov	r2, r1
 801a060:	4608      	mov	r0, r1
 801a062:	4627      	mov	r7, r4
 801a064:	e7e2      	b.n	801a02c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801a066:	460a      	mov	r2, r1
 801a068:	24ff      	movs	r4, #255	; 0xff
 801a06a:	e7df      	b.n	801a02c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 801a06c:	460a      	mov	r2, r1
 801a06e:	24ff      	movs	r4, #255	; 0xff
 801a070:	9b02      	ldr	r3, [sp, #8]
 801a072:	2b0f      	cmp	r3, #15
 801a074:	d8dc      	bhi.n	801a030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801a076:	f8bd e008 	ldrh.w	lr, [sp, #8]
 801a07a:	fa1f f885 	uxth.w	r8, r5
 801a07e:	fb08 fa0e 	mul.w	sl, r8, lr
 801a082:	ea4f 1308 	mov.w	r3, r8, lsl #4
 801a086:	ebca 1e0e 	rsb	lr, sl, lr, lsl #4
 801a08a:	9303      	str	r3, [sp, #12]
 801a08c:	fa1f f38e 	uxth.w	r3, lr
 801a090:	9304      	str	r3, [sp, #16]
 801a092:	ea4f 4809 	mov.w	r8, r9, lsl #16
 801a096:	9b02      	ldr	r3, [sp, #8]
 801a098:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a09c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801a0a0:	fb15 fe03 	smulbb	lr, r5, r3
 801a0a4:	ea48 0809 	orr.w	r8, r8, r9
 801a0a8:	f1c3 0910 	rsb	r9, r3, #16
 801a0ac:	9b01      	ldr	r3, [sp, #4]
 801a0ae:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801a0b2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801a0b6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a0ba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801a0be:	eba9 0905 	sub.w	r9, r9, r5
 801a0c2:	ea4b 0303 	orr.w	r3, fp, r3
 801a0c6:	ebce 0545 	rsb	r5, lr, r5, lsl #1
 801a0ca:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801a0ce:	eb0e 0949 	add.w	r9, lr, r9, lsl #1
 801a0d2:	436b      	muls	r3, r5
 801a0d4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a0d8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a0dc:	ea4b 0202 	orr.w	r2, fp, r2
 801a0e0:	fb09 3308 	mla	r3, r9, r8, r3
 801a0e4:	fb0e 3302 	mla	r3, lr, r2, r3
 801a0e8:	0402      	lsls	r2, r0, #16
 801a0ea:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801a0ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a0f2:	4310      	orrs	r0, r2
 801a0f4:	9a02      	ldr	r2, [sp, #8]
 801a0f6:	ebce 0e42 	rsb	lr, lr, r2, lsl #1
 801a0fa:	9a03      	ldr	r2, [sp, #12]
 801a0fc:	fb0e 3e00 	mla	lr, lr, r0, r3
 801a100:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801a104:	9a04      	ldr	r2, [sp, #16]
 801a106:	1a80      	subs	r0, r0, r2
 801a108:	9a03      	ldr	r2, [sp, #12]
 801a10a:	eba2 020a 	sub.w	r2, r2, sl
 801a10e:	b292      	uxth	r2, r2
 801a110:	b280      	uxth	r0, r0
 801a112:	4356      	muls	r6, r2
 801a114:	9a04      	ldr	r2, [sp, #16]
 801a116:	fb0c 6600 	mla	r6, ip, r0, r6
 801a11a:	fb02 6707 	mla	r7, r2, r7, r6
 801a11e:	fb0a 7404 	mla	r4, sl, r4, r7
 801a122:	ea4f 535e 	mov.w	r3, lr, lsr #21
 801a126:	1208      	asrs	r0, r1, #8
 801a128:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801a12c:	ea6f 2424 	mvn.w	r4, r4, asr #8
 801a130:	b2e4      	uxtb	r4, r4
 801a132:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a136:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801a13a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a13e:	4360      	muls	r0, r4
 801a140:	ea43 0e0e 	orr.w	lr, r3, lr
 801a144:	fa1f f38e 	uxth.w	r3, lr
 801a148:	1c42      	adds	r2, r0, #1
 801a14a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a14e:	1218      	asrs	r0, r3, #8
 801a150:	10cd      	asrs	r5, r1, #3
 801a152:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a156:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a15a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801a15e:	4a17      	ldr	r2, [pc, #92]	; (801a1bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x340>)
 801a160:	4365      	muls	r5, r4
 801a162:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801a166:	1c6a      	adds	r2, r5, #1
 801a168:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 801a16c:	00c9      	lsls	r1, r1, #3
 801a16e:	10da      	asrs	r2, r3, #3
 801a170:	b2c9      	uxtb	r1, r1
 801a172:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801a176:	434c      	muls	r4, r1
 801a178:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 801a17c:	1c61      	adds	r1, r4, #1
 801a17e:	00d2      	lsls	r2, r2, #3
 801a180:	00db      	lsls	r3, r3, #3
 801a182:	eb01 2414 	add.w	r4, r1, r4, lsr #8
 801a186:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a18a:	b2db      	uxtb	r3, r3
 801a18c:	4302      	orrs	r2, r0
 801a18e:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801a192:	ea42 03d3 	orr.w	r3, r2, r3, lsr #3
 801a196:	9a05      	ldr	r2, [sp, #20]
 801a198:	8013      	strh	r3, [r2, #0]
 801a19a:	b007      	add	sp, #28
 801a19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1a0:	2d0f      	cmp	r5, #15
 801a1a2:	f63f af45 	bhi.w	801a030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b4>
 801a1a6:	24ff      	movs	r4, #255	; 0xff
 801a1a8:	460a      	mov	r2, r1
 801a1aa:	4608      	mov	r0, r1
 801a1ac:	4627      	mov	r7, r4
 801a1ae:	e762      	b.n	801a076 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1fa>
 801a1b0:	080214bb 	.word	0x080214bb
 801a1b4:	08021a19 	.word	0x08021a19
 801a1b8:	08021543 	.word	0x08021543
 801a1bc:	fffff800 	.word	0xfffff800

0801a1c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1c4:	ed2d 8b08 	vpush	{d8-d11}
 801a1c8:	b095      	sub	sp, #84	; 0x54
 801a1ca:	eeb0 aa40 	vmov.f32	s20, s0
 801a1ce:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 801a1d0:	9306      	str	r3, [sp, #24]
 801a1d2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801a1d6:	9110      	str	r1, [sp, #64]	; 0x40
 801a1d8:	9308      	str	r3, [sp, #32]
 801a1da:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801a1de:	9013      	str	r0, [sp, #76]	; 0x4c
 801a1e0:	6870      	ldr	r0, [r6, #4]
 801a1e2:	9212      	str	r2, [sp, #72]	; 0x48
 801a1e4:	fb00 1303 	mla	r3, r0, r3, r1
 801a1e8:	6831      	ldr	r1, [r6, #0]
 801a1ea:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 801a1ec:	f9bd 50b8 	ldrsh.w	r5, [sp, #184]	; 0xb8
 801a1f0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a1f4:	9307      	str	r3, [sp, #28]
 801a1f6:	6813      	ldr	r3, [r2, #0]
 801a1f8:	9309      	str	r3, [sp, #36]	; 0x24
 801a1fa:	6853      	ldr	r3, [r2, #4]
 801a1fc:	930a      	str	r3, [sp, #40]	; 0x28
 801a1fe:	006b      	lsls	r3, r5, #1
 801a200:	eef0 9a60 	vmov.f32	s19, s1
 801a204:	eeb0 9a41 	vmov.f32	s18, s2
 801a208:	eeb0 8a62 	vmov.f32	s16, s5
 801a20c:	eef0 8a43 	vmov.f32	s17, s6
 801a210:	eef0 ba44 	vmov.f32	s23, s8
 801a214:	eeb0 ba64 	vmov.f32	s22, s9
 801a218:	eef0 aa45 	vmov.f32	s21, s10
 801a21c:	930f      	str	r3, [sp, #60]	; 0x3c
 801a21e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a220:	2b00      	cmp	r3, #0
 801a222:	dc03      	bgt.n	801a22c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a224:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a226:	2b00      	cmp	r3, #0
 801a228:	f340 83a3 	ble.w	801a972 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801a22c:	9b06      	ldr	r3, [sp, #24]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	f340 81bc 	ble.w	801a5ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ec>
 801a234:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a236:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a238:	1412      	asrs	r2, r2, #16
 801a23a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a23e:	d42f      	bmi.n	801a2a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801a240:	1c51      	adds	r1, r2, #1
 801a242:	428d      	cmp	r5, r1
 801a244:	dd2f      	ble.n	801a2a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801a246:	2b00      	cmp	r3, #0
 801a248:	db2d      	blt.n	801a2a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801a24a:	9808      	ldr	r0, [sp, #32]
 801a24c:	1c59      	adds	r1, r3, #1
 801a24e:	4288      	cmp	r0, r1
 801a250:	dd29      	ble.n	801a2a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801a252:	9b06      	ldr	r3, [sp, #24]
 801a254:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a256:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801a258:	3b01      	subs	r3, #1
 801a25a:	fb02 1203 	mla	r2, r2, r3, r1
 801a25e:	1412      	asrs	r2, r2, #16
 801a260:	d42b      	bmi.n	801a2ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a262:	3201      	adds	r2, #1
 801a264:	4295      	cmp	r5, r2
 801a266:	dd28      	ble.n	801a2ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a268:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a26a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a26c:	fb02 1303 	mla	r3, r2, r3, r1
 801a270:	141b      	asrs	r3, r3, #16
 801a272:	d422      	bmi.n	801a2ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a274:	9a08      	ldr	r2, [sp, #32]
 801a276:	3301      	adds	r3, #1
 801a278:	429a      	cmp	r2, r3
 801a27a:	dd1e      	ble.n	801a2ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801a27c:	9b06      	ldr	r3, [sp, #24]
 801a27e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801a282:	9311      	str	r3, [sp, #68]	; 0x44
 801a284:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801a288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	f300 8208 	bgt.w	801a6a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e0>
 801a290:	9b06      	ldr	r3, [sp, #24]
 801a292:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a296:	9b07      	ldr	r3, [sp, #28]
 801a298:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801a29c:	9307      	str	r3, [sp, #28]
 801a29e:	e187      	b.n	801a5b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3f0>
 801a2a0:	1c57      	adds	r7, r2, #1
 801a2a2:	f040 8174 	bne.w	801a58e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801a2a6:	42aa      	cmp	r2, r5
 801a2a8:	f280 8171 	bge.w	801a58e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801a2ac:	1c5e      	adds	r6, r3, #1
 801a2ae:	f2c0 816e 	blt.w	801a58e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801a2b2:	9a08      	ldr	r2, [sp, #32]
 801a2b4:	4293      	cmp	r3, r2
 801a2b6:	f280 816a 	bge.w	801a58e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ce>
 801a2ba:	9b06      	ldr	r3, [sp, #24]
 801a2bc:	9f07      	ldr	r7, [sp, #28]
 801a2be:	9311      	str	r3, [sp, #68]	; 0x44
 801a2c0:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801a2c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	dde2      	ble.n	801a290 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801a2ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a2cc:	1419      	asrs	r1, r3, #16
 801a2ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a2d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a2d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a2d6:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801a2da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a2dc:	141b      	asrs	r3, r3, #16
 801a2de:	f100 81c4 	bmi.w	801a66a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4aa>
 801a2e2:	1c58      	adds	r0, r3, #1
 801a2e4:	4285      	cmp	r5, r0
 801a2e6:	f340 81c2 	ble.w	801a66e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801a2ea:	2900      	cmp	r1, #0
 801a2ec:	f2c0 81bf 	blt.w	801a66e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801a2f0:	9c08      	ldr	r4, [sp, #32]
 801a2f2:	1c48      	adds	r0, r1, #1
 801a2f4:	4284      	cmp	r4, r0
 801a2f6:	f340 81ba 	ble.w	801a66e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4ae>
 801a2fa:	fb01 3105 	mla	r1, r1, r5, r3
 801a2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a300:	fa1f fe82 	uxth.w	lr, r2
 801a304:	eb03 0a01 	add.w	sl, r3, r1
 801a308:	ea4f 100e 	mov.w	r0, lr, lsl #4
 801a30c:	f813 9001 	ldrb.w	r9, [r3, r1]
 801a310:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a314:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801a318:	b29b      	uxth	r3, r3
 801a31a:	f1bc 0f00 	cmp.w	ip, #0
 801a31e:	f000 8186 	beq.w	801a62e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46e>
 801a322:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801a326:	940b      	str	r4, [sp, #44]	; 0x2c
 801a328:	eb0a 0b05 	add.w	fp, sl, r5
 801a32c:	fa1f fa8c 	uxth.w	sl, ip
 801a330:	fb0a fe0e 	mul.w	lr, sl, lr
 801a334:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801a338:	fa1f fa8a 	uxth.w	sl, sl
 801a33c:	eba0 000e 	sub.w	r0, r0, lr
 801a340:	eba3 030a 	sub.w	r3, r3, sl
 801a344:	b280      	uxth	r0, r0
 801a346:	fb08 f000 	mul.w	r0, r8, r0
 801a34a:	b29b      	uxth	r3, r3
 801a34c:	fb09 0303 	mla	r3, r9, r3, r0
 801a350:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a352:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a356:	940c      	str	r4, [sp, #48]	; 0x30
 801a358:	fb0a 3300 	mla	r3, sl, r0, r3
 801a35c:	fb0e 3304 	mla	r3, lr, r4, r3
 801a360:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a364:	2b00      	cmp	r3, #0
 801a366:	f000 8105 	beq.w	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a36a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a36c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a36e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a372:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801a376:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 801a37a:	f000 815d 	beq.w	801a638 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x478>
 801a37e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801a382:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801a386:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a38a:	fb09 f101 	mul.w	r1, r9, r1
 801a38e:	fb0a fe0e 	mul.w	lr, sl, lr
 801a392:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801a396:	f101 0b20 	add.w	fp, r1, #32
 801a39a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a39e:	44ce      	add	lr, r9
 801a3a0:	eb0b 2911 	add.w	r9, fp, r1, lsr #8
 801a3a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a3a8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801a3ac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a3b0:	ea4e 0909 	orr.w	r9, lr, r9
 801a3b4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a3b8:	8841      	ldrh	r1, [r0, #2]
 801a3ba:	d019      	beq.n	801a3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x230>
 801a3bc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801a3c0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801a3c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a3c8:	fb0a fe0e 	mul.w	lr, sl, lr
 801a3cc:	fb08 f801 	mul.w	r8, r8, r1
 801a3d0:	f108 0b20 	add.w	fp, r8, #32
 801a3d4:	ea06 115e 	and.w	r1, r6, lr, lsr #5
 801a3d8:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801a3dc:	448e      	add	lr, r1
 801a3de:	eb0b 2118 	add.w	r1, fp, r8, lsr #8
 801a3e2:	0a09      	lsrs	r1, r1, #8
 801a3e4:	ea06 1a5e 	and.w	sl, r6, lr, lsr #5
 801a3e8:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a3ec:	ea4a 0101 	orr.w	r1, sl, r1
 801a3f0:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801a3f4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a3f8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a3fc:	ea4e 0909 	orr.w	r9, lr, r9
 801a400:	ea4f 4e01 	mov.w	lr, r1, lsl #16
 801a404:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a408:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a40c:	ea4e 0e01 	orr.w	lr, lr, r1
 801a410:	f1bc 0f00 	cmp.w	ip, #0
 801a414:	f000 8112 	beq.w	801a63c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x47c>
 801a418:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a41a:	eb00 0801 	add.w	r8, r0, r1
 801a41e:	5a41      	ldrh	r1, [r0, r1]
 801a420:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a422:	28ff      	cmp	r0, #255	; 0xff
 801a424:	d019      	beq.n	801a45a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29a>
 801a426:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a428:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801a42c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a430:	fb04 fb01 	mul.w	fp, r4, r1
 801a434:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a438:	fb0a fa00 	mul.w	sl, sl, r0
 801a43c:	f10b 0020 	add.w	r0, fp, #32
 801a440:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801a444:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a448:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a44c:	4451      	add	r1, sl
 801a44e:	0a00      	lsrs	r0, r0, #8
 801a450:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801a454:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a458:	4301      	orrs	r1, r0
 801a45a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a45c:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801a460:	2cff      	cmp	r4, #255	; 0xff
 801a462:	d01a      	beq.n	801a49a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2da>
 801a464:	f420 68fc 	bic.w	r8, r0, #2016	; 0x7e0
 801a468:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a46c:	fb04 fb00 	mul.w	fp, r4, r0
 801a470:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a474:	fb0a fa08 	mul.w	sl, sl, r8
 801a478:	f10b 0820 	add.w	r8, fp, #32
 801a47c:	ea06 105a 	and.w	r0, r6, sl, lsr #5
 801a480:	eb08 281b 	add.w	r8, r8, fp, lsr #8
 801a484:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a488:	4450      	add	r0, sl
 801a48a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a48e:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801a492:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a496:	ea40 0008 	orr.w	r0, r0, r8
 801a49a:	fb1c f802 	smulbb	r8, ip, r2
 801a49e:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801a4a2:	f1cc 0a10 	rsb	sl, ip, #16
 801a4a6:	ebaa 0a02 	sub.w	sl, sl, r2
 801a4aa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801a4ae:	ebc8 0242 	rsb	r2, r8, r2, lsl #1
 801a4b2:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 801a4b6:	fb0e f202 	mul.w	r2, lr, r2
 801a4ba:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a4be:	ea4f 4e00 	mov.w	lr, r0, lsl #16
 801a4c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a4c6:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 801a4ca:	fb09 220a 	mla	r2, r9, sl, r2
 801a4ce:	ea4b 0101 	orr.w	r1, fp, r1
 801a4d2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801a4d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801a4da:	fb0c 2201 	mla	r2, ip, r1, r2
 801a4de:	ea4e 0000 	orr.w	r0, lr, r0
 801a4e2:	fb08 2800 	mla	r8, r8, r0, r2
 801a4e6:	ea4f 5258 	mov.w	r2, r8, lsr #21
 801a4ea:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801a4ee:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a4f2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801a4f6:	ea42 0808 	orr.w	r8, r2, r8
 801a4fa:	fa1f f288 	uxth.w	r2, r8
 801a4fe:	2bff      	cmp	r3, #255	; 0xff
 801a500:	f000 80b1 	beq.w	801a666 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4a6>
 801a504:	f8b7 8000 	ldrh.w	r8, [r7]
 801a508:	43db      	mvns	r3, r3
 801a50a:	ea4f 2028 	mov.w	r0, r8, asr #8
 801a50e:	fa5f fe83 	uxtb.w	lr, r3
 801a512:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a516:	fb00 f00e 	mul.w	r0, r0, lr
 801a51a:	1c41      	adds	r1, r0, #1
 801a51c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801a520:	1210      	asrs	r0, r2, #8
 801a522:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801a526:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a52a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801a52e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801a532:	495a      	ldr	r1, [pc, #360]	; (801a69c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4dc>)
 801a534:	fb0c fc0e 	mul.w	ip, ip, lr
 801a538:	ea01 2000 	and.w	r0, r1, r0, lsl #8
 801a53c:	f10c 0101 	add.w	r1, ip, #1
 801a540:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 801a544:	10d1      	asrs	r1, r2, #3
 801a546:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a54a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a54e:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801a552:	b2db      	uxtb	r3, r3
 801a554:	00c9      	lsls	r1, r1, #3
 801a556:	fb03 f30e 	mul.w	r3, r3, lr
 801a55a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a55e:	4301      	orrs	r1, r0
 801a560:	1c58      	adds	r0, r3, #1
 801a562:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a566:	00d3      	lsls	r3, r2, #3
 801a568:	b2db      	uxtb	r3, r3
 801a56a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a56e:	ea41 03d3 	orr.w	r3, r1, r3, lsr #3
 801a572:	803b      	strh	r3, [r7, #0]
 801a574:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a576:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a578:	4413      	add	r3, r2
 801a57a:	9327      	str	r3, [sp, #156]	; 0x9c
 801a57c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a57e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a580:	441a      	add	r2, r3
 801a582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a584:	9228      	str	r2, [sp, #160]	; 0xa0
 801a586:	3b01      	subs	r3, #1
 801a588:	3702      	adds	r7, #2
 801a58a:	9311      	str	r3, [sp, #68]	; 0x44
 801a58c:	e69a      	b.n	801a2c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801a58e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a590:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a592:	4413      	add	r3, r2
 801a594:	9327      	str	r3, [sp, #156]	; 0x9c
 801a596:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a598:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a59a:	441a      	add	r2, r3
 801a59c:	9b06      	ldr	r3, [sp, #24]
 801a59e:	9228      	str	r2, [sp, #160]	; 0xa0
 801a5a0:	3b01      	subs	r3, #1
 801a5a2:	9306      	str	r3, [sp, #24]
 801a5a4:	9b07      	ldr	r3, [sp, #28]
 801a5a6:	3302      	adds	r3, #2
 801a5a8:	9307      	str	r3, [sp, #28]
 801a5aa:	e63f      	b.n	801a22c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6c>
 801a5ac:	f47f ae51 	bne.w	801a252 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801a5b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	f340 81dd 	ble.w	801a972 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7b2>
 801a5b8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a5bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a5c0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a5c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a5c6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a5ca:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a5ce:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a5d2:	eef0 6a48 	vmov.f32	s13, s16
 801a5d6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a5da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5de:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a5e2:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 801a5e6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a5ea:	eef0 6a68 	vmov.f32	s13, s17
 801a5ee:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a5f2:	ee18 2a10 	vmov	r2, s16
 801a5f6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5fe:	ee18 2a90 	vmov	r2, s17
 801a602:	9329      	str	r3, [sp, #164]	; 0xa4
 801a604:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a606:	fb92 f3f3 	sdiv	r3, r2, r3
 801a60a:	932a      	str	r3, [sp, #168]	; 0xa8
 801a60c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a60e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a610:	3b01      	subs	r3, #1
 801a612:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a616:	9310      	str	r3, [sp, #64]	; 0x40
 801a618:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a61a:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 801a61e:	bf08      	it	eq
 801a620:	4613      	moveq	r3, r2
 801a622:	9306      	str	r3, [sp, #24]
 801a624:	eef0 8a67 	vmov.f32	s17, s15
 801a628:	eeb0 8a47 	vmov.f32	s16, s14
 801a62c:	e5f7      	b.n	801a21e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e>
 801a62e:	fb08 f000 	mul.w	r0, r8, r0
 801a632:	fb09 0303 	mla	r3, r9, r3, r0
 801a636:	e693      	b.n	801a360 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1a0>
 801a638:	4689      	mov	r9, r1
 801a63a:	e6bb      	b.n	801a3b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f4>
 801a63c:	f1c2 0010 	rsb	r0, r2, #16
 801a640:	fb0e f202 	mul.w	r2, lr, r2
 801a644:	fb09 2900 	mla	r9, r9, r0, r2
 801a648:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a64c:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801a650:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a654:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a658:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a65c:	ea42 0909 	orr.w	r9, r2, r9
 801a660:	fa1f f289 	uxth.w	r2, r9
 801a664:	e74b      	b.n	801a4fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801a666:	803a      	strh	r2, [r7, #0]
 801a668:	e784      	b.n	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a66a:	1c5c      	adds	r4, r3, #1
 801a66c:	d182      	bne.n	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a66e:	429d      	cmp	r5, r3
 801a670:	dd80      	ble.n	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a672:	1c48      	adds	r0, r1, #1
 801a674:	f6ff af7e 	blt.w	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a678:	9808      	ldr	r0, [sp, #32]
 801a67a:	4288      	cmp	r0, r1
 801a67c:	f77f af7a 	ble.w	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a680:	e9cd 3102 	strd	r3, r1, [sp, #8]
 801a684:	e9cd 2c04 	strd	r2, ip, [sp, #16]
 801a688:	e9cd 5000 	strd	r5, r0, [sp]
 801a68c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801a690:	4639      	mov	r1, r7
 801a692:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801a694:	f7ff fbf2 	bl	8019e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801a698:	e76c      	b.n	801a574 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b4>
 801a69a:	bf00      	nop
 801a69c:	fffff800 	.word	0xfffff800
 801a6a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a6a2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a6a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a6a8:	141f      	asrs	r7, r3, #16
 801a6aa:	f3c3 3003 	ubfx	r0, r3, #12, #4
 801a6ae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a6b0:	141b      	asrs	r3, r3, #16
 801a6b2:	fb05 3707 	mla	r7, r5, r7, r3
 801a6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6b8:	fa1f fc82 	uxth.w	ip, r2
 801a6bc:	eb03 0a07 	add.w	sl, r3, r7
 801a6c0:	ea4f 110c 	mov.w	r1, ip, lsl #4
 801a6c4:	f813 9007 	ldrb.w	r9, [r3, r7]
 801a6c8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801a6cc:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 801a6d0:	b29b      	uxth	r3, r3
 801a6d2:	2800      	cmp	r0, #0
 801a6d4:	f000 8132 	beq.w	801a93c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x77c>
 801a6d8:	f81a 4005 	ldrb.w	r4, [sl, r5]
 801a6dc:	940d      	str	r4, [sp, #52]	; 0x34
 801a6de:	eb0a 0b05 	add.w	fp, sl, r5
 801a6e2:	fa1f fa80 	uxth.w	sl, r0
 801a6e6:	fb0a fc0c 	mul.w	ip, sl, ip
 801a6ea:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801a6ee:	fa1f fa8a 	uxth.w	sl, sl
 801a6f2:	eba1 010c 	sub.w	r1, r1, ip
 801a6f6:	eba3 030a 	sub.w	r3, r3, sl
 801a6fa:	b289      	uxth	r1, r1
 801a6fc:	fb08 f101 	mul.w	r1, r8, r1
 801a700:	b29b      	uxth	r3, r3
 801a702:	fb09 1303 	mla	r3, r9, r3, r1
 801a706:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a708:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801a70c:	940e      	str	r4, [sp, #56]	; 0x38
 801a70e:	fb0a 3301 	mla	r3, sl, r1, r3
 801a712:	fb0c 3304 	mla	r3, ip, r4, r3
 801a716:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	f000 8100 	beq.w	801a920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801a720:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a722:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a724:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a728:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 801a72c:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801a730:	f000 8109 	beq.w	801a946 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x786>
 801a734:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801a738:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801a73c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a740:	fb09 f707 	mul.w	r7, r9, r7
 801a744:	fb0a fc0c 	mul.w	ip, sl, ip
 801a748:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801a74c:	f107 0b20 	add.w	fp, r7, #32
 801a750:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801a754:	44cc      	add	ip, r9
 801a756:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801a75a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a75e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801a762:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a766:	ea4c 0909 	orr.w	r9, ip, r9
 801a76a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a76e:	884f      	ldrh	r7, [r1, #2]
 801a770:	d019      	beq.n	801a7a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5e6>
 801a772:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801a776:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801a77a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a77e:	fb08 f807 	mul.w	r8, r8, r7
 801a782:	fb0a fc0c 	mul.w	ip, sl, ip
 801a786:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801a78a:	f108 0b20 	add.w	fp, r8, #32
 801a78e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801a792:	44bc      	add	ip, r7
 801a794:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801a798:	0a3f      	lsrs	r7, r7, #8
 801a79a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801a79e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801a7a2:	ea4c 0707 	orr.w	r7, ip, r7
 801a7a6:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801a7aa:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801a7ae:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801a7b2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801a7b6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801a7ba:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801a7be:	ea4c 0909 	orr.w	r9, ip, r9
 801a7c2:	ea4a 0707 	orr.w	r7, sl, r7
 801a7c6:	2800      	cmp	r0, #0
 801a7c8:	f000 80bf 	beq.w	801a94a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78a>
 801a7cc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a7ce:	eb01 0c04 	add.w	ip, r1, r4
 801a7d2:	f831 8004 	ldrh.w	r8, [r1, r4]
 801a7d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a7d8:	29ff      	cmp	r1, #255	; 0xff
 801a7da:	d01a      	beq.n	801a812 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x652>
 801a7dc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a7de:	f428 61fc 	bic.w	r1, r8, #2016	; 0x7e0
 801a7e2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801a7e6:	fb04 fb08 	mul.w	fp, r4, r8
 801a7ea:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a7ee:	fb0a fa01 	mul.w	sl, sl, r1
 801a7f2:	f10b 0120 	add.w	r1, fp, #32
 801a7f6:	ea06 185a 	and.w	r8, r6, sl, lsr #5
 801a7fa:	eb01 211b 	add.w	r1, r1, fp, lsr #8
 801a7fe:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a802:	44d0      	add	r8, sl
 801a804:	0a09      	lsrs	r1, r1, #8
 801a806:	ea06 1858 	and.w	r8, r6, r8, lsr #5
 801a80a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a80e:	ea48 0801 	orr.w	r8, r8, r1
 801a812:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a814:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 801a818:	2cff      	cmp	r4, #255	; 0xff
 801a81a:	d01a      	beq.n	801a852 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x692>
 801a81c:	f421 6cfc 	bic.w	ip, r1, #2016	; 0x7e0
 801a820:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a824:	fb04 fb01 	mul.w	fp, r4, r1
 801a828:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 801a82c:	fb0a fa0c 	mul.w	sl, sl, ip
 801a830:	f10b 0c20 	add.w	ip, fp, #32
 801a834:	ea06 115a 	and.w	r1, r6, sl, lsr #5
 801a838:	eb0c 2c1b 	add.w	ip, ip, fp, lsr #8
 801a83c:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801a840:	4451      	add	r1, sl
 801a842:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a846:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801a84a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801a84e:	ea41 010c 	orr.w	r1, r1, ip
 801a852:	fb10 fc02 	smulbb	ip, r0, r2
 801a856:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801a85a:	f1c0 0a10 	rsb	sl, r0, #16
 801a85e:	ebaa 0a02 	sub.w	sl, sl, r2
 801a862:	ea4f 4b08 	mov.w	fp, r8, lsl #16
 801a866:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801a86a:	437a      	muls	r2, r7
 801a86c:	eb0c 0a4a 	add.w	sl, ip, sl, lsl #1
 801a870:	040f      	lsls	r7, r1, #16
 801a872:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801a876:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801a87a:	fb09 220a 	mla	r2, r9, sl, r2
 801a87e:	ea4b 0808 	orr.w	r8, fp, r8
 801a882:	ebcc 0040 	rsb	r0, ip, r0, lsl #1
 801a886:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801a88a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801a88e:	fb00 2208 	mla	r2, r0, r8, r2
 801a892:	4339      	orrs	r1, r7
 801a894:	fb0c 2201 	mla	r2, ip, r1, r2
 801a898:	ea4f 5952 	mov.w	r9, r2, lsr #21
 801a89c:	0952      	lsrs	r2, r2, #5
 801a89e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a8a2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a8a6:	ea49 0202 	orr.w	r2, r9, r2
 801a8aa:	2bff      	cmp	r3, #255	; 0xff
 801a8ac:	b292      	uxth	r2, r2
 801a8ae:	d05d      	beq.n	801a96c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7ac>
 801a8b0:	f8be 8000 	ldrh.w	r8, [lr]
 801a8b4:	4c31      	ldr	r4, [pc, #196]	; (801a97c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x7bc>)
 801a8b6:	43db      	mvns	r3, r3
 801a8b8:	ea4f 2028 	mov.w	r0, r8, asr #8
 801a8bc:	fa5f fc83 	uxtb.w	ip, r3
 801a8c0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a8c4:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801a8c8:	fb00 f00c 	mul.w	r0, r0, ip
 801a8cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801a8d0:	fb07 f10c 	mul.w	r1, r7, ip
 801a8d4:	1c47      	adds	r7, r0, #1
 801a8d6:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801a8da:	1217      	asrs	r7, r2, #8
 801a8dc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801a8e0:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801a8e4:	1c4f      	adds	r7, r1, #1
 801a8e6:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801a8ea:	10d1      	asrs	r1, r2, #3
 801a8ec:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a8f0:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801a8f4:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801a8f8:	b2db      	uxtb	r3, r3
 801a8fa:	00c9      	lsls	r1, r1, #3
 801a8fc:	fb03 f30c 	mul.w	r3, r3, ip
 801a900:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801a904:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801a908:	4308      	orrs	r0, r1
 801a90a:	00d2      	lsls	r2, r2, #3
 801a90c:	1c59      	adds	r1, r3, #1
 801a90e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a912:	b2d2      	uxtb	r2, r2
 801a914:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a918:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801a91c:	f8ae 0000 	strh.w	r0, [lr]
 801a920:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a922:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a924:	4413      	add	r3, r2
 801a926:	9327      	str	r3, [sp, #156]	; 0x9c
 801a928:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801a92a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a92c:	441a      	add	r2, r3
 801a92e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a930:	9228      	str	r2, [sp, #160]	; 0xa0
 801a932:	3b01      	subs	r3, #1
 801a934:	f10e 0e02 	add.w	lr, lr, #2
 801a938:	9311      	str	r3, [sp, #68]	; 0x44
 801a93a:	e4a5      	b.n	801a288 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801a93c:	fb08 f101 	mul.w	r1, r8, r1
 801a940:	fb09 1303 	mla	r3, r9, r3, r1
 801a944:	e6e7      	b.n	801a716 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x556>
 801a946:	46b9      	mov	r9, r7
 801a948:	e70f      	b.n	801a76a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5aa>
 801a94a:	f1c2 0110 	rsb	r1, r2, #16
 801a94e:	437a      	muls	r2, r7
 801a950:	fb09 2901 	mla	r9, r9, r1, r2
 801a954:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a958:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801a95c:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801a960:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a964:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801a968:	4302      	orrs	r2, r0
 801a96a:	e79e      	b.n	801a8aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6ea>
 801a96c:	f8ae 2000 	strh.w	r2, [lr]
 801a970:	e7d6      	b.n	801a920 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x760>
 801a972:	b015      	add	sp, #84	; 0x54
 801a974:	ecbd 8b08 	vpop	{d8-d11}
 801a978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a97c:	fffff800 	.word	0xfffff800

0801a980 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801a980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a984:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 801a988:	fb0c 4e03 	mla	lr, ip, r3, r4
 801a98c:	f1bc 0f00 	cmp.w	ip, #0
 801a990:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801a994:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 801a998:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 801a99c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801a9a0:	8808      	ldrh	r0, [r1, #0]
 801a9a2:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 801a9a6:	db2f      	blt.n	801aa08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801a9a8:	45e2      	cmp	sl, ip
 801a9aa:	dd2d      	ble.n	801aa08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 801a9ac:	2c00      	cmp	r4, #0
 801a9ae:	db29      	blt.n	801aa04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801a9b0:	42a3      	cmp	r3, r4
 801a9b2:	dd27      	ble.n	801aa04 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 801a9b4:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 801a9b8:	1c62      	adds	r2, r4, #1
 801a9ba:	d428      	bmi.n	801aa0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	dd26      	ble.n	801aa0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a9c0:	b32f      	cbz	r7, 801aa0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 801a9c2:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 801a9c6:	f11c 0c01 	adds.w	ip, ip, #1
 801a9ca:	d424      	bmi.n	801aa16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801a9cc:	45e2      	cmp	sl, ip
 801a9ce:	dd22      	ble.n	801aa16 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 801a9d0:	2e00      	cmp	r6, #0
 801a9d2:	f000 809c 	beq.w	801ab0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18e>
 801a9d6:	2c00      	cmp	r4, #0
 801a9d8:	db1b      	blt.n	801aa12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801a9da:	42a3      	cmp	r3, r4
 801a9dc:	dd19      	ble.n	801aa12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 801a9de:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 801a9e2:	3401      	adds	r4, #1
 801a9e4:	d41a      	bmi.n	801aa1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801a9e6:	42a3      	cmp	r3, r4
 801a9e8:	dd18      	ble.n	801aa1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 801a9ea:	b1cf      	cbz	r7, 801aa20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 801a9ec:	3301      	adds	r3, #1
 801a9ee:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 801a9f2:	2f0f      	cmp	r7, #15
 801a9f4:	d915      	bls.n	801aa22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 801a9f6:	4b49      	ldr	r3, [pc, #292]	; (801ab1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 801a9f8:	4a49      	ldr	r2, [pc, #292]	; (801ab20 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 801a9fa:	484a      	ldr	r0, [pc, #296]	; (801ab24 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 801a9fc:	f240 3155 	movw	r1, #853	; 0x355
 801aa00:	f002 ff38 	bl	801d874 <__assert_func>
 801aa04:	4681      	mov	r9, r0
 801aa06:	e7d7      	b.n	801a9b8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 801aa08:	4686      	mov	lr, r0
 801aa0a:	4681      	mov	r9, r0
 801aa0c:	e7db      	b.n	801a9c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801aa0e:	4686      	mov	lr, r0
 801aa10:	e7d9      	b.n	801a9c6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 801aa12:	4684      	mov	ip, r0
 801aa14:	e7e5      	b.n	801a9e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 801aa16:	4603      	mov	r3, r0
 801aa18:	4684      	mov	ip, r0
 801aa1a:	e7ea      	b.n	801a9f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	e7e8      	b.n	801a9f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 801aa20:	4603      	mov	r3, r0
 801aa22:	2e0f      	cmp	r6, #15
 801aa24:	d8e7      	bhi.n	801a9f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801aa26:	ea4f 4409 	mov.w	r4, r9, lsl #16
 801aa2a:	fb17 f806 	smulbb	r8, r7, r6
 801aa2e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801aa32:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 801aa36:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801aa3a:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801aa3e:	ea44 0909 	orr.w	r9, r4, r9
 801aa42:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801aa46:	f1c6 0410 	rsb	r4, r6, #16
 801aa4a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801aa4e:	1be4      	subs	r4, r4, r7
 801aa50:	041a      	lsls	r2, r3, #16
 801aa52:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 801aa56:	ea4a 0e0e 	orr.w	lr, sl, lr
 801aa5a:	fb07 fe0e 	mul.w	lr, r7, lr
 801aa5e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801aa62:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 801aa66:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801aa6a:	fb04 e409 	mla	r4, r4, r9, lr
 801aa6e:	4313      	orrs	r3, r2
 801aa70:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801aa74:	fb08 4303 	mla	r3, r8, r3, r4
 801aa78:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801aa7c:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 801aa80:	4322      	orrs	r2, r4
 801aa82:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 801aa86:	fb06 3202 	mla	r2, r6, r2, r3
 801aa8a:	0d53      	lsrs	r3, r2, #21
 801aa8c:	0952      	lsrs	r2, r2, #5
 801aa8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aa92:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801aa96:	431a      	orrs	r2, r3
 801aa98:	b293      	uxth	r3, r2
 801aa9a:	b2af      	uxth	r7, r5
 801aa9c:	1202      	asrs	r2, r0, #8
 801aa9e:	43ed      	mvns	r5, r5
 801aaa0:	b2ed      	uxtb	r5, r5
 801aaa2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801aaa6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801aaaa:	fb12 f205 	smulbb	r2, r2, r5
 801aaae:	10c6      	asrs	r6, r0, #3
 801aab0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801aab4:	fb0c 2c07 	mla	ip, ip, r7, r2
 801aab8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801aabc:	10da      	asrs	r2, r3, #3
 801aabe:	fb16 f605 	smulbb	r6, r6, r5
 801aac2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801aac6:	fb02 6207 	mla	r2, r2, r7, r6
 801aaca:	b296      	uxth	r6, r2
 801aacc:	00c2      	lsls	r2, r0, #3
 801aace:	00dc      	lsls	r4, r3, #3
 801aad0:	b2d2      	uxtb	r2, r2
 801aad2:	b2e4      	uxtb	r4, r4
 801aad4:	fb12 f205 	smulbb	r2, r2, r5
 801aad8:	fb04 2207 	mla	r2, r4, r7, r2
 801aadc:	fa1f fc8c 	uxth.w	ip, ip
 801aae0:	b292      	uxth	r2, r2
 801aae2:	f10c 0301 	add.w	r3, ip, #1
 801aae6:	1c50      	adds	r0, r2, #1
 801aae8:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801aaec:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801aaf0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801aaf4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801aaf8:	4313      	orrs	r3, r2
 801aafa:	1c72      	adds	r2, r6, #1
 801aafc:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 801ab00:	0952      	lsrs	r2, r2, #5
 801ab02:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ab06:	4313      	orrs	r3, r2
 801ab08:	800b      	strh	r3, [r1, #0]
 801ab0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab0e:	2f0f      	cmp	r7, #15
 801ab10:	f63f af71 	bhi.w	801a9f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 801ab14:	4603      	mov	r3, r0
 801ab16:	4684      	mov	ip, r0
 801ab18:	e785      	b.n	801aa26 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 801ab1a:	bf00      	nop
 801ab1c:	080214bb 	.word	0x080214bb
 801ab20:	08021ac2 	.word	0x08021ac2
 801ab24:	08021543 	.word	0x08021543

0801ab28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab2c:	ed2d 8b08 	vpush	{d8-d11}
 801ab30:	b095      	sub	sp, #84	; 0x54
 801ab32:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801ab36:	9306      	str	r3, [sp, #24]
 801ab38:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801ab3c:	9212      	str	r2, [sp, #72]	; 0x48
 801ab3e:	9307      	str	r3, [sp, #28]
 801ab40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ab42:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ab46:	930c      	str	r3, [sp, #48]	; 0x30
 801ab48:	910b      	str	r1, [sp, #44]	; 0x2c
 801ab4a:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801ab4e:	9013      	str	r0, [sp, #76]	; 0x4c
 801ab50:	6850      	ldr	r0, [r2, #4]
 801ab52:	6812      	ldr	r2, [r2, #0]
 801ab54:	f9bd 70b8 	ldrsh.w	r7, [sp, #184]	; 0xb8
 801ab58:	fb00 1303 	mla	r3, r0, r3, r1
 801ab5c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ab60:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	9309      	str	r3, [sp, #36]	; 0x24
 801ab66:	007b      	lsls	r3, r7, #1
 801ab68:	930a      	str	r3, [sp, #40]	; 0x28
 801ab6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab6c:	43db      	mvns	r3, r3
 801ab6e:	b2db      	uxtb	r3, r3
 801ab70:	eeb0 aa40 	vmov.f32	s20, s0
 801ab74:	eef0 9a60 	vmov.f32	s19, s1
 801ab78:	eeb0 9a41 	vmov.f32	s18, s2
 801ab7c:	eeb0 8a62 	vmov.f32	s16, s5
 801ab80:	eef0 8a43 	vmov.f32	s17, s6
 801ab84:	eef0 ba44 	vmov.f32	s23, s8
 801ab88:	eeb0 ba64 	vmov.f32	s22, s9
 801ab8c:	eef0 aa45 	vmov.f32	s21, s10
 801ab90:	9308      	str	r3, [sp, #32]
 801ab92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	dc03      	bgt.n	801aba0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ab98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	f340 81f3 	ble.w	801af86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801aba0:	9b06      	ldr	r3, [sp, #24]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	f340 80fa 	ble.w	801ad9c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x274>
 801aba8:	1422      	asrs	r2, r4, #16
 801abaa:	ea4f 4326 	mov.w	r3, r6, asr #16
 801abae:	d42b      	bmi.n	801ac08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe0>
 801abb0:	1c51      	adds	r1, r2, #1
 801abb2:	428f      	cmp	r7, r1
 801abb4:	dd2b      	ble.n	801ac0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	db29      	blt.n	801ac0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801abba:	9807      	ldr	r0, [sp, #28]
 801abbc:	1c59      	adds	r1, r3, #1
 801abbe:	4288      	cmp	r0, r1
 801abc0:	dd25      	ble.n	801ac0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe6>
 801abc2:	9b06      	ldr	r3, [sp, #24]
 801abc4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801abc6:	3b01      	subs	r3, #1
 801abc8:	fb02 4203 	mla	r2, r2, r3, r4
 801abcc:	1412      	asrs	r2, r2, #16
 801abce:	d428      	bmi.n	801ac22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801abd0:	3201      	adds	r2, #1
 801abd2:	4297      	cmp	r7, r2
 801abd4:	dd25      	ble.n	801ac22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801abd6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801abd8:	fb02 6303 	mla	r3, r2, r3, r6
 801abdc:	141b      	asrs	r3, r3, #16
 801abde:	d420      	bmi.n	801ac22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801abe0:	9a07      	ldr	r2, [sp, #28]
 801abe2:	3301      	adds	r3, #1
 801abe4:	429a      	cmp	r2, r3
 801abe6:	dd1c      	ble.n	801ac22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801abe8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801abec:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
 801abf0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801abf4:	f1b8 0f00 	cmp.w	r8, #0
 801abf8:	f300 8129 	bgt.w	801ae4e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x326>
 801abfc:	9b06      	ldr	r3, [sp, #24]
 801abfe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ac02:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ac06:	e0cb      	b.n	801ada0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x278>
 801ac08:	1c51      	adds	r1, r2, #1
 801ac0a:	f040 80bd 	bne.w	801ad88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801ac0e:	42ba      	cmp	r2, r7
 801ac10:	f280 80ba 	bge.w	801ad88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801ac14:	1c5a      	adds	r2, r3, #1
 801ac16:	f2c0 80b7 	blt.w	801ad88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801ac1a:	9a07      	ldr	r2, [sp, #28]
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	f280 80b3 	bge.w	801ad88 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x260>
 801ac22:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ac26:	46c8      	mov	r8, r9
 801ac28:	f1bb 0f00 	cmp.w	fp, #0
 801ac2c:	dde6      	ble.n	801abfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd4>
 801ac2e:	1421      	asrs	r1, r4, #16
 801ac30:	ea4f 4226 	mov.w	r2, r6, asr #16
 801ac34:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ac38:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ac3c:	f100 80ef 	bmi.w	801ae1e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2f6>
 801ac40:	f101 0c01 	add.w	ip, r1, #1
 801ac44:	4567      	cmp	r7, ip
 801ac46:	f340 80ec 	ble.w	801ae22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ac4a:	2a00      	cmp	r2, #0
 801ac4c:	f2c0 80e9 	blt.w	801ae22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ac50:	9d07      	ldr	r5, [sp, #28]
 801ac52:	f102 0c01 	add.w	ip, r2, #1
 801ac56:	4565      	cmp	r5, ip
 801ac58:	f340 80e3 	ble.w	801ae22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2fa>
 801ac5c:	fb02 1207 	mla	r2, r2, r7, r1
 801ac60:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ac62:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801ac66:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801ac6a:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801ac6e:	b138      	cbz	r0, 801ac80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x158>
 801ac70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ac72:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ac74:	4472      	add	r2, lr
 801ac76:	f83e 5005 	ldrh.w	r5, [lr, r5]
 801ac7a:	8852      	ldrh	r2, [r2, #2]
 801ac7c:	950e      	str	r5, [sp, #56]	; 0x38
 801ac7e:	920f      	str	r2, [sp, #60]	; 0x3c
 801ac80:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801ac84:	fb13 f200 	smulbb	r2, r3, r0
 801ac88:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ac8c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ac90:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ac94:	10d2      	asrs	r2, r2, #3
 801ac96:	ea4e 0c0c 	orr.w	ip, lr, ip
 801ac9a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ac9e:	f1c0 0e10 	rsb	lr, r0, #16
 801aca2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801aca6:	ebae 0e03 	sub.w	lr, lr, r3
 801acaa:	ea4a 0101 	orr.w	r1, sl, r1
 801acae:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801acb2:	4359      	muls	r1, r3
 801acb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acb6:	9d08      	ldr	r5, [sp, #32]
 801acb8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801acbc:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801acc0:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801acc4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801acc8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801accc:	ea4c 0c03 	orr.w	ip, ip, r3
 801acd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801acd2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801acd4:	041b      	lsls	r3, r3, #16
 801acd6:	fb02 ec0c 	mla	ip, r2, ip, lr
 801acda:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801acde:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801ace2:	ea43 030e 	orr.w	r3, r3, lr
 801ace6:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801acea:	fb02 c203 	mla	r2, r2, r3, ip
 801acee:	0d53      	lsrs	r3, r2, #21
 801acf0:	0952      	lsrs	r2, r2, #5
 801acf2:	f8b8 c000 	ldrh.w	ip, [r8]
 801acf6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801acfa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801acfe:	431a      	orrs	r2, r3
 801ad00:	b292      	uxth	r2, r2
 801ad02:	ea4f 212c 	mov.w	r1, ip, asr #8
 801ad06:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801ad0a:	1210      	asrs	r0, r2, #8
 801ad0c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ad10:	fb11 f105 	smulbb	r1, r1, r5
 801ad14:	ea4f 0eec 	mov.w	lr, ip, asr #3
 801ad18:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ad1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ad20:	fb00 1003 	mla	r0, r0, r3, r1
 801ad24:	fa5f fc8c 	uxtb.w	ip, ip
 801ad28:	10d1      	asrs	r1, r2, #3
 801ad2a:	00d2      	lsls	r2, r2, #3
 801ad2c:	fb1c fc05 	smulbb	ip, ip, r5
 801ad30:	b2d2      	uxtb	r2, r2
 801ad32:	fb02 c203 	mla	r2, r2, r3, ip
 801ad36:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801ad3a:	b280      	uxth	r0, r0
 801ad3c:	b292      	uxth	r2, r2
 801ad3e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ad42:	fb1e fe05 	smulbb	lr, lr, r5
 801ad46:	fb01 e103 	mla	r1, r1, r3, lr
 801ad4a:	f102 0c01 	add.w	ip, r2, #1
 801ad4e:	1c43      	adds	r3, r0, #1
 801ad50:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ad54:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ad58:	b289      	uxth	r1, r1
 801ad5a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ad5e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ad62:	4313      	orrs	r3, r2
 801ad64:	1c4a      	adds	r2, r1, #1
 801ad66:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ad6a:	0949      	lsrs	r1, r1, #5
 801ad6c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ad70:	430b      	orrs	r3, r1
 801ad72:	f8a8 3000 	strh.w	r3, [r8]
 801ad76:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ad78:	441c      	add	r4, r3
 801ad7a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad7c:	f108 0802 	add.w	r8, r8, #2
 801ad80:	441e      	add	r6, r3
 801ad82:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ad86:	e74f      	b.n	801ac28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801ad88:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ad8a:	441c      	add	r4, r3
 801ad8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ad8e:	441e      	add	r6, r3
 801ad90:	9b06      	ldr	r3, [sp, #24]
 801ad92:	3b01      	subs	r3, #1
 801ad94:	9306      	str	r3, [sp, #24]
 801ad96:	f109 0902 	add.w	r9, r9, #2
 801ad9a:	e701      	b.n	801aba0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x78>
 801ad9c:	f47f af11 	bne.w	801abc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801ada0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	f340 80ef 	ble.w	801af86 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45e>
 801ada8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801adac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801adb0:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801adb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801adb6:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801adba:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801adbe:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801adc2:	eef0 6a48 	vmov.f32	s13, s16
 801adc6:	ee69 7a27 	vmul.f32	s15, s18, s15
 801adca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801adce:	ee37 8a48 	vsub.f32	s16, s14, s16
 801add2:	ee16 4a90 	vmov	r4, s13
 801add6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801adda:	eef0 6a68 	vmov.f32	s13, s17
 801adde:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ade2:	ee18 2a10 	vmov	r2, s16
 801ade6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801adea:	fb92 f3f3 	sdiv	r3, r2, r3
 801adee:	ee18 2a90 	vmov	r2, s17
 801adf2:	9329      	str	r3, [sp, #164]	; 0xa4
 801adf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801adf6:	fb92 f3f3 	sdiv	r3, r2, r3
 801adfa:	932a      	str	r3, [sp, #168]	; 0xa8
 801adfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801adfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ae00:	3b01      	subs	r3, #1
 801ae02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ae06:	930b      	str	r3, [sp, #44]	; 0x2c
 801ae08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ae0a:	bf08      	it	eq
 801ae0c:	4613      	moveq	r3, r2
 801ae0e:	ee16 6a90 	vmov	r6, s13
 801ae12:	9306      	str	r3, [sp, #24]
 801ae14:	eef0 8a67 	vmov.f32	s17, s15
 801ae18:	eeb0 8a47 	vmov.f32	s16, s14
 801ae1c:	e6b9      	b.n	801ab92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6a>
 801ae1e:	1c4d      	adds	r5, r1, #1
 801ae20:	d1a9      	bne.n	801ad76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ae22:	428f      	cmp	r7, r1
 801ae24:	dda7      	ble.n	801ad76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ae26:	1c55      	adds	r5, r2, #1
 801ae28:	dba5      	blt.n	801ad76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ae2a:	9d07      	ldr	r5, [sp, #28]
 801ae2c:	4295      	cmp	r5, r2
 801ae2e:	dda2      	ble.n	801ad76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ae30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ae32:	9101      	str	r1, [sp, #4]
 801ae34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ae38:	9b07      	ldr	r3, [sp, #28]
 801ae3a:	9300      	str	r3, [sp, #0]
 801ae3c:	e9cd 0504 	strd	r0, r5, [sp, #16]
 801ae40:	463b      	mov	r3, r7
 801ae42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ae46:	4641      	mov	r1, r8
 801ae48:	f7ff fd9a 	bl	801a980 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801ae4c:	e793      	b.n	801ad76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x24e>
 801ae4e:	1422      	asrs	r2, r4, #16
 801ae50:	1431      	asrs	r1, r6, #16
 801ae52:	fb07 2101 	mla	r1, r7, r1, r2
 801ae56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae58:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae5a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801ae5e:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801ae62:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801ae66:	8851      	ldrh	r1, [r2, #2]
 801ae68:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ae6c:	f1be 0f00 	cmp.w	lr, #0
 801ae70:	d006      	beq.n	801ae80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801ae72:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ae74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ae76:	1810      	adds	r0, r2, r0
 801ae78:	5b52      	ldrh	r2, [r2, r5]
 801ae7a:	9210      	str	r2, [sp, #64]	; 0x40
 801ae7c:	8842      	ldrh	r2, [r0, #2]
 801ae7e:	9211      	str	r2, [sp, #68]	; 0x44
 801ae80:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801ae84:	fb13 f20e 	smulbb	r2, r3, lr
 801ae88:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ae8c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801ae90:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ae94:	10d2      	asrs	r2, r2, #3
 801ae96:	ea40 000c 	orr.w	r0, r0, ip
 801ae9a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ae9e:	f1ce 0c10 	rsb	ip, lr, #16
 801aea2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801aea6:	ebac 0c03 	sub.w	ip, ip, r3
 801aeaa:	ea4b 0101 	orr.w	r1, fp, r1
 801aeae:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801aeb2:	4359      	muls	r1, r3
 801aeb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801aeb6:	9d08      	ldr	r5, [sp, #32]
 801aeb8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801aebc:	fb0c 1c00 	mla	ip, ip, r0, r1
 801aec0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801aec4:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801aec8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801aeca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801aece:	ea4b 0000 	orr.w	r0, fp, r0
 801aed2:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801aed6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801aeda:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801aede:	fb02 c000 	mla	r0, r2, r0, ip
 801aee2:	ea4b 0b03 	orr.w	fp, fp, r3
 801aee6:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801aeea:	fb02 0b0b 	mla	fp, r2, fp, r0
 801aeee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aef0:	ea4f 515b 	mov.w	r1, fp, lsr #21
 801aef4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801aef8:	8812      	ldrh	r2, [r2, #0]
 801aefa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801aefe:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801af02:	ea41 0b0b 	orr.w	fp, r1, fp
 801af06:	fa1f f38b 	uxth.w	r3, fp
 801af0a:	1211      	asrs	r1, r2, #8
 801af0c:	1218      	asrs	r0, r3, #8
 801af0e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801af12:	fb11 f105 	smulbb	r1, r1, r5
 801af16:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801af1a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801af1e:	00d2      	lsls	r2, r2, #3
 801af20:	fb00 100a 	mla	r0, r0, sl, r1
 801af24:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801af28:	10d9      	asrs	r1, r3, #3
 801af2a:	b2d2      	uxtb	r2, r2
 801af2c:	00db      	lsls	r3, r3, #3
 801af2e:	fb1c fc05 	smulbb	ip, ip, r5
 801af32:	fb12 f205 	smulbb	r2, r2, r5
 801af36:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	b280      	uxth	r0, r0
 801af3e:	fb01 c10a 	mla	r1, r1, sl, ip
 801af42:	fb03 230a 	mla	r3, r3, sl, r2
 801af46:	b29b      	uxth	r3, r3
 801af48:	b289      	uxth	r1, r1
 801af4a:	1c42      	adds	r2, r0, #1
 801af4c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801af50:	f101 0c01 	add.w	ip, r1, #1
 801af54:	1c5a      	adds	r2, r3, #1
 801af56:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801af5a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801af5e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801af62:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801af66:	0949      	lsrs	r1, r1, #5
 801af68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af6a:	4310      	orrs	r0, r2
 801af6c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801af70:	4308      	orrs	r0, r1
 801af72:	f823 0b02 	strh.w	r0, [r3], #2
 801af76:	930d      	str	r3, [sp, #52]	; 0x34
 801af78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801af7a:	441c      	add	r4, r3
 801af7c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801af7e:	f108 38ff 	add.w	r8, r8, #4294967295
 801af82:	441e      	add	r6, r3
 801af84:	e636      	b.n	801abf4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xcc>
 801af86:	b015      	add	sp, #84	; 0x54
 801af88:	ecbd 8b08 	vpop	{d8-d11}
 801af8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801af90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af94:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 801af98:	fb06 5c03 	mla	ip, r6, r3, r5
 801af9c:	2e00      	cmp	r6, #0
 801af9e:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 801afa2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 801afa6:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801afaa:	8808      	ldrh	r0, [r1, #0]
 801afac:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801afb0:	db2e      	blt.n	801b010 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801afb2:	45b0      	cmp	r8, r6
 801afb4:	dd2c      	ble.n	801b010 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 801afb6:	2d00      	cmp	r5, #0
 801afb8:	db28      	blt.n	801b00c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801afba:	42ab      	cmp	r3, r5
 801afbc:	dd26      	ble.n	801b00c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 801afbe:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 801afc2:	1c6a      	adds	r2, r5, #1
 801afc4:	d427      	bmi.n	801b016 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801afc6:	4293      	cmp	r3, r2
 801afc8:	dd25      	ble.n	801b016 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801afca:	b324      	cbz	r4, 801b016 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 801afcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801afd0:	3601      	adds	r6, #1
 801afd2:	d424      	bmi.n	801b01e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801afd4:	45b0      	cmp	r8, r6
 801afd6:	dd22      	ble.n	801b01e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 801afd8:	b31f      	cbz	r7, 801b022 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 801afda:	2d00      	cmp	r5, #0
 801afdc:	db1d      	blt.n	801b01a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801afde:	42ab      	cmp	r3, r5
 801afe0:	dd1b      	ble.n	801b01a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 801afe2:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 801afe6:	3501      	adds	r5, #1
 801afe8:	d405      	bmi.n	801aff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801afea:	42ab      	cmp	r3, r5
 801afec:	dd03      	ble.n	801aff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801afee:	b124      	cbz	r4, 801affa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 801aff0:	3301      	adds	r3, #1
 801aff2:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 801aff6:	2c0f      	cmp	r4, #15
 801aff8:	d801      	bhi.n	801affe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801affa:	2f0f      	cmp	r7, #15
 801affc:	d914      	bls.n	801b028 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 801affe:	4b27      	ldr	r3, [pc, #156]	; (801b09c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 801b000:	4a27      	ldr	r2, [pc, #156]	; (801b0a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 801b002:	4828      	ldr	r0, [pc, #160]	; (801b0a4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 801b004:	f240 3155 	movw	r1, #853	; 0x355
 801b008:	f002 fc34 	bl	801d874 <__assert_func>
 801b00c:	4684      	mov	ip, r0
 801b00e:	e7d8      	b.n	801afc2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 801b010:	4602      	mov	r2, r0
 801b012:	4684      	mov	ip, r0
 801b014:	e7dc      	b.n	801afd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801b016:	4602      	mov	r2, r0
 801b018:	e7da      	b.n	801afd0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 801b01a:	4606      	mov	r6, r0
 801b01c:	e7e3      	b.n	801afe6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 801b01e:	4606      	mov	r6, r0
 801b020:	e7e9      	b.n	801aff6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 801b022:	2c0f      	cmp	r4, #15
 801b024:	d8eb      	bhi.n	801affe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801b026:	4606      	mov	r6, r0
 801b028:	ea4f 450c 	mov.w	r5, ip, lsl #16
 801b02c:	fb14 f307 	smulbb	r3, r4, r7
 801b030:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801b034:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 801b038:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b03c:	10db      	asrs	r3, r3, #3
 801b03e:	ea45 0c0c 	orr.w	ip, r5, ip
 801b042:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b046:	f1c7 0510 	rsb	r5, r7, #16
 801b04a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b04e:	1b2d      	subs	r5, r5, r4
 801b050:	ea4e 0202 	orr.w	r2, lr, r2
 801b054:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 801b058:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 801b05c:	4354      	muls	r4, r2
 801b05e:	fb05 450c 	mla	r5, r5, ip, r4
 801b062:	0404      	lsls	r4, r0, #16
 801b064:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801b068:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b06c:	4320      	orrs	r0, r4
 801b06e:	fb03 5400 	mla	r4, r3, r0, r5
 801b072:	0430      	lsls	r0, r6, #16
 801b074:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b078:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801b07c:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 801b080:	4330      	orrs	r0, r6
 801b082:	fb07 4000 	mla	r0, r7, r0, r4
 801b086:	0d43      	lsrs	r3, r0, #21
 801b088:	0940      	lsrs	r0, r0, #5
 801b08a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b08e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b092:	4318      	orrs	r0, r3
 801b094:	8008      	strh	r0, [r1, #0]
 801b096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b09a:	bf00      	nop
 801b09c:	080214bb 	.word	0x080214bb
 801b0a0:	08021ac2 	.word	0x08021ac2
 801b0a4:	08021543 	.word	0x08021543

0801b0a8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0ac:	ed2d 8b0a 	vpush	{d8-d12}
 801b0b0:	b093      	sub	sp, #76	; 0x4c
 801b0b2:	461d      	mov	r5, r3
 801b0b4:	9210      	str	r2, [sp, #64]	; 0x40
 801b0b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b0b8:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 801b0bc:	9208      	str	r2, [sp, #32]
 801b0be:	e9dd 272c 	ldrd	r2, r7, [sp, #176]	; 0xb0
 801b0c2:	910b      	str	r1, [sp, #44]	; 0x2c
 801b0c4:	6859      	ldr	r1, [r3, #4]
 801b0c6:	681b      	ldr	r3, [r3, #0]
 801b0c8:	f9bd 80b8 	ldrsh.w	r8, [sp, #184]	; 0xb8
 801b0cc:	9011      	str	r0, [sp, #68]	; 0x44
 801b0ce:	fb01 2707 	mla	r7, r1, r7, r2
 801b0d2:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801b0d6:	9307      	str	r3, [sp, #28]
 801b0d8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b0da:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	9309      	str	r3, [sp, #36]	; 0x24
 801b0e2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b0e6:	eeb0 aa40 	vmov.f32	s20, s0
 801b0ea:	eef0 9a60 	vmov.f32	s19, s1
 801b0ee:	eeb0 9a41 	vmov.f32	s18, s2
 801b0f2:	eeb0 8a62 	vmov.f32	s16, s5
 801b0f6:	eef0 8a43 	vmov.f32	s17, s6
 801b0fa:	eeb0 ca44 	vmov.f32	s24, s8
 801b0fe:	eef0 ba64 	vmov.f32	s23, s9
 801b102:	eeb0 ba45 	vmov.f32	s22, s10
 801b106:	930a      	str	r3, [sp, #40]	; 0x28
 801b108:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801b10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b10e:	2b00      	cmp	r3, #0
 801b110:	dc03      	bgt.n	801b11a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b112:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b114:	2b00      	cmp	r3, #0
 801b116:	f340 816c 	ble.w	801b3f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801b11a:	2d00      	cmp	r5, #0
 801b11c:	f340 80b6 	ble.w	801b28c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e4>
 801b120:	1422      	asrs	r2, r4, #16
 801b122:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b126:	d428      	bmi.n	801b17a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd2>
 801b128:	1c51      	adds	r1, r2, #1
 801b12a:	4588      	cmp	r8, r1
 801b12c:	dd27      	ble.n	801b17e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801b12e:	2b00      	cmp	r3, #0
 801b130:	db25      	blt.n	801b17e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801b132:	9808      	ldr	r0, [sp, #32]
 801b134:	1c59      	adds	r1, r3, #1
 801b136:	4288      	cmp	r0, r1
 801b138:	dd21      	ble.n	801b17e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801b13a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b13c:	1e6b      	subs	r3, r5, #1
 801b13e:	fb02 4203 	mla	r2, r2, r3, r4
 801b142:	1412      	asrs	r2, r2, #16
 801b144:	d422      	bmi.n	801b18c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b146:	3201      	adds	r2, #1
 801b148:	4590      	cmp	r8, r2
 801b14a:	dd1f      	ble.n	801b18c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b14c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801b14e:	fb02 6303 	mla	r3, r2, r3, r6
 801b152:	141b      	asrs	r3, r3, #16
 801b154:	d41a      	bmi.n	801b18c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b156:	9a08      	ldr	r2, [sp, #32]
 801b158:	3301      	adds	r3, #1
 801b15a:	429a      	cmp	r2, r3
 801b15c:	dd16      	ble.n	801b18c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801b15e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b162:	46a9      	mov	r9, r5
 801b164:	f1b9 0f00 	cmp.w	r9, #0
 801b168:	f300 80e4 	bgt.w	801b334 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28c>
 801b16c:	9b07      	ldr	r3, [sp, #28]
 801b16e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801b172:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801b176:	9307      	str	r3, [sp, #28]
 801b178:	e08a      	b.n	801b290 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1e8>
 801b17a:	1c51      	adds	r1, r2, #1
 801b17c:	d17d      	bne.n	801b27a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801b17e:	4542      	cmp	r2, r8
 801b180:	da7b      	bge.n	801b27a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801b182:	1c5a      	adds	r2, r3, #1
 801b184:	db79      	blt.n	801b27a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801b186:	9a08      	ldr	r2, [sp, #32]
 801b188:	4293      	cmp	r3, r2
 801b18a:	da76      	bge.n	801b27a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1d2>
 801b18c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801b190:	46aa      	mov	sl, r5
 801b192:	f1ba 0f00 	cmp.w	sl, #0
 801b196:	dde9      	ble.n	801b16c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc4>
 801b198:	1421      	asrs	r1, r4, #16
 801b19a:	ea4f 4226 	mov.w	r2, r6, asr #16
 801b19e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801b1a2:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b1a6:	f100 80b0 	bmi.w	801b30a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x262>
 801b1aa:	f101 0c01 	add.w	ip, r1, #1
 801b1ae:	45e0      	cmp	r8, ip
 801b1b0:	f340 80ad 	ble.w	801b30e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b1b4:	2a00      	cmp	r2, #0
 801b1b6:	f2c0 80aa 	blt.w	801b30e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b1ba:	9f08      	ldr	r7, [sp, #32]
 801b1bc:	f102 0c01 	add.w	ip, r2, #1
 801b1c0:	4567      	cmp	r7, ip
 801b1c2:	f340 80a4 	ble.w	801b30e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x266>
 801b1c6:	fb02 1208 	mla	r2, r2, r8, r1
 801b1ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b1cc:	eb01 0e42 	add.w	lr, r1, r2, lsl #1
 801b1d0:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801b1d4:	f8be 1002 	ldrh.w	r1, [lr, #2]
 801b1d8:	b138      	cbz	r0, 801b1ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x142>
 801b1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b1dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b1de:	4472      	add	r2, lr
 801b1e0:	f83e 7007 	ldrh.w	r7, [lr, r7]
 801b1e4:	8852      	ldrh	r2, [r2, #2]
 801b1e6:	970c      	str	r7, [sp, #48]	; 0x30
 801b1e8:	920d      	str	r2, [sp, #52]	; 0x34
 801b1ea:	ea4f 4e0c 	mov.w	lr, ip, lsl #16
 801b1ee:	fb13 f200 	smulbb	r2, r3, r0
 801b1f2:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b1f6:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b1fa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b1fe:	10d2      	asrs	r2, r2, #3
 801b200:	ea4e 0c0c 	orr.w	ip, lr, ip
 801b204:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b208:	f1c0 0e10 	rsb	lr, r0, #16
 801b20c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b210:	ebae 0e03 	sub.w	lr, lr, r3
 801b214:	ea4b 0101 	orr.w	r1, fp, r1
 801b218:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801b21c:	4359      	muls	r1, r3
 801b21e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b220:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801b224:	fb0e 1e0c 	mla	lr, lr, ip, r1
 801b228:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b22c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b230:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b234:	ea4c 0c03 	orr.w	ip, ip, r3
 801b238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b23a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b23c:	041b      	lsls	r3, r3, #16
 801b23e:	fb02 ec0c 	mla	ip, r2, ip, lr
 801b242:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b246:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801b24a:	ea43 030e 	orr.w	r3, r3, lr
 801b24e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801b252:	fb02 c203 	mla	r2, r2, r3, ip
 801b256:	0d53      	lsrs	r3, r2, #21
 801b258:	0952      	lsrs	r2, r2, #5
 801b25a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b25e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b262:	431a      	orrs	r2, r3
 801b264:	f8a9 2000 	strh.w	r2, [r9]
 801b268:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b26a:	441c      	add	r4, r3
 801b26c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b26e:	f109 0902 	add.w	r9, r9, #2
 801b272:	441e      	add	r6, r3
 801b274:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b278:	e78b      	b.n	801b192 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xea>
 801b27a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b27c:	441c      	add	r4, r3
 801b27e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b280:	441e      	add	r6, r3
 801b282:	9b07      	ldr	r3, [sp, #28]
 801b284:	3302      	adds	r3, #2
 801b286:	3d01      	subs	r5, #1
 801b288:	9307      	str	r3, [sp, #28]
 801b28a:	e746      	b.n	801b11a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x72>
 801b28c:	f47f af55 	bne.w	801b13a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x92>
 801b290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b292:	2b00      	cmp	r3, #0
 801b294:	f340 80ad 	ble.w	801b3f2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x34a>
 801b298:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801b29c:	ee79 9aab 	vadd.f32	s19, s19, s23
 801b2a0:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801b2a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b2a6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801b2aa:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b2ae:	eef0 6a48 	vmov.f32	s13, s16
 801b2b2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b2b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b2be:	ee16 4a90 	vmov	r4, s13
 801b2c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b2c6:	eef0 6a68 	vmov.f32	s13, s17
 801b2ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b2ce:	ee18 2a10 	vmov	r2, s16
 801b2d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b2d6:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2da:	ee18 2a90 	vmov	r2, s17
 801b2de:	9329      	str	r3, [sp, #164]	; 0xa4
 801b2e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b2e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2e6:	932a      	str	r3, [sp, #168]	; 0xa8
 801b2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b2ec:	3b01      	subs	r3, #1
 801b2ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2f2:	930b      	str	r3, [sp, #44]	; 0x2c
 801b2f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b2f6:	ee16 6a90 	vmov	r6, s13
 801b2fa:	bf14      	ite	ne
 801b2fc:	461d      	movne	r5, r3
 801b2fe:	4615      	moveq	r5, r2
 801b300:	eef0 8a67 	vmov.f32	s17, s15
 801b304:	eeb0 8a47 	vmov.f32	s16, s14
 801b308:	e700      	b.n	801b10c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x64>
 801b30a:	1c4f      	adds	r7, r1, #1
 801b30c:	d1ac      	bne.n	801b268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801b30e:	4588      	cmp	r8, r1
 801b310:	ddaa      	ble.n	801b268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801b312:	1c57      	adds	r7, r2, #1
 801b314:	dba8      	blt.n	801b268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801b316:	9f08      	ldr	r7, [sp, #32]
 801b318:	4297      	cmp	r7, r2
 801b31a:	dda5      	ble.n	801b268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801b31c:	e9cd 3003 	strd	r3, r0, [sp, #12]
 801b320:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801b324:	9700      	str	r7, [sp, #0]
 801b326:	4643      	mov	r3, r8
 801b328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b32a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b32c:	4649      	mov	r1, r9
 801b32e:	f7ff fe2f 	bl	801af90 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801b332:	e799      	b.n	801b268 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801b334:	1422      	asrs	r2, r4, #16
 801b336:	1431      	asrs	r1, r6, #16
 801b338:	fb08 2101 	mla	r1, r8, r1, r2
 801b33c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b340:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801b344:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801b348:	f830 c011 	ldrh.w	ip, [r0, r1, lsl #1]
 801b34c:	8851      	ldrh	r1, [r2, #2]
 801b34e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801b352:	f1be 0f00 	cmp.w	lr, #0
 801b356:	d006      	beq.n	801b366 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2be>
 801b358:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b35a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b35c:	1810      	adds	r0, r2, r0
 801b35e:	5bd2      	ldrh	r2, [r2, r7]
 801b360:	920e      	str	r2, [sp, #56]	; 0x38
 801b362:	8842      	ldrh	r2, [r0, #2]
 801b364:	920f      	str	r2, [sp, #60]	; 0x3c
 801b366:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801b36a:	fb13 f20e 	smulbb	r2, r3, lr
 801b36e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b372:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801b376:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b37a:	10d2      	asrs	r2, r2, #3
 801b37c:	ea40 000c 	orr.w	r0, r0, ip
 801b380:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b384:	f1ce 0c10 	rsb	ip, lr, #16
 801b388:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b38c:	ebac 0c03 	sub.w	ip, ip, r3
 801b390:	ea4a 0101 	orr.w	r1, sl, r1
 801b394:	ebc2 0343 	rsb	r3, r2, r3, lsl #1
 801b398:	4359      	muls	r1, r3
 801b39a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b39c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801b3a0:	fb0c 1c00 	mla	ip, ip, r0, r1
 801b3a4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 801b3a8:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 801b3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b3ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 801b3b0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801b3b4:	041b      	lsls	r3, r3, #16
 801b3b6:	ea4a 0000 	orr.w	r0, sl, r0
 801b3ba:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b3be:	f421 6afc 	bic.w	sl, r1, #2016	; 0x7e0
 801b3c2:	fb02 c000 	mla	r0, r2, r0, ip
 801b3c6:	ea43 0a0a 	orr.w	sl, r3, sl
 801b3ca:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 801b3ce:	fb02 000a 	mla	r0, r2, sl, r0
 801b3d2:	0d43      	lsrs	r3, r0, #21
 801b3d4:	0940      	lsrs	r0, r0, #5
 801b3d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b3da:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b3de:	4318      	orrs	r0, r3
 801b3e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b3e2:	f82b 0b02 	strh.w	r0, [fp], #2
 801b3e6:	441c      	add	r4, r3
 801b3e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b3ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801b3ee:	441e      	add	r6, r3
 801b3f0:	e6b8      	b.n	801b164 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xbc>
 801b3f2:	b013      	add	sp, #76	; 0x4c
 801b3f4:	ecbd 8b0a 	vpop	{d8-d12}
 801b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801b3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b400:	8808      	ldrh	r0, [r1, #0]
 801b402:	b085      	sub	sp, #20
 801b404:	1206      	asrs	r6, r0, #8
 801b406:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801b40a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b40e:	9600      	str	r6, [sp, #0]
 801b410:	10c6      	asrs	r6, r0, #3
 801b412:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b416:	9601      	str	r6, [sp, #4]
 801b418:	00c0      	lsls	r0, r0, #3
 801b41a:	fb04 c603 	mla	r6, r4, r3, ip
 801b41e:	b2c0      	uxtb	r0, r0
 801b420:	4691      	mov	r9, r2
 801b422:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801b426:	9a00      	ldr	r2, [sp, #0]
 801b428:	9002      	str	r0, [sp, #8]
 801b42a:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801b42e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801b432:	9a01      	ldr	r2, [sp, #4]
 801b434:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801b438:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801b43c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801b440:	2c00      	cmp	r4, #0
 801b442:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801b446:	db3a      	blt.n	801b4be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801b448:	45a0      	cmp	r8, r4
 801b44a:	dd38      	ble.n	801b4be <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc2>
 801b44c:	f1bc 0f00 	cmp.w	ip, #0
 801b450:	db33      	blt.n	801b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801b452:	4563      	cmp	r3, ip
 801b454:	dd31      	ble.n	801b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xbe>
 801b456:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801b45a:	f11c 0601 	adds.w	r6, ip, #1
 801b45e:	d431      	bmi.n	801b4c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801b460:	42b3      	cmp	r3, r6
 801b462:	dd2f      	ble.n	801b4c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801b464:	b375      	cbz	r5, 801b4c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xc8>
 801b466:	f8de 6004 	ldr.w	r6, [lr, #4]
 801b46a:	3401      	adds	r4, #1
 801b46c:	d42e      	bmi.n	801b4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801b46e:	45a0      	cmp	r8, r4
 801b470:	dd2c      	ble.n	801b4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801b472:	b35f      	cbz	r7, 801b4cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd0>
 801b474:	f1bc 0f00 	cmp.w	ip, #0
 801b478:	db26      	blt.n	801b4c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801b47a:	4563      	cmp	r3, ip
 801b47c:	dd24      	ble.n	801b4c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xcc>
 801b47e:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801b482:	f11c 0c01 	adds.w	ip, ip, #1
 801b486:	d405      	bmi.n	801b494 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801b488:	4563      	cmp	r3, ip
 801b48a:	dd03      	ble.n	801b494 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801b48c:	b115      	cbz	r5, 801b494 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801b48e:	3301      	adds	r3, #1
 801b490:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801b494:	2d0f      	cmp	r5, #15
 801b496:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801b49a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b49e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801b4a2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801b4a6:	d801      	bhi.n	801b4ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 801b4a8:	2f0f      	cmp	r7, #15
 801b4aa:	d911      	bls.n	801b4d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xd4>
 801b4ac:	4b82      	ldr	r3, [pc, #520]	; (801b6b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 801b4ae:	4a83      	ldr	r2, [pc, #524]	; (801b6bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c0>)
 801b4b0:	4883      	ldr	r0, [pc, #524]	; (801b6c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2c4>)
 801b4b2:	f240 3173 	movw	r1, #883	; 0x373
 801b4b6:	f002 f9dd 	bl	801d874 <__assert_func>
 801b4ba:	4602      	mov	r2, r0
 801b4bc:	e7cd      	b.n	801b45a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x5e>
 801b4be:	4606      	mov	r6, r0
 801b4c0:	4602      	mov	r2, r0
 801b4c2:	e7d2      	b.n	801b46a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801b4c4:	4606      	mov	r6, r0
 801b4c6:	e7d0      	b.n	801b46a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x6e>
 801b4c8:	4604      	mov	r4, r0
 801b4ca:	e7da      	b.n	801b482 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x86>
 801b4cc:	4604      	mov	r4, r0
 801b4ce:	e7e1      	b.n	801b494 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 801b4d0:	b2ab      	uxth	r3, r5
 801b4d2:	b2bf      	uxth	r7, r7
 801b4d4:	fb03 fe07 	mul.w	lr, r3, r7
 801b4d8:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801b4dc:	011b      	lsls	r3, r3, #4
 801b4de:	eba3 0c0e 	sub.w	ip, r3, lr
 801b4e2:	b2bf      	uxth	r7, r7
 801b4e4:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801b4e8:	fa1f fc8c 	uxth.w	ip, ip
 801b4ec:	1bed      	subs	r5, r5, r7
 801b4ee:	b2ad      	uxth	r5, r5
 801b4f0:	fb0c f30a 	mul.w	r3, ip, sl
 801b4f4:	fb05 330b 	mla	r3, r5, fp, r3
 801b4f8:	fb07 3309 	mla	r3, r7, r9, r3
 801b4fc:	fb0e 3308 	mla	r3, lr, r8, r3
 801b500:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b504:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801b508:	9303      	str	r3, [sp, #12]
 801b50a:	d018      	beq.n	801b53e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x142>
 801b50c:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b510:	fb0b f303 	mul.w	r3, fp, r3
 801b514:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b518:	fb0b fb02 	mul.w	fp, fp, r2
 801b51c:	0a1a      	lsrs	r2, r3, #8
 801b51e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b522:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801b526:	441a      	add	r2, r3
 801b528:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801b52c:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801b530:	0a12      	lsrs	r2, r2, #8
 801b532:	0a1b      	lsrs	r3, r3, #8
 801b534:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b53c:	431a      	orrs	r2, r3
 801b53e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b542:	d019      	beq.n	801b578 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x17c>
 801b544:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801b548:	fb0a fb0b 	mul.w	fp, sl, fp
 801b54c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b550:	fb0a fa06 	mul.w	sl, sl, r6
 801b554:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801b558:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b55c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b560:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801b564:	445e      	add	r6, fp
 801b566:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801b56a:	0a36      	lsrs	r6, r6, #8
 801b56c:	0a1b      	lsrs	r3, r3, #8
 801b56e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801b572:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b576:	431e      	orrs	r6, r3
 801b578:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b57c:	d019      	beq.n	801b5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1b6>
 801b57e:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801b582:	fb09 fa0a 	mul.w	sl, r9, sl
 801b586:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b58a:	fb09 f904 	mul.w	r9, r9, r4
 801b58e:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801b592:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b596:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b59a:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801b59e:	4454      	add	r4, sl
 801b5a0:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801b5a4:	0a24      	lsrs	r4, r4, #8
 801b5a6:	0a1b      	lsrs	r3, r3, #8
 801b5a8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801b5ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b5b0:	431c      	orrs	r4, r3
 801b5b2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b5b6:	d019      	beq.n	801b5ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1f0>
 801b5b8:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801b5bc:	fb08 f909 	mul.w	r9, r8, r9
 801b5c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b5c4:	fb08 f800 	mul.w	r8, r8, r0
 801b5c8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801b5cc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b5d0:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801b5d4:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801b5d8:	4448      	add	r0, r9
 801b5da:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801b5de:	0a00      	lsrs	r0, r0, #8
 801b5e0:	0a1b      	lsrs	r3, r3, #8
 801b5e2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b5e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b5ea:	4318      	orrs	r0, r3
 801b5ec:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b5f0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b5f4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801b5f8:	fb0c f808 	mul.w	r8, ip, r8
 801b5fc:	fb0c f606 	mul.w	r6, ip, r6
 801b600:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b604:	fb05 6202 	mla	r2, r5, r2, r6
 801b608:	fb05 8803 	mla	r8, r5, r3, r8
 801b60c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801b610:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b614:	fb07 8803 	mla	r8, r7, r3, r8
 801b618:	fb07 2704 	mla	r7, r7, r4, r2
 801b61c:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801b620:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b624:	fb0e 8303 	mla	r3, lr, r3, r8
 801b628:	fb0e 7e00 	mla	lr, lr, r0, r7
 801b62c:	0a1b      	lsrs	r3, r3, #8
 801b62e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b632:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b636:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b63a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b63e:	ea43 0e0e 	orr.w	lr, r3, lr
 801b642:	9b03      	ldr	r3, [sp, #12]
 801b644:	b2a4      	uxth	r4, r4
 801b646:	4363      	muls	r3, r4
 801b648:	1c5a      	adds	r2, r3, #1
 801b64a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b64e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801b652:	9b00      	ldr	r3, [sp, #0]
 801b654:	b2d2      	uxtb	r2, r2
 801b656:	ea4f 451e 	mov.w	r5, lr, lsr #16
 801b65a:	fb13 f302 	smulbb	r3, r3, r2
 801b65e:	fb05 3304 	mla	r3, r5, r4, r3
 801b662:	b29d      	uxth	r5, r3
 801b664:	9b01      	ldr	r3, [sp, #4]
 801b666:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801b66a:	fb13 f302 	smulbb	r3, r3, r2
 801b66e:	fb00 3004 	mla	r0, r0, r4, r3
 801b672:	9b02      	ldr	r3, [sp, #8]
 801b674:	fa5f fe8e 	uxtb.w	lr, lr
 801b678:	fb13 f202 	smulbb	r2, r3, r2
 801b67c:	fb0e 2e04 	mla	lr, lr, r4, r2
 801b680:	fa1f fe8e 	uxth.w	lr, lr
 801b684:	b280      	uxth	r0, r0
 801b686:	f10e 0201 	add.w	r2, lr, #1
 801b68a:	1c6b      	adds	r3, r5, #1
 801b68c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801b690:	1c42      	adds	r2, r0, #1
 801b692:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801b696:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801b69a:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b69e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801b6a2:	0952      	lsrs	r2, r2, #5
 801b6a4:	ea43 030e 	orr.w	r3, r3, lr
 801b6a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801b6ac:	4313      	orrs	r3, r2
 801b6ae:	800b      	strh	r3, [r1, #0]
 801b6b0:	b005      	add	sp, #20
 801b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6b6:	bf00      	nop
 801b6b8:	080214bb 	.word	0x080214bb
 801b6bc:	08021a19 	.word	0x08021a19
 801b6c0:	08021543 	.word	0x08021543

0801b6c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6c8:	ed2d 8b08 	vpush	{d8-d11}
 801b6cc:	b099      	sub	sp, #100	; 0x64
 801b6ce:	eeb0 aa40 	vmov.f32	s20, s0
 801b6d2:	9306      	str	r3, [sp, #24]
 801b6d4:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801b6d8:	9307      	str	r3, [sp, #28]
 801b6da:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801b6de:	9216      	str	r2, [sp, #88]	; 0x58
 801b6e0:	9310      	str	r3, [sp, #64]	; 0x40
 801b6e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801b6e4:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801b6e8:	9113      	str	r1, [sp, #76]	; 0x4c
 801b6ea:	9315      	str	r3, [sp, #84]	; 0x54
 801b6ec:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801b6f0:	9017      	str	r0, [sp, #92]	; 0x5c
 801b6f2:	6850      	ldr	r0, [r2, #4]
 801b6f4:	6812      	ldr	r2, [r2, #0]
 801b6f6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b6f8:	fb00 1303 	mla	r3, r0, r3, r1
 801b6fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b700:	930a      	str	r3, [sp, #40]	; 0x28
 801b702:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	9312      	str	r3, [sp, #72]	; 0x48
 801b708:	9b07      	ldr	r3, [sp, #28]
 801b70a:	009b      	lsls	r3, r3, #2
 801b70c:	eef0 9a60 	vmov.f32	s19, s1
 801b710:	eeb0 9a41 	vmov.f32	s18, s2
 801b714:	eeb0 8a62 	vmov.f32	s16, s5
 801b718:	eef0 8a43 	vmov.f32	s17, s6
 801b71c:	eef0 ba44 	vmov.f32	s23, s8
 801b720:	eeb0 ba64 	vmov.f32	s22, s9
 801b724:	eef0 aa45 	vmov.f32	s21, s10
 801b728:	930e      	str	r3, [sp, #56]	; 0x38
 801b72a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	dc03      	bgt.n	801b738 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801b730:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b732:	2b00      	cmp	r3, #0
 801b734:	f340 8352 	ble.w	801bddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801b738:	9b06      	ldr	r3, [sp, #24]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	f340 81a8 	ble.w	801ba90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3cc>
 801b740:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b742:	1412      	asrs	r2, r2, #16
 801b744:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b748:	d430      	bmi.n	801b7ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801b74a:	9807      	ldr	r0, [sp, #28]
 801b74c:	1c51      	adds	r1, r2, #1
 801b74e:	4288      	cmp	r0, r1
 801b750:	dd2f      	ble.n	801b7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b752:	2b00      	cmp	r3, #0
 801b754:	db2d      	blt.n	801b7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b756:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b758:	1c59      	adds	r1, r3, #1
 801b75a:	4288      	cmp	r0, r1
 801b75c:	dd29      	ble.n	801b7b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xee>
 801b75e:	9b06      	ldr	r3, [sp, #24]
 801b760:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b762:	992b      	ldr	r1, [sp, #172]	; 0xac
 801b764:	3b01      	subs	r3, #1
 801b766:	fb02 1203 	mla	r2, r2, r3, r1
 801b76a:	1412      	asrs	r2, r2, #16
 801b76c:	d42c      	bmi.n	801b7c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801b76e:	9907      	ldr	r1, [sp, #28]
 801b770:	3201      	adds	r2, #1
 801b772:	4291      	cmp	r1, r2
 801b774:	dd28      	ble.n	801b7c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801b776:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801b778:	fb02 4303 	mla	r3, r2, r3, r4
 801b77c:	141b      	asrs	r3, r3, #16
 801b77e:	d423      	bmi.n	801b7c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801b780:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b782:	3301      	adds	r3, #1
 801b784:	429a      	cmp	r2, r3
 801b786:	dd1f      	ble.n	801b7c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x104>
 801b788:	9b06      	ldr	r3, [sp, #24]
 801b78a:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b78e:	f8bd b054 	ldrh.w	fp, [sp, #84]	; 0x54
 801b792:	9311      	str	r3, [sp, #68]	; 0x44
 801b794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b796:	2b00      	cmp	r3, #0
 801b798:	f300 81e3 	bgt.w	801bb62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x49e>
 801b79c:	9b06      	ldr	r3, [sp, #24]
 801b79e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b7a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7a4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801b7a8:	930a      	str	r3, [sp, #40]	; 0x28
 801b7aa:	e173      	b.n	801ba94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3d0>
 801b7ac:	1c51      	adds	r1, r2, #1
 801b7ae:	f040 8162 	bne.w	801ba76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801b7b2:	9907      	ldr	r1, [sp, #28]
 801b7b4:	428a      	cmp	r2, r1
 801b7b6:	f280 815e 	bge.w	801ba76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801b7ba:	1c5f      	adds	r7, r3, #1
 801b7bc:	f2c0 815b 	blt.w	801ba76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801b7c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b7c2:	4293      	cmp	r3, r2
 801b7c4:	f280 8157 	bge.w	801ba76 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b2>
 801b7c8:	9b06      	ldr	r3, [sp, #24]
 801b7ca:	9314      	str	r3, [sp, #80]	; 0x50
 801b7cc:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 801b7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7d2:	9311      	str	r3, [sp, #68]	; 0x44
 801b7d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	dde0      	ble.n	801b79c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd8>
 801b7da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b7dc:	f3c2 3003 	ubfx	r0, r2, #12, #4
 801b7e0:	1412      	asrs	r2, r2, #16
 801b7e2:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b7e6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b7ea:	f100 81a1 	bmi.w	801bb30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x46c>
 801b7ee:	9e07      	ldr	r6, [sp, #28]
 801b7f0:	1c55      	adds	r5, r2, #1
 801b7f2:	42ae      	cmp	r6, r5
 801b7f4:	f340 819e 	ble.w	801bb34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	f2c0 819b 	blt.w	801bb34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801b7fe:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801b800:	1c5d      	adds	r5, r3, #1
 801b802:	42ae      	cmp	r6, r5
 801b804:	f340 8196 	ble.w	801bb34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x470>
 801b808:	9d07      	ldr	r5, [sp, #28]
 801b80a:	fb03 2305 	mla	r3, r3, r5, r2
 801b80e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b810:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b818:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b81c:	2800      	cmp	r0, #0
 801b81e:	f000 8178 	beq.w	801bb12 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44e>
 801b822:	686a      	ldr	r2, [r5, #4]
 801b824:	920b      	str	r2, [sp, #44]	; 0x2c
 801b826:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b82a:	2900      	cmp	r1, #0
 801b82c:	f000 817a 	beq.w	801bb24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x460>
 801b830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b832:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801b834:	18aa      	adds	r2, r5, r2
 801b836:	59ad      	ldr	r5, [r5, r6]
 801b838:	6852      	ldr	r2, [r2, #4]
 801b83a:	9508      	str	r5, [sp, #32]
 801b83c:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 801b840:	920c      	str	r2, [sp, #48]	; 0x30
 801b842:	0e15      	lsrs	r5, r2, #24
 801b844:	b280      	uxth	r0, r0
 801b846:	b289      	uxth	r1, r1
 801b848:	fb00 fb01 	mul.w	fp, r0, r1
 801b84c:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 801b850:	0100      	lsls	r0, r0, #4
 801b852:	eba0 090b 	sub.w	r9, r0, fp
 801b856:	b289      	uxth	r1, r1
 801b858:	f5c0 7280 	rsb	r2, r0, #256	; 0x100
 801b85c:	fa1f f989 	uxth.w	r9, r9
 801b860:	1a52      	subs	r2, r2, r1
 801b862:	b292      	uxth	r2, r2
 801b864:	fb09 f008 	mul.w	r0, r9, r8
 801b868:	fb02 000c 	mla	r0, r2, ip, r0
 801b86c:	fb01 000a 	mla	r0, r1, sl, r0
 801b870:	fb0b 0005 	mla	r0, fp, r5, r0
 801b874:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b878:	2800      	cmp	r0, #0
 801b87a:	f000 80ef 	beq.w	801ba5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801b87e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b882:	d01b      	beq.n	801b8bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1f8>
 801b884:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801b888:	fb0c fe0e 	mul.w	lr, ip, lr
 801b88c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b890:	fb0c fc03 	mul.w	ip, ip, r3
 801b894:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801b898:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b89c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b8a0:	4473      	add	r3, lr
 801b8a2:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801b8a6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801b8aa:	0a1b      	lsrs	r3, r3, #8
 801b8ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8b0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b8b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b8b8:	ea43 030e 	orr.w	r3, r3, lr
 801b8bc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801b8c0:	d01e      	beq.n	801b900 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x23c>
 801b8c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b8c4:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b8c8:	fb08 fc0c 	mul.w	ip, r8, ip
 801b8cc:	f406 4e7f 	and.w	lr, r6, #65280	; 0xff00
 801b8d0:	fb08 f80e 	mul.w	r8, r8, lr
 801b8d4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801b8d8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b8dc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801b8e0:	44e6      	add	lr, ip
 801b8e2:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801b8e6:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801b8ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8ee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b8f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b8f6:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801b8fa:	ea4e 0608 	orr.w	r6, lr, r8
 801b8fe:	960b      	str	r6, [sp, #44]	; 0x2c
 801b900:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b904:	d01e      	beq.n	801b944 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x280>
 801b906:	9e08      	ldr	r6, [sp, #32]
 801b908:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b90c:	fb0a f808 	mul.w	r8, sl, r8
 801b910:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801b914:	fb0a fa0c 	mul.w	sl, sl, ip
 801b918:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b91c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b920:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b924:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b928:	44c6      	add	lr, r8
 801b92a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b92e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b932:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b936:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b93a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b93e:	ea4e 060a 	orr.w	r6, lr, sl
 801b942:	9608      	str	r6, [sp, #32]
 801b944:	2dff      	cmp	r5, #255	; 0xff
 801b946:	d01d      	beq.n	801b984 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801b948:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b94a:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801b94e:	fb05 f808 	mul.w	r8, r5, r8
 801b952:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801b956:	fb05 f50c 	mul.w	r5, r5, ip
 801b95a:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801b95e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b962:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801b966:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801b96a:	44c6      	add	lr, r8
 801b96c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b970:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b974:	0a2d      	lsrs	r5, r5, #8
 801b976:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b97a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b97e:	ea4e 0505 	orr.w	r5, lr, r5
 801b982:	950c      	str	r5, [sp, #48]	; 0x30
 801b984:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b986:	9e08      	ldr	r6, [sp, #32]
 801b988:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b98c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b990:	fb09 f505 	mul.w	r5, r9, r5
 801b994:	fb02 550c 	mla	r5, r2, ip, r5
 801b998:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b99c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b99e:	fb01 550c 	mla	r5, r1, ip, r5
 801b9a2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801b9a6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801b9a8:	fb0b 550c 	mla	r5, fp, ip, r5
 801b9ac:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 801b9b0:	fb09 f90c 	mul.w	r9, r9, ip
 801b9b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b9b8:	fb02 9303 	mla	r3, r2, r3, r9
 801b9bc:	9a08      	ldr	r2, [sp, #32]
 801b9be:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 801b9c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b9c4:	fb01 330e 	mla	r3, r1, lr, r3
 801b9c8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801b9cc:	fb0b 3b01 	mla	fp, fp, r1, r3
 801b9d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b9d2:	0a2d      	lsrs	r5, r5, #8
 801b9d4:	f8b3 c000 	ldrh.w	ip, [r3]
 801b9d8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801b9dc:	fb00 f307 	mul.w	r3, r0, r7
 801b9e0:	1c58      	adds	r0, r3, #1
 801b9e2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801b9e6:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801b9ea:	ea45 050b 	orr.w	r5, r5, fp
 801b9ee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b9f2:	0c29      	lsrs	r1, r5, #16
 801b9f4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b9f8:	ea4f 232c 	mov.w	r3, ip, asr #8
 801b9fc:	b2c0      	uxtb	r0, r0
 801b9fe:	fb11 f107 	smulbb	r1, r1, r7
 801ba02:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ba06:	fb03 1300 	mla	r3, r3, r0, r1
 801ba0a:	b299      	uxth	r1, r3
 801ba0c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801ba10:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801ba14:	fb13 f307 	smulbb	r3, r3, r7
 801ba18:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ba1c:	fb02 3200 	mla	r2, r2, r0, r3
 801ba20:	b2ed      	uxtb	r5, r5
 801ba22:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801ba26:	b2db      	uxtb	r3, r3
 801ba28:	fb15 f507 	smulbb	r5, r5, r7
 801ba2c:	fb03 5500 	mla	r5, r3, r0, r5
 801ba30:	b292      	uxth	r2, r2
 801ba32:	b2ad      	uxth	r5, r5
 801ba34:	1c4b      	adds	r3, r1, #1
 801ba36:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ba3a:	1c68      	adds	r0, r5, #1
 801ba3c:	1c51      	adds	r1, r2, #1
 801ba3e:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 801ba42:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ba46:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801ba4a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801ba4e:	0952      	lsrs	r2, r2, #5
 801ba50:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ba54:	432b      	orrs	r3, r5
 801ba56:	4313      	orrs	r3, r2
 801ba58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ba5a:	8013      	strh	r3, [r2, #0]
 801ba5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba5e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ba60:	3302      	adds	r3, #2
 801ba62:	9311      	str	r3, [sp, #68]	; 0x44
 801ba64:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ba66:	4413      	add	r3, r2
 801ba68:	932b      	str	r3, [sp, #172]	; 0xac
 801ba6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba6c:	441c      	add	r4, r3
 801ba6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ba70:	3b01      	subs	r3, #1
 801ba72:	9314      	str	r3, [sp, #80]	; 0x50
 801ba74:	e6ae      	b.n	801b7d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x110>
 801ba76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ba78:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ba7a:	4413      	add	r3, r2
 801ba7c:	932b      	str	r3, [sp, #172]	; 0xac
 801ba7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba80:	441c      	add	r4, r3
 801ba82:	9b06      	ldr	r3, [sp, #24]
 801ba84:	3b01      	subs	r3, #1
 801ba86:	9306      	str	r3, [sp, #24]
 801ba88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba8a:	3302      	adds	r3, #2
 801ba8c:	930a      	str	r3, [sp, #40]	; 0x28
 801ba8e:	e653      	b.n	801b738 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x74>
 801ba90:	f47f ae65 	bne.w	801b75e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801ba94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	f340 81a0 	ble.w	801bddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x718>
 801ba9c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801baa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801baa4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801baa8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801baaa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801baae:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801bab2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801bab6:	eef0 6a48 	vmov.f32	s13, s16
 801baba:	ee69 7a27 	vmul.f32	s15, s18, s15
 801babe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bac2:	ee37 8a48 	vsub.f32	s16, s14, s16
 801bac6:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 801baca:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801bace:	eef0 6a68 	vmov.f32	s13, s17
 801bad2:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801bad6:	ee18 2a10 	vmov	r2, s16
 801bada:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801bade:	fb92 f3f3 	sdiv	r3, r2, r3
 801bae2:	ee18 2a90 	vmov	r2, s17
 801bae6:	932d      	str	r3, [sp, #180]	; 0xb4
 801bae8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801baea:	fb92 f3f3 	sdiv	r3, r2, r3
 801baee:	932e      	str	r3, [sp, #184]	; 0xb8
 801baf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801baf2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801baf4:	3b01      	subs	r3, #1
 801baf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bafa:	9313      	str	r3, [sp, #76]	; 0x4c
 801bafc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bafe:	bf08      	it	eq
 801bb00:	4613      	moveq	r3, r2
 801bb02:	ee16 4a90 	vmov	r4, s13
 801bb06:	9306      	str	r3, [sp, #24]
 801bb08:	eef0 8a67 	vmov.f32	s17, s15
 801bb0c:	eeb0 8a47 	vmov.f32	s16, s14
 801bb10:	e60b      	b.n	801b72a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x66>
 801bb12:	b151      	cbz	r1, 801bb2a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801bb14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb16:	58aa      	ldr	r2, [r5, r2]
 801bb18:	9208      	str	r2, [sp, #32]
 801bb1a:	ea4f 6a12 	mov.w	sl, r2, lsr #24
 801bb1e:	25ff      	movs	r5, #255	; 0xff
 801bb20:	46a8      	mov	r8, r5
 801bb22:	e68f      	b.n	801b844 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801bb24:	25ff      	movs	r5, #255	; 0xff
 801bb26:	46aa      	mov	sl, r5
 801bb28:	e68c      	b.n	801b844 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x180>
 801bb2a:	25ff      	movs	r5, #255	; 0xff
 801bb2c:	46aa      	mov	sl, r5
 801bb2e:	e7f7      	b.n	801bb20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x45c>
 801bb30:	1c56      	adds	r6, r2, #1
 801bb32:	d193      	bne.n	801ba5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801bb34:	9d07      	ldr	r5, [sp, #28]
 801bb36:	4295      	cmp	r5, r2
 801bb38:	dd90      	ble.n	801ba5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801bb3a:	1c5d      	adds	r5, r3, #1
 801bb3c:	db8e      	blt.n	801ba5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801bb3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801bb40:	429d      	cmp	r5, r3
 801bb42:	dd8b      	ble.n	801ba5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801bb44:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801bb46:	9201      	str	r2, [sp, #4]
 801bb48:	e9cd 3002 	strd	r3, r0, [sp, #8]
 801bb4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb4e:	9300      	str	r3, [sp, #0]
 801bb50:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801bb54:	9b07      	ldr	r3, [sp, #28]
 801bb56:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bb58:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
 801bb5c:	f7ff fc4e 	bl	801b3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801bb60:	e77c      	b.n	801ba5c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801bb62:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bb64:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801bb66:	9d07      	ldr	r5, [sp, #28]
 801bb68:	1412      	asrs	r2, r2, #16
 801bb6a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801bb6e:	1423      	asrs	r3, r4, #16
 801bb70:	fb05 2303 	mla	r3, r5, r3, r2
 801bb74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bb76:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801bb7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bb7e:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801bb82:	0e1e      	lsrs	r6, r3, #24
 801bb84:	2900      	cmp	r1, #0
 801bb86:	f000 811a 	beq.w	801bdbe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6fa>
 801bb8a:	686a      	ldr	r2, [r5, #4]
 801bb8c:	920d      	str	r2, [sp, #52]	; 0x34
 801bb8e:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801bb92:	2800      	cmp	r0, #0
 801bb94:	f000 811c 	beq.w	801bdd0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70c>
 801bb98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb9a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801bb9c:	18aa      	adds	r2, r5, r2
 801bb9e:	59ed      	ldr	r5, [r5, r7]
 801bba0:	6852      	ldr	r2, [r2, #4]
 801bba2:	9509      	str	r5, [sp, #36]	; 0x24
 801bba4:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801bba8:	920f      	str	r2, [sp, #60]	; 0x3c
 801bbaa:	0e15      	lsrs	r5, r2, #24
 801bbac:	b289      	uxth	r1, r1
 801bbae:	b280      	uxth	r0, r0
 801bbb0:	fb01 f900 	mul.w	r9, r1, r0
 801bbb4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801bbb8:	0109      	lsls	r1, r1, #4
 801bbba:	eba1 0e09 	sub.w	lr, r1, r9
 801bbbe:	b280      	uxth	r0, r0
 801bbc0:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801bbc4:	fa1f fe8e 	uxth.w	lr, lr
 801bbc8:	1a12      	subs	r2, r2, r0
 801bbca:	b292      	uxth	r2, r2
 801bbcc:	fb0e f10c 	mul.w	r1, lr, ip
 801bbd0:	fb02 1106 	mla	r1, r2, r6, r1
 801bbd4:	fb00 1108 	mla	r1, r0, r8, r1
 801bbd8:	fb09 1105 	mla	r1, r9, r5, r1
 801bbdc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801bbe0:	2900      	cmp	r1, #0
 801bbe2:	f000 80e0 	beq.w	801bda6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e2>
 801bbe6:	2eff      	cmp	r6, #255	; 0xff
 801bbe8:	d016      	beq.n	801bc18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x554>
 801bbea:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801bbee:	4377      	muls	r7, r6
 801bbf0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bbf4:	435e      	muls	r6, r3
 801bbf6:	0a3b      	lsrs	r3, r7, #8
 801bbf8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bbfc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bc00:	443b      	add	r3, r7
 801bc02:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801bc06:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801bc0a:	0a1b      	lsrs	r3, r3, #8
 801bc0c:	0a3f      	lsrs	r7, r7, #8
 801bc0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bc12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bc16:	433b      	orrs	r3, r7
 801bc18:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bc1c:	d01d      	beq.n	801bc5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801bc1e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801bc20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801bc22:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bc26:	fb0c f606 	mul.w	r6, ip, r6
 801bc2a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bc2e:	fb0c fc07 	mul.w	ip, ip, r7
 801bc32:	0a37      	lsrs	r7, r6, #8
 801bc34:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc38:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bc3c:	4437      	add	r7, r6
 801bc3e:	f50c 7680 	add.w	r6, ip, #256	; 0x100
 801bc42:	eb06 2c1c 	add.w	ip, r6, ip, lsr #8
 801bc46:	0a3f      	lsrs	r7, r7, #8
 801bc48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc4c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bc54:	ea47 060c 	orr.w	r6, r7, ip
 801bc58:	960d      	str	r6, [sp, #52]	; 0x34
 801bc5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bc5e:	d01d      	beq.n	801bc9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5d8>
 801bc60:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bc62:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801bc66:	fb08 fc0c 	mul.w	ip, r8, ip
 801bc6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bc6e:	fb08 f806 	mul.w	r8, r8, r6
 801bc72:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801bc76:	f508 7680 	add.w	r6, r8, #256	; 0x100
 801bc7a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bc82:	eb06 2818 	add.w	r8, r6, r8, lsr #8
 801bc86:	4467      	add	r7, ip
 801bc88:	0a3f      	lsrs	r7, r7, #8
 801bc8a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bc8e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bc92:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801bc96:	ea47 0608 	orr.w	r6, r7, r8
 801bc9a:	9609      	str	r6, [sp, #36]	; 0x24
 801bc9c:	2dff      	cmp	r5, #255	; 0xff
 801bc9e:	d01a      	beq.n	801bcd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x612>
 801bca0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bca2:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801bca6:	fb05 fc0c 	mul.w	ip, r5, ip
 801bcaa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bcae:	4375      	muls	r5, r6
 801bcb0:	ea4f 271c 	mov.w	r7, ip, lsr #8
 801bcb4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bcb8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bcbc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801bcc0:	4467      	add	r7, ip
 801bcc2:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801bcc6:	0a3f      	lsrs	r7, r7, #8
 801bcc8:	0a2d      	lsrs	r5, r5, #8
 801bcca:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801bcce:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801bcd2:	433d      	orrs	r5, r7
 801bcd4:	950f      	str	r5, [sp, #60]	; 0x3c
 801bcd6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bcd8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801bcdc:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 801bce0:	fb0e f505 	mul.w	r5, lr, r5
 801bce4:	fb02 5506 	mla	r5, r2, r6, r5
 801bce8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bcea:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bcee:	fb00 5506 	mla	r5, r0, r6, r5
 801bcf2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bcf4:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bcf8:	fb09 5506 	mla	r5, r9, r6, r5
 801bcfc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801bcfe:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bd02:	fb0e fe06 	mul.w	lr, lr, r6
 801bd06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bd0a:	fb02 e303 	mla	r3, r2, r3, lr
 801bd0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd10:	f402 477f 	and.w	r7, r2, #65280	; 0xff00
 801bd14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bd16:	fb00 3307 	mla	r3, r0, r7, r3
 801bd1a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801bd1e:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bd22:	fb01 f10b 	mul.w	r1, r1, fp
 801bd26:	0a2d      	lsrs	r5, r5, #8
 801bd28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd2c:	f8ba 0000 	ldrh.w	r0, [sl]
 801bd30:	1c4b      	adds	r3, r1, #1
 801bd32:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801bd36:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bd3a:	ea45 050c 	orr.w	r5, r5, ip
 801bd3e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801bd42:	1202      	asrs	r2, r0, #8
 801bd44:	0c2b      	lsrs	r3, r5, #16
 801bd46:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801bd4a:	b2c9      	uxtb	r1, r1
 801bd4c:	fb13 f30b 	smulbb	r3, r3, fp
 801bd50:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801bd54:	fb02 3201 	mla	r2, r2, r1, r3
 801bd58:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801bd5c:	10c3      	asrs	r3, r0, #3
 801bd5e:	b2ed      	uxtb	r5, r5
 801bd60:	00c0      	lsls	r0, r0, #3
 801bd62:	b2c0      	uxtb	r0, r0
 801bd64:	fb15 f50b 	smulbb	r5, r5, fp
 801bd68:	fb00 5001 	mla	r0, r0, r1, r5
 801bd6c:	b292      	uxth	r2, r2
 801bd6e:	fb16 f60b 	smulbb	r6, r6, fp
 801bd72:	b280      	uxth	r0, r0
 801bd74:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801bd78:	fb03 6301 	mla	r3, r3, r1, r6
 801bd7c:	1c51      	adds	r1, r2, #1
 801bd7e:	1c46      	adds	r6, r0, #1
 801bd80:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bd84:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801bd88:	b29b      	uxth	r3, r3
 801bd8a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801bd8e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801bd92:	4332      	orrs	r2, r6
 801bd94:	1c5e      	adds	r6, r3, #1
 801bd96:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801bd9a:	095b      	lsrs	r3, r3, #5
 801bd9c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bda0:	431a      	orrs	r2, r3
 801bda2:	f8aa 2000 	strh.w	r2, [sl]
 801bda6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801bda8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801bdaa:	4413      	add	r3, r2
 801bdac:	932b      	str	r3, [sp, #172]	; 0xac
 801bdae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bdb0:	441c      	add	r4, r3
 801bdb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bdb4:	3b01      	subs	r3, #1
 801bdb6:	f10a 0a02 	add.w	sl, sl, #2
 801bdba:	9311      	str	r3, [sp, #68]	; 0x44
 801bdbc:	e4ea      	b.n	801b794 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801bdbe:	b150      	cbz	r0, 801bdd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x712>
 801bdc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdc2:	58aa      	ldr	r2, [r5, r2]
 801bdc4:	9209      	str	r2, [sp, #36]	; 0x24
 801bdc6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801bdca:	25ff      	movs	r5, #255	; 0xff
 801bdcc:	46ac      	mov	ip, r5
 801bdce:	e6ed      	b.n	801bbac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801bdd0:	25ff      	movs	r5, #255	; 0xff
 801bdd2:	46a8      	mov	r8, r5
 801bdd4:	e6ea      	b.n	801bbac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801bdd6:	25ff      	movs	r5, #255	; 0xff
 801bdd8:	46a8      	mov	r8, r5
 801bdda:	e7f7      	b.n	801bdcc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801bddc:	b019      	add	sp, #100	; 0x64
 801bdde:	ecbd 8b08 	vpop	{d8-d11}
 801bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 801bde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdec:	8808      	ldrh	r0, [r1, #0]
 801bdee:	b085      	sub	sp, #20
 801bdf0:	1206      	asrs	r6, r0, #8
 801bdf2:	e9dd c40f 	ldrd	ip, r4, [sp, #60]	; 0x3c
 801bdf6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801bdfa:	9600      	str	r6, [sp, #0]
 801bdfc:	10c6      	asrs	r6, r0, #3
 801bdfe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801be02:	9601      	str	r6, [sp, #4]
 801be04:	00c0      	lsls	r0, r0, #3
 801be06:	fb04 c603 	mla	r6, r4, r3, ip
 801be0a:	b2c0      	uxtb	r0, r0
 801be0c:	4691      	mov	r9, r2
 801be0e:	eb02 0e86 	add.w	lr, r2, r6, lsl #2
 801be12:	9a00      	ldr	r2, [sp, #0]
 801be14:	9002      	str	r0, [sp, #8]
 801be16:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801be1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801be1e:	9a01      	ldr	r2, [sp, #4]
 801be20:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 801be24:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801be28:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 801be2c:	2c00      	cmp	r4, #0
 801be2e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 801be32:	db3a      	blt.n	801beaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801be34:	45a0      	cmp	r8, r4
 801be36:	dd38      	ble.n	801beaa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc2>
 801be38:	f1bc 0f00 	cmp.w	ip, #0
 801be3c:	db33      	blt.n	801bea6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801be3e:	4563      	cmp	r3, ip
 801be40:	dd31      	ble.n	801bea6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xbe>
 801be42:	f859 2026 	ldr.w	r2, [r9, r6, lsl #2]
 801be46:	f11c 0601 	adds.w	r6, ip, #1
 801be4a:	d431      	bmi.n	801beb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801be4c:	42b3      	cmp	r3, r6
 801be4e:	dd2f      	ble.n	801beb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801be50:	b375      	cbz	r5, 801beb0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xc8>
 801be52:	f8de 6004 	ldr.w	r6, [lr, #4]
 801be56:	3401      	adds	r4, #1
 801be58:	d42e      	bmi.n	801beb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801be5a:	45a0      	cmp	r8, r4
 801be5c:	dd2c      	ble.n	801beb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801be5e:	b35f      	cbz	r7, 801beb8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd0>
 801be60:	f1bc 0f00 	cmp.w	ip, #0
 801be64:	db26      	blt.n	801beb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801be66:	4563      	cmp	r3, ip
 801be68:	dd24      	ble.n	801beb4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xcc>
 801be6a:	f85e 4023 	ldr.w	r4, [lr, r3, lsl #2]
 801be6e:	f11c 0c01 	adds.w	ip, ip, #1
 801be72:	d405      	bmi.n	801be80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801be74:	4563      	cmp	r3, ip
 801be76:	dd03      	ble.n	801be80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801be78:	b115      	cbz	r5, 801be80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801be7a:	3301      	adds	r3, #1
 801be7c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 801be80:	2d0f      	cmp	r5, #15
 801be82:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801be86:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801be8a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801be8e:	ea4f 6810 	mov.w	r8, r0, lsr #24
 801be92:	d801      	bhi.n	801be98 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb0>
 801be94:	2f0f      	cmp	r7, #15
 801be96:	d911      	bls.n	801bebc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xd4>
 801be98:	4b7b      	ldr	r3, [pc, #492]	; (801c088 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 801be9a:	4a7c      	ldr	r2, [pc, #496]	; (801c08c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 801be9c:	487c      	ldr	r0, [pc, #496]	; (801c090 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a8>)
 801be9e:	f240 3173 	movw	r1, #883	; 0x373
 801bea2:	f001 fce7 	bl	801d874 <__assert_func>
 801bea6:	4602      	mov	r2, r0
 801bea8:	e7cd      	b.n	801be46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x5e>
 801beaa:	4606      	mov	r6, r0
 801beac:	4602      	mov	r2, r0
 801beae:	e7d2      	b.n	801be56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801beb0:	4606      	mov	r6, r0
 801beb2:	e7d0      	b.n	801be56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x6e>
 801beb4:	4604      	mov	r4, r0
 801beb6:	e7da      	b.n	801be6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x86>
 801beb8:	4604      	mov	r4, r0
 801beba:	e7e1      	b.n	801be80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x98>
 801bebc:	b2ab      	uxth	r3, r5
 801bebe:	b2bf      	uxth	r7, r7
 801bec0:	fb03 fe07 	mul.w	lr, r3, r7
 801bec4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801bec8:	011b      	lsls	r3, r3, #4
 801beca:	eba3 0c0e 	sub.w	ip, r3, lr
 801bece:	b2bf      	uxth	r7, r7
 801bed0:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
 801bed4:	fa1f fc8c 	uxth.w	ip, ip
 801bed8:	1bed      	subs	r5, r5, r7
 801beda:	b2ad      	uxth	r5, r5
 801bedc:	fb0c f30a 	mul.w	r3, ip, sl
 801bee0:	fb05 330b 	mla	r3, r5, fp, r3
 801bee4:	fb07 3309 	mla	r3, r7, r9, r3
 801bee8:	fb0e 3308 	mla	r3, lr, r8, r3
 801beec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bef0:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801bef4:	9303      	str	r3, [sp, #12]
 801bef6:	d018      	beq.n	801bf2a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x142>
 801bef8:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801befc:	fb0b f303 	mul.w	r3, fp, r3
 801bf00:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bf04:	fb0b fb02 	mul.w	fp, fp, r2
 801bf08:	0a1a      	lsrs	r2, r3, #8
 801bf0a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bf0e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801bf12:	441a      	add	r2, r3
 801bf14:	f50b 7380 	add.w	r3, fp, #256	; 0x100
 801bf18:	eb03 231b 	add.w	r3, r3, fp, lsr #8
 801bf1c:	0a12      	lsrs	r2, r2, #8
 801bf1e:	0a1b      	lsrs	r3, r3, #8
 801bf20:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bf24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf28:	431a      	orrs	r2, r3
 801bf2a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bf2e:	d019      	beq.n	801bf64 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x17c>
 801bf30:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 801bf34:	fb0a fb0b 	mul.w	fp, sl, fp
 801bf38:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bf3c:	fb0a fa06 	mul.w	sl, sl, r6
 801bf40:	ea4f 261b 	mov.w	r6, fp, lsr #8
 801bf44:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bf4c:	f50a 7380 	add.w	r3, sl, #256	; 0x100
 801bf50:	445e      	add	r6, fp
 801bf52:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801bf56:	0a36      	lsrs	r6, r6, #8
 801bf58:	0a1b      	lsrs	r3, r3, #8
 801bf5a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bf5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf62:	431e      	orrs	r6, r3
 801bf64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bf68:	d019      	beq.n	801bf9e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1b6>
 801bf6a:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801bf6e:	fb09 fa0a 	mul.w	sl, r9, sl
 801bf72:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bf76:	fb09 f904 	mul.w	r9, r9, r4
 801bf7a:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801bf7e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bf82:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bf86:	f509 7380 	add.w	r3, r9, #256	; 0x100
 801bf8a:	4454      	add	r4, sl
 801bf8c:	eb03 2319 	add.w	r3, r3, r9, lsr #8
 801bf90:	0a24      	lsrs	r4, r4, #8
 801bf92:	0a1b      	lsrs	r3, r3, #8
 801bf94:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bf98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf9c:	431c      	orrs	r4, r3
 801bf9e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bfa2:	d019      	beq.n	801bfd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1f0>
 801bfa4:	f000 19ff 	and.w	r9, r0, #16711935	; 0xff00ff
 801bfa8:	fb08 f909 	mul.w	r9, r8, r9
 801bfac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bfb0:	fb08 f800 	mul.w	r8, r8, r0
 801bfb4:	ea4f 2019 	mov.w	r0, r9, lsr #8
 801bfb8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bfbc:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801bfc0:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801bfc4:	4448      	add	r0, r9
 801bfc6:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801bfca:	0a00      	lsrs	r0, r0, #8
 801bfcc:	0a1b      	lsrs	r3, r3, #8
 801bfce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bfd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bfd6:	4318      	orrs	r0, r3
 801bfd8:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 801bfdc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bfe0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 801bfe4:	fb0c f808 	mul.w	r8, ip, r8
 801bfe8:	fb0c f606 	mul.w	r6, ip, r6
 801bfec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bff0:	fb05 8803 	mla	r8, r5, r3, r8
 801bff4:	fb05 6202 	mla	r2, r5, r2, r6
 801bff8:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801bffc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c000:	fb07 8803 	mla	r8, r7, r3, r8
 801c004:	fb07 2704 	mla	r7, r7, r4, r2
 801c008:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 801c00c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c010:	fb0e 8303 	mla	r3, lr, r3, r8
 801c014:	fb0e 7e00 	mla	lr, lr, r0, r7
 801c018:	0a1b      	lsrs	r3, r3, #8
 801c01a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c01e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c022:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c026:	ea43 0e0e 	orr.w	lr, r3, lr
 801c02a:	9b03      	ldr	r3, [sp, #12]
 801c02c:	9800      	ldr	r0, [sp, #0]
 801c02e:	9c01      	ldr	r4, [sp, #4]
 801c030:	9a02      	ldr	r2, [sp, #8]
 801c032:	43db      	mvns	r3, r3
 801c034:	b2db      	uxtb	r3, r3
 801c036:	4358      	muls	r0, r3
 801c038:	435c      	muls	r4, r3
 801c03a:	435a      	muls	r2, r3
 801c03c:	1c43      	adds	r3, r0, #1
 801c03e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c042:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801c046:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c04a:	4b12      	ldr	r3, [pc, #72]	; (801c094 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2ac>)
 801c04c:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 801c050:	1c50      	adds	r0, r2, #1
 801c052:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c056:	fa5f f28e 	uxtb.w	r2, lr
 801c05a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c05e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801c062:	1c62      	adds	r2, r4, #1
 801c064:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801c068:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801c06c:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801c070:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801c074:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801c078:	ea43 0e0e 	orr.w	lr, r3, lr
 801c07c:	f8a1 e000 	strh.w	lr, [r1]
 801c080:	b005      	add	sp, #20
 801c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c086:	bf00      	nop
 801c088:	080214bb 	.word	0x080214bb
 801c08c:	08021a19 	.word	0x08021a19
 801c090:	08021543 	.word	0x08021543
 801c094:	fffff800 	.word	0xfffff800

0801c098 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c09c:	ed2d 8b08 	vpush	{d8-d11}
 801c0a0:	b097      	sub	sp, #92	; 0x5c
 801c0a2:	eeb0 aa40 	vmov.f32	s20, s0
 801c0a6:	9306      	str	r3, [sp, #24]
 801c0a8:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 801c0ac:	9307      	str	r3, [sp, #28]
 801c0ae:	9214      	str	r2, [sp, #80]	; 0x50
 801c0b0:	f9bd 30c4 	ldrsh.w	r3, [sp, #196]	; 0xc4
 801c0b4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c0b6:	9112      	str	r1, [sp, #72]	; 0x48
 801c0b8:	9310      	str	r3, [sp, #64]	; 0x40
 801c0ba:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c0be:	9015      	str	r0, [sp, #84]	; 0x54
 801c0c0:	6850      	ldr	r0, [r2, #4]
 801c0c2:	6812      	ldr	r2, [r2, #0]
 801c0c4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801c0c6:	fb00 1303 	mla	r3, r0, r3, r1
 801c0ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c0ce:	930a      	str	r3, [sp, #40]	; 0x28
 801c0d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	9311      	str	r3, [sp, #68]	; 0x44
 801c0d6:	9b07      	ldr	r3, [sp, #28]
 801c0d8:	009b      	lsls	r3, r3, #2
 801c0da:	eef0 9a60 	vmov.f32	s19, s1
 801c0de:	eeb0 9a41 	vmov.f32	s18, s2
 801c0e2:	eeb0 8a62 	vmov.f32	s16, s5
 801c0e6:	eef0 8a43 	vmov.f32	s17, s6
 801c0ea:	eef0 ba44 	vmov.f32	s23, s8
 801c0ee:	eeb0 ba64 	vmov.f32	s22, s9
 801c0f2:	eef0 aa45 	vmov.f32	s21, s10
 801c0f6:	930e      	str	r3, [sp, #56]	; 0x38
 801c0f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	dc03      	bgt.n	801c106 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c0fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c100:	2b00      	cmp	r3, #0
 801c102:	f340 8361 	ble.w	801c7c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801c106:	9b06      	ldr	r3, [sp, #24]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	f340 819b 	ble.w	801c444 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3ac>
 801c10e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c110:	1412      	asrs	r2, r2, #16
 801c112:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c116:	d42e      	bmi.n	801c176 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xde>
 801c118:	9807      	ldr	r0, [sp, #28]
 801c11a:	1c51      	adds	r1, r2, #1
 801c11c:	4288      	cmp	r0, r1
 801c11e:	dd2d      	ble.n	801c17c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c120:	2b00      	cmp	r3, #0
 801c122:	db2b      	blt.n	801c17c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c124:	9810      	ldr	r0, [sp, #64]	; 0x40
 801c126:	1c59      	adds	r1, r3, #1
 801c128:	4288      	cmp	r0, r1
 801c12a:	dd27      	ble.n	801c17c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe4>
 801c12c:	9b06      	ldr	r3, [sp, #24]
 801c12e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801c130:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c132:	3b01      	subs	r3, #1
 801c134:	fb02 1203 	mla	r2, r2, r3, r1
 801c138:	1412      	asrs	r2, r2, #16
 801c13a:	d42a      	bmi.n	801c192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c13c:	9907      	ldr	r1, [sp, #28]
 801c13e:	3201      	adds	r2, #1
 801c140:	4291      	cmp	r1, r2
 801c142:	dd26      	ble.n	801c192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c144:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801c146:	fb02 5303 	mla	r3, r2, r3, r5
 801c14a:	141b      	asrs	r3, r3, #16
 801c14c:	d421      	bmi.n	801c192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c14e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c150:	3301      	adds	r3, #1
 801c152:	429a      	cmp	r2, r3
 801c154:	dd1d      	ble.n	801c192 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfa>
 801c156:	9b06      	ldr	r3, [sp, #24]
 801c158:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801c15c:	9313      	str	r3, [sp, #76]	; 0x4c
 801c15e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c160:	2b00      	cmp	r3, #0
 801c162:	f300 81e3 	bgt.w	801c52c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x494>
 801c166:	9b06      	ldr	r3, [sp, #24]
 801c168:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c16e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801c172:	930a      	str	r3, [sp, #40]	; 0x28
 801c174:	e168      	b.n	801c448 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x3b0>
 801c176:	1c51      	adds	r1, r2, #1
 801c178:	f040 8157 	bne.w	801c42a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801c17c:	9907      	ldr	r1, [sp, #28]
 801c17e:	428a      	cmp	r2, r1
 801c180:	f280 8153 	bge.w	801c42a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801c184:	1c5f      	adds	r7, r3, #1
 801c186:	f2c0 8150 	blt.w	801c42a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801c18a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c18c:	4293      	cmp	r3, r2
 801c18e:	f280 814c 	bge.w	801c42a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x392>
 801c192:	9b06      	ldr	r3, [sp, #24]
 801c194:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c196:	9313      	str	r3, [sp, #76]	; 0x4c
 801c198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	dde3      	ble.n	801c166 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801c19e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c1a0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c1a2:	1409      	asrs	r1, r1, #16
 801c1a4:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c1a8:	f3c2 3203 	ubfx	r2, r2, #12, #4
 801c1ac:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c1b0:	f100 81a3 	bmi.w	801c4fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x462>
 801c1b4:	9c07      	ldr	r4, [sp, #28]
 801c1b6:	1c4e      	adds	r6, r1, #1
 801c1b8:	42b4      	cmp	r4, r6
 801c1ba:	f340 81a0 	ble.w	801c4fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	f2c0 819d 	blt.w	801c4fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c1c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c1c6:	1c5e      	adds	r6, r3, #1
 801c1c8:	42b4      	cmp	r4, r6
 801c1ca:	f340 8198 	ble.w	801c4fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x466>
 801c1ce:	9c07      	ldr	r4, [sp, #28]
 801c1d0:	fb03 1304 	mla	r3, r3, r4, r1
 801c1d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c1d6:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801c1da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c1de:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c1e2:	2a00      	cmp	r2, #0
 801c1e4:	f000 816f 	beq.w	801c4c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x42e>
 801c1e8:	6871      	ldr	r1, [r6, #4]
 801c1ea:	910b      	str	r1, [sp, #44]	; 0x2c
 801c1ec:	ea4f 6811 	mov.w	r8, r1, lsr #24
 801c1f0:	2800      	cmp	r0, #0
 801c1f2:	f000 8171 	beq.w	801c4d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x440>
 801c1f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c1f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c1fa:	1871      	adds	r1, r6, r1
 801c1fc:	5934      	ldr	r4, [r6, r4]
 801c1fe:	6849      	ldr	r1, [r1, #4]
 801c200:	9408      	str	r4, [sp, #32]
 801c202:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 801c206:	910c      	str	r1, [sp, #48]	; 0x30
 801c208:	0e0e      	lsrs	r6, r1, #24
 801c20a:	b292      	uxth	r2, r2
 801c20c:	b280      	uxth	r0, r0
 801c20e:	fb02 fb00 	mul.w	fp, r2, r0
 801c212:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801c216:	0112      	lsls	r2, r2, #4
 801c218:	eba2 090b 	sub.w	r9, r2, fp
 801c21c:	b280      	uxth	r0, r0
 801c21e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c222:	fa1f f989 	uxth.w	r9, r9
 801c226:	1a09      	subs	r1, r1, r0
 801c228:	b289      	uxth	r1, r1
 801c22a:	fb09 f208 	mul.w	r2, r9, r8
 801c22e:	fb01 220c 	mla	r2, r1, ip, r2
 801c232:	fb00 220a 	mla	r2, r0, sl, r2
 801c236:	fb0b 2206 	mla	r2, fp, r6, r2
 801c23a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c23e:	2a00      	cmp	r2, #0
 801c240:	f000 80e8 	beq.w	801c414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801c244:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c248:	d01b      	beq.n	801c282 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1ea>
 801c24a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c24e:	fb0c fe0e 	mul.w	lr, ip, lr
 801c252:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c256:	fb0c fc03 	mul.w	ip, ip, r3
 801c25a:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801c25e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c262:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c266:	4473      	add	r3, lr
 801c268:	f50c 7e80 	add.w	lr, ip, #256	; 0x100
 801c26c:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801c270:	0a1b      	lsrs	r3, r3, #8
 801c272:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c276:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c27a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c27e:	ea43 030e 	orr.w	r3, r3, lr
 801c282:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c286:	d01e      	beq.n	801c2c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x22e>
 801c288:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c28a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c28e:	fb08 fc0c 	mul.w	ip, r8, ip
 801c292:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c296:	fb08 f80e 	mul.w	r8, r8, lr
 801c29a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c29e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c2a6:	44e6      	add	lr, ip
 801c2a8:	f508 7c80 	add.w	ip, r8, #256	; 0x100
 801c2ac:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 801c2b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2b4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c2b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2bc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c2c0:	ea4e 0408 	orr.w	r4, lr, r8
 801c2c4:	940b      	str	r4, [sp, #44]	; 0x2c
 801c2c6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c2ca:	d01e      	beq.n	801c30a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x272>
 801c2cc:	9c08      	ldr	r4, [sp, #32]
 801c2ce:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801c2d2:	fb0a f808 	mul.w	r8, sl, r8
 801c2d6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c2da:	fb0a fa0c 	mul.w	sl, sl, ip
 801c2de:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801c2e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2e6:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801c2ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c2ee:	44c6      	add	lr, r8
 801c2f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c2f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c300:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c304:	ea4e 040a 	orr.w	r4, lr, sl
 801c308:	9408      	str	r4, [sp, #32]
 801c30a:	2eff      	cmp	r6, #255	; 0xff
 801c30c:	d01d      	beq.n	801c34a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b2>
 801c30e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c310:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 801c314:	fb06 f808 	mul.w	r8, r6, r8
 801c318:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c31c:	fb06 f60c 	mul.w	r6, r6, ip
 801c320:	ea4f 2e18 	mov.w	lr, r8, lsr #8
 801c324:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c328:	f108 1801 	add.w	r8, r8, #65537	; 0x10001
 801c32c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c330:	44c6      	add	lr, r8
 801c332:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c336:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c33a:	0a36      	lsrs	r6, r6, #8
 801c33c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c340:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c344:	ea4e 0406 	orr.w	r4, lr, r6
 801c348:	940c      	str	r4, [sp, #48]	; 0x30
 801c34a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c34c:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801c350:	9c08      	ldr	r4, [sp, #32]
 801c352:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c356:	fb09 f606 	mul.w	r6, r9, r6
 801c35a:	fb01 660c 	mla	r6, r1, ip, r6
 801c35e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c362:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c364:	fb00 660c 	mla	r6, r0, ip, r6
 801c368:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c36c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c36e:	fb0b 660c 	mla	r6, fp, ip, r6
 801c372:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c376:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c37a:	fb09 f90c 	mul.w	r9, r9, ip
 801c37e:	fb01 9303 	mla	r3, r1, r3, r9
 801c382:	9908      	ldr	r1, [sp, #32]
 801c384:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801c388:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c38a:	fb00 330e 	mla	r3, r0, lr, r3
 801c38e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c392:	fb0b 3b00 	mla	fp, fp, r0, r3
 801c396:	0a36      	lsrs	r6, r6, #8
 801c398:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c39c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c3a0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c3a4:	ea46 060b 	orr.w	r6, r6, fp
 801c3a8:	2aff      	cmp	r2, #255	; 0xff
 801c3aa:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801c3ae:	f000 8099 	beq.w	801c4e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x44c>
 801c3b2:	8839      	ldrh	r1, [r7, #0]
 801c3b4:	43d2      	mvns	r2, r2
 801c3b6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 801c3ba:	fa5f fe82 	uxtb.w	lr, r2
 801c3be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c3c2:	fb0c fc0e 	mul.w	ip, ip, lr
 801c3c6:	10c8      	asrs	r0, r1, #3
 801c3c8:	00ca      	lsls	r2, r1, #3
 801c3ca:	f10c 0101 	add.w	r1, ip, #1
 801c3ce:	eb01 211c 	add.w	r1, r1, ip, lsr #8
 801c3d2:	ea4f 4c16 	mov.w	ip, r6, lsr #16
 801c3d6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c3da:	b2d2      	uxtb	r2, r2
 801c3dc:	4952      	ldr	r1, [pc, #328]	; (801c528 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x490>)
 801c3de:	fb02 f20e 	mul.w	r2, r2, lr
 801c3e2:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 801c3e6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c3ea:	1c51      	adds	r1, r2, #1
 801c3ec:	fb00 f00e 	mul.w	r0, r0, lr
 801c3f0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c3f4:	b2f6      	uxtb	r6, r6
 801c3f6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801c3fa:	1c42      	adds	r2, r0, #1
 801c3fc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c400:	b2db      	uxtb	r3, r3
 801c402:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c406:	00db      	lsls	r3, r3, #3
 801c408:	ea4c 06d6 	orr.w	r6, ip, r6, lsr #3
 801c40c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c410:	431e      	orrs	r6, r3
 801c412:	803e      	strh	r6, [r7, #0]
 801c414:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c416:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c418:	441a      	add	r2, r3
 801c41a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c41c:	9229      	str	r2, [sp, #164]	; 0xa4
 801c41e:	441d      	add	r5, r3
 801c420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c422:	3b01      	subs	r3, #1
 801c424:	3702      	adds	r7, #2
 801c426:	9313      	str	r3, [sp, #76]	; 0x4c
 801c428:	e6b6      	b.n	801c198 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x100>
 801c42a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c42c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c42e:	441a      	add	r2, r3
 801c430:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c432:	9229      	str	r2, [sp, #164]	; 0xa4
 801c434:	441d      	add	r5, r3
 801c436:	9b06      	ldr	r3, [sp, #24]
 801c438:	3b01      	subs	r3, #1
 801c43a:	9306      	str	r3, [sp, #24]
 801c43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c43e:	3302      	adds	r3, #2
 801c440:	930a      	str	r3, [sp, #40]	; 0x28
 801c442:	e660      	b.n	801c106 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6e>
 801c444:	f47f ae72 	bne.w	801c12c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801c448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	f340 81bc 	ble.w	801c7c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x730>
 801c450:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c458:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c45c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c45e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c462:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c466:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c46a:	eef0 6a48 	vmov.f32	s13, s16
 801c46e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c476:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c47a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801c47e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c482:	eef0 6a68 	vmov.f32	s13, s17
 801c486:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c48a:	ee18 2a10 	vmov	r2, s16
 801c48e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c492:	fb92 f3f3 	sdiv	r3, r2, r3
 801c496:	ee18 2a90 	vmov	r2, s17
 801c49a:	932b      	str	r3, [sp, #172]	; 0xac
 801c49c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c49e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c4a2:	932c      	str	r3, [sp, #176]	; 0xb0
 801c4a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c4a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c4a8:	3b01      	subs	r3, #1
 801c4aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4ae:	9312      	str	r3, [sp, #72]	; 0x48
 801c4b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c4b2:	bf08      	it	eq
 801c4b4:	4613      	moveq	r3, r2
 801c4b6:	ee16 5a90 	vmov	r5, s13
 801c4ba:	9306      	str	r3, [sp, #24]
 801c4bc:	eef0 8a67 	vmov.f32	s17, s15
 801c4c0:	eeb0 8a47 	vmov.f32	s16, s14
 801c4c4:	e618      	b.n	801c0f8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x60>
 801c4c6:	b150      	cbz	r0, 801c4de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x446>
 801c4c8:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c4ca:	5871      	ldr	r1, [r6, r1]
 801c4cc:	9108      	str	r1, [sp, #32]
 801c4ce:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801c4d2:	26ff      	movs	r6, #255	; 0xff
 801c4d4:	46b0      	mov	r8, r6
 801c4d6:	e698      	b.n	801c20a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801c4d8:	26ff      	movs	r6, #255	; 0xff
 801c4da:	46b2      	mov	sl, r6
 801c4dc:	e695      	b.n	801c20a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x172>
 801c4de:	26ff      	movs	r6, #255	; 0xff
 801c4e0:	46b2      	mov	sl, r6
 801c4e2:	e7f7      	b.n	801c4d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x43c>
 801c4e4:	0972      	lsrs	r2, r6, #5
 801c4e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c4ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c4ee:	f023 0307 	bic.w	r3, r3, #7
 801c4f2:	4313      	orrs	r3, r2
 801c4f4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c4f8:	e78a      	b.n	801c410 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x378>
 801c4fa:	1c4e      	adds	r6, r1, #1
 801c4fc:	d18a      	bne.n	801c414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801c4fe:	9c07      	ldr	r4, [sp, #28]
 801c500:	428c      	cmp	r4, r1
 801c502:	dd87      	ble.n	801c414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801c504:	1c5c      	adds	r4, r3, #1
 801c506:	db85      	blt.n	801c414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801c508:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c50a:	429c      	cmp	r4, r3
 801c50c:	dd82      	ble.n	801c414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801c50e:	e9cd 2003 	strd	r2, r0, [sp, #12]
 801c512:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801c516:	9400      	str	r4, [sp, #0]
 801c518:	9b07      	ldr	r3, [sp, #28]
 801c51a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c51c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c51e:	4639      	mov	r1, r7
 801c520:	f7ff fc62 	bl	801bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 801c524:	e776      	b.n	801c414 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x37c>
 801c526:	bf00      	nop
 801c528:	fffff800 	.word	0xfffff800
 801c52c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c52e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801c530:	9c07      	ldr	r4, [sp, #28]
 801c532:	1409      	asrs	r1, r1, #16
 801c534:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c538:	142b      	asrs	r3, r5, #16
 801c53a:	fb04 1303 	mla	r3, r4, r3, r1
 801c53e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c540:	eb01 0683 	add.w	r6, r1, r3, lsl #2
 801c544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801c548:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c54c:	0e1f      	lsrs	r7, r3, #24
 801c54e:	2a00      	cmp	r2, #0
 801c550:	f000 811d 	beq.w	801c78e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6f6>
 801c554:	6871      	ldr	r1, [r6, #4]
 801c556:	910d      	str	r1, [sp, #52]	; 0x34
 801c558:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 801c55c:	2800      	cmp	r0, #0
 801c55e:	f000 811f 	beq.w	801c7a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x708>
 801c562:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c564:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c566:	1871      	adds	r1, r6, r1
 801c568:	5934      	ldr	r4, [r6, r4]
 801c56a:	6849      	ldr	r1, [r1, #4]
 801c56c:	9409      	str	r4, [sp, #36]	; 0x24
 801c56e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c572:	910f      	str	r1, [sp, #60]	; 0x3c
 801c574:	0e0e      	lsrs	r6, r1, #24
 801c576:	b292      	uxth	r2, r2
 801c578:	b280      	uxth	r0, r0
 801c57a:	fb02 fb00 	mul.w	fp, r2, r0
 801c57e:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 801c582:	0112      	lsls	r2, r2, #4
 801c584:	eba2 080b 	sub.w	r8, r2, fp
 801c588:	b280      	uxth	r0, r0
 801c58a:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c58e:	fa1f f888 	uxth.w	r8, r8
 801c592:	1a09      	subs	r1, r1, r0
 801c594:	b289      	uxth	r1, r1
 801c596:	fb08 f20e 	mul.w	r2, r8, lr
 801c59a:	fb01 2207 	mla	r2, r1, r7, r2
 801c59e:	fb00 2209 	mla	r2, r0, r9, r2
 801c5a2:	fb0b 2206 	mla	r2, fp, r6, r2
 801c5a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c5aa:	2a00      	cmp	r2, #0
 801c5ac:	f000 80e3 	beq.w	801c776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801c5b0:	2fff      	cmp	r7, #255	; 0xff
 801c5b2:	d01a      	beq.n	801c5ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x552>
 801c5b4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c5b8:	fb07 fc0c 	mul.w	ip, r7, ip
 801c5bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c5c0:	435f      	muls	r7, r3
 801c5c2:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c5c6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5ca:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c5ce:	4463      	add	r3, ip
 801c5d0:	f507 7c80 	add.w	ip, r7, #256	; 0x100
 801c5d4:	eb0c 2c17 	add.w	ip, ip, r7, lsr #8
 801c5d8:	0a1b      	lsrs	r3, r3, #8
 801c5da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c5de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c5e6:	ea43 030c 	orr.w	r3, r3, ip
 801c5ea:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c5ee:	d01e      	beq.n	801c62e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x596>
 801c5f0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c5f2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c5f6:	fb0e f707 	mul.w	r7, lr, r7
 801c5fa:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c5fe:	fb0e fe0c 	mul.w	lr, lr, ip
 801c602:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c606:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c60a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c60e:	44bc      	add	ip, r7
 801c610:	f50e 7780 	add.w	r7, lr, #256	; 0x100
 801c614:	eb07 2e1e 	add.w	lr, r7, lr, lsr #8
 801c618:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c61c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c620:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c624:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c628:	ea4c 040e 	orr.w	r4, ip, lr
 801c62c:	940d      	str	r4, [sp, #52]	; 0x34
 801c62e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c632:	d01e      	beq.n	801c672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x5da>
 801c634:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c636:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c63a:	fb09 fe0e 	mul.w	lr, r9, lr
 801c63e:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801c642:	fb09 f907 	mul.w	r9, r9, r7
 801c646:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c64a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c64e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c652:	f509 7780 	add.w	r7, r9, #256	; 0x100
 801c656:	44f4      	add	ip, lr
 801c658:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c65c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c660:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c664:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c668:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c66c:	ea4c 0409 	orr.w	r4, ip, r9
 801c670:	9409      	str	r4, [sp, #36]	; 0x24
 801c672:	2eff      	cmp	r6, #255	; 0xff
 801c674:	d01c      	beq.n	801c6b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x618>
 801c676:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c678:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c67c:	fb06 fe0e 	mul.w	lr, r6, lr
 801c680:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801c684:	437e      	muls	r6, r7
 801c686:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c68a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c68e:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c692:	f506 7780 	add.w	r7, r6, #256	; 0x100
 801c696:	44f4      	add	ip, lr
 801c698:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 801c69c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c6a0:	0a36      	lsrs	r6, r6, #8
 801c6a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c6a6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c6aa:	ea4c 0406 	orr.w	r4, ip, r6
 801c6ae:	940f      	str	r4, [sp, #60]	; 0x3c
 801c6b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c6b2:	f004 16ff 	and.w	r6, r4, #16711935	; 0xff00ff
 801c6b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c6b8:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 801c6bc:	fb08 f606 	mul.w	r6, r8, r6
 801c6c0:	fb01 6607 	mla	r6, r1, r7, r6
 801c6c4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c6c8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c6ca:	fb00 6607 	mla	r6, r0, r7, r6
 801c6ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c6d2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c6d4:	fb0b 6607 	mla	r6, fp, r7, r6
 801c6d8:	f404 477f 	and.w	r7, r4, #65280	; 0xff00
 801c6dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c6e0:	fb08 f807 	mul.w	r8, r8, r7
 801c6e4:	fb01 8303 	mla	r3, r1, r3, r8
 801c6e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c6ea:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801c6ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c6f0:	fb00 330c 	mla	r3, r0, ip, r3
 801c6f4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801c6f8:	fb0b 3e0e 	mla	lr, fp, lr, r3
 801c6fc:	0a36      	lsrs	r6, r6, #8
 801c6fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c702:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c706:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c70a:	ea46 060e 	orr.w	r6, r6, lr
 801c70e:	2aff      	cmp	r2, #255	; 0xff
 801c710:	ea4f 2316 	mov.w	r3, r6, lsr #8
 801c714:	d04a      	beq.n	801c7ac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x714>
 801c716:	f8ba 1000 	ldrh.w	r1, [sl]
 801c71a:	43d2      	mvns	r2, r2
 801c71c:	120f      	asrs	r7, r1, #8
 801c71e:	fa5f fc82 	uxtb.w	ip, r2
 801c722:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801c726:	fb07 f70c 	mul.w	r7, r7, ip
 801c72a:	10c8      	asrs	r0, r1, #3
 801c72c:	00ca      	lsls	r2, r1, #3
 801c72e:	1c79      	adds	r1, r7, #1
 801c730:	eb01 2117 	add.w	r1, r1, r7, lsr #8
 801c734:	0c37      	lsrs	r7, r6, #16
 801c736:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801c73a:	b2d2      	uxtb	r2, r2
 801c73c:	4925      	ldr	r1, [pc, #148]	; (801c7d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x73c>)
 801c73e:	fb02 f20c 	mul.w	r2, r2, ip
 801c742:	ea01 2707 	and.w	r7, r1, r7, lsl #8
 801c746:	1c51      	adds	r1, r2, #1
 801c748:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801c74c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c750:	b2f6      	uxtb	r6, r6
 801c752:	fb00 f00c 	mul.w	r0, r0, ip
 801c756:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 801c75a:	ea47 07d6 	orr.w	r7, r7, r6, lsr #3
 801c75e:	1c46      	adds	r6, r0, #1
 801c760:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801c764:	b2de      	uxtb	r6, r3
 801c766:	eb06 2610 	add.w	r6, r6, r0, lsr #8
 801c76a:	00f6      	lsls	r6, r6, #3
 801c76c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801c770:	4337      	orrs	r7, r6
 801c772:	f8aa 7000 	strh.w	r7, [sl]
 801c776:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c778:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c77a:	441a      	add	r2, r3
 801c77c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c77e:	9229      	str	r2, [sp, #164]	; 0xa4
 801c780:	441d      	add	r5, r3
 801c782:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c784:	3b01      	subs	r3, #1
 801c786:	f10a 0a02 	add.w	sl, sl, #2
 801c78a:	9313      	str	r3, [sp, #76]	; 0x4c
 801c78c:	e4e7      	b.n	801c15e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc6>
 801c78e:	b150      	cbz	r0, 801c7a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70e>
 801c790:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c792:	5871      	ldr	r1, [r6, r1]
 801c794:	9109      	str	r1, [sp, #36]	; 0x24
 801c796:	ea4f 6911 	mov.w	r9, r1, lsr #24
 801c79a:	26ff      	movs	r6, #255	; 0xff
 801c79c:	46b6      	mov	lr, r6
 801c79e:	e6ea      	b.n	801c576 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801c7a0:	26ff      	movs	r6, #255	; 0xff
 801c7a2:	46b1      	mov	r9, r6
 801c7a4:	e6e7      	b.n	801c576 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4de>
 801c7a6:	26ff      	movs	r6, #255	; 0xff
 801c7a8:	46b1      	mov	r9, r6
 801c7aa:	e7f7      	b.n	801c79c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x704>
 801c7ac:	0972      	lsrs	r2, r6, #5
 801c7ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c7b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c7b6:	f023 0307 	bic.w	r3, r3, #7
 801c7ba:	4313      	orrs	r3, r2
 801c7bc:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801c7c0:	431e      	orrs	r6, r3
 801c7c2:	f8aa 6000 	strh.w	r6, [sl]
 801c7c6:	e7d6      	b.n	801c776 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x6de>
 801c7c8:	b017      	add	sp, #92	; 0x5c
 801c7ca:	ecbd 8b08 	vpop	{d8-d11}
 801c7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7d2:	bf00      	nop
 801c7d4:	fffff800 	.word	0xfffff800

0801c7d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 801c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c7dc:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801c7e0:	2c00      	cmp	r4, #0
 801c7e2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801c7e6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c7ea:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801c7ee:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c7f2:	fb04 ce03 	mla	lr, r4, r3, ip
 801c7f6:	db60      	blt.n	801c8ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801c7f8:	45a1      	cmp	r9, r4
 801c7fa:	dd5e      	ble.n	801c8ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 801c7fc:	f1bc 0f00 	cmp.w	ip, #0
 801c800:	db59      	blt.n	801c8b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801c802:	45e0      	cmp	r8, ip
 801c804:	dd57      	ble.n	801c8b6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 801c806:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801c80a:	f01e 0f01 	tst.w	lr, #1
 801c80e:	5c16      	ldrb	r6, [r2, r0]
 801c810:	bf0c      	ite	eq
 801c812:	f006 060f 	andeq.w	r6, r6, #15
 801c816:	1136      	asrne	r6, r6, #4
 801c818:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c81c:	b2f6      	uxtb	r6, r6
 801c81e:	f11c 0001 	adds.w	r0, ip, #1
 801c822:	d44d      	bmi.n	801c8c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801c824:	4580      	cmp	r8, r0
 801c826:	dd4b      	ble.n	801c8c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 801c828:	2d00      	cmp	r5, #0
 801c82a:	d04b      	beq.n	801c8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 801c82c:	f10e 0a01 	add.w	sl, lr, #1
 801c830:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801c834:	f01a 0f01 	tst.w	sl, #1
 801c838:	5c10      	ldrb	r0, [r2, r0]
 801c83a:	bf0c      	ite	eq
 801c83c:	f000 000f 	andeq.w	r0, r0, #15
 801c840:	1100      	asrne	r0, r0, #4
 801c842:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c846:	b2c0      	uxtb	r0, r0
 801c848:	3401      	adds	r4, #1
 801c84a:	d43f      	bmi.n	801c8cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801c84c:	45a1      	cmp	r9, r4
 801c84e:	dd3d      	ble.n	801c8cc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 801c850:	2f00      	cmp	r7, #0
 801c852:	f000 80a0 	beq.w	801c996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1be>
 801c856:	f1bc 0f00 	cmp.w	ip, #0
 801c85a:	db35      	blt.n	801c8c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801c85c:	45e0      	cmp	r8, ip
 801c85e:	dd33      	ble.n	801c8c8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 801c860:	eb03 090e 	add.w	r9, r3, lr
 801c864:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801c868:	f019 0f01 	tst.w	r9, #1
 801c86c:	5d14      	ldrb	r4, [r2, r4]
 801c86e:	bf0c      	ite	eq
 801c870:	f004 040f 	andeq.w	r4, r4, #15
 801c874:	1124      	asrne	r4, r4, #4
 801c876:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c87a:	b2e4      	uxtb	r4, r4
 801c87c:	f11c 0c01 	adds.w	ip, ip, #1
 801c880:	d427      	bmi.n	801c8d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801c882:	45e0      	cmp	r8, ip
 801c884:	dd25      	ble.n	801c8d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 801c886:	b335      	cbz	r5, 801c8d6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 801c888:	3301      	adds	r3, #1
 801c88a:	449e      	add	lr, r3
 801c88c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c890:	f01e 0f01 	tst.w	lr, #1
 801c894:	5cd2      	ldrb	r2, [r2, r3]
 801c896:	bf0c      	ite	eq
 801c898:	f002 020f 	andeq.w	r2, r2, #15
 801c89c:	1112      	asrne	r2, r2, #4
 801c89e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c8a2:	b2d3      	uxtb	r3, r2
 801c8a4:	2d0f      	cmp	r5, #15
 801c8a6:	d917      	bls.n	801c8d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 801c8a8:	4b3d      	ldr	r3, [pc, #244]	; (801c9a0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 801c8aa:	4a3e      	ldr	r2, [pc, #248]	; (801c9a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 801c8ac:	483e      	ldr	r0, [pc, #248]	; (801c9a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d0>)
 801c8ae:	f240 3173 	movw	r1, #883	; 0x373
 801c8b2:	f000 ffdf 	bl	801d874 <__assert_func>
 801c8b6:	2600      	movs	r6, #0
 801c8b8:	e7b1      	b.n	801c81e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 801c8ba:	2000      	movs	r0, #0
 801c8bc:	4606      	mov	r6, r0
 801c8be:	e7c3      	b.n	801c848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c8c0:	2000      	movs	r0, #0
 801c8c2:	e7c1      	b.n	801c848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c8c4:	4628      	mov	r0, r5
 801c8c6:	e7bf      	b.n	801c848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 801c8c8:	2400      	movs	r4, #0
 801c8ca:	e7d7      	b.n	801c87c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 801c8cc:	2300      	movs	r3, #0
 801c8ce:	461c      	mov	r4, r3
 801c8d0:	e7e8      	b.n	801c8a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	e7e6      	b.n	801c8a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 801c8d6:	462b      	mov	r3, r5
 801c8d8:	2f0f      	cmp	r7, #15
 801c8da:	d8e5      	bhi.n	801c8a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801c8dc:	b2ad      	uxth	r5, r5
 801c8de:	b2bf      	uxth	r7, r7
 801c8e0:	fb05 fc07 	mul.w	ip, r5, r7
 801c8e4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801c8e8:	012d      	lsls	r5, r5, #4
 801c8ea:	b2bf      	uxth	r7, r7
 801c8ec:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801c8f0:	eba5 050c 	sub.w	r5, r5, ip
 801c8f4:	1bd2      	subs	r2, r2, r7
 801c8f6:	b2ad      	uxth	r5, r5
 801c8f8:	b292      	uxth	r2, r2
 801c8fa:	4368      	muls	r0, r5
 801c8fc:	fb06 0002 	mla	r0, r6, r2, r0
 801c900:	fb07 0404 	mla	r4, r7, r4, r0
 801c904:	fb0c 4303 	mla	r3, ip, r3, r4
 801c908:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d040      	beq.n	801c992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ba>
 801c910:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801c914:	4a25      	ldr	r2, [pc, #148]	; (801c9ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1d4>)
 801c916:	4343      	muls	r3, r0
 801c918:	1c58      	adds	r0, r3, #1
 801c91a:	6816      	ldr	r6, [r2, #0]
 801c91c:	880a      	ldrh	r2, [r1, #0]
 801c91e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c922:	1200      	asrs	r0, r0, #8
 801c924:	b284      	uxth	r4, r0
 801c926:	1215      	asrs	r5, r2, #8
 801c928:	43c0      	mvns	r0, r0
 801c92a:	b2c3      	uxtb	r3, r0
 801c92c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c930:	1230      	asrs	r0, r6, #8
 801c932:	fb15 f503 	smulbb	r5, r5, r3
 801c936:	10d7      	asrs	r7, r2, #3
 801c938:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801c93c:	fb00 5004 	mla	r0, r0, r4, r5
 801c940:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c944:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801c948:	00d2      	lsls	r2, r2, #3
 801c94a:	fb17 f703 	smulbb	r7, r7, r3
 801c94e:	b2d2      	uxtb	r2, r2
 801c950:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801c954:	00f6      	lsls	r6, r6, #3
 801c956:	fb05 7504 	mla	r5, r5, r4, r7
 801c95a:	fb12 f303 	smulbb	r3, r2, r3
 801c95e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801c962:	fb06 3304 	mla	r3, r6, r4, r3
 801c966:	b2ad      	uxth	r5, r5
 801c968:	b29a      	uxth	r2, r3
 801c96a:	b280      	uxth	r0, r0
 801c96c:	1c6b      	adds	r3, r5, #1
 801c96e:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801c972:	1c44      	adds	r4, r0, #1
 801c974:	095b      	lsrs	r3, r3, #5
 801c976:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c97a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801c97e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c982:	4303      	orrs	r3, r0
 801c984:	1c50      	adds	r0, r2, #1
 801c986:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c98a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801c98e:	4313      	orrs	r3, r2
 801c990:	800b      	strh	r3, [r1, #0]
 801c992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c996:	2d0f      	cmp	r5, #15
 801c998:	d886      	bhi.n	801c8a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 801c99a:	463b      	mov	r3, r7
 801c99c:	463c      	mov	r4, r7
 801c99e:	e79d      	b.n	801c8dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 801c9a0:	080214bb 	.word	0x080214bb
 801c9a4:	08021a19 	.word	0x08021a19
 801c9a8:	08021543 	.word	0x08021543
 801c9ac:	20009f10 	.word	0x20009f10

0801c9b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b4:	ed2d 8b08 	vpush	{d8-d11}
 801c9b8:	b099      	sub	sp, #100	; 0x64
 801c9ba:	e9dd 462b 	ldrd	r4, r6, [sp, #172]	; 0xac
 801c9be:	9309      	str	r3, [sp, #36]	; 0x24
 801c9c0:	f9bd 30c8 	ldrsh.w	r3, [sp, #200]	; 0xc8
 801c9c4:	930a      	str	r3, [sp, #40]	; 0x28
 801c9c6:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
 801c9ca:	9216      	str	r2, [sp, #88]	; 0x58
 801c9cc:	930b      	str	r3, [sp, #44]	; 0x2c
 801c9ce:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c9d0:	f89d 30d4 	ldrb.w	r3, [sp, #212]	; 0xd4
 801c9d4:	910f      	str	r1, [sp, #60]	; 0x3c
 801c9d6:	9310      	str	r3, [sp, #64]	; 0x40
 801c9d8:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c9dc:	9017      	str	r0, [sp, #92]	; 0x5c
 801c9de:	6850      	ldr	r0, [r2, #4]
 801c9e0:	6812      	ldr	r2, [r2, #0]
 801c9e2:	fb00 1303 	mla	r3, r0, r3, r1
 801c9e6:	eb02 0a43 	add.w	sl, r2, r3, lsl #1
 801c9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9ec:	3301      	adds	r3, #1
 801c9ee:	f023 0301 	bic.w	r3, r3, #1
 801c9f2:	930c      	str	r3, [sp, #48]	; 0x30
 801c9f4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801c9f6:	681f      	ldr	r7, [r3, #0]
 801c9f8:	eeb0 aa40 	vmov.f32	s20, s0
 801c9fc:	eef0 9a60 	vmov.f32	s19, s1
 801ca00:	eeb0 9a41 	vmov.f32	s18, s2
 801ca04:	eeb0 8a62 	vmov.f32	s16, s5
 801ca08:	eef0 8a43 	vmov.f32	s17, s6
 801ca0c:	eef0 ba44 	vmov.f32	s23, s8
 801ca10:	eeb0 ba64 	vmov.f32	s22, s9
 801ca14:	eef0 aa45 	vmov.f32	s21, s10
 801ca18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	dc03      	bgt.n	801ca26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801ca1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	f340 826b 	ble.w	801cefc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801ca26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	f340 811f 	ble.w	801cc6c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2bc>
 801ca2e:	1422      	asrs	r2, r4, #16
 801ca30:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ca34:	d42d      	bmi.n	801ca92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801ca36:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ca38:	1c51      	adds	r1, r2, #1
 801ca3a:	4288      	cmp	r0, r1
 801ca3c:	dd2c      	ble.n	801ca98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	db2a      	blt.n	801ca98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ca42:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ca44:	1c59      	adds	r1, r3, #1
 801ca46:	4288      	cmp	r0, r1
 801ca48:	dd26      	ble.n	801ca98 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe8>
 801ca4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca4c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ca4e:	3b01      	subs	r3, #1
 801ca50:	fb02 4203 	mla	r2, r2, r3, r4
 801ca54:	1412      	asrs	r2, r2, #16
 801ca56:	d42a      	bmi.n	801caae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801ca58:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ca5a:	3201      	adds	r2, #1
 801ca5c:	4291      	cmp	r1, r2
 801ca5e:	dd26      	ble.n	801caae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801ca60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801ca62:	fb02 6303 	mla	r3, r2, r3, r6
 801ca66:	141b      	asrs	r3, r3, #16
 801ca68:	d421      	bmi.n	801caae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801ca6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ca6c:	3301      	adds	r3, #1
 801ca6e:	429a      	cmp	r2, r3
 801ca70:	dd1d      	ble.n	801caae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xfe>
 801ca72:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801ca76:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ca7a:	9311      	str	r3, [sp, #68]	; 0x44
 801ca7c:	46d1      	mov	r9, sl
 801ca7e:	f1bb 0f00 	cmp.w	fp, #0
 801ca82:	f300 8163 	bgt.w	801cd4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x39c>
 801ca86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca88:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ca8c:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 801ca90:	e0ee      	b.n	801cc70 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2c0>
 801ca92:	1c51      	adds	r1, r2, #1
 801ca94:	f040 80e0 	bne.w	801cc58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801ca98:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ca9a:	4291      	cmp	r1, r2
 801ca9c:	f340 80dc 	ble.w	801cc58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801caa0:	1c5a      	adds	r2, r3, #1
 801caa2:	f2c0 80d9 	blt.w	801cc58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801caa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801caa8:	4293      	cmp	r3, r2
 801caaa:	f280 80d5 	bge.w	801cc58 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2a8>
 801caae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801cab2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801cab6:	9311      	str	r3, [sp, #68]	; 0x44
 801cab8:	46d0      	mov	r8, sl
 801caba:	f1b9 0f00 	cmp.w	r9, #0
 801cabe:	dde2      	ble.n	801ca86 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd6>
 801cac0:	1420      	asrs	r0, r4, #16
 801cac2:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cac6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801caca:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cace:	f100 8122 	bmi.w	801cd16 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x366>
 801cad2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cad4:	f100 0c01 	add.w	ip, r0, #1
 801cad8:	4565      	cmp	r5, ip
 801cada:	f340 811e 	ble.w	801cd1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801cade:	2b00      	cmp	r3, #0
 801cae0:	f2c0 811b 	blt.w	801cd1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801cae4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801cae6:	f103 0c01 	add.w	ip, r3, #1
 801caea:	4565      	cmp	r5, ip
 801caec:	f340 8115 	ble.w	801cd1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36a>
 801caf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801caf2:	fb03 0305 	mla	r3, r3, r5, r0
 801caf6:	0858      	lsrs	r0, r3, #1
 801caf8:	07dd      	lsls	r5, r3, #31
 801cafa:	5c38      	ldrb	r0, [r7, r0]
 801cafc:	bf54      	ite	pl
 801cafe:	f000 000f 	andpl.w	r0, r0, #15
 801cb02:	1100      	asrmi	r0, r0, #4
 801cb04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cb08:	b2c0      	uxtb	r0, r0
 801cb0a:	2a00      	cmp	r2, #0
 801cb0c:	f000 80ef 	beq.w	801ccee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x33e>
 801cb10:	f103 0e01 	add.w	lr, r3, #1
 801cb14:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801cb18:	f01e 0f01 	tst.w	lr, #1
 801cb1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cb20:	bf0c      	ite	eq
 801cb22:	f00c 0c0f 	andeq.w	ip, ip, #15
 801cb26:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801cb2a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cb2e:	fa5f f58c 	uxtb.w	r5, ip
 801cb32:	9512      	str	r5, [sp, #72]	; 0x48
 801cb34:	b1f9      	cbz	r1, 801cb76 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801cb36:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cb38:	442b      	add	r3, r5
 801cb3a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cb3e:	07dd      	lsls	r5, r3, #31
 801cb40:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cb44:	bf54      	ite	pl
 801cb46:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cb4a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cb4e:	3301      	adds	r3, #1
 801cb50:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cb54:	fa5f f58c 	uxtb.w	r5, ip
 801cb58:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cb5c:	950d      	str	r5, [sp, #52]	; 0x34
 801cb5e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cb62:	07dd      	lsls	r5, r3, #31
 801cb64:	bf54      	ite	pl
 801cb66:	f00c 030f 	andpl.w	r3, ip, #15
 801cb6a:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801cb6e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cb72:	b2db      	uxtb	r3, r3
 801cb74:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb76:	b292      	uxth	r2, r2
 801cb78:	b289      	uxth	r1, r1
 801cb7a:	fb02 f301 	mul.w	r3, r2, r1
 801cb7e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801cb82:	0112      	lsls	r2, r2, #4
 801cb84:	b289      	uxth	r1, r1
 801cb86:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801cb8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cb8c:	1ad2      	subs	r2, r2, r3
 801cb8e:	ebac 0c01 	sub.w	ip, ip, r1
 801cb92:	b292      	uxth	r2, r2
 801cb94:	436a      	muls	r2, r5
 801cb96:	fa1f fc8c 	uxth.w	ip, ip
 801cb9a:	fb00 200c 	mla	r0, r0, ip, r2
 801cb9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cba0:	fb01 0102 	mla	r1, r1, r2, r0
 801cba4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cba6:	fb03 1302 	mla	r3, r3, r2, r1
 801cbaa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d049      	beq.n	801cc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801cbb2:	9910      	ldr	r1, [sp, #64]	; 0x40
 801cbb4:	4ac5      	ldr	r2, [pc, #788]	; (801cecc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801cbb6:	4dc6      	ldr	r5, [pc, #792]	; (801ced0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801cbb8:	f8d2 e000 	ldr.w	lr, [r2]
 801cbbc:	f8b8 2000 	ldrh.w	r2, [r8]
 801cbc0:	434b      	muls	r3, r1
 801cbc2:	1c59      	adds	r1, r3, #1
 801cbc4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801cbc8:	121b      	asrs	r3, r3, #8
 801cbca:	b299      	uxth	r1, r3
 801cbcc:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801cbd0:	43db      	mvns	r3, r3
 801cbd2:	b2db      	uxtb	r3, r3
 801cbd4:	ea4f 202e 	mov.w	r0, lr, asr #8
 801cbd8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801cbdc:	fb1c fc03 	smulbb	ip, ip, r3
 801cbe0:	ea4f 0be2 	mov.w	fp, r2, asr #3
 801cbe4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cbe8:	fb00 c001 	mla	r0, r0, r1, ip
 801cbec:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801cbf0:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801cbf4:	fb1b fb03 	smulbb	fp, fp, r3
 801cbf8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801cbfc:	00d2      	lsls	r2, r2, #3
 801cbfe:	fb0c bc01 	mla	ip, ip, r1, fp
 801cc02:	b2d2      	uxtb	r2, r2
 801cc04:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801cc08:	fb12 f303 	smulbb	r3, r2, r3
 801cc0c:	fa1f fc8c 	uxth.w	ip, ip
 801cc10:	fa5f fe8e 	uxtb.w	lr, lr
 801cc14:	b280      	uxth	r0, r0
 801cc16:	fb0e 3101 	mla	r1, lr, r1, r3
 801cc1a:	f10c 0201 	add.w	r2, ip, #1
 801cc1e:	b289      	uxth	r1, r1
 801cc20:	1c43      	adds	r3, r0, #1
 801cc22:	eb02 221c 	add.w	r2, r2, ip, lsr #8
 801cc26:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801cc2a:	0952      	lsrs	r2, r2, #5
 801cc2c:	1c4b      	adds	r3, r1, #1
 801cc2e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801cc32:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cc36:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801cc3a:	4310      	orrs	r0, r2
 801cc3c:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801cc40:	4308      	orrs	r0, r1
 801cc42:	f8a8 0000 	strh.w	r0, [r8]
 801cc46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cc48:	441c      	add	r4, r3
 801cc4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cc4c:	f108 0802 	add.w	r8, r8, #2
 801cc50:	441e      	add	r6, r3
 801cc52:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc56:	e730      	b.n	801caba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x10a>
 801cc58:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cc5a:	441c      	add	r4, r3
 801cc5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cc5e:	441e      	add	r6, r3
 801cc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc62:	3b01      	subs	r3, #1
 801cc64:	9309      	str	r3, [sp, #36]	; 0x24
 801cc66:	f10a 0a02 	add.w	sl, sl, #2
 801cc6a:	e6dc      	b.n	801ca26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x76>
 801cc6c:	f47f aeed 	bne.w	801ca4a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x9a>
 801cc70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	f340 8142 	ble.w	801cefc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x54c>
 801cc78:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801cc7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cc80:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801cc84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801cc86:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801cc8a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801cc8e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801cc92:	eef0 6a48 	vmov.f32	s13, s16
 801cc96:	ee69 7a27 	vmul.f32	s15, s18, s15
 801cc9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cc9e:	ee37 8a48 	vsub.f32	s16, s14, s16
 801cca2:	ee16 4a90 	vmov	r4, s13
 801cca6:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ccaa:	eef0 6a68 	vmov.f32	s13, s17
 801ccae:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ccb2:	ee18 2a10 	vmov	r2, s16
 801ccb6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ccba:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccbe:	ee18 2a90 	vmov	r2, s17
 801ccc2:	932d      	str	r3, [sp, #180]	; 0xb4
 801ccc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ccc6:	fb92 f3f3 	sdiv	r3, r2, r3
 801ccca:	932e      	str	r3, [sp, #184]	; 0xb8
 801cccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ccce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ccd0:	3b01      	subs	r3, #1
 801ccd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ccd6:	930f      	str	r3, [sp, #60]	; 0x3c
 801ccd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ccda:	bf08      	it	eq
 801ccdc:	4613      	moveq	r3, r2
 801ccde:	ee16 6a90 	vmov	r6, s13
 801cce2:	9309      	str	r3, [sp, #36]	; 0x24
 801cce4:	eef0 8a67 	vmov.f32	s17, s15
 801cce8:	eeb0 8a47 	vmov.f32	s16, s14
 801ccec:	e694      	b.n	801ca18 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x68>
 801ccee:	2900      	cmp	r1, #0
 801ccf0:	f43f af41 	beq.w	801cb76 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801ccf4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ccf6:	442b      	add	r3, r5
 801ccf8:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ccfc:	07db      	lsls	r3, r3, #31
 801ccfe:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cd02:	bf54      	ite	pl
 801cd04:	f00c 030f 	andpl.w	r3, ip, #15
 801cd08:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801cd0c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	930d      	str	r3, [sp, #52]	; 0x34
 801cd14:	e72f      	b.n	801cb76 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c6>
 801cd16:	1c45      	adds	r5, r0, #1
 801cd18:	d195      	bne.n	801cc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801cd1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801cd1c:	4285      	cmp	r5, r0
 801cd1e:	dd92      	ble.n	801cc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801cd20:	1c5d      	adds	r5, r3, #1
 801cd22:	db90      	blt.n	801cc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801cd24:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801cd26:	429d      	cmp	r5, r3
 801cd28:	dd8d      	ble.n	801cc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801cd2a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801cd2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801cd30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd32:	9301      	str	r3, [sp, #4]
 801cd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd36:	9002      	str	r0, [sp, #8]
 801cd38:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801cd3c:	9300      	str	r3, [sp, #0]
 801cd3e:	463a      	mov	r2, r7
 801cd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cd42:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801cd44:	4641      	mov	r1, r8
 801cd46:	f7ff fd47 	bl	801c7d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 801cd4a:	e77c      	b.n	801cc46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x296>
 801cd4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cd4e:	1422      	asrs	r2, r4, #16
 801cd50:	1433      	asrs	r3, r6, #16
 801cd52:	fb05 2303 	mla	r3, r5, r3, r2
 801cd56:	085a      	lsrs	r2, r3, #1
 801cd58:	07dd      	lsls	r5, r3, #31
 801cd5a:	5cba      	ldrb	r2, [r7, r2]
 801cd5c:	bf54      	ite	pl
 801cd5e:	f002 020f 	andpl.w	r2, r2, #15
 801cd62:	1112      	asrmi	r2, r2, #4
 801cd64:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cd68:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801cd6c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cd70:	b2d2      	uxtb	r2, r2
 801cd72:	2900      	cmp	r1, #0
 801cd74:	f000 80ae 	beq.w	801ced4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801cd78:	f103 0e01 	add.w	lr, r3, #1
 801cd7c:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801cd80:	f01e 0f01 	tst.w	lr, #1
 801cd84:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cd88:	bf0c      	ite	eq
 801cd8a:	f00c 0c0f 	andeq.w	ip, ip, #15
 801cd8e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801cd92:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cd96:	fa5f f58c 	uxtb.w	r5, ip
 801cd9a:	9514      	str	r5, [sp, #80]	; 0x50
 801cd9c:	b300      	cbz	r0, 801cde0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801cd9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cda0:	442b      	add	r3, r5
 801cda2:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cda6:	07dd      	lsls	r5, r3, #31
 801cda8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cdac:	bf54      	ite	pl
 801cdae:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cdb2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cdb6:	3301      	adds	r3, #1
 801cdb8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cdbc:	fa5f f58c 	uxtb.w	r5, ip
 801cdc0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cdc4:	950e      	str	r5, [sp, #56]	; 0x38
 801cdc6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cdca:	07dd      	lsls	r5, r3, #31
 801cdcc:	bf54      	ite	pl
 801cdce:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cdd2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cdd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cdda:	fa5f f38c 	uxtb.w	r3, ip
 801cdde:	9315      	str	r3, [sp, #84]	; 0x54
 801cde0:	b289      	uxth	r1, r1
 801cde2:	b280      	uxth	r0, r0
 801cde4:	fb01 f300 	mul.w	r3, r1, r0
 801cde8:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801cdec:	0109      	lsls	r1, r1, #4
 801cdee:	b280      	uxth	r0, r0
 801cdf0:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801cdf4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801cdf6:	1ac9      	subs	r1, r1, r3
 801cdf8:	ebac 0c00 	sub.w	ip, ip, r0
 801cdfc:	b289      	uxth	r1, r1
 801cdfe:	4369      	muls	r1, r5
 801ce00:	fa1f fc8c 	uxth.w	ip, ip
 801ce04:	fb02 120c 	mla	r2, r2, ip, r1
 801ce08:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ce0a:	fb00 2001 	mla	r0, r0, r1, r2
 801ce0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801ce10:	fb03 0302 	mla	r3, r3, r2, r0
 801ce14:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d04d      	beq.n	801ceb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x508>
 801ce1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ce1e:	4a2b      	ldr	r2, [pc, #172]	; (801cecc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801ce20:	4d2b      	ldr	r5, [pc, #172]	; (801ced0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801ce22:	f8d2 e000 	ldr.w	lr, [r2]
 801ce26:	f8b9 2000 	ldrh.w	r2, [r9]
 801ce2a:	434b      	muls	r3, r1
 801ce2c:	1c59      	adds	r1, r3, #1
 801ce2e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ce32:	121b      	asrs	r3, r3, #8
 801ce34:	b299      	uxth	r1, r3
 801ce36:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801ce3a:	43db      	mvns	r3, r3
 801ce3c:	b2db      	uxtb	r3, r3
 801ce3e:	ea4f 202e 	mov.w	r0, lr, asr #8
 801ce42:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ce46:	fb1c fc03 	smulbb	ip, ip, r3
 801ce4a:	ea4f 08e2 	mov.w	r8, r2, asr #3
 801ce4e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ce52:	fb00 c001 	mla	r0, r0, r1, ip
 801ce56:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801ce5a:	f3ce 0ccc 	ubfx	ip, lr, #3, #13
 801ce5e:	fb18 f803 	smulbb	r8, r8, r3
 801ce62:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801ce66:	00d2      	lsls	r2, r2, #3
 801ce68:	fb0c 8c01 	mla	ip, ip, r1, r8
 801ce6c:	ea05 0ece 	and.w	lr, r5, lr, lsl #3
 801ce70:	b2d2      	uxtb	r2, r2
 801ce72:	fa1f fc8c 	uxth.w	ip, ip
 801ce76:	fa5f fe8e 	uxtb.w	lr, lr
 801ce7a:	fb12 f203 	smulbb	r2, r2, r3
 801ce7e:	b280      	uxth	r0, r0
 801ce80:	fb0e 2201 	mla	r2, lr, r1, r2
 801ce84:	f10c 0801 	add.w	r8, ip, #1
 801ce88:	b292      	uxth	r2, r2
 801ce8a:	eb08 2c1c 	add.w	ip, r8, ip, lsr #8
 801ce8e:	f100 0801 	add.w	r8, r0, #1
 801ce92:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ce96:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801ce9a:	1c51      	adds	r1, r2, #1
 801ce9c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801cea0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cea4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801cea8:	ea4c 0c00 	orr.w	ip, ip, r0
 801ceac:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ceb0:	ea4c 0c02 	orr.w	ip, ip, r2
 801ceb4:	f8a9 c000 	strh.w	ip, [r9]
 801ceb8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801ceba:	441c      	add	r4, r3
 801cebc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cebe:	f109 0902 	add.w	r9, r9, #2
 801cec2:	441e      	add	r6, r3
 801cec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cec8:	e5d9      	b.n	801ca7e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xce>
 801ceca:	bf00      	nop
 801cecc:	20009f10 	.word	0x20009f10
 801ced0:	0007fff8 	.word	0x0007fff8
 801ced4:	2800      	cmp	r0, #0
 801ced6:	d083      	beq.n	801cde0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801ced8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ceda:	442b      	add	r3, r5
 801cedc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801cee0:	07db      	lsls	r3, r3, #31
 801cee2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cee6:	bf54      	ite	pl
 801cee8:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ceec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cef0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cef4:	fa5f f38c 	uxtb.w	r3, ip
 801cef8:	930e      	str	r3, [sp, #56]	; 0x38
 801cefa:	e771      	b.n	801cde0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x430>
 801cefc:	b019      	add	sp, #100	; 0x64
 801cefe:	ecbd 8b08 	vpop	{d8-d11}
 801cf02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf06:	bf00      	nop

0801cf08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 801cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf0c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 801cf10:	2c00      	cmp	r4, #0
 801cf12:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801cf16:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cf1a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801cf1e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801cf22:	fb04 ce03 	mla	lr, r4, r3, ip
 801cf26:	db60      	blt.n	801cfea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801cf28:	45a1      	cmp	r9, r4
 801cf2a:	dd5e      	ble.n	801cfea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 801cf2c:	f1bc 0f00 	cmp.w	ip, #0
 801cf30:	db59      	blt.n	801cfe6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801cf32:	45e0      	cmp	r8, ip
 801cf34:	dd57      	ble.n	801cfe6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 801cf36:	ea4f 005e 	mov.w	r0, lr, lsr #1
 801cf3a:	f01e 0f01 	tst.w	lr, #1
 801cf3e:	5c16      	ldrb	r6, [r2, r0]
 801cf40:	bf0c      	ite	eq
 801cf42:	f006 060f 	andeq.w	r6, r6, #15
 801cf46:	1136      	asrne	r6, r6, #4
 801cf48:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801cf4c:	b2f6      	uxtb	r6, r6
 801cf4e:	f11c 0001 	adds.w	r0, ip, #1
 801cf52:	d44d      	bmi.n	801cff0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801cf54:	4580      	cmp	r8, r0
 801cf56:	dd4b      	ble.n	801cff0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 801cf58:	2d00      	cmp	r5, #0
 801cf5a:	d04b      	beq.n	801cff4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 801cf5c:	f10e 0a01 	add.w	sl, lr, #1
 801cf60:	ea4f 005a 	mov.w	r0, sl, lsr #1
 801cf64:	f01a 0f01 	tst.w	sl, #1
 801cf68:	5c10      	ldrb	r0, [r2, r0]
 801cf6a:	bf0c      	ite	eq
 801cf6c:	f000 000f 	andeq.w	r0, r0, #15
 801cf70:	1100      	asrne	r0, r0, #4
 801cf72:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cf76:	b2c0      	uxtb	r0, r0
 801cf78:	3401      	adds	r4, #1
 801cf7a:	d43f      	bmi.n	801cffc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801cf7c:	45a1      	cmp	r9, r4
 801cf7e:	dd3d      	ble.n	801cffc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 801cf80:	2f00      	cmp	r7, #0
 801cf82:	f000 8099 	beq.w	801d0b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>
 801cf86:	f1bc 0f00 	cmp.w	ip, #0
 801cf8a:	db35      	blt.n	801cff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801cf8c:	45e0      	cmp	r8, ip
 801cf8e:	dd33      	ble.n	801cff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 801cf90:	eb03 090e 	add.w	r9, r3, lr
 801cf94:	ea4f 0459 	mov.w	r4, r9, lsr #1
 801cf98:	f019 0f01 	tst.w	r9, #1
 801cf9c:	5d14      	ldrb	r4, [r2, r4]
 801cf9e:	bf0c      	ite	eq
 801cfa0:	f004 040f 	andeq.w	r4, r4, #15
 801cfa4:	1124      	asrne	r4, r4, #4
 801cfa6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cfaa:	b2e4      	uxtb	r4, r4
 801cfac:	f11c 0c01 	adds.w	ip, ip, #1
 801cfb0:	d427      	bmi.n	801d002 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801cfb2:	45e0      	cmp	r8, ip
 801cfb4:	dd25      	ble.n	801d002 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 801cfb6:	b335      	cbz	r5, 801d006 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 801cfb8:	3301      	adds	r3, #1
 801cfba:	449e      	add	lr, r3
 801cfbc:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cfc0:	f01e 0f01 	tst.w	lr, #1
 801cfc4:	5cd2      	ldrb	r2, [r2, r3]
 801cfc6:	bf0c      	ite	eq
 801cfc8:	f002 020f 	andeq.w	r2, r2, #15
 801cfcc:	1112      	asrne	r2, r2, #4
 801cfce:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cfd2:	b2d3      	uxtb	r3, r2
 801cfd4:	2d0f      	cmp	r5, #15
 801cfd6:	d917      	bls.n	801d008 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 801cfd8:	4b3a      	ldr	r3, [pc, #232]	; (801d0c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 801cfda:	4a3b      	ldr	r2, [pc, #236]	; (801d0c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c0>)
 801cfdc:	483b      	ldr	r0, [pc, #236]	; (801d0cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c4>)
 801cfde:	f240 3173 	movw	r1, #883	; 0x373
 801cfe2:	f000 fc47 	bl	801d874 <__assert_func>
 801cfe6:	2600      	movs	r6, #0
 801cfe8:	e7b1      	b.n	801cf4e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 801cfea:	2000      	movs	r0, #0
 801cfec:	4606      	mov	r6, r0
 801cfee:	e7c3      	b.n	801cf78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801cff0:	2000      	movs	r0, #0
 801cff2:	e7c1      	b.n	801cf78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801cff4:	4628      	mov	r0, r5
 801cff6:	e7bf      	b.n	801cf78 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 801cff8:	2400      	movs	r4, #0
 801cffa:	e7d7      	b.n	801cfac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 801cffc:	2300      	movs	r3, #0
 801cffe:	461c      	mov	r4, r3
 801d000:	e7e8      	b.n	801cfd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801d002:	2300      	movs	r3, #0
 801d004:	e7e6      	b.n	801cfd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 801d006:	462b      	mov	r3, r5
 801d008:	2f0f      	cmp	r7, #15
 801d00a:	d8e5      	bhi.n	801cfd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801d00c:	b2ad      	uxth	r5, r5
 801d00e:	b2bf      	uxth	r7, r7
 801d010:	fb05 fc07 	mul.w	ip, r5, r7
 801d014:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 801d018:	012d      	lsls	r5, r5, #4
 801d01a:	b2bf      	uxth	r7, r7
 801d01c:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 801d020:	eba5 050c 	sub.w	r5, r5, ip
 801d024:	1bd2      	subs	r2, r2, r7
 801d026:	b2ad      	uxth	r5, r5
 801d028:	b292      	uxth	r2, r2
 801d02a:	4368      	muls	r0, r5
 801d02c:	fb06 0002 	mla	r0, r6, r2, r0
 801d030:	fb07 0404 	mla	r4, r7, r4, r0
 801d034:	fb0c 4303 	mla	r3, ip, r3, r4
 801d038:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d039      	beq.n	801d0b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1ac>
 801d040:	4a23      	ldr	r2, [pc, #140]	; (801d0d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1c8>)
 801d042:	6816      	ldr	r6, [r2, #0]
 801d044:	880a      	ldrh	r2, [r1, #0]
 801d046:	b298      	uxth	r0, r3
 801d048:	1215      	asrs	r5, r2, #8
 801d04a:	43db      	mvns	r3, r3
 801d04c:	b2db      	uxtb	r3, r3
 801d04e:	1234      	asrs	r4, r6, #8
 801d050:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801d054:	fb15 f503 	smulbb	r5, r5, r3
 801d058:	10d7      	asrs	r7, r2, #3
 801d05a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801d05e:	fb04 5400 	mla	r4, r4, r0, r5
 801d062:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d066:	f3c6 05cc 	ubfx	r5, r6, #3, #13
 801d06a:	fb17 f703 	smulbb	r7, r7, r3
 801d06e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d072:	00d2      	lsls	r2, r2, #3
 801d074:	fb05 7500 	mla	r5, r5, r0, r7
 801d078:	b2d2      	uxtb	r2, r2
 801d07a:	00f6      	lsls	r6, r6, #3
 801d07c:	fb12 f303 	smulbb	r3, r2, r3
 801d080:	b2ad      	uxth	r5, r5
 801d082:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d086:	b2a4      	uxth	r4, r4
 801d088:	fb06 3000 	mla	r0, r6, r0, r3
 801d08c:	1c6b      	adds	r3, r5, #1
 801d08e:	b280      	uxth	r0, r0
 801d090:	1c62      	adds	r2, r4, #1
 801d092:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801d096:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801d09a:	095b      	lsrs	r3, r3, #5
 801d09c:	1c42      	adds	r2, r0, #1
 801d09e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d0a2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801d0a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d0aa:	4323      	orrs	r3, r4
 801d0ac:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801d0b0:	4303      	orrs	r3, r0
 801d0b2:	800b      	strh	r3, [r1, #0]
 801d0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d0b8:	2d0f      	cmp	r5, #15
 801d0ba:	d88d      	bhi.n	801cfd8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 801d0bc:	463b      	mov	r3, r7
 801d0be:	463c      	mov	r4, r7
 801d0c0:	e7a4      	b.n	801d00c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 801d0c2:	bf00      	nop
 801d0c4:	080214bb 	.word	0x080214bb
 801d0c8:	08021a19 	.word	0x08021a19
 801d0cc:	08021543 	.word	0x08021543
 801d0d0:	20009f10 	.word	0x20009f10

0801d0d4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff>:
 801d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0d8:	ed2d 8b08 	vpush	{d8-d11}
 801d0dc:	b095      	sub	sp, #84	; 0x54
 801d0de:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801d0e2:	9306      	str	r3, [sp, #24]
 801d0e4:	f9bd 30b8 	ldrsh.w	r3, [sp, #184]	; 0xb8
 801d0e8:	9307      	str	r3, [sp, #28]
 801d0ea:	920d      	str	r2, [sp, #52]	; 0x34
 801d0ec:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801d0f0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801d0f2:	910a      	str	r1, [sp, #40]	; 0x28
 801d0f4:	9308      	str	r3, [sp, #32]
 801d0f6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801d0fa:	9013      	str	r0, [sp, #76]	; 0x4c
 801d0fc:	6850      	ldr	r0, [r2, #4]
 801d0fe:	6812      	ldr	r2, [r2, #0]
 801d100:	fb00 1303 	mla	r3, r0, r3, r1
 801d104:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 801d108:	9b07      	ldr	r3, [sp, #28]
 801d10a:	3301      	adds	r3, #1
 801d10c:	f023 0301 	bic.w	r3, r3, #1
 801d110:	9309      	str	r3, [sp, #36]	; 0x24
 801d112:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d114:	681f      	ldr	r7, [r3, #0]
 801d116:	eeb0 aa40 	vmov.f32	s20, s0
 801d11a:	eef0 9a60 	vmov.f32	s19, s1
 801d11e:	eeb0 9a41 	vmov.f32	s18, s2
 801d122:	eeb0 8a62 	vmov.f32	s16, s5
 801d126:	eef0 8a43 	vmov.f32	s17, s6
 801d12a:	eef0 ba44 	vmov.f32	s23, s8
 801d12e:	eeb0 ba64 	vmov.f32	s22, s9
 801d132:	eef0 aa45 	vmov.f32	s21, s10
 801d136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d138:	2b00      	cmp	r3, #0
 801d13a:	dc03      	bgt.n	801d144 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d13e:	2b00      	cmp	r3, #0
 801d140:	f340 8260 	ble.w	801d604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801d144:	9b06      	ldr	r3, [sp, #24]
 801d146:	2b00      	cmp	r3, #0
 801d148:	f340 811c 	ble.w	801d384 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b0>
 801d14c:	1422      	asrs	r2, r4, #16
 801d14e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d152:	d42d      	bmi.n	801d1b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xdc>
 801d154:	9807      	ldr	r0, [sp, #28]
 801d156:	1c51      	adds	r1, r2, #1
 801d158:	4288      	cmp	r0, r1
 801d15a:	dd2c      	ble.n	801d1b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d15c:	2b00      	cmp	r3, #0
 801d15e:	db2a      	blt.n	801d1b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d160:	9808      	ldr	r0, [sp, #32]
 801d162:	1c59      	adds	r1, r3, #1
 801d164:	4288      	cmp	r0, r1
 801d166:	dd26      	ble.n	801d1b6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xe2>
 801d168:	9b06      	ldr	r3, [sp, #24]
 801d16a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d16c:	3b01      	subs	r3, #1
 801d16e:	fb02 4203 	mla	r2, r2, r3, r4
 801d172:	1412      	asrs	r2, r2, #16
 801d174:	d42a      	bmi.n	801d1cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d176:	9907      	ldr	r1, [sp, #28]
 801d178:	3201      	adds	r2, #1
 801d17a:	4291      	cmp	r1, r2
 801d17c:	dd26      	ble.n	801d1cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d17e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801d180:	fb02 6303 	mla	r3, r2, r3, r6
 801d184:	141b      	asrs	r3, r3, #16
 801d186:	d421      	bmi.n	801d1cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d188:	9a08      	ldr	r2, [sp, #32]
 801d18a:	3301      	adds	r3, #1
 801d18c:	429a      	cmp	r2, r3
 801d18e:	dd1d      	ble.n	801d1cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xf8>
 801d190:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801d194:	f8dd a018 	ldr.w	sl, [sp, #24]
 801d198:	930e      	str	r3, [sp, #56]	; 0x38
 801d19a:	46d8      	mov	r8, fp
 801d19c:	f1ba 0f00 	cmp.w	sl, #0
 801d1a0:	f300 8164 	bgt.w	801d46c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x398>
 801d1a4:	9b06      	ldr	r3, [sp, #24]
 801d1a6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801d1aa:	eb0b 0b45 	add.w	fp, fp, r5, lsl #1
 801d1ae:	e0eb      	b.n	801d388 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x2b4>
 801d1b0:	1c51      	adds	r1, r2, #1
 801d1b2:	f040 80dd 	bne.w	801d370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801d1b6:	9907      	ldr	r1, [sp, #28]
 801d1b8:	4291      	cmp	r1, r2
 801d1ba:	f340 80d9 	ble.w	801d370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801d1be:	1c5a      	adds	r2, r3, #1
 801d1c0:	f2c0 80d6 	blt.w	801d370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801d1c4:	9a08      	ldr	r2, [sp, #32]
 801d1c6:	4293      	cmp	r3, r2
 801d1c8:	f280 80d2 	bge.w	801d370 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x29c>
 801d1cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801d1d0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801d1d4:	46d8      	mov	r8, fp
 801d1d6:	f1b9 0f00 	cmp.w	r9, #0
 801d1da:	dde3      	ble.n	801d1a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xd0>
 801d1dc:	1420      	asrs	r0, r4, #16
 801d1de:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d1e2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801d1e6:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d1ea:	f100 8127 	bmi.w	801d43c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x368>
 801d1ee:	9d07      	ldr	r5, [sp, #28]
 801d1f0:	f100 0c01 	add.w	ip, r0, #1
 801d1f4:	4565      	cmp	r5, ip
 801d1f6:	f340 8123 	ble.w	801d440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	f2c0 8120 	blt.w	801d440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801d200:	9d08      	ldr	r5, [sp, #32]
 801d202:	f103 0c01 	add.w	ip, r3, #1
 801d206:	4565      	cmp	r5, ip
 801d208:	f340 811a 	ble.w	801d440 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x36c>
 801d20c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801d20e:	fb03 0305 	mla	r3, r3, r5, r0
 801d212:	0858      	lsrs	r0, r3, #1
 801d214:	07dd      	lsls	r5, r3, #31
 801d216:	5c38      	ldrb	r0, [r7, r0]
 801d218:	bf54      	ite	pl
 801d21a:	f000 000f 	andpl.w	r0, r0, #15
 801d21e:	1100      	asrmi	r0, r0, #4
 801d220:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d224:	b2c0      	uxtb	r0, r0
 801d226:	2a00      	cmp	r2, #0
 801d228:	f000 80ed 	beq.w	801d406 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x332>
 801d22c:	f103 0e01 	add.w	lr, r3, #1
 801d230:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 801d234:	f01e 0f01 	tst.w	lr, #1
 801d238:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d23c:	bf0c      	ite	eq
 801d23e:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d242:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d246:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d24a:	fa5f fc8c 	uxtb.w	ip, ip
 801d24e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801d252:	b1f9      	cbz	r1, 801d294 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801d254:	4453      	add	r3, sl
 801d256:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d25a:	07dd      	lsls	r5, r3, #31
 801d25c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d260:	bf54      	ite	pl
 801d262:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d266:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d26a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d26e:	3301      	adds	r3, #1
 801d270:	fa5f fc8c 	uxtb.w	ip, ip
 801d274:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 801d278:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d27c:	07dd      	lsls	r5, r3, #31
 801d27e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d282:	bf54      	ite	pl
 801d284:	f00c 030f 	andpl.w	r3, ip, #15
 801d288:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801d28c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d290:	b2db      	uxtb	r3, r3
 801d292:	9310      	str	r3, [sp, #64]	; 0x40
 801d294:	b292      	uxth	r2, r2
 801d296:	b289      	uxth	r1, r1
 801d298:	fb02 f301 	mul.w	r3, r2, r1
 801d29c:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d2a0:	0112      	lsls	r2, r2, #4
 801d2a2:	b289      	uxth	r1, r1
 801d2a4:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d2a8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d2aa:	1ad2      	subs	r2, r2, r3
 801d2ac:	ebac 0c01 	sub.w	ip, ip, r1
 801d2b0:	b292      	uxth	r2, r2
 801d2b2:	436a      	muls	r2, r5
 801d2b4:	fa1f fc8c 	uxth.w	ip, ip
 801d2b8:	fb00 200c 	mla	r0, r0, ip, r2
 801d2bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d2be:	fb01 0102 	mla	r1, r1, r2, r0
 801d2c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2c4:	fb03 1302 	mla	r3, r3, r2, r1
 801d2c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	d046      	beq.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d2d0:	4ac7      	ldr	r2, [pc, #796]	; (801d5f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801d2d2:	49c8      	ldr	r1, [pc, #800]	; (801d5f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801d2d4:	6812      	ldr	r2, [r2, #0]
 801d2d6:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801d2da:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801d2de:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801d2e2:	b2d2      	uxtb	r2, r2
 801d2e4:	2bff      	cmp	r3, #255	; 0xff
 801d2e6:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d2ea:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d2ee:	4615      	mov	r5, r2
 801d2f0:	f000 809c 	beq.w	801d42c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x358>
 801d2f4:	f8b8 0000 	ldrh.w	r0, [r8]
 801d2f8:	b29a      	uxth	r2, r3
 801d2fa:	1201      	asrs	r1, r0, #8
 801d2fc:	43db      	mvns	r3, r3
 801d2fe:	b2db      	uxtb	r3, r3
 801d300:	fb1e fe02 	smulbb	lr, lr, r2
 801d304:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d308:	fb01 e103 	mla	r1, r1, r3, lr
 801d30c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801d310:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d314:	fb1c fc02 	smulbb	ip, ip, r2
 801d318:	fb0e cc03 	mla	ip, lr, r3, ip
 801d31c:	00c0      	lsls	r0, r0, #3
 801d31e:	fa1f fc8c 	uxth.w	ip, ip
 801d322:	fb15 f202 	smulbb	r2, r5, r2
 801d326:	b2c0      	uxtb	r0, r0
 801d328:	b289      	uxth	r1, r1
 801d32a:	fb00 2303 	mla	r3, r0, r3, r2
 801d32e:	f10c 0e01 	add.w	lr, ip, #1
 801d332:	b29b      	uxth	r3, r3
 801d334:	1c4a      	adds	r2, r1, #1
 801d336:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d33a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d33e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d342:	1c5a      	adds	r2, r3, #1
 801d344:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801d348:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d34c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d350:	ea4c 0101 	orr.w	r1, ip, r1
 801d354:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d358:	4319      	orrs	r1, r3
 801d35a:	f8a8 1000 	strh.w	r1, [r8]
 801d35e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d360:	441c      	add	r4, r3
 801d362:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d364:	f108 0802 	add.w	r8, r8, #2
 801d368:	441e      	add	r6, r3
 801d36a:	f109 39ff 	add.w	r9, r9, #4294967295
 801d36e:	e732      	b.n	801d1d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x102>
 801d370:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d372:	441c      	add	r4, r3
 801d374:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d376:	441e      	add	r6, r3
 801d378:	9b06      	ldr	r3, [sp, #24]
 801d37a:	3b01      	subs	r3, #1
 801d37c:	9306      	str	r3, [sp, #24]
 801d37e:	f10b 0b02 	add.w	fp, fp, #2
 801d382:	e6df      	b.n	801d144 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x70>
 801d384:	f47f aef0 	bne.w	801d168 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x94>
 801d388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	f340 813a 	ble.w	801d604 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x530>
 801d390:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d398:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d39c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d39e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d3a2:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d3a6:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d3aa:	eef0 6a48 	vmov.f32	s13, s16
 801d3ae:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d3b2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3b6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d3ba:	ee16 4a90 	vmov	r4, s13
 801d3be:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d3c2:	eef0 6a68 	vmov.f32	s13, s17
 801d3c6:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d3ca:	ee18 2a10 	vmov	r2, s16
 801d3ce:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d3d2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3d6:	ee18 2a90 	vmov	r2, s17
 801d3da:	9329      	str	r3, [sp, #164]	; 0xa4
 801d3dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d3de:	fb92 f3f3 	sdiv	r3, r2, r3
 801d3e2:	932a      	str	r3, [sp, #168]	; 0xa8
 801d3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d3e8:	3b01      	subs	r3, #1
 801d3ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d3ee:	930a      	str	r3, [sp, #40]	; 0x28
 801d3f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d3f2:	bf08      	it	eq
 801d3f4:	4613      	moveq	r3, r2
 801d3f6:	ee16 6a90 	vmov	r6, s13
 801d3fa:	9306      	str	r3, [sp, #24]
 801d3fc:	eef0 8a67 	vmov.f32	s17, s15
 801d400:	eeb0 8a47 	vmov.f32	s16, s14
 801d404:	e697      	b.n	801d136 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x62>
 801d406:	2900      	cmp	r1, #0
 801d408:	f43f af44 	beq.w	801d294 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801d40c:	4453      	add	r3, sl
 801d40e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d412:	07db      	lsls	r3, r3, #31
 801d414:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d418:	bf54      	ite	pl
 801d41a:	f00c 030f 	andpl.w	r3, ip, #15
 801d41e:	ea4f 132c 	movmi.w	r3, ip, asr #4
 801d422:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d426:	b2db      	uxtb	r3, r3
 801d428:	930b      	str	r3, [sp, #44]	; 0x2c
 801d42a:	e733      	b.n	801d294 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x1c0>
 801d42c:	08d2      	lsrs	r2, r2, #3
 801d42e:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801d432:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801d436:	f8a8 c000 	strh.w	ip, [r8]
 801d43a:	e790      	b.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d43c:	1c45      	adds	r5, r0, #1
 801d43e:	d18e      	bne.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d440:	9d07      	ldr	r5, [sp, #28]
 801d442:	4285      	cmp	r5, r0
 801d444:	dd8b      	ble.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d446:	1c5d      	adds	r5, r3, #1
 801d448:	db89      	blt.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d44a:	9d08      	ldr	r5, [sp, #32]
 801d44c:	429d      	cmp	r5, r3
 801d44e:	dd86      	ble.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d450:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801d454:	9b07      	ldr	r3, [sp, #28]
 801d456:	9300      	str	r3, [sp, #0]
 801d458:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801d45c:	9501      	str	r5, [sp, #4]
 801d45e:	4653      	mov	r3, sl
 801d460:	463a      	mov	r2, r7
 801d462:	4641      	mov	r1, r8
 801d464:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d466:	f7ff fd4f 	bl	801cf08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 801d46a:	e778      	b.n	801d35e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x28a>
 801d46c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d46e:	1422      	asrs	r2, r4, #16
 801d470:	1433      	asrs	r3, r6, #16
 801d472:	fb01 2303 	mla	r3, r1, r3, r2
 801d476:	085a      	lsrs	r2, r3, #1
 801d478:	07d9      	lsls	r1, r3, #31
 801d47a:	5cba      	ldrb	r2, [r7, r2]
 801d47c:	bf54      	ite	pl
 801d47e:	f002 020f 	andpl.w	r2, r2, #15
 801d482:	1112      	asrmi	r2, r2, #4
 801d484:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d488:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801d48c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801d490:	b2d2      	uxtb	r2, r2
 801d492:	2800      	cmp	r0, #0
 801d494:	f000 809b 	beq.w	801d5ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4fa>
 801d498:	f103 0e01 	add.w	lr, r3, #1
 801d49c:	ea4f 015e 	mov.w	r1, lr, lsr #1
 801d4a0:	f01e 0f01 	tst.w	lr, #1
 801d4a4:	5c79      	ldrb	r1, [r7, r1]
 801d4a6:	bf0c      	ite	eq
 801d4a8:	f001 010f 	andeq.w	r1, r1, #15
 801d4ac:	1109      	asrne	r1, r1, #4
 801d4ae:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4b2:	b2c9      	uxtb	r1, r1
 801d4b4:	9111      	str	r1, [sp, #68]	; 0x44
 801d4b6:	f1bc 0f00 	cmp.w	ip, #0
 801d4ba:	d018      	beq.n	801d4ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801d4bc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d4be:	440b      	add	r3, r1
 801d4c0:	0859      	lsrs	r1, r3, #1
 801d4c2:	07dd      	lsls	r5, r3, #31
 801d4c4:	5c79      	ldrb	r1, [r7, r1]
 801d4c6:	bf54      	ite	pl
 801d4c8:	f001 010f 	andpl.w	r1, r1, #15
 801d4cc:	1109      	asrmi	r1, r1, #4
 801d4ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4d2:	b2c9      	uxtb	r1, r1
 801d4d4:	3301      	adds	r3, #1
 801d4d6:	910c      	str	r1, [sp, #48]	; 0x30
 801d4d8:	0859      	lsrs	r1, r3, #1
 801d4da:	07dd      	lsls	r5, r3, #31
 801d4dc:	5c79      	ldrb	r1, [r7, r1]
 801d4de:	bf54      	ite	pl
 801d4e0:	f001 010f 	andpl.w	r1, r1, #15
 801d4e4:	1109      	asrmi	r1, r1, #4
 801d4e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d4ea:	b2c9      	uxtb	r1, r1
 801d4ec:	9112      	str	r1, [sp, #72]	; 0x48
 801d4ee:	b280      	uxth	r0, r0
 801d4f0:	fa1f fc8c 	uxth.w	ip, ip
 801d4f4:	fb00 f30c 	mul.w	r3, r0, ip
 801d4f8:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 801d4fc:	0100      	lsls	r0, r0, #4
 801d4fe:	fa1f fc8c 	uxth.w	ip, ip
 801d502:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d506:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801d508:	1ac0      	subs	r0, r0, r3
 801d50a:	eba1 010c 	sub.w	r1, r1, ip
 801d50e:	b280      	uxth	r0, r0
 801d510:	b289      	uxth	r1, r1
 801d512:	4368      	muls	r0, r5
 801d514:	fb02 0201 	mla	r2, r2, r1, r0
 801d518:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d51a:	fb0c 2c01 	mla	ip, ip, r1, r2
 801d51e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d520:	fb03 c302 	mla	r3, r3, r2, ip
 801d524:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d047      	beq.n	801d5bc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e8>
 801d52c:	4a30      	ldr	r2, [pc, #192]	; (801d5f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x51c>)
 801d52e:	4931      	ldr	r1, [pc, #196]	; (801d5f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x520>)
 801d530:	6812      	ldr	r2, [r2, #0]
 801d532:	2bff      	cmp	r3, #255	; 0xff
 801d534:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801d538:	f3c2 0ccc 	ubfx	ip, r2, #3, #13
 801d53c:	ea01 02c2 	and.w	r2, r1, r2, lsl #3
 801d540:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801d544:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d548:	b2d2      	uxtb	r2, r2
 801d54a:	d055      	beq.n	801d5f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x524>
 801d54c:	f8b8 0000 	ldrh.w	r0, [r8]
 801d550:	fa1f f983 	uxth.w	r9, r3
 801d554:	1201      	asrs	r1, r0, #8
 801d556:	43db      	mvns	r3, r3
 801d558:	b2db      	uxtb	r3, r3
 801d55a:	fb1e fe09 	smulbb	lr, lr, r9
 801d55e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801d562:	fb01 e103 	mla	r1, r1, r3, lr
 801d566:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801d56a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801d56e:	fb1c fc09 	smulbb	ip, ip, r9
 801d572:	fb0e cc03 	mla	ip, lr, r3, ip
 801d576:	00c0      	lsls	r0, r0, #3
 801d578:	fa1f fc8c 	uxth.w	ip, ip
 801d57c:	b2c0      	uxtb	r0, r0
 801d57e:	fb12 f209 	smulbb	r2, r2, r9
 801d582:	b289      	uxth	r1, r1
 801d584:	fb00 2203 	mla	r2, r0, r3, r2
 801d588:	f10c 0e01 	add.w	lr, ip, #1
 801d58c:	b292      	uxth	r2, r2
 801d58e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801d592:	f101 0e01 	add.w	lr, r1, #1
 801d596:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d59a:	eb0e 2111 	add.w	r1, lr, r1, lsr #8
 801d59e:	1c53      	adds	r3, r2, #1
 801d5a0:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801d5a4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801d5a8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d5ac:	ea4c 0c01 	orr.w	ip, ip, r1
 801d5b0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d5b4:	ea4c 0c02 	orr.w	ip, ip, r2
 801d5b8:	f8a8 c000 	strh.w	ip, [r8]
 801d5bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d5be:	441c      	add	r4, r3
 801d5c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801d5c2:	f108 0802 	add.w	r8, r8, #2
 801d5c6:	441e      	add	r6, r3
 801d5c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d5cc:	e5e6      	b.n	801d19c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0xc8>
 801d5ce:	f1bc 0f00 	cmp.w	ip, #0
 801d5d2:	d08c      	beq.n	801d4ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801d5d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d5d6:	440b      	add	r3, r1
 801d5d8:	0859      	lsrs	r1, r3, #1
 801d5da:	07db      	lsls	r3, r3, #31
 801d5dc:	5c79      	ldrb	r1, [r7, r1]
 801d5de:	bf54      	ite	pl
 801d5e0:	f001 010f 	andpl.w	r1, r1, #15
 801d5e4:	1109      	asrmi	r1, r1, #4
 801d5e6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d5ea:	b2c9      	uxtb	r1, r1
 801d5ec:	910c      	str	r1, [sp, #48]	; 0x30
 801d5ee:	e77e      	b.n	801d4ee <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x41a>
 801d5f0:	20009f10 	.word	0x20009f10
 801d5f4:	0007fff8 	.word	0x0007fff8
 801d5f8:	08d2      	lsrs	r2, r2, #3
 801d5fa:	ea42 2e0e 	orr.w	lr, r2, lr, lsl #8
 801d5fe:	ea4e 0ccc 	orr.w	ip, lr, ip, lsl #3
 801d602:	e7d9      	b.n	801d5b8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiissRKNS_14TextureSurfaceEhfff+0x4e4>
 801d604:	b015      	add	sp, #84	; 0x54
 801d606:	ecbd 8b08 	vpop	{d8-d11}
 801d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d60e:	bf00      	nop

0801d610 <CRC_Lock>:
 801d610:	b530      	push	{r4, r5, lr}
 801d612:	4a1d      	ldr	r2, [pc, #116]	; (801d688 <CRC_Lock+0x78>)
 801d614:	6813      	ldr	r3, [r2, #0]
 801d616:	f023 0301 	bic.w	r3, r3, #1
 801d61a:	6013      	str	r3, [r2, #0]
 801d61c:	4b1b      	ldr	r3, [pc, #108]	; (801d68c <CRC_Lock+0x7c>)
 801d61e:	681a      	ldr	r2, [r3, #0]
 801d620:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d624:	4022      	ands	r2, r4
 801d626:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d62a:	42aa      	cmp	r2, r5
 801d62c:	d005      	beq.n	801d63a <CRC_Lock+0x2a>
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d634:	4023      	ands	r3, r4
 801d636:	4293      	cmp	r3, r2
 801d638:	d11d      	bne.n	801d676 <CRC_Lock+0x66>
 801d63a:	4b15      	ldr	r3, [pc, #84]	; (801d690 <CRC_Lock+0x80>)
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	b9d3      	cbnz	r3, 801d676 <CRC_Lock+0x66>
 801d640:	4a14      	ldr	r2, [pc, #80]	; (801d694 <CRC_Lock+0x84>)
 801d642:	6813      	ldr	r3, [r2, #0]
 801d644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d648:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801d64c:	d006      	beq.n	801d65c <CRC_Lock+0x4c>
 801d64e:	6813      	ldr	r3, [r2, #0]
 801d650:	f240 4283 	movw	r2, #1155	; 0x483
 801d654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d658:	4293      	cmp	r3, r2
 801d65a:	d10c      	bne.n	801d676 <CRC_Lock+0x66>
 801d65c:	4b0e      	ldr	r3, [pc, #56]	; (801d698 <CRC_Lock+0x88>)
 801d65e:	2201      	movs	r2, #1
 801d660:	601a      	str	r2, [r3, #0]
 801d662:	681a      	ldr	r2, [r3, #0]
 801d664:	2a00      	cmp	r2, #0
 801d666:	d1fc      	bne.n	801d662 <CRC_Lock+0x52>
 801d668:	4b0c      	ldr	r3, [pc, #48]	; (801d69c <CRC_Lock+0x8c>)
 801d66a:	6018      	str	r0, [r3, #0]
 801d66c:	6818      	ldr	r0, [r3, #0]
 801d66e:	1a43      	subs	r3, r0, r1
 801d670:	4258      	negs	r0, r3
 801d672:	4158      	adcs	r0, r3
 801d674:	bd30      	pop	{r4, r5, pc}
 801d676:	4b0a      	ldr	r3, [pc, #40]	; (801d6a0 <CRC_Lock+0x90>)
 801d678:	2201      	movs	r2, #1
 801d67a:	601a      	str	r2, [r3, #0]
 801d67c:	681a      	ldr	r2, [r3, #0]
 801d67e:	2a00      	cmp	r2, #0
 801d680:	d1fc      	bne.n	801d67c <CRC_Lock+0x6c>
 801d682:	4b08      	ldr	r3, [pc, #32]	; (801d6a4 <CRC_Lock+0x94>)
 801d684:	e7f1      	b.n	801d66a <CRC_Lock+0x5a>
 801d686:	bf00      	nop
 801d688:	e0002000 	.word	0xe0002000
 801d68c:	e000ed00 	.word	0xe000ed00
 801d690:	e0042000 	.word	0xe0042000
 801d694:	5c001000 	.word	0x5c001000
 801d698:	58024c08 	.word	0x58024c08
 801d69c:	58024c00 	.word	0x58024c00
 801d6a0:	40023008 	.word	0x40023008
 801d6a4:	40023000 	.word	0x40023000

0801d6a8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d6a8:	6101      	str	r1, [r0, #16]
 801d6aa:	4770      	bx	lr

0801d6ac <_ZN8touchgfx8Gestures4tickEv>:
 801d6ac:	7b83      	ldrb	r3, [r0, #14]
 801d6ae:	b14b      	cbz	r3, 801d6c4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d6b0:	8903      	ldrh	r3, [r0, #8]
 801d6b2:	3301      	adds	r3, #1
 801d6b4:	b29b      	uxth	r3, r3
 801d6b6:	2b07      	cmp	r3, #7
 801d6b8:	8103      	strh	r3, [r0, #8]
 801d6ba:	bf81      	itttt	hi
 801d6bc:	2300      	movhi	r3, #0
 801d6be:	8143      	strhhi	r3, [r0, #10]
 801d6c0:	8183      	strhhi	r3, [r0, #12]
 801d6c2:	7383      	strbhi	r3, [r0, #14]
 801d6c4:	4770      	bx	lr
	...

0801d6c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d6c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d6cc:	4604      	mov	r4, r0
 801d6ce:	8880      	ldrh	r0, [r0, #4]
 801d6d0:	f8ad 0006 	strh.w	r0, [sp, #6]
 801d6d4:	4698      	mov	r8, r3
 801d6d6:	eba8 0000 	sub.w	r0, r8, r0
 801d6da:	4b1c      	ldr	r3, [pc, #112]	; (801d74c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 801d6dc:	9300      	str	r3, [sp, #0]
 801d6de:	b280      	uxth	r0, r0
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	f88d 3004 	strb.w	r3, [sp, #4]
 801d6e6:	b203      	sxth	r3, r0
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	bfb8      	it	lt
 801d6ec:	4240      	neglt	r0, r0
 801d6ee:	4617      	mov	r7, r2
 801d6f0:	8aa2      	ldrh	r2, [r4, #20]
 801d6f2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d6f6:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d6fa:	bfb8      	it	lt
 801d6fc:	b203      	sxthlt	r3, r0
 801d6fe:	460e      	mov	r6, r1
 801d700:	4293      	cmp	r3, r2
 801d702:	88e1      	ldrh	r1, [r4, #6]
 801d704:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d708:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d70c:	dc08      	bgt.n	801d720 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 801d70e:	1a69      	subs	r1, r5, r1
 801d710:	b289      	uxth	r1, r1
 801d712:	b20b      	sxth	r3, r1
 801d714:	2b00      	cmp	r3, #0
 801d716:	bfbc      	itt	lt
 801d718:	4249      	neglt	r1, r1
 801d71a:	b20b      	sxthlt	r3, r1
 801d71c:	429a      	cmp	r2, r3
 801d71e:	da13      	bge.n	801d748 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 801d720:	6920      	ldr	r0, [r4, #16]
 801d722:	6803      	ldr	r3, [r0, #0]
 801d724:	4669      	mov	r1, sp
 801d726:	685b      	ldr	r3, [r3, #4]
 801d728:	4798      	blx	r3
 801d72a:	eba8 0606 	sub.w	r6, r8, r6
 801d72e:	2300      	movs	r3, #0
 801d730:	1bef      	subs	r7, r5, r7
 801d732:	2001      	movs	r0, #1
 801d734:	8123      	strh	r3, [r4, #8]
 801d736:	8166      	strh	r6, [r4, #10]
 801d738:	81a7      	strh	r7, [r4, #12]
 801d73a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d73e:	80e5      	strh	r5, [r4, #6]
 801d740:	73a0      	strb	r0, [r4, #14]
 801d742:	b004      	add	sp, #16
 801d744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d748:	2000      	movs	r0, #0
 801d74a:	e7fa      	b.n	801d742 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 801d74c:	080207f8 	.word	0x080207f8

0801d750 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d750:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d752:	461e      	mov	r6, r3
 801d754:	1e4b      	subs	r3, r1, #1
 801d756:	2b01      	cmp	r3, #1
 801d758:	b085      	sub	sp, #20
 801d75a:	4604      	mov	r4, r0
 801d75c:	460d      	mov	r5, r1
 801d75e:	4617      	mov	r7, r2
 801d760:	d84b      	bhi.n	801d7fa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d762:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d766:	1cd3      	adds	r3, r2, #3
 801d768:	b29b      	uxth	r3, r3
 801d76a:	2b06      	cmp	r3, #6
 801d76c:	d916      	bls.n	801d79c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d76e:	f8df c098 	ldr.w	ip, [pc, #152]	; 801d808 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801d772:	f8cd c004 	str.w	ip, [sp, #4]
 801d776:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d77a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d77e:	6900      	ldr	r0, [r0, #16]
 801d780:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d784:	f04f 0c00 	mov.w	ip, #0
 801d788:	f88d c008 	strb.w	ip, [sp, #8]
 801d78c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d790:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d794:	6803      	ldr	r3, [r0, #0]
 801d796:	a901      	add	r1, sp, #4
 801d798:	689b      	ldr	r3, [r3, #8]
 801d79a:	4798      	blx	r3
 801d79c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d7a0:	1cd3      	adds	r3, r2, #3
 801d7a2:	b29b      	uxth	r3, r3
 801d7a4:	2b06      	cmp	r3, #6
 801d7a6:	d916      	bls.n	801d7d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d7a8:	f8df c05c 	ldr.w	ip, [pc, #92]	; 801d808 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb8>
 801d7ac:	f8cd c004 	str.w	ip, [sp, #4]
 801d7b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d7b4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d7b8:	6920      	ldr	r0, [r4, #16]
 801d7ba:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d7be:	f04f 0c01 	mov.w	ip, #1
 801d7c2:	f88d c008 	strb.w	ip, [sp, #8]
 801d7c6:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d7ca:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d7ce:	6803      	ldr	r3, [r0, #0]
 801d7d0:	a901      	add	r1, sp, #4
 801d7d2:	689b      	ldr	r3, [r3, #8]
 801d7d4:	4798      	blx	r3
 801d7d6:	4b0b      	ldr	r3, [pc, #44]	; (801d804 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xb4>)
 801d7d8:	9301      	str	r3, [sp, #4]
 801d7da:	6920      	ldr	r0, [r4, #16]
 801d7dc:	f88d 5008 	strb.w	r5, [sp, #8]
 801d7e0:	2300      	movs	r3, #0
 801d7e2:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d7e6:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d7ea:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d7ee:	6803      	ldr	r3, [r0, #0]
 801d7f0:	a901      	add	r1, sp, #4
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	4798      	blx	r3
 801d7f6:	b005      	add	sp, #20
 801d7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d7fa:	2900      	cmp	r1, #0
 801d7fc:	d1eb      	bne.n	801d7d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d7fe:	80a2      	strh	r2, [r4, #4]
 801d800:	80c6      	strh	r6, [r0, #6]
 801d802:	e7e8      	b.n	801d7d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d804:	080207e4 	.word	0x080207e4
 801d808:	0802080c 	.word	0x0802080c

0801d80c <__aeabi_atexit>:
 801d80c:	460b      	mov	r3, r1
 801d80e:	4601      	mov	r1, r0
 801d810:	4618      	mov	r0, r3
 801d812:	f000 b853 	b.w	801d8bc <__cxa_atexit>

0801d816 <__cxa_pure_virtual>:
 801d816:	b508      	push	{r3, lr}
 801d818:	f000 f820 	bl	801d85c <_ZSt9terminatev>

0801d81c <_ZdlPvj>:
 801d81c:	f000 b80f 	b.w	801d83e <_ZdlPv>

0801d820 <__cxa_guard_acquire>:
 801d820:	6803      	ldr	r3, [r0, #0]
 801d822:	07db      	lsls	r3, r3, #31
 801d824:	d406      	bmi.n	801d834 <__cxa_guard_acquire+0x14>
 801d826:	7843      	ldrb	r3, [r0, #1]
 801d828:	b103      	cbz	r3, 801d82c <__cxa_guard_acquire+0xc>
 801d82a:	deff      	udf	#255	; 0xff
 801d82c:	2301      	movs	r3, #1
 801d82e:	7043      	strb	r3, [r0, #1]
 801d830:	4618      	mov	r0, r3
 801d832:	4770      	bx	lr
 801d834:	2000      	movs	r0, #0
 801d836:	4770      	bx	lr

0801d838 <__cxa_guard_release>:
 801d838:	2301      	movs	r3, #1
 801d83a:	6003      	str	r3, [r0, #0]
 801d83c:	4770      	bx	lr

0801d83e <_ZdlPv>:
 801d83e:	f000 b88f 	b.w	801d960 <free>

0801d842 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d842:	b508      	push	{r3, lr}
 801d844:	4780      	blx	r0
 801d846:	f000 f80e 	bl	801d866 <abort>
	...

0801d84c <_ZSt13get_terminatev>:
 801d84c:	4b02      	ldr	r3, [pc, #8]	; (801d858 <_ZSt13get_terminatev+0xc>)
 801d84e:	6818      	ldr	r0, [r3, #0]
 801d850:	f3bf 8f5b 	dmb	ish
 801d854:	4770      	bx	lr
 801d856:	bf00      	nop
 801d858:	20000108 	.word	0x20000108

0801d85c <_ZSt9terminatev>:
 801d85c:	b508      	push	{r3, lr}
 801d85e:	f7ff fff5 	bl	801d84c <_ZSt13get_terminatev>
 801d862:	f7ff ffee 	bl	801d842 <_ZN10__cxxabiv111__terminateEPFvvE>

0801d866 <abort>:
 801d866:	b508      	push	{r3, lr}
 801d868:	2006      	movs	r0, #6
 801d86a:	f000 fc3d 	bl	801e0e8 <raise>
 801d86e:	2001      	movs	r0, #1
 801d870:	f7e3 ff48 	bl	8001704 <_exit>

0801d874 <__assert_func>:
 801d874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d876:	461c      	mov	r4, r3
 801d878:	4b09      	ldr	r3, [pc, #36]	; (801d8a0 <__assert_func+0x2c>)
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	4605      	mov	r5, r0
 801d87e:	68d8      	ldr	r0, [r3, #12]
 801d880:	b152      	cbz	r2, 801d898 <__assert_func+0x24>
 801d882:	4b08      	ldr	r3, [pc, #32]	; (801d8a4 <__assert_func+0x30>)
 801d884:	9100      	str	r1, [sp, #0]
 801d886:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801d88a:	4907      	ldr	r1, [pc, #28]	; (801d8a8 <__assert_func+0x34>)
 801d88c:	462b      	mov	r3, r5
 801d88e:	4622      	mov	r2, r4
 801d890:	f000 f828 	bl	801d8e4 <fiprintf>
 801d894:	f7ff ffe7 	bl	801d866 <abort>
 801d898:	4b04      	ldr	r3, [pc, #16]	; (801d8ac <__assert_func+0x38>)
 801d89a:	461a      	mov	r2, r3
 801d89c:	e7f2      	b.n	801d884 <__assert_func+0x10>
 801d89e:	bf00      	nop
 801d8a0:	2000010c 	.word	0x2000010c
 801d8a4:	08021c54 	.word	0x08021c54
 801d8a8:	08021c61 	.word	0x08021c61
 801d8ac:	08021c8f 	.word	0x08021c8f

0801d8b0 <atexit>:
 801d8b0:	2300      	movs	r3, #0
 801d8b2:	4601      	mov	r1, r0
 801d8b4:	461a      	mov	r2, r3
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f000 bcf2 	b.w	801e2a0 <__register_exitproc>

0801d8bc <__cxa_atexit>:
 801d8bc:	b510      	push	{r4, lr}
 801d8be:	4c05      	ldr	r4, [pc, #20]	; (801d8d4 <__cxa_atexit+0x18>)
 801d8c0:	4613      	mov	r3, r2
 801d8c2:	b12c      	cbz	r4, 801d8d0 <__cxa_atexit+0x14>
 801d8c4:	460a      	mov	r2, r1
 801d8c6:	4601      	mov	r1, r0
 801d8c8:	2002      	movs	r0, #2
 801d8ca:	f000 fce9 	bl	801e2a0 <__register_exitproc>
 801d8ce:	bd10      	pop	{r4, pc}
 801d8d0:	4620      	mov	r0, r4
 801d8d2:	e7fc      	b.n	801d8ce <__cxa_atexit+0x12>
 801d8d4:	0801e2a1 	.word	0x0801e2a1

0801d8d8 <__errno>:
 801d8d8:	4b01      	ldr	r3, [pc, #4]	; (801d8e0 <__errno+0x8>)
 801d8da:	6818      	ldr	r0, [r3, #0]
 801d8dc:	4770      	bx	lr
 801d8de:	bf00      	nop
 801d8e0:	2000010c 	.word	0x2000010c

0801d8e4 <fiprintf>:
 801d8e4:	b40e      	push	{r1, r2, r3}
 801d8e6:	b503      	push	{r0, r1, lr}
 801d8e8:	4601      	mov	r1, r0
 801d8ea:	ab03      	add	r3, sp, #12
 801d8ec:	4805      	ldr	r0, [pc, #20]	; (801d904 <fiprintf+0x20>)
 801d8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801d8f2:	6800      	ldr	r0, [r0, #0]
 801d8f4:	9301      	str	r3, [sp, #4]
 801d8f6:	f000 f921 	bl	801db3c <_vfiprintf_r>
 801d8fa:	b002      	add	sp, #8
 801d8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801d900:	b003      	add	sp, #12
 801d902:	4770      	bx	lr
 801d904:	2000010c 	.word	0x2000010c

0801d908 <__libc_init_array>:
 801d908:	b570      	push	{r4, r5, r6, lr}
 801d90a:	4e0d      	ldr	r6, [pc, #52]	; (801d940 <__libc_init_array+0x38>)
 801d90c:	4c0d      	ldr	r4, [pc, #52]	; (801d944 <__libc_init_array+0x3c>)
 801d90e:	1ba4      	subs	r4, r4, r6
 801d910:	10a4      	asrs	r4, r4, #2
 801d912:	2500      	movs	r5, #0
 801d914:	42a5      	cmp	r5, r4
 801d916:	d109      	bne.n	801d92c <__libc_init_array+0x24>
 801d918:	4e0b      	ldr	r6, [pc, #44]	; (801d948 <__libc_init_array+0x40>)
 801d91a:	4c0c      	ldr	r4, [pc, #48]	; (801d94c <__libc_init_array+0x44>)
 801d91c:	f000 ffb0 	bl	801e880 <_init>
 801d920:	1ba4      	subs	r4, r4, r6
 801d922:	10a4      	asrs	r4, r4, #2
 801d924:	2500      	movs	r5, #0
 801d926:	42a5      	cmp	r5, r4
 801d928:	d105      	bne.n	801d936 <__libc_init_array+0x2e>
 801d92a:	bd70      	pop	{r4, r5, r6, pc}
 801d92c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d930:	4798      	blx	r3
 801d932:	3501      	adds	r5, #1
 801d934:	e7ee      	b.n	801d914 <__libc_init_array+0xc>
 801d936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801d93a:	4798      	blx	r3
 801d93c:	3501      	adds	r5, #1
 801d93e:	e7f2      	b.n	801d926 <__libc_init_array+0x1e>
 801d940:	08051108 	.word	0x08051108
 801d944:	08051108 	.word	0x08051108
 801d948:	08051108 	.word	0x08051108
 801d94c:	0805111c 	.word	0x0805111c

0801d950 <malloc>:
 801d950:	4b02      	ldr	r3, [pc, #8]	; (801d95c <malloc+0xc>)
 801d952:	4601      	mov	r1, r0
 801d954:	6818      	ldr	r0, [r3, #0]
 801d956:	f000 b86d 	b.w	801da34 <_malloc_r>
 801d95a:	bf00      	nop
 801d95c:	2000010c 	.word	0x2000010c

0801d960 <free>:
 801d960:	4b02      	ldr	r3, [pc, #8]	; (801d96c <free+0xc>)
 801d962:	4601      	mov	r1, r0
 801d964:	6818      	ldr	r0, [r3, #0]
 801d966:	f000 b817 	b.w	801d998 <_free_r>
 801d96a:	bf00      	nop
 801d96c:	2000010c 	.word	0x2000010c

0801d970 <memcpy>:
 801d970:	b510      	push	{r4, lr}
 801d972:	1e43      	subs	r3, r0, #1
 801d974:	440a      	add	r2, r1
 801d976:	4291      	cmp	r1, r2
 801d978:	d100      	bne.n	801d97c <memcpy+0xc>
 801d97a:	bd10      	pop	{r4, pc}
 801d97c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d980:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d984:	e7f7      	b.n	801d976 <memcpy+0x6>

0801d986 <memset>:
 801d986:	4402      	add	r2, r0
 801d988:	4603      	mov	r3, r0
 801d98a:	4293      	cmp	r3, r2
 801d98c:	d100      	bne.n	801d990 <memset+0xa>
 801d98e:	4770      	bx	lr
 801d990:	f803 1b01 	strb.w	r1, [r3], #1
 801d994:	e7f9      	b.n	801d98a <memset+0x4>
	...

0801d998 <_free_r>:
 801d998:	b538      	push	{r3, r4, r5, lr}
 801d99a:	4605      	mov	r5, r0
 801d99c:	2900      	cmp	r1, #0
 801d99e:	d045      	beq.n	801da2c <_free_r+0x94>
 801d9a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d9a4:	1f0c      	subs	r4, r1, #4
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	bfb8      	it	lt
 801d9aa:	18e4      	addlt	r4, r4, r3
 801d9ac:	f000 feba 	bl	801e724 <__malloc_lock>
 801d9b0:	4a1f      	ldr	r2, [pc, #124]	; (801da30 <_free_r+0x98>)
 801d9b2:	6813      	ldr	r3, [r2, #0]
 801d9b4:	4610      	mov	r0, r2
 801d9b6:	b933      	cbnz	r3, 801d9c6 <_free_r+0x2e>
 801d9b8:	6063      	str	r3, [r4, #4]
 801d9ba:	6014      	str	r4, [r2, #0]
 801d9bc:	4628      	mov	r0, r5
 801d9be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d9c2:	f000 beb0 	b.w	801e726 <__malloc_unlock>
 801d9c6:	42a3      	cmp	r3, r4
 801d9c8:	d90c      	bls.n	801d9e4 <_free_r+0x4c>
 801d9ca:	6821      	ldr	r1, [r4, #0]
 801d9cc:	1862      	adds	r2, r4, r1
 801d9ce:	4293      	cmp	r3, r2
 801d9d0:	bf04      	itt	eq
 801d9d2:	681a      	ldreq	r2, [r3, #0]
 801d9d4:	685b      	ldreq	r3, [r3, #4]
 801d9d6:	6063      	str	r3, [r4, #4]
 801d9d8:	bf04      	itt	eq
 801d9da:	1852      	addeq	r2, r2, r1
 801d9dc:	6022      	streq	r2, [r4, #0]
 801d9de:	6004      	str	r4, [r0, #0]
 801d9e0:	e7ec      	b.n	801d9bc <_free_r+0x24>
 801d9e2:	4613      	mov	r3, r2
 801d9e4:	685a      	ldr	r2, [r3, #4]
 801d9e6:	b10a      	cbz	r2, 801d9ec <_free_r+0x54>
 801d9e8:	42a2      	cmp	r2, r4
 801d9ea:	d9fa      	bls.n	801d9e2 <_free_r+0x4a>
 801d9ec:	6819      	ldr	r1, [r3, #0]
 801d9ee:	1858      	adds	r0, r3, r1
 801d9f0:	42a0      	cmp	r0, r4
 801d9f2:	d10b      	bne.n	801da0c <_free_r+0x74>
 801d9f4:	6820      	ldr	r0, [r4, #0]
 801d9f6:	4401      	add	r1, r0
 801d9f8:	1858      	adds	r0, r3, r1
 801d9fa:	4282      	cmp	r2, r0
 801d9fc:	6019      	str	r1, [r3, #0]
 801d9fe:	d1dd      	bne.n	801d9bc <_free_r+0x24>
 801da00:	6810      	ldr	r0, [r2, #0]
 801da02:	6852      	ldr	r2, [r2, #4]
 801da04:	605a      	str	r2, [r3, #4]
 801da06:	4401      	add	r1, r0
 801da08:	6019      	str	r1, [r3, #0]
 801da0a:	e7d7      	b.n	801d9bc <_free_r+0x24>
 801da0c:	d902      	bls.n	801da14 <_free_r+0x7c>
 801da0e:	230c      	movs	r3, #12
 801da10:	602b      	str	r3, [r5, #0]
 801da12:	e7d3      	b.n	801d9bc <_free_r+0x24>
 801da14:	6820      	ldr	r0, [r4, #0]
 801da16:	1821      	adds	r1, r4, r0
 801da18:	428a      	cmp	r2, r1
 801da1a:	bf04      	itt	eq
 801da1c:	6811      	ldreq	r1, [r2, #0]
 801da1e:	6852      	ldreq	r2, [r2, #4]
 801da20:	6062      	str	r2, [r4, #4]
 801da22:	bf04      	itt	eq
 801da24:	1809      	addeq	r1, r1, r0
 801da26:	6021      	streq	r1, [r4, #0]
 801da28:	605c      	str	r4, [r3, #4]
 801da2a:	e7c7      	b.n	801d9bc <_free_r+0x24>
 801da2c:	bd38      	pop	{r3, r4, r5, pc}
 801da2e:	bf00      	nop
 801da30:	2000a024 	.word	0x2000a024

0801da34 <_malloc_r>:
 801da34:	b570      	push	{r4, r5, r6, lr}
 801da36:	1ccd      	adds	r5, r1, #3
 801da38:	f025 0503 	bic.w	r5, r5, #3
 801da3c:	3508      	adds	r5, #8
 801da3e:	2d0c      	cmp	r5, #12
 801da40:	bf38      	it	cc
 801da42:	250c      	movcc	r5, #12
 801da44:	2d00      	cmp	r5, #0
 801da46:	4606      	mov	r6, r0
 801da48:	db01      	blt.n	801da4e <_malloc_r+0x1a>
 801da4a:	42a9      	cmp	r1, r5
 801da4c:	d903      	bls.n	801da56 <_malloc_r+0x22>
 801da4e:	230c      	movs	r3, #12
 801da50:	6033      	str	r3, [r6, #0]
 801da52:	2000      	movs	r0, #0
 801da54:	bd70      	pop	{r4, r5, r6, pc}
 801da56:	f000 fe65 	bl	801e724 <__malloc_lock>
 801da5a:	4a21      	ldr	r2, [pc, #132]	; (801dae0 <_malloc_r+0xac>)
 801da5c:	6814      	ldr	r4, [r2, #0]
 801da5e:	4621      	mov	r1, r4
 801da60:	b991      	cbnz	r1, 801da88 <_malloc_r+0x54>
 801da62:	4c20      	ldr	r4, [pc, #128]	; (801dae4 <_malloc_r+0xb0>)
 801da64:	6823      	ldr	r3, [r4, #0]
 801da66:	b91b      	cbnz	r3, 801da70 <_malloc_r+0x3c>
 801da68:	4630      	mov	r0, r6
 801da6a:	f000 fb05 	bl	801e078 <_sbrk_r>
 801da6e:	6020      	str	r0, [r4, #0]
 801da70:	4629      	mov	r1, r5
 801da72:	4630      	mov	r0, r6
 801da74:	f000 fb00 	bl	801e078 <_sbrk_r>
 801da78:	1c43      	adds	r3, r0, #1
 801da7a:	d124      	bne.n	801dac6 <_malloc_r+0x92>
 801da7c:	230c      	movs	r3, #12
 801da7e:	6033      	str	r3, [r6, #0]
 801da80:	4630      	mov	r0, r6
 801da82:	f000 fe50 	bl	801e726 <__malloc_unlock>
 801da86:	e7e4      	b.n	801da52 <_malloc_r+0x1e>
 801da88:	680b      	ldr	r3, [r1, #0]
 801da8a:	1b5b      	subs	r3, r3, r5
 801da8c:	d418      	bmi.n	801dac0 <_malloc_r+0x8c>
 801da8e:	2b0b      	cmp	r3, #11
 801da90:	d90f      	bls.n	801dab2 <_malloc_r+0x7e>
 801da92:	600b      	str	r3, [r1, #0]
 801da94:	50cd      	str	r5, [r1, r3]
 801da96:	18cc      	adds	r4, r1, r3
 801da98:	4630      	mov	r0, r6
 801da9a:	f000 fe44 	bl	801e726 <__malloc_unlock>
 801da9e:	f104 000b 	add.w	r0, r4, #11
 801daa2:	1d23      	adds	r3, r4, #4
 801daa4:	f020 0007 	bic.w	r0, r0, #7
 801daa8:	1ac3      	subs	r3, r0, r3
 801daaa:	d0d3      	beq.n	801da54 <_malloc_r+0x20>
 801daac:	425a      	negs	r2, r3
 801daae:	50e2      	str	r2, [r4, r3]
 801dab0:	e7d0      	b.n	801da54 <_malloc_r+0x20>
 801dab2:	428c      	cmp	r4, r1
 801dab4:	684b      	ldr	r3, [r1, #4]
 801dab6:	bf16      	itet	ne
 801dab8:	6063      	strne	r3, [r4, #4]
 801daba:	6013      	streq	r3, [r2, #0]
 801dabc:	460c      	movne	r4, r1
 801dabe:	e7eb      	b.n	801da98 <_malloc_r+0x64>
 801dac0:	460c      	mov	r4, r1
 801dac2:	6849      	ldr	r1, [r1, #4]
 801dac4:	e7cc      	b.n	801da60 <_malloc_r+0x2c>
 801dac6:	1cc4      	adds	r4, r0, #3
 801dac8:	f024 0403 	bic.w	r4, r4, #3
 801dacc:	42a0      	cmp	r0, r4
 801dace:	d005      	beq.n	801dadc <_malloc_r+0xa8>
 801dad0:	1a21      	subs	r1, r4, r0
 801dad2:	4630      	mov	r0, r6
 801dad4:	f000 fad0 	bl	801e078 <_sbrk_r>
 801dad8:	3001      	adds	r0, #1
 801dada:	d0cf      	beq.n	801da7c <_malloc_r+0x48>
 801dadc:	6025      	str	r5, [r4, #0]
 801dade:	e7db      	b.n	801da98 <_malloc_r+0x64>
 801dae0:	2000a024 	.word	0x2000a024
 801dae4:	2000a028 	.word	0x2000a028

0801dae8 <__sfputc_r>:
 801dae8:	6893      	ldr	r3, [r2, #8]
 801daea:	3b01      	subs	r3, #1
 801daec:	2b00      	cmp	r3, #0
 801daee:	b410      	push	{r4}
 801daf0:	6093      	str	r3, [r2, #8]
 801daf2:	da08      	bge.n	801db06 <__sfputc_r+0x1e>
 801daf4:	6994      	ldr	r4, [r2, #24]
 801daf6:	42a3      	cmp	r3, r4
 801daf8:	db01      	blt.n	801dafe <__sfputc_r+0x16>
 801dafa:	290a      	cmp	r1, #10
 801dafc:	d103      	bne.n	801db06 <__sfputc_r+0x1e>
 801dafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db02:	f000 bb0d 	b.w	801e120 <__swbuf_r>
 801db06:	6813      	ldr	r3, [r2, #0]
 801db08:	1c58      	adds	r0, r3, #1
 801db0a:	6010      	str	r0, [r2, #0]
 801db0c:	7019      	strb	r1, [r3, #0]
 801db0e:	4608      	mov	r0, r1
 801db10:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db14:	4770      	bx	lr

0801db16 <__sfputs_r>:
 801db16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db18:	4606      	mov	r6, r0
 801db1a:	460f      	mov	r7, r1
 801db1c:	4614      	mov	r4, r2
 801db1e:	18d5      	adds	r5, r2, r3
 801db20:	42ac      	cmp	r4, r5
 801db22:	d101      	bne.n	801db28 <__sfputs_r+0x12>
 801db24:	2000      	movs	r0, #0
 801db26:	e007      	b.n	801db38 <__sfputs_r+0x22>
 801db28:	463a      	mov	r2, r7
 801db2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db2e:	4630      	mov	r0, r6
 801db30:	f7ff ffda 	bl	801dae8 <__sfputc_r>
 801db34:	1c43      	adds	r3, r0, #1
 801db36:	d1f3      	bne.n	801db20 <__sfputs_r+0xa>
 801db38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db3c <_vfiprintf_r>:
 801db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db40:	460c      	mov	r4, r1
 801db42:	b09d      	sub	sp, #116	; 0x74
 801db44:	4617      	mov	r7, r2
 801db46:	461d      	mov	r5, r3
 801db48:	4606      	mov	r6, r0
 801db4a:	b118      	cbz	r0, 801db54 <_vfiprintf_r+0x18>
 801db4c:	6983      	ldr	r3, [r0, #24]
 801db4e:	b90b      	cbnz	r3, 801db54 <_vfiprintf_r+0x18>
 801db50:	f000 fcfa 	bl	801e548 <__sinit>
 801db54:	4b7c      	ldr	r3, [pc, #496]	; (801dd48 <_vfiprintf_r+0x20c>)
 801db56:	429c      	cmp	r4, r3
 801db58:	d158      	bne.n	801dc0c <_vfiprintf_r+0xd0>
 801db5a:	6874      	ldr	r4, [r6, #4]
 801db5c:	89a3      	ldrh	r3, [r4, #12]
 801db5e:	0718      	lsls	r0, r3, #28
 801db60:	d55e      	bpl.n	801dc20 <_vfiprintf_r+0xe4>
 801db62:	6923      	ldr	r3, [r4, #16]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d05b      	beq.n	801dc20 <_vfiprintf_r+0xe4>
 801db68:	2300      	movs	r3, #0
 801db6a:	9309      	str	r3, [sp, #36]	; 0x24
 801db6c:	2320      	movs	r3, #32
 801db6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db72:	2330      	movs	r3, #48	; 0x30
 801db74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db78:	9503      	str	r5, [sp, #12]
 801db7a:	f04f 0b01 	mov.w	fp, #1
 801db7e:	46b8      	mov	r8, r7
 801db80:	4645      	mov	r5, r8
 801db82:	f815 3b01 	ldrb.w	r3, [r5], #1
 801db86:	b10b      	cbz	r3, 801db8c <_vfiprintf_r+0x50>
 801db88:	2b25      	cmp	r3, #37	; 0x25
 801db8a:	d154      	bne.n	801dc36 <_vfiprintf_r+0xfa>
 801db8c:	ebb8 0a07 	subs.w	sl, r8, r7
 801db90:	d00b      	beq.n	801dbaa <_vfiprintf_r+0x6e>
 801db92:	4653      	mov	r3, sl
 801db94:	463a      	mov	r2, r7
 801db96:	4621      	mov	r1, r4
 801db98:	4630      	mov	r0, r6
 801db9a:	f7ff ffbc 	bl	801db16 <__sfputs_r>
 801db9e:	3001      	adds	r0, #1
 801dba0:	f000 80c2 	beq.w	801dd28 <_vfiprintf_r+0x1ec>
 801dba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dba6:	4453      	add	r3, sl
 801dba8:	9309      	str	r3, [sp, #36]	; 0x24
 801dbaa:	f898 3000 	ldrb.w	r3, [r8]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	f000 80ba 	beq.w	801dd28 <_vfiprintf_r+0x1ec>
 801dbb4:	2300      	movs	r3, #0
 801dbb6:	f04f 32ff 	mov.w	r2, #4294967295
 801dbba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbbe:	9304      	str	r3, [sp, #16]
 801dbc0:	9307      	str	r3, [sp, #28]
 801dbc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbc6:	931a      	str	r3, [sp, #104]	; 0x68
 801dbc8:	46a8      	mov	r8, r5
 801dbca:	2205      	movs	r2, #5
 801dbcc:	f818 1b01 	ldrb.w	r1, [r8], #1
 801dbd0:	485e      	ldr	r0, [pc, #376]	; (801dd4c <_vfiprintf_r+0x210>)
 801dbd2:	f7e2 fb0d 	bl	80001f0 <memchr>
 801dbd6:	9b04      	ldr	r3, [sp, #16]
 801dbd8:	bb78      	cbnz	r0, 801dc3a <_vfiprintf_r+0xfe>
 801dbda:	06d9      	lsls	r1, r3, #27
 801dbdc:	bf44      	itt	mi
 801dbde:	2220      	movmi	r2, #32
 801dbe0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbe4:	071a      	lsls	r2, r3, #28
 801dbe6:	bf44      	itt	mi
 801dbe8:	222b      	movmi	r2, #43	; 0x2b
 801dbea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbee:	782a      	ldrb	r2, [r5, #0]
 801dbf0:	2a2a      	cmp	r2, #42	; 0x2a
 801dbf2:	d02a      	beq.n	801dc4a <_vfiprintf_r+0x10e>
 801dbf4:	9a07      	ldr	r2, [sp, #28]
 801dbf6:	46a8      	mov	r8, r5
 801dbf8:	2000      	movs	r0, #0
 801dbfa:	250a      	movs	r5, #10
 801dbfc:	4641      	mov	r1, r8
 801dbfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc02:	3b30      	subs	r3, #48	; 0x30
 801dc04:	2b09      	cmp	r3, #9
 801dc06:	d969      	bls.n	801dcdc <_vfiprintf_r+0x1a0>
 801dc08:	b360      	cbz	r0, 801dc64 <_vfiprintf_r+0x128>
 801dc0a:	e024      	b.n	801dc56 <_vfiprintf_r+0x11a>
 801dc0c:	4b50      	ldr	r3, [pc, #320]	; (801dd50 <_vfiprintf_r+0x214>)
 801dc0e:	429c      	cmp	r4, r3
 801dc10:	d101      	bne.n	801dc16 <_vfiprintf_r+0xda>
 801dc12:	68b4      	ldr	r4, [r6, #8]
 801dc14:	e7a2      	b.n	801db5c <_vfiprintf_r+0x20>
 801dc16:	4b4f      	ldr	r3, [pc, #316]	; (801dd54 <_vfiprintf_r+0x218>)
 801dc18:	429c      	cmp	r4, r3
 801dc1a:	bf08      	it	eq
 801dc1c:	68f4      	ldreq	r4, [r6, #12]
 801dc1e:	e79d      	b.n	801db5c <_vfiprintf_r+0x20>
 801dc20:	4621      	mov	r1, r4
 801dc22:	4630      	mov	r0, r6
 801dc24:	f000 face 	bl	801e1c4 <__swsetup_r>
 801dc28:	2800      	cmp	r0, #0
 801dc2a:	d09d      	beq.n	801db68 <_vfiprintf_r+0x2c>
 801dc2c:	f04f 30ff 	mov.w	r0, #4294967295
 801dc30:	b01d      	add	sp, #116	; 0x74
 801dc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc36:	46a8      	mov	r8, r5
 801dc38:	e7a2      	b.n	801db80 <_vfiprintf_r+0x44>
 801dc3a:	4a44      	ldr	r2, [pc, #272]	; (801dd4c <_vfiprintf_r+0x210>)
 801dc3c:	1a80      	subs	r0, r0, r2
 801dc3e:	fa0b f000 	lsl.w	r0, fp, r0
 801dc42:	4318      	orrs	r0, r3
 801dc44:	9004      	str	r0, [sp, #16]
 801dc46:	4645      	mov	r5, r8
 801dc48:	e7be      	b.n	801dbc8 <_vfiprintf_r+0x8c>
 801dc4a:	9a03      	ldr	r2, [sp, #12]
 801dc4c:	1d11      	adds	r1, r2, #4
 801dc4e:	6812      	ldr	r2, [r2, #0]
 801dc50:	9103      	str	r1, [sp, #12]
 801dc52:	2a00      	cmp	r2, #0
 801dc54:	db01      	blt.n	801dc5a <_vfiprintf_r+0x11e>
 801dc56:	9207      	str	r2, [sp, #28]
 801dc58:	e004      	b.n	801dc64 <_vfiprintf_r+0x128>
 801dc5a:	4252      	negs	r2, r2
 801dc5c:	f043 0302 	orr.w	r3, r3, #2
 801dc60:	9207      	str	r2, [sp, #28]
 801dc62:	9304      	str	r3, [sp, #16]
 801dc64:	f898 3000 	ldrb.w	r3, [r8]
 801dc68:	2b2e      	cmp	r3, #46	; 0x2e
 801dc6a:	d10e      	bne.n	801dc8a <_vfiprintf_r+0x14e>
 801dc6c:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dc70:	2b2a      	cmp	r3, #42	; 0x2a
 801dc72:	d138      	bne.n	801dce6 <_vfiprintf_r+0x1aa>
 801dc74:	9b03      	ldr	r3, [sp, #12]
 801dc76:	1d1a      	adds	r2, r3, #4
 801dc78:	681b      	ldr	r3, [r3, #0]
 801dc7a:	9203      	str	r2, [sp, #12]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	bfb8      	it	lt
 801dc80:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc84:	f108 0802 	add.w	r8, r8, #2
 801dc88:	9305      	str	r3, [sp, #20]
 801dc8a:	4d33      	ldr	r5, [pc, #204]	; (801dd58 <_vfiprintf_r+0x21c>)
 801dc8c:	f898 1000 	ldrb.w	r1, [r8]
 801dc90:	2203      	movs	r2, #3
 801dc92:	4628      	mov	r0, r5
 801dc94:	f7e2 faac 	bl	80001f0 <memchr>
 801dc98:	b140      	cbz	r0, 801dcac <_vfiprintf_r+0x170>
 801dc9a:	2340      	movs	r3, #64	; 0x40
 801dc9c:	1b40      	subs	r0, r0, r5
 801dc9e:	fa03 f000 	lsl.w	r0, r3, r0
 801dca2:	9b04      	ldr	r3, [sp, #16]
 801dca4:	4303      	orrs	r3, r0
 801dca6:	f108 0801 	add.w	r8, r8, #1
 801dcaa:	9304      	str	r3, [sp, #16]
 801dcac:	f898 1000 	ldrb.w	r1, [r8]
 801dcb0:	482a      	ldr	r0, [pc, #168]	; (801dd5c <_vfiprintf_r+0x220>)
 801dcb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dcb6:	2206      	movs	r2, #6
 801dcb8:	f108 0701 	add.w	r7, r8, #1
 801dcbc:	f7e2 fa98 	bl	80001f0 <memchr>
 801dcc0:	2800      	cmp	r0, #0
 801dcc2:	d037      	beq.n	801dd34 <_vfiprintf_r+0x1f8>
 801dcc4:	4b26      	ldr	r3, [pc, #152]	; (801dd60 <_vfiprintf_r+0x224>)
 801dcc6:	bb1b      	cbnz	r3, 801dd10 <_vfiprintf_r+0x1d4>
 801dcc8:	9b03      	ldr	r3, [sp, #12]
 801dcca:	3307      	adds	r3, #7
 801dccc:	f023 0307 	bic.w	r3, r3, #7
 801dcd0:	3308      	adds	r3, #8
 801dcd2:	9303      	str	r3, [sp, #12]
 801dcd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcd6:	444b      	add	r3, r9
 801dcd8:	9309      	str	r3, [sp, #36]	; 0x24
 801dcda:	e750      	b.n	801db7e <_vfiprintf_r+0x42>
 801dcdc:	fb05 3202 	mla	r2, r5, r2, r3
 801dce0:	2001      	movs	r0, #1
 801dce2:	4688      	mov	r8, r1
 801dce4:	e78a      	b.n	801dbfc <_vfiprintf_r+0xc0>
 801dce6:	2300      	movs	r3, #0
 801dce8:	f108 0801 	add.w	r8, r8, #1
 801dcec:	9305      	str	r3, [sp, #20]
 801dcee:	4619      	mov	r1, r3
 801dcf0:	250a      	movs	r5, #10
 801dcf2:	4640      	mov	r0, r8
 801dcf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcf8:	3a30      	subs	r2, #48	; 0x30
 801dcfa:	2a09      	cmp	r2, #9
 801dcfc:	d903      	bls.n	801dd06 <_vfiprintf_r+0x1ca>
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d0c3      	beq.n	801dc8a <_vfiprintf_r+0x14e>
 801dd02:	9105      	str	r1, [sp, #20]
 801dd04:	e7c1      	b.n	801dc8a <_vfiprintf_r+0x14e>
 801dd06:	fb05 2101 	mla	r1, r5, r1, r2
 801dd0a:	2301      	movs	r3, #1
 801dd0c:	4680      	mov	r8, r0
 801dd0e:	e7f0      	b.n	801dcf2 <_vfiprintf_r+0x1b6>
 801dd10:	ab03      	add	r3, sp, #12
 801dd12:	9300      	str	r3, [sp, #0]
 801dd14:	4622      	mov	r2, r4
 801dd16:	4b13      	ldr	r3, [pc, #76]	; (801dd64 <_vfiprintf_r+0x228>)
 801dd18:	a904      	add	r1, sp, #16
 801dd1a:	4630      	mov	r0, r6
 801dd1c:	f3af 8000 	nop.w
 801dd20:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dd24:	4681      	mov	r9, r0
 801dd26:	d1d5      	bne.n	801dcd4 <_vfiprintf_r+0x198>
 801dd28:	89a3      	ldrh	r3, [r4, #12]
 801dd2a:	065b      	lsls	r3, r3, #25
 801dd2c:	f53f af7e 	bmi.w	801dc2c <_vfiprintf_r+0xf0>
 801dd30:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd32:	e77d      	b.n	801dc30 <_vfiprintf_r+0xf4>
 801dd34:	ab03      	add	r3, sp, #12
 801dd36:	9300      	str	r3, [sp, #0]
 801dd38:	4622      	mov	r2, r4
 801dd3a:	4b0a      	ldr	r3, [pc, #40]	; (801dd64 <_vfiprintf_r+0x228>)
 801dd3c:	a904      	add	r1, sp, #16
 801dd3e:	4630      	mov	r0, r6
 801dd40:	f000 f888 	bl	801de54 <_printf_i>
 801dd44:	e7ec      	b.n	801dd20 <_vfiprintf_r+0x1e4>
 801dd46:	bf00      	nop
 801dd48:	08021cec 	.word	0x08021cec
 801dd4c:	08021c94 	.word	0x08021c94
 801dd50:	08021d0c 	.word	0x08021d0c
 801dd54:	08021ccc 	.word	0x08021ccc
 801dd58:	08021c9a 	.word	0x08021c9a
 801dd5c:	08021c9e 	.word	0x08021c9e
 801dd60:	00000000 	.word	0x00000000
 801dd64:	0801db17 	.word	0x0801db17

0801dd68 <_printf_common>:
 801dd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd6c:	4691      	mov	r9, r2
 801dd6e:	461f      	mov	r7, r3
 801dd70:	688a      	ldr	r2, [r1, #8]
 801dd72:	690b      	ldr	r3, [r1, #16]
 801dd74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dd78:	4293      	cmp	r3, r2
 801dd7a:	bfb8      	it	lt
 801dd7c:	4613      	movlt	r3, r2
 801dd7e:	f8c9 3000 	str.w	r3, [r9]
 801dd82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dd86:	4606      	mov	r6, r0
 801dd88:	460c      	mov	r4, r1
 801dd8a:	b112      	cbz	r2, 801dd92 <_printf_common+0x2a>
 801dd8c:	3301      	adds	r3, #1
 801dd8e:	f8c9 3000 	str.w	r3, [r9]
 801dd92:	6823      	ldr	r3, [r4, #0]
 801dd94:	0699      	lsls	r1, r3, #26
 801dd96:	bf42      	ittt	mi
 801dd98:	f8d9 3000 	ldrmi.w	r3, [r9]
 801dd9c:	3302      	addmi	r3, #2
 801dd9e:	f8c9 3000 	strmi.w	r3, [r9]
 801dda2:	6825      	ldr	r5, [r4, #0]
 801dda4:	f015 0506 	ands.w	r5, r5, #6
 801dda8:	d107      	bne.n	801ddba <_printf_common+0x52>
 801ddaa:	f104 0a19 	add.w	sl, r4, #25
 801ddae:	68e3      	ldr	r3, [r4, #12]
 801ddb0:	f8d9 2000 	ldr.w	r2, [r9]
 801ddb4:	1a9b      	subs	r3, r3, r2
 801ddb6:	42ab      	cmp	r3, r5
 801ddb8:	dc28      	bgt.n	801de0c <_printf_common+0xa4>
 801ddba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ddbe:	6822      	ldr	r2, [r4, #0]
 801ddc0:	3300      	adds	r3, #0
 801ddc2:	bf18      	it	ne
 801ddc4:	2301      	movne	r3, #1
 801ddc6:	0692      	lsls	r2, r2, #26
 801ddc8:	d42d      	bmi.n	801de26 <_printf_common+0xbe>
 801ddca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ddce:	4639      	mov	r1, r7
 801ddd0:	4630      	mov	r0, r6
 801ddd2:	47c0      	blx	r8
 801ddd4:	3001      	adds	r0, #1
 801ddd6:	d020      	beq.n	801de1a <_printf_common+0xb2>
 801ddd8:	6823      	ldr	r3, [r4, #0]
 801ddda:	68e5      	ldr	r5, [r4, #12]
 801dddc:	f8d9 2000 	ldr.w	r2, [r9]
 801dde0:	f003 0306 	and.w	r3, r3, #6
 801dde4:	2b04      	cmp	r3, #4
 801dde6:	bf08      	it	eq
 801dde8:	1aad      	subeq	r5, r5, r2
 801ddea:	68a3      	ldr	r3, [r4, #8]
 801ddec:	6922      	ldr	r2, [r4, #16]
 801ddee:	bf0c      	ite	eq
 801ddf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ddf4:	2500      	movne	r5, #0
 801ddf6:	4293      	cmp	r3, r2
 801ddf8:	bfc4      	itt	gt
 801ddfa:	1a9b      	subgt	r3, r3, r2
 801ddfc:	18ed      	addgt	r5, r5, r3
 801ddfe:	f04f 0900 	mov.w	r9, #0
 801de02:	341a      	adds	r4, #26
 801de04:	454d      	cmp	r5, r9
 801de06:	d11a      	bne.n	801de3e <_printf_common+0xd6>
 801de08:	2000      	movs	r0, #0
 801de0a:	e008      	b.n	801de1e <_printf_common+0xb6>
 801de0c:	2301      	movs	r3, #1
 801de0e:	4652      	mov	r2, sl
 801de10:	4639      	mov	r1, r7
 801de12:	4630      	mov	r0, r6
 801de14:	47c0      	blx	r8
 801de16:	3001      	adds	r0, #1
 801de18:	d103      	bne.n	801de22 <_printf_common+0xba>
 801de1a:	f04f 30ff 	mov.w	r0, #4294967295
 801de1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de22:	3501      	adds	r5, #1
 801de24:	e7c3      	b.n	801ddae <_printf_common+0x46>
 801de26:	18e1      	adds	r1, r4, r3
 801de28:	1c5a      	adds	r2, r3, #1
 801de2a:	2030      	movs	r0, #48	; 0x30
 801de2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801de30:	4422      	add	r2, r4
 801de32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801de36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801de3a:	3302      	adds	r3, #2
 801de3c:	e7c5      	b.n	801ddca <_printf_common+0x62>
 801de3e:	2301      	movs	r3, #1
 801de40:	4622      	mov	r2, r4
 801de42:	4639      	mov	r1, r7
 801de44:	4630      	mov	r0, r6
 801de46:	47c0      	blx	r8
 801de48:	3001      	adds	r0, #1
 801de4a:	d0e6      	beq.n	801de1a <_printf_common+0xb2>
 801de4c:	f109 0901 	add.w	r9, r9, #1
 801de50:	e7d8      	b.n	801de04 <_printf_common+0x9c>
	...

0801de54 <_printf_i>:
 801de54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801de5c:	460c      	mov	r4, r1
 801de5e:	7e09      	ldrb	r1, [r1, #24]
 801de60:	b085      	sub	sp, #20
 801de62:	296e      	cmp	r1, #110	; 0x6e
 801de64:	4617      	mov	r7, r2
 801de66:	4606      	mov	r6, r0
 801de68:	4698      	mov	r8, r3
 801de6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801de6c:	f000 80b3 	beq.w	801dfd6 <_printf_i+0x182>
 801de70:	d822      	bhi.n	801deb8 <_printf_i+0x64>
 801de72:	2963      	cmp	r1, #99	; 0x63
 801de74:	d036      	beq.n	801dee4 <_printf_i+0x90>
 801de76:	d80a      	bhi.n	801de8e <_printf_i+0x3a>
 801de78:	2900      	cmp	r1, #0
 801de7a:	f000 80b9 	beq.w	801dff0 <_printf_i+0x19c>
 801de7e:	2958      	cmp	r1, #88	; 0x58
 801de80:	f000 8083 	beq.w	801df8a <_printf_i+0x136>
 801de84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801de88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801de8c:	e032      	b.n	801def4 <_printf_i+0xa0>
 801de8e:	2964      	cmp	r1, #100	; 0x64
 801de90:	d001      	beq.n	801de96 <_printf_i+0x42>
 801de92:	2969      	cmp	r1, #105	; 0x69
 801de94:	d1f6      	bne.n	801de84 <_printf_i+0x30>
 801de96:	6820      	ldr	r0, [r4, #0]
 801de98:	6813      	ldr	r3, [r2, #0]
 801de9a:	0605      	lsls	r5, r0, #24
 801de9c:	f103 0104 	add.w	r1, r3, #4
 801dea0:	d52a      	bpl.n	801def8 <_printf_i+0xa4>
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	6011      	str	r1, [r2, #0]
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	da03      	bge.n	801deb2 <_printf_i+0x5e>
 801deaa:	222d      	movs	r2, #45	; 0x2d
 801deac:	425b      	negs	r3, r3
 801deae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801deb2:	486f      	ldr	r0, [pc, #444]	; (801e070 <_printf_i+0x21c>)
 801deb4:	220a      	movs	r2, #10
 801deb6:	e039      	b.n	801df2c <_printf_i+0xd8>
 801deb8:	2973      	cmp	r1, #115	; 0x73
 801deba:	f000 809d 	beq.w	801dff8 <_printf_i+0x1a4>
 801debe:	d808      	bhi.n	801ded2 <_printf_i+0x7e>
 801dec0:	296f      	cmp	r1, #111	; 0x6f
 801dec2:	d020      	beq.n	801df06 <_printf_i+0xb2>
 801dec4:	2970      	cmp	r1, #112	; 0x70
 801dec6:	d1dd      	bne.n	801de84 <_printf_i+0x30>
 801dec8:	6823      	ldr	r3, [r4, #0]
 801deca:	f043 0320 	orr.w	r3, r3, #32
 801dece:	6023      	str	r3, [r4, #0]
 801ded0:	e003      	b.n	801deda <_printf_i+0x86>
 801ded2:	2975      	cmp	r1, #117	; 0x75
 801ded4:	d017      	beq.n	801df06 <_printf_i+0xb2>
 801ded6:	2978      	cmp	r1, #120	; 0x78
 801ded8:	d1d4      	bne.n	801de84 <_printf_i+0x30>
 801deda:	2378      	movs	r3, #120	; 0x78
 801dedc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801dee0:	4864      	ldr	r0, [pc, #400]	; (801e074 <_printf_i+0x220>)
 801dee2:	e055      	b.n	801df90 <_printf_i+0x13c>
 801dee4:	6813      	ldr	r3, [r2, #0]
 801dee6:	1d19      	adds	r1, r3, #4
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	6011      	str	r1, [r2, #0]
 801deec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801def0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801def4:	2301      	movs	r3, #1
 801def6:	e08c      	b.n	801e012 <_printf_i+0x1be>
 801def8:	681b      	ldr	r3, [r3, #0]
 801defa:	6011      	str	r1, [r2, #0]
 801defc:	f010 0f40 	tst.w	r0, #64	; 0x40
 801df00:	bf18      	it	ne
 801df02:	b21b      	sxthne	r3, r3
 801df04:	e7cf      	b.n	801dea6 <_printf_i+0x52>
 801df06:	6813      	ldr	r3, [r2, #0]
 801df08:	6825      	ldr	r5, [r4, #0]
 801df0a:	1d18      	adds	r0, r3, #4
 801df0c:	6010      	str	r0, [r2, #0]
 801df0e:	0628      	lsls	r0, r5, #24
 801df10:	d501      	bpl.n	801df16 <_printf_i+0xc2>
 801df12:	681b      	ldr	r3, [r3, #0]
 801df14:	e002      	b.n	801df1c <_printf_i+0xc8>
 801df16:	0668      	lsls	r0, r5, #25
 801df18:	d5fb      	bpl.n	801df12 <_printf_i+0xbe>
 801df1a:	881b      	ldrh	r3, [r3, #0]
 801df1c:	4854      	ldr	r0, [pc, #336]	; (801e070 <_printf_i+0x21c>)
 801df1e:	296f      	cmp	r1, #111	; 0x6f
 801df20:	bf14      	ite	ne
 801df22:	220a      	movne	r2, #10
 801df24:	2208      	moveq	r2, #8
 801df26:	2100      	movs	r1, #0
 801df28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801df2c:	6865      	ldr	r5, [r4, #4]
 801df2e:	60a5      	str	r5, [r4, #8]
 801df30:	2d00      	cmp	r5, #0
 801df32:	f2c0 8095 	blt.w	801e060 <_printf_i+0x20c>
 801df36:	6821      	ldr	r1, [r4, #0]
 801df38:	f021 0104 	bic.w	r1, r1, #4
 801df3c:	6021      	str	r1, [r4, #0]
 801df3e:	2b00      	cmp	r3, #0
 801df40:	d13d      	bne.n	801dfbe <_printf_i+0x16a>
 801df42:	2d00      	cmp	r5, #0
 801df44:	f040 808e 	bne.w	801e064 <_printf_i+0x210>
 801df48:	4665      	mov	r5, ip
 801df4a:	2a08      	cmp	r2, #8
 801df4c:	d10b      	bne.n	801df66 <_printf_i+0x112>
 801df4e:	6823      	ldr	r3, [r4, #0]
 801df50:	07db      	lsls	r3, r3, #31
 801df52:	d508      	bpl.n	801df66 <_printf_i+0x112>
 801df54:	6923      	ldr	r3, [r4, #16]
 801df56:	6862      	ldr	r2, [r4, #4]
 801df58:	429a      	cmp	r2, r3
 801df5a:	bfde      	ittt	le
 801df5c:	2330      	movle	r3, #48	; 0x30
 801df5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 801df62:	f105 35ff 	addle.w	r5, r5, #4294967295
 801df66:	ebac 0305 	sub.w	r3, ip, r5
 801df6a:	6123      	str	r3, [r4, #16]
 801df6c:	f8cd 8000 	str.w	r8, [sp]
 801df70:	463b      	mov	r3, r7
 801df72:	aa03      	add	r2, sp, #12
 801df74:	4621      	mov	r1, r4
 801df76:	4630      	mov	r0, r6
 801df78:	f7ff fef6 	bl	801dd68 <_printf_common>
 801df7c:	3001      	adds	r0, #1
 801df7e:	d14d      	bne.n	801e01c <_printf_i+0x1c8>
 801df80:	f04f 30ff 	mov.w	r0, #4294967295
 801df84:	b005      	add	sp, #20
 801df86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801df8a:	4839      	ldr	r0, [pc, #228]	; (801e070 <_printf_i+0x21c>)
 801df8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801df90:	6813      	ldr	r3, [r2, #0]
 801df92:	6821      	ldr	r1, [r4, #0]
 801df94:	1d1d      	adds	r5, r3, #4
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	6015      	str	r5, [r2, #0]
 801df9a:	060a      	lsls	r2, r1, #24
 801df9c:	d50b      	bpl.n	801dfb6 <_printf_i+0x162>
 801df9e:	07ca      	lsls	r2, r1, #31
 801dfa0:	bf44      	itt	mi
 801dfa2:	f041 0120 	orrmi.w	r1, r1, #32
 801dfa6:	6021      	strmi	r1, [r4, #0]
 801dfa8:	b91b      	cbnz	r3, 801dfb2 <_printf_i+0x15e>
 801dfaa:	6822      	ldr	r2, [r4, #0]
 801dfac:	f022 0220 	bic.w	r2, r2, #32
 801dfb0:	6022      	str	r2, [r4, #0]
 801dfb2:	2210      	movs	r2, #16
 801dfb4:	e7b7      	b.n	801df26 <_printf_i+0xd2>
 801dfb6:	064d      	lsls	r5, r1, #25
 801dfb8:	bf48      	it	mi
 801dfba:	b29b      	uxthmi	r3, r3
 801dfbc:	e7ef      	b.n	801df9e <_printf_i+0x14a>
 801dfbe:	4665      	mov	r5, ip
 801dfc0:	fbb3 f1f2 	udiv	r1, r3, r2
 801dfc4:	fb02 3311 	mls	r3, r2, r1, r3
 801dfc8:	5cc3      	ldrb	r3, [r0, r3]
 801dfca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801dfce:	460b      	mov	r3, r1
 801dfd0:	2900      	cmp	r1, #0
 801dfd2:	d1f5      	bne.n	801dfc0 <_printf_i+0x16c>
 801dfd4:	e7b9      	b.n	801df4a <_printf_i+0xf6>
 801dfd6:	6813      	ldr	r3, [r2, #0]
 801dfd8:	6825      	ldr	r5, [r4, #0]
 801dfda:	6961      	ldr	r1, [r4, #20]
 801dfdc:	1d18      	adds	r0, r3, #4
 801dfde:	6010      	str	r0, [r2, #0]
 801dfe0:	0628      	lsls	r0, r5, #24
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	d501      	bpl.n	801dfea <_printf_i+0x196>
 801dfe6:	6019      	str	r1, [r3, #0]
 801dfe8:	e002      	b.n	801dff0 <_printf_i+0x19c>
 801dfea:	066a      	lsls	r2, r5, #25
 801dfec:	d5fb      	bpl.n	801dfe6 <_printf_i+0x192>
 801dfee:	8019      	strh	r1, [r3, #0]
 801dff0:	2300      	movs	r3, #0
 801dff2:	6123      	str	r3, [r4, #16]
 801dff4:	4665      	mov	r5, ip
 801dff6:	e7b9      	b.n	801df6c <_printf_i+0x118>
 801dff8:	6813      	ldr	r3, [r2, #0]
 801dffa:	1d19      	adds	r1, r3, #4
 801dffc:	6011      	str	r1, [r2, #0]
 801dffe:	681d      	ldr	r5, [r3, #0]
 801e000:	6862      	ldr	r2, [r4, #4]
 801e002:	2100      	movs	r1, #0
 801e004:	4628      	mov	r0, r5
 801e006:	f7e2 f8f3 	bl	80001f0 <memchr>
 801e00a:	b108      	cbz	r0, 801e010 <_printf_i+0x1bc>
 801e00c:	1b40      	subs	r0, r0, r5
 801e00e:	6060      	str	r0, [r4, #4]
 801e010:	6863      	ldr	r3, [r4, #4]
 801e012:	6123      	str	r3, [r4, #16]
 801e014:	2300      	movs	r3, #0
 801e016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e01a:	e7a7      	b.n	801df6c <_printf_i+0x118>
 801e01c:	6923      	ldr	r3, [r4, #16]
 801e01e:	462a      	mov	r2, r5
 801e020:	4639      	mov	r1, r7
 801e022:	4630      	mov	r0, r6
 801e024:	47c0      	blx	r8
 801e026:	3001      	adds	r0, #1
 801e028:	d0aa      	beq.n	801df80 <_printf_i+0x12c>
 801e02a:	6823      	ldr	r3, [r4, #0]
 801e02c:	079b      	lsls	r3, r3, #30
 801e02e:	d413      	bmi.n	801e058 <_printf_i+0x204>
 801e030:	68e0      	ldr	r0, [r4, #12]
 801e032:	9b03      	ldr	r3, [sp, #12]
 801e034:	4298      	cmp	r0, r3
 801e036:	bfb8      	it	lt
 801e038:	4618      	movlt	r0, r3
 801e03a:	e7a3      	b.n	801df84 <_printf_i+0x130>
 801e03c:	2301      	movs	r3, #1
 801e03e:	464a      	mov	r2, r9
 801e040:	4639      	mov	r1, r7
 801e042:	4630      	mov	r0, r6
 801e044:	47c0      	blx	r8
 801e046:	3001      	adds	r0, #1
 801e048:	d09a      	beq.n	801df80 <_printf_i+0x12c>
 801e04a:	3501      	adds	r5, #1
 801e04c:	68e3      	ldr	r3, [r4, #12]
 801e04e:	9a03      	ldr	r2, [sp, #12]
 801e050:	1a9b      	subs	r3, r3, r2
 801e052:	42ab      	cmp	r3, r5
 801e054:	dcf2      	bgt.n	801e03c <_printf_i+0x1e8>
 801e056:	e7eb      	b.n	801e030 <_printf_i+0x1dc>
 801e058:	2500      	movs	r5, #0
 801e05a:	f104 0919 	add.w	r9, r4, #25
 801e05e:	e7f5      	b.n	801e04c <_printf_i+0x1f8>
 801e060:	2b00      	cmp	r3, #0
 801e062:	d1ac      	bne.n	801dfbe <_printf_i+0x16a>
 801e064:	7803      	ldrb	r3, [r0, #0]
 801e066:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e06a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e06e:	e76c      	b.n	801df4a <_printf_i+0xf6>
 801e070:	08021ca5 	.word	0x08021ca5
 801e074:	08021cb6 	.word	0x08021cb6

0801e078 <_sbrk_r>:
 801e078:	b538      	push	{r3, r4, r5, lr}
 801e07a:	4c06      	ldr	r4, [pc, #24]	; (801e094 <_sbrk_r+0x1c>)
 801e07c:	2300      	movs	r3, #0
 801e07e:	4605      	mov	r5, r0
 801e080:	4608      	mov	r0, r1
 801e082:	6023      	str	r3, [r4, #0]
 801e084:	f7e3 fbb6 	bl	80017f4 <_sbrk>
 801e088:	1c43      	adds	r3, r0, #1
 801e08a:	d102      	bne.n	801e092 <_sbrk_r+0x1a>
 801e08c:	6823      	ldr	r3, [r4, #0]
 801e08e:	b103      	cbz	r3, 801e092 <_sbrk_r+0x1a>
 801e090:	602b      	str	r3, [r5, #0]
 801e092:	bd38      	pop	{r3, r4, r5, pc}
 801e094:	2000a41c 	.word	0x2000a41c

0801e098 <_raise_r>:
 801e098:	291f      	cmp	r1, #31
 801e09a:	b538      	push	{r3, r4, r5, lr}
 801e09c:	4604      	mov	r4, r0
 801e09e:	460d      	mov	r5, r1
 801e0a0:	d904      	bls.n	801e0ac <_raise_r+0x14>
 801e0a2:	2316      	movs	r3, #22
 801e0a4:	6003      	str	r3, [r0, #0]
 801e0a6:	f04f 30ff 	mov.w	r0, #4294967295
 801e0aa:	bd38      	pop	{r3, r4, r5, pc}
 801e0ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e0ae:	b112      	cbz	r2, 801e0b6 <_raise_r+0x1e>
 801e0b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e0b4:	b94b      	cbnz	r3, 801e0ca <_raise_r+0x32>
 801e0b6:	4620      	mov	r0, r4
 801e0b8:	f000 f830 	bl	801e11c <_getpid_r>
 801e0bc:	462a      	mov	r2, r5
 801e0be:	4601      	mov	r1, r0
 801e0c0:	4620      	mov	r0, r4
 801e0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e0c6:	f000 b817 	b.w	801e0f8 <_kill_r>
 801e0ca:	2b01      	cmp	r3, #1
 801e0cc:	d00a      	beq.n	801e0e4 <_raise_r+0x4c>
 801e0ce:	1c59      	adds	r1, r3, #1
 801e0d0:	d103      	bne.n	801e0da <_raise_r+0x42>
 801e0d2:	2316      	movs	r3, #22
 801e0d4:	6003      	str	r3, [r0, #0]
 801e0d6:	2001      	movs	r0, #1
 801e0d8:	e7e7      	b.n	801e0aa <_raise_r+0x12>
 801e0da:	2400      	movs	r4, #0
 801e0dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e0e0:	4628      	mov	r0, r5
 801e0e2:	4798      	blx	r3
 801e0e4:	2000      	movs	r0, #0
 801e0e6:	e7e0      	b.n	801e0aa <_raise_r+0x12>

0801e0e8 <raise>:
 801e0e8:	4b02      	ldr	r3, [pc, #8]	; (801e0f4 <raise+0xc>)
 801e0ea:	4601      	mov	r1, r0
 801e0ec:	6818      	ldr	r0, [r3, #0]
 801e0ee:	f7ff bfd3 	b.w	801e098 <_raise_r>
 801e0f2:	bf00      	nop
 801e0f4:	2000010c 	.word	0x2000010c

0801e0f8 <_kill_r>:
 801e0f8:	b538      	push	{r3, r4, r5, lr}
 801e0fa:	4c07      	ldr	r4, [pc, #28]	; (801e118 <_kill_r+0x20>)
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	4605      	mov	r5, r0
 801e100:	4608      	mov	r0, r1
 801e102:	4611      	mov	r1, r2
 801e104:	6023      	str	r3, [r4, #0]
 801e106:	f7e3 faed 	bl	80016e4 <_kill>
 801e10a:	1c43      	adds	r3, r0, #1
 801e10c:	d102      	bne.n	801e114 <_kill_r+0x1c>
 801e10e:	6823      	ldr	r3, [r4, #0]
 801e110:	b103      	cbz	r3, 801e114 <_kill_r+0x1c>
 801e112:	602b      	str	r3, [r5, #0]
 801e114:	bd38      	pop	{r3, r4, r5, pc}
 801e116:	bf00      	nop
 801e118:	2000a41c 	.word	0x2000a41c

0801e11c <_getpid_r>:
 801e11c:	f7e3 bada 	b.w	80016d4 <_getpid>

0801e120 <__swbuf_r>:
 801e120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e122:	460e      	mov	r6, r1
 801e124:	4614      	mov	r4, r2
 801e126:	4605      	mov	r5, r0
 801e128:	b118      	cbz	r0, 801e132 <__swbuf_r+0x12>
 801e12a:	6983      	ldr	r3, [r0, #24]
 801e12c:	b90b      	cbnz	r3, 801e132 <__swbuf_r+0x12>
 801e12e:	f000 fa0b 	bl	801e548 <__sinit>
 801e132:	4b21      	ldr	r3, [pc, #132]	; (801e1b8 <__swbuf_r+0x98>)
 801e134:	429c      	cmp	r4, r3
 801e136:	d12a      	bne.n	801e18e <__swbuf_r+0x6e>
 801e138:	686c      	ldr	r4, [r5, #4]
 801e13a:	69a3      	ldr	r3, [r4, #24]
 801e13c:	60a3      	str	r3, [r4, #8]
 801e13e:	89a3      	ldrh	r3, [r4, #12]
 801e140:	071a      	lsls	r2, r3, #28
 801e142:	d52e      	bpl.n	801e1a2 <__swbuf_r+0x82>
 801e144:	6923      	ldr	r3, [r4, #16]
 801e146:	b363      	cbz	r3, 801e1a2 <__swbuf_r+0x82>
 801e148:	6923      	ldr	r3, [r4, #16]
 801e14a:	6820      	ldr	r0, [r4, #0]
 801e14c:	1ac0      	subs	r0, r0, r3
 801e14e:	6963      	ldr	r3, [r4, #20]
 801e150:	b2f6      	uxtb	r6, r6
 801e152:	4283      	cmp	r3, r0
 801e154:	4637      	mov	r7, r6
 801e156:	dc04      	bgt.n	801e162 <__swbuf_r+0x42>
 801e158:	4621      	mov	r1, r4
 801e15a:	4628      	mov	r0, r5
 801e15c:	f000 f98a 	bl	801e474 <_fflush_r>
 801e160:	bb28      	cbnz	r0, 801e1ae <__swbuf_r+0x8e>
 801e162:	68a3      	ldr	r3, [r4, #8]
 801e164:	3b01      	subs	r3, #1
 801e166:	60a3      	str	r3, [r4, #8]
 801e168:	6823      	ldr	r3, [r4, #0]
 801e16a:	1c5a      	adds	r2, r3, #1
 801e16c:	6022      	str	r2, [r4, #0]
 801e16e:	701e      	strb	r6, [r3, #0]
 801e170:	6963      	ldr	r3, [r4, #20]
 801e172:	3001      	adds	r0, #1
 801e174:	4283      	cmp	r3, r0
 801e176:	d004      	beq.n	801e182 <__swbuf_r+0x62>
 801e178:	89a3      	ldrh	r3, [r4, #12]
 801e17a:	07db      	lsls	r3, r3, #31
 801e17c:	d519      	bpl.n	801e1b2 <__swbuf_r+0x92>
 801e17e:	2e0a      	cmp	r6, #10
 801e180:	d117      	bne.n	801e1b2 <__swbuf_r+0x92>
 801e182:	4621      	mov	r1, r4
 801e184:	4628      	mov	r0, r5
 801e186:	f000 f975 	bl	801e474 <_fflush_r>
 801e18a:	b190      	cbz	r0, 801e1b2 <__swbuf_r+0x92>
 801e18c:	e00f      	b.n	801e1ae <__swbuf_r+0x8e>
 801e18e:	4b0b      	ldr	r3, [pc, #44]	; (801e1bc <__swbuf_r+0x9c>)
 801e190:	429c      	cmp	r4, r3
 801e192:	d101      	bne.n	801e198 <__swbuf_r+0x78>
 801e194:	68ac      	ldr	r4, [r5, #8]
 801e196:	e7d0      	b.n	801e13a <__swbuf_r+0x1a>
 801e198:	4b09      	ldr	r3, [pc, #36]	; (801e1c0 <__swbuf_r+0xa0>)
 801e19a:	429c      	cmp	r4, r3
 801e19c:	bf08      	it	eq
 801e19e:	68ec      	ldreq	r4, [r5, #12]
 801e1a0:	e7cb      	b.n	801e13a <__swbuf_r+0x1a>
 801e1a2:	4621      	mov	r1, r4
 801e1a4:	4628      	mov	r0, r5
 801e1a6:	f000 f80d 	bl	801e1c4 <__swsetup_r>
 801e1aa:	2800      	cmp	r0, #0
 801e1ac:	d0cc      	beq.n	801e148 <__swbuf_r+0x28>
 801e1ae:	f04f 37ff 	mov.w	r7, #4294967295
 801e1b2:	4638      	mov	r0, r7
 801e1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1b6:	bf00      	nop
 801e1b8:	08021cec 	.word	0x08021cec
 801e1bc:	08021d0c 	.word	0x08021d0c
 801e1c0:	08021ccc 	.word	0x08021ccc

0801e1c4 <__swsetup_r>:
 801e1c4:	4b32      	ldr	r3, [pc, #200]	; (801e290 <__swsetup_r+0xcc>)
 801e1c6:	b570      	push	{r4, r5, r6, lr}
 801e1c8:	681d      	ldr	r5, [r3, #0]
 801e1ca:	4606      	mov	r6, r0
 801e1cc:	460c      	mov	r4, r1
 801e1ce:	b125      	cbz	r5, 801e1da <__swsetup_r+0x16>
 801e1d0:	69ab      	ldr	r3, [r5, #24]
 801e1d2:	b913      	cbnz	r3, 801e1da <__swsetup_r+0x16>
 801e1d4:	4628      	mov	r0, r5
 801e1d6:	f000 f9b7 	bl	801e548 <__sinit>
 801e1da:	4b2e      	ldr	r3, [pc, #184]	; (801e294 <__swsetup_r+0xd0>)
 801e1dc:	429c      	cmp	r4, r3
 801e1de:	d10f      	bne.n	801e200 <__swsetup_r+0x3c>
 801e1e0:	686c      	ldr	r4, [r5, #4]
 801e1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e1e6:	b29a      	uxth	r2, r3
 801e1e8:	0715      	lsls	r5, r2, #28
 801e1ea:	d42c      	bmi.n	801e246 <__swsetup_r+0x82>
 801e1ec:	06d0      	lsls	r0, r2, #27
 801e1ee:	d411      	bmi.n	801e214 <__swsetup_r+0x50>
 801e1f0:	2209      	movs	r2, #9
 801e1f2:	6032      	str	r2, [r6, #0]
 801e1f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e1f8:	81a3      	strh	r3, [r4, #12]
 801e1fa:	f04f 30ff 	mov.w	r0, #4294967295
 801e1fe:	e03e      	b.n	801e27e <__swsetup_r+0xba>
 801e200:	4b25      	ldr	r3, [pc, #148]	; (801e298 <__swsetup_r+0xd4>)
 801e202:	429c      	cmp	r4, r3
 801e204:	d101      	bne.n	801e20a <__swsetup_r+0x46>
 801e206:	68ac      	ldr	r4, [r5, #8]
 801e208:	e7eb      	b.n	801e1e2 <__swsetup_r+0x1e>
 801e20a:	4b24      	ldr	r3, [pc, #144]	; (801e29c <__swsetup_r+0xd8>)
 801e20c:	429c      	cmp	r4, r3
 801e20e:	bf08      	it	eq
 801e210:	68ec      	ldreq	r4, [r5, #12]
 801e212:	e7e6      	b.n	801e1e2 <__swsetup_r+0x1e>
 801e214:	0751      	lsls	r1, r2, #29
 801e216:	d512      	bpl.n	801e23e <__swsetup_r+0x7a>
 801e218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e21a:	b141      	cbz	r1, 801e22e <__swsetup_r+0x6a>
 801e21c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e220:	4299      	cmp	r1, r3
 801e222:	d002      	beq.n	801e22a <__swsetup_r+0x66>
 801e224:	4630      	mov	r0, r6
 801e226:	f7ff fbb7 	bl	801d998 <_free_r>
 801e22a:	2300      	movs	r3, #0
 801e22c:	6363      	str	r3, [r4, #52]	; 0x34
 801e22e:	89a3      	ldrh	r3, [r4, #12]
 801e230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e234:	81a3      	strh	r3, [r4, #12]
 801e236:	2300      	movs	r3, #0
 801e238:	6063      	str	r3, [r4, #4]
 801e23a:	6923      	ldr	r3, [r4, #16]
 801e23c:	6023      	str	r3, [r4, #0]
 801e23e:	89a3      	ldrh	r3, [r4, #12]
 801e240:	f043 0308 	orr.w	r3, r3, #8
 801e244:	81a3      	strh	r3, [r4, #12]
 801e246:	6923      	ldr	r3, [r4, #16]
 801e248:	b94b      	cbnz	r3, 801e25e <__swsetup_r+0x9a>
 801e24a:	89a3      	ldrh	r3, [r4, #12]
 801e24c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e254:	d003      	beq.n	801e25e <__swsetup_r+0x9a>
 801e256:	4621      	mov	r1, r4
 801e258:	4630      	mov	r0, r6
 801e25a:	f000 fa23 	bl	801e6a4 <__smakebuf_r>
 801e25e:	89a2      	ldrh	r2, [r4, #12]
 801e260:	f012 0301 	ands.w	r3, r2, #1
 801e264:	d00c      	beq.n	801e280 <__swsetup_r+0xbc>
 801e266:	2300      	movs	r3, #0
 801e268:	60a3      	str	r3, [r4, #8]
 801e26a:	6963      	ldr	r3, [r4, #20]
 801e26c:	425b      	negs	r3, r3
 801e26e:	61a3      	str	r3, [r4, #24]
 801e270:	6923      	ldr	r3, [r4, #16]
 801e272:	b953      	cbnz	r3, 801e28a <__swsetup_r+0xc6>
 801e274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e278:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801e27c:	d1ba      	bne.n	801e1f4 <__swsetup_r+0x30>
 801e27e:	bd70      	pop	{r4, r5, r6, pc}
 801e280:	0792      	lsls	r2, r2, #30
 801e282:	bf58      	it	pl
 801e284:	6963      	ldrpl	r3, [r4, #20]
 801e286:	60a3      	str	r3, [r4, #8]
 801e288:	e7f2      	b.n	801e270 <__swsetup_r+0xac>
 801e28a:	2000      	movs	r0, #0
 801e28c:	e7f7      	b.n	801e27e <__swsetup_r+0xba>
 801e28e:	bf00      	nop
 801e290:	2000010c 	.word	0x2000010c
 801e294:	08021cec 	.word	0x08021cec
 801e298:	08021d0c 	.word	0x08021d0c
 801e29c:	08021ccc 	.word	0x08021ccc

0801e2a0 <__register_exitproc>:
 801e2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2a4:	4d2c      	ldr	r5, [pc, #176]	; (801e358 <__register_exitproc+0xb8>)
 801e2a6:	682c      	ldr	r4, [r5, #0]
 801e2a8:	4607      	mov	r7, r0
 801e2aa:	460e      	mov	r6, r1
 801e2ac:	4691      	mov	r9, r2
 801e2ae:	4698      	mov	r8, r3
 801e2b0:	b934      	cbnz	r4, 801e2c0 <__register_exitproc+0x20>
 801e2b2:	4b2a      	ldr	r3, [pc, #168]	; (801e35c <__register_exitproc+0xbc>)
 801e2b4:	4c2a      	ldr	r4, [pc, #168]	; (801e360 <__register_exitproc+0xc0>)
 801e2b6:	602c      	str	r4, [r5, #0]
 801e2b8:	b113      	cbz	r3, 801e2c0 <__register_exitproc+0x20>
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801e2c0:	6863      	ldr	r3, [r4, #4]
 801e2c2:	2b1f      	cmp	r3, #31
 801e2c4:	dd3d      	ble.n	801e342 <__register_exitproc+0xa2>
 801e2c6:	4b27      	ldr	r3, [pc, #156]	; (801e364 <__register_exitproc+0xc4>)
 801e2c8:	b91b      	cbnz	r3, 801e2d2 <__register_exitproc+0x32>
 801e2ca:	f04f 30ff 	mov.w	r0, #4294967295
 801e2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2d2:	208c      	movs	r0, #140	; 0x8c
 801e2d4:	f7ff fb3c 	bl	801d950 <malloc>
 801e2d8:	4604      	mov	r4, r0
 801e2da:	2800      	cmp	r0, #0
 801e2dc:	d0f5      	beq.n	801e2ca <__register_exitproc+0x2a>
 801e2de:	2300      	movs	r3, #0
 801e2e0:	682a      	ldr	r2, [r5, #0]
 801e2e2:	6002      	str	r2, [r0, #0]
 801e2e4:	6043      	str	r3, [r0, #4]
 801e2e6:	6028      	str	r0, [r5, #0]
 801e2e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801e2ec:	b30f      	cbz	r7, 801e332 <__register_exitproc+0x92>
 801e2ee:	f44f 7084 	mov.w	r0, #264	; 0x108
 801e2f2:	f7ff fb2d 	bl	801d950 <malloc>
 801e2f6:	2800      	cmp	r0, #0
 801e2f8:	d0e7      	beq.n	801e2ca <__register_exitproc+0x2a>
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801e300:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801e304:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801e308:	6862      	ldr	r2, [r4, #4]
 801e30a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801e30e:	2301      	movs	r3, #1
 801e310:	4093      	lsls	r3, r2
 801e312:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801e316:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801e31a:	431a      	orrs	r2, r3
 801e31c:	2f02      	cmp	r7, #2
 801e31e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801e322:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801e326:	bf02      	ittt	eq
 801e328:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801e32c:	4313      	orreq	r3, r2
 801e32e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801e332:	6863      	ldr	r3, [r4, #4]
 801e334:	1c5a      	adds	r2, r3, #1
 801e336:	3302      	adds	r3, #2
 801e338:	6062      	str	r2, [r4, #4]
 801e33a:	2000      	movs	r0, #0
 801e33c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801e340:	e7c5      	b.n	801e2ce <__register_exitproc+0x2e>
 801e342:	2f00      	cmp	r7, #0
 801e344:	d0f5      	beq.n	801e332 <__register_exitproc+0x92>
 801e346:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801e34a:	2800      	cmp	r0, #0
 801e34c:	d1dc      	bne.n	801e308 <__register_exitproc+0x68>
 801e34e:	4b05      	ldr	r3, [pc, #20]	; (801e364 <__register_exitproc+0xc4>)
 801e350:	2b00      	cmp	r3, #0
 801e352:	d0ba      	beq.n	801e2ca <__register_exitproc+0x2a>
 801e354:	e7cb      	b.n	801e2ee <__register_exitproc+0x4e>
 801e356:	bf00      	nop
 801e358:	2000a1c0 	.word	0x2000a1c0
 801e35c:	08021cc8 	.word	0x08021cc8
 801e360:	2000a134 	.word	0x2000a134
 801e364:	0801d951 	.word	0x0801d951

0801e368 <__sflush_r>:
 801e368:	898a      	ldrh	r2, [r1, #12]
 801e36a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e36e:	4605      	mov	r5, r0
 801e370:	0710      	lsls	r0, r2, #28
 801e372:	460c      	mov	r4, r1
 801e374:	d458      	bmi.n	801e428 <__sflush_r+0xc0>
 801e376:	684b      	ldr	r3, [r1, #4]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	dc05      	bgt.n	801e388 <__sflush_r+0x20>
 801e37c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e37e:	2b00      	cmp	r3, #0
 801e380:	dc02      	bgt.n	801e388 <__sflush_r+0x20>
 801e382:	2000      	movs	r0, #0
 801e384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e38a:	2e00      	cmp	r6, #0
 801e38c:	d0f9      	beq.n	801e382 <__sflush_r+0x1a>
 801e38e:	2300      	movs	r3, #0
 801e390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e394:	682f      	ldr	r7, [r5, #0]
 801e396:	6a21      	ldr	r1, [r4, #32]
 801e398:	602b      	str	r3, [r5, #0]
 801e39a:	d032      	beq.n	801e402 <__sflush_r+0x9a>
 801e39c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e39e:	89a3      	ldrh	r3, [r4, #12]
 801e3a0:	075a      	lsls	r2, r3, #29
 801e3a2:	d505      	bpl.n	801e3b0 <__sflush_r+0x48>
 801e3a4:	6863      	ldr	r3, [r4, #4]
 801e3a6:	1ac0      	subs	r0, r0, r3
 801e3a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e3aa:	b10b      	cbz	r3, 801e3b0 <__sflush_r+0x48>
 801e3ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e3ae:	1ac0      	subs	r0, r0, r3
 801e3b0:	2300      	movs	r3, #0
 801e3b2:	4602      	mov	r2, r0
 801e3b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e3b6:	6a21      	ldr	r1, [r4, #32]
 801e3b8:	4628      	mov	r0, r5
 801e3ba:	47b0      	blx	r6
 801e3bc:	1c43      	adds	r3, r0, #1
 801e3be:	89a3      	ldrh	r3, [r4, #12]
 801e3c0:	d106      	bne.n	801e3d0 <__sflush_r+0x68>
 801e3c2:	6829      	ldr	r1, [r5, #0]
 801e3c4:	291d      	cmp	r1, #29
 801e3c6:	d848      	bhi.n	801e45a <__sflush_r+0xf2>
 801e3c8:	4a29      	ldr	r2, [pc, #164]	; (801e470 <__sflush_r+0x108>)
 801e3ca:	40ca      	lsrs	r2, r1
 801e3cc:	07d6      	lsls	r6, r2, #31
 801e3ce:	d544      	bpl.n	801e45a <__sflush_r+0xf2>
 801e3d0:	2200      	movs	r2, #0
 801e3d2:	6062      	str	r2, [r4, #4]
 801e3d4:	04d9      	lsls	r1, r3, #19
 801e3d6:	6922      	ldr	r2, [r4, #16]
 801e3d8:	6022      	str	r2, [r4, #0]
 801e3da:	d504      	bpl.n	801e3e6 <__sflush_r+0x7e>
 801e3dc:	1c42      	adds	r2, r0, #1
 801e3de:	d101      	bne.n	801e3e4 <__sflush_r+0x7c>
 801e3e0:	682b      	ldr	r3, [r5, #0]
 801e3e2:	b903      	cbnz	r3, 801e3e6 <__sflush_r+0x7e>
 801e3e4:	6560      	str	r0, [r4, #84]	; 0x54
 801e3e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e3e8:	602f      	str	r7, [r5, #0]
 801e3ea:	2900      	cmp	r1, #0
 801e3ec:	d0c9      	beq.n	801e382 <__sflush_r+0x1a>
 801e3ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e3f2:	4299      	cmp	r1, r3
 801e3f4:	d002      	beq.n	801e3fc <__sflush_r+0x94>
 801e3f6:	4628      	mov	r0, r5
 801e3f8:	f7ff face 	bl	801d998 <_free_r>
 801e3fc:	2000      	movs	r0, #0
 801e3fe:	6360      	str	r0, [r4, #52]	; 0x34
 801e400:	e7c0      	b.n	801e384 <__sflush_r+0x1c>
 801e402:	2301      	movs	r3, #1
 801e404:	4628      	mov	r0, r5
 801e406:	47b0      	blx	r6
 801e408:	1c41      	adds	r1, r0, #1
 801e40a:	d1c8      	bne.n	801e39e <__sflush_r+0x36>
 801e40c:	682b      	ldr	r3, [r5, #0]
 801e40e:	2b00      	cmp	r3, #0
 801e410:	d0c5      	beq.n	801e39e <__sflush_r+0x36>
 801e412:	2b1d      	cmp	r3, #29
 801e414:	d001      	beq.n	801e41a <__sflush_r+0xb2>
 801e416:	2b16      	cmp	r3, #22
 801e418:	d101      	bne.n	801e41e <__sflush_r+0xb6>
 801e41a:	602f      	str	r7, [r5, #0]
 801e41c:	e7b1      	b.n	801e382 <__sflush_r+0x1a>
 801e41e:	89a3      	ldrh	r3, [r4, #12]
 801e420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e424:	81a3      	strh	r3, [r4, #12]
 801e426:	e7ad      	b.n	801e384 <__sflush_r+0x1c>
 801e428:	690f      	ldr	r7, [r1, #16]
 801e42a:	2f00      	cmp	r7, #0
 801e42c:	d0a9      	beq.n	801e382 <__sflush_r+0x1a>
 801e42e:	0793      	lsls	r3, r2, #30
 801e430:	680e      	ldr	r6, [r1, #0]
 801e432:	bf08      	it	eq
 801e434:	694b      	ldreq	r3, [r1, #20]
 801e436:	600f      	str	r7, [r1, #0]
 801e438:	bf18      	it	ne
 801e43a:	2300      	movne	r3, #0
 801e43c:	eba6 0807 	sub.w	r8, r6, r7
 801e440:	608b      	str	r3, [r1, #8]
 801e442:	f1b8 0f00 	cmp.w	r8, #0
 801e446:	dd9c      	ble.n	801e382 <__sflush_r+0x1a>
 801e448:	4643      	mov	r3, r8
 801e44a:	463a      	mov	r2, r7
 801e44c:	6a21      	ldr	r1, [r4, #32]
 801e44e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e450:	4628      	mov	r0, r5
 801e452:	47b0      	blx	r6
 801e454:	2800      	cmp	r0, #0
 801e456:	dc06      	bgt.n	801e466 <__sflush_r+0xfe>
 801e458:	89a3      	ldrh	r3, [r4, #12]
 801e45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e45e:	81a3      	strh	r3, [r4, #12]
 801e460:	f04f 30ff 	mov.w	r0, #4294967295
 801e464:	e78e      	b.n	801e384 <__sflush_r+0x1c>
 801e466:	4407      	add	r7, r0
 801e468:	eba8 0800 	sub.w	r8, r8, r0
 801e46c:	e7e9      	b.n	801e442 <__sflush_r+0xda>
 801e46e:	bf00      	nop
 801e470:	20400001 	.word	0x20400001

0801e474 <_fflush_r>:
 801e474:	b538      	push	{r3, r4, r5, lr}
 801e476:	690b      	ldr	r3, [r1, #16]
 801e478:	4605      	mov	r5, r0
 801e47a:	460c      	mov	r4, r1
 801e47c:	b1db      	cbz	r3, 801e4b6 <_fflush_r+0x42>
 801e47e:	b118      	cbz	r0, 801e488 <_fflush_r+0x14>
 801e480:	6983      	ldr	r3, [r0, #24]
 801e482:	b90b      	cbnz	r3, 801e488 <_fflush_r+0x14>
 801e484:	f000 f860 	bl	801e548 <__sinit>
 801e488:	4b0c      	ldr	r3, [pc, #48]	; (801e4bc <_fflush_r+0x48>)
 801e48a:	429c      	cmp	r4, r3
 801e48c:	d109      	bne.n	801e4a2 <_fflush_r+0x2e>
 801e48e:	686c      	ldr	r4, [r5, #4]
 801e490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e494:	b17b      	cbz	r3, 801e4b6 <_fflush_r+0x42>
 801e496:	4621      	mov	r1, r4
 801e498:	4628      	mov	r0, r5
 801e49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e49e:	f7ff bf63 	b.w	801e368 <__sflush_r>
 801e4a2:	4b07      	ldr	r3, [pc, #28]	; (801e4c0 <_fflush_r+0x4c>)
 801e4a4:	429c      	cmp	r4, r3
 801e4a6:	d101      	bne.n	801e4ac <_fflush_r+0x38>
 801e4a8:	68ac      	ldr	r4, [r5, #8]
 801e4aa:	e7f1      	b.n	801e490 <_fflush_r+0x1c>
 801e4ac:	4b05      	ldr	r3, [pc, #20]	; (801e4c4 <_fflush_r+0x50>)
 801e4ae:	429c      	cmp	r4, r3
 801e4b0:	bf08      	it	eq
 801e4b2:	68ec      	ldreq	r4, [r5, #12]
 801e4b4:	e7ec      	b.n	801e490 <_fflush_r+0x1c>
 801e4b6:	2000      	movs	r0, #0
 801e4b8:	bd38      	pop	{r3, r4, r5, pc}
 801e4ba:	bf00      	nop
 801e4bc:	08021cec 	.word	0x08021cec
 801e4c0:	08021d0c 	.word	0x08021d0c
 801e4c4:	08021ccc 	.word	0x08021ccc

0801e4c8 <std>:
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	b510      	push	{r4, lr}
 801e4cc:	4604      	mov	r4, r0
 801e4ce:	e9c0 3300 	strd	r3, r3, [r0]
 801e4d2:	6083      	str	r3, [r0, #8]
 801e4d4:	8181      	strh	r1, [r0, #12]
 801e4d6:	6643      	str	r3, [r0, #100]	; 0x64
 801e4d8:	81c2      	strh	r2, [r0, #14]
 801e4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e4de:	6183      	str	r3, [r0, #24]
 801e4e0:	4619      	mov	r1, r3
 801e4e2:	2208      	movs	r2, #8
 801e4e4:	305c      	adds	r0, #92	; 0x5c
 801e4e6:	f7ff fa4e 	bl	801d986 <memset>
 801e4ea:	4b05      	ldr	r3, [pc, #20]	; (801e500 <std+0x38>)
 801e4ec:	6263      	str	r3, [r4, #36]	; 0x24
 801e4ee:	4b05      	ldr	r3, [pc, #20]	; (801e504 <std+0x3c>)
 801e4f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801e4f2:	4b05      	ldr	r3, [pc, #20]	; (801e508 <std+0x40>)
 801e4f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e4f6:	4b05      	ldr	r3, [pc, #20]	; (801e50c <std+0x44>)
 801e4f8:	6224      	str	r4, [r4, #32]
 801e4fa:	6323      	str	r3, [r4, #48]	; 0x30
 801e4fc:	bd10      	pop	{r4, pc}
 801e4fe:	bf00      	nop
 801e500:	0801e729 	.word	0x0801e729
 801e504:	0801e74b 	.word	0x0801e74b
 801e508:	0801e783 	.word	0x0801e783
 801e50c:	0801e7a7 	.word	0x0801e7a7

0801e510 <_cleanup_r>:
 801e510:	4901      	ldr	r1, [pc, #4]	; (801e518 <_cleanup_r+0x8>)
 801e512:	f000 b885 	b.w	801e620 <_fwalk_reent>
 801e516:	bf00      	nop
 801e518:	0801e475 	.word	0x0801e475

0801e51c <__sfmoreglue>:
 801e51c:	b570      	push	{r4, r5, r6, lr}
 801e51e:	1e4a      	subs	r2, r1, #1
 801e520:	2568      	movs	r5, #104	; 0x68
 801e522:	4355      	muls	r5, r2
 801e524:	460e      	mov	r6, r1
 801e526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e52a:	f7ff fa83 	bl	801da34 <_malloc_r>
 801e52e:	4604      	mov	r4, r0
 801e530:	b140      	cbz	r0, 801e544 <__sfmoreglue+0x28>
 801e532:	2100      	movs	r1, #0
 801e534:	e9c0 1600 	strd	r1, r6, [r0]
 801e538:	300c      	adds	r0, #12
 801e53a:	60a0      	str	r0, [r4, #8]
 801e53c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e540:	f7ff fa21 	bl	801d986 <memset>
 801e544:	4620      	mov	r0, r4
 801e546:	bd70      	pop	{r4, r5, r6, pc}

0801e548 <__sinit>:
 801e548:	6983      	ldr	r3, [r0, #24]
 801e54a:	b510      	push	{r4, lr}
 801e54c:	4604      	mov	r4, r0
 801e54e:	bb33      	cbnz	r3, 801e59e <__sinit+0x56>
 801e550:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801e554:	6503      	str	r3, [r0, #80]	; 0x50
 801e556:	4b12      	ldr	r3, [pc, #72]	; (801e5a0 <__sinit+0x58>)
 801e558:	4a12      	ldr	r2, [pc, #72]	; (801e5a4 <__sinit+0x5c>)
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	6282      	str	r2, [r0, #40]	; 0x28
 801e55e:	4298      	cmp	r0, r3
 801e560:	bf04      	itt	eq
 801e562:	2301      	moveq	r3, #1
 801e564:	6183      	streq	r3, [r0, #24]
 801e566:	f000 f81f 	bl	801e5a8 <__sfp>
 801e56a:	6060      	str	r0, [r4, #4]
 801e56c:	4620      	mov	r0, r4
 801e56e:	f000 f81b 	bl	801e5a8 <__sfp>
 801e572:	60a0      	str	r0, [r4, #8]
 801e574:	4620      	mov	r0, r4
 801e576:	f000 f817 	bl	801e5a8 <__sfp>
 801e57a:	2200      	movs	r2, #0
 801e57c:	60e0      	str	r0, [r4, #12]
 801e57e:	2104      	movs	r1, #4
 801e580:	6860      	ldr	r0, [r4, #4]
 801e582:	f7ff ffa1 	bl	801e4c8 <std>
 801e586:	2201      	movs	r2, #1
 801e588:	2109      	movs	r1, #9
 801e58a:	68a0      	ldr	r0, [r4, #8]
 801e58c:	f7ff ff9c 	bl	801e4c8 <std>
 801e590:	2202      	movs	r2, #2
 801e592:	2112      	movs	r1, #18
 801e594:	68e0      	ldr	r0, [r4, #12]
 801e596:	f7ff ff97 	bl	801e4c8 <std>
 801e59a:	2301      	movs	r3, #1
 801e59c:	61a3      	str	r3, [r4, #24]
 801e59e:	bd10      	pop	{r4, pc}
 801e5a0:	08021c90 	.word	0x08021c90
 801e5a4:	0801e511 	.word	0x0801e511

0801e5a8 <__sfp>:
 801e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5aa:	4b1b      	ldr	r3, [pc, #108]	; (801e618 <__sfp+0x70>)
 801e5ac:	681e      	ldr	r6, [r3, #0]
 801e5ae:	69b3      	ldr	r3, [r6, #24]
 801e5b0:	4607      	mov	r7, r0
 801e5b2:	b913      	cbnz	r3, 801e5ba <__sfp+0x12>
 801e5b4:	4630      	mov	r0, r6
 801e5b6:	f7ff ffc7 	bl	801e548 <__sinit>
 801e5ba:	3648      	adds	r6, #72	; 0x48
 801e5bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e5c0:	3b01      	subs	r3, #1
 801e5c2:	d503      	bpl.n	801e5cc <__sfp+0x24>
 801e5c4:	6833      	ldr	r3, [r6, #0]
 801e5c6:	b133      	cbz	r3, 801e5d6 <__sfp+0x2e>
 801e5c8:	6836      	ldr	r6, [r6, #0]
 801e5ca:	e7f7      	b.n	801e5bc <__sfp+0x14>
 801e5cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e5d0:	b16d      	cbz	r5, 801e5ee <__sfp+0x46>
 801e5d2:	3468      	adds	r4, #104	; 0x68
 801e5d4:	e7f4      	b.n	801e5c0 <__sfp+0x18>
 801e5d6:	2104      	movs	r1, #4
 801e5d8:	4638      	mov	r0, r7
 801e5da:	f7ff ff9f 	bl	801e51c <__sfmoreglue>
 801e5de:	6030      	str	r0, [r6, #0]
 801e5e0:	2800      	cmp	r0, #0
 801e5e2:	d1f1      	bne.n	801e5c8 <__sfp+0x20>
 801e5e4:	230c      	movs	r3, #12
 801e5e6:	603b      	str	r3, [r7, #0]
 801e5e8:	4604      	mov	r4, r0
 801e5ea:	4620      	mov	r0, r4
 801e5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e5ee:	4b0b      	ldr	r3, [pc, #44]	; (801e61c <__sfp+0x74>)
 801e5f0:	6665      	str	r5, [r4, #100]	; 0x64
 801e5f2:	e9c4 5500 	strd	r5, r5, [r4]
 801e5f6:	60a5      	str	r5, [r4, #8]
 801e5f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801e5fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801e600:	2208      	movs	r2, #8
 801e602:	4629      	mov	r1, r5
 801e604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e608:	f7ff f9bd 	bl	801d986 <memset>
 801e60c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e614:	e7e9      	b.n	801e5ea <__sfp+0x42>
 801e616:	bf00      	nop
 801e618:	08021c90 	.word	0x08021c90
 801e61c:	ffff0001 	.word	0xffff0001

0801e620 <_fwalk_reent>:
 801e620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e624:	4680      	mov	r8, r0
 801e626:	4689      	mov	r9, r1
 801e628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e62c:	2600      	movs	r6, #0
 801e62e:	b914      	cbnz	r4, 801e636 <_fwalk_reent+0x16>
 801e630:	4630      	mov	r0, r6
 801e632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e636:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801e63a:	3f01      	subs	r7, #1
 801e63c:	d501      	bpl.n	801e642 <_fwalk_reent+0x22>
 801e63e:	6824      	ldr	r4, [r4, #0]
 801e640:	e7f5      	b.n	801e62e <_fwalk_reent+0xe>
 801e642:	89ab      	ldrh	r3, [r5, #12]
 801e644:	2b01      	cmp	r3, #1
 801e646:	d907      	bls.n	801e658 <_fwalk_reent+0x38>
 801e648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e64c:	3301      	adds	r3, #1
 801e64e:	d003      	beq.n	801e658 <_fwalk_reent+0x38>
 801e650:	4629      	mov	r1, r5
 801e652:	4640      	mov	r0, r8
 801e654:	47c8      	blx	r9
 801e656:	4306      	orrs	r6, r0
 801e658:	3568      	adds	r5, #104	; 0x68
 801e65a:	e7ee      	b.n	801e63a <_fwalk_reent+0x1a>

0801e65c <__swhatbuf_r>:
 801e65c:	b570      	push	{r4, r5, r6, lr}
 801e65e:	460e      	mov	r6, r1
 801e660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e664:	2900      	cmp	r1, #0
 801e666:	b096      	sub	sp, #88	; 0x58
 801e668:	4614      	mov	r4, r2
 801e66a:	461d      	mov	r5, r3
 801e66c:	da07      	bge.n	801e67e <__swhatbuf_r+0x22>
 801e66e:	2300      	movs	r3, #0
 801e670:	602b      	str	r3, [r5, #0]
 801e672:	89b3      	ldrh	r3, [r6, #12]
 801e674:	061a      	lsls	r2, r3, #24
 801e676:	d410      	bmi.n	801e69a <__swhatbuf_r+0x3e>
 801e678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e67c:	e00e      	b.n	801e69c <__swhatbuf_r+0x40>
 801e67e:	466a      	mov	r2, sp
 801e680:	f000 f8b8 	bl	801e7f4 <_fstat_r>
 801e684:	2800      	cmp	r0, #0
 801e686:	dbf2      	blt.n	801e66e <__swhatbuf_r+0x12>
 801e688:	9a01      	ldr	r2, [sp, #4]
 801e68a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e68e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e692:	425a      	negs	r2, r3
 801e694:	415a      	adcs	r2, r3
 801e696:	602a      	str	r2, [r5, #0]
 801e698:	e7ee      	b.n	801e678 <__swhatbuf_r+0x1c>
 801e69a:	2340      	movs	r3, #64	; 0x40
 801e69c:	2000      	movs	r0, #0
 801e69e:	6023      	str	r3, [r4, #0]
 801e6a0:	b016      	add	sp, #88	; 0x58
 801e6a2:	bd70      	pop	{r4, r5, r6, pc}

0801e6a4 <__smakebuf_r>:
 801e6a4:	898b      	ldrh	r3, [r1, #12]
 801e6a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e6a8:	079d      	lsls	r5, r3, #30
 801e6aa:	4606      	mov	r6, r0
 801e6ac:	460c      	mov	r4, r1
 801e6ae:	d507      	bpl.n	801e6c0 <__smakebuf_r+0x1c>
 801e6b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e6b4:	6023      	str	r3, [r4, #0]
 801e6b6:	6123      	str	r3, [r4, #16]
 801e6b8:	2301      	movs	r3, #1
 801e6ba:	6163      	str	r3, [r4, #20]
 801e6bc:	b002      	add	sp, #8
 801e6be:	bd70      	pop	{r4, r5, r6, pc}
 801e6c0:	ab01      	add	r3, sp, #4
 801e6c2:	466a      	mov	r2, sp
 801e6c4:	f7ff ffca 	bl	801e65c <__swhatbuf_r>
 801e6c8:	9900      	ldr	r1, [sp, #0]
 801e6ca:	4605      	mov	r5, r0
 801e6cc:	4630      	mov	r0, r6
 801e6ce:	f7ff f9b1 	bl	801da34 <_malloc_r>
 801e6d2:	b948      	cbnz	r0, 801e6e8 <__smakebuf_r+0x44>
 801e6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6d8:	059a      	lsls	r2, r3, #22
 801e6da:	d4ef      	bmi.n	801e6bc <__smakebuf_r+0x18>
 801e6dc:	f023 0303 	bic.w	r3, r3, #3
 801e6e0:	f043 0302 	orr.w	r3, r3, #2
 801e6e4:	81a3      	strh	r3, [r4, #12]
 801e6e6:	e7e3      	b.n	801e6b0 <__smakebuf_r+0xc>
 801e6e8:	4b0d      	ldr	r3, [pc, #52]	; (801e720 <__smakebuf_r+0x7c>)
 801e6ea:	62b3      	str	r3, [r6, #40]	; 0x28
 801e6ec:	89a3      	ldrh	r3, [r4, #12]
 801e6ee:	6020      	str	r0, [r4, #0]
 801e6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6f4:	81a3      	strh	r3, [r4, #12]
 801e6f6:	9b00      	ldr	r3, [sp, #0]
 801e6f8:	6163      	str	r3, [r4, #20]
 801e6fa:	9b01      	ldr	r3, [sp, #4]
 801e6fc:	6120      	str	r0, [r4, #16]
 801e6fe:	b15b      	cbz	r3, 801e718 <__smakebuf_r+0x74>
 801e700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e704:	4630      	mov	r0, r6
 801e706:	f000 f887 	bl	801e818 <_isatty_r>
 801e70a:	b128      	cbz	r0, 801e718 <__smakebuf_r+0x74>
 801e70c:	89a3      	ldrh	r3, [r4, #12]
 801e70e:	f023 0303 	bic.w	r3, r3, #3
 801e712:	f043 0301 	orr.w	r3, r3, #1
 801e716:	81a3      	strh	r3, [r4, #12]
 801e718:	89a3      	ldrh	r3, [r4, #12]
 801e71a:	431d      	orrs	r5, r3
 801e71c:	81a5      	strh	r5, [r4, #12]
 801e71e:	e7cd      	b.n	801e6bc <__smakebuf_r+0x18>
 801e720:	0801e511 	.word	0x0801e511

0801e724 <__malloc_lock>:
 801e724:	4770      	bx	lr

0801e726 <__malloc_unlock>:
 801e726:	4770      	bx	lr

0801e728 <__sread>:
 801e728:	b510      	push	{r4, lr}
 801e72a:	460c      	mov	r4, r1
 801e72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e730:	f000 f894 	bl	801e85c <_read_r>
 801e734:	2800      	cmp	r0, #0
 801e736:	bfab      	itete	ge
 801e738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e73a:	89a3      	ldrhlt	r3, [r4, #12]
 801e73c:	181b      	addge	r3, r3, r0
 801e73e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e742:	bfac      	ite	ge
 801e744:	6563      	strge	r3, [r4, #84]	; 0x54
 801e746:	81a3      	strhlt	r3, [r4, #12]
 801e748:	bd10      	pop	{r4, pc}

0801e74a <__swrite>:
 801e74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e74e:	461f      	mov	r7, r3
 801e750:	898b      	ldrh	r3, [r1, #12]
 801e752:	05db      	lsls	r3, r3, #23
 801e754:	4605      	mov	r5, r0
 801e756:	460c      	mov	r4, r1
 801e758:	4616      	mov	r6, r2
 801e75a:	d505      	bpl.n	801e768 <__swrite+0x1e>
 801e75c:	2302      	movs	r3, #2
 801e75e:	2200      	movs	r2, #0
 801e760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e764:	f000 f868 	bl	801e838 <_lseek_r>
 801e768:	89a3      	ldrh	r3, [r4, #12]
 801e76a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e76e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e772:	81a3      	strh	r3, [r4, #12]
 801e774:	4632      	mov	r2, r6
 801e776:	463b      	mov	r3, r7
 801e778:	4628      	mov	r0, r5
 801e77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e77e:	f000 b817 	b.w	801e7b0 <_write_r>

0801e782 <__sseek>:
 801e782:	b510      	push	{r4, lr}
 801e784:	460c      	mov	r4, r1
 801e786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e78a:	f000 f855 	bl	801e838 <_lseek_r>
 801e78e:	1c43      	adds	r3, r0, #1
 801e790:	89a3      	ldrh	r3, [r4, #12]
 801e792:	bf15      	itete	ne
 801e794:	6560      	strne	r0, [r4, #84]	; 0x54
 801e796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e79a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e79e:	81a3      	strheq	r3, [r4, #12]
 801e7a0:	bf18      	it	ne
 801e7a2:	81a3      	strhne	r3, [r4, #12]
 801e7a4:	bd10      	pop	{r4, pc}

0801e7a6 <__sclose>:
 801e7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7aa:	f000 b813 	b.w	801e7d4 <_close_r>
	...

0801e7b0 <_write_r>:
 801e7b0:	b538      	push	{r3, r4, r5, lr}
 801e7b2:	4c07      	ldr	r4, [pc, #28]	; (801e7d0 <_write_r+0x20>)
 801e7b4:	4605      	mov	r5, r0
 801e7b6:	4608      	mov	r0, r1
 801e7b8:	4611      	mov	r1, r2
 801e7ba:	2200      	movs	r2, #0
 801e7bc:	6022      	str	r2, [r4, #0]
 801e7be:	461a      	mov	r2, r3
 801e7c0:	f7e2 ffc7 	bl	8001752 <_write>
 801e7c4:	1c43      	adds	r3, r0, #1
 801e7c6:	d102      	bne.n	801e7ce <_write_r+0x1e>
 801e7c8:	6823      	ldr	r3, [r4, #0]
 801e7ca:	b103      	cbz	r3, 801e7ce <_write_r+0x1e>
 801e7cc:	602b      	str	r3, [r5, #0]
 801e7ce:	bd38      	pop	{r3, r4, r5, pc}
 801e7d0:	2000a41c 	.word	0x2000a41c

0801e7d4 <_close_r>:
 801e7d4:	b538      	push	{r3, r4, r5, lr}
 801e7d6:	4c06      	ldr	r4, [pc, #24]	; (801e7f0 <_close_r+0x1c>)
 801e7d8:	2300      	movs	r3, #0
 801e7da:	4605      	mov	r5, r0
 801e7dc:	4608      	mov	r0, r1
 801e7de:	6023      	str	r3, [r4, #0]
 801e7e0:	f7e2 ffd3 	bl	800178a <_close>
 801e7e4:	1c43      	adds	r3, r0, #1
 801e7e6:	d102      	bne.n	801e7ee <_close_r+0x1a>
 801e7e8:	6823      	ldr	r3, [r4, #0]
 801e7ea:	b103      	cbz	r3, 801e7ee <_close_r+0x1a>
 801e7ec:	602b      	str	r3, [r5, #0]
 801e7ee:	bd38      	pop	{r3, r4, r5, pc}
 801e7f0:	2000a41c 	.word	0x2000a41c

0801e7f4 <_fstat_r>:
 801e7f4:	b538      	push	{r3, r4, r5, lr}
 801e7f6:	4c07      	ldr	r4, [pc, #28]	; (801e814 <_fstat_r+0x20>)
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	4605      	mov	r5, r0
 801e7fc:	4608      	mov	r0, r1
 801e7fe:	4611      	mov	r1, r2
 801e800:	6023      	str	r3, [r4, #0]
 801e802:	f7e2 ffce 	bl	80017a2 <_fstat>
 801e806:	1c43      	adds	r3, r0, #1
 801e808:	d102      	bne.n	801e810 <_fstat_r+0x1c>
 801e80a:	6823      	ldr	r3, [r4, #0]
 801e80c:	b103      	cbz	r3, 801e810 <_fstat_r+0x1c>
 801e80e:	602b      	str	r3, [r5, #0]
 801e810:	bd38      	pop	{r3, r4, r5, pc}
 801e812:	bf00      	nop
 801e814:	2000a41c 	.word	0x2000a41c

0801e818 <_isatty_r>:
 801e818:	b538      	push	{r3, r4, r5, lr}
 801e81a:	4c06      	ldr	r4, [pc, #24]	; (801e834 <_isatty_r+0x1c>)
 801e81c:	2300      	movs	r3, #0
 801e81e:	4605      	mov	r5, r0
 801e820:	4608      	mov	r0, r1
 801e822:	6023      	str	r3, [r4, #0]
 801e824:	f7e2 ffcd 	bl	80017c2 <_isatty>
 801e828:	1c43      	adds	r3, r0, #1
 801e82a:	d102      	bne.n	801e832 <_isatty_r+0x1a>
 801e82c:	6823      	ldr	r3, [r4, #0]
 801e82e:	b103      	cbz	r3, 801e832 <_isatty_r+0x1a>
 801e830:	602b      	str	r3, [r5, #0]
 801e832:	bd38      	pop	{r3, r4, r5, pc}
 801e834:	2000a41c 	.word	0x2000a41c

0801e838 <_lseek_r>:
 801e838:	b538      	push	{r3, r4, r5, lr}
 801e83a:	4c07      	ldr	r4, [pc, #28]	; (801e858 <_lseek_r+0x20>)
 801e83c:	4605      	mov	r5, r0
 801e83e:	4608      	mov	r0, r1
 801e840:	4611      	mov	r1, r2
 801e842:	2200      	movs	r2, #0
 801e844:	6022      	str	r2, [r4, #0]
 801e846:	461a      	mov	r2, r3
 801e848:	f7e2 ffc6 	bl	80017d8 <_lseek>
 801e84c:	1c43      	adds	r3, r0, #1
 801e84e:	d102      	bne.n	801e856 <_lseek_r+0x1e>
 801e850:	6823      	ldr	r3, [r4, #0]
 801e852:	b103      	cbz	r3, 801e856 <_lseek_r+0x1e>
 801e854:	602b      	str	r3, [r5, #0]
 801e856:	bd38      	pop	{r3, r4, r5, pc}
 801e858:	2000a41c 	.word	0x2000a41c

0801e85c <_read_r>:
 801e85c:	b538      	push	{r3, r4, r5, lr}
 801e85e:	4c07      	ldr	r4, [pc, #28]	; (801e87c <_read_r+0x20>)
 801e860:	4605      	mov	r5, r0
 801e862:	4608      	mov	r0, r1
 801e864:	4611      	mov	r1, r2
 801e866:	2200      	movs	r2, #0
 801e868:	6022      	str	r2, [r4, #0]
 801e86a:	461a      	mov	r2, r3
 801e86c:	f7e2 ff54 	bl	8001718 <_read>
 801e870:	1c43      	adds	r3, r0, #1
 801e872:	d102      	bne.n	801e87a <_read_r+0x1e>
 801e874:	6823      	ldr	r3, [r4, #0]
 801e876:	b103      	cbz	r3, 801e87a <_read_r+0x1e>
 801e878:	602b      	str	r3, [r5, #0]
 801e87a:	bd38      	pop	{r3, r4, r5, pc}
 801e87c:	2000a41c 	.word	0x2000a41c

0801e880 <_init>:
 801e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e882:	bf00      	nop
 801e884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e886:	bc08      	pop	{r3}
 801e888:	469e      	mov	lr, r3
 801e88a:	4770      	bx	lr

0801e88c <_fini>:
 801e88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e88e:	bf00      	nop
 801e890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e892:	bc08      	pop	{r3}
 801e894:	469e      	mov	lr, r3
 801e896:	4770      	bx	lr
